/*
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AirportsSearchResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CitiesResponse;
import org.openapitools.client.model.ContinentsResponse;
import org.openapitools.client.model.CountriesResponse;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeographyApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeographyApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeographyApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAirport
     * @param language the language code of the language you want the content to be returned (required)
     * @param location The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport. (optional)
     * @param radius Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed (optional, default to 100)
     * @param countrycode Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius (optional)
     * @param topAirports Filter the results to only the top and large airports airports. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportCall(String language, String location, Integer radius, String countrycode, Boolean topAirports, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        if (topAirports != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top_airports", topAirports));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAirportValidateBeforeCall(String language, String location, Integer radius, String countrycode, Boolean topAirports, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getAirport(Async)");
        }

        return getAirportCall(language, location, radius, countrycode, topAirports, _callback);

    }

    /**
     * Search airports by country / Search nearby airports / Search an airport
     * This webservice is providing you the ability to retrieve a list of airports matching your search criterias.&lt;br /&gt;The 3 mains search criterias are&lt;br /&gt;- by country code, this will list all airports for a given country.&lt;br /&gt;- by latitude/longitude with a radius in km. You can actually combine those 2 criterias, and search for example the closest airport in the USA of Vancoucer, Canada.&lt;br /&gt;- The last way to use the API is by searching directly with a IATA CODE in the location parameter, this will only return one result in the array of data results
     * @param language the language code of the language you want the content to be returned (required)
     * @param location The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport. (optional)
     * @param radius Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed (optional, default to 100)
     * @param countrycode Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius (optional)
     * @param topAirports Filter the results to only the top and large airports airports. (optional)
     * @return AirportsSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public AirportsSearchResponse getAirport(String language, String location, Integer radius, String countrycode, Boolean topAirports) throws ApiException {
        ApiResponse<AirportsSearchResponse> localVarResp = getAirportWithHttpInfo(language, location, radius, countrycode, topAirports);
        return localVarResp.getData();
    }

    /**
     * Search airports by country / Search nearby airports / Search an airport
     * This webservice is providing you the ability to retrieve a list of airports matching your search criterias.&lt;br /&gt;The 3 mains search criterias are&lt;br /&gt;- by country code, this will list all airports for a given country.&lt;br /&gt;- by latitude/longitude with a radius in km. You can actually combine those 2 criterias, and search for example the closest airport in the USA of Vancoucer, Canada.&lt;br /&gt;- The last way to use the API is by searching directly with a IATA CODE in the location parameter, this will only return one result in the array of data results
     * @param language the language code of the language you want the content to be returned (required)
     * @param location The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport. (optional)
     * @param radius Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed (optional, default to 100)
     * @param countrycode Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius (optional)
     * @param topAirports Filter the results to only the top and large airports airports. (optional)
     * @return ApiResponse&lt;AirportsSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AirportsSearchResponse> getAirportWithHttpInfo(String language, String location, Integer radius, String countrycode, Boolean topAirports) throws ApiException {
        okhttp3.Call localVarCall = getAirportValidateBeforeCall(language, location, radius, countrycode, topAirports, null);
        Type localVarReturnType = new TypeToken<AirportsSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search airports by country / Search nearby airports / Search an airport (asynchronously)
     * This webservice is providing you the ability to retrieve a list of airports matching your search criterias.&lt;br /&gt;The 3 mains search criterias are&lt;br /&gt;- by country code, this will list all airports for a given country.&lt;br /&gt;- by latitude/longitude with a radius in km. You can actually combine those 2 criterias, and search for example the closest airport in the USA of Vancoucer, Canada.&lt;br /&gt;- The last way to use the API is by searching directly with a IATA CODE in the location parameter, this will only return one result in the array of data results
     * @param language the language code of the language you want the content to be returned (required)
     * @param location The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport. (optional)
     * @param radius Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed (optional, default to 100)
     * @param countrycode Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius (optional)
     * @param topAirports Filter the results to only the top and large airports airports. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAirportAsync(String language, String location, Integer radius, String countrycode, Boolean topAirports, final ApiCallback<AirportsSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAirportValidateBeforeCall(language, location, radius, countrycode, topAirports, _callback);
        Type localVarReturnType = new TypeToken<AirportsSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutocomplete
     * @param q the string you want to search (required)
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutocompleteCall(String q, String language, String sort, String countrycode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cities/findcitiesfromtext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutocompleteValidateBeforeCall(String q, String language, String sort, String countrycode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getAutocomplete(Async)");
        }

        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getAutocomplete(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getAutocomplete(Async)");
        }

        return getAutocompleteCall(q, language, sort, countrycode, _callback);

    }

    /**
     * Retrieve cities informations from a string / build an autocomplete
     * Search cities from a string parameters.
     * @param q the string you want to search (required)
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @return CitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public CitiesResponse getAutocomplete(String q, String language, String sort, String countrycode) throws ApiException {
        ApiResponse<CitiesResponse> localVarResp = getAutocompleteWithHttpInfo(q, language, sort, countrycode);
        return localVarResp.getData();
    }

    /**
     * Retrieve cities informations from a string / build an autocomplete
     * Search cities from a string parameters.
     * @param q the string you want to search (required)
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @return ApiResponse&lt;CitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CitiesResponse> getAutocompleteWithHttpInfo(String q, String language, String sort, String countrycode) throws ApiException {
        okhttp3.Call localVarCall = getAutocompleteValidateBeforeCall(q, language, sort, countrycode, null);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve cities informations from a string / build an autocomplete (asynchronously)
     * Search cities from a string parameters.
     * @param q the string you want to search (required)
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutocompleteAsync(String q, String language, String sort, String countrycode, final ApiCallback<CitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutocompleteValidateBeforeCall(q, language, sort, countrycode, _callback);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCities
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCitiesCall(String language, String sort, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cities/findcitiesfromlatlong";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCitiesValidateBeforeCall(String language, String sort, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getCities(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getCities(Async)");
        }

        return getCitiesCall(language, sort, countrycode, location, radius, limit, offset, _callback);

    }

    /**
     * Search all cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @return CitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public CitiesResponse getCities(String language, String sort, String countrycode, String location, Integer radius, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CitiesResponse> localVarResp = getCitiesWithHttpInfo(language, sort, countrycode, location, radius, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Search all cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @return ApiResponse&lt;CitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CitiesResponse> getCitiesWithHttpInfo(String language, String sort, String countrycode, String location, Integer radius, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCitiesValidateBeforeCall(language, sort, countrycode, location, radius, limit, offset, null);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all cities from lat/long or countrycode (asynchronously)
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCitiesAsync(String language, String sort, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback<CitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCitiesValidateBeforeCall(language, sort, countrycode, location, radius, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContinents
     * @param language The language code of the language you want the content to be returned (required)
     * @param continentcode The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinentsCall(String language, String continentcode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/continents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (continentcode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continentcode", continentcode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContinentsValidateBeforeCall(String language, String continentcode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getContinents(Async)");
        }

        return getContinentsCall(language, continentcode, _callback);

    }

    /**
     * Search all continents or one specific continent
     * This webservice is providing you the ability to retrieve all informations about continents
     * @param language The language code of the language you want the content to be returned (required)
     * @param continentcode The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once (optional)
     * @return ContinentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ContinentsResponse getContinents(String language, String continentcode) throws ApiException {
        ApiResponse<ContinentsResponse> localVarResp = getContinentsWithHttpInfo(language, continentcode);
        return localVarResp.getData();
    }

    /**
     * Search all continents or one specific continent
     * This webservice is providing you the ability to retrieve all informations about continents
     * @param language The language code of the language you want the content to be returned (required)
     * @param continentcode The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once (optional)
     * @return ApiResponse&lt;ContinentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContinentsResponse> getContinentsWithHttpInfo(String language, String continentcode) throws ApiException {
        okhttp3.Call localVarCall = getContinentsValidateBeforeCall(language, continentcode, null);
        Type localVarReturnType = new TypeToken<ContinentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all continents or one specific continent (asynchronously)
     * This webservice is providing you the ability to retrieve all informations about continents
     * @param language The language code of the language you want the content to be returned (required)
     * @param continentcode The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContinentsAsync(String language, String continentcode, final ApiCallback<ContinentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContinentsValidateBeforeCall(language, continentcode, _callback);
        Type localVarReturnType = new TypeToken<ContinentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCountries
     * @param language the language code of the language you want the content to be returned (required)
     * @param countrycode The code of the country you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesCall(String language, String countrycode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountriesValidateBeforeCall(String language, String countrycode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getCountries(Async)");
        }

        return getCountriesCall(language, countrycode, _callback);

    }

    /**
     * Search all countries or one specific country
     * This webservice is providing you the ability to retrieve a list of countries matching your search criterias.&lt;br /&gt;The 2 mains ways to search use this API are&lt;br /&gt;- by countrycode, it will only returns you one country&lt;br /&gt;- without the countrycode parameter which will return the full list of countries
     * @param language the language code of the language you want the content to be returned (required)
     * @param countrycode The code of the country you want to retrieve (optional)
     * @return CountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public CountriesResponse getCountries(String language, String countrycode) throws ApiException {
        ApiResponse<CountriesResponse> localVarResp = getCountriesWithHttpInfo(language, countrycode);
        return localVarResp.getData();
    }

    /**
     * Search all countries or one specific country
     * This webservice is providing you the ability to retrieve a list of countries matching your search criterias.&lt;br /&gt;The 2 mains ways to search use this API are&lt;br /&gt;- by countrycode, it will only returns you one country&lt;br /&gt;- without the countrycode parameter which will return the full list of countries
     * @param language the language code of the language you want the content to be returned (required)
     * @param countrycode The code of the country you want to retrieve (optional)
     * @return ApiResponse&lt;CountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CountriesResponse> getCountriesWithHttpInfo(String language, String countrycode) throws ApiException {
        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(language, countrycode, null);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search all countries or one specific country (asynchronously)
     * This webservice is providing you the ability to retrieve a list of countries matching your search criterias.&lt;br /&gt;The 2 mains ways to search use this API are&lt;br /&gt;- by countrycode, it will only returns you one country&lt;br /&gt;- without the countrycode parameter which will return the full list of countries
     * @param language the language code of the language you want the content to be returned (required)
     * @param countrycode The code of the country you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCountriesAsync(String language, String countrycode, final ApiCallback<CountriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountriesValidateBeforeCall(language, countrycode, _callback);
        Type localVarReturnType = new TypeToken<CountriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSignificantCities
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param pourcent The pourcent of population the cities need to be in order to appear in results (optional, default to 0.5)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSignificantCitiesCall(String language, String sort, BigDecimal pourcent, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cities/significant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (pourcent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pourcent", pourcent));
        }

        if (countrycode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrycode", countrycode));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSignificantCitiesValidateBeforeCall(String language, String sort, BigDecimal pourcent, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling getSignificantCities(Async)");
        }

        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getSignificantCities(Async)");
        }

        return getSignificantCitiesCall(language, sort, pourcent, countrycode, location, radius, limit, offset, _callback);

    }

    /**
     * Search significant cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param pourcent The pourcent of population the cities need to be in order to appear in results (optional, default to 0.5)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @return CitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public CitiesResponse getSignificantCities(String language, String sort, BigDecimal pourcent, String countrycode, String location, Integer radius, Integer limit, Integer offset) throws ApiException {
        ApiResponse<CitiesResponse> localVarResp = getSignificantCitiesWithHttpInfo(language, sort, pourcent, countrycode, location, radius, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Search significant cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param pourcent The pourcent of population the cities need to be in order to appear in results (optional, default to 0.5)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @return ApiResponse&lt;CitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CitiesResponse> getSignificantCitiesWithHttpInfo(String language, String sort, BigDecimal pourcent, String countrycode, String location, Integer radius, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getSignificantCitiesValidateBeforeCall(language, sort, pourcent, countrycode, location, radius, limit, offset, null);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search significant cities from lat/long or countrycode (asynchronously)
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.&lt;br /&gt; A significant city will be defined according to the pourcent of population within a country.
     * @param language the language code of the language you want the content to be returned (required)
     * @param sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point (required)
     * @param pourcent The pourcent of population the cities need to be in order to appear in results (optional, default to 0.5)
     * @param countrycode if you want to limit the result to one country (optional)
     * @param location The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456) (optional)
     * @param radius Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed (optional, default to 20)
     * @param limit Limit of the result. Default is 20 rows, and maximum is 50. (optional, default to 20)
     * @param offset offset of the result set (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The error message object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSignificantCitiesAsync(String language, String sort, BigDecimal pourcent, String countrycode, String location, Integer radius, Integer limit, Integer offset, final ApiCallback<CitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSignificantCitiesValidateBeforeCall(language, sort, pourcent, countrycode, location, radius, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
