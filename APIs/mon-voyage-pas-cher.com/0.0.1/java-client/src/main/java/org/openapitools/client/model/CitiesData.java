/*
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the data object for the response of a Cities APIs calls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:34.416765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CitiesData {
  public static final String SERIALIZED_NAME_ALTERNATENAME = "alternatename";
  @SerializedName(SERIALIZED_NAME_ALTERNATENAME)
  private List<String> alternatename = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASCIINAME = "asciiname";
  @SerializedName(SERIALIZED_NAME_ASCIINAME)
  private String asciiname;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ELEVATION = "elevation";
  @SerializedName(SERIALIZED_NAME_ELEVATION)
  private BigDecimal elevation;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POPULATION = "population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private BigDecimal population;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public CitiesData() {
  }

  public CitiesData alternatename(List<String> alternatename) {
    this.alternatename = alternatename;
    return this;
  }

  public CitiesData addAlternatenameItem(String alternatenameItem) {
    if (this.alternatename == null) {
      this.alternatename = new ArrayList<>();
    }
    this.alternatename.add(alternatenameItem);
    return this;
  }

  /**
   * Get alternatename
   * @return alternatename
   */
  @javax.annotation.Nullable
  public List<String> getAlternatename() {
    return alternatename;
  }

  public void setAlternatename(List<String> alternatename) {
    this.alternatename = alternatename;
  }


  public CitiesData asciiname(String asciiname) {
    this.asciiname = asciiname;
    return this;
  }

  /**
   * The ASCII name of the city
   * @return asciiname
   */
  @javax.annotation.Nullable
  public String getAsciiname() {
    return asciiname;
  }

  public void setAsciiname(String asciiname) {
    this.asciiname = asciiname;
  }


  public CitiesData country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The 2 letter ISO code of the country the city belongs to
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CitiesData elevation(BigDecimal elevation) {
    this.elevation = elevation;
    return this;
  }

  /**
   * The elevation of the city
   * @return elevation
   */
  @javax.annotation.Nullable
  public BigDecimal getElevation() {
    return elevation;
  }

  public void setElevation(BigDecimal elevation) {
    this.elevation = elevation;
  }


  public CitiesData latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude considered as central for the city
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public CitiesData longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude considered as central for the city
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public CitiesData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the city
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CitiesData population(BigDecimal population) {
    this.population = population;
    return this;
  }

  /**
   * The population of the city
   * @return population
   */
  @javax.annotation.Nullable
  public BigDecimal getPopulation() {
    return population;
  }

  public void setPopulation(BigDecimal population) {
    this.population = population;
  }


  public CitiesData timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The longitude considered as central for the city
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CitiesData citiesData = (CitiesData) o;
    return Objects.equals(this.alternatename, citiesData.alternatename) &&
        Objects.equals(this.asciiname, citiesData.asciiname) &&
        Objects.equals(this.country, citiesData.country) &&
        Objects.equals(this.elevation, citiesData.elevation) &&
        Objects.equals(this.latitude, citiesData.latitude) &&
        Objects.equals(this.longitude, citiesData.longitude) &&
        Objects.equals(this.name, citiesData.name) &&
        Objects.equals(this.population, citiesData.population) &&
        Objects.equals(this.timezone, citiesData.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternatename, asciiname, country, elevation, latitude, longitude, name, population, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CitiesData {\n");
    sb.append("    alternatename: ").append(toIndentedString(alternatename)).append("\n");
    sb.append("    asciiname: ").append(toIndentedString(asciiname)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    elevation: ").append(toIndentedString(elevation)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternatename");
    openapiFields.add("asciiname");
    openapiFields.add("country");
    openapiFields.add("elevation");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("population");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CitiesData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CitiesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CitiesData is not found in the empty JSON string", CitiesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CitiesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CitiesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternatename") != null && !jsonObj.get("alternatename").isJsonNull() && !jsonObj.get("alternatename").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternatename` to be an array in the JSON string but got `%s`", jsonObj.get("alternatename").toString()));
      }
      if ((jsonObj.get("asciiname") != null && !jsonObj.get("asciiname").isJsonNull()) && !jsonObj.get("asciiname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asciiname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asciiname").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CitiesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CitiesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CitiesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CitiesData.class));

       return (TypeAdapter<T>) new TypeAdapter<CitiesData>() {
           @Override
           public void write(JsonWriter out, CitiesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CitiesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CitiesData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CitiesData
   * @throws IOException if the JSON string is invalid with respect to CitiesData
   */
  public static CitiesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CitiesData.class);
  }

  /**
   * Convert an instance of CitiesData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

