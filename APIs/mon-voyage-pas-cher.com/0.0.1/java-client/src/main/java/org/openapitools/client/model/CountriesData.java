/*
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is the data object for the response of a Countries API call
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:34.416765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountriesData {
  public static final String SERIALIZED_NAME_AIRPORTSCOUNT = "airportscount";
  @SerializedName(SERIALIZED_NAME_AIRPORTSCOUNT)
  private BigDecimal airportscount;

  public static final String SERIALIZED_NAME_ALTERNATENAME = "alternatename";
  @SerializedName(SERIALIZED_NAME_ALTERNATENAME)
  private List<String> alternatename = new ArrayList<>();

  public static final String SERIALIZED_NAME_AREAINSQKM = "areainsqkm";
  @SerializedName(SERIALIZED_NAME_AREAINSQKM)
  private BigDecimal areainsqkm;

  public static final String SERIALIZED_NAME_CAPITAL = "capital";
  @SerializedName(SERIALIZED_NAME_CAPITAL)
  private String capital;

  public static final String SERIALIZED_NAME_CURRENCYCODE = "currencycode";
  @SerializedName(SERIALIZED_NAME_CURRENCYCODE)
  private String currencycode;

  public static final String SERIALIZED_NAME_CURRENCYNAME = "currencyname";
  @SerializedName(SERIALIZED_NAME_CURRENCYNAME)
  private String currencyname;

  public static final String SERIALIZED_NAME_FR_ARTICLE = "fr_article";
  @SerializedName(SERIALIZED_NAME_FR_ARTICLE)
  private String frArticle;

  public static final String SERIALIZED_NAME_FR_PREPOSITION = "fr_preposition";
  @SerializedName(SERIALIZED_NAME_FR_PREPOSITION)
  private String frPreposition;

  public static final String SERIALIZED_NAME_ISO_ALPHA2 = "iso_alpha2";
  @SerializedName(SERIALIZED_NAME_ISO_ALPHA2)
  private String isoAlpha2;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private String languages;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_LOCALE = "name_locale";
  @SerializedName(SERIALIZED_NAME_NAME_LOCALE)
  private String nameLocale;

  public static final String SERIALIZED_NAME_NEIGHBORS = "neighbors";
  @SerializedName(SERIALIZED_NAME_NEIGHBORS)
  private List<String> neighbors = new ArrayList<>();

  public static final String SERIALIZED_NAME_POPULATION = "population";
  @SerializedName(SERIALIZED_NAME_POPULATION)
  private BigDecimal population;

  public static final String SERIALIZED_NAME_POSTALCODE = "postalcode";
  @SerializedName(SERIALIZED_NAME_POSTALCODE)
  private String postalcode;

  public static final String SERIALIZED_NAME_POSTALCODEREGEX = "postalcoderegex";
  @SerializedName(SERIALIZED_NAME_POSTALCODEREGEX)
  private String postalcoderegex;

  public static final String SERIALIZED_NAME_TLD = "tld";
  @SerializedName(SERIALIZED_NAME_TLD)
  private String tld;

  public CountriesData() {
  }

  public CountriesData airportscount(BigDecimal airportscount) {
    this.airportscount = airportscount;
    return this;
  }

  /**
   * The name of the country in english language
   * @return airportscount
   */
  @javax.annotation.Nullable
  public BigDecimal getAirportscount() {
    return airportscount;
  }

  public void setAirportscount(BigDecimal airportscount) {
    this.airportscount = airportscount;
  }


  public CountriesData alternatename(List<String> alternatename) {
    this.alternatename = alternatename;
    return this;
  }

  public CountriesData addAlternatenameItem(String alternatenameItem) {
    if (this.alternatename == null) {
      this.alternatename = new ArrayList<>();
    }
    this.alternatename.add(alternatenameItem);
    return this;
  }

  /**
   * Get alternatename
   * @return alternatename
   */
  @javax.annotation.Nullable
  public List<String> getAlternatename() {
    return alternatename;
  }

  public void setAlternatename(List<String> alternatename) {
    this.alternatename = alternatename;
  }


  public CountriesData areainsqkm(BigDecimal areainsqkm) {
    this.areainsqkm = areainsqkm;
    return this;
  }

  /**
   * The superficy of the country in square km
   * @return areainsqkm
   */
  @javax.annotation.Nullable
  public BigDecimal getAreainsqkm() {
    return areainsqkm;
  }

  public void setAreainsqkm(BigDecimal areainsqkm) {
    this.areainsqkm = areainsqkm;
  }


  public CountriesData capital(String capital) {
    this.capital = capital;
    return this;
  }

  /**
   * The capital of this country in english language
   * @return capital
   */
  @javax.annotation.Nullable
  public String getCapital() {
    return capital;
  }

  public void setCapital(String capital) {
    this.capital = capital;
  }


  public CountriesData currencycode(String currencycode) {
    this.currencycode = currencycode;
    return this;
  }

  /**
   * The international currency code
   * @return currencycode
   */
  @javax.annotation.Nullable
  public String getCurrencycode() {
    return currencycode;
  }

  public void setCurrencycode(String currencycode) {
    this.currencycode = currencycode;
  }


  public CountriesData currencyname(String currencyname) {
    this.currencyname = currencyname;
    return this;
  }

  /**
   * The local name of the currency used in this country
   * @return currencyname
   */
  @javax.annotation.Nullable
  public String getCurrencyname() {
    return currencyname;
  }

  public void setCurrencyname(String currencyname) {
    this.currencyname = currencyname;
  }


  public CountriesData frArticle(String frArticle) {
    this.frArticle = frArticle;
    return this;
  }

  /**
   * The name of the country in english language
   * @return frArticle
   */
  @javax.annotation.Nullable
  public String getFrArticle() {
    return frArticle;
  }

  public void setFrArticle(String frArticle) {
    this.frArticle = frArticle;
  }


  public CountriesData frPreposition(String frPreposition) {
    this.frPreposition = frPreposition;
    return this;
  }

  /**
   * The name of the country in english language
   * @return frPreposition
   */
  @javax.annotation.Nullable
  public String getFrPreposition() {
    return frPreposition;
  }

  public void setFrPreposition(String frPreposition) {
    this.frPreposition = frPreposition;
  }


  public CountriesData isoAlpha2(String isoAlpha2) {
    this.isoAlpha2 = isoAlpha2;
    return this;
  }

  /**
   * The 2 letter ISO code of the country
   * @return isoAlpha2
   */
  @javax.annotation.Nullable
  public String getIsoAlpha2() {
    return isoAlpha2;
  }

  public void setIsoAlpha2(String isoAlpha2) {
    this.isoAlpha2 = isoAlpha2;
  }


  public CountriesData languages(String languages) {
    this.languages = languages;
    return this;
  }

  /**
   * The name of the country in english language
   * @return languages
   */
  @javax.annotation.Nullable
  public String getLanguages() {
    return languages;
  }

  public void setLanguages(String languages) {
    this.languages = languages;
  }


  public CountriesData latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude considered as central for this country
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public CountriesData longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude considered as central for this country
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public CountriesData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the country in english language
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CountriesData nameLocale(String nameLocale) {
    this.nameLocale = nameLocale;
    return this;
  }

  /**
   * The name of the country in the requested language
   * @return nameLocale
   */
  @javax.annotation.Nullable
  public String getNameLocale() {
    return nameLocale;
  }

  public void setNameLocale(String nameLocale) {
    this.nameLocale = nameLocale;
  }


  public CountriesData neighbors(List<String> neighbors) {
    this.neighbors = neighbors;
    return this;
  }

  public CountriesData addNeighborsItem(String neighborsItem) {
    if (this.neighbors == null) {
      this.neighbors = new ArrayList<>();
    }
    this.neighbors.add(neighborsItem);
    return this;
  }

  /**
   * Get neighbors
   * @return neighbors
   */
  @javax.annotation.Nullable
  public List<String> getNeighbors() {
    return neighbors;
  }

  public void setNeighbors(List<String> neighbors) {
    this.neighbors = neighbors;
  }


  public CountriesData population(BigDecimal population) {
    this.population = population;
    return this;
  }

  /**
   * The total population in this country
   * @return population
   */
  @javax.annotation.Nullable
  public BigDecimal getPopulation() {
    return population;
  }

  public void setPopulation(BigDecimal population) {
    this.population = population;
  }


  public CountriesData postalcode(String postalcode) {
    this.postalcode = postalcode;
    return this;
  }

  /**
   * The format of the postal codes if multiple format to be applied, then a pipe | is used as separator
   * @return postalcode
   */
  @javax.annotation.Nullable
  public String getPostalcode() {
    return postalcode;
  }

  public void setPostalcode(String postalcode) {
    this.postalcode = postalcode;
  }


  public CountriesData postalcoderegex(String postalcoderegex) {
    this.postalcoderegex = postalcoderegex;
    return this;
  }

  /**
   * The regex to use to check a postal code for this country
   * @return postalcoderegex
   */
  @javax.annotation.Nullable
  public String getPostalcoderegex() {
    return postalcoderegex;
  }

  public void setPostalcoderegex(String postalcoderegex) {
    this.postalcoderegex = postalcoderegex;
  }


  public CountriesData tld(String tld) {
    this.tld = tld;
    return this;
  }

  /**
   * The top level domain which is used by the local internet authority.
   * @return tld
   */
  @javax.annotation.Nullable
  public String getTld() {
    return tld;
  }

  public void setTld(String tld) {
    this.tld = tld;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountriesData countriesData = (CountriesData) o;
    return Objects.equals(this.airportscount, countriesData.airportscount) &&
        Objects.equals(this.alternatename, countriesData.alternatename) &&
        Objects.equals(this.areainsqkm, countriesData.areainsqkm) &&
        Objects.equals(this.capital, countriesData.capital) &&
        Objects.equals(this.currencycode, countriesData.currencycode) &&
        Objects.equals(this.currencyname, countriesData.currencyname) &&
        Objects.equals(this.frArticle, countriesData.frArticle) &&
        Objects.equals(this.frPreposition, countriesData.frPreposition) &&
        Objects.equals(this.isoAlpha2, countriesData.isoAlpha2) &&
        Objects.equals(this.languages, countriesData.languages) &&
        Objects.equals(this.latitude, countriesData.latitude) &&
        Objects.equals(this.longitude, countriesData.longitude) &&
        Objects.equals(this.name, countriesData.name) &&
        Objects.equals(this.nameLocale, countriesData.nameLocale) &&
        Objects.equals(this.neighbors, countriesData.neighbors) &&
        Objects.equals(this.population, countriesData.population) &&
        Objects.equals(this.postalcode, countriesData.postalcode) &&
        Objects.equals(this.postalcoderegex, countriesData.postalcoderegex) &&
        Objects.equals(this.tld, countriesData.tld);
  }

  @Override
  public int hashCode() {
    return Objects.hash(airportscount, alternatename, areainsqkm, capital, currencycode, currencyname, frArticle, frPreposition, isoAlpha2, languages, latitude, longitude, name, nameLocale, neighbors, population, postalcode, postalcoderegex, tld);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountriesData {\n");
    sb.append("    airportscount: ").append(toIndentedString(airportscount)).append("\n");
    sb.append("    alternatename: ").append(toIndentedString(alternatename)).append("\n");
    sb.append("    areainsqkm: ").append(toIndentedString(areainsqkm)).append("\n");
    sb.append("    capital: ").append(toIndentedString(capital)).append("\n");
    sb.append("    currencycode: ").append(toIndentedString(currencycode)).append("\n");
    sb.append("    currencyname: ").append(toIndentedString(currencyname)).append("\n");
    sb.append("    frArticle: ").append(toIndentedString(frArticle)).append("\n");
    sb.append("    frPreposition: ").append(toIndentedString(frPreposition)).append("\n");
    sb.append("    isoAlpha2: ").append(toIndentedString(isoAlpha2)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameLocale: ").append(toIndentedString(nameLocale)).append("\n");
    sb.append("    neighbors: ").append(toIndentedString(neighbors)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    postalcode: ").append(toIndentedString(postalcode)).append("\n");
    sb.append("    postalcoderegex: ").append(toIndentedString(postalcoderegex)).append("\n");
    sb.append("    tld: ").append(toIndentedString(tld)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("airportscount");
    openapiFields.add("alternatename");
    openapiFields.add("areainsqkm");
    openapiFields.add("capital");
    openapiFields.add("currencycode");
    openapiFields.add("currencyname");
    openapiFields.add("fr_article");
    openapiFields.add("fr_preposition");
    openapiFields.add("iso_alpha2");
    openapiFields.add("languages");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("name");
    openapiFields.add("name_locale");
    openapiFields.add("neighbors");
    openapiFields.add("population");
    openapiFields.add("postalcode");
    openapiFields.add("postalcoderegex");
    openapiFields.add("tld");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountriesData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountriesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountriesData is not found in the empty JSON string", CountriesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountriesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountriesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternatename") != null && !jsonObj.get("alternatename").isJsonNull() && !jsonObj.get("alternatename").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternatename` to be an array in the JSON string but got `%s`", jsonObj.get("alternatename").toString()));
      }
      if ((jsonObj.get("capital") != null && !jsonObj.get("capital").isJsonNull()) && !jsonObj.get("capital").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capital` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capital").toString()));
      }
      if ((jsonObj.get("currencycode") != null && !jsonObj.get("currencycode").isJsonNull()) && !jsonObj.get("currencycode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencycode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencycode").toString()));
      }
      if ((jsonObj.get("currencyname") != null && !jsonObj.get("currencyname").isJsonNull()) && !jsonObj.get("currencyname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyname").toString()));
      }
      if ((jsonObj.get("fr_article") != null && !jsonObj.get("fr_article").isJsonNull()) && !jsonObj.get("fr_article").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fr_article` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fr_article").toString()));
      }
      if ((jsonObj.get("fr_preposition") != null && !jsonObj.get("fr_preposition").isJsonNull()) && !jsonObj.get("fr_preposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fr_preposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fr_preposition").toString()));
      }
      if ((jsonObj.get("iso_alpha2") != null && !jsonObj.get("iso_alpha2").isJsonNull()) && !jsonObj.get("iso_alpha2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iso_alpha2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iso_alpha2").toString()));
      }
      if ((jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull()) && !jsonObj.get("languages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_locale") != null && !jsonObj.get("name_locale").isJsonNull()) && !jsonObj.get("name_locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_locale").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("neighbors") != null && !jsonObj.get("neighbors").isJsonNull() && !jsonObj.get("neighbors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighbors` to be an array in the JSON string but got `%s`", jsonObj.get("neighbors").toString()));
      }
      if ((jsonObj.get("postalcode") != null && !jsonObj.get("postalcode").isJsonNull()) && !jsonObj.get("postalcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalcode").toString()));
      }
      if ((jsonObj.get("postalcoderegex") != null && !jsonObj.get("postalcoderegex").isJsonNull()) && !jsonObj.get("postalcoderegex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalcoderegex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalcoderegex").toString()));
      }
      if ((jsonObj.get("tld") != null && !jsonObj.get("tld").isJsonNull()) && !jsonObj.get("tld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountriesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountriesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountriesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountriesData.class));

       return (TypeAdapter<T>) new TypeAdapter<CountriesData>() {
           @Override
           public void write(JsonWriter out, CountriesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountriesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountriesData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountriesData
   * @throws IOException if the JSON string is invalid with respect to CountriesData
   */
  public static CountriesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountriesData.class);
  }

  /**
   * Convert an instance of CountriesData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

