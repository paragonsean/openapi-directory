/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MonVoyagePasCherComPublicApi);
  }
}(this, function(expect, MonVoyagePasCherComPublicApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MonVoyagePasCherComPublicApi.CountriesData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CountriesData', function() {
    it('should create an instance of CountriesData', function() {
      // uncomment below and update the code to test CountriesData
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be.a(MonVoyagePasCherComPublicApi.CountriesData);
    });

    it('should have the property airportscount (base name: "airportscount")', function() {
      // uncomment below and update the code to test the property airportscount
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property alternatename (base name: "alternatename")', function() {
      // uncomment below and update the code to test the property alternatename
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property areainsqkm (base name: "areainsqkm")', function() {
      // uncomment below and update the code to test the property areainsqkm
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property capital (base name: "capital")', function() {
      // uncomment below and update the code to test the property capital
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property currencycode (base name: "currencycode")', function() {
      // uncomment below and update the code to test the property currencycode
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property currencyname (base name: "currencyname")', function() {
      // uncomment below and update the code to test the property currencyname
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property frArticle (base name: "fr_article")', function() {
      // uncomment below and update the code to test the property frArticle
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property frPreposition (base name: "fr_preposition")', function() {
      // uncomment below and update the code to test the property frPreposition
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property isoAlpha2 (base name: "iso_alpha2")', function() {
      // uncomment below and update the code to test the property isoAlpha2
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property languages (base name: "languages")', function() {
      // uncomment below and update the code to test the property languages
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property nameLocale (base name: "name_locale")', function() {
      // uncomment below and update the code to test the property nameLocale
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property neighbors (base name: "neighbors")', function() {
      // uncomment below and update the code to test the property neighbors
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property population (base name: "population")', function() {
      // uncomment below and update the code to test the property population
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property postalcode (base name: "postalcode")', function() {
      // uncomment below and update the code to test the property postalcode
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property postalcoderegex (base name: "postalcoderegex")', function() {
      // uncomment below and update the code to test the property postalcoderegex
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

    it('should have the property tld (base name: "tld")', function() {
      // uncomment below and update the code to test the property tld
      //var instance = new MonVoyagePasCherComPublicApi.CountriesData();
      //expect(instance).to.be();
    });

  });

}));
