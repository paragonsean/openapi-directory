/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DistanceResponse from '../model/DistanceResponse';
import ElevationResponse from '../model/ElevationResponse';
import ErrorResponse from '../model/ErrorResponse';
import SunPositionResponse from '../model/SunPositionResponse';
import TimezoneResponse from '../model/TimezoneResponse';

/**
* ServicesAPIs service.
* @module api/ServicesAPIsApi
* @version 0.0.1
*/
export default class ServicesAPIsApi {

    /**
    * Constructs a new ServicesAPIsApi. 
    * @alias module:api/ServicesAPIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDistance operation.
     * @callback module:api/ServicesAPIsApi~getDistanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate distance between lats/longs
     * This webservice is providing you the ability to calculate the distance between 2 lat/long points, it returns you the value in km or miles
     * @param {String} locationA The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) of location point A
     * @param {String} locationB The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) of location point B
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [unit = 'kms')] The unit of length you want the elevation returned either meters or feet returned
     * @param {module:api/ServicesAPIsApi~getDistanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistanceResponse}
     */
    getDistance(locationA, locationB, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationA' is set
      if (locationA === undefined || locationA === null) {
        throw new Error("Missing the required parameter 'locationA' when calling getDistance");
      }
      // verify the required parameter 'locationB' is set
      if (locationB === undefined || locationB === null) {
        throw new Error("Missing the required parameter 'locationB' when calling getDistance");
      }

      let pathParams = {
      };
      let queryParams = {
        'locationA': locationA,
        'locationB': locationB,
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistanceResponse;
      return this.apiClient.callApi(
        '/distance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getElevation operation.
     * @callback module:api/ServicesAPIsApi~getElevationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElevationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search elevation informations from lat/long
     * This webservice is providing you the ability to retrieve the elevation in meters or feet of ONE or MULTIPLE given latitude/longitude point(s). <br />If you use MULTIPLE lat/long point, the maximum number of point you can send in one request is 256. Be aware that if MULTIPLE mode, the results are de-deplicated if you are sending the same latitude/longitude point multiple times.<br />If your workload is a batch of millions of lat/long point, You will also get better throughput if you send around 100 lat/long points in one request than the maximum. This maximum is mostly allowed for people trying to graph altitudes.
     * @param {String} locations The location as a latitude / longitude point ( ex. 67.85572,20.22513 ) or a list of coordinates separated using the pipe ('|') character. The maximum number of coordinates you can send at one time is 20 ( ex. 67.85572,20.22513|27.85572,20.22513 )
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [unit = 'meters')] The unit of length you want the elevation returned either meters or feet returned
     * @param {module:api/ServicesAPIsApi~getElevationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElevationResponse}
     */
    getElevation(locations, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locations' is set
      if (locations === undefined || locations === null) {
        throw new Error("Missing the required parameter 'locations' when calling getElevation");
      }

      let pathParams = {
      };
      let queryParams = {
        'locations': locations,
        'unit': opts['unit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElevationResponse;
      return this.apiClient.callApi(
        '/elevation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSun operation.
     * @callback module:api/ServicesAPIsApi~getSunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SunPositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search position of sun from lat/long and date
     * This webservice is providing you the ability to retrieve the time of each phases of the sunlight cycle. Sunset, sunrise, sunriseEnd, golden hour, solarNoon, dawn, dusk and more for a given location and date. If the date if not provided, the response provided return informations for today at UTC time.
     * @param {String} location Here you can send either a latitude / longitude
     * @param {Object} opts Optional parameters
     * @param {Date} [date] The date for what you will get the data ( full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21 ), if not provided as parameter, today is going to be used
     * @param {module:api/ServicesAPIsApi~getSunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SunPositionResponse}
     */
    getSun(location, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling getSun");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location,
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SunPositionResponse;
      return this.apiClient.callApi(
        '/sun_positions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimezone operation.
     * @callback module:api/ServicesAPIsApi~getTimezoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimezoneResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search timezone and time informations from lat/long
     * This webservice is providing you the ability to retrieve the tz database time zones ( https://en.wikipedia.org/wiki/List_of_tz_database_time_zones )  from a given location ( )latitude and longitude or IATA code ). It also returns you the current time at the provided location.
     * @param {String} location Here you can send either a latitude / longitude ( ex. 67.85572,20.22513 ) or a IATA Code ( ex. LHR for London Heathrow)
     * @param {module:api/ServicesAPIsApi~getTimezoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimezoneResponse}
     */
    getTimezone(location, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling getTimezone");
      }

      let pathParams = {
      };
      let queryParams = {
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimezoneResponse;
      return this.apiClient.callApi(
        '/timezone', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
