/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AirportsSearchResponse from '../model/AirportsSearchResponse';
import CitiesResponse from '../model/CitiesResponse';
import ContinentsResponse from '../model/ContinentsResponse';
import CountriesResponse from '../model/CountriesResponse';
import ErrorResponse from '../model/ErrorResponse';

/**
* GeographyAPIs service.
* @module api/GeographyAPIsApi
* @version 0.0.1
*/
export default class GeographyAPIsApi {

    /**
    * Constructs a new GeographyAPIsApi. 
    * @alias module:api/GeographyAPIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAirport operation.
     * @callback module:api/GeographyAPIsApi~getAirportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AirportsSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search airports by country / Search nearby airports / Search an airport
     * This webservice is providing you the ability to retrieve a list of airports matching your search criterias.<br />The 3 mains search criterias are<br />- by country code, this will list all airports for a given country.<br />- by latitude/longitude with a radius in km. You can actually combine those 2 criterias, and search for example the closest airport in the USA of Vancoucer, Canada.<br />- The last way to use the API is by searching directly with a IATA CODE in the location parameter, this will only return one result in the array of data results
     * @param {module:model/String} language the language code of the language you want the content to be returned
     * @param {Object} opts Optional parameters
     * @param {String} [location] The location you want to search for. Either a latitude/longitude point or a letter airport IATA CODE ( ex. LHR ) if you want the detail for only one single airport.
     * @param {Number} [radius = 100)] Radius in km for a lat/long search, will be ignore if a IATA is passed in location parameter code is passed
     * @param {String} [countrycode] Filter - The country ISO code 2 letters, provided by the GET /countries. If passed the results will be filtered to this country only, regardless if you passed a lat/long and a large radius
     * @param {Boolean} [topAirports] Filter the results to only the top and large airports airports.
     * @param {module:api/GeographyAPIsApi~getAirportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AirportsSearchResponse}
     */
    getAirport(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAirport");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'location': opts['location'],
        'radius': opts['radius'],
        'countrycode': opts['countrycode'],
        'top_airports': opts['topAirports']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AirportsSearchResponse;
      return this.apiClient.callApi(
        '/airports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutocomplete operation.
     * @callback module:api/GeographyAPIsApi~getAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve cities informations from a string / build an autocomplete
     * Search cities from a string parameters.
     * @param {String} q the string you want to search
     * @param {module:model/String} language the language code of the language you want the content to be returned
     * @param {module:model/String} sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point
     * @param {Object} opts Optional parameters
     * @param {String} [countrycode] if you want to limit the result to one country
     * @param {module:api/GeographyAPIsApi~getAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CitiesResponse}
     */
    getAutocomplete(q, language, sort, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling getAutocomplete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAutocomplete");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getAutocomplete");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'language': language,
        'countrycode': opts['countrycode'],
        'sort': sort
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CitiesResponse;
      return this.apiClient.callApi(
        '/cities/findcitiesfromtext', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCities operation.
     * @callback module:api/GeographyAPIsApi~getCitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.<br /> A significant city will be defined according to the pourcent of population within a country.
     * @param {module:model/String} language the language code of the language you want the content to be returned
     * @param {module:model/String} sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point
     * @param {Object} opts Optional parameters
     * @param {String} [countrycode] if you want to limit the result to one country
     * @param {String} [location] The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456)
     * @param {Number} [radius = 20)] Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed
     * @param {Number} [limit = 20)] Limit of the result. Default is 20 rows, and maximum is 50.
     * @param {Number} [offset = 0)] offset of the result set
     * @param {module:api/GeographyAPIsApi~getCitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CitiesResponse}
     */
    getCities(language, sort, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getCities");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getCities");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'countrycode': opts['countrycode'],
        'location': opts['location'],
        'radius': opts['radius'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': sort
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CitiesResponse;
      return this.apiClient.callApi(
        '/cities/findcitiesfromlatlong', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContinents operation.
     * @callback module:api/GeographyAPIsApi~getContinentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all continents or one specific continent
     * This webservice is providing you the ability to retrieve all informations about continents
     * @param {module:model/String} language The language code of the language you want the content to be returned
     * @param {Object} opts Optional parameters
     * @param {String} [continentcode] The code of the continent you want to retrieve, this parameter is not required if you want ot retrieve all continents at once
     * @param {module:api/GeographyAPIsApi~getContinentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinentsResponse}
     */
    getContinents(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getContinents");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'continentcode': opts['continentcode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinentsResponse;
      return this.apiClient.callApi(
        '/continents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:api/GeographyAPIsApi~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search all countries or one specific country
     * This webservice is providing you the ability to retrieve a list of countries matching your search criterias.<br />The 2 mains ways to search use this API are<br />- by countrycode, it will only returns you one country<br />- without the countrycode parameter which will return the full list of countries
     * @param {module:model/String} language the language code of the language you want the content to be returned
     * @param {Object} opts Optional parameters
     * @param {String} [countrycode] The code of the country you want to retrieve
     * @param {module:api/GeographyAPIsApi~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountriesResponse}
     */
    getCountries(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getCountries");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'countrycode': opts['countrycode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountriesResponse;
      return this.apiClient.callApi(
        '/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSignificantCities operation.
     * @callback module:api/GeographyAPIsApi~getSignificantCitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search significant cities from lat/long or countrycode
     * Search cities according to given criterias. Either lat/long + radius or country code. A limit can be given but cannot exceed 50 results.<br /> A significant city will be defined according to the pourcent of population within a country.
     * @param {module:model/String} language the language code of the language you want the content to be returned
     * @param {module:model/String} sort The order you want the result ordered. Default is population while when entering a lat/long, you can order the results by distance from requested lat/long point
     * @param {Object} opts Optional parameters
     * @param {Number} [pourcent = 0.5)] The pourcent of population the cities need to be in order to appear in results
     * @param {String} [countrycode] if you want to limit the result to one country
     * @param {String} [location] The Lat/Long of the location your are seeking cities ( ex. 45.4478988,3.23456)
     * @param {Number} [radius = 20)] Radius in km for a lat/long search. Default is 20km and there is no maximum, but need to be combined with limit. code is passed
     * @param {Number} [limit = 20)] Limit of the result. Default is 20 rows, and maximum is 50.
     * @param {Number} [offset = 0)] offset of the result set
     * @param {module:api/GeographyAPIsApi~getSignificantCitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CitiesResponse}
     */
    getSignificantCities(language, sort, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getSignificantCities");
      }
      // verify the required parameter 'sort' is set
      if (sort === undefined || sort === null) {
        throw new Error("Missing the required parameter 'sort' when calling getSignificantCities");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'pourcent': opts['pourcent'],
        'countrycode': opts['countrycode'],
        'location': opts['location'],
        'radius': opts['radius'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': sort
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['x-api-key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CitiesResponse;
      return this.apiClient.callApi(
        '/cities/significant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
