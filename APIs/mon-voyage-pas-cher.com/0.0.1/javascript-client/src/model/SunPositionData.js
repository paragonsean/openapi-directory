/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SunPositionData model module.
 * @module model/SunPositionData
 * @version 0.0.1
 */
class SunPositionData {
    /**
     * Constructs a new <code>SunPositionData</code>.
     * This is the data object for the response of a SunPosition API call
     * @alias module:model/SunPositionData
     */
    constructor() { 
        
        SunPositionData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SunPositionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SunPositionData} obj Optional instance to populate.
     * @return {module:model/SunPositionData} The populated <code>SunPositionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SunPositionData();

            if (data.hasOwnProperty('dawn')) {
                obj['dawn'] = ApiClient.convertToType(data['dawn'], 'Date');
            }
            if (data.hasOwnProperty('dusk')) {
                obj['dusk'] = ApiClient.convertToType(data['dusk'], 'Date');
            }
            if (data.hasOwnProperty('goldenHour')) {
                obj['goldenHour'] = ApiClient.convertToType(data['goldenHour'], 'Date');
            }
            if (data.hasOwnProperty('goldenHourEnd')) {
                obj['goldenHourEnd'] = ApiClient.convertToType(data['goldenHourEnd'], 'Date');
            }
            if (data.hasOwnProperty('nadir')) {
                obj['nadir'] = ApiClient.convertToType(data['nadir'], 'Date');
            }
            if (data.hasOwnProperty('nauticalDawn')) {
                obj['nauticalDawn'] = ApiClient.convertToType(data['nauticalDawn'], 'Date');
            }
            if (data.hasOwnProperty('nauticalDusk')) {
                obj['nauticalDusk'] = ApiClient.convertToType(data['nauticalDusk'], 'Date');
            }
            if (data.hasOwnProperty('night')) {
                obj['night'] = ApiClient.convertToType(data['night'], 'Date');
            }
            if (data.hasOwnProperty('nightEnd')) {
                obj['nightEnd'] = ApiClient.convertToType(data['nightEnd'], 'Date');
            }
            if (data.hasOwnProperty('solarNoon')) {
                obj['solarNoon'] = ApiClient.convertToType(data['solarNoon'], 'Date');
            }
            if (data.hasOwnProperty('sunrise')) {
                obj['sunrise'] = ApiClient.convertToType(data['sunrise'], 'Date');
            }
            if (data.hasOwnProperty('sunriseEnd')) {
                obj['sunriseEnd'] = ApiClient.convertToType(data['sunriseEnd'], 'Date');
            }
            if (data.hasOwnProperty('sunset')) {
                obj['sunset'] = ApiClient.convertToType(data['sunset'], 'Date');
            }
            if (data.hasOwnProperty('sunsetStart')) {
                obj['sunsetStart'] = ApiClient.convertToType(data['sunsetStart'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SunPositionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SunPositionData</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Date and time of the dawn at local time of the given location
 * @member {Date} dawn
 */
SunPositionData.prototype['dawn'] = undefined;

/**
 * Date and time of the dusk at local time of the given location
 * @member {Date} dusk
 */
SunPositionData.prototype['dusk'] = undefined;

/**
 * Date and time of the golden hour at local time of the given location
 * @member {Date} goldenHour
 */
SunPositionData.prototype['goldenHour'] = undefined;

/**
 * Date and time of the golden hour end at local time of the given location
 * @member {Date} goldenHourEnd
 */
SunPositionData.prototype['goldenHourEnd'] = undefined;

/**
 * Date and time of the nadir at local time of the given location
 * @member {Date} nadir
 */
SunPositionData.prototype['nadir'] = undefined;

/**
 * Date and time of the nautical dawn at local time of the given location
 * @member {Date} nauticalDawn
 */
SunPositionData.prototype['nauticalDawn'] = undefined;

/**
 * Date and time of the nautical dusk at local time of the given location
 * @member {Date} nauticalDusk
 */
SunPositionData.prototype['nauticalDusk'] = undefined;

/**
 * Date and time of the night at local time of the given location
 * @member {Date} night
 */
SunPositionData.prototype['night'] = undefined;

/**
 * Date and time of the night end at local time of the given location
 * @member {Date} nightEnd
 */
SunPositionData.prototype['nightEnd'] = undefined;

/**
 * Date and time of the solar moon at local time of the given location
 * @member {Date} solarNoon
 */
SunPositionData.prototype['solarNoon'] = undefined;

/**
 * Date and time of the sunris at local time of the given location
 * @member {Date} sunrise
 */
SunPositionData.prototype['sunrise'] = undefined;

/**
 * Date and time of the sunrise end at local time of the given location
 * @member {Date} sunriseEnd
 */
SunPositionData.prototype['sunriseEnd'] = undefined;

/**
 * Date and time of the sunset at local time of the given location
 * @member {Date} sunset
 */
SunPositionData.prototype['sunset'] = undefined;

/**
 * Date and time of the sunset start at local time of the given location
 * @member {Date} sunsetStart
 */
SunPositionData.prototype['sunsetStart'] = undefined;






export default SunPositionData;

