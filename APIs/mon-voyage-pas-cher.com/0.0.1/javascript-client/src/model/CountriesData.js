/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CountriesData model module.
 * @module model/CountriesData
 * @version 0.0.1
 */
class CountriesData {
    /**
     * Constructs a new <code>CountriesData</code>.
     * This is the data object for the response of a Countries API call
     * @alias module:model/CountriesData
     */
    constructor() { 
        
        CountriesData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CountriesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountriesData} obj Optional instance to populate.
     * @return {module:model/CountriesData} The populated <code>CountriesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountriesData();

            if (data.hasOwnProperty('airportscount')) {
                obj['airportscount'] = ApiClient.convertToType(data['airportscount'], 'Number');
            }
            if (data.hasOwnProperty('alternatename')) {
                obj['alternatename'] = ApiClient.convertToType(data['alternatename'], ['String']);
            }
            if (data.hasOwnProperty('areainsqkm')) {
                obj['areainsqkm'] = ApiClient.convertToType(data['areainsqkm'], 'Number');
            }
            if (data.hasOwnProperty('capital')) {
                obj['capital'] = ApiClient.convertToType(data['capital'], 'String');
            }
            if (data.hasOwnProperty('currencycode')) {
                obj['currencycode'] = ApiClient.convertToType(data['currencycode'], 'String');
            }
            if (data.hasOwnProperty('currencyname')) {
                obj['currencyname'] = ApiClient.convertToType(data['currencyname'], 'String');
            }
            if (data.hasOwnProperty('fr_article')) {
                obj['fr_article'] = ApiClient.convertToType(data['fr_article'], 'String');
            }
            if (data.hasOwnProperty('fr_preposition')) {
                obj['fr_preposition'] = ApiClient.convertToType(data['fr_preposition'], 'String');
            }
            if (data.hasOwnProperty('iso_alpha2')) {
                obj['iso_alpha2'] = ApiClient.convertToType(data['iso_alpha2'], 'String');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('name_locale')) {
                obj['name_locale'] = ApiClient.convertToType(data['name_locale'], 'String');
            }
            if (data.hasOwnProperty('neighbors')) {
                obj['neighbors'] = ApiClient.convertToType(data['neighbors'], ['String']);
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('postalcode')) {
                obj['postalcode'] = ApiClient.convertToType(data['postalcode'], 'String');
            }
            if (data.hasOwnProperty('postalcoderegex')) {
                obj['postalcoderegex'] = ApiClient.convertToType(data['postalcoderegex'], 'String');
            }
            if (data.hasOwnProperty('tld')) {
                obj['tld'] = ApiClient.convertToType(data['tld'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountriesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountriesData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alternatename'])) {
            throw new Error("Expected the field `alternatename` to be an array in the JSON data but got " + data['alternatename']);
        }
        // ensure the json data is a string
        if (data['capital'] && !(typeof data['capital'] === 'string' || data['capital'] instanceof String)) {
            throw new Error("Expected the field `capital` to be a primitive type in the JSON string but got " + data['capital']);
        }
        // ensure the json data is a string
        if (data['currencycode'] && !(typeof data['currencycode'] === 'string' || data['currencycode'] instanceof String)) {
            throw new Error("Expected the field `currencycode` to be a primitive type in the JSON string but got " + data['currencycode']);
        }
        // ensure the json data is a string
        if (data['currencyname'] && !(typeof data['currencyname'] === 'string' || data['currencyname'] instanceof String)) {
            throw new Error("Expected the field `currencyname` to be a primitive type in the JSON string but got " + data['currencyname']);
        }
        // ensure the json data is a string
        if (data['fr_article'] && !(typeof data['fr_article'] === 'string' || data['fr_article'] instanceof String)) {
            throw new Error("Expected the field `fr_article` to be a primitive type in the JSON string but got " + data['fr_article']);
        }
        // ensure the json data is a string
        if (data['fr_preposition'] && !(typeof data['fr_preposition'] === 'string' || data['fr_preposition'] instanceof String)) {
            throw new Error("Expected the field `fr_preposition` to be a primitive type in the JSON string but got " + data['fr_preposition']);
        }
        // ensure the json data is a string
        if (data['iso_alpha2'] && !(typeof data['iso_alpha2'] === 'string' || data['iso_alpha2'] instanceof String)) {
            throw new Error("Expected the field `iso_alpha2` to be a primitive type in the JSON string but got " + data['iso_alpha2']);
        }
        // ensure the json data is a string
        if (data['languages'] && !(typeof data['languages'] === 'string' || data['languages'] instanceof String)) {
            throw new Error("Expected the field `languages` to be a primitive type in the JSON string but got " + data['languages']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['name_locale'] && !(typeof data['name_locale'] === 'string' || data['name_locale'] instanceof String)) {
            throw new Error("Expected the field `name_locale` to be a primitive type in the JSON string but got " + data['name_locale']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['neighbors'])) {
            throw new Error("Expected the field `neighbors` to be an array in the JSON data but got " + data['neighbors']);
        }
        // ensure the json data is a string
        if (data['postalcode'] && !(typeof data['postalcode'] === 'string' || data['postalcode'] instanceof String)) {
            throw new Error("Expected the field `postalcode` to be a primitive type in the JSON string but got " + data['postalcode']);
        }
        // ensure the json data is a string
        if (data['postalcoderegex'] && !(typeof data['postalcoderegex'] === 'string' || data['postalcoderegex'] instanceof String)) {
            throw new Error("Expected the field `postalcoderegex` to be a primitive type in the JSON string but got " + data['postalcoderegex']);
        }
        // ensure the json data is a string
        if (data['tld'] && !(typeof data['tld'] === 'string' || data['tld'] instanceof String)) {
            throw new Error("Expected the field `tld` to be a primitive type in the JSON string but got " + data['tld']);
        }

        return true;
    }


}



/**
 * The name of the country in english language
 * @member {Number} airportscount
 */
CountriesData.prototype['airportscount'] = undefined;

/**
 * @member {Array.<String>} alternatename
 */
CountriesData.prototype['alternatename'] = undefined;

/**
 * The superficy of the country in square km
 * @member {Number} areainsqkm
 */
CountriesData.prototype['areainsqkm'] = undefined;

/**
 * The capital of this country in english language
 * @member {String} capital
 */
CountriesData.prototype['capital'] = undefined;

/**
 * The international currency code
 * @member {String} currencycode
 */
CountriesData.prototype['currencycode'] = undefined;

/**
 * The local name of the currency used in this country
 * @member {String} currencyname
 */
CountriesData.prototype['currencyname'] = undefined;

/**
 * The name of the country in english language
 * @member {String} fr_article
 */
CountriesData.prototype['fr_article'] = undefined;

/**
 * The name of the country in english language
 * @member {String} fr_preposition
 */
CountriesData.prototype['fr_preposition'] = undefined;

/**
 * The 2 letter ISO code of the country
 * @member {String} iso_alpha2
 */
CountriesData.prototype['iso_alpha2'] = undefined;

/**
 * The name of the country in english language
 * @member {String} languages
 */
CountriesData.prototype['languages'] = undefined;

/**
 * The latitude considered as central for this country
 * @member {Number} latitude
 */
CountriesData.prototype['latitude'] = undefined;

/**
 * The longitude considered as central for this country
 * @member {Number} longitude
 */
CountriesData.prototype['longitude'] = undefined;

/**
 * The name of the country in english language
 * @member {String} name
 */
CountriesData.prototype['name'] = undefined;

/**
 * The name of the country in the requested language
 * @member {String} name_locale
 */
CountriesData.prototype['name_locale'] = undefined;

/**
 * @member {Array.<String>} neighbors
 */
CountriesData.prototype['neighbors'] = undefined;

/**
 * The total population in this country
 * @member {Number} population
 */
CountriesData.prototype['population'] = undefined;

/**
 * The format of the postal codes if multiple format to be applied, then a pipe | is used as separator
 * @member {String} postalcode
 */
CountriesData.prototype['postalcode'] = undefined;

/**
 * The regex to use to check a postal code for this country
 * @member {String} postalcoderegex
 */
CountriesData.prototype['postalcoderegex'] = undefined;

/**
 * The top level domain which is used by the local internet authority.
 * @member {String} tld
 */
CountriesData.prototype['tld'] = undefined;






export default CountriesData;

