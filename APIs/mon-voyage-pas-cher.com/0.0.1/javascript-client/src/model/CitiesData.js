/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CitiesData model module.
 * @module model/CitiesData
 * @version 0.0.1
 */
class CitiesData {
    /**
     * Constructs a new <code>CitiesData</code>.
     * This is the data object for the response of a Cities APIs calls
     * @alias module:model/CitiesData
     */
    constructor() { 
        
        CitiesData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CitiesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CitiesData} obj Optional instance to populate.
     * @return {module:model/CitiesData} The populated <code>CitiesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CitiesData();

            if (data.hasOwnProperty('alternatename')) {
                obj['alternatename'] = ApiClient.convertToType(data['alternatename'], ['String']);
            }
            if (data.hasOwnProperty('asciiname')) {
                obj['asciiname'] = ApiClient.convertToType(data['asciiname'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('elevation')) {
                obj['elevation'] = ApiClient.convertToType(data['elevation'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('population')) {
                obj['population'] = ApiClient.convertToType(data['population'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CitiesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CitiesData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alternatename'])) {
            throw new Error("Expected the field `alternatename` to be an array in the JSON data but got " + data['alternatename']);
        }
        // ensure the json data is a string
        if (data['asciiname'] && !(typeof data['asciiname'] === 'string' || data['asciiname'] instanceof String)) {
            throw new Error("Expected the field `asciiname` to be a primitive type in the JSON string but got " + data['asciiname']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} alternatename
 */
CitiesData.prototype['alternatename'] = undefined;

/**
 * The ASCII name of the city
 * @member {String} asciiname
 */
CitiesData.prototype['asciiname'] = undefined;

/**
 * The 2 letter ISO code of the country the city belongs to
 * @member {String} country
 */
CitiesData.prototype['country'] = undefined;

/**
 * The elevation of the city
 * @member {Number} elevation
 */
CitiesData.prototype['elevation'] = undefined;

/**
 * The latitude considered as central for the city
 * @member {Number} latitude
 */
CitiesData.prototype['latitude'] = undefined;

/**
 * The longitude considered as central for the city
 * @member {Number} longitude
 */
CitiesData.prototype['longitude'] = undefined;

/**
 * The name of the city
 * @member {String} name
 */
CitiesData.prototype['name'] = undefined;

/**
 * The population of the city
 * @member {Number} population
 */
CitiesData.prototype['population'] = undefined;

/**
 * The longitude considered as central for the city
 * @member {String} timezone
 */
CitiesData.prototype['timezone'] = undefined;






export default CitiesData;

