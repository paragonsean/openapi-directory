# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContinentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, countries_in: List[str]=None, latitude: float=None, longitude: float=None, name: str=None, name_locale: str=None):
        """ContinentData - a model defined in OpenAPI

        :param code: The code of this ContinentData.
        :param countries_in: The countries_in of this ContinentData.
        :param latitude: The latitude of this ContinentData.
        :param longitude: The longitude of this ContinentData.
        :param name: The name of this ContinentData.
        :param name_locale: The name_locale of this ContinentData.
        """
        self.openapi_types = {
            'code': str,
            'countries_in': List[str],
            'latitude': float,
            'longitude': float,
            'name': str,
            'name_locale': str
        }

        self.attribute_map = {
            'code': 'code',
            'countries_in': 'countries_in',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'name_locale': 'name_locale'
        }

        self._code = code
        self._countries_in = countries_in
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._name_locale = name_locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinentData of this ContinentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ContinentData.

        The ISO code of the continent.

        :return: The code of this ContinentData.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ContinentData.

        The ISO code of the continent.

        :param code: The code of this ContinentData.
        :type code: str
        """

        self._code = code

    @property
    def countries_in(self):
        """Gets the countries_in of this ContinentData.


        :return: The countries_in of this ContinentData.
        :rtype: List[str]
        """
        return self._countries_in

    @countries_in.setter
    def countries_in(self, countries_in):
        """Sets the countries_in of this ContinentData.


        :param countries_in: The countries_in of this ContinentData.
        :type countries_in: List[str]
        """

        self._countries_in = countries_in

    @property
    def latitude(self):
        """Gets the latitude of this ContinentData.

        The latitude considered as central for the continent

        :return: The latitude of this ContinentData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ContinentData.

        The latitude considered as central for the continent

        :param latitude: The latitude of this ContinentData.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ContinentData.

        The longitude considered as central for the continent

        :return: The longitude of this ContinentData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ContinentData.

        The longitude considered as central for the continent

        :param longitude: The longitude of this ContinentData.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this ContinentData.

        The name of the continent in english

        :return: The name of this ContinentData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContinentData.

        The name of the continent in english

        :param name: The name of this ContinentData.
        :type name: str
        """

        self._name = name

    @property
    def name_locale(self):
        """Gets the name_locale of this ContinentData.

        The name of the continent in the requested languager

        :return: The name_locale of this ContinentData.
        :rtype: str
        """
        return self._name_locale

    @name_locale.setter
    def name_locale(self, name_locale):
        """Sets the name_locale of this ContinentData.

        The name of the continent in the requested languager

        :param name_locale: The name_locale of this ContinentData.
        :type name_locale: str
        """

        self._name_locale = name_locale
