# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CitiesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternatename: List[str]=None, asciiname: str=None, country: str=None, elevation: float=None, latitude: float=None, longitude: float=None, name: str=None, population: float=None, timezone: str=None):
        """CitiesData - a model defined in OpenAPI

        :param alternatename: The alternatename of this CitiesData.
        :param asciiname: The asciiname of this CitiesData.
        :param country: The country of this CitiesData.
        :param elevation: The elevation of this CitiesData.
        :param latitude: The latitude of this CitiesData.
        :param longitude: The longitude of this CitiesData.
        :param name: The name of this CitiesData.
        :param population: The population of this CitiesData.
        :param timezone: The timezone of this CitiesData.
        """
        self.openapi_types = {
            'alternatename': List[str],
            'asciiname': str,
            'country': str,
            'elevation': float,
            'latitude': float,
            'longitude': float,
            'name': str,
            'population': float,
            'timezone': str
        }

        self.attribute_map = {
            'alternatename': 'alternatename',
            'asciiname': 'asciiname',
            'country': 'country',
            'elevation': 'elevation',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'population': 'population',
            'timezone': 'timezone'
        }

        self._alternatename = alternatename
        self._asciiname = asciiname
        self._country = country
        self._elevation = elevation
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._population = population
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CitiesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CitiesData of this CitiesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternatename(self):
        """Gets the alternatename of this CitiesData.


        :return: The alternatename of this CitiesData.
        :rtype: List[str]
        """
        return self._alternatename

    @alternatename.setter
    def alternatename(self, alternatename):
        """Sets the alternatename of this CitiesData.


        :param alternatename: The alternatename of this CitiesData.
        :type alternatename: List[str]
        """

        self._alternatename = alternatename

    @property
    def asciiname(self):
        """Gets the asciiname of this CitiesData.

        The ASCII name of the city

        :return: The asciiname of this CitiesData.
        :rtype: str
        """
        return self._asciiname

    @asciiname.setter
    def asciiname(self, asciiname):
        """Sets the asciiname of this CitiesData.

        The ASCII name of the city

        :param asciiname: The asciiname of this CitiesData.
        :type asciiname: str
        """

        self._asciiname = asciiname

    @property
    def country(self):
        """Gets the country of this CitiesData.

        The 2 letter ISO code of the country the city belongs to

        :return: The country of this CitiesData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CitiesData.

        The 2 letter ISO code of the country the city belongs to

        :param country: The country of this CitiesData.
        :type country: str
        """

        self._country = country

    @property
    def elevation(self):
        """Gets the elevation of this CitiesData.

        The elevation of the city

        :return: The elevation of this CitiesData.
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this CitiesData.

        The elevation of the city

        :param elevation: The elevation of this CitiesData.
        :type elevation: float
        """

        self._elevation = elevation

    @property
    def latitude(self):
        """Gets the latitude of this CitiesData.

        The latitude considered as central for the city

        :return: The latitude of this CitiesData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CitiesData.

        The latitude considered as central for the city

        :param latitude: The latitude of this CitiesData.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CitiesData.

        The longitude considered as central for the city

        :return: The longitude of this CitiesData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CitiesData.

        The longitude considered as central for the city

        :param longitude: The longitude of this CitiesData.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this CitiesData.

        The name of the city

        :return: The name of this CitiesData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CitiesData.

        The name of the city

        :param name: The name of this CitiesData.
        :type name: str
        """

        self._name = name

    @property
    def population(self):
        """Gets the population of this CitiesData.

        The population of the city

        :return: The population of this CitiesData.
        :rtype: float
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this CitiesData.

        The population of the city

        :param population: The population of this CitiesData.
        :type population: float
        """

        self._population = population

    @property
    def timezone(self):
        """Gets the timezone of this CitiesData.

        The longitude considered as central for the city

        :return: The timezone of this CitiesData.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CitiesData.

        The longitude considered as central for the city

        :param timezone: The timezone of this CitiesData.
        :type timezone: str
        """

        self._timezone = timezone
