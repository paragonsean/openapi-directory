# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continent_data import ContinentData
from openapi_server import util


class ContinentsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, data: List[ContinentData]=None, message: str=None, status: str=None):
        """ContinentsResponse - a model defined in OpenAPI

        :param count: The count of this ContinentsResponse.
        :param data: The data of this ContinentsResponse.
        :param message: The message of this ContinentsResponse.
        :param status: The status of this ContinentsResponse.
        """
        self.openapi_types = {
            'count': int,
            'data': List[ContinentData],
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'count': 'count',
            'data': 'data',
            'message': 'message',
            'status': 'status'
        }

        self._count = count
        self._data = data
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinentsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinentsResponse of this ContinentsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ContinentsResponse.


        :return: The count of this ContinentsResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ContinentsResponse.


        :param count: The count of this ContinentsResponse.
        :type count: int
        """

        self._count = count

    @property
    def data(self):
        """Gets the data of this ContinentsResponse.


        :return: The data of this ContinentsResponse.
        :rtype: List[ContinentData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ContinentsResponse.


        :param data: The data of this ContinentsResponse.
        :type data: List[ContinentData]
        """

        self._data = data

    @property
    def message(self):
        """Gets the message of this ContinentsResponse.


        :return: The message of this ContinentsResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ContinentsResponse.


        :param message: The message of this ContinentsResponse.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this ContinentsResponse.

        Status of the response

        :return: The status of this ContinentsResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContinentsResponse.

        Status of the response

        :param status: The status of this ContinentsResponse.
        :type status: str
        """

        self._status = status
