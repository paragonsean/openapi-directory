# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountriesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airportscount: float=None, alternatename: List[str]=None, areainsqkm: float=None, capital: str=None, currencycode: str=None, currencyname: str=None, fr_article: str=None, fr_preposition: str=None, iso_alpha2: str=None, languages: str=None, latitude: float=None, longitude: float=None, name: str=None, name_locale: str=None, neighbors: List[str]=None, population: float=None, postalcode: str=None, postalcoderegex: str=None, tld: str=None):
        """CountriesData - a model defined in OpenAPI

        :param airportscount: The airportscount of this CountriesData.
        :param alternatename: The alternatename of this CountriesData.
        :param areainsqkm: The areainsqkm of this CountriesData.
        :param capital: The capital of this CountriesData.
        :param currencycode: The currencycode of this CountriesData.
        :param currencyname: The currencyname of this CountriesData.
        :param fr_article: The fr_article of this CountriesData.
        :param fr_preposition: The fr_preposition of this CountriesData.
        :param iso_alpha2: The iso_alpha2 of this CountriesData.
        :param languages: The languages of this CountriesData.
        :param latitude: The latitude of this CountriesData.
        :param longitude: The longitude of this CountriesData.
        :param name: The name of this CountriesData.
        :param name_locale: The name_locale of this CountriesData.
        :param neighbors: The neighbors of this CountriesData.
        :param population: The population of this CountriesData.
        :param postalcode: The postalcode of this CountriesData.
        :param postalcoderegex: The postalcoderegex of this CountriesData.
        :param tld: The tld of this CountriesData.
        """
        self.openapi_types = {
            'airportscount': float,
            'alternatename': List[str],
            'areainsqkm': float,
            'capital': str,
            'currencycode': str,
            'currencyname': str,
            'fr_article': str,
            'fr_preposition': str,
            'iso_alpha2': str,
            'languages': str,
            'latitude': float,
            'longitude': float,
            'name': str,
            'name_locale': str,
            'neighbors': List[str],
            'population': float,
            'postalcode': str,
            'postalcoderegex': str,
            'tld': str
        }

        self.attribute_map = {
            'airportscount': 'airportscount',
            'alternatename': 'alternatename',
            'areainsqkm': 'areainsqkm',
            'capital': 'capital',
            'currencycode': 'currencycode',
            'currencyname': 'currencyname',
            'fr_article': 'fr_article',
            'fr_preposition': 'fr_preposition',
            'iso_alpha2': 'iso_alpha2',
            'languages': 'languages',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'name_locale': 'name_locale',
            'neighbors': 'neighbors',
            'population': 'population',
            'postalcode': 'postalcode',
            'postalcoderegex': 'postalcoderegex',
            'tld': 'tld'
        }

        self._airportscount = airportscount
        self._alternatename = alternatename
        self._areainsqkm = areainsqkm
        self._capital = capital
        self._currencycode = currencycode
        self._currencyname = currencyname
        self._fr_article = fr_article
        self._fr_preposition = fr_preposition
        self._iso_alpha2 = iso_alpha2
        self._languages = languages
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._name_locale = name_locale
        self._neighbors = neighbors
        self._population = population
        self._postalcode = postalcode
        self._postalcoderegex = postalcoderegex
        self._tld = tld

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountriesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountriesData of this CountriesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airportscount(self):
        """Gets the airportscount of this CountriesData.

        The name of the country in english language

        :return: The airportscount of this CountriesData.
        :rtype: float
        """
        return self._airportscount

    @airportscount.setter
    def airportscount(self, airportscount):
        """Sets the airportscount of this CountriesData.

        The name of the country in english language

        :param airportscount: The airportscount of this CountriesData.
        :type airportscount: float
        """

        self._airportscount = airportscount

    @property
    def alternatename(self):
        """Gets the alternatename of this CountriesData.


        :return: The alternatename of this CountriesData.
        :rtype: List[str]
        """
        return self._alternatename

    @alternatename.setter
    def alternatename(self, alternatename):
        """Sets the alternatename of this CountriesData.


        :param alternatename: The alternatename of this CountriesData.
        :type alternatename: List[str]
        """

        self._alternatename = alternatename

    @property
    def areainsqkm(self):
        """Gets the areainsqkm of this CountriesData.

        The superficy of the country in square km

        :return: The areainsqkm of this CountriesData.
        :rtype: float
        """
        return self._areainsqkm

    @areainsqkm.setter
    def areainsqkm(self, areainsqkm):
        """Sets the areainsqkm of this CountriesData.

        The superficy of the country in square km

        :param areainsqkm: The areainsqkm of this CountriesData.
        :type areainsqkm: float
        """

        self._areainsqkm = areainsqkm

    @property
    def capital(self):
        """Gets the capital of this CountriesData.

        The capital of this country in english language

        :return: The capital of this CountriesData.
        :rtype: str
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this CountriesData.

        The capital of this country in english language

        :param capital: The capital of this CountriesData.
        :type capital: str
        """

        self._capital = capital

    @property
    def currencycode(self):
        """Gets the currencycode of this CountriesData.

        The international currency code

        :return: The currencycode of this CountriesData.
        :rtype: str
        """
        return self._currencycode

    @currencycode.setter
    def currencycode(self, currencycode):
        """Sets the currencycode of this CountriesData.

        The international currency code

        :param currencycode: The currencycode of this CountriesData.
        :type currencycode: str
        """

        self._currencycode = currencycode

    @property
    def currencyname(self):
        """Gets the currencyname of this CountriesData.

        The local name of the currency used in this country

        :return: The currencyname of this CountriesData.
        :rtype: str
        """
        return self._currencyname

    @currencyname.setter
    def currencyname(self, currencyname):
        """Sets the currencyname of this CountriesData.

        The local name of the currency used in this country

        :param currencyname: The currencyname of this CountriesData.
        :type currencyname: str
        """

        self._currencyname = currencyname

    @property
    def fr_article(self):
        """Gets the fr_article of this CountriesData.

        The name of the country in english language

        :return: The fr_article of this CountriesData.
        :rtype: str
        """
        return self._fr_article

    @fr_article.setter
    def fr_article(self, fr_article):
        """Sets the fr_article of this CountriesData.

        The name of the country in english language

        :param fr_article: The fr_article of this CountriesData.
        :type fr_article: str
        """

        self._fr_article = fr_article

    @property
    def fr_preposition(self):
        """Gets the fr_preposition of this CountriesData.

        The name of the country in english language

        :return: The fr_preposition of this CountriesData.
        :rtype: str
        """
        return self._fr_preposition

    @fr_preposition.setter
    def fr_preposition(self, fr_preposition):
        """Sets the fr_preposition of this CountriesData.

        The name of the country in english language

        :param fr_preposition: The fr_preposition of this CountriesData.
        :type fr_preposition: str
        """

        self._fr_preposition = fr_preposition

    @property
    def iso_alpha2(self):
        """Gets the iso_alpha2 of this CountriesData.

        The 2 letter ISO code of the country

        :return: The iso_alpha2 of this CountriesData.
        :rtype: str
        """
        return self._iso_alpha2

    @iso_alpha2.setter
    def iso_alpha2(self, iso_alpha2):
        """Sets the iso_alpha2 of this CountriesData.

        The 2 letter ISO code of the country

        :param iso_alpha2: The iso_alpha2 of this CountriesData.
        :type iso_alpha2: str
        """

        self._iso_alpha2 = iso_alpha2

    @property
    def languages(self):
        """Gets the languages of this CountriesData.

        The name of the country in english language

        :return: The languages of this CountriesData.
        :rtype: str
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this CountriesData.

        The name of the country in english language

        :param languages: The languages of this CountriesData.
        :type languages: str
        """

        self._languages = languages

    @property
    def latitude(self):
        """Gets the latitude of this CountriesData.

        The latitude considered as central for this country

        :return: The latitude of this CountriesData.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CountriesData.

        The latitude considered as central for this country

        :param latitude: The latitude of this CountriesData.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CountriesData.

        The longitude considered as central for this country

        :return: The longitude of this CountriesData.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CountriesData.

        The longitude considered as central for this country

        :param longitude: The longitude of this CountriesData.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this CountriesData.

        The name of the country in english language

        :return: The name of this CountriesData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountriesData.

        The name of the country in english language

        :param name: The name of this CountriesData.
        :type name: str
        """

        self._name = name

    @property
    def name_locale(self):
        """Gets the name_locale of this CountriesData.

        The name of the country in the requested language

        :return: The name_locale of this CountriesData.
        :rtype: str
        """
        return self._name_locale

    @name_locale.setter
    def name_locale(self, name_locale):
        """Sets the name_locale of this CountriesData.

        The name of the country in the requested language

        :param name_locale: The name_locale of this CountriesData.
        :type name_locale: str
        """

        self._name_locale = name_locale

    @property
    def neighbors(self):
        """Gets the neighbors of this CountriesData.


        :return: The neighbors of this CountriesData.
        :rtype: List[str]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this CountriesData.


        :param neighbors: The neighbors of this CountriesData.
        :type neighbors: List[str]
        """

        self._neighbors = neighbors

    @property
    def population(self):
        """Gets the population of this CountriesData.

        The total population in this country

        :return: The population of this CountriesData.
        :rtype: float
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this CountriesData.

        The total population in this country

        :param population: The population of this CountriesData.
        :type population: float
        """

        self._population = population

    @property
    def postalcode(self):
        """Gets the postalcode of this CountriesData.

        The format of the postal codes if multiple format to be applied, then a pipe | is used as separator

        :return: The postalcode of this CountriesData.
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """Sets the postalcode of this CountriesData.

        The format of the postal codes if multiple format to be applied, then a pipe | is used as separator

        :param postalcode: The postalcode of this CountriesData.
        :type postalcode: str
        """

        self._postalcode = postalcode

    @property
    def postalcoderegex(self):
        """Gets the postalcoderegex of this CountriesData.

        The regex to use to check a postal code for this country

        :return: The postalcoderegex of this CountriesData.
        :rtype: str
        """
        return self._postalcoderegex

    @postalcoderegex.setter
    def postalcoderegex(self, postalcoderegex):
        """Sets the postalcoderegex of this CountriesData.

        The regex to use to check a postal code for this country

        :param postalcoderegex: The postalcoderegex of this CountriesData.
        :type postalcoderegex: str
        """

        self._postalcoderegex = postalcoderegex

    @property
    def tld(self):
        """Gets the tld of this CountriesData.

        The top level domain which is used by the local internet authority.

        :return: The tld of this CountriesData.
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this CountriesData.

        The top level domain which is used by the local internet authority.

        :param tld: The tld of this CountriesData.
        :type tld: str
        """

        self._tld = tld
