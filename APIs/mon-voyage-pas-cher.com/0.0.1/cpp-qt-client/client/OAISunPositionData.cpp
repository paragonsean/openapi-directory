/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISunPositionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISunPositionData::OAISunPositionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISunPositionData::OAISunPositionData() {
    this->initializeModel();
}

OAISunPositionData::~OAISunPositionData() {}

void OAISunPositionData::initializeModel() {

    m_dawn_isSet = false;
    m_dawn_isValid = false;

    m_dusk_isSet = false;
    m_dusk_isValid = false;

    m_golden_hour_isSet = false;
    m_golden_hour_isValid = false;

    m_golden_hour_end_isSet = false;
    m_golden_hour_end_isValid = false;

    m_nadir_isSet = false;
    m_nadir_isValid = false;

    m_nautical_dawn_isSet = false;
    m_nautical_dawn_isValid = false;

    m_nautical_dusk_isSet = false;
    m_nautical_dusk_isValid = false;

    m_night_isSet = false;
    m_night_isValid = false;

    m_night_end_isSet = false;
    m_night_end_isValid = false;

    m_solar_noon_isSet = false;
    m_solar_noon_isValid = false;

    m_sunrise_isSet = false;
    m_sunrise_isValid = false;

    m_sunrise_end_isSet = false;
    m_sunrise_end_isValid = false;

    m_sunset_isSet = false;
    m_sunset_isValid = false;

    m_sunset_start_isSet = false;
    m_sunset_start_isValid = false;
}

void OAISunPositionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISunPositionData::fromJsonObject(QJsonObject json) {

    m_dawn_isValid = ::OpenAPI::fromJsonValue(m_dawn, json[QString("dawn")]);
    m_dawn_isSet = !json[QString("dawn")].isNull() && m_dawn_isValid;

    m_dusk_isValid = ::OpenAPI::fromJsonValue(m_dusk, json[QString("dusk")]);
    m_dusk_isSet = !json[QString("dusk")].isNull() && m_dusk_isValid;

    m_golden_hour_isValid = ::OpenAPI::fromJsonValue(m_golden_hour, json[QString("goldenHour")]);
    m_golden_hour_isSet = !json[QString("goldenHour")].isNull() && m_golden_hour_isValid;

    m_golden_hour_end_isValid = ::OpenAPI::fromJsonValue(m_golden_hour_end, json[QString("goldenHourEnd")]);
    m_golden_hour_end_isSet = !json[QString("goldenHourEnd")].isNull() && m_golden_hour_end_isValid;

    m_nadir_isValid = ::OpenAPI::fromJsonValue(m_nadir, json[QString("nadir")]);
    m_nadir_isSet = !json[QString("nadir")].isNull() && m_nadir_isValid;

    m_nautical_dawn_isValid = ::OpenAPI::fromJsonValue(m_nautical_dawn, json[QString("nauticalDawn")]);
    m_nautical_dawn_isSet = !json[QString("nauticalDawn")].isNull() && m_nautical_dawn_isValid;

    m_nautical_dusk_isValid = ::OpenAPI::fromJsonValue(m_nautical_dusk, json[QString("nauticalDusk")]);
    m_nautical_dusk_isSet = !json[QString("nauticalDusk")].isNull() && m_nautical_dusk_isValid;

    m_night_isValid = ::OpenAPI::fromJsonValue(m_night, json[QString("night")]);
    m_night_isSet = !json[QString("night")].isNull() && m_night_isValid;

    m_night_end_isValid = ::OpenAPI::fromJsonValue(m_night_end, json[QString("nightEnd")]);
    m_night_end_isSet = !json[QString("nightEnd")].isNull() && m_night_end_isValid;

    m_solar_noon_isValid = ::OpenAPI::fromJsonValue(m_solar_noon, json[QString("solarNoon")]);
    m_solar_noon_isSet = !json[QString("solarNoon")].isNull() && m_solar_noon_isValid;

    m_sunrise_isValid = ::OpenAPI::fromJsonValue(m_sunrise, json[QString("sunrise")]);
    m_sunrise_isSet = !json[QString("sunrise")].isNull() && m_sunrise_isValid;

    m_sunrise_end_isValid = ::OpenAPI::fromJsonValue(m_sunrise_end, json[QString("sunriseEnd")]);
    m_sunrise_end_isSet = !json[QString("sunriseEnd")].isNull() && m_sunrise_end_isValid;

    m_sunset_isValid = ::OpenAPI::fromJsonValue(m_sunset, json[QString("sunset")]);
    m_sunset_isSet = !json[QString("sunset")].isNull() && m_sunset_isValid;

    m_sunset_start_isValid = ::OpenAPI::fromJsonValue(m_sunset_start, json[QString("sunsetStart")]);
    m_sunset_start_isSet = !json[QString("sunsetStart")].isNull() && m_sunset_start_isValid;
}

QString OAISunPositionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISunPositionData::asJsonObject() const {
    QJsonObject obj;
    if (m_dawn_isSet) {
        obj.insert(QString("dawn"), ::OpenAPI::toJsonValue(m_dawn));
    }
    if (m_dusk_isSet) {
        obj.insert(QString("dusk"), ::OpenAPI::toJsonValue(m_dusk));
    }
    if (m_golden_hour_isSet) {
        obj.insert(QString("goldenHour"), ::OpenAPI::toJsonValue(m_golden_hour));
    }
    if (m_golden_hour_end_isSet) {
        obj.insert(QString("goldenHourEnd"), ::OpenAPI::toJsonValue(m_golden_hour_end));
    }
    if (m_nadir_isSet) {
        obj.insert(QString("nadir"), ::OpenAPI::toJsonValue(m_nadir));
    }
    if (m_nautical_dawn_isSet) {
        obj.insert(QString("nauticalDawn"), ::OpenAPI::toJsonValue(m_nautical_dawn));
    }
    if (m_nautical_dusk_isSet) {
        obj.insert(QString("nauticalDusk"), ::OpenAPI::toJsonValue(m_nautical_dusk));
    }
    if (m_night_isSet) {
        obj.insert(QString("night"), ::OpenAPI::toJsonValue(m_night));
    }
    if (m_night_end_isSet) {
        obj.insert(QString("nightEnd"), ::OpenAPI::toJsonValue(m_night_end));
    }
    if (m_solar_noon_isSet) {
        obj.insert(QString("solarNoon"), ::OpenAPI::toJsonValue(m_solar_noon));
    }
    if (m_sunrise_isSet) {
        obj.insert(QString("sunrise"), ::OpenAPI::toJsonValue(m_sunrise));
    }
    if (m_sunrise_end_isSet) {
        obj.insert(QString("sunriseEnd"), ::OpenAPI::toJsonValue(m_sunrise_end));
    }
    if (m_sunset_isSet) {
        obj.insert(QString("sunset"), ::OpenAPI::toJsonValue(m_sunset));
    }
    if (m_sunset_start_isSet) {
        obj.insert(QString("sunsetStart"), ::OpenAPI::toJsonValue(m_sunset_start));
    }
    return obj;
}

QDateTime OAISunPositionData::getDawn() const {
    return m_dawn;
}
void OAISunPositionData::setDawn(const QDateTime &dawn) {
    m_dawn = dawn;
    m_dawn_isSet = true;
}

bool OAISunPositionData::is_dawn_Set() const{
    return m_dawn_isSet;
}

bool OAISunPositionData::is_dawn_Valid() const{
    return m_dawn_isValid;
}

QDateTime OAISunPositionData::getDusk() const {
    return m_dusk;
}
void OAISunPositionData::setDusk(const QDateTime &dusk) {
    m_dusk = dusk;
    m_dusk_isSet = true;
}

bool OAISunPositionData::is_dusk_Set() const{
    return m_dusk_isSet;
}

bool OAISunPositionData::is_dusk_Valid() const{
    return m_dusk_isValid;
}

QDateTime OAISunPositionData::getGoldenHour() const {
    return m_golden_hour;
}
void OAISunPositionData::setGoldenHour(const QDateTime &golden_hour) {
    m_golden_hour = golden_hour;
    m_golden_hour_isSet = true;
}

bool OAISunPositionData::is_golden_hour_Set() const{
    return m_golden_hour_isSet;
}

bool OAISunPositionData::is_golden_hour_Valid() const{
    return m_golden_hour_isValid;
}

QDateTime OAISunPositionData::getGoldenHourEnd() const {
    return m_golden_hour_end;
}
void OAISunPositionData::setGoldenHourEnd(const QDateTime &golden_hour_end) {
    m_golden_hour_end = golden_hour_end;
    m_golden_hour_end_isSet = true;
}

bool OAISunPositionData::is_golden_hour_end_Set() const{
    return m_golden_hour_end_isSet;
}

bool OAISunPositionData::is_golden_hour_end_Valid() const{
    return m_golden_hour_end_isValid;
}

QDateTime OAISunPositionData::getNadir() const {
    return m_nadir;
}
void OAISunPositionData::setNadir(const QDateTime &nadir) {
    m_nadir = nadir;
    m_nadir_isSet = true;
}

bool OAISunPositionData::is_nadir_Set() const{
    return m_nadir_isSet;
}

bool OAISunPositionData::is_nadir_Valid() const{
    return m_nadir_isValid;
}

QDateTime OAISunPositionData::getNauticalDawn() const {
    return m_nautical_dawn;
}
void OAISunPositionData::setNauticalDawn(const QDateTime &nautical_dawn) {
    m_nautical_dawn = nautical_dawn;
    m_nautical_dawn_isSet = true;
}

bool OAISunPositionData::is_nautical_dawn_Set() const{
    return m_nautical_dawn_isSet;
}

bool OAISunPositionData::is_nautical_dawn_Valid() const{
    return m_nautical_dawn_isValid;
}

QDateTime OAISunPositionData::getNauticalDusk() const {
    return m_nautical_dusk;
}
void OAISunPositionData::setNauticalDusk(const QDateTime &nautical_dusk) {
    m_nautical_dusk = nautical_dusk;
    m_nautical_dusk_isSet = true;
}

bool OAISunPositionData::is_nautical_dusk_Set() const{
    return m_nautical_dusk_isSet;
}

bool OAISunPositionData::is_nautical_dusk_Valid() const{
    return m_nautical_dusk_isValid;
}

QDateTime OAISunPositionData::getNight() const {
    return m_night;
}
void OAISunPositionData::setNight(const QDateTime &night) {
    m_night = night;
    m_night_isSet = true;
}

bool OAISunPositionData::is_night_Set() const{
    return m_night_isSet;
}

bool OAISunPositionData::is_night_Valid() const{
    return m_night_isValid;
}

QDateTime OAISunPositionData::getNightEnd() const {
    return m_night_end;
}
void OAISunPositionData::setNightEnd(const QDateTime &night_end) {
    m_night_end = night_end;
    m_night_end_isSet = true;
}

bool OAISunPositionData::is_night_end_Set() const{
    return m_night_end_isSet;
}

bool OAISunPositionData::is_night_end_Valid() const{
    return m_night_end_isValid;
}

QDateTime OAISunPositionData::getSolarNoon() const {
    return m_solar_noon;
}
void OAISunPositionData::setSolarNoon(const QDateTime &solar_noon) {
    m_solar_noon = solar_noon;
    m_solar_noon_isSet = true;
}

bool OAISunPositionData::is_solar_noon_Set() const{
    return m_solar_noon_isSet;
}

bool OAISunPositionData::is_solar_noon_Valid() const{
    return m_solar_noon_isValid;
}

QDateTime OAISunPositionData::getSunrise() const {
    return m_sunrise;
}
void OAISunPositionData::setSunrise(const QDateTime &sunrise) {
    m_sunrise = sunrise;
    m_sunrise_isSet = true;
}

bool OAISunPositionData::is_sunrise_Set() const{
    return m_sunrise_isSet;
}

bool OAISunPositionData::is_sunrise_Valid() const{
    return m_sunrise_isValid;
}

QDateTime OAISunPositionData::getSunriseEnd() const {
    return m_sunrise_end;
}
void OAISunPositionData::setSunriseEnd(const QDateTime &sunrise_end) {
    m_sunrise_end = sunrise_end;
    m_sunrise_end_isSet = true;
}

bool OAISunPositionData::is_sunrise_end_Set() const{
    return m_sunrise_end_isSet;
}

bool OAISunPositionData::is_sunrise_end_Valid() const{
    return m_sunrise_end_isValid;
}

QDateTime OAISunPositionData::getSunset() const {
    return m_sunset;
}
void OAISunPositionData::setSunset(const QDateTime &sunset) {
    m_sunset = sunset;
    m_sunset_isSet = true;
}

bool OAISunPositionData::is_sunset_Set() const{
    return m_sunset_isSet;
}

bool OAISunPositionData::is_sunset_Valid() const{
    return m_sunset_isValid;
}

QDateTime OAISunPositionData::getSunsetStart() const {
    return m_sunset_start;
}
void OAISunPositionData::setSunsetStart(const QDateTime &sunset_start) {
    m_sunset_start = sunset_start;
    m_sunset_start_isSet = true;
}

bool OAISunPositionData::is_sunset_start_Set() const{
    return m_sunset_start_isSet;
}

bool OAISunPositionData::is_sunset_start_Valid() const{
    return m_sunset_start_isValid;
}

bool OAISunPositionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dusk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_golden_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_golden_hour_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nadir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nautical_dawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nautical_dusk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solar_noon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunrise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunrise_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunset_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISunPositionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
