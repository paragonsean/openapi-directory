/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void airportsOptions();


    virtual void citiesFindcitiesfromlatlongOptions();


    virtual void citiesFindcitiesfromtextOptions();


    virtual void citiesSignificantOptions();


    virtual void continentsOptions();


    virtual void countriesOptions();


    virtual void distanceOptions();


    virtual void elevationOptions();


    virtual void sunPositionsOptions();


    virtual void timezoneOptions();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void airportsOptionsCallback(OAIHttpRequestWorker *worker);
    void citiesFindcitiesfromlatlongOptionsCallback(OAIHttpRequestWorker *worker);
    void citiesFindcitiesfromtextOptionsCallback(OAIHttpRequestWorker *worker);
    void citiesSignificantOptionsCallback(OAIHttpRequestWorker *worker);
    void continentsOptionsCallback(OAIHttpRequestWorker *worker);
    void countriesOptionsCallback(OAIHttpRequestWorker *worker);
    void distanceOptionsCallback(OAIHttpRequestWorker *worker);
    void elevationOptionsCallback(OAIHttpRequestWorker *worker);
    void sunPositionsOptionsCallback(OAIHttpRequestWorker *worker);
    void timezoneOptionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void airportsOptionsSignal();
    void citiesFindcitiesfromlatlongOptionsSignal();
    void citiesFindcitiesfromtextOptionsSignal();
    void citiesSignificantOptionsSignal();
    void continentsOptionsSignal();
    void countriesOptionsSignal();
    void distanceOptionsSignal();
    void elevationOptionsSignal();
    void sunPositionsOptionsSignal();
    void timezoneOptionsSignal();


    void airportsOptionsSignalFull(OAIHttpRequestWorker *worker);
    void citiesFindcitiesfromlatlongOptionsSignalFull(OAIHttpRequestWorker *worker);
    void citiesFindcitiesfromtextOptionsSignalFull(OAIHttpRequestWorker *worker);
    void citiesSignificantOptionsSignalFull(OAIHttpRequestWorker *worker);
    void continentsOptionsSignalFull(OAIHttpRequestWorker *worker);
    void countriesOptionsSignalFull(OAIHttpRequestWorker *worker);
    void distanceOptionsSignalFull(OAIHttpRequestWorker *worker);
    void elevationOptionsSignalFull(OAIHttpRequestWorker *worker);
    void sunPositionsOptionsSignalFull(OAIHttpRequestWorker *worker);
    void timezoneOptionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use airportsOptionsSignalError() instead")
    void airportsOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void airportsOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesFindcitiesfromlatlongOptionsSignalError() instead")
    void citiesFindcitiesfromlatlongOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void citiesFindcitiesfromlatlongOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesFindcitiesfromtextOptionsSignalError() instead")
    void citiesFindcitiesfromtextOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void citiesFindcitiesfromtextOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesSignificantOptionsSignalError() instead")
    void citiesSignificantOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void citiesSignificantOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continentsOptionsSignalError() instead")
    void continentsOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void continentsOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesOptionsSignalError() instead")
    void countriesOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void countriesOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distanceOptionsSignalError() instead")
    void distanceOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distanceOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elevationOptionsSignalError() instead")
    void elevationOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elevationOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sunPositionsOptionsSignalError() instead")
    void sunPositionsOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sunPositionsOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneOptionsSignalError() instead")
    void timezoneOptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneOptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use airportsOptionsSignalErrorFull() instead")
    void airportsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airportsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesFindcitiesfromlatlongOptionsSignalErrorFull() instead")
    void citiesFindcitiesfromlatlongOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesFindcitiesfromlatlongOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesFindcitiesfromtextOptionsSignalErrorFull() instead")
    void citiesFindcitiesfromtextOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesFindcitiesfromtextOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesSignificantOptionsSignalErrorFull() instead")
    void citiesSignificantOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesSignificantOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use continentsOptionsSignalErrorFull() instead")
    void continentsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void continentsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesOptionsSignalErrorFull() instead")
    void countriesOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distanceOptionsSignalErrorFull() instead")
    void distanceOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distanceOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elevationOptionsSignalErrorFull() instead")
    void elevationOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elevationOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sunPositionsOptionsSignalErrorFull() instead")
    void sunPositionsOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sunPositionsOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use timezoneOptionsSignalErrorFull() instead")
    void timezoneOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void timezoneOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
