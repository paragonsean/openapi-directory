/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServicesAPIsApi_H
#define OAI_OAIServicesAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDistanceResponse.h"
#include "OAIElevationResponse.h"
#include "OAIErrorResponse.h"
#include "OAISunPositionResponse.h"
#include "OAITimezoneResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServicesAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIServicesAPIsApi(const int timeOut = 0);
    ~OAIServicesAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location_a QString [required]
    * @param[in]  location_b QString [required]
    * @param[in]  unit QString [optional]
    */
    virtual void getDistance(const QString &location_a, const QString &location_b, const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  locations QString [required]
    * @param[in]  unit QString [optional]
    */
    virtual void getElevation(const QString &locations, const ::OpenAPI::OptionalParam<QString> &unit = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  location QString [required]
    * @param[in]  date QDate [optional]
    */
    virtual void getSun(const QString &location, const ::OpenAPI::OptionalParam<QDate> &date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  location QString [required]
    */
    virtual void getTimezone(const QString &location);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDistanceCallback(OAIHttpRequestWorker *worker);
    void getElevationCallback(OAIHttpRequestWorker *worker);
    void getSunCallback(OAIHttpRequestWorker *worker);
    void getTimezoneCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDistanceSignal(OAIDistanceResponse summary);
    void getElevationSignal(OAIElevationResponse summary);
    void getSunSignal(OAISunPositionResponse summary);
    void getTimezoneSignal(OAITimezoneResponse summary);


    void getDistanceSignalFull(OAIHttpRequestWorker *worker, OAIDistanceResponse summary);
    void getElevationSignalFull(OAIHttpRequestWorker *worker, OAIElevationResponse summary);
    void getSunSignalFull(OAIHttpRequestWorker *worker, OAISunPositionResponse summary);
    void getTimezoneSignalFull(OAIHttpRequestWorker *worker, OAITimezoneResponse summary);

    Q_DECL_DEPRECATED_X("Use getDistanceSignalError() instead")
    void getDistanceSignalE(OAIDistanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistanceSignalError(OAIDistanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getElevationSignalError() instead")
    void getElevationSignalE(OAIElevationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getElevationSignalError(OAIElevationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSunSignalError() instead")
    void getSunSignalE(OAISunPositionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSunSignalError(OAISunPositionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimezoneSignalError() instead")
    void getTimezoneSignalE(OAITimezoneResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimezoneSignalError(OAITimezoneResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDistanceSignalErrorFull() instead")
    void getDistanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getElevationSignalErrorFull() instead")
    void getElevationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getElevationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSunSignalErrorFull() instead")
    void getSunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTimezoneSignalErrorFull() instead")
    void getTimezoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTimezoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
