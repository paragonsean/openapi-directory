/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountriesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountriesData::OAICountriesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountriesData::OAICountriesData() {
    this->initializeModel();
}

OAICountriesData::~OAICountriesData() {}

void OAICountriesData::initializeModel() {

    m_airportscount_isSet = false;
    m_airportscount_isValid = false;

    m_alternatename_isSet = false;
    m_alternatename_isValid = false;

    m_areainsqkm_isSet = false;
    m_areainsqkm_isValid = false;

    m_capital_isSet = false;
    m_capital_isValid = false;

    m_currencycode_isSet = false;
    m_currencycode_isValid = false;

    m_currencyname_isSet = false;
    m_currencyname_isValid = false;

    m_fr_article_isSet = false;
    m_fr_article_isValid = false;

    m_fr_preposition_isSet = false;
    m_fr_preposition_isValid = false;

    m_iso_alpha2_isSet = false;
    m_iso_alpha2_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_locale_isSet = false;
    m_name_locale_isValid = false;

    m_neighbors_isSet = false;
    m_neighbors_isValid = false;

    m_population_isSet = false;
    m_population_isValid = false;

    m_postalcode_isSet = false;
    m_postalcode_isValid = false;

    m_postalcoderegex_isSet = false;
    m_postalcoderegex_isValid = false;

    m_tld_isSet = false;
    m_tld_isValid = false;
}

void OAICountriesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountriesData::fromJsonObject(QJsonObject json) {

    m_airportscount_isValid = ::OpenAPI::fromJsonValue(m_airportscount, json[QString("airportscount")]);
    m_airportscount_isSet = !json[QString("airportscount")].isNull() && m_airportscount_isValid;

    m_alternatename_isValid = ::OpenAPI::fromJsonValue(m_alternatename, json[QString("alternatename")]);
    m_alternatename_isSet = !json[QString("alternatename")].isNull() && m_alternatename_isValid;

    m_areainsqkm_isValid = ::OpenAPI::fromJsonValue(m_areainsqkm, json[QString("areainsqkm")]);
    m_areainsqkm_isSet = !json[QString("areainsqkm")].isNull() && m_areainsqkm_isValid;

    m_capital_isValid = ::OpenAPI::fromJsonValue(m_capital, json[QString("capital")]);
    m_capital_isSet = !json[QString("capital")].isNull() && m_capital_isValid;

    m_currencycode_isValid = ::OpenAPI::fromJsonValue(m_currencycode, json[QString("currencycode")]);
    m_currencycode_isSet = !json[QString("currencycode")].isNull() && m_currencycode_isValid;

    m_currencyname_isValid = ::OpenAPI::fromJsonValue(m_currencyname, json[QString("currencyname")]);
    m_currencyname_isSet = !json[QString("currencyname")].isNull() && m_currencyname_isValid;

    m_fr_article_isValid = ::OpenAPI::fromJsonValue(m_fr_article, json[QString("fr_article")]);
    m_fr_article_isSet = !json[QString("fr_article")].isNull() && m_fr_article_isValid;

    m_fr_preposition_isValid = ::OpenAPI::fromJsonValue(m_fr_preposition, json[QString("fr_preposition")]);
    m_fr_preposition_isSet = !json[QString("fr_preposition")].isNull() && m_fr_preposition_isValid;

    m_iso_alpha2_isValid = ::OpenAPI::fromJsonValue(m_iso_alpha2, json[QString("iso_alpha2")]);
    m_iso_alpha2_isSet = !json[QString("iso_alpha2")].isNull() && m_iso_alpha2_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_locale_isValid = ::OpenAPI::fromJsonValue(m_name_locale, json[QString("name_locale")]);
    m_name_locale_isSet = !json[QString("name_locale")].isNull() && m_name_locale_isValid;

    m_neighbors_isValid = ::OpenAPI::fromJsonValue(m_neighbors, json[QString("neighbors")]);
    m_neighbors_isSet = !json[QString("neighbors")].isNull() && m_neighbors_isValid;

    m_population_isValid = ::OpenAPI::fromJsonValue(m_population, json[QString("population")]);
    m_population_isSet = !json[QString("population")].isNull() && m_population_isValid;

    m_postalcode_isValid = ::OpenAPI::fromJsonValue(m_postalcode, json[QString("postalcode")]);
    m_postalcode_isSet = !json[QString("postalcode")].isNull() && m_postalcode_isValid;

    m_postalcoderegex_isValid = ::OpenAPI::fromJsonValue(m_postalcoderegex, json[QString("postalcoderegex")]);
    m_postalcoderegex_isSet = !json[QString("postalcoderegex")].isNull() && m_postalcoderegex_isValid;

    m_tld_isValid = ::OpenAPI::fromJsonValue(m_tld, json[QString("tld")]);
    m_tld_isSet = !json[QString("tld")].isNull() && m_tld_isValid;
}

QString OAICountriesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountriesData::asJsonObject() const {
    QJsonObject obj;
    if (m_airportscount_isSet) {
        obj.insert(QString("airportscount"), ::OpenAPI::toJsonValue(m_airportscount));
    }
    if (m_alternatename.size() > 0) {
        obj.insert(QString("alternatename"), ::OpenAPI::toJsonValue(m_alternatename));
    }
    if (m_areainsqkm_isSet) {
        obj.insert(QString("areainsqkm"), ::OpenAPI::toJsonValue(m_areainsqkm));
    }
    if (m_capital_isSet) {
        obj.insert(QString("capital"), ::OpenAPI::toJsonValue(m_capital));
    }
    if (m_currencycode_isSet) {
        obj.insert(QString("currencycode"), ::OpenAPI::toJsonValue(m_currencycode));
    }
    if (m_currencyname_isSet) {
        obj.insert(QString("currencyname"), ::OpenAPI::toJsonValue(m_currencyname));
    }
    if (m_fr_article_isSet) {
        obj.insert(QString("fr_article"), ::OpenAPI::toJsonValue(m_fr_article));
    }
    if (m_fr_preposition_isSet) {
        obj.insert(QString("fr_preposition"), ::OpenAPI::toJsonValue(m_fr_preposition));
    }
    if (m_iso_alpha2_isSet) {
        obj.insert(QString("iso_alpha2"), ::OpenAPI::toJsonValue(m_iso_alpha2));
    }
    if (m_languages_isSet) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_locale_isSet) {
        obj.insert(QString("name_locale"), ::OpenAPI::toJsonValue(m_name_locale));
    }
    if (m_neighbors.size() > 0) {
        obj.insert(QString("neighbors"), ::OpenAPI::toJsonValue(m_neighbors));
    }
    if (m_population_isSet) {
        obj.insert(QString("population"), ::OpenAPI::toJsonValue(m_population));
    }
    if (m_postalcode_isSet) {
        obj.insert(QString("postalcode"), ::OpenAPI::toJsonValue(m_postalcode));
    }
    if (m_postalcoderegex_isSet) {
        obj.insert(QString("postalcoderegex"), ::OpenAPI::toJsonValue(m_postalcoderegex));
    }
    if (m_tld_isSet) {
        obj.insert(QString("tld"), ::OpenAPI::toJsonValue(m_tld));
    }
    return obj;
}

double OAICountriesData::getAirportscount() const {
    return m_airportscount;
}
void OAICountriesData::setAirportscount(const double &airportscount) {
    m_airportscount = airportscount;
    m_airportscount_isSet = true;
}

bool OAICountriesData::is_airportscount_Set() const{
    return m_airportscount_isSet;
}

bool OAICountriesData::is_airportscount_Valid() const{
    return m_airportscount_isValid;
}

QList<QString> OAICountriesData::getAlternatename() const {
    return m_alternatename;
}
void OAICountriesData::setAlternatename(const QList<QString> &alternatename) {
    m_alternatename = alternatename;
    m_alternatename_isSet = true;
}

bool OAICountriesData::is_alternatename_Set() const{
    return m_alternatename_isSet;
}

bool OAICountriesData::is_alternatename_Valid() const{
    return m_alternatename_isValid;
}

double OAICountriesData::getAreainsqkm() const {
    return m_areainsqkm;
}
void OAICountriesData::setAreainsqkm(const double &areainsqkm) {
    m_areainsqkm = areainsqkm;
    m_areainsqkm_isSet = true;
}

bool OAICountriesData::is_areainsqkm_Set() const{
    return m_areainsqkm_isSet;
}

bool OAICountriesData::is_areainsqkm_Valid() const{
    return m_areainsqkm_isValid;
}

QString OAICountriesData::getCapital() const {
    return m_capital;
}
void OAICountriesData::setCapital(const QString &capital) {
    m_capital = capital;
    m_capital_isSet = true;
}

bool OAICountriesData::is_capital_Set() const{
    return m_capital_isSet;
}

bool OAICountriesData::is_capital_Valid() const{
    return m_capital_isValid;
}

QString OAICountriesData::getCurrencycode() const {
    return m_currencycode;
}
void OAICountriesData::setCurrencycode(const QString &currencycode) {
    m_currencycode = currencycode;
    m_currencycode_isSet = true;
}

bool OAICountriesData::is_currencycode_Set() const{
    return m_currencycode_isSet;
}

bool OAICountriesData::is_currencycode_Valid() const{
    return m_currencycode_isValid;
}

QString OAICountriesData::getCurrencyname() const {
    return m_currencyname;
}
void OAICountriesData::setCurrencyname(const QString &currencyname) {
    m_currencyname = currencyname;
    m_currencyname_isSet = true;
}

bool OAICountriesData::is_currencyname_Set() const{
    return m_currencyname_isSet;
}

bool OAICountriesData::is_currencyname_Valid() const{
    return m_currencyname_isValid;
}

QString OAICountriesData::getFrArticle() const {
    return m_fr_article;
}
void OAICountriesData::setFrArticle(const QString &fr_article) {
    m_fr_article = fr_article;
    m_fr_article_isSet = true;
}

bool OAICountriesData::is_fr_article_Set() const{
    return m_fr_article_isSet;
}

bool OAICountriesData::is_fr_article_Valid() const{
    return m_fr_article_isValid;
}

QString OAICountriesData::getFrPreposition() const {
    return m_fr_preposition;
}
void OAICountriesData::setFrPreposition(const QString &fr_preposition) {
    m_fr_preposition = fr_preposition;
    m_fr_preposition_isSet = true;
}

bool OAICountriesData::is_fr_preposition_Set() const{
    return m_fr_preposition_isSet;
}

bool OAICountriesData::is_fr_preposition_Valid() const{
    return m_fr_preposition_isValid;
}

QString OAICountriesData::getIsoAlpha2() const {
    return m_iso_alpha2;
}
void OAICountriesData::setIsoAlpha2(const QString &iso_alpha2) {
    m_iso_alpha2 = iso_alpha2;
    m_iso_alpha2_isSet = true;
}

bool OAICountriesData::is_iso_alpha2_Set() const{
    return m_iso_alpha2_isSet;
}

bool OAICountriesData::is_iso_alpha2_Valid() const{
    return m_iso_alpha2_isValid;
}

QString OAICountriesData::getLanguages() const {
    return m_languages;
}
void OAICountriesData::setLanguages(const QString &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAICountriesData::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAICountriesData::is_languages_Valid() const{
    return m_languages_isValid;
}

double OAICountriesData::getLatitude() const {
    return m_latitude;
}
void OAICountriesData::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAICountriesData::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAICountriesData::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAICountriesData::getLongitude() const {
    return m_longitude;
}
void OAICountriesData::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAICountriesData::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAICountriesData::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAICountriesData::getName() const {
    return m_name;
}
void OAICountriesData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountriesData::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountriesData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICountriesData::getNameLocale() const {
    return m_name_locale;
}
void OAICountriesData::setNameLocale(const QString &name_locale) {
    m_name_locale = name_locale;
    m_name_locale_isSet = true;
}

bool OAICountriesData::is_name_locale_Set() const{
    return m_name_locale_isSet;
}

bool OAICountriesData::is_name_locale_Valid() const{
    return m_name_locale_isValid;
}

QList<QString> OAICountriesData::getNeighbors() const {
    return m_neighbors;
}
void OAICountriesData::setNeighbors(const QList<QString> &neighbors) {
    m_neighbors = neighbors;
    m_neighbors_isSet = true;
}

bool OAICountriesData::is_neighbors_Set() const{
    return m_neighbors_isSet;
}

bool OAICountriesData::is_neighbors_Valid() const{
    return m_neighbors_isValid;
}

double OAICountriesData::getPopulation() const {
    return m_population;
}
void OAICountriesData::setPopulation(const double &population) {
    m_population = population;
    m_population_isSet = true;
}

bool OAICountriesData::is_population_Set() const{
    return m_population_isSet;
}

bool OAICountriesData::is_population_Valid() const{
    return m_population_isValid;
}

QString OAICountriesData::getPostalcode() const {
    return m_postalcode;
}
void OAICountriesData::setPostalcode(const QString &postalcode) {
    m_postalcode = postalcode;
    m_postalcode_isSet = true;
}

bool OAICountriesData::is_postalcode_Set() const{
    return m_postalcode_isSet;
}

bool OAICountriesData::is_postalcode_Valid() const{
    return m_postalcode_isValid;
}

QString OAICountriesData::getPostalcoderegex() const {
    return m_postalcoderegex;
}
void OAICountriesData::setPostalcoderegex(const QString &postalcoderegex) {
    m_postalcoderegex = postalcoderegex;
    m_postalcoderegex_isSet = true;
}

bool OAICountriesData::is_postalcoderegex_Set() const{
    return m_postalcoderegex_isSet;
}

bool OAICountriesData::is_postalcoderegex_Valid() const{
    return m_postalcoderegex_isValid;
}

QString OAICountriesData::getTld() const {
    return m_tld;
}
void OAICountriesData::setTld(const QString &tld) {
    m_tld = tld;
    m_tld_isSet = true;
}

bool OAICountriesData::is_tld_Set() const{
    return m_tld_isSet;
}

bool OAICountriesData::is_tld_Valid() const{
    return m_tld_isValid;
}

bool OAICountriesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airportscount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternatename.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_areainsqkm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capital_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencycode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencyname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fr_article_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fr_preposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_alpha2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_population_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postalcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postalcoderegex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tld_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountriesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
