/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISunPositionData.h
 *
 * This is the data object for the response of a SunPosition API call
 */

#ifndef OAISunPositionData_H
#define OAISunPositionData_H

#include <QJsonObject>

#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISunPositionData : public OAIObject {
public:
    OAISunPositionData();
    OAISunPositionData(QString json);
    ~OAISunPositionData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getDawn() const;
    void setDawn(const QDateTime &dawn);
    bool is_dawn_Set() const;
    bool is_dawn_Valid() const;

    QDateTime getDusk() const;
    void setDusk(const QDateTime &dusk);
    bool is_dusk_Set() const;
    bool is_dusk_Valid() const;

    QDateTime getGoldenHour() const;
    void setGoldenHour(const QDateTime &golden_hour);
    bool is_golden_hour_Set() const;
    bool is_golden_hour_Valid() const;

    QDateTime getGoldenHourEnd() const;
    void setGoldenHourEnd(const QDateTime &golden_hour_end);
    bool is_golden_hour_end_Set() const;
    bool is_golden_hour_end_Valid() const;

    QDateTime getNadir() const;
    void setNadir(const QDateTime &nadir);
    bool is_nadir_Set() const;
    bool is_nadir_Valid() const;

    QDateTime getNauticalDawn() const;
    void setNauticalDawn(const QDateTime &nautical_dawn);
    bool is_nautical_dawn_Set() const;
    bool is_nautical_dawn_Valid() const;

    QDateTime getNauticalDusk() const;
    void setNauticalDusk(const QDateTime &nautical_dusk);
    bool is_nautical_dusk_Set() const;
    bool is_nautical_dusk_Valid() const;

    QDateTime getNight() const;
    void setNight(const QDateTime &night);
    bool is_night_Set() const;
    bool is_night_Valid() const;

    QDateTime getNightEnd() const;
    void setNightEnd(const QDateTime &night_end);
    bool is_night_end_Set() const;
    bool is_night_end_Valid() const;

    QDateTime getSolarNoon() const;
    void setSolarNoon(const QDateTime &solar_noon);
    bool is_solar_noon_Set() const;
    bool is_solar_noon_Valid() const;

    QDateTime getSunrise() const;
    void setSunrise(const QDateTime &sunrise);
    bool is_sunrise_Set() const;
    bool is_sunrise_Valid() const;

    QDateTime getSunriseEnd() const;
    void setSunriseEnd(const QDateTime &sunrise_end);
    bool is_sunrise_end_Set() const;
    bool is_sunrise_end_Valid() const;

    QDateTime getSunset() const;
    void setSunset(const QDateTime &sunset);
    bool is_sunset_Set() const;
    bool is_sunset_Valid() const;

    QDateTime getSunsetStart() const;
    void setSunsetStart(const QDateTime &sunset_start);
    bool is_sunset_start_Set() const;
    bool is_sunset_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_dawn;
    bool m_dawn_isSet;
    bool m_dawn_isValid;

    QDateTime m_dusk;
    bool m_dusk_isSet;
    bool m_dusk_isValid;

    QDateTime m_golden_hour;
    bool m_golden_hour_isSet;
    bool m_golden_hour_isValid;

    QDateTime m_golden_hour_end;
    bool m_golden_hour_end_isSet;
    bool m_golden_hour_end_isValid;

    QDateTime m_nadir;
    bool m_nadir_isSet;
    bool m_nadir_isValid;

    QDateTime m_nautical_dawn;
    bool m_nautical_dawn_isSet;
    bool m_nautical_dawn_isValid;

    QDateTime m_nautical_dusk;
    bool m_nautical_dusk_isSet;
    bool m_nautical_dusk_isValid;

    QDateTime m_night;
    bool m_night_isSet;
    bool m_night_isValid;

    QDateTime m_night_end;
    bool m_night_end_isSet;
    bool m_night_end_isValid;

    QDateTime m_solar_noon;
    bool m_solar_noon_isSet;
    bool m_solar_noon_isValid;

    QDateTime m_sunrise;
    bool m_sunrise_isSet;
    bool m_sunrise_isValid;

    QDateTime m_sunrise_end;
    bool m_sunrise_end_isSet;
    bool m_sunrise_end_isValid;

    QDateTime m_sunset;
    bool m_sunset_isSet;
    bool m_sunset_isValid;

    QDateTime m_sunset_start;
    bool m_sunset_start_isSet;
    bool m_sunset_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISunPositionData)

#endif // OAISunPositionData_H
