/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeographyAPIsApi_H
#define OAI_OAIGeographyAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAirportsSearchResponse.h"
#include "OAICitiesResponse.h"
#include "OAIContinentsResponse.h"
#include "OAICountriesResponse.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeographyAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIGeographyAPIsApi(const int timeOut = 0);
    ~OAIGeographyAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  language QString [required]
    * @param[in]  location QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  countrycode QString [optional]
    * @param[in]  top_airports bool [optional]
    */
    virtual void getAirport(const QString &language, const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &top_airports = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  language QString [required]
    * @param[in]  sort QString [required]
    * @param[in]  countrycode QString [optional]
    */
    virtual void getAutocomplete(const QString &q, const QString &language, const QString &sort, const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [required]
    * @param[in]  sort QString [required]
    * @param[in]  countrycode QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getCities(const QString &language, const QString &sort, const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  language QString [required]
    * @param[in]  continentcode QString [optional]
    */
    virtual void getContinents(const QString &language, const ::OpenAPI::OptionalParam<QString> &continentcode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [required]
    * @param[in]  countrycode QString [optional]
    */
    virtual void getCountries(const QString &language, const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [required]
    * @param[in]  sort QString [required]
    * @param[in]  pourcent double [optional]
    * @param[in]  countrycode QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getSignificantCities(const QString &language, const QString &sort, const ::OpenAPI::OptionalParam<double> &pourcent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &countrycode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAirportCallback(OAIHttpRequestWorker *worker);
    void getAutocompleteCallback(OAIHttpRequestWorker *worker);
    void getCitiesCallback(OAIHttpRequestWorker *worker);
    void getContinentsCallback(OAIHttpRequestWorker *worker);
    void getCountriesCallback(OAIHttpRequestWorker *worker);
    void getSignificantCitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAirportSignal(OAIAirportsSearchResponse summary);
    void getAutocompleteSignal(OAICitiesResponse summary);
    void getCitiesSignal(OAICitiesResponse summary);
    void getContinentsSignal(OAIContinentsResponse summary);
    void getCountriesSignal(OAICountriesResponse summary);
    void getSignificantCitiesSignal(OAICitiesResponse summary);


    void getAirportSignalFull(OAIHttpRequestWorker *worker, OAIAirportsSearchResponse summary);
    void getAutocompleteSignalFull(OAIHttpRequestWorker *worker, OAICitiesResponse summary);
    void getCitiesSignalFull(OAIHttpRequestWorker *worker, OAICitiesResponse summary);
    void getContinentsSignalFull(OAIHttpRequestWorker *worker, OAIContinentsResponse summary);
    void getCountriesSignalFull(OAIHttpRequestWorker *worker, OAICountriesResponse summary);
    void getSignificantCitiesSignalFull(OAIHttpRequestWorker *worker, OAICitiesResponse summary);

    Q_DECL_DEPRECATED_X("Use getAirportSignalError() instead")
    void getAirportSignalE(OAIAirportsSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAirportSignalError(OAIAirportsSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalError() instead")
    void getAutocompleteSignalE(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalError(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCitiesSignalError() instead")
    void getCitiesSignalE(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCitiesSignalError(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinentsSignalError() instead")
    void getContinentsSignalE(OAIContinentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinentsSignalError(OAIContinentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesSignalError() instead")
    void getCountriesSignalE(OAICountriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesSignalError(OAICountriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignificantCitiesSignalError() instead")
    void getSignificantCitiesSignalE(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignificantCitiesSignalError(OAICitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAirportSignalErrorFull() instead")
    void getAirportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAirportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutocompleteSignalErrorFull() instead")
    void getAutocompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutocompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCitiesSignalErrorFull() instead")
    void getCitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContinentsSignalErrorFull() instead")
    void getContinentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContinentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCountriesSignalErrorFull() instead")
    void getCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSignificantCitiesSignalErrorFull() instead")
    void getSignificantCitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSignificantCitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
