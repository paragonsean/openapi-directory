/**
 * Mon-voyage-pas-cher.com Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataAirportsSearch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataAirportsSearch::OAIDataAirportsSearch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataAirportsSearch::OAIDataAirportsSearch() {
    this->initializeModel();
}

OAIDataAirportsSearch::~OAIDataAirportsSearch() {}

void OAIDataAirportsSearch::initializeModel() {

    m_airlineroutescount_isSet = false;
    m_airlineroutescount_isValid = false;

    m_airport_website_isSet = false;
    m_airport_website_isValid = false;

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_cityname_isSet = false;
    m_cityname_isValid = false;

    m_countrycode_isSet = false;
    m_countrycode_isValid = false;

    m_destinationscount_isSet = false;
    m_destinationscount_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_iatacode_isSet = false;
    m_iatacode_isValid = false;

    m_icao_isSet = false;
    m_icao_isValid = false;

    m_istopdestination_isSet = false;
    m_istopdestination_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_wikipedia_page_isSet = false;
    m_wikipedia_page_isValid = false;
}

void OAIDataAirportsSearch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataAirportsSearch::fromJsonObject(QJsonObject json) {

    m_airlineroutescount_isValid = ::OpenAPI::fromJsonValue(m_airlineroutescount, json[QString("airlineroutescount")]);
    m_airlineroutescount_isSet = !json[QString("airlineroutescount")].isNull() && m_airlineroutescount_isValid;

    m_airport_website_isValid = ::OpenAPI::fromJsonValue(m_airport_website, json[QString("airport_website")]);
    m_airport_website_isSet = !json[QString("airport_website")].isNull() && m_airport_website_isValid;

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_cityname_isValid = ::OpenAPI::fromJsonValue(m_cityname, json[QString("cityname")]);
    m_cityname_isSet = !json[QString("cityname")].isNull() && m_cityname_isValid;

    m_countrycode_isValid = ::OpenAPI::fromJsonValue(m_countrycode, json[QString("countrycode")]);
    m_countrycode_isSet = !json[QString("countrycode")].isNull() && m_countrycode_isValid;

    m_destinationscount_isValid = ::OpenAPI::fromJsonValue(m_destinationscount, json[QString("destinationscount")]);
    m_destinationscount_isSet = !json[QString("destinationscount")].isNull() && m_destinationscount_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_iatacode_isValid = ::OpenAPI::fromJsonValue(m_iatacode, json[QString("iatacode")]);
    m_iatacode_isSet = !json[QString("iatacode")].isNull() && m_iatacode_isValid;

    m_icao_isValid = ::OpenAPI::fromJsonValue(m_icao, json[QString("icao")]);
    m_icao_isSet = !json[QString("icao")].isNull() && m_icao_isValid;

    m_istopdestination_isValid = ::OpenAPI::fromJsonValue(m_istopdestination, json[QString("istopdestination")]);
    m_istopdestination_isSet = !json[QString("istopdestination")].isNull() && m_istopdestination_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_wikipedia_page_isValid = ::OpenAPI::fromJsonValue(m_wikipedia_page, json[QString("wikipedia_page")]);
    m_wikipedia_page_isSet = !json[QString("wikipedia_page")].isNull() && m_wikipedia_page_isValid;
}

QString OAIDataAirportsSearch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataAirportsSearch::asJsonObject() const {
    QJsonObject obj;
    if (m_airlineroutescount_isSet) {
        obj.insert(QString("airlineroutescount"), ::OpenAPI::toJsonValue(m_airlineroutescount));
    }
    if (m_airport_website_isSet) {
        obj.insert(QString("airport_website"), ::OpenAPI::toJsonValue(m_airport_website));
    }
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_cityname_isSet) {
        obj.insert(QString("cityname"), ::OpenAPI::toJsonValue(m_cityname));
    }
    if (m_countrycode_isSet) {
        obj.insert(QString("countrycode"), ::OpenAPI::toJsonValue(m_countrycode));
    }
    if (m_destinationscount_isSet) {
        obj.insert(QString("destinationscount"), ::OpenAPI::toJsonValue(m_destinationscount));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_iatacode_isSet) {
        obj.insert(QString("iatacode"), ::OpenAPI::toJsonValue(m_iatacode));
    }
    if (m_icao_isSet) {
        obj.insert(QString("icao"), ::OpenAPI::toJsonValue(m_icao));
    }
    if (m_istopdestination_isSet) {
        obj.insert(QString("istopdestination"), ::OpenAPI::toJsonValue(m_istopdestination));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_wikipedia_page_isSet) {
        obj.insert(QString("wikipedia_page"), ::OpenAPI::toJsonValue(m_wikipedia_page));
    }
    return obj;
}

qint32 OAIDataAirportsSearch::getAirlineroutescount() const {
    return m_airlineroutescount;
}
void OAIDataAirportsSearch::setAirlineroutescount(const qint32 &airlineroutescount) {
    m_airlineroutescount = airlineroutescount;
    m_airlineroutescount_isSet = true;
}

bool OAIDataAirportsSearch::is_airlineroutescount_Set() const{
    return m_airlineroutescount_isSet;
}

bool OAIDataAirportsSearch::is_airlineroutescount_Valid() const{
    return m_airlineroutescount_isValid;
}

QString OAIDataAirportsSearch::getAirportWebsite() const {
    return m_airport_website;
}
void OAIDataAirportsSearch::setAirportWebsite(const QString &airport_website) {
    m_airport_website = airport_website;
    m_airport_website_isSet = true;
}

bool OAIDataAirportsSearch::is_airport_website_Set() const{
    return m_airport_website_isSet;
}

bool OAIDataAirportsSearch::is_airport_website_Valid() const{
    return m_airport_website_isValid;
}

qint32 OAIDataAirportsSearch::getAltitude() const {
    return m_altitude;
}
void OAIDataAirportsSearch::setAltitude(const qint32 &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIDataAirportsSearch::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIDataAirportsSearch::is_altitude_Valid() const{
    return m_altitude_isValid;
}

QString OAIDataAirportsSearch::getCityname() const {
    return m_cityname;
}
void OAIDataAirportsSearch::setCityname(const QString &cityname) {
    m_cityname = cityname;
    m_cityname_isSet = true;
}

bool OAIDataAirportsSearch::is_cityname_Set() const{
    return m_cityname_isSet;
}

bool OAIDataAirportsSearch::is_cityname_Valid() const{
    return m_cityname_isValid;
}

QString OAIDataAirportsSearch::getCountrycode() const {
    return m_countrycode;
}
void OAIDataAirportsSearch::setCountrycode(const QString &countrycode) {
    m_countrycode = countrycode;
    m_countrycode_isSet = true;
}

bool OAIDataAirportsSearch::is_countrycode_Set() const{
    return m_countrycode_isSet;
}

bool OAIDataAirportsSearch::is_countrycode_Valid() const{
    return m_countrycode_isValid;
}

qint32 OAIDataAirportsSearch::getDestinationscount() const {
    return m_destinationscount;
}
void OAIDataAirportsSearch::setDestinationscount(const qint32 &destinationscount) {
    m_destinationscount = destinationscount;
    m_destinationscount_isSet = true;
}

bool OAIDataAirportsSearch::is_destinationscount_Set() const{
    return m_destinationscount_isSet;
}

bool OAIDataAirportsSearch::is_destinationscount_Valid() const{
    return m_destinationscount_isValid;
}

QString OAIDataAirportsSearch::getDistance() const {
    return m_distance;
}
void OAIDataAirportsSearch::setDistance(const QString &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIDataAirportsSearch::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIDataAirportsSearch::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIDataAirportsSearch::getIatacode() const {
    return m_iatacode;
}
void OAIDataAirportsSearch::setIatacode(const QString &iatacode) {
    m_iatacode = iatacode;
    m_iatacode_isSet = true;
}

bool OAIDataAirportsSearch::is_iatacode_Set() const{
    return m_iatacode_isSet;
}

bool OAIDataAirportsSearch::is_iatacode_Valid() const{
    return m_iatacode_isValid;
}

QString OAIDataAirportsSearch::getIcao() const {
    return m_icao;
}
void OAIDataAirportsSearch::setIcao(const QString &icao) {
    m_icao = icao;
    m_icao_isSet = true;
}

bool OAIDataAirportsSearch::is_icao_Set() const{
    return m_icao_isSet;
}

bool OAIDataAirportsSearch::is_icao_Valid() const{
    return m_icao_isValid;
}

bool OAIDataAirportsSearch::isIstopdestination() const {
    return m_istopdestination;
}
void OAIDataAirportsSearch::setIstopdestination(const bool &istopdestination) {
    m_istopdestination = istopdestination;
    m_istopdestination_isSet = true;
}

bool OAIDataAirportsSearch::is_istopdestination_Set() const{
    return m_istopdestination_isSet;
}

bool OAIDataAirportsSearch::is_istopdestination_Valid() const{
    return m_istopdestination_isValid;
}

double OAIDataAirportsSearch::getLatitude() const {
    return m_latitude;
}
void OAIDataAirportsSearch::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIDataAirportsSearch::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIDataAirportsSearch::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIDataAirportsSearch::getLongitude() const {
    return m_longitude;
}
void OAIDataAirportsSearch::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIDataAirportsSearch::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIDataAirportsSearch::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIDataAirportsSearch::getName() const {
    return m_name;
}
void OAIDataAirportsSearch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataAirportsSearch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataAirportsSearch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataAirportsSearch::getTimezone() const {
    return m_timezone;
}
void OAIDataAirportsSearch::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIDataAirportsSearch::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIDataAirportsSearch::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIDataAirportsSearch::getWikipediaPage() const {
    return m_wikipedia_page;
}
void OAIDataAirportsSearch::setWikipediaPage(const QString &wikipedia_page) {
    m_wikipedia_page = wikipedia_page;
    m_wikipedia_page_isSet = true;
}

bool OAIDataAirportsSearch::is_wikipedia_page_Set() const{
    return m_wikipedia_page_isSet;
}

bool OAIDataAirportsSearch::is_wikipedia_page_Valid() const{
    return m_wikipedia_page_isValid;
}

bool OAIDataAirportsSearch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airlineroutescount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airport_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cityname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countrycode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinationscount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iatacode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icao_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_istopdestination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wikipedia_page_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataAirportsSearch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
