# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_page: int=None, per_page: int=None, total_entries: int=None, total_pages: int=None):
        """Pagination - a model defined in OpenAPI

        :param current_page: The current_page of this Pagination.
        :param per_page: The per_page of this Pagination.
        :param total_entries: The total_entries of this Pagination.
        :param total_pages: The total_pages of this Pagination.
        """
        self.openapi_types = {
            'current_page': int,
            'per_page': int,
            'total_entries': int,
            'total_pages': int
        }

        self.attribute_map = {
            'current_page': 'current_page',
            'per_page': 'per_page',
            'total_entries': 'total_entries',
            'total_pages': 'total_pages'
        }

        self._current_page = current_page
        self._per_page = per_page
        self._total_entries = total_entries
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_page(self):
        """Gets the current_page of this Pagination.

        Current page of response.

        :return: The current_page of this Pagination.
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this Pagination.

        Current page of response.

        :param current_page: The current_page of this Pagination.
        :type current_page: int
        """
        if current_page is None:
            raise ValueError("Invalid value for `current_page`, must not be `None`")

        self._current_page = current_page

    @property
    def per_page(self):
        """Gets the per_page of this Pagination.

        Number of results per page.

        :return: The per_page of this Pagination.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this Pagination.

        Number of results per page.

        :param per_page: The per_page of this Pagination.
        :type per_page: int
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")

        self._per_page = per_page

    @property
    def total_entries(self):
        """Gets the total_entries of this Pagination.

        Total number of entries matching this query.

        :return: The total_entries of this Pagination.
        :rtype: int
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this Pagination.

        Total number of entries matching this query.

        :param total_entries: The total_entries of this Pagination.
        :type total_entries: int
        """
        if total_entries is None:
            raise ValueError("Invalid value for `total_entries`, must not be `None`")

        self._total_entries = total_entries

    @property
    def total_pages(self):
        """Gets the total_pages of this Pagination.

        Total number of pages matching this query.

        :return: The total_pages of this Pagination.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Pagination.

        Total number of pages matching this query.

        :param total_pages: The total_pages of this Pagination.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")

        self._total_pages = total_pages
