# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Distance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: float=None, id: str=None):
        """Distance - a model defined in OpenAPI

        :param distance: The distance of this Distance.
        :param id: The id of this Distance.
        """
        self.openapi_types = {
            'distance': float,
            'id': str
        }

        self.attribute_map = {
            'distance': 'distance',
            'id': 'id'
        }

        self._distance = distance
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Distance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Distance of this Distance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this Distance.

        Distance to facility in decimal format.

        :return: The distance of this Distance.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Distance.

        Distance to facility in decimal format.

        :param distance: The distance of this Distance.
        :type distance: float
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance

    @property
    def id(self):
        """Gets the id of this Distance.

        Identifier of facility.

        :return: The id of this Distance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Distance.

        Identifier of facility.

        :param id: The id of this Distance.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
