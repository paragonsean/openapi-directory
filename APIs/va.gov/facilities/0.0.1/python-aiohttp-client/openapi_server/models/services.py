# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Services(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefits: List[str]=None, health: List[str]=None, last_updated: date=None, other: List[str]=None):
        """Services - a model defined in OpenAPI

        :param benefits: The benefits of this Services.
        :param health: The health of this Services.
        :param last_updated: The last_updated of this Services.
        :param other: The other of this Services.
        """
        self.openapi_types = {
            'benefits': List[str],
            'health': List[str],
            'last_updated': date,
            'other': List[str]
        }

        self.attribute_map = {
            'benefits': 'benefits',
            'health': 'health',
            'last_updated': 'last_updated',
            'other': 'other'
        }

        self._benefits = benefits
        self._health = health
        self._last_updated = last_updated
        self._other = other

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Services':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Services of this Services.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefits(self):
        """Gets the benefits of this Services.

        List of benefits services for given facility.

        :return: The benefits of this Services.
        :rtype: List[str]
        """
        return self._benefits

    @benefits.setter
    def benefits(self, benefits):
        """Sets the benefits of this Services.

        List of benefits services for given facility.

        :param benefits: The benefits of this Services.
        :type benefits: List[str]
        """
        allowed_values = [None,"ApplyingForBenefits", "BurialClaimAssistance", "DisabilityClaimAssistance", "eBenefitsRegistrationAssistance", "EducationAndCareerCounseling", "EducationClaimAssistance", "FamilyMemberClaimAssistance", "HomelessAssistance", "InsuranceClaimAssistanceAndFinancialCounseling", "IntegratedDisabilityEvaluationSystemAssistance", "Pensions", "PreDischargeClaimAssistance", "TransitionAssistance", "UpdatingDirectDepositInformation", "VAHomeLoanAssistance", "VocationalRehabilitationAndEmploymentAssistance"]  # noqa: E501
        if not set(benefits).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `benefits` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(benefits) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._benefits = benefits

    @property
    def health(self):
        """Gets the health of this Services.

        List of health services for given facility.

        :return: The health of this Services.
        :rtype: List[str]
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Services.

        List of health services for given facility.

        :param health: The health of this Services.
        :type health: List[str]
        """
        allowed_values = [None,"Audiology", "Cardiology", "CaregiverSupport", "Covid19Vaccine", "DentalServices", "Dermatology", "EmergencyCare", "Gastroenterology", "Gynecology", "MentalHealthCare", "Ophthalmology", "Optometry", "Orthopedics", "Nutrition", "Podiatry", "PrimaryCare", "SpecialtyCare", "UrgentCare", "Urology", "WomensHealth"]  # noqa: E501
        if not set(health).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `health` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(health) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._health = health

    @property
    def last_updated(self):
        """Gets the last_updated of this Services.

        Date of the most recent change in offered services.

        :return: The last_updated of this Services.
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Services.

        Date of the most recent change in offered services.

        :param last_updated: The last_updated of this Services.
        :type last_updated: date
        """

        self._last_updated = last_updated

    @property
    def other(self):
        """Gets the other of this Services.

        List of other services not included in one of the other service categories.

        :return: The other of this Services.
        :rtype: List[str]
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this Services.

        List of other services not included in one of the other service categories.

        :param other: The other of this Services.
        :type other: List[str]
        """
        allowed_values = [None,"OnlineScheduling"]  # noqa: E501
        if not set(other).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `other` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(other) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._other = other
