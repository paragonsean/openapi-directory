# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.addresses import Addresses
from openapi_server.models.detailed_service import DetailedService
from openapi_server.models.hours import Hours
from openapi_server.models.operating_status import OperatingStatus
from openapi_server.models.phone import Phone
from openapi_server.models.satisfaction import Satisfaction
from openapi_server.models.services import Services
from openapi_server.models.wait_times import WaitTimes
from openapi_server import util


class FacilityAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_status: str=None, address: Addresses=None, classification: str=None, detailed_services: List[DetailedService]=None, facility_type: str=None, hours: Hours=None, lat: float=None, long: float=None, mobile: bool=None, name: str=None, operating_status: OperatingStatus=None, operational_hours_special_instructions: str=None, phone: Phone=None, satisfaction: Satisfaction=None, services: Services=None, time_zone: str=None, visn: str=None, wait_times: WaitTimes=None, website: str=None):
        """FacilityAttributes - a model defined in OpenAPI

        :param active_status: The active_status of this FacilityAttributes.
        :param address: The address of this FacilityAttributes.
        :param classification: The classification of this FacilityAttributes.
        :param detailed_services: The detailed_services of this FacilityAttributes.
        :param facility_type: The facility_type of this FacilityAttributes.
        :param hours: The hours of this FacilityAttributes.
        :param lat: The lat of this FacilityAttributes.
        :param long: The long of this FacilityAttributes.
        :param mobile: The mobile of this FacilityAttributes.
        :param name: The name of this FacilityAttributes.
        :param operating_status: The operating_status of this FacilityAttributes.
        :param operational_hours_special_instructions: The operational_hours_special_instructions of this FacilityAttributes.
        :param phone: The phone of this FacilityAttributes.
        :param satisfaction: The satisfaction of this FacilityAttributes.
        :param services: The services of this FacilityAttributes.
        :param time_zone: The time_zone of this FacilityAttributes.
        :param visn: The visn of this FacilityAttributes.
        :param wait_times: The wait_times of this FacilityAttributes.
        :param website: The website of this FacilityAttributes.
        """
        self.openapi_types = {
            'active_status': str,
            'address': Addresses,
            'classification': str,
            'detailed_services': List[DetailedService],
            'facility_type': str,
            'hours': Hours,
            'lat': float,
            'long': float,
            'mobile': bool,
            'name': str,
            'operating_status': OperatingStatus,
            'operational_hours_special_instructions': str,
            'phone': Phone,
            'satisfaction': Satisfaction,
            'services': Services,
            'time_zone': str,
            'visn': str,
            'wait_times': WaitTimes,
            'website': str
        }

        self.attribute_map = {
            'active_status': 'active_status',
            'address': 'address',
            'classification': 'classification',
            'detailed_services': 'detailed_services',
            'facility_type': 'facility_type',
            'hours': 'hours',
            'lat': 'lat',
            'long': 'long',
            'mobile': 'mobile',
            'name': 'name',
            'operating_status': 'operating_status',
            'operational_hours_special_instructions': 'operational_hours_special_instructions',
            'phone': 'phone',
            'satisfaction': 'satisfaction',
            'services': 'services',
            'time_zone': 'time_zone',
            'visn': 'visn',
            'wait_times': 'wait_times',
            'website': 'website'
        }

        self._active_status = active_status
        self._address = address
        self._classification = classification
        self._detailed_services = detailed_services
        self._facility_type = facility_type
        self._hours = hours
        self._lat = lat
        self._long = long
        self._mobile = mobile
        self._name = name
        self._operating_status = operating_status
        self._operational_hours_special_instructions = operational_hours_special_instructions
        self._phone = phone
        self._satisfaction = satisfaction
        self._services = services
        self._time_zone = time_zone
        self._visn = visn
        self._wait_times = wait_times
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacilityAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacilityAttributes of this FacilityAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_status(self):
        """Gets the active_status of this FacilityAttributes.

        This field is deprecated and replaced with \"operating_status\".

        :return: The active_status of this FacilityAttributes.
        :rtype: str
        """
        return self._active_status

    @active_status.setter
    def active_status(self, active_status):
        """Sets the active_status of this FacilityAttributes.

        This field is deprecated and replaced with \"operating_status\".

        :param active_status: The active_status of this FacilityAttributes.
        :type active_status: str
        """
        allowed_values = [None,"A", "T"]  # noqa: E501
        if active_status not in allowed_values:
            raise ValueError(
                "Invalid value for `active_status` ({0}), must be one of {1}"
                .format(active_status, allowed_values)
            )

        self._active_status = active_status

    @property
    def address(self):
        """Gets the address of this FacilityAttributes.


        :return: The address of this FacilityAttributes.
        :rtype: Addresses
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this FacilityAttributes.


        :param address: The address of this FacilityAttributes.
        :type address: Addresses
        """

        self._address = address

    @property
    def classification(self):
        """Gets the classification of this FacilityAttributes.

        Subtype of facility which can further be used to describe facility.

        :return: The classification of this FacilityAttributes.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this FacilityAttributes.

        Subtype of facility which can further be used to describe facility.

        :param classification: The classification of this FacilityAttributes.
        :type classification: str
        """

        self._classification = classification

    @property
    def detailed_services(self):
        """Gets the detailed_services of this FacilityAttributes.


        :return: The detailed_services of this FacilityAttributes.
        :rtype: List[DetailedService]
        """
        return self._detailed_services

    @detailed_services.setter
    def detailed_services(self, detailed_services):
        """Sets the detailed_services of this FacilityAttributes.


        :param detailed_services: The detailed_services of this FacilityAttributes.
        :type detailed_services: List[DetailedService]
        """

        self._detailed_services = detailed_services

    @property
    def facility_type(self):
        """Gets the facility_type of this FacilityAttributes.

        One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.

        :return: The facility_type of this FacilityAttributes.
        :rtype: str
        """
        return self._facility_type

    @facility_type.setter
    def facility_type(self, facility_type):
        """Sets the facility_type of this FacilityAttributes.

        One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.

        :param facility_type: The facility_type of this FacilityAttributes.
        :type facility_type: str
        """
        allowed_values = ["va_benefits_facility", "va_cemetery", "va_health_facility", "vet_center"]  # noqa: E501
        if facility_type not in allowed_values:
            raise ValueError(
                "Invalid value for `facility_type` ({0}), must be one of {1}"
                .format(facility_type, allowed_values)
            )

        self._facility_type = facility_type

    @property
    def hours(self):
        """Gets the hours of this FacilityAttributes.


        :return: The hours of this FacilityAttributes.
        :rtype: Hours
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this FacilityAttributes.


        :param hours: The hours of this FacilityAttributes.
        :type hours: Hours
        """

        self._hours = hours

    @property
    def lat(self):
        """Gets the lat of this FacilityAttributes.

        Facility latitude.

        :return: The lat of this FacilityAttributes.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this FacilityAttributes.

        Facility latitude.

        :param lat: The lat of this FacilityAttributes.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def long(self):
        """Gets the long of this FacilityAttributes.

        Facility longitude.

        :return: The long of this FacilityAttributes.
        :rtype: float
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this FacilityAttributes.

        Facility longitude.

        :param long: The long of this FacilityAttributes.
        :type long: float
        """
        if long is None:
            raise ValueError("Invalid value for `long`, must not be `None`")

        self._long = long

    @property
    def mobile(self):
        """Gets the mobile of this FacilityAttributes.


        :return: The mobile of this FacilityAttributes.
        :rtype: bool
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this FacilityAttributes.


        :param mobile: The mobile of this FacilityAttributes.
        :type mobile: bool
        """

        self._mobile = mobile

    @property
    def name(self):
        """Gets the name of this FacilityAttributes.

        Name associated with given facility.

        :return: The name of this FacilityAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacilityAttributes.

        Name associated with given facility.

        :param name: The name of this FacilityAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operating_status(self):
        """Gets the operating_status of this FacilityAttributes.


        :return: The operating_status of this FacilityAttributes.
        :rtype: OperatingStatus
        """
        return self._operating_status

    @operating_status.setter
    def operating_status(self, operating_status):
        """Sets the operating_status of this FacilityAttributes.


        :param operating_status: The operating_status of this FacilityAttributes.
        :type operating_status: OperatingStatus
        """
        if operating_status is None:
            raise ValueError("Invalid value for `operating_status`, must not be `None`")

        self._operating_status = operating_status

    @property
    def operational_hours_special_instructions(self):
        """Gets the operational_hours_special_instructions of this FacilityAttributes.

        Additional information about a VA health or Vet Center facility's operating hours.

        :return: The operational_hours_special_instructions of this FacilityAttributes.
        :rtype: str
        """
        return self._operational_hours_special_instructions

    @operational_hours_special_instructions.setter
    def operational_hours_special_instructions(self, operational_hours_special_instructions):
        """Sets the operational_hours_special_instructions of this FacilityAttributes.

        Additional information about a VA health or Vet Center facility's operating hours.

        :param operational_hours_special_instructions: The operational_hours_special_instructions of this FacilityAttributes.
        :type operational_hours_special_instructions: str
        """

        self._operational_hours_special_instructions = operational_hours_special_instructions

    @property
    def phone(self):
        """Gets the phone of this FacilityAttributes.


        :return: The phone of this FacilityAttributes.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this FacilityAttributes.


        :param phone: The phone of this FacilityAttributes.
        :type phone: Phone
        """

        self._phone = phone

    @property
    def satisfaction(self):
        """Gets the satisfaction of this FacilityAttributes.


        :return: The satisfaction of this FacilityAttributes.
        :rtype: Satisfaction
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction):
        """Sets the satisfaction of this FacilityAttributes.


        :param satisfaction: The satisfaction of this FacilityAttributes.
        :type satisfaction: Satisfaction
        """

        self._satisfaction = satisfaction

    @property
    def services(self):
        """Gets the services of this FacilityAttributes.


        :return: The services of this FacilityAttributes.
        :rtype: Services
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this FacilityAttributes.


        :param services: The services of this FacilityAttributes.
        :type services: Services
        """

        self._services = services

    @property
    def time_zone(self):
        """Gets the time_zone of this FacilityAttributes.

        Facility time zone.

        :return: The time_zone of this FacilityAttributes.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this FacilityAttributes.

        Facility time zone.

        :param time_zone: The time_zone of this FacilityAttributes.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def visn(self):
        """Gets the visn of this FacilityAttributes.


        :return: The visn of this FacilityAttributes.
        :rtype: str
        """
        return self._visn

    @visn.setter
    def visn(self, visn):
        """Sets the visn of this FacilityAttributes.


        :param visn: The visn of this FacilityAttributes.
        :type visn: str
        """

        self._visn = visn

    @property
    def wait_times(self):
        """Gets the wait_times of this FacilityAttributes.


        :return: The wait_times of this FacilityAttributes.
        :rtype: WaitTimes
        """
        return self._wait_times

    @wait_times.setter
    def wait_times(self, wait_times):
        """Sets the wait_times of this FacilityAttributes.


        :param wait_times: The wait_times of this FacilityAttributes.
        :type wait_times: WaitTimes
        """

        self._wait_times = wait_times

    @property
    def website(self):
        """Gets the website of this FacilityAttributes.

        Web address of facility.

        :return: The website of this FacilityAttributes.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this FacilityAttributes.

        Web address of facility.

        :param website: The website of this FacilityAttributes.
        :type website: str
        """

        self._website = website
