# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientWaitTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, established: float=None, new: float=None, service: str=None):
        """PatientWaitTime - a model defined in OpenAPI

        :param established: The established of this PatientWaitTime.
        :param new: The new of this PatientWaitTime.
        :param service: The service of this PatientWaitTime.
        """
        self.openapi_types = {
            'established': float,
            'new': float,
            'service': str
        }

        self.attribute_map = {
            'established': 'established',
            'new': 'new',
            'service': 'service'
        }

        self._established = established
        self._new = new
        self._service = service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientWaitTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientWaitTime of this PatientWaitTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def established(self):
        """Gets the established of this PatientWaitTime.

        Average number of days a patient who has already been to this location has to wait for a non-urgent appointment.

        :return: The established of this PatientWaitTime.
        :rtype: float
        """
        return self._established

    @established.setter
    def established(self, established):
        """Sets the established of this PatientWaitTime.

        Average number of days a patient who has already been to this location has to wait for a non-urgent appointment.

        :param established: The established of this PatientWaitTime.
        :type established: float
        """

        self._established = established

    @property
    def new(self):
        """Gets the new of this PatientWaitTime.

        Average number of days a Veteran who hasn't been to this location has to wait for a non-urgent appointment.

        :return: The new of this PatientWaitTime.
        :rtype: float
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this PatientWaitTime.

        Average number of days a Veteran who hasn't been to this location has to wait for a non-urgent appointment.

        :param new: The new of this PatientWaitTime.
        :type new: float
        """

        self._new = new

    @property
    def service(self):
        """Gets the service of this PatientWaitTime.

        Service being offered by facility.

        :return: The service of this PatientWaitTime.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this PatientWaitTime.

        Service being offered by facility.

        :param service: The service of this PatientWaitTime.
        :type service: str
        """
        allowed_values = ["Audiology", "Cardiology", "CaregiverSupport", "Covid19Vaccine", "DentalServices", "Dermatology", "EmergencyCare", "Gastroenterology", "Gynecology", "MentalHealthCare", "Ophthalmology", "Optometry", "Orthopedics", "Nutrition", "Podiatry", "PrimaryCare", "SpecialtyCare", "UrgentCare", "Urology", "WomensHealth"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service
