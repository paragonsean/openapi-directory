# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distance import Distance
from openapi_server.models.pagination import Pagination
from openapi_server import util


class FacilitiesMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distances: List[Distance]=None, pagination: Pagination=None):
        """FacilitiesMetadata - a model defined in OpenAPI

        :param distances: The distances of this FacilitiesMetadata.
        :param pagination: The pagination of this FacilitiesMetadata.
        """
        self.openapi_types = {
            'distances': List[Distance],
            'pagination': Pagination
        }

        self.attribute_map = {
            'distances': 'distances',
            'pagination': 'pagination'
        }

        self._distances = distances
        self._pagination = pagination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacilitiesMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacilitiesMetadata of this FacilitiesMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distances(self):
        """Gets the distances of this FacilitiesMetadata.


        :return: The distances of this FacilitiesMetadata.
        :rtype: List[Distance]
        """
        return self._distances

    @distances.setter
    def distances(self, distances):
        """Sets the distances of this FacilitiesMetadata.


        :param distances: The distances of this FacilitiesMetadata.
        :type distances: List[Distance]
        """

        self._distances = distances

    @property
    def pagination(self):
        """Gets the pagination of this FacilitiesMetadata.


        :return: The pagination of this FacilitiesMetadata.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this FacilitiesMetadata.


        :param pagination: The pagination of this FacilitiesMetadata.
        :type pagination: Pagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")

        self._pagination = pagination
