/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailedServiceLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailedServiceLocation::OAIDetailedServiceLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailedServiceLocation::OAIDetailedServiceLocation() {
    this->initializeModel();
}

OAIDetailedServiceLocation::~OAIDetailedServiceLocation() {}

void OAIDetailedServiceLocation::initializeModel() {

    m_additional_hours_info_isSet = false;
    m_additional_hours_info_isValid = false;

    m_appointment_phones_isSet = false;
    m_appointment_phones_isValid = false;

    m_email_contacts_isSet = false;
    m_email_contacts_isValid = false;

    m_facility_service_hours_isSet = false;
    m_facility_service_hours_isValid = false;

    m_service_location_address_isSet = false;
    m_service_location_address_isValid = false;
}

void OAIDetailedServiceLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailedServiceLocation::fromJsonObject(QJsonObject json) {

    m_additional_hours_info_isValid = ::OpenAPI::fromJsonValue(m_additional_hours_info, json[QString("additional_hours_info")]);
    m_additional_hours_info_isSet = !json[QString("additional_hours_info")].isNull() && m_additional_hours_info_isValid;

    m_appointment_phones_isValid = ::OpenAPI::fromJsonValue(m_appointment_phones, json[QString("appointment_phones")]);
    m_appointment_phones_isSet = !json[QString("appointment_phones")].isNull() && m_appointment_phones_isValid;

    m_email_contacts_isValid = ::OpenAPI::fromJsonValue(m_email_contacts, json[QString("email_contacts")]);
    m_email_contacts_isSet = !json[QString("email_contacts")].isNull() && m_email_contacts_isValid;

    m_facility_service_hours_isValid = ::OpenAPI::fromJsonValue(m_facility_service_hours, json[QString("facility_service_hours")]);
    m_facility_service_hours_isSet = !json[QString("facility_service_hours")].isNull() && m_facility_service_hours_isValid;

    m_service_location_address_isValid = ::OpenAPI::fromJsonValue(m_service_location_address, json[QString("service_location_address")]);
    m_service_location_address_isSet = !json[QString("service_location_address")].isNull() && m_service_location_address_isValid;
}

QString OAIDetailedServiceLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailedServiceLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_hours_info_isSet) {
        obj.insert(QString("additional_hours_info"), ::OpenAPI::toJsonValue(m_additional_hours_info));
    }
    if (m_appointment_phones.size() > 0) {
        obj.insert(QString("appointment_phones"), ::OpenAPI::toJsonValue(m_appointment_phones));
    }
    if (m_email_contacts.size() > 0) {
        obj.insert(QString("email_contacts"), ::OpenAPI::toJsonValue(m_email_contacts));
    }
    if (m_facility_service_hours.isSet()) {
        obj.insert(QString("facility_service_hours"), ::OpenAPI::toJsonValue(m_facility_service_hours));
    }
    if (m_service_location_address.isSet()) {
        obj.insert(QString("service_location_address"), ::OpenAPI::toJsonValue(m_service_location_address));
    }
    return obj;
}

QString OAIDetailedServiceLocation::getAdditionalHoursInfo() const {
    return m_additional_hours_info;
}
void OAIDetailedServiceLocation::setAdditionalHoursInfo(const QString &additional_hours_info) {
    m_additional_hours_info = additional_hours_info;
    m_additional_hours_info_isSet = true;
}

bool OAIDetailedServiceLocation::is_additional_hours_info_Set() const{
    return m_additional_hours_info_isSet;
}

bool OAIDetailedServiceLocation::is_additional_hours_info_Valid() const{
    return m_additional_hours_info_isValid;
}

QList<OAIAppointmentPhoneNumber> OAIDetailedServiceLocation::getAppointmentPhones() const {
    return m_appointment_phones;
}
void OAIDetailedServiceLocation::setAppointmentPhones(const QList<OAIAppointmentPhoneNumber> &appointment_phones) {
    m_appointment_phones = appointment_phones;
    m_appointment_phones_isSet = true;
}

bool OAIDetailedServiceLocation::is_appointment_phones_Set() const{
    return m_appointment_phones_isSet;
}

bool OAIDetailedServiceLocation::is_appointment_phones_Valid() const{
    return m_appointment_phones_isValid;
}

QList<OAIDetailedServiceEmailContact> OAIDetailedServiceLocation::getEmailContacts() const {
    return m_email_contacts;
}
void OAIDetailedServiceLocation::setEmailContacts(const QList<OAIDetailedServiceEmailContact> &email_contacts) {
    m_email_contacts = email_contacts;
    m_email_contacts_isSet = true;
}

bool OAIDetailedServiceLocation::is_email_contacts_Set() const{
    return m_email_contacts_isSet;
}

bool OAIDetailedServiceLocation::is_email_contacts_Valid() const{
    return m_email_contacts_isValid;
}

OAIDetailedServiceHours OAIDetailedServiceLocation::getFacilityServiceHours() const {
    return m_facility_service_hours;
}
void OAIDetailedServiceLocation::setFacilityServiceHours(const OAIDetailedServiceHours &facility_service_hours) {
    m_facility_service_hours = facility_service_hours;
    m_facility_service_hours_isSet = true;
}

bool OAIDetailedServiceLocation::is_facility_service_hours_Set() const{
    return m_facility_service_hours_isSet;
}

bool OAIDetailedServiceLocation::is_facility_service_hours_Valid() const{
    return m_facility_service_hours_isValid;
}

OAIDetailedServiceAddress OAIDetailedServiceLocation::getServiceLocationAddress() const {
    return m_service_location_address;
}
void OAIDetailedServiceLocation::setServiceLocationAddress(const OAIDetailedServiceAddress &service_location_address) {
    m_service_location_address = service_location_address;
    m_service_location_address_isSet = true;
}

bool OAIDetailedServiceLocation::is_service_location_address_Set() const{
    return m_service_location_address_isSet;
}

bool OAIDetailedServiceLocation::is_service_location_address_Valid() const{
    return m_service_location_address_isValid;
}

bool OAIDetailedServiceLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_hours_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_contacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_service_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_location_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailedServiceLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
