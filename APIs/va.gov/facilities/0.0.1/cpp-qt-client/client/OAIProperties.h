/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProperties.h
 *
 * Details describing a facility.
 */

#ifndef OAIProperties_H
#define OAIProperties_H

#include <QJsonObject>

#include "OAIAddresses.h"
#include "OAIDetailedService.h"
#include "OAIHours.h"
#include "OAIOperatingStatus.h"
#include "OAIPhone.h"
#include "OAISatisfaction.h"
#include "OAIServices.h"
#include "OAIWaitTimes.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddresses;
class OAIDetailedService;
class OAIHours;
class OAIOperatingStatus;
class OAIPhone;
class OAISatisfaction;
class OAIServices;
class OAIWaitTimes;

class OAIProperties : public OAIObject {
public:
    OAIProperties();
    OAIProperties(QString json);
    ~OAIProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveStatus() const;
    void setActiveStatus(const QString &active_status);
    bool is_active_status_Set() const;
    bool is_active_status_Valid() const;

    OAIAddresses getAddress() const;
    void setAddress(const OAIAddresses &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getClassification() const;
    void setClassification(const QString &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QList<OAIDetailedService> getDetailedServices() const;
    void setDetailedServices(const QList<OAIDetailedService> &detailed_services);
    bool is_detailed_services_Set() const;
    bool is_detailed_services_Valid() const;

    QString getFacilityType() const;
    void setFacilityType(const QString &facility_type);
    bool is_facility_type_Set() const;
    bool is_facility_type_Valid() const;

    OAIHours getHours() const;
    void setHours(const OAIHours &hours);
    bool is_hours_Set() const;
    bool is_hours_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isMobile() const;
    void setMobile(const bool &mobile);
    bool is_mobile_Set() const;
    bool is_mobile_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOperatingStatus getOperatingStatus() const;
    void setOperatingStatus(const OAIOperatingStatus &operating_status);
    bool is_operating_status_Set() const;
    bool is_operating_status_Valid() const;

    QString getOperationalHoursSpecialInstructions() const;
    void setOperationalHoursSpecialInstructions(const QString &operational_hours_special_instructions);
    bool is_operational_hours_special_instructions_Set() const;
    bool is_operational_hours_special_instructions_Valid() const;

    OAIPhone getPhone() const;
    void setPhone(const OAIPhone &phone);
    bool is_phone_Set() const;
    bool is_phone_Valid() const;

    OAISatisfaction getSatisfaction() const;
    void setSatisfaction(const OAISatisfaction &satisfaction);
    bool is_satisfaction_Set() const;
    bool is_satisfaction_Valid() const;

    OAIServices getServices() const;
    void setServices(const OAIServices &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getVisn() const;
    void setVisn(const QString &visn);
    bool is_visn_Set() const;
    bool is_visn_Valid() const;

    OAIWaitTimes getWaitTimes() const;
    void setWaitTimes(const OAIWaitTimes &wait_times);
    bool is_wait_times_Set() const;
    bool is_wait_times_Valid() const;

    QString getWebsite() const;
    void setWebsite(const QString &website);
    bool is_website_Set() const;
    bool is_website_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_status;
    bool m_active_status_isSet;
    bool m_active_status_isValid;

    OAIAddresses m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QList<OAIDetailedService> m_detailed_services;
    bool m_detailed_services_isSet;
    bool m_detailed_services_isValid;

    QString m_facility_type;
    bool m_facility_type_isSet;
    bool m_facility_type_isValid;

    OAIHours m_hours;
    bool m_hours_isSet;
    bool m_hours_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_mobile;
    bool m_mobile_isSet;
    bool m_mobile_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOperatingStatus m_operating_status;
    bool m_operating_status_isSet;
    bool m_operating_status_isValid;

    QString m_operational_hours_special_instructions;
    bool m_operational_hours_special_instructions_isSet;
    bool m_operational_hours_special_instructions_isValid;

    OAIPhone m_phone;
    bool m_phone_isSet;
    bool m_phone_isValid;

    OAISatisfaction m_satisfaction;
    bool m_satisfaction_isSet;
    bool m_satisfaction_isValid;

    OAIServices m_services;
    bool m_services_isSet;
    bool m_services_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_visn;
    bool m_visn_isSet;
    bool m_visn_isValid;

    OAIWaitTimes m_wait_times;
    bool m_wait_times_isSet;
    bool m_wait_times_isValid;

    QString m_website;
    bool m_website_isSet;
    bool m_website_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProperties)

#endif // OAIProperties_H
