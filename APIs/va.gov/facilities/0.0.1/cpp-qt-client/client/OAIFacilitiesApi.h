/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFacilitiesApi_H
#define OAI_OAIFacilitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIFacilitiesIdsResponse.h"
#include "OAIFacilitiesResponse.h"
#include "OAIFacilityReadResponse.h"
#include "OAIGenericError.h"
#include "OAIGeoFacilitiesResponse.h"
#include "OAIGeoFacilityReadResponse.h"
#include "OAINearbyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFacilitiesApi : public QObject {
    Q_OBJECT

public:
    OAIFacilitiesApi(const int timeOut = 0);
    ~OAIFacilitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    */
    virtual void getAllFacilities(const QString &accept);

    /**
    * @param[in]  ids QList<QString> [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  r_long float [optional]
    * @param[in]  radius float [optional]
    * @param[in]  bbox QList<float> [optional]
    * @param[in]  visn double [optional]
    * @param[in]  type QString [optional]
    * @param[in]  services QList<QString> [optional]
    * @param[in]  mobile bool [optional]
    * @param[in]  page qint64 [optional]
    * @param[in]  per_page qint64 [optional]
    */
    virtual void getFacilitiesByLocation(const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &r_long = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &radius = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QList<float>> &bbox = ::OpenAPI::OptionalParam<QList<float>>(), const ::OpenAPI::OptionalParam<double> &visn = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &services = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint64> &page = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &per_page = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getFacilityById(const QString &id);

    /**
    * @param[in]  type QString [optional]
    */
    virtual void getFacilityIds(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat float [optional]
    * @param[in]  lng float [optional]
    * @param[in]  street_address QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  zip QString [optional]
    * @param[in]  drive_time qint32 [optional]
    * @param[in]  services QList<QString> [optional]
    */
    virtual void getNearbyFacilities(const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lng = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &street_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &drive_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &services = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAllFacilitiesCallback(OAIHttpRequestWorker *worker);
    void getFacilitiesByLocationCallback(OAIHttpRequestWorker *worker);
    void getFacilityByIdCallback(OAIHttpRequestWorker *worker);
    void getFacilityIdsCallback(OAIHttpRequestWorker *worker);
    void getNearbyFacilitiesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAllFacilitiesSignal(OAIGeoFacilitiesResponse summary);
    void getFacilitiesByLocationSignal(OAIGeoFacilitiesResponse summary);
    void getFacilityByIdSignal(OAIGeoFacilityReadResponse summary);
    void getFacilityIdsSignal(OAIFacilitiesIdsResponse summary);
    void getNearbyFacilitiesSignal(OAINearbyResponse summary);


    void getAllFacilitiesSignalFull(OAIHttpRequestWorker *worker, OAIGeoFacilitiesResponse summary);
    void getFacilitiesByLocationSignalFull(OAIHttpRequestWorker *worker, OAIGeoFacilitiesResponse summary);
    void getFacilityByIdSignalFull(OAIHttpRequestWorker *worker, OAIGeoFacilityReadResponse summary);
    void getFacilityIdsSignalFull(OAIHttpRequestWorker *worker, OAIFacilitiesIdsResponse summary);
    void getNearbyFacilitiesSignalFull(OAIHttpRequestWorker *worker, OAINearbyResponse summary);

    Q_DECL_DEPRECATED_X("Use getAllFacilitiesSignalError() instead")
    void getAllFacilitiesSignalE(OAIGeoFacilitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFacilitiesSignalError(OAIGeoFacilitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilitiesByLocationSignalError() instead")
    void getFacilitiesByLocationSignalE(OAIGeoFacilitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilitiesByLocationSignalError(OAIGeoFacilitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilityByIdSignalError() instead")
    void getFacilityByIdSignalE(OAIGeoFacilityReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilityByIdSignalError(OAIGeoFacilityReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilityIdsSignalError() instead")
    void getFacilityIdsSignalE(OAIFacilitiesIdsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilityIdsSignalError(OAIFacilitiesIdsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNearbyFacilitiesSignalError() instead")
    void getNearbyFacilitiesSignalE(OAINearbyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNearbyFacilitiesSignalError(OAINearbyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAllFacilitiesSignalErrorFull() instead")
    void getAllFacilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllFacilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilitiesByLocationSignalErrorFull() instead")
    void getFacilitiesByLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilitiesByLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilityByIdSignalErrorFull() instead")
    void getFacilityByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilityByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFacilityIdsSignalErrorFull() instead")
    void getFacilityIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFacilityIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNearbyFacilitiesSignalErrorFull() instead")
    void getNearbyFacilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNearbyFacilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
