/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacilityAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacilityAttributes::OAIFacilityAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacilityAttributes::OAIFacilityAttributes() {
    this->initializeModel();
}

OAIFacilityAttributes::~OAIFacilityAttributes() {}

void OAIFacilityAttributes::initializeModel() {

    m_active_status_isSet = false;
    m_active_status_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_detailed_services_isSet = false;
    m_detailed_services_isValid = false;

    m_facility_type_isSet = false;
    m_facility_type_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_r_long_isSet = false;
    m_r_long_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operating_status_isSet = false;
    m_operating_status_isValid = false;

    m_operational_hours_special_instructions_isSet = false;
    m_operational_hours_special_instructions_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_satisfaction_isSet = false;
    m_satisfaction_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_visn_isSet = false;
    m_visn_isValid = false;

    m_wait_times_isSet = false;
    m_wait_times_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIFacilityAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacilityAttributes::fromJsonObject(QJsonObject json) {

    m_active_status_isValid = ::OpenAPI::fromJsonValue(m_active_status, json[QString("active_status")]);
    m_active_status_isSet = !json[QString("active_status")].isNull() && m_active_status_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_detailed_services_isValid = ::OpenAPI::fromJsonValue(m_detailed_services, json[QString("detailed_services")]);
    m_detailed_services_isSet = !json[QString("detailed_services")].isNull() && m_detailed_services_isValid;

    m_facility_type_isValid = ::OpenAPI::fromJsonValue(m_facility_type, json[QString("facility_type")]);
    m_facility_type_isSet = !json[QString("facility_type")].isNull() && m_facility_type_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_r_long_isValid = ::OpenAPI::fromJsonValue(m_r_long, json[QString("long")]);
    m_r_long_isSet = !json[QString("long")].isNull() && m_r_long_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operating_status_isValid = ::OpenAPI::fromJsonValue(m_operating_status, json[QString("operating_status")]);
    m_operating_status_isSet = !json[QString("operating_status")].isNull() && m_operating_status_isValid;

    m_operational_hours_special_instructions_isValid = ::OpenAPI::fromJsonValue(m_operational_hours_special_instructions, json[QString("operational_hours_special_instructions")]);
    m_operational_hours_special_instructions_isSet = !json[QString("operational_hours_special_instructions")].isNull() && m_operational_hours_special_instructions_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_satisfaction_isValid = ::OpenAPI::fromJsonValue(m_satisfaction, json[QString("satisfaction")]);
    m_satisfaction_isSet = !json[QString("satisfaction")].isNull() && m_satisfaction_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_visn_isValid = ::OpenAPI::fromJsonValue(m_visn, json[QString("visn")]);
    m_visn_isSet = !json[QString("visn")].isNull() && m_visn_isValid;

    m_wait_times_isValid = ::OpenAPI::fromJsonValue(m_wait_times, json[QString("wait_times")]);
    m_wait_times_isSet = !json[QString("wait_times")].isNull() && m_wait_times_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIFacilityAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacilityAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_active_status_isSet) {
        obj.insert(QString("active_status"), ::OpenAPI::toJsonValue(m_active_status));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_detailed_services.size() > 0) {
        obj.insert(QString("detailed_services"), ::OpenAPI::toJsonValue(m_detailed_services));
    }
    if (m_facility_type_isSet) {
        obj.insert(QString("facility_type"), ::OpenAPI::toJsonValue(m_facility_type));
    }
    if (m_hours.isSet()) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_r_long_isSet) {
        obj.insert(QString("long"), ::OpenAPI::toJsonValue(m_r_long));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operating_status.isSet()) {
        obj.insert(QString("operating_status"), ::OpenAPI::toJsonValue(m_operating_status));
    }
    if (m_operational_hours_special_instructions_isSet) {
        obj.insert(QString("operational_hours_special_instructions"), ::OpenAPI::toJsonValue(m_operational_hours_special_instructions));
    }
    if (m_phone.isSet()) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_satisfaction.isSet()) {
        obj.insert(QString("satisfaction"), ::OpenAPI::toJsonValue(m_satisfaction));
    }
    if (m_services.isSet()) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_visn_isSet) {
        obj.insert(QString("visn"), ::OpenAPI::toJsonValue(m_visn));
    }
    if (m_wait_times.isSet()) {
        obj.insert(QString("wait_times"), ::OpenAPI::toJsonValue(m_wait_times));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIFacilityAttributes::getActiveStatus() const {
    return m_active_status;
}
void OAIFacilityAttributes::setActiveStatus(const QString &active_status) {
    m_active_status = active_status;
    m_active_status_isSet = true;
}

bool OAIFacilityAttributes::is_active_status_Set() const{
    return m_active_status_isSet;
}

bool OAIFacilityAttributes::is_active_status_Valid() const{
    return m_active_status_isValid;
}

OAIAddresses OAIFacilityAttributes::getAddress() const {
    return m_address;
}
void OAIFacilityAttributes::setAddress(const OAIAddresses &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIFacilityAttributes::is_address_Set() const{
    return m_address_isSet;
}

bool OAIFacilityAttributes::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIFacilityAttributes::getClassification() const {
    return m_classification;
}
void OAIFacilityAttributes::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIFacilityAttributes::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIFacilityAttributes::is_classification_Valid() const{
    return m_classification_isValid;
}

QList<OAIDetailedService> OAIFacilityAttributes::getDetailedServices() const {
    return m_detailed_services;
}
void OAIFacilityAttributes::setDetailedServices(const QList<OAIDetailedService> &detailed_services) {
    m_detailed_services = detailed_services;
    m_detailed_services_isSet = true;
}

bool OAIFacilityAttributes::is_detailed_services_Set() const{
    return m_detailed_services_isSet;
}

bool OAIFacilityAttributes::is_detailed_services_Valid() const{
    return m_detailed_services_isValid;
}

QString OAIFacilityAttributes::getFacilityType() const {
    return m_facility_type;
}
void OAIFacilityAttributes::setFacilityType(const QString &facility_type) {
    m_facility_type = facility_type;
    m_facility_type_isSet = true;
}

bool OAIFacilityAttributes::is_facility_type_Set() const{
    return m_facility_type_isSet;
}

bool OAIFacilityAttributes::is_facility_type_Valid() const{
    return m_facility_type_isValid;
}

OAIHours OAIFacilityAttributes::getHours() const {
    return m_hours;
}
void OAIFacilityAttributes::setHours(const OAIHours &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIFacilityAttributes::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIFacilityAttributes::is_hours_Valid() const{
    return m_hours_isValid;
}

float OAIFacilityAttributes::getLat() const {
    return m_lat;
}
void OAIFacilityAttributes::setLat(const float &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIFacilityAttributes::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIFacilityAttributes::is_lat_Valid() const{
    return m_lat_isValid;
}

float OAIFacilityAttributes::getRLong() const {
    return m_r_long;
}
void OAIFacilityAttributes::setRLong(const float &r_long) {
    m_r_long = r_long;
    m_r_long_isSet = true;
}

bool OAIFacilityAttributes::is_r_long_Set() const{
    return m_r_long_isSet;
}

bool OAIFacilityAttributes::is_r_long_Valid() const{
    return m_r_long_isValid;
}

bool OAIFacilityAttributes::isMobile() const {
    return m_mobile;
}
void OAIFacilityAttributes::setMobile(const bool &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIFacilityAttributes::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIFacilityAttributes::is_mobile_Valid() const{
    return m_mobile_isValid;
}

QString OAIFacilityAttributes::getName() const {
    return m_name;
}
void OAIFacilityAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFacilityAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFacilityAttributes::is_name_Valid() const{
    return m_name_isValid;
}

OAIOperatingStatus OAIFacilityAttributes::getOperatingStatus() const {
    return m_operating_status;
}
void OAIFacilityAttributes::setOperatingStatus(const OAIOperatingStatus &operating_status) {
    m_operating_status = operating_status;
    m_operating_status_isSet = true;
}

bool OAIFacilityAttributes::is_operating_status_Set() const{
    return m_operating_status_isSet;
}

bool OAIFacilityAttributes::is_operating_status_Valid() const{
    return m_operating_status_isValid;
}

QString OAIFacilityAttributes::getOperationalHoursSpecialInstructions() const {
    return m_operational_hours_special_instructions;
}
void OAIFacilityAttributes::setOperationalHoursSpecialInstructions(const QString &operational_hours_special_instructions) {
    m_operational_hours_special_instructions = operational_hours_special_instructions;
    m_operational_hours_special_instructions_isSet = true;
}

bool OAIFacilityAttributes::is_operational_hours_special_instructions_Set() const{
    return m_operational_hours_special_instructions_isSet;
}

bool OAIFacilityAttributes::is_operational_hours_special_instructions_Valid() const{
    return m_operational_hours_special_instructions_isValid;
}

OAIPhone OAIFacilityAttributes::getPhone() const {
    return m_phone;
}
void OAIFacilityAttributes::setPhone(const OAIPhone &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIFacilityAttributes::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIFacilityAttributes::is_phone_Valid() const{
    return m_phone_isValid;
}

OAISatisfaction OAIFacilityAttributes::getSatisfaction() const {
    return m_satisfaction;
}
void OAIFacilityAttributes::setSatisfaction(const OAISatisfaction &satisfaction) {
    m_satisfaction = satisfaction;
    m_satisfaction_isSet = true;
}

bool OAIFacilityAttributes::is_satisfaction_Set() const{
    return m_satisfaction_isSet;
}

bool OAIFacilityAttributes::is_satisfaction_Valid() const{
    return m_satisfaction_isValid;
}

OAIServices OAIFacilityAttributes::getServices() const {
    return m_services;
}
void OAIFacilityAttributes::setServices(const OAIServices &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIFacilityAttributes::is_services_Set() const{
    return m_services_isSet;
}

bool OAIFacilityAttributes::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIFacilityAttributes::getTimeZone() const {
    return m_time_zone;
}
void OAIFacilityAttributes::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIFacilityAttributes::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIFacilityAttributes::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIFacilityAttributes::getVisn() const {
    return m_visn;
}
void OAIFacilityAttributes::setVisn(const QString &visn) {
    m_visn = visn;
    m_visn_isSet = true;
}

bool OAIFacilityAttributes::is_visn_Set() const{
    return m_visn_isSet;
}

bool OAIFacilityAttributes::is_visn_Valid() const{
    return m_visn_isValid;
}

OAIWaitTimes OAIFacilityAttributes::getWaitTimes() const {
    return m_wait_times;
}
void OAIFacilityAttributes::setWaitTimes(const OAIWaitTimes &wait_times) {
    m_wait_times = wait_times;
    m_wait_times_isSet = true;
}

bool OAIFacilityAttributes::is_wait_times_Set() const{
    return m_wait_times_isSet;
}

bool OAIFacilityAttributes::is_wait_times_Valid() const{
    return m_wait_times_isValid;
}

QString OAIFacilityAttributes::getWebsite() const {
    return m_website;
}
void OAIFacilityAttributes::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIFacilityAttributes::is_website_Set() const{
    return m_website_isSet;
}

bool OAIFacilityAttributes::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIFacilityAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_hours_special_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_times.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacilityAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facility_type_isValid && m_lat_isValid && m_r_long_isValid && m_name_isValid && m_operating_status_isValid && true;
}

} // namespace OpenAPI
