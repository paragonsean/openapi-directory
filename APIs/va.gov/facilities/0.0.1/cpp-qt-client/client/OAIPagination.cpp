/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_entries_isSet = false;
    m_total_entries_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("current_page")]);
    m_current_page_isSet = !json[QString("current_page")].isNull() && m_current_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_total_entries_isValid = ::OpenAPI::fromJsonValue(m_total_entries, json[QString("total_entries")]);
    m_total_entries_isSet = !json[QString("total_entries")].isNull() && m_total_entries_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("total_pages")]);
    m_total_pages_isSet = !json[QString("total_pages")].isNull() && m_total_pages_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("current_page"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_entries_isSet) {
        obj.insert(QString("total_entries"), ::OpenAPI::toJsonValue(m_total_entries));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("total_pages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

qint32 OAIPagination::getCurrentPage() const {
    return m_current_page;
}
void OAIPagination::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIPagination::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIPagination::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIPagination::getPerPage() const {
    return m_per_page;
}
void OAIPagination::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIPagination::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIPagination::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAIPagination::getTotalEntries() const {
    return m_total_entries;
}
void OAIPagination::setTotalEntries(const qint32 &total_entries) {
    m_total_entries = total_entries;
    m_total_entries_isSet = true;
}

bool OAIPagination::is_total_entries_Set() const{
    return m_total_entries_isSet;
}

bool OAIPagination::is_total_entries_Valid() const{
    return m_total_entries_isValid;
}

qint32 OAIPagination::getTotalPages() const {
    return m_total_pages;
}
void OAIPagination::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIPagination::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIPagination::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_entries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_page_isValid && m_per_page_isValid && m_total_entries_isValid && m_total_pages_isValid && true;
}

} // namespace OpenAPI
