/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPagination.h
 *
 * Pagination data reflecting response that has been seperated into discrete pages.
 */

#ifndef OAIPagination_H
#define OAIPagination_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPagination : public OAIObject {
public:
    OAIPagination();
    OAIPagination(QString json);
    ~OAIPagination() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrentPage() const;
    void setCurrentPage(const qint32 &current_page);
    bool is_current_page_Set() const;
    bool is_current_page_Valid() const;

    qint32 getPerPage() const;
    void setPerPage(const qint32 &per_page);
    bool is_per_page_Set() const;
    bool is_per_page_Valid() const;

    qint32 getTotalEntries() const;
    void setTotalEntries(const qint32 &total_entries);
    bool is_total_entries_Set() const;
    bool is_total_entries_Valid() const;

    qint32 getTotalPages() const;
    void setTotalPages(const qint32 &total_pages);
    bool is_total_pages_Set() const;
    bool is_total_pages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current_page;
    bool m_current_page_isSet;
    bool m_current_page_isValid;

    qint32 m_per_page;
    bool m_per_page_isSet;
    bool m_per_page_isValid;

    qint32 m_total_entries;
    bool m_total_entries_isSet;
    bool m_total_entries_isValid;

    qint32 m_total_pages;
    bool m_total_pages_isSet;
    bool m_total_pages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPagination)

#endif // OAIPagination_H
