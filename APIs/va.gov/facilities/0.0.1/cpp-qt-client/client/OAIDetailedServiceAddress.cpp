/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailedServiceAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailedServiceAddress::OAIDetailedServiceAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailedServiceAddress::OAIDetailedServiceAddress() {
    this->initializeModel();
}

OAIDetailedServiceAddress::~OAIDetailedServiceAddress() {}

void OAIDetailedServiceAddress::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_building_name_number_isSet = false;
    m_building_name_number_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_clinic_name_isSet = false;
    m_clinic_name_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_wing_floor_or_room_number_isSet = false;
    m_wing_floor_or_room_number_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIDetailedServiceAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailedServiceAddress::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("address_line1")]);
    m_address_line1_isSet = !json[QString("address_line1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("address_line2")]);
    m_address_line2_isSet = !json[QString("address_line2")].isNull() && m_address_line2_isValid;

    m_building_name_number_isValid = ::OpenAPI::fromJsonValue(m_building_name_number, json[QString("building_name_number")]);
    m_building_name_number_isSet = !json[QString("building_name_number")].isNull() && m_building_name_number_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_clinic_name_isValid = ::OpenAPI::fromJsonValue(m_clinic_name, json[QString("clinic_name")]);
    m_clinic_name_isSet = !json[QString("clinic_name")].isNull() && m_clinic_name_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_wing_floor_or_room_number_isValid = ::OpenAPI::fromJsonValue(m_wing_floor_or_room_number, json[QString("wing_floor_or_room_number")]);
    m_wing_floor_or_room_number_isSet = !json[QString("wing_floor_or_room_number")].isNull() && m_wing_floor_or_room_number_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIDetailedServiceAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailedServiceAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("address_line1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("address_line2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_building_name_number_isSet) {
        obj.insert(QString("building_name_number"), ::OpenAPI::toJsonValue(m_building_name_number));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_clinic_name_isSet) {
        obj.insert(QString("clinic_name"), ::OpenAPI::toJsonValue(m_clinic_name));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_wing_floor_or_room_number_isSet) {
        obj.insert(QString("wing_floor_or_room_number"), ::OpenAPI::toJsonValue(m_wing_floor_or_room_number));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAIDetailedServiceAddress::getAddressLine1() const {
    return m_address_line1;
}
void OAIDetailedServiceAddress::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIDetailedServiceAddress::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIDetailedServiceAddress::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIDetailedServiceAddress::getAddressLine2() const {
    return m_address_line2;
}
void OAIDetailedServiceAddress::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIDetailedServiceAddress::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIDetailedServiceAddress::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIDetailedServiceAddress::getBuildingNameNumber() const {
    return m_building_name_number;
}
void OAIDetailedServiceAddress::setBuildingNameNumber(const QString &building_name_number) {
    m_building_name_number = building_name_number;
    m_building_name_number_isSet = true;
}

bool OAIDetailedServiceAddress::is_building_name_number_Set() const{
    return m_building_name_number_isSet;
}

bool OAIDetailedServiceAddress::is_building_name_number_Valid() const{
    return m_building_name_number_isValid;
}

QString OAIDetailedServiceAddress::getCity() const {
    return m_city;
}
void OAIDetailedServiceAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIDetailedServiceAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIDetailedServiceAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIDetailedServiceAddress::getClinicName() const {
    return m_clinic_name;
}
void OAIDetailedServiceAddress::setClinicName(const QString &clinic_name) {
    m_clinic_name = clinic_name;
    m_clinic_name_isSet = true;
}

bool OAIDetailedServiceAddress::is_clinic_name_Set() const{
    return m_clinic_name_isSet;
}

bool OAIDetailedServiceAddress::is_clinic_name_Valid() const{
    return m_clinic_name_isValid;
}

QString OAIDetailedServiceAddress::getCountryCode() const {
    return m_country_code;
}
void OAIDetailedServiceAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIDetailedServiceAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIDetailedServiceAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIDetailedServiceAddress::getState() const {
    return m_state;
}
void OAIDetailedServiceAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDetailedServiceAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDetailedServiceAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDetailedServiceAddress::getWingFloorOrRoomNumber() const {
    return m_wing_floor_or_room_number;
}
void OAIDetailedServiceAddress::setWingFloorOrRoomNumber(const QString &wing_floor_or_room_number) {
    m_wing_floor_or_room_number = wing_floor_or_room_number;
    m_wing_floor_or_room_number_isSet = true;
}

bool OAIDetailedServiceAddress::is_wing_floor_or_room_number_Set() const{
    return m_wing_floor_or_room_number_isSet;
}

bool OAIDetailedServiceAddress::is_wing_floor_or_room_number_Valid() const{
    return m_wing_floor_or_room_number_isValid;
}

QString OAIDetailedServiceAddress::getZipCode() const {
    return m_zip_code;
}
void OAIDetailedServiceAddress::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIDetailedServiceAddress::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIDetailedServiceAddress::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIDetailedServiceAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_building_name_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clinic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wing_floor_or_room_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailedServiceAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
