/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailedServiceHours.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailedServiceHours::OAIDetailedServiceHours(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailedServiceHours::OAIDetailedServiceHours() {
    this->initializeModel();
}

OAIDetailedServiceHours::~OAIDetailedServiceHours() {}

void OAIDetailedServiceHours::initializeModel() {

    m_friday_isSet = false;
    m_friday_isValid = false;

    m_monday_isSet = false;
    m_monday_isValid = false;

    m_saturday_isSet = false;
    m_saturday_isValid = false;

    m_sunday_isSet = false;
    m_sunday_isValid = false;

    m_thursday_isSet = false;
    m_thursday_isValid = false;

    m_tuesday_isSet = false;
    m_tuesday_isValid = false;

    m_wednesday_isSet = false;
    m_wednesday_isValid = false;
}

void OAIDetailedServiceHours::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailedServiceHours::fromJsonObject(QJsonObject json) {

    m_friday_isValid = ::OpenAPI::fromJsonValue(m_friday, json[QString("Friday")]);
    m_friday_isSet = !json[QString("Friday")].isNull() && m_friday_isValid;

    m_monday_isValid = ::OpenAPI::fromJsonValue(m_monday, json[QString("Monday")]);
    m_monday_isSet = !json[QString("Monday")].isNull() && m_monday_isValid;

    m_saturday_isValid = ::OpenAPI::fromJsonValue(m_saturday, json[QString("Saturday")]);
    m_saturday_isSet = !json[QString("Saturday")].isNull() && m_saturday_isValid;

    m_sunday_isValid = ::OpenAPI::fromJsonValue(m_sunday, json[QString("Sunday")]);
    m_sunday_isSet = !json[QString("Sunday")].isNull() && m_sunday_isValid;

    m_thursday_isValid = ::OpenAPI::fromJsonValue(m_thursday, json[QString("Thursday")]);
    m_thursday_isSet = !json[QString("Thursday")].isNull() && m_thursday_isValid;

    m_tuesday_isValid = ::OpenAPI::fromJsonValue(m_tuesday, json[QString("Tuesday")]);
    m_tuesday_isSet = !json[QString("Tuesday")].isNull() && m_tuesday_isValid;

    m_wednesday_isValid = ::OpenAPI::fromJsonValue(m_wednesday, json[QString("Wednesday")]);
    m_wednesday_isSet = !json[QString("Wednesday")].isNull() && m_wednesday_isValid;
}

QString OAIDetailedServiceHours::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailedServiceHours::asJsonObject() const {
    QJsonObject obj;
    if (m_friday_isSet) {
        obj.insert(QString("Friday"), ::OpenAPI::toJsonValue(m_friday));
    }
    if (m_monday_isSet) {
        obj.insert(QString("Monday"), ::OpenAPI::toJsonValue(m_monday));
    }
    if (m_saturday_isSet) {
        obj.insert(QString("Saturday"), ::OpenAPI::toJsonValue(m_saturday));
    }
    if (m_sunday_isSet) {
        obj.insert(QString("Sunday"), ::OpenAPI::toJsonValue(m_sunday));
    }
    if (m_thursday_isSet) {
        obj.insert(QString("Thursday"), ::OpenAPI::toJsonValue(m_thursday));
    }
    if (m_tuesday_isSet) {
        obj.insert(QString("Tuesday"), ::OpenAPI::toJsonValue(m_tuesday));
    }
    if (m_wednesday_isSet) {
        obj.insert(QString("Wednesday"), ::OpenAPI::toJsonValue(m_wednesday));
    }
    return obj;
}

QString OAIDetailedServiceHours::getFriday() const {
    return m_friday;
}
void OAIDetailedServiceHours::setFriday(const QString &friday) {
    m_friday = friday;
    m_friday_isSet = true;
}

bool OAIDetailedServiceHours::is_friday_Set() const{
    return m_friday_isSet;
}

bool OAIDetailedServiceHours::is_friday_Valid() const{
    return m_friday_isValid;
}

QString OAIDetailedServiceHours::getMonday() const {
    return m_monday;
}
void OAIDetailedServiceHours::setMonday(const QString &monday) {
    m_monday = monday;
    m_monday_isSet = true;
}

bool OAIDetailedServiceHours::is_monday_Set() const{
    return m_monday_isSet;
}

bool OAIDetailedServiceHours::is_monday_Valid() const{
    return m_monday_isValid;
}

QString OAIDetailedServiceHours::getSaturday() const {
    return m_saturday;
}
void OAIDetailedServiceHours::setSaturday(const QString &saturday) {
    m_saturday = saturday;
    m_saturday_isSet = true;
}

bool OAIDetailedServiceHours::is_saturday_Set() const{
    return m_saturday_isSet;
}

bool OAIDetailedServiceHours::is_saturday_Valid() const{
    return m_saturday_isValid;
}

QString OAIDetailedServiceHours::getSunday() const {
    return m_sunday;
}
void OAIDetailedServiceHours::setSunday(const QString &sunday) {
    m_sunday = sunday;
    m_sunday_isSet = true;
}

bool OAIDetailedServiceHours::is_sunday_Set() const{
    return m_sunday_isSet;
}

bool OAIDetailedServiceHours::is_sunday_Valid() const{
    return m_sunday_isValid;
}

QString OAIDetailedServiceHours::getThursday() const {
    return m_thursday;
}
void OAIDetailedServiceHours::setThursday(const QString &thursday) {
    m_thursday = thursday;
    m_thursday_isSet = true;
}

bool OAIDetailedServiceHours::is_thursday_Set() const{
    return m_thursday_isSet;
}

bool OAIDetailedServiceHours::is_thursday_Valid() const{
    return m_thursday_isValid;
}

QString OAIDetailedServiceHours::getTuesday() const {
    return m_tuesday;
}
void OAIDetailedServiceHours::setTuesday(const QString &tuesday) {
    m_tuesday = tuesday;
    m_tuesday_isSet = true;
}

bool OAIDetailedServiceHours::is_tuesday_Set() const{
    return m_tuesday_isSet;
}

bool OAIDetailedServiceHours::is_tuesday_Valid() const{
    return m_tuesday_isValid;
}

QString OAIDetailedServiceHours::getWednesday() const {
    return m_wednesday;
}
void OAIDetailedServiceHours::setWednesday(const QString &wednesday) {
    m_wednesday = wednesday;
    m_wednesday_isSet = true;
}

bool OAIDetailedServiceHours::is_wednesday_Set() const{
    return m_wednesday_isSet;
}

bool OAIDetailedServiceHours::is_wednesday_Valid() const{
    return m_wednesday_isValid;
}

bool OAIDetailedServiceHours::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_friday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thursday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tuesday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wednesday_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailedServiceHours::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
