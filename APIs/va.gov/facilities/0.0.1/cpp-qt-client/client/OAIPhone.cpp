/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhone::OAIPhone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhone::OAIPhone() {
    this->initializeModel();
}

OAIPhone::~OAIPhone() {}

void OAIPhone::initializeModel() {

    m_after_hours_isSet = false;
    m_after_hours_isValid = false;

    m_enrollment_coordinator_isSet = false;
    m_enrollment_coordinator_isValid = false;

    m_fax_isSet = false;
    m_fax_isValid = false;

    m_health_connect_isSet = false;
    m_health_connect_isValid = false;

    m_main_isSet = false;
    m_main_isValid = false;

    m_mental_health_clinic_isSet = false;
    m_mental_health_clinic_isValid = false;

    m_patient_advocate_isSet = false;
    m_patient_advocate_isValid = false;

    m_pharmacy_isSet = false;
    m_pharmacy_isValid = false;
}

void OAIPhone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhone::fromJsonObject(QJsonObject json) {

    m_after_hours_isValid = ::OpenAPI::fromJsonValue(m_after_hours, json[QString("after_hours")]);
    m_after_hours_isSet = !json[QString("after_hours")].isNull() && m_after_hours_isValid;

    m_enrollment_coordinator_isValid = ::OpenAPI::fromJsonValue(m_enrollment_coordinator, json[QString("enrollment_coordinator")]);
    m_enrollment_coordinator_isSet = !json[QString("enrollment_coordinator")].isNull() && m_enrollment_coordinator_isValid;

    m_fax_isValid = ::OpenAPI::fromJsonValue(m_fax, json[QString("fax")]);
    m_fax_isSet = !json[QString("fax")].isNull() && m_fax_isValid;

    m_health_connect_isValid = ::OpenAPI::fromJsonValue(m_health_connect, json[QString("health_connect")]);
    m_health_connect_isSet = !json[QString("health_connect")].isNull() && m_health_connect_isValid;

    m_main_isValid = ::OpenAPI::fromJsonValue(m_main, json[QString("main")]);
    m_main_isSet = !json[QString("main")].isNull() && m_main_isValid;

    m_mental_health_clinic_isValid = ::OpenAPI::fromJsonValue(m_mental_health_clinic, json[QString("mental_health_clinic")]);
    m_mental_health_clinic_isSet = !json[QString("mental_health_clinic")].isNull() && m_mental_health_clinic_isValid;

    m_patient_advocate_isValid = ::OpenAPI::fromJsonValue(m_patient_advocate, json[QString("patient_advocate")]);
    m_patient_advocate_isSet = !json[QString("patient_advocate")].isNull() && m_patient_advocate_isValid;

    m_pharmacy_isValid = ::OpenAPI::fromJsonValue(m_pharmacy, json[QString("pharmacy")]);
    m_pharmacy_isSet = !json[QString("pharmacy")].isNull() && m_pharmacy_isValid;
}

QString OAIPhone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhone::asJsonObject() const {
    QJsonObject obj;
    if (m_after_hours_isSet) {
        obj.insert(QString("after_hours"), ::OpenAPI::toJsonValue(m_after_hours));
    }
    if (m_enrollment_coordinator_isSet) {
        obj.insert(QString("enrollment_coordinator"), ::OpenAPI::toJsonValue(m_enrollment_coordinator));
    }
    if (m_fax_isSet) {
        obj.insert(QString("fax"), ::OpenAPI::toJsonValue(m_fax));
    }
    if (m_health_connect_isSet) {
        obj.insert(QString("health_connect"), ::OpenAPI::toJsonValue(m_health_connect));
    }
    if (m_main_isSet) {
        obj.insert(QString("main"), ::OpenAPI::toJsonValue(m_main));
    }
    if (m_mental_health_clinic_isSet) {
        obj.insert(QString("mental_health_clinic"), ::OpenAPI::toJsonValue(m_mental_health_clinic));
    }
    if (m_patient_advocate_isSet) {
        obj.insert(QString("patient_advocate"), ::OpenAPI::toJsonValue(m_patient_advocate));
    }
    if (m_pharmacy_isSet) {
        obj.insert(QString("pharmacy"), ::OpenAPI::toJsonValue(m_pharmacy));
    }
    return obj;
}

QString OAIPhone::getAfterHours() const {
    return m_after_hours;
}
void OAIPhone::setAfterHours(const QString &after_hours) {
    m_after_hours = after_hours;
    m_after_hours_isSet = true;
}

bool OAIPhone::is_after_hours_Set() const{
    return m_after_hours_isSet;
}

bool OAIPhone::is_after_hours_Valid() const{
    return m_after_hours_isValid;
}

QString OAIPhone::getEnrollmentCoordinator() const {
    return m_enrollment_coordinator;
}
void OAIPhone::setEnrollmentCoordinator(const QString &enrollment_coordinator) {
    m_enrollment_coordinator = enrollment_coordinator;
    m_enrollment_coordinator_isSet = true;
}

bool OAIPhone::is_enrollment_coordinator_Set() const{
    return m_enrollment_coordinator_isSet;
}

bool OAIPhone::is_enrollment_coordinator_Valid() const{
    return m_enrollment_coordinator_isValid;
}

QString OAIPhone::getFax() const {
    return m_fax;
}
void OAIPhone::setFax(const QString &fax) {
    m_fax = fax;
    m_fax_isSet = true;
}

bool OAIPhone::is_fax_Set() const{
    return m_fax_isSet;
}

bool OAIPhone::is_fax_Valid() const{
    return m_fax_isValid;
}

QString OAIPhone::getHealthConnect() const {
    return m_health_connect;
}
void OAIPhone::setHealthConnect(const QString &health_connect) {
    m_health_connect = health_connect;
    m_health_connect_isSet = true;
}

bool OAIPhone::is_health_connect_Set() const{
    return m_health_connect_isSet;
}

bool OAIPhone::is_health_connect_Valid() const{
    return m_health_connect_isValid;
}

QString OAIPhone::getMain() const {
    return m_main;
}
void OAIPhone::setMain(const QString &main) {
    m_main = main;
    m_main_isSet = true;
}

bool OAIPhone::is_main_Set() const{
    return m_main_isSet;
}

bool OAIPhone::is_main_Valid() const{
    return m_main_isValid;
}

QString OAIPhone::getMentalHealthClinic() const {
    return m_mental_health_clinic;
}
void OAIPhone::setMentalHealthClinic(const QString &mental_health_clinic) {
    m_mental_health_clinic = mental_health_clinic;
    m_mental_health_clinic_isSet = true;
}

bool OAIPhone::is_mental_health_clinic_Set() const{
    return m_mental_health_clinic_isSet;
}

bool OAIPhone::is_mental_health_clinic_Valid() const{
    return m_mental_health_clinic_isValid;
}

QString OAIPhone::getPatientAdvocate() const {
    return m_patient_advocate;
}
void OAIPhone::setPatientAdvocate(const QString &patient_advocate) {
    m_patient_advocate = patient_advocate;
    m_patient_advocate_isSet = true;
}

bool OAIPhone::is_patient_advocate_Set() const{
    return m_patient_advocate_isSet;
}

bool OAIPhone::is_patient_advocate_Valid() const{
    return m_patient_advocate_isValid;
}

QString OAIPhone::getPharmacy() const {
    return m_pharmacy;
}
void OAIPhone::setPharmacy(const QString &pharmacy) {
    m_pharmacy = pharmacy;
    m_pharmacy_isSet = true;
}

bool OAIPhone::is_pharmacy_Set() const{
    return m_pharmacy_isSet;
}

bool OAIPhone::is_pharmacy_Valid() const{
    return m_pharmacy_isValid;
}

bool OAIPhone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_after_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_coordinator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_connect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mental_health_clinic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_advocate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pharmacy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
