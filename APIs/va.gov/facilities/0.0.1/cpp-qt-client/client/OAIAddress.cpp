/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_1_isSet = false;
    m_address_1_isValid = false;

    m_address_2_isSet = false;
    m_address_2_isValid = false;

    m_address_3_isSet = false;
    m_address_3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_1_isValid = ::OpenAPI::fromJsonValue(m_address_1, json[QString("address_1")]);
    m_address_1_isSet = !json[QString("address_1")].isNull() && m_address_1_isValid;

    m_address_2_isValid = ::OpenAPI::fromJsonValue(m_address_2, json[QString("address_2")]);
    m_address_2_isSet = !json[QString("address_2")].isNull() && m_address_2_isValid;

    m_address_3_isValid = ::OpenAPI::fromJsonValue(m_address_3, json[QString("address_3")]);
    m_address_3_isSet = !json[QString("address_3")].isNull() && m_address_3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_1_isSet) {
        obj.insert(QString("address_1"), ::OpenAPI::toJsonValue(m_address_1));
    }
    if (m_address_2_isSet) {
        obj.insert(QString("address_2"), ::OpenAPI::toJsonValue(m_address_2));
    }
    if (m_address_3_isSet) {
        obj.insert(QString("address_3"), ::OpenAPI::toJsonValue(m_address_3));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIAddress::getAddress1() const {
    return m_address_1;
}
void OAIAddress::setAddress1(const QString &address_1) {
    m_address_1 = address_1;
    m_address_1_isSet = true;
}

bool OAIAddress::is_address_1_Set() const{
    return m_address_1_isSet;
}

bool OAIAddress::is_address_1_Valid() const{
    return m_address_1_isValid;
}

QString OAIAddress::getAddress2() const {
    return m_address_2;
}
void OAIAddress::setAddress2(const QString &address_2) {
    m_address_2 = address_2;
    m_address_2_isSet = true;
}

bool OAIAddress::is_address_2_Set() const{
    return m_address_2_isSet;
}

bool OAIAddress::is_address_2_Valid() const{
    return m_address_2_isValid;
}

QString OAIAddress::getAddress3() const {
    return m_address_3;
}
void OAIAddress::setAddress3(const QString &address_3) {
    m_address_3 = address_3;
    m_address_3_isSet = true;
}

bool OAIAddress::is_address_3_Set() const{
    return m_address_3_isSet;
}

bool OAIAddress::is_address_3_Valid() const{
    return m_address_3_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getState() const {
    return m_state;
}
void OAIAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddress::getZip() const {
    return m_zip;
}
void OAIAddress::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIAddress::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIAddress::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
