/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacilitiesMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacilitiesMetadata::OAIFacilitiesMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacilitiesMetadata::OAIFacilitiesMetadata() {
    this->initializeModel();
}

OAIFacilitiesMetadata::~OAIFacilitiesMetadata() {}

void OAIFacilitiesMetadata::initializeModel() {

    m_distances_isSet = false;
    m_distances_isValid = false;

    m_pagination_isSet = false;
    m_pagination_isValid = false;
}

void OAIFacilitiesMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacilitiesMetadata::fromJsonObject(QJsonObject json) {

    m_distances_isValid = ::OpenAPI::fromJsonValue(m_distances, json[QString("distances")]);
    m_distances_isSet = !json[QString("distances")].isNull() && m_distances_isValid;

    m_pagination_isValid = ::OpenAPI::fromJsonValue(m_pagination, json[QString("pagination")]);
    m_pagination_isSet = !json[QString("pagination")].isNull() && m_pagination_isValid;
}

QString OAIFacilitiesMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacilitiesMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_distances.size() > 0) {
        obj.insert(QString("distances"), ::OpenAPI::toJsonValue(m_distances));
    }
    if (m_pagination.isSet()) {
        obj.insert(QString("pagination"), ::OpenAPI::toJsonValue(m_pagination));
    }
    return obj;
}

QList<OAIDistance> OAIFacilitiesMetadata::getDistances() const {
    return m_distances;
}
void OAIFacilitiesMetadata::setDistances(const QList<OAIDistance> &distances) {
    m_distances = distances;
    m_distances_isSet = true;
}

bool OAIFacilitiesMetadata::is_distances_Set() const{
    return m_distances_isSet;
}

bool OAIFacilitiesMetadata::is_distances_Valid() const{
    return m_distances_isValid;
}

OAIPagination OAIFacilitiesMetadata::getPagination() const {
    return m_pagination;
}
void OAIFacilitiesMetadata::setPagination(const OAIPagination &pagination) {
    m_pagination = pagination;
    m_pagination_isSet = true;
}

bool OAIFacilitiesMetadata::is_pagination_Set() const{
    return m_pagination_isSet;
}

bool OAIFacilitiesMetadata::is_pagination_Valid() const{
    return m_pagination_isValid;
}

bool OAIFacilitiesMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacilitiesMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pagination_isValid && true;
}

} // namespace OpenAPI
