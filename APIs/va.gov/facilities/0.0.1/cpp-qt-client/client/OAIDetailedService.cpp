/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailedService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailedService::OAIDetailedService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailedService::OAIDetailedService() {
    this->initializeModel();
}

OAIDetailedService::~OAIDetailedService() {}

void OAIDetailedService::initializeModel() {

    m_appointment_leadin_isSet = false;
    m_appointment_leadin_isValid = false;

    m_appointment_phones_isSet = false;
    m_appointment_phones_isValid = false;

    m_description_facility_isSet = false;
    m_description_facility_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_online_scheduling_available_isSet = false;
    m_online_scheduling_available_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_referral_required_isSet = false;
    m_referral_required_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_locations_isSet = false;
    m_service_locations_isValid = false;

    m_walk_ins_accepted_isSet = false;
    m_walk_ins_accepted_isValid = false;
}

void OAIDetailedService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailedService::fromJsonObject(QJsonObject json) {

    m_appointment_leadin_isValid = ::OpenAPI::fromJsonValue(m_appointment_leadin, json[QString("appointment_leadin")]);
    m_appointment_leadin_isSet = !json[QString("appointment_leadin")].isNull() && m_appointment_leadin_isValid;

    m_appointment_phones_isValid = ::OpenAPI::fromJsonValue(m_appointment_phones, json[QString("appointment_phones")]);
    m_appointment_phones_isSet = !json[QString("appointment_phones")].isNull() && m_appointment_phones_isValid;

    m_description_facility_isValid = ::OpenAPI::fromJsonValue(m_description_facility, json[QString("description_facility")]);
    m_description_facility_isSet = !json[QString("description_facility")].isNull() && m_description_facility_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_online_scheduling_available_isValid = ::OpenAPI::fromJsonValue(m_online_scheduling_available, json[QString("online_scheduling_available")]);
    m_online_scheduling_available_isSet = !json[QString("online_scheduling_available")].isNull() && m_online_scheduling_available_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_referral_required_isValid = ::OpenAPI::fromJsonValue(m_referral_required, json[QString("referral_required")]);
    m_referral_required_isSet = !json[QString("referral_required")].isNull() && m_referral_required_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_service_locations_isValid = ::OpenAPI::fromJsonValue(m_service_locations, json[QString("service_locations")]);
    m_service_locations_isSet = !json[QString("service_locations")].isNull() && m_service_locations_isValid;

    m_walk_ins_accepted_isValid = ::OpenAPI::fromJsonValue(m_walk_ins_accepted, json[QString("walk_ins_accepted")]);
    m_walk_ins_accepted_isSet = !json[QString("walk_ins_accepted")].isNull() && m_walk_ins_accepted_isValid;
}

QString OAIDetailedService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailedService::asJsonObject() const {
    QJsonObject obj;
    if (m_appointment_leadin_isSet) {
        obj.insert(QString("appointment_leadin"), ::OpenAPI::toJsonValue(m_appointment_leadin));
    }
    if (m_appointment_phones.size() > 0) {
        obj.insert(QString("appointment_phones"), ::OpenAPI::toJsonValue(m_appointment_phones));
    }
    if (m_description_facility_isSet) {
        obj.insert(QString("description_facility"), ::OpenAPI::toJsonValue(m_description_facility));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_online_scheduling_available_isSet) {
        obj.insert(QString("online_scheduling_available"), ::OpenAPI::toJsonValue(m_online_scheduling_available));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_referral_required_isSet) {
        obj.insert(QString("referral_required"), ::OpenAPI::toJsonValue(m_referral_required));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_locations.size() > 0) {
        obj.insert(QString("service_locations"), ::OpenAPI::toJsonValue(m_service_locations));
    }
    if (m_walk_ins_accepted_isSet) {
        obj.insert(QString("walk_ins_accepted"), ::OpenAPI::toJsonValue(m_walk_ins_accepted));
    }
    return obj;
}

QString OAIDetailedService::getAppointmentLeadin() const {
    return m_appointment_leadin;
}
void OAIDetailedService::setAppointmentLeadin(const QString &appointment_leadin) {
    m_appointment_leadin = appointment_leadin;
    m_appointment_leadin_isSet = true;
}

bool OAIDetailedService::is_appointment_leadin_Set() const{
    return m_appointment_leadin_isSet;
}

bool OAIDetailedService::is_appointment_leadin_Valid() const{
    return m_appointment_leadin_isValid;
}

QList<OAIAppointmentPhoneNumber> OAIDetailedService::getAppointmentPhones() const {
    return m_appointment_phones;
}
void OAIDetailedService::setAppointmentPhones(const QList<OAIAppointmentPhoneNumber> &appointment_phones) {
    m_appointment_phones = appointment_phones;
    m_appointment_phones_isSet = true;
}

bool OAIDetailedService::is_appointment_phones_Set() const{
    return m_appointment_phones_isSet;
}

bool OAIDetailedService::is_appointment_phones_Valid() const{
    return m_appointment_phones_isValid;
}

QString OAIDetailedService::getDescriptionFacility() const {
    return m_description_facility;
}
void OAIDetailedService::setDescriptionFacility(const QString &description_facility) {
    m_description_facility = description_facility;
    m_description_facility_isSet = true;
}

bool OAIDetailedService::is_description_facility_Set() const{
    return m_description_facility_isSet;
}

bool OAIDetailedService::is_description_facility_Valid() const{
    return m_description_facility_isValid;
}

QString OAIDetailedService::getName() const {
    return m_name;
}
void OAIDetailedService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDetailedService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDetailedService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDetailedService::getOnlineSchedulingAvailable() const {
    return m_online_scheduling_available;
}
void OAIDetailedService::setOnlineSchedulingAvailable(const QString &online_scheduling_available) {
    m_online_scheduling_available = online_scheduling_available;
    m_online_scheduling_available_isSet = true;
}

bool OAIDetailedService::is_online_scheduling_available_Set() const{
    return m_online_scheduling_available_isSet;
}

bool OAIDetailedService::is_online_scheduling_available_Valid() const{
    return m_online_scheduling_available_isValid;
}

QString OAIDetailedService::getPath() const {
    return m_path;
}
void OAIDetailedService::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIDetailedService::is_path_Set() const{
    return m_path_isSet;
}

bool OAIDetailedService::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIDetailedService::getReferralRequired() const {
    return m_referral_required;
}
void OAIDetailedService::setReferralRequired(const QString &referral_required) {
    m_referral_required = referral_required;
    m_referral_required_isSet = true;
}

bool OAIDetailedService::is_referral_required_Set() const{
    return m_referral_required_isSet;
}

bool OAIDetailedService::is_referral_required_Valid() const{
    return m_referral_required_isValid;
}

QString OAIDetailedService::getServiceId() const {
    return m_service_id;
}
void OAIDetailedService::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIDetailedService::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIDetailedService::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QList<OAIDetailedServiceLocation> OAIDetailedService::getServiceLocations() const {
    return m_service_locations;
}
void OAIDetailedService::setServiceLocations(const QList<OAIDetailedServiceLocation> &service_locations) {
    m_service_locations = service_locations;
    m_service_locations_isSet = true;
}

bool OAIDetailedService::is_service_locations_Set() const{
    return m_service_locations_isSet;
}

bool OAIDetailedService::is_service_locations_Valid() const{
    return m_service_locations_isValid;
}

QString OAIDetailedService::getWalkInsAccepted() const {
    return m_walk_ins_accepted;
}
void OAIDetailedService::setWalkInsAccepted(const QString &walk_ins_accepted) {
    m_walk_ins_accepted = walk_ins_accepted;
    m_walk_ins_accepted_isSet = true;
}

bool OAIDetailedService::is_walk_ins_accepted_Set() const{
    return m_walk_ins_accepted_isSet;
}

bool OAIDetailedService::is_walk_ins_accepted_Valid() const{
    return m_walk_ins_accepted_isValid;
}

bool OAIDetailedService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appointment_leadin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appointment_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_facility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_scheduling_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_walk_ins_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailedService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
