/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetailedServiceLocation.h
 *
 * Details for a location offering a service.
 */

#ifndef OAIDetailedServiceLocation_H
#define OAIDetailedServiceLocation_H

#include <QJsonObject>

#include "OAIAppointmentPhoneNumber.h"
#include "OAIDetailedServiceAddress.h"
#include "OAIDetailedServiceEmailContact.h"
#include "OAIDetailedServiceHours.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppointmentPhoneNumber;
class OAIDetailedServiceEmailContact;
class OAIDetailedServiceHours;
class OAIDetailedServiceAddress;

class OAIDetailedServiceLocation : public OAIObject {
public:
    OAIDetailedServiceLocation();
    OAIDetailedServiceLocation(QString json);
    ~OAIDetailedServiceLocation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalHoursInfo() const;
    void setAdditionalHoursInfo(const QString &additional_hours_info);
    bool is_additional_hours_info_Set() const;
    bool is_additional_hours_info_Valid() const;

    QList<OAIAppointmentPhoneNumber> getAppointmentPhones() const;
    void setAppointmentPhones(const QList<OAIAppointmentPhoneNumber> &appointment_phones);
    bool is_appointment_phones_Set() const;
    bool is_appointment_phones_Valid() const;

    QList<OAIDetailedServiceEmailContact> getEmailContacts() const;
    void setEmailContacts(const QList<OAIDetailedServiceEmailContact> &email_contacts);
    bool is_email_contacts_Set() const;
    bool is_email_contacts_Valid() const;

    OAIDetailedServiceHours getFacilityServiceHours() const;
    void setFacilityServiceHours(const OAIDetailedServiceHours &facility_service_hours);
    bool is_facility_service_hours_Set() const;
    bool is_facility_service_hours_Valid() const;

    OAIDetailedServiceAddress getServiceLocationAddress() const;
    void setServiceLocationAddress(const OAIDetailedServiceAddress &service_location_address);
    bool is_service_location_address_Set() const;
    bool is_service_location_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_hours_info;
    bool m_additional_hours_info_isSet;
    bool m_additional_hours_info_isValid;

    QList<OAIAppointmentPhoneNumber> m_appointment_phones;
    bool m_appointment_phones_isSet;
    bool m_appointment_phones_isValid;

    QList<OAIDetailedServiceEmailContact> m_email_contacts;
    bool m_email_contacts_isSet;
    bool m_email_contacts_isValid;

    OAIDetailedServiceHours m_facility_service_hours;
    bool m_facility_service_hours_isSet;
    bool m_facility_service_hours_isValid;

    OAIDetailedServiceAddress m_service_location_address;
    bool m_service_location_address_isSet;
    bool m_service_location_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetailedServiceLocation)

#endif // OAIDetailedServiceLocation_H
