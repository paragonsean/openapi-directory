/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import FacilitiesIdsResponse from '../model/FacilitiesIdsResponse';
import FacilitiesResponse from '../model/FacilitiesResponse';
import FacilityReadResponse from '../model/FacilityReadResponse';
import GenericError from '../model/GenericError';
import GeoFacilitiesResponse from '../model/GeoFacilitiesResponse';
import GeoFacilityReadResponse from '../model/GeoFacilityReadResponse';
import NearbyResponse from '../model/NearbyResponse';

/**
* Facilities service.
* @module api/FacilitiesApi
* @version 0.0.1
*/
export default class FacilitiesApi {

    /**
    * Constructs a new FacilitiesApi. 
    * @alias module:api/FacilitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAllFacilities operation.
     * @callback module:api/FacilitiesApi~getAllFacilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoFacilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download information for all facilities
     * Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data.
     * @param {module:model/String} accept 
     * @param {module:api/FacilitiesApi~getAllFacilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoFacilitiesResponse}
     */
    getAllFacilities(accept, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllFacilities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/geo+json', 'application/json', 'application/vnd.geo+json', 'text/csv'];
      let returnType = GeoFacilitiesResponse;
      return this.apiClient.callApi(
        '/facilities/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFacilitiesByLocation operation.
     * @callback module:api/FacilitiesApi~getFacilitiesByLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoFacilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query facilities by location or IDs, with optional filters
     * Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four `bbox[]` parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)  A query by latitude and longitude returns all facilities in the system, sorted by distance from that location. Providing an optional radius in miles to this query will narrow the scope of the returned facilities to those falling within the specified radius from that location.  All location queries support filtering by facility type, available services, and mobile status.  One can also retrieve facilities by ID using a comma-separated list like `?ids=id1,id2`. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)  Results are paginated. JSON responses include pagination information in the standard JSON API \"links\" and \"meta\" elements.   ### Parameter combinations You may optionally specify `page` and `per_page` with any query. You must specify one of the following parameter combinations:   - `bbox[]`, with the option of any combination of `type`, `services[]`, or `mobile`  - `ids`  - `lat` and `long`, with the option of any combination of `radius`, `ids`, `type`, `services[]`, or `mobile`  - `state`, with the option of any combination of `type`, `services[]`, or `mobile`  - `visn`  - `zip`, with the option of any combination of `type`, `services[]`, or `mobile`   Invalid combinations will return `400 Bad Request`. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location.
     * @param {String} [zip] Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return.
     * @param {String} [state] State in which to search for facilities. Except in rare cases, this is two characters.
     * @param {Number} [lat] Latitude of point to search for facilities, in WGS84 coordinate reference system.
     * @param {Number} [_long] Longitude of point to search for facilities, in WGS84 coordinate reference system.
     * @param {Number} [radius] Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system.
     * @param {Array.<Number>} [bbox] Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system)
     * @param {Number} [visn] VISN search of matching facilities.
     * @param {module:model/String} [type] Optional facility type search filter
     * @param {Array.<String>} [services] Optional facility service search filter
     * @param {Boolean} [mobile] Optional facility mobile search filter
     * @param {Number} [page = 1)] Page of results to return per paginated response.
     * @param {Number} [perPage = 10)] Number of results to return per paginated response.
     * @param {module:api/FacilitiesApi~getFacilitiesByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoFacilitiesResponse}
     */
    getFacilitiesByLocation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'zip': opts['zip'],
        'state': opts['state'],
        'lat': opts['lat'],
        'long': opts['_long'],
        'radius': opts['radius'],
        'bbox[]': this.apiClient.buildCollectionParam(opts['bbox'], 'multi'),
        'visn': opts['visn'],
        'type': opts['type'],
        'services[]': this.apiClient.buildCollectionParam(opts['services'], 'multi'),
        'mobile': opts['mobile'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/geo+json', 'application/json', 'application/vnd.geo+json'];
      let returnType = GeoFacilitiesResponse;
      return this.apiClient.callApi(
        '/facilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFacilityById operation.
     * @callback module:api/FacilitiesApi~getFacilityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoFacilityReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific facility by ID
     * @param {String} id Facility ID, in the form `<prefix>_<station>`, where prefix is one of \"vha\", \"vba\", \"nca\", or \"vc\", for health facility, benefits, cemetery, or vet center, respectively.
     * @param {module:api/FacilitiesApi~getFacilityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoFacilityReadResponse}
     */
    getFacilityById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFacilityById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/geo+json', 'application/json', 'application/vnd.geo+json'];
      let returnType = GeoFacilityReadResponse;
      return this.apiClient.callApi(
        '/facilities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFacilityIds operation.
     * @callback module:api/FacilitiesApi~getFacilityIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilitiesIdsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk download of all facility IDs
     * Retrieves all available facility IDs only
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type] Optional facility type search filter
     * @param {module:api/FacilitiesApi~getFacilityIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilitiesIdsResponse}
     */
    getFacilityIds(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FacilitiesIdsResponse;
      return this.apiClient.callApi(
        '/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNearbyFacilities operation.
     * @callback module:api/FacilitiesApi~getNearbyFacilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NearbyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all VA health facilities reachable by driving within the specified time period
     * Retrieve all VA health facilities that are located within a specified drive time from a specified location based on coordinates (lat and lng). Optional filter parameters include drive_time and services[]. Address (street_address, city, state, and zip) no longer returns results.  The \"attributes\" element has information about the drive-time band that contains the requested location for each facility in the response. The values of `min_time` and `max_time` are in minutes. For example, a facility returned with a matched `min_time` of 10 and `max_time` of 20 is a 10 to 20 minute drive from the requested location.  To retrieve full details for nearby facilities, see the documentation for `/facilities?ids`.
     * @param {Object} opts Optional parameters
     * @param {Number} [lat] Latitude of the location from which drive time will be calculated.
     * @param {Number} [lng] Longitude of the location from which drive time will be calculated.
     * @param {String} [streetAddress] Street address of the location from which drive time will be calculated.
     * @param {String} [city] City of the location from which drive time will be calculated.
     * @param {String} [state] Two character state code of the location from which drive time will be calculated.
     * @param {String} [zip] Zip code of the location from which drive time will be calculated.
     * @param {module:model/Number} [driveTime = 90)] Filter to only include facilities that are within the specified number of drive time minutes from the requested location.
     * @param {Array.<String>} [services] Optional facility service search filter
     * @param {module:api/FacilitiesApi~getNearbyFacilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NearbyResponse}
     */
    getNearbyFacilities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lat': opts['lat'],
        'lng': opts['lng'],
        'street_address': opts['streetAddress'],
        'city': opts['city'],
        'state': opts['state'],
        'zip': opts['zip'],
        'drive_time': opts['driveTime'],
        'services[]': this.apiClient.buildCollectionParam(opts['services'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NearbyResponse;
      return this.apiClient.callApi(
        '/nearby', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
