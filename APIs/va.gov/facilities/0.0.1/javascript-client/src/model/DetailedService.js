/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppointmentPhoneNumber from './AppointmentPhoneNumber';
import DetailedServiceLocation from './DetailedServiceLocation';

/**
 * The DetailedService model module.
 * @module model/DetailedService
 * @version 0.0.1
 */
class DetailedService {
    /**
     * Constructs a new <code>DetailedService</code>.
     * Detailed information of a facility service.
     * @alias module:model/DetailedService
     */
    constructor() { 
        
        DetailedService.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DetailedService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DetailedService} obj Optional instance to populate.
     * @return {module:model/DetailedService} The populated <code>DetailedService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DetailedService();

            if (data.hasOwnProperty('appointment_leadin')) {
                obj['appointment_leadin'] = ApiClient.convertToType(data['appointment_leadin'], 'String');
            }
            if (data.hasOwnProperty('appointment_phones')) {
                obj['appointment_phones'] = ApiClient.convertToType(data['appointment_phones'], [AppointmentPhoneNumber]);
            }
            if (data.hasOwnProperty('description_facility')) {
                obj['description_facility'] = ApiClient.convertToType(data['description_facility'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('online_scheduling_available')) {
                obj['online_scheduling_available'] = ApiClient.convertToType(data['online_scheduling_available'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('referral_required')) {
                obj['referral_required'] = ApiClient.convertToType(data['referral_required'], 'String');
            }
            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('service_locations')) {
                obj['service_locations'] = ApiClient.convertToType(data['service_locations'], [DetailedServiceLocation]);
            }
            if (data.hasOwnProperty('walk_ins_accepted')) {
                obj['walk_ins_accepted'] = ApiClient.convertToType(data['walk_ins_accepted'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DetailedService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DetailedService</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appointment_leadin'] && !(typeof data['appointment_leadin'] === 'string' || data['appointment_leadin'] instanceof String)) {
            throw new Error("Expected the field `appointment_leadin` to be a primitive type in the JSON string but got " + data['appointment_leadin']);
        }
        if (data['appointment_phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appointment_phones'])) {
                throw new Error("Expected the field `appointment_phones` to be an array in the JSON data but got " + data['appointment_phones']);
            }
            // validate the optional field `appointment_phones` (array)
            for (const item of data['appointment_phones']) {
                AppointmentPhoneNumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description_facility'] && !(typeof data['description_facility'] === 'string' || data['description_facility'] instanceof String)) {
            throw new Error("Expected the field `description_facility` to be a primitive type in the JSON string but got " + data['description_facility']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['online_scheduling_available'] && !(typeof data['online_scheduling_available'] === 'string' || data['online_scheduling_available'] instanceof String)) {
            throw new Error("Expected the field `online_scheduling_available` to be a primitive type in the JSON string but got " + data['online_scheduling_available']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['referral_required'] && !(typeof data['referral_required'] === 'string' || data['referral_required'] instanceof String)) {
            throw new Error("Expected the field `referral_required` to be a primitive type in the JSON string but got " + data['referral_required']);
        }
        // ensure the json data is a string
        if (data['service_id'] && !(typeof data['service_id'] === 'string' || data['service_id'] instanceof String)) {
            throw new Error("Expected the field `service_id` to be a primitive type in the JSON string but got " + data['service_id']);
        }
        if (data['service_locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['service_locations'])) {
                throw new Error("Expected the field `service_locations` to be an array in the JSON data but got " + data['service_locations']);
            }
            // validate the optional field `service_locations` (array)
            for (const item of data['service_locations']) {
                DetailedServiceLocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['walk_ins_accepted'] && !(typeof data['walk_ins_accepted'] === 'string' || data['walk_ins_accepted'] instanceof String)) {
            throw new Error("Expected the field `walk_ins_accepted` to be a primitive type in the JSON string but got " + data['walk_ins_accepted']);
        }

        return true;
    }


}



/**
 * Additional appointment information. May contain html / string formatting characters.
 * @member {String} appointment_leadin
 */
DetailedService.prototype['appointment_leadin'] = undefined;

/**
 * List of phone numbers related to scheduling appointments for this service.
 * @member {Array.<module:model/AppointmentPhoneNumber>} appointment_phones
 */
DetailedService.prototype['appointment_phones'] = undefined;

/**
 * Deprecated until further notice.
 * @member {String} description_facility
 */
DetailedService.prototype['description_facility'] = undefined;

/**
 * Service name.
 * @member {String} name
 */
DetailedService.prototype['name'] = undefined;

/**
 * String detailing online scheduling availability.
 * @member {String} online_scheduling_available
 */
DetailedService.prototype['online_scheduling_available'] = undefined;

/**
 * URL to a page with additional details for this service within the associated facility's health care system.
 * @member {String} path
 */
DetailedService.prototype['path'] = undefined;

/**
 * String detailing if referrals are required for the service.
 * @member {String} referral_required
 */
DetailedService.prototype['referral_required'] = undefined;

/**
 * Service id.
 * @member {String} service_id
 */
DetailedService.prototype['service_id'] = undefined;

/**
 * List of service locations.
 * @member {Array.<module:model/DetailedServiceLocation>} service_locations
 */
DetailedService.prototype['service_locations'] = undefined;

/**
 * String detailing if walk-ins are accepted for the service.
 * @member {String} walk_ins_accepted
 */
DetailedService.prototype['walk_ins_accepted'] = undefined;






export default DetailedService;

