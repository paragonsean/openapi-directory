/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Addresses from './Addresses';
import DetailedService from './DetailedService';
import Hours from './Hours';
import OperatingStatus from './OperatingStatus';
import Phone from './Phone';
import Satisfaction from './Satisfaction';
import Services from './Services';
import WaitTimes from './WaitTimes';

/**
 * The Properties model module.
 * @module model/Properties
 * @version 0.0.1
 */
class Properties {
    /**
     * Constructs a new <code>Properties</code>.
     * Details describing a facility.
     * @alias module:model/Properties
     * @param facilityType {module:model/Properties.FacilityTypeEnum} One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
     * @param id {String} Identifier representing the Facility.
     * @param operatingStatus {module:model/OperatingStatus} 
     */
    constructor(facilityType, id, operatingStatus) { 
        
        Properties.initialize(this, facilityType, id, operatingStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, facilityType, id, operatingStatus) { 
        obj['facility_type'] = facilityType;
        obj['id'] = id;
        obj['operating_status'] = operatingStatus;
    }

    /**
     * Constructs a <code>Properties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Properties} obj Optional instance to populate.
     * @return {module:model/Properties} The populated <code>Properties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Properties();

            if (data.hasOwnProperty('active_status')) {
                obj['active_status'] = ApiClient.convertToType(data['active_status'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Addresses.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'String');
            }
            if (data.hasOwnProperty('detailed_services')) {
                obj['detailed_services'] = ApiClient.convertToType(data['detailed_services'], [DetailedService]);
            }
            if (data.hasOwnProperty('facility_type')) {
                obj['facility_type'] = ApiClient.convertToType(data['facility_type'], 'String');
            }
            if (data.hasOwnProperty('hours')) {
                obj['hours'] = Hours.constructFromObject(data['hours']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operating_status')) {
                obj['operating_status'] = OperatingStatus.constructFromObject(data['operating_status']);
            }
            if (data.hasOwnProperty('operational_hours_special_instructions')) {
                obj['operational_hours_special_instructions'] = ApiClient.convertToType(data['operational_hours_special_instructions'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = Phone.constructFromObject(data['phone']);
            }
            if (data.hasOwnProperty('satisfaction')) {
                obj['satisfaction'] = Satisfaction.constructFromObject(data['satisfaction']);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = Services.constructFromObject(data['services']);
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('visn')) {
                obj['visn'] = ApiClient.convertToType(data['visn'], 'String');
            }
            if (data.hasOwnProperty('wait_times')) {
                obj['wait_times'] = WaitTimes.constructFromObject(data['wait_times']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Properties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Properties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Properties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['active_status'] && !(typeof data['active_status'] === 'string' || data['active_status'] instanceof String)) {
            throw new Error("Expected the field `active_status` to be a primitive type in the JSON string but got " + data['active_status']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Addresses.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['classification'] && !(typeof data['classification'] === 'string' || data['classification'] instanceof String)) {
            throw new Error("Expected the field `classification` to be a primitive type in the JSON string but got " + data['classification']);
        }
        if (data['detailed_services']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['detailed_services'])) {
                throw new Error("Expected the field `detailed_services` to be an array in the JSON data but got " + data['detailed_services']);
            }
            // validate the optional field `detailed_services` (array)
            for (const item of data['detailed_services']) {
                DetailedService.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['facility_type'] && !(typeof data['facility_type'] === 'string' || data['facility_type'] instanceof String)) {
            throw new Error("Expected the field `facility_type` to be a primitive type in the JSON string but got " + data['facility_type']);
        }
        // validate the optional field `hours`
        if (data['hours']) { // data not null
          Hours.validateJSON(data['hours']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `operating_status`
        if (data['operating_status']) { // data not null
          OperatingStatus.validateJSON(data['operating_status']);
        }
        // ensure the json data is a string
        if (data['operational_hours_special_instructions'] && !(typeof data['operational_hours_special_instructions'] === 'string' || data['operational_hours_special_instructions'] instanceof String)) {
            throw new Error("Expected the field `operational_hours_special_instructions` to be a primitive type in the JSON string but got " + data['operational_hours_special_instructions']);
        }
        // validate the optional field `phone`
        if (data['phone']) { // data not null
          Phone.validateJSON(data['phone']);
        }
        // validate the optional field `satisfaction`
        if (data['satisfaction']) { // data not null
          Satisfaction.validateJSON(data['satisfaction']);
        }
        // validate the optional field `services`
        if (data['services']) { // data not null
          Services.validateJSON(data['services']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['visn'] && !(typeof data['visn'] === 'string' || data['visn'] instanceof String)) {
            throw new Error("Expected the field `visn` to be a primitive type in the JSON string but got " + data['visn']);
        }
        // validate the optional field `wait_times`
        if (data['wait_times']) { // data not null
          WaitTimes.validateJSON(data['wait_times']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

Properties.RequiredProperties = ["facility_type", "id", "operating_status"];

/**
 * This field is deprecated and replaced with \"operating_status\".
 * @member {module:model/Properties.ActiveStatusEnum} active_status
 */
Properties.prototype['active_status'] = undefined;

/**
 * @member {module:model/Addresses} address
 */
Properties.prototype['address'] = undefined;

/**
 * Subtype of facility which can further be used to describe facility.
 * @member {String} classification
 */
Properties.prototype['classification'] = undefined;

/**
 * @member {Array.<module:model/DetailedService>} detailed_services
 */
Properties.prototype['detailed_services'] = undefined;

/**
 * One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
 * @member {module:model/Properties.FacilityTypeEnum} facility_type
 */
Properties.prototype['facility_type'] = undefined;

/**
 * @member {module:model/Hours} hours
 */
Properties.prototype['hours'] = undefined;

/**
 * Identifier representing the Facility.
 * @member {String} id
 */
Properties.prototype['id'] = undefined;

/**
 * @member {Boolean} mobile
 */
Properties.prototype['mobile'] = undefined;

/**
 * Name associated with given facility.
 * @member {String} name
 */
Properties.prototype['name'] = undefined;

/**
 * @member {module:model/OperatingStatus} operating_status
 */
Properties.prototype['operating_status'] = undefined;

/**
 * Additional information about facility operating hours.
 * @member {String} operational_hours_special_instructions
 */
Properties.prototype['operational_hours_special_instructions'] = undefined;

/**
 * @member {module:model/Phone} phone
 */
Properties.prototype['phone'] = undefined;

/**
 * @member {module:model/Satisfaction} satisfaction
 */
Properties.prototype['satisfaction'] = undefined;

/**
 * @member {module:model/Services} services
 */
Properties.prototype['services'] = undefined;

/**
 * Facility time zone
 * @member {String} time_zone
 */
Properties.prototype['time_zone'] = undefined;

/**
 * @member {String} visn
 */
Properties.prototype['visn'] = undefined;

/**
 * @member {module:model/WaitTimes} wait_times
 */
Properties.prototype['wait_times'] = undefined;

/**
 * Web address of facility.
 * @member {String} website
 */
Properties.prototype['website'] = undefined;





/**
 * Allowed values for the <code>active_status</code> property.
 * @enum {String}
 * @readonly
 */
Properties['ActiveStatusEnum'] = {

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "T"
     * @const
     */
    "T": "T"
};


/**
 * Allowed values for the <code>facility_type</code> property.
 * @enum {String}
 * @readonly
 */
Properties['FacilityTypeEnum'] = {

    /**
     * value: "va_benefits_facility"
     * @const
     */
    "va_benefits_facility": "va_benefits_facility",

    /**
     * value: "va_cemetery"
     * @const
     */
    "va_cemetery": "va_cemetery",

    /**
     * value: "va_health_facility"
     * @const
     */
    "va_health_facility": "va_health_facility",

    /**
     * value: "vet_center"
     * @const
     */
    "vet_center": "vet_center"
};



export default Properties;

