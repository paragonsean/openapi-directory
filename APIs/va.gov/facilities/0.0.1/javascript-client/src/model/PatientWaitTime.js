/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatientWaitTime model module.
 * @module model/PatientWaitTime
 * @version 0.0.1
 */
class PatientWaitTime {
    /**
     * Constructs a new <code>PatientWaitTime</code>.
     * Expected wait times for new and established patients for a given health care service at VA health facilities.
     * @alias module:model/PatientWaitTime
     * @param service {module:model/PatientWaitTime.ServiceEnum} Service being offered by facility.
     */
    constructor(service) { 
        
        PatientWaitTime.initialize(this, service);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, service) { 
        obj['service'] = service;
    }

    /**
     * Constructs a <code>PatientWaitTime</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatientWaitTime} obj Optional instance to populate.
     * @return {module:model/PatientWaitTime} The populated <code>PatientWaitTime</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatientWaitTime();

            if (data.hasOwnProperty('established')) {
                obj['established'] = ApiClient.convertToType(data['established'], 'Number');
            }
            if (data.hasOwnProperty('new')) {
                obj['new'] = ApiClient.convertToType(data['new'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatientWaitTime</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatientWaitTime</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatientWaitTime.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }

        return true;
    }


}

PatientWaitTime.RequiredProperties = ["service"];

/**
 * Average number of days a patient who has already been to this location has to wait for a non-urgent appointment.
 * @member {Number} established
 */
PatientWaitTime.prototype['established'] = undefined;

/**
 * Average number of days a Veteran who hasn't been to this location has to wait for a non-urgent appointment.
 * @member {Number} new
 */
PatientWaitTime.prototype['new'] = undefined;

/**
 * Service being offered by facility.
 * @member {module:model/PatientWaitTime.ServiceEnum} service
 */
PatientWaitTime.prototype['service'] = undefined;





/**
 * Allowed values for the <code>service</code> property.
 * @enum {String}
 * @readonly
 */
PatientWaitTime['ServiceEnum'] = {

    /**
     * value: "Audiology"
     * @const
     */
    "Audiology": "Audiology",

    /**
     * value: "Cardiology"
     * @const
     */
    "Cardiology": "Cardiology",

    /**
     * value: "CaregiverSupport"
     * @const
     */
    "CaregiverSupport": "CaregiverSupport",

    /**
     * value: "Covid19Vaccine"
     * @const
     */
    "Covid19Vaccine": "Covid19Vaccine",

    /**
     * value: "DentalServices"
     * @const
     */
    "DentalServices": "DentalServices",

    /**
     * value: "Dermatology"
     * @const
     */
    "Dermatology": "Dermatology",

    /**
     * value: "EmergencyCare"
     * @const
     */
    "EmergencyCare": "EmergencyCare",

    /**
     * value: "Gastroenterology"
     * @const
     */
    "Gastroenterology": "Gastroenterology",

    /**
     * value: "Gynecology"
     * @const
     */
    "Gynecology": "Gynecology",

    /**
     * value: "MentalHealthCare"
     * @const
     */
    "MentalHealthCare": "MentalHealthCare",

    /**
     * value: "Ophthalmology"
     * @const
     */
    "Ophthalmology": "Ophthalmology",

    /**
     * value: "Optometry"
     * @const
     */
    "Optometry": "Optometry",

    /**
     * value: "Orthopedics"
     * @const
     */
    "Orthopedics": "Orthopedics",

    /**
     * value: "Nutrition"
     * @const
     */
    "Nutrition": "Nutrition",

    /**
     * value: "Podiatry"
     * @const
     */
    "Podiatry": "Podiatry",

    /**
     * value: "PrimaryCare"
     * @const
     */
    "PrimaryCare": "PrimaryCare",

    /**
     * value: "SpecialtyCare"
     * @const
     */
    "SpecialtyCare": "SpecialtyCare",

    /**
     * value: "UrgentCare"
     * @const
     */
    "UrgentCare": "UrgentCare",

    /**
     * value: "Urology"
     * @const
     */
    "Urology": "Urology",

    /**
     * value: "WomensHealth"
     * @const
     */
    "WomensHealth": "WomensHealth"
};



export default PatientWaitTime;

