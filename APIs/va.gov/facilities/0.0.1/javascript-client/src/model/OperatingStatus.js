/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SupplementalStatus from './SupplementalStatus';

/**
 * The OperatingStatus model module.
 * @module model/OperatingStatus
 * @version 0.0.1
 */
class OperatingStatus {
    /**
     * Constructs a new <code>OperatingStatus</code>.
     * Current status of facility operations. The overall status of the facility, which can be: Normal Hours and Services, Facility Notice, Limited Hours and/or Services, or Closed. This field replaces active_status.
     * @alias module:model/OperatingStatus
     * @param code {module:model/OperatingStatus.CodeEnum} Status codes indicate normal hours/services, limited hours/services, closed operations, or published facility notices for visitors.
     */
    constructor(code) { 
        
        OperatingStatus.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
    }

    /**
     * Constructs a <code>OperatingStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperatingStatus} obj Optional instance to populate.
     * @return {module:model/OperatingStatus} The populated <code>OperatingStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperatingStatus();

            if (data.hasOwnProperty('additional_info')) {
                obj['additional_info'] = ApiClient.convertToType(data['additional_info'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('supplemental_status')) {
                obj['supplemental_status'] = ApiClient.convertToType(data['supplemental_status'], [SupplementalStatus]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperatingStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperatingStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OperatingStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additional_info'] && !(typeof data['additional_info'] === 'string' || data['additional_info'] instanceof String)) {
            throw new Error("Expected the field `additional_info` to be a primitive type in the JSON string but got " + data['additional_info']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['supplemental_status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['supplemental_status'])) {
                throw new Error("Expected the field `supplemental_status` to be an array in the JSON data but got " + data['supplemental_status']);
            }
            // validate the optional field `supplemental_status` (array)
            for (const item of data['supplemental_status']) {
                SupplementalStatus.validateJSON(item);
            };
        }

        return true;
    }


}

OperatingStatus.RequiredProperties = ["code"];

/**
 * Details of facility notices for visitors, such as messages about parking lot closures or floor visitation information.
 * @member {String} additional_info
 */
OperatingStatus.prototype['additional_info'] = undefined;

/**
 * Status codes indicate normal hours/services, limited hours/services, closed operations, or published facility notices for visitors.
 * @member {module:model/OperatingStatus.CodeEnum} code
 */
OperatingStatus.prototype['code'] = undefined;

/**
 * List of supplemental statuses for VA facility.
 * @member {Array.<module:model/SupplementalStatus>} supplemental_status
 */
OperatingStatus.prototype['supplemental_status'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
OperatingStatus['CodeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "NOTICE"
     * @const
     */
    "NOTICE": "NOTICE",

    /**
     * value: "LIMITED"
     * @const
     */
    "LIMITED": "LIMITED",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED"
};



export default OperatingStatus;

