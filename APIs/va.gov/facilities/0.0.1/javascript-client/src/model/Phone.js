/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phone model module.
 * @module model/Phone
 * @version 0.0.1
 */
class Phone {
    /**
     * Constructs a new <code>Phone</code>.
     * Collection of all telephone contact numbers for given facility. 
     * @alias module:model/Phone
     */
    constructor() { 
        
        Phone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Phone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phone} obj Optional instance to populate.
     * @return {module:model/Phone} The populated <code>Phone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phone();

            if (data.hasOwnProperty('after_hours')) {
                obj['after_hours'] = ApiClient.convertToType(data['after_hours'], 'String');
            }
            if (data.hasOwnProperty('enrollment_coordinator')) {
                obj['enrollment_coordinator'] = ApiClient.convertToType(data['enrollment_coordinator'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('health_connect')) {
                obj['health_connect'] = ApiClient.convertToType(data['health_connect'], 'String');
            }
            if (data.hasOwnProperty('main')) {
                obj['main'] = ApiClient.convertToType(data['main'], 'String');
            }
            if (data.hasOwnProperty('mental_health_clinic')) {
                obj['mental_health_clinic'] = ApiClient.convertToType(data['mental_health_clinic'], 'String');
            }
            if (data.hasOwnProperty('patient_advocate')) {
                obj['patient_advocate'] = ApiClient.convertToType(data['patient_advocate'], 'String');
            }
            if (data.hasOwnProperty('pharmacy')) {
                obj['pharmacy'] = ApiClient.convertToType(data['pharmacy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['after_hours'] && !(typeof data['after_hours'] === 'string' || data['after_hours'] instanceof String)) {
            throw new Error("Expected the field `after_hours` to be a primitive type in the JSON string but got " + data['after_hours']);
        }
        // ensure the json data is a string
        if (data['enrollment_coordinator'] && !(typeof data['enrollment_coordinator'] === 'string' || data['enrollment_coordinator'] instanceof String)) {
            throw new Error("Expected the field `enrollment_coordinator` to be a primitive type in the JSON string but got " + data['enrollment_coordinator']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['health_connect'] && !(typeof data['health_connect'] === 'string' || data['health_connect'] instanceof String)) {
            throw new Error("Expected the field `health_connect` to be a primitive type in the JSON string but got " + data['health_connect']);
        }
        // ensure the json data is a string
        if (data['main'] && !(typeof data['main'] === 'string' || data['main'] instanceof String)) {
            throw new Error("Expected the field `main` to be a primitive type in the JSON string but got " + data['main']);
        }
        // ensure the json data is a string
        if (data['mental_health_clinic'] && !(typeof data['mental_health_clinic'] === 'string' || data['mental_health_clinic'] instanceof String)) {
            throw new Error("Expected the field `mental_health_clinic` to be a primitive type in the JSON string but got " + data['mental_health_clinic']);
        }
        // ensure the json data is a string
        if (data['patient_advocate'] && !(typeof data['patient_advocate'] === 'string' || data['patient_advocate'] instanceof String)) {
            throw new Error("Expected the field `patient_advocate` to be a primitive type in the JSON string but got " + data['patient_advocate']);
        }
        // ensure the json data is a string
        if (data['pharmacy'] && !(typeof data['pharmacy'] === 'string' || data['pharmacy'] instanceof String)) {
            throw new Error("Expected the field `pharmacy` to be a primitive type in the JSON string but got " + data['pharmacy']);
        }

        return true;
    }


}



/**
 * Phone number that may be reached outside of operating hours for given facility.
 * @member {String} after_hours
 */
Phone.prototype['after_hours'] = undefined;

/**
 * Phone number for enrollment coordinator for given facility.
 * @member {String} enrollment_coordinator
 */
Phone.prototype['enrollment_coordinator'] = undefined;

/**
 * Phone number used for faxing to given facility.
 * @member {String} fax
 */
Phone.prototype['fax'] = undefined;

/**
 * Phone number for VA Health Connect.
 * @member {String} health_connect
 */
Phone.prototype['health_connect'] = undefined;

/**
 * Phone number for given facility.
 * @member {String} main
 */
Phone.prototype['main'] = undefined;

/**
 * Phone number for mental health clinic for given facility.
 * @member {String} mental_health_clinic
 */
Phone.prototype['mental_health_clinic'] = undefined;

/**
 * Phone number for patient advocate for given facility.
 * @member {String} patient_advocate
 */
Phone.prototype['patient_advocate'] = undefined;

/**
 * Phone number for pharmacy for given facility.
 * @member {String} pharmacy
 */
Phone.prototype['pharmacy'] = undefined;






export default Phone;

