/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Services model module.
 * @module model/Services
 * @version 0.0.1
 */
class Services {
    /**
     * Constructs a new <code>Services</code>.
     * All services offered by a VA health or benefits facility grouped by service type.
     * @alias module:model/Services
     */
    constructor() { 
        
        Services.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Services</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Services} obj Optional instance to populate.
     * @return {module:model/Services} The populated <code>Services</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Services();

            if (data.hasOwnProperty('benefits')) {
                obj['benefits'] = ApiClient.convertToType(data['benefits'], ['String']);
            }
            if (data.hasOwnProperty('health')) {
                obj['health'] = ApiClient.convertToType(data['health'], ['String']);
            }
            if (data.hasOwnProperty('last_updated')) {
                obj['last_updated'] = ApiClient.convertToType(data['last_updated'], 'Date');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Services</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Services</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['benefits'])) {
            throw new Error("Expected the field `benefits` to be an array in the JSON data but got " + data['benefits']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['health'])) {
            throw new Error("Expected the field `health` to be an array in the JSON data but got " + data['health']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['other'])) {
            throw new Error("Expected the field `other` to be an array in the JSON data but got " + data['other']);
        }

        return true;
    }


}



/**
 * List of benefits services for given facility.
 * @member {Array.<module:model/Services.BenefitsEnum>} benefits
 */
Services.prototype['benefits'] = undefined;

/**
 * List of health services for given facility.
 * @member {Array.<module:model/Services.HealthEnum>} health
 */
Services.prototype['health'] = undefined;

/**
 * Date of the most recent change in offered services.
 * @member {Date} last_updated
 */
Services.prototype['last_updated'] = undefined;

/**
 * List of other services not included in one of the other service categories.
 * @member {Array.<module:model/Services.OtherEnum>} other
 */
Services.prototype['other'] = undefined;





/**
 * Allowed values for the <code>benefits</code> property.
 * @enum {String}
 * @readonly
 */
Services['BenefitsEnum'] = {

    /**
     * value: "ApplyingForBenefits"
     * @const
     */
    "ApplyingForBenefits": "ApplyingForBenefits",

    /**
     * value: "BurialClaimAssistance"
     * @const
     */
    "BurialClaimAssistance": "BurialClaimAssistance",

    /**
     * value: "DisabilityClaimAssistance"
     * @const
     */
    "DisabilityClaimAssistance": "DisabilityClaimAssistance",

    /**
     * value: "eBenefitsRegistrationAssistance"
     * @const
     */
    "eBenefitsRegistrationAssistance": "eBenefitsRegistrationAssistance",

    /**
     * value: "EducationAndCareerCounseling"
     * @const
     */
    "EducationAndCareerCounseling": "EducationAndCareerCounseling",

    /**
     * value: "EducationClaimAssistance"
     * @const
     */
    "EducationClaimAssistance": "EducationClaimAssistance",

    /**
     * value: "FamilyMemberClaimAssistance"
     * @const
     */
    "FamilyMemberClaimAssistance": "FamilyMemberClaimAssistance",

    /**
     * value: "HomelessAssistance"
     * @const
     */
    "HomelessAssistance": "HomelessAssistance",

    /**
     * value: "InsuranceClaimAssistanceAndFinancialCounseling"
     * @const
     */
    "InsuranceClaimAssistanceAndFinancialCounseling": "InsuranceClaimAssistanceAndFinancialCounseling",

    /**
     * value: "IntegratedDisabilityEvaluationSystemAssistance"
     * @const
     */
    "IntegratedDisabilityEvaluationSystemAssistance": "IntegratedDisabilityEvaluationSystemAssistance",

    /**
     * value: "Pensions"
     * @const
     */
    "Pensions": "Pensions",

    /**
     * value: "PreDischargeClaimAssistance"
     * @const
     */
    "PreDischargeClaimAssistance": "PreDischargeClaimAssistance",

    /**
     * value: "TransitionAssistance"
     * @const
     */
    "TransitionAssistance": "TransitionAssistance",

    /**
     * value: "UpdatingDirectDepositInformation"
     * @const
     */
    "UpdatingDirectDepositInformation": "UpdatingDirectDepositInformation",

    /**
     * value: "VAHomeLoanAssistance"
     * @const
     */
    "VAHomeLoanAssistance": "VAHomeLoanAssistance",

    /**
     * value: "VocationalRehabilitationAndEmploymentAssistance"
     * @const
     */
    "VocationalRehabilitationAndEmploymentAssistance": "VocationalRehabilitationAndEmploymentAssistance"
};


/**
 * Allowed values for the <code>health</code> property.
 * @enum {String}
 * @readonly
 */
Services['HealthEnum'] = {

    /**
     * value: "Audiology"
     * @const
     */
    "Audiology": "Audiology",

    /**
     * value: "Cardiology"
     * @const
     */
    "Cardiology": "Cardiology",

    /**
     * value: "CaregiverSupport"
     * @const
     */
    "CaregiverSupport": "CaregiverSupport",

    /**
     * value: "Covid19Vaccine"
     * @const
     */
    "Covid19Vaccine": "Covid19Vaccine",

    /**
     * value: "DentalServices"
     * @const
     */
    "DentalServices": "DentalServices",

    /**
     * value: "Dermatology"
     * @const
     */
    "Dermatology": "Dermatology",

    /**
     * value: "EmergencyCare"
     * @const
     */
    "EmergencyCare": "EmergencyCare",

    /**
     * value: "Gastroenterology"
     * @const
     */
    "Gastroenterology": "Gastroenterology",

    /**
     * value: "Gynecology"
     * @const
     */
    "Gynecology": "Gynecology",

    /**
     * value: "MentalHealthCare"
     * @const
     */
    "MentalHealthCare": "MentalHealthCare",

    /**
     * value: "Ophthalmology"
     * @const
     */
    "Ophthalmology": "Ophthalmology",

    /**
     * value: "Optometry"
     * @const
     */
    "Optometry": "Optometry",

    /**
     * value: "Orthopedics"
     * @const
     */
    "Orthopedics": "Orthopedics",

    /**
     * value: "Nutrition"
     * @const
     */
    "Nutrition": "Nutrition",

    /**
     * value: "Podiatry"
     * @const
     */
    "Podiatry": "Podiatry",

    /**
     * value: "PrimaryCare"
     * @const
     */
    "PrimaryCare": "PrimaryCare",

    /**
     * value: "SpecialtyCare"
     * @const
     */
    "SpecialtyCare": "SpecialtyCare",

    /**
     * value: "UrgentCare"
     * @const
     */
    "UrgentCare": "UrgentCare",

    /**
     * value: "Urology"
     * @const
     */
    "Urology": "Urology",

    /**
     * value: "WomensHealth"
     * @const
     */
    "WomensHealth": "WomensHealth"
};


/**
 * Allowed values for the <code>other</code> property.
 * @enum {String}
 * @readonly
 */
Services['OtherEnum'] = {

    /**
     * value: "OnlineScheduling"
     * @const
     */
    "OnlineScheduling": "OnlineScheduling"
};



export default Services;

