/**
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppointmentPhoneNumber from './AppointmentPhoneNumber';
import DetailedServiceAddress from './DetailedServiceAddress';
import DetailedServiceEmailContact from './DetailedServiceEmailContact';
import DetailedServiceHours from './DetailedServiceHours';

/**
 * The DetailedServiceLocation model module.
 * @module model/DetailedServiceLocation
 * @version 0.0.1
 */
class DetailedServiceLocation {
    /**
     * Constructs a new <code>DetailedServiceLocation</code>.
     * Details for a location offering a service.
     * @alias module:model/DetailedServiceLocation
     */
    constructor() { 
        
        DetailedServiceLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DetailedServiceLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DetailedServiceLocation} obj Optional instance to populate.
     * @return {module:model/DetailedServiceLocation} The populated <code>DetailedServiceLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DetailedServiceLocation();

            if (data.hasOwnProperty('additional_hours_info')) {
                obj['additional_hours_info'] = ApiClient.convertToType(data['additional_hours_info'], 'String');
            }
            if (data.hasOwnProperty('appointment_phones')) {
                obj['appointment_phones'] = ApiClient.convertToType(data['appointment_phones'], [AppointmentPhoneNumber]);
            }
            if (data.hasOwnProperty('email_contacts')) {
                obj['email_contacts'] = ApiClient.convertToType(data['email_contacts'], [DetailedServiceEmailContact]);
            }
            if (data.hasOwnProperty('facility_service_hours')) {
                obj['facility_service_hours'] = DetailedServiceHours.constructFromObject(data['facility_service_hours']);
            }
            if (data.hasOwnProperty('service_location_address')) {
                obj['service_location_address'] = DetailedServiceAddress.constructFromObject(data['service_location_address']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DetailedServiceLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DetailedServiceLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additional_hours_info'] && !(typeof data['additional_hours_info'] === 'string' || data['additional_hours_info'] instanceof String)) {
            throw new Error("Expected the field `additional_hours_info` to be a primitive type in the JSON string but got " + data['additional_hours_info']);
        }
        if (data['appointment_phones']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appointment_phones'])) {
                throw new Error("Expected the field `appointment_phones` to be an array in the JSON data but got " + data['appointment_phones']);
            }
            // validate the optional field `appointment_phones` (array)
            for (const item of data['appointment_phones']) {
                AppointmentPhoneNumber.validateJSON(item);
            };
        }
        if (data['email_contacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['email_contacts'])) {
                throw new Error("Expected the field `email_contacts` to be an array in the JSON data but got " + data['email_contacts']);
            }
            // validate the optional field `email_contacts` (array)
            for (const item of data['email_contacts']) {
                DetailedServiceEmailContact.validateJSON(item);
            };
        }
        // validate the optional field `facility_service_hours`
        if (data['facility_service_hours']) { // data not null
          DetailedServiceHours.validateJSON(data['facility_service_hours']);
        }
        // validate the optional field `service_location_address`
        if (data['service_location_address']) { // data not null
          DetailedServiceAddress.validateJSON(data['service_location_address']);
        }

        return true;
    }


}



/**
 * Additional information related to service location hours.
 * @member {String} additional_hours_info
 */
DetailedServiceLocation.prototype['additional_hours_info'] = undefined;

/**
 * List of appointment phone information.
 * @member {Array.<module:model/AppointmentPhoneNumber>} appointment_phones
 */
DetailedServiceLocation.prototype['appointment_phones'] = undefined;

/**
 * List of email contact information regarding facility services.
 * @member {Array.<module:model/DetailedServiceEmailContact>} email_contacts
 */
DetailedServiceLocation.prototype['email_contacts'] = undefined;

/**
 * @member {module:model/DetailedServiceHours} facility_service_hours
 */
DetailedServiceLocation.prototype['facility_service_hours'] = undefined;

/**
 * @member {module:model/DetailedServiceAddress} service_location_address
 */
DetailedServiceLocation.prototype['service_location_address'] = undefined;






export default DetailedServiceLocation;

