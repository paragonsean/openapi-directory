/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Standard hours of operation. Currently formatted as descriptive text suitable for display, with no guarantee of a standard parseable format. Hours of operation may vary due to holidays or other events.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedServiceHours {
  public static final String SERIALIZED_NAME_FRIDAY = "Friday";
  @SerializedName(SERIALIZED_NAME_FRIDAY)
  private String friday;

  public static final String SERIALIZED_NAME_MONDAY = "Monday";
  @SerializedName(SERIALIZED_NAME_MONDAY)
  private String monday;

  public static final String SERIALIZED_NAME_SATURDAY = "Saturday";
  @SerializedName(SERIALIZED_NAME_SATURDAY)
  private String saturday;

  public static final String SERIALIZED_NAME_SUNDAY = "Sunday";
  @SerializedName(SERIALIZED_NAME_SUNDAY)
  private String sunday;

  public static final String SERIALIZED_NAME_THURSDAY = "Thursday";
  @SerializedName(SERIALIZED_NAME_THURSDAY)
  private String thursday;

  public static final String SERIALIZED_NAME_TUESDAY = "Tuesday";
  @SerializedName(SERIALIZED_NAME_TUESDAY)
  private String tuesday;

  public static final String SERIALIZED_NAME_WEDNESDAY = "Wednesday";
  @SerializedName(SERIALIZED_NAME_WEDNESDAY)
  private String wednesday;

  public DetailedServiceHours() {
  }

  public DetailedServiceHours friday(String friday) {
    this.friday = friday;
    return this;
  }

  /**
   * Service availability on Fridays.
   * @return friday
   */
  @javax.annotation.Nullable
  public String getFriday() {
    return friday;
  }

  public void setFriday(String friday) {
    this.friday = friday;
  }


  public DetailedServiceHours monday(String monday) {
    this.monday = monday;
    return this;
  }

  /**
   * Service availability on Mondays.
   * @return monday
   */
  @javax.annotation.Nullable
  public String getMonday() {
    return monday;
  }

  public void setMonday(String monday) {
    this.monday = monday;
  }


  public DetailedServiceHours saturday(String saturday) {
    this.saturday = saturday;
    return this;
  }

  /**
   * Service availability on Saturdays.
   * @return saturday
   */
  @javax.annotation.Nullable
  public String getSaturday() {
    return saturday;
  }

  public void setSaturday(String saturday) {
    this.saturday = saturday;
  }


  public DetailedServiceHours sunday(String sunday) {
    this.sunday = sunday;
    return this;
  }

  /**
   * Service availability on Sundays.
   * @return sunday
   */
  @javax.annotation.Nullable
  public String getSunday() {
    return sunday;
  }

  public void setSunday(String sunday) {
    this.sunday = sunday;
  }


  public DetailedServiceHours thursday(String thursday) {
    this.thursday = thursday;
    return this;
  }

  /**
   * Service availability on Thursdays.
   * @return thursday
   */
  @javax.annotation.Nullable
  public String getThursday() {
    return thursday;
  }

  public void setThursday(String thursday) {
    this.thursday = thursday;
  }


  public DetailedServiceHours tuesday(String tuesday) {
    this.tuesday = tuesday;
    return this;
  }

  /**
   * Service availability on Tuesdays.
   * @return tuesday
   */
  @javax.annotation.Nullable
  public String getTuesday() {
    return tuesday;
  }

  public void setTuesday(String tuesday) {
    this.tuesday = tuesday;
  }


  public DetailedServiceHours wednesday(String wednesday) {
    this.wednesday = wednesday;
    return this;
  }

  /**
   * Service availability on Wednesdays.
   * @return wednesday
   */
  @javax.annotation.Nullable
  public String getWednesday() {
    return wednesday;
  }

  public void setWednesday(String wednesday) {
    this.wednesday = wednesday;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedServiceHours detailedServiceHours = (DetailedServiceHours) o;
    return Objects.equals(this.friday, detailedServiceHours.friday) &&
        Objects.equals(this.monday, detailedServiceHours.monday) &&
        Objects.equals(this.saturday, detailedServiceHours.saturday) &&
        Objects.equals(this.sunday, detailedServiceHours.sunday) &&
        Objects.equals(this.thursday, detailedServiceHours.thursday) &&
        Objects.equals(this.tuesday, detailedServiceHours.tuesday) &&
        Objects.equals(this.wednesday, detailedServiceHours.wednesday);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(friday, monday, saturday, sunday, thursday, tuesday, wednesday);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedServiceHours {\n");
    sb.append("    friday: ").append(toIndentedString(friday)).append("\n");
    sb.append("    monday: ").append(toIndentedString(monday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("    thursday: ").append(toIndentedString(thursday)).append("\n");
    sb.append("    tuesday: ").append(toIndentedString(tuesday)).append("\n");
    sb.append("    wednesday: ").append(toIndentedString(wednesday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Friday");
    openapiFields.add("Monday");
    openapiFields.add("Saturday");
    openapiFields.add("Sunday");
    openapiFields.add("Thursday");
    openapiFields.add("Tuesday");
    openapiFields.add("Wednesday");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedServiceHours
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedServiceHours.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedServiceHours is not found in the empty JSON string", DetailedServiceHours.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedServiceHours.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedServiceHours` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Friday") != null && !jsonObj.get("Friday").isJsonNull()) && !jsonObj.get("Friday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Friday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Friday").toString()));
      }
      if ((jsonObj.get("Monday") != null && !jsonObj.get("Monday").isJsonNull()) && !jsonObj.get("Monday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Monday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Monday").toString()));
      }
      if ((jsonObj.get("Saturday") != null && !jsonObj.get("Saturday").isJsonNull()) && !jsonObj.get("Saturday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Saturday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Saturday").toString()));
      }
      if ((jsonObj.get("Sunday") != null && !jsonObj.get("Sunday").isJsonNull()) && !jsonObj.get("Sunday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sunday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sunday").toString()));
      }
      if ((jsonObj.get("Thursday") != null && !jsonObj.get("Thursday").isJsonNull()) && !jsonObj.get("Thursday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Thursday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Thursday").toString()));
      }
      if ((jsonObj.get("Tuesday") != null && !jsonObj.get("Tuesday").isJsonNull()) && !jsonObj.get("Tuesday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tuesday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Tuesday").toString()));
      }
      if ((jsonObj.get("Wednesday") != null && !jsonObj.get("Wednesday").isJsonNull()) && !jsonObj.get("Wednesday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Wednesday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Wednesday").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedServiceHours.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedServiceHours' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedServiceHours> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedServiceHours.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedServiceHours>() {
           @Override
           public void write(JsonWriter out, DetailedServiceHours value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedServiceHours read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedServiceHours given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedServiceHours
   * @throws IOException if the JSON string is invalid with respect to DetailedServiceHours
   */
  public static DetailedServiceHours fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedServiceHours.class);
  }

  /**
   * Convert an instance of DetailedServiceHours to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

