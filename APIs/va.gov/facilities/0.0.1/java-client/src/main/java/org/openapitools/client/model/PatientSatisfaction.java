/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Veteran-reported satisfaction score for health care services at VA health facilities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientSatisfaction {
  public static final String SERIALIZED_NAME_PRIMARY_CARE_ROUTINE = "primary_care_routine";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CARE_ROUTINE)
  private Float primaryCareRoutine;

  public static final String SERIALIZED_NAME_PRIMARY_CARE_URGENT = "primary_care_urgent";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CARE_URGENT)
  private Float primaryCareUrgent;

  public static final String SERIALIZED_NAME_SPECIALTY_CARE_ROUTINE = "specialty_care_routine";
  @SerializedName(SERIALIZED_NAME_SPECIALTY_CARE_ROUTINE)
  private Float specialtyCareRoutine;

  public static final String SERIALIZED_NAME_SPECIALTY_CARE_URGENT = "specialty_care_urgent";
  @SerializedName(SERIALIZED_NAME_SPECIALTY_CARE_URGENT)
  private Float specialtyCareUrgent;

  public PatientSatisfaction() {
  }

  public PatientSatisfaction primaryCareRoutine(Float primaryCareRoutine) {
    this.primaryCareRoutine = primaryCareRoutine;
    return this;
  }

  /**
   * Percentage of Veterans who say they usually or always get an appointment when they need routine attention at a primary care location. NOTE: Veterans are rating their satisfaction of getting an appointment for a routine primary care visit.
   * @return primaryCareRoutine
   */
  @javax.annotation.Nullable
  public Float getPrimaryCareRoutine() {
    return primaryCareRoutine;
  }

  public void setPrimaryCareRoutine(Float primaryCareRoutine) {
    this.primaryCareRoutine = primaryCareRoutine;
  }


  public PatientSatisfaction primaryCareUrgent(Float primaryCareUrgent) {
    this.primaryCareUrgent = primaryCareUrgent;
    return this;
  }

  /**
   * Percentage of Veterans who say they usually or always get an appointment when they need urgent attention at a primary care location. NOTE: Veterans are rating their satisfaction of getting an appointment for an urgent primary care visit, NOT an urgent care visit.
   * @return primaryCareUrgent
   */
  @javax.annotation.Nullable
  public Float getPrimaryCareUrgent() {
    return primaryCareUrgent;
  }

  public void setPrimaryCareUrgent(Float primaryCareUrgent) {
    this.primaryCareUrgent = primaryCareUrgent;
  }


  public PatientSatisfaction specialtyCareRoutine(Float specialtyCareRoutine) {
    this.specialtyCareRoutine = specialtyCareRoutine;
    return this;
  }

  /**
   * Percentage of Veterans who say they usually or always get an appointment when they need routine attention at a specialty care location. NOTE: Veterans are rating their satisfaction of getting an appointment for a routine specialty care visit.
   * @return specialtyCareRoutine
   */
  @javax.annotation.Nullable
  public Float getSpecialtyCareRoutine() {
    return specialtyCareRoutine;
  }

  public void setSpecialtyCareRoutine(Float specialtyCareRoutine) {
    this.specialtyCareRoutine = specialtyCareRoutine;
  }


  public PatientSatisfaction specialtyCareUrgent(Float specialtyCareUrgent) {
    this.specialtyCareUrgent = specialtyCareUrgent;
    return this;
  }

  /**
   * Percentage of Veterans who say they usually or always get an appointment when they need urgent attention at a specialty care location. NOTE: Veterans are rating their satisfaction of getting an appointment for an urgent specialty care visit, NOT an urgent care visit.
   * @return specialtyCareUrgent
   */
  @javax.annotation.Nullable
  public Float getSpecialtyCareUrgent() {
    return specialtyCareUrgent;
  }

  public void setSpecialtyCareUrgent(Float specialtyCareUrgent) {
    this.specialtyCareUrgent = specialtyCareUrgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientSatisfaction patientSatisfaction = (PatientSatisfaction) o;
    return Objects.equals(this.primaryCareRoutine, patientSatisfaction.primaryCareRoutine) &&
        Objects.equals(this.primaryCareUrgent, patientSatisfaction.primaryCareUrgent) &&
        Objects.equals(this.specialtyCareRoutine, patientSatisfaction.specialtyCareRoutine) &&
        Objects.equals(this.specialtyCareUrgent, patientSatisfaction.specialtyCareUrgent);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryCareRoutine, primaryCareUrgent, specialtyCareRoutine, specialtyCareUrgent);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientSatisfaction {\n");
    sb.append("    primaryCareRoutine: ").append(toIndentedString(primaryCareRoutine)).append("\n");
    sb.append("    primaryCareUrgent: ").append(toIndentedString(primaryCareUrgent)).append("\n");
    sb.append("    specialtyCareRoutine: ").append(toIndentedString(specialtyCareRoutine)).append("\n");
    sb.append("    specialtyCareUrgent: ").append(toIndentedString(specialtyCareUrgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primary_care_routine");
    openapiFields.add("primary_care_urgent");
    openapiFields.add("specialty_care_routine");
    openapiFields.add("specialty_care_urgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientSatisfaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientSatisfaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientSatisfaction is not found in the empty JSON string", PatientSatisfaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientSatisfaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientSatisfaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientSatisfaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientSatisfaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientSatisfaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientSatisfaction.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientSatisfaction>() {
           @Override
           public void write(JsonWriter out, PatientSatisfaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientSatisfaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientSatisfaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientSatisfaction
   * @throws IOException if the JSON string is invalid with respect to PatientSatisfaction
   */
  public static PatientSatisfaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientSatisfaction.class);
  }

  /**
   * Convert an instance of PatientSatisfaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

