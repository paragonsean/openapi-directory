/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppointmentPhoneNumber;
import org.openapitools.client.model.DetailedServiceLocation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed information of a facility service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedService {
  public static final String SERIALIZED_NAME_APPOINTMENT_LEADIN = "appointment_leadin";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_LEADIN)
  private String appointmentLeadin;

  public static final String SERIALIZED_NAME_APPOINTMENT_PHONES = "appointment_phones";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_PHONES)
  private List<AppointmentPhoneNumber> appointmentPhones;

  public static final String SERIALIZED_NAME_DESCRIPTION_FACILITY = "description_facility";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_FACILITY)
  private String descriptionFacility;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONLINE_SCHEDULING_AVAILABLE = "online_scheduling_available";
  @SerializedName(SERIALIZED_NAME_ONLINE_SCHEDULING_AVAILABLE)
  private String onlineSchedulingAvailable;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REFERRAL_REQUIRED = "referral_required";
  @SerializedName(SERIALIZED_NAME_REFERRAL_REQUIRED)
  private String referralRequired;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_LOCATIONS = "service_locations";
  @SerializedName(SERIALIZED_NAME_SERVICE_LOCATIONS)
  private List<DetailedServiceLocation> serviceLocations;

  public static final String SERIALIZED_NAME_WALK_INS_ACCEPTED = "walk_ins_accepted";
  @SerializedName(SERIALIZED_NAME_WALK_INS_ACCEPTED)
  private String walkInsAccepted;

  public DetailedService() {
  }

  public DetailedService appointmentLeadin(String appointmentLeadin) {
    this.appointmentLeadin = appointmentLeadin;
    return this;
  }

  /**
   * Additional appointment information. May contain html / string formatting characters.
   * @return appointmentLeadin
   */
  @javax.annotation.Nullable
  public String getAppointmentLeadin() {
    return appointmentLeadin;
  }

  public void setAppointmentLeadin(String appointmentLeadin) {
    this.appointmentLeadin = appointmentLeadin;
  }


  public DetailedService appointmentPhones(List<AppointmentPhoneNumber> appointmentPhones) {
    this.appointmentPhones = appointmentPhones;
    return this;
  }

  public DetailedService addAppointmentPhonesItem(AppointmentPhoneNumber appointmentPhonesItem) {
    if (this.appointmentPhones == null) {
      this.appointmentPhones = new ArrayList<>();
    }
    this.appointmentPhones.add(appointmentPhonesItem);
    return this;
  }

  /**
   * List of phone numbers related to scheduling appointments for this service.
   * @return appointmentPhones
   */
  @javax.annotation.Nullable
  public List<AppointmentPhoneNumber> getAppointmentPhones() {
    return appointmentPhones;
  }

  public void setAppointmentPhones(List<AppointmentPhoneNumber> appointmentPhones) {
    this.appointmentPhones = appointmentPhones;
  }


  public DetailedService descriptionFacility(String descriptionFacility) {
    this.descriptionFacility = descriptionFacility;
    return this;
  }

  /**
   * Deprecated until further notice.
   * @return descriptionFacility
   */
  @javax.annotation.Nullable
  public String getDescriptionFacility() {
    return descriptionFacility;
  }

  public void setDescriptionFacility(String descriptionFacility) {
    this.descriptionFacility = descriptionFacility;
  }


  public DetailedService name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Service name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DetailedService onlineSchedulingAvailable(String onlineSchedulingAvailable) {
    this.onlineSchedulingAvailable = onlineSchedulingAvailable;
    return this;
  }

  /**
   * String detailing online scheduling availability.
   * @return onlineSchedulingAvailable
   */
  @javax.annotation.Nullable
  public String getOnlineSchedulingAvailable() {
    return onlineSchedulingAvailable;
  }

  public void setOnlineSchedulingAvailable(String onlineSchedulingAvailable) {
    this.onlineSchedulingAvailable = onlineSchedulingAvailable;
  }


  public DetailedService path(String path) {
    this.path = path;
    return this;
  }

  /**
   * URL to a page with additional details for this service within the associated facility&#39;s health care system.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public DetailedService referralRequired(String referralRequired) {
    this.referralRequired = referralRequired;
    return this;
  }

  /**
   * String detailing if referrals are required for the service.
   * @return referralRequired
   */
  @javax.annotation.Nullable
  public String getReferralRequired() {
    return referralRequired;
  }

  public void setReferralRequired(String referralRequired) {
    this.referralRequired = referralRequired;
  }


  public DetailedService serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Service id.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public DetailedService serviceLocations(List<DetailedServiceLocation> serviceLocations) {
    this.serviceLocations = serviceLocations;
    return this;
  }

  public DetailedService addServiceLocationsItem(DetailedServiceLocation serviceLocationsItem) {
    if (this.serviceLocations == null) {
      this.serviceLocations = new ArrayList<>();
    }
    this.serviceLocations.add(serviceLocationsItem);
    return this;
  }

  /**
   * List of service locations.
   * @return serviceLocations
   */
  @javax.annotation.Nullable
  public List<DetailedServiceLocation> getServiceLocations() {
    return serviceLocations;
  }

  public void setServiceLocations(List<DetailedServiceLocation> serviceLocations) {
    this.serviceLocations = serviceLocations;
  }


  public DetailedService walkInsAccepted(String walkInsAccepted) {
    this.walkInsAccepted = walkInsAccepted;
    return this;
  }

  /**
   * String detailing if walk-ins are accepted for the service.
   * @return walkInsAccepted
   */
  @javax.annotation.Nullable
  public String getWalkInsAccepted() {
    return walkInsAccepted;
  }

  public void setWalkInsAccepted(String walkInsAccepted) {
    this.walkInsAccepted = walkInsAccepted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedService detailedService = (DetailedService) o;
    return Objects.equals(this.appointmentLeadin, detailedService.appointmentLeadin) &&
        Objects.equals(this.appointmentPhones, detailedService.appointmentPhones) &&
        Objects.equals(this.descriptionFacility, detailedService.descriptionFacility) &&
        Objects.equals(this.name, detailedService.name) &&
        Objects.equals(this.onlineSchedulingAvailable, detailedService.onlineSchedulingAvailable) &&
        Objects.equals(this.path, detailedService.path) &&
        Objects.equals(this.referralRequired, detailedService.referralRequired) &&
        Objects.equals(this.serviceId, detailedService.serviceId) &&
        Objects.equals(this.serviceLocations, detailedService.serviceLocations) &&
        Objects.equals(this.walkInsAccepted, detailedService.walkInsAccepted);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(appointmentLeadin, appointmentPhones, descriptionFacility, name, onlineSchedulingAvailable, path, referralRequired, serviceId, serviceLocations, walkInsAccepted);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedService {\n");
    sb.append("    appointmentLeadin: ").append(toIndentedString(appointmentLeadin)).append("\n");
    sb.append("    appointmentPhones: ").append(toIndentedString(appointmentPhones)).append("\n");
    sb.append("    descriptionFacility: ").append(toIndentedString(descriptionFacility)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onlineSchedulingAvailable: ").append(toIndentedString(onlineSchedulingAvailable)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    referralRequired: ").append(toIndentedString(referralRequired)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceLocations: ").append(toIndentedString(serviceLocations)).append("\n");
    sb.append("    walkInsAccepted: ").append(toIndentedString(walkInsAccepted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appointment_leadin");
    openapiFields.add("appointment_phones");
    openapiFields.add("description_facility");
    openapiFields.add("name");
    openapiFields.add("online_scheduling_available");
    openapiFields.add("path");
    openapiFields.add("referral_required");
    openapiFields.add("service_id");
    openapiFields.add("service_locations");
    openapiFields.add("walk_ins_accepted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedService is not found in the empty JSON string", DetailedService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appointment_leadin") != null && !jsonObj.get("appointment_leadin").isJsonNull()) && !jsonObj.get("appointment_leadin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appointment_leadin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appointment_leadin").toString()));
      }
      if (jsonObj.get("appointment_phones") != null && !jsonObj.get("appointment_phones").isJsonNull()) {
        JsonArray jsonArrayappointmentPhones = jsonObj.getAsJsonArray("appointment_phones");
        if (jsonArrayappointmentPhones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appointment_phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appointment_phones` to be an array in the JSON string but got `%s`", jsonObj.get("appointment_phones").toString()));
          }

          // validate the optional field `appointment_phones` (array)
          for (int i = 0; i < jsonArrayappointmentPhones.size(); i++) {
            AppointmentPhoneNumber.validateJsonElement(jsonArrayappointmentPhones.get(i));
          };
        }
      }
      if ((jsonObj.get("description_facility") != null && !jsonObj.get("description_facility").isJsonNull()) && !jsonObj.get("description_facility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_facility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_facility").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("online_scheduling_available") != null && !jsonObj.get("online_scheduling_available").isJsonNull()) && !jsonObj.get("online_scheduling_available").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `online_scheduling_available` to be a primitive type in the JSON string but got `%s`", jsonObj.get("online_scheduling_available").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("referral_required") != null && !jsonObj.get("referral_required").isJsonNull()) && !jsonObj.get("referral_required").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referral_required` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referral_required").toString()));
      }
      if ((jsonObj.get("service_id") != null && !jsonObj.get("service_id").isJsonNull()) && !jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if (jsonObj.get("service_locations") != null && !jsonObj.get("service_locations").isJsonNull()) {
        JsonArray jsonArrayserviceLocations = jsonObj.getAsJsonArray("service_locations");
        if (jsonArrayserviceLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("service_locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `service_locations` to be an array in the JSON string but got `%s`", jsonObj.get("service_locations").toString()));
          }

          // validate the optional field `service_locations` (array)
          for (int i = 0; i < jsonArrayserviceLocations.size(); i++) {
            DetailedServiceLocation.validateJsonElement(jsonArrayserviceLocations.get(i));
          };
        }
      }
      if ((jsonObj.get("walk_ins_accepted") != null && !jsonObj.get("walk_ins_accepted").isJsonNull()) && !jsonObj.get("walk_ins_accepted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `walk_ins_accepted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("walk_ins_accepted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedService.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedService>() {
           @Override
           public void write(JsonWriter out, DetailedService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedService
   * @throws IOException if the JSON string is invalid with respect to DetailedService
   */
  public static DetailedService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedService.class);
  }

  /**
   * Convert an instance of DetailedService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

