/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Addresses;
import org.openapitools.client.model.DetailedService;
import org.openapitools.client.model.Hours;
import org.openapitools.client.model.OperatingStatus;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Satisfaction;
import org.openapitools.client.model.Services;
import org.openapitools.client.model.WaitTimes;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details describing a facility.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Properties {
  /**
   * This field is deprecated and replaced with \&quot;operating_status\&quot;.
   */
  @JsonAdapter(ActiveStatusEnum.Adapter.class)
  public enum ActiveStatusEnum {
    A("A"),
    
    T("T");

    private String value;

    ActiveStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActiveStatusEnum fromValue(String value) {
      for (ActiveStatusEnum b : ActiveStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActiveStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActiveStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActiveStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActiveStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActiveStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTIVE_STATUS = "active_status";
  @SerializedName(SERIALIZED_NAME_ACTIVE_STATUS)
  private ActiveStatusEnum activeStatus;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Addresses address;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private String classification;

  public static final String SERIALIZED_NAME_DETAILED_SERVICES = "detailed_services";
  @SerializedName(SERIALIZED_NAME_DETAILED_SERVICES)
  private List<DetailedService> detailedServices;

  /**
   * One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
   */
  @JsonAdapter(FacilityTypeEnum.Adapter.class)
  public enum FacilityTypeEnum {
    VA_BENEFITS_FACILITY("va_benefits_facility"),
    
    VA_CEMETERY("va_cemetery"),
    
    VA_HEALTH_FACILITY("va_health_facility"),
    
    VET_CENTER("vet_center");

    private String value;

    FacilityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FacilityTypeEnum fromValue(String value) {
      for (FacilityTypeEnum b : FacilityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FacilityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FacilityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FacilityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FacilityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FacilityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FACILITY_TYPE = "facility_type";
  @SerializedName(SERIALIZED_NAME_FACILITY_TYPE)
  private FacilityTypeEnum facilityType;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Hours hours;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private Boolean mobile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPERATING_STATUS = "operating_status";
  @SerializedName(SERIALIZED_NAME_OPERATING_STATUS)
  private OperatingStatus operatingStatus;

  public static final String SERIALIZED_NAME_OPERATIONAL_HOURS_SPECIAL_INSTRUCTIONS = "operational_hours_special_instructions";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_HOURS_SPECIAL_INSTRUCTIONS)
  private String operationalHoursSpecialInstructions;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private Phone phone;

  public static final String SERIALIZED_NAME_SATISFACTION = "satisfaction";
  @SerializedName(SERIALIZED_NAME_SATISFACTION)
  private Satisfaction satisfaction;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private Services services;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_VISN = "visn";
  @SerializedName(SERIALIZED_NAME_VISN)
  private String visn;

  public static final String SERIALIZED_NAME_WAIT_TIMES = "wait_times";
  @SerializedName(SERIALIZED_NAME_WAIT_TIMES)
  private WaitTimes waitTimes;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Properties() {
  }

  public Properties activeStatus(ActiveStatusEnum activeStatus) {
    this.activeStatus = activeStatus;
    return this;
  }

  /**
   * This field is deprecated and replaced with \&quot;operating_status\&quot;.
   * @return activeStatus
   */
  @javax.annotation.Nullable
  public ActiveStatusEnum getActiveStatus() {
    return activeStatus;
  }

  public void setActiveStatus(ActiveStatusEnum activeStatus) {
    this.activeStatus = activeStatus;
  }


  public Properties address(Addresses address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Addresses getAddress() {
    return address;
  }

  public void setAddress(Addresses address) {
    this.address = address;
  }


  public Properties classification(String classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Subtype of facility which can further be used to describe facility.
   * @return classification
   */
  @javax.annotation.Nullable
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }


  public Properties detailedServices(List<DetailedService> detailedServices) {
    this.detailedServices = detailedServices;
    return this;
  }

  public Properties addDetailedServicesItem(DetailedService detailedServicesItem) {
    if (this.detailedServices == null) {
      this.detailedServices = new ArrayList<>();
    }
    this.detailedServices.add(detailedServicesItem);
    return this;
  }

  /**
   * Get detailedServices
   * @return detailedServices
   */
  @javax.annotation.Nullable
  public List<DetailedService> getDetailedServices() {
    return detailedServices;
  }

  public void setDetailedServices(List<DetailedService> detailedServices) {
    this.detailedServices = detailedServices;
  }


  public Properties facilityType(FacilityTypeEnum facilityType) {
    this.facilityType = facilityType;
    return this;
  }

  /**
   * One of facility top-level type categories (e.g.) health, benefits, cemetery and vet center.
   * @return facilityType
   */
  @javax.annotation.Nonnull
  public FacilityTypeEnum getFacilityType() {
    return facilityType;
  }

  public void setFacilityType(FacilityTypeEnum facilityType) {
    this.facilityType = facilityType;
  }


  public Properties hours(Hours hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Get hours
   * @return hours
   */
  @javax.annotation.Nullable
  public Hours getHours() {
    return hours;
  }

  public void setHours(Hours hours) {
    this.hours = hours;
  }


  public Properties id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier representing the Facility.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Properties mobile(Boolean mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * Get mobile
   * @return mobile
   */
  @javax.annotation.Nullable
  public Boolean getMobile() {
    return mobile;
  }

  public void setMobile(Boolean mobile) {
    this.mobile = mobile;
  }


  public Properties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name associated with given facility.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Properties operatingStatus(OperatingStatus operatingStatus) {
    this.operatingStatus = operatingStatus;
    return this;
  }

  /**
   * Get operatingStatus
   * @return operatingStatus
   */
  @javax.annotation.Nullable
  public OperatingStatus getOperatingStatus() {
    return operatingStatus;
  }

  public void setOperatingStatus(OperatingStatus operatingStatus) {
    this.operatingStatus = operatingStatus;
  }


  public Properties operationalHoursSpecialInstructions(String operationalHoursSpecialInstructions) {
    this.operationalHoursSpecialInstructions = operationalHoursSpecialInstructions;
    return this;
  }

  /**
   * Additional information about facility operating hours.
   * @return operationalHoursSpecialInstructions
   */
  @javax.annotation.Nullable
  public String getOperationalHoursSpecialInstructions() {
    return operationalHoursSpecialInstructions;
  }

  public void setOperationalHoursSpecialInstructions(String operationalHoursSpecialInstructions) {
    this.operationalHoursSpecialInstructions = operationalHoursSpecialInstructions;
  }


  public Properties phone(Phone phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public Phone getPhone() {
    return phone;
  }

  public void setPhone(Phone phone) {
    this.phone = phone;
  }


  public Properties satisfaction(Satisfaction satisfaction) {
    this.satisfaction = satisfaction;
    return this;
  }

  /**
   * Get satisfaction
   * @return satisfaction
   */
  @javax.annotation.Nullable
  public Satisfaction getSatisfaction() {
    return satisfaction;
  }

  public void setSatisfaction(Satisfaction satisfaction) {
    this.satisfaction = satisfaction;
  }


  public Properties services(Services services) {
    this.services = services;
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  public Services getServices() {
    return services;
  }

  public void setServices(Services services) {
    this.services = services;
  }


  public Properties timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Facility time zone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public Properties visn(String visn) {
    this.visn = visn;
    return this;
  }

  /**
   * Get visn
   * @return visn
   */
  @javax.annotation.Nullable
  public String getVisn() {
    return visn;
  }

  public void setVisn(String visn) {
    this.visn = visn;
  }


  public Properties waitTimes(WaitTimes waitTimes) {
    this.waitTimes = waitTimes;
    return this;
  }

  /**
   * Get waitTimes
   * @return waitTimes
   */
  @javax.annotation.Nullable
  public WaitTimes getWaitTimes() {
    return waitTimes;
  }

  public void setWaitTimes(WaitTimes waitTimes) {
    this.waitTimes = waitTimes;
  }


  public Properties website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Web address of facility.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Properties properties = (Properties) o;
    return Objects.equals(this.activeStatus, properties.activeStatus) &&
        Objects.equals(this.address, properties.address) &&
        Objects.equals(this.classification, properties.classification) &&
        Objects.equals(this.detailedServices, properties.detailedServices) &&
        Objects.equals(this.facilityType, properties.facilityType) &&
        Objects.equals(this.hours, properties.hours) &&
        Objects.equals(this.id, properties.id) &&
        Objects.equals(this.mobile, properties.mobile) &&
        Objects.equals(this.name, properties.name) &&
        Objects.equals(this.operatingStatus, properties.operatingStatus) &&
        Objects.equals(this.operationalHoursSpecialInstructions, properties.operationalHoursSpecialInstructions) &&
        Objects.equals(this.phone, properties.phone) &&
        Objects.equals(this.satisfaction, properties.satisfaction) &&
        Objects.equals(this.services, properties.services) &&
        Objects.equals(this.timeZone, properties.timeZone) &&
        Objects.equals(this.visn, properties.visn) &&
        Objects.equals(this.waitTimes, properties.waitTimes) &&
        Objects.equals(this.website, properties.website);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeStatus, address, classification, detailedServices, facilityType, hours, id, mobile, name, operatingStatus, operationalHoursSpecialInstructions, phone, satisfaction, services, timeZone, visn, waitTimes, website);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Properties {\n");
    sb.append("    activeStatus: ").append(toIndentedString(activeStatus)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    detailedServices: ").append(toIndentedString(detailedServices)).append("\n");
    sb.append("    facilityType: ").append(toIndentedString(facilityType)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operatingStatus: ").append(toIndentedString(operatingStatus)).append("\n");
    sb.append("    operationalHoursSpecialInstructions: ").append(toIndentedString(operationalHoursSpecialInstructions)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    satisfaction: ").append(toIndentedString(satisfaction)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    visn: ").append(toIndentedString(visn)).append("\n");
    sb.append("    waitTimes: ").append(toIndentedString(waitTimes)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_status");
    openapiFields.add("address");
    openapiFields.add("classification");
    openapiFields.add("detailed_services");
    openapiFields.add("facility_type");
    openapiFields.add("hours");
    openapiFields.add("id");
    openapiFields.add("mobile");
    openapiFields.add("name");
    openapiFields.add("operating_status");
    openapiFields.add("operational_hours_special_instructions");
    openapiFields.add("phone");
    openapiFields.add("satisfaction");
    openapiFields.add("services");
    openapiFields.add("time_zone");
    openapiFields.add("visn");
    openapiFields.add("wait_times");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("facility_type");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("operating_status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Properties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Properties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Properties is not found in the empty JSON string", Properties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Properties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Properties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Properties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active_status") != null && !jsonObj.get("active_status").isJsonNull()) && !jsonObj.get("active_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_status").toString()));
      }
      // validate the optional field `active_status`
      if (jsonObj.get("active_status") != null && !jsonObj.get("active_status").isJsonNull()) {
        ActiveStatusEnum.validateJsonElement(jsonObj.get("active_status"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Addresses.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) && !jsonObj.get("classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if (jsonObj.get("detailed_services") != null && !jsonObj.get("detailed_services").isJsonNull()) {
        JsonArray jsonArraydetailedServices = jsonObj.getAsJsonArray("detailed_services");
        if (jsonArraydetailedServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detailed_services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detailed_services` to be an array in the JSON string but got `%s`", jsonObj.get("detailed_services").toString()));
          }

          // validate the optional field `detailed_services` (array)
          for (int i = 0; i < jsonArraydetailedServices.size(); i++) {
            DetailedService.validateJsonElement(jsonArraydetailedServices.get(i));
          };
        }
      }
      if (!jsonObj.get("facility_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facility_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facility_type").toString()));
      }
      // validate the required field `facility_type`
      FacilityTypeEnum.validateJsonElement(jsonObj.get("facility_type"));
      // validate the optional field `hours`
      if (jsonObj.get("hours") != null && !jsonObj.get("hours").isJsonNull()) {
        Hours.validateJsonElement(jsonObj.get("hours"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `operating_status`
      OperatingStatus.validateJsonElement(jsonObj.get("operating_status"));
      if ((jsonObj.get("operational_hours_special_instructions") != null && !jsonObj.get("operational_hours_special_instructions").isJsonNull()) && !jsonObj.get("operational_hours_special_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operational_hours_special_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operational_hours_special_instructions").toString()));
      }
      // validate the optional field `phone`
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) {
        Phone.validateJsonElement(jsonObj.get("phone"));
      }
      // validate the optional field `satisfaction`
      if (jsonObj.get("satisfaction") != null && !jsonObj.get("satisfaction").isJsonNull()) {
        Satisfaction.validateJsonElement(jsonObj.get("satisfaction"));
      }
      // validate the optional field `services`
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        Services.validateJsonElement(jsonObj.get("services"));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("visn") != null && !jsonObj.get("visn").isJsonNull()) && !jsonObj.get("visn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visn").toString()));
      }
      // validate the optional field `wait_times`
      if (jsonObj.get("wait_times") != null && !jsonObj.get("wait_times").isJsonNull()) {
        WaitTimes.validateJsonElement(jsonObj.get("wait_times"));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Properties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Properties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Properties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Properties.class));

       return (TypeAdapter<T>) new TypeAdapter<Properties>() {
           @Override
           public void write(JsonWriter out, Properties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Properties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Properties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Properties
   * @throws IOException if the JSON string is invalid with respect to Properties
   */
  public static Properties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Properties.class);
  }

  /**
   * Convert an instance of Properties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

