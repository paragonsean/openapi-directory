/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import java.math.BigDecimal;
import org.openapitools.client.model.FacilitiesIdsResponse;
import org.openapitools.client.model.FacilitiesResponse;
import org.openapitools.client.model.FacilityReadResponse;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.GeoFacilitiesResponse;
import org.openapitools.client.model.GeoFacilityReadResponse;
import org.openapitools.client.model.NearbyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FacilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FacilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FacilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAllFacilities
     * @param accept  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFacilitiesCall(String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facilities/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/json",
            "application/vnd.geo+json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFacilitiesValidateBeforeCall(String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAllFacilities(Async)");
        }

        return getAllFacilitiesCall(accept, _callback);

    }

    /**
     * Bulk download information for all facilities
     * Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data.
     * @param accept  (required)
     * @return GeoFacilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public GeoFacilitiesResponse getAllFacilities(String accept) throws ApiException {
        ApiResponse<GeoFacilitiesResponse> localVarResp = getAllFacilitiesWithHttpInfo(accept);
        return localVarResp.getData();
    }

    /**
     * Bulk download information for all facilities
     * Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data.
     * @param accept  (required)
     * @return ApiResponse&lt;GeoFacilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoFacilitiesResponse> getAllFacilitiesWithHttpInfo(String accept) throws ApiException {
        okhttp3.Call localVarCall = getAllFacilitiesValidateBeforeCall(accept, null);
        Type localVarReturnType = new TypeToken<GeoFacilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk download information for all facilities (asynchronously)
     * Retrieve all available facilities in a single operation, formatted as either a GeoJSON FeatureCollection or as a CSV. Due to the complexity of the facility resource type, the CSV response contains a subset of available facility data - specifically it omits the available services, patient satisfaction, and patient wait time data.
     * @param accept  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllFacilitiesAsync(String accept, final ApiCallback<GeoFacilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFacilitiesValidateBeforeCall(accept, _callback);
        Type localVarReturnType = new TypeToken<GeoFacilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacilitiesByLocation
     * @param ids List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location. (optional)
     * @param zip Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return. (optional)
     * @param state State in which to search for facilities. Except in rare cases, this is two characters. (optional)
     * @param lat Latitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param _long Longitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param radius Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system. (optional)
     * @param bbox Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system) (optional)
     * @param visn VISN search of matching facilities. (optional)
     * @param type Optional facility type search filter (optional)
     * @param services Optional facility service search filter (optional)
     * @param mobile Optional facility mobile search filter (optional)
     * @param page Page of results to return per paginated response. (optional, default to 1)
     * @param perPage Number of results to return per paginated response. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilitiesByLocationCall(List<String> ids, String zip, String state, Float lat, Float _long, Float radius, List<Float> bbox, BigDecimal visn, String type, List<String> services, Boolean mobile, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (_long != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("long", _long));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (bbox != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "bbox[]", bbox));
        }

        if (visn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visn", visn));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (services != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "services[]", services));
        }

        if (mobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mobile", mobile));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/json",
            "application/vnd.geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacilitiesByLocationValidateBeforeCall(List<String> ids, String zip, String state, Float lat, Float _long, Float radius, List<Float> bbox, BigDecimal visn, String type, List<String> services, Boolean mobile, Long page, Long perPage, final ApiCallback _callback) throws ApiException {
        return getFacilitiesByLocationCall(ids, zip, state, lat, _long, radius, bbox, visn, type, services, mobile, page, perPage, _callback);

    }

    /**
     * Query facilities by location or IDs, with optional filters
     * Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four &#x60;bbox[]&#x60; parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)  A query by latitude and longitude returns all facilities in the system, sorted by distance from that location. Providing an optional radius in miles to this query will narrow the scope of the returned facilities to those falling within the specified radius from that location.  All location queries support filtering by facility type, available services, and mobile status.  One can also retrieve facilities by ID using a comma-separated list like &#x60;?ids&#x3D;id1,id2&#x60;. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)  Results are paginated. JSON responses include pagination information in the standard JSON API \&quot;links\&quot; and \&quot;meta\&quot; elements.   ### Parameter combinations You may optionally specify &#x60;page&#x60; and &#x60;per_page&#x60; with any query. You must specify one of the following parameter combinations:   - &#x60;bbox[]&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;ids&#x60;  - &#x60;lat&#x60; and &#x60;long&#x60;, with the option of any combination of &#x60;radius&#x60;, &#x60;ids&#x60;, &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;state&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;visn&#x60;  - &#x60;zip&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;   Invalid combinations will return &#x60;400 Bad Request&#x60;. 
     * @param ids List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location. (optional)
     * @param zip Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return. (optional)
     * @param state State in which to search for facilities. Except in rare cases, this is two characters. (optional)
     * @param lat Latitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param _long Longitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param radius Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system. (optional)
     * @param bbox Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system) (optional)
     * @param visn VISN search of matching facilities. (optional)
     * @param type Optional facility type search filter (optional)
     * @param services Optional facility service search filter (optional)
     * @param mobile Optional facility mobile search filter (optional)
     * @param page Page of results to return per paginated response. (optional, default to 1)
     * @param perPage Number of results to return per paginated response. (optional, default to 10)
     * @return GeoFacilitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public GeoFacilitiesResponse getFacilitiesByLocation(List<String> ids, String zip, String state, Float lat, Float _long, Float radius, List<Float> bbox, BigDecimal visn, String type, List<String> services, Boolean mobile, Long page, Long perPage) throws ApiException {
        ApiResponse<GeoFacilitiesResponse> localVarResp = getFacilitiesByLocationWithHttpInfo(ids, zip, state, lat, _long, radius, bbox, visn, type, services, mobile, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Query facilities by location or IDs, with optional filters
     * Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four &#x60;bbox[]&#x60; parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)  A query by latitude and longitude returns all facilities in the system, sorted by distance from that location. Providing an optional radius in miles to this query will narrow the scope of the returned facilities to those falling within the specified radius from that location.  All location queries support filtering by facility type, available services, and mobile status.  One can also retrieve facilities by ID using a comma-separated list like &#x60;?ids&#x3D;id1,id2&#x60;. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)  Results are paginated. JSON responses include pagination information in the standard JSON API \&quot;links\&quot; and \&quot;meta\&quot; elements.   ### Parameter combinations You may optionally specify &#x60;page&#x60; and &#x60;per_page&#x60; with any query. You must specify one of the following parameter combinations:   - &#x60;bbox[]&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;ids&#x60;  - &#x60;lat&#x60; and &#x60;long&#x60;, with the option of any combination of &#x60;radius&#x60;, &#x60;ids&#x60;, &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;state&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;visn&#x60;  - &#x60;zip&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;   Invalid combinations will return &#x60;400 Bad Request&#x60;. 
     * @param ids List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location. (optional)
     * @param zip Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return. (optional)
     * @param state State in which to search for facilities. Except in rare cases, this is two characters. (optional)
     * @param lat Latitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param _long Longitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param radius Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system. (optional)
     * @param bbox Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system) (optional)
     * @param visn VISN search of matching facilities. (optional)
     * @param type Optional facility type search filter (optional)
     * @param services Optional facility service search filter (optional)
     * @param mobile Optional facility mobile search filter (optional)
     * @param page Page of results to return per paginated response. (optional, default to 1)
     * @param perPage Number of results to return per paginated response. (optional, default to 10)
     * @return ApiResponse&lt;GeoFacilitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoFacilitiesResponse> getFacilitiesByLocationWithHttpInfo(List<String> ids, String zip, String state, Float lat, Float _long, Float radius, List<Float> bbox, BigDecimal visn, String type, List<String> services, Boolean mobile, Long page, Long perPage) throws ApiException {
        okhttp3.Call localVarCall = getFacilitiesByLocationValidateBeforeCall(ids, zip, state, lat, _long, radius, bbox, visn, type, services, mobile, page, perPage, null);
        Type localVarReturnType = new TypeToken<GeoFacilitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query facilities by location or IDs, with optional filters (asynchronously)
     * Query facilities by bounding box, latitude and longitude, state, visn, or zip code. Bounding box is specified as four &#x60;bbox[]&#x60; parameters, long1, lat1, long2, lat2. (Relative order is unimportant.)  A query by latitude and longitude returns all facilities in the system, sorted by distance from that location. Providing an optional radius in miles to this query will narrow the scope of the returned facilities to those falling within the specified radius from that location.  All location queries support filtering by facility type, available services, and mobile status.  One can also retrieve facilities by ID using a comma-separated list like &#x60;?ids&#x3D;id1,id2&#x60;. When requesting multiple facilities by ID, the API will return as many results as it can find matches for, omitting IDs where there is no match. It will not return an HTTP error code if it is unable to match a requested ID. Clients may supply IDs up to the limit their HTTP client enforces for URI path lengths. (Usually 2048 characters.)  Results are paginated. JSON responses include pagination information in the standard JSON API \&quot;links\&quot; and \&quot;meta\&quot; elements.   ### Parameter combinations You may optionally specify &#x60;page&#x60; and &#x60;per_page&#x60; with any query. You must specify one of the following parameter combinations:   - &#x60;bbox[]&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;ids&#x60;  - &#x60;lat&#x60; and &#x60;long&#x60;, with the option of any combination of &#x60;radius&#x60;, &#x60;ids&#x60;, &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;state&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;  - &#x60;visn&#x60;  - &#x60;zip&#x60;, with the option of any combination of &#x60;type&#x60;, &#x60;services[]&#x60;, or &#x60;mobile&#x60;   Invalid combinations will return &#x60;400 Bad Request&#x60;. 
     * @param ids List of comma-separated facility IDs to retrieve in a single request. Can be combined with lat and long parameters to retrieve facilities sorted by distance from a location. (optional)
     * @param zip Zip code to search for facilities. More detailed zip codes can be passed in, but only the first five digits are used to determine facilities to return. (optional)
     * @param state State in which to search for facilities. Except in rare cases, this is two characters. (optional)
     * @param lat Latitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param _long Longitude of point to search for facilities, in WGS84 coordinate reference system. (optional)
     * @param radius Optional radial distance from specified latitude and longitude to filter facilities search in WGS84 coordinate reference system. (optional)
     * @param bbox Bounding box (longitude, latitude, longitude, latitude) within which facilities will be returned. (WGS84 coordinate reference system) (optional)
     * @param visn VISN search of matching facilities. (optional)
     * @param type Optional facility type search filter (optional)
     * @param services Optional facility service search filter (optional)
     * @param mobile Optional facility mobile search filter (optional)
     * @param page Page of results to return per paginated response. (optional, default to 1)
     * @param perPage Number of results to return per paginated response. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilitiesByLocationAsync(List<String> ids, String zip, String state, Float lat, Float _long, Float radius, List<Float> bbox, BigDecimal visn, String type, List<String> services, Boolean mobile, Long page, Long perPage, final ApiCallback<GeoFacilitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacilitiesByLocationValidateBeforeCall(ids, zip, state, lat, _long, radius, bbox, visn, type, services, mobile, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<GeoFacilitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacilityById
     * @param id Facility ID, in the form &#x60;&lt;prefix&gt;_&lt;station&gt;&#x60;, where prefix is one of \&quot;vha\&quot;, \&quot;vba\&quot;, \&quot;nca\&quot;, or \&quot;vc\&quot;, for health facility, benefits, cemetery, or vet center, respectively. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid or missing query parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Facility not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/facilities/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/geo+json",
            "application/json",
            "application/vnd.geo+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacilityByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFacilityById(Async)");
        }

        return getFacilityByIdCall(id, _callback);

    }

    /**
     * Retrieve a specific facility by ID
     * 
     * @param id Facility ID, in the form &#x60;&lt;prefix&gt;_&lt;station&gt;&#x60;, where prefix is one of \&quot;vha\&quot;, \&quot;vba\&quot;, \&quot;nca\&quot;, or \&quot;vc\&quot;, for health facility, benefits, cemetery, or vet center, respectively. (required)
     * @return GeoFacilityReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid or missing query parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Facility not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public GeoFacilityReadResponse getFacilityById(String id) throws ApiException {
        ApiResponse<GeoFacilityReadResponse> localVarResp = getFacilityByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve a specific facility by ID
     * 
     * @param id Facility ID, in the form &#x60;&lt;prefix&gt;_&lt;station&gt;&#x60;, where prefix is one of \&quot;vha\&quot;, \&quot;vba\&quot;, \&quot;nca\&quot;, or \&quot;vc\&quot;, for health facility, benefits, cemetery, or vet center, respectively. (required)
     * @return ApiResponse&lt;GeoFacilityReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid or missing query parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Facility not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoFacilityReadResponse> getFacilityByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getFacilityByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GeoFacilityReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a specific facility by ID (asynchronously)
     * 
     * @param id Facility ID, in the form &#x60;&lt;prefix&gt;_&lt;station&gt;&#x60;, where prefix is one of \&quot;vha\&quot;, \&quot;vba\&quot;, \&quot;nca\&quot;, or \&quot;vc\&quot;, for health facility, benefits, cemetery, or vet center, respectively. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request - invalid or missing query parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Facility not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityByIdAsync(String id, final ApiCallback<GeoFacilityReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacilityByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GeoFacilityReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacilityIds
     * @param type Optional facility type search filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityIdsCall(String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacilityIdsValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        return getFacilityIdsCall(type, _callback);

    }

    /**
     * Bulk download of all facility IDs
     * Retrieves all available facility IDs only
     * @param type Optional facility type search filter (optional)
     * @return FacilitiesIdsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public FacilitiesIdsResponse getFacilityIds(String type) throws ApiException {
        ApiResponse<FacilitiesIdsResponse> localVarResp = getFacilityIdsWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * Bulk download of all facility IDs
     * Retrieves all available facility IDs only
     * @param type Optional facility type search filter (optional)
     * @return ApiResponse&lt;FacilitiesIdsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FacilitiesIdsResponse> getFacilityIdsWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = getFacilityIdsValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<FacilitiesIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk download of all facility IDs (asynchronously)
     * Retrieves all available facility IDs only
     * @param type Optional facility type search filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacilityIdsAsync(String type, final ApiCallback<FacilitiesIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacilityIdsValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<FacilitiesIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNearbyFacilities
     * @param lat Latitude of the location from which drive time will be calculated. (optional)
     * @param lng Longitude of the location from which drive time will be calculated. (optional)
     * @param streetAddress Street address of the location from which drive time will be calculated. (optional)
     * @param city City of the location from which drive time will be calculated. (optional)
     * @param state Two character state code of the location from which drive time will be calculated. (optional)
     * @param zip Zip code of the location from which drive time will be calculated. (optional)
     * @param driveTime Filter to only include facilities that are within the specified number of drive time minutes from the requested location. (optional, default to 90)
     * @param services Optional facility service search filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Or Ambiguous Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNearbyFacilitiesCall(Float lat, Float lng, String streetAddress, String city, String state, String zip, Integer driveTime, List<String> services, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nearby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lng != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lng", lng));
        }

        if (streetAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("street_address", streetAddress));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (zip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip", zip));
        }

        if (driveTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("drive_time", driveTime));
        }

        if (services != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "services[]", services));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNearbyFacilitiesValidateBeforeCall(Float lat, Float lng, String streetAddress, String city, String state, String zip, Integer driveTime, List<String> services, final ApiCallback _callback) throws ApiException {
        return getNearbyFacilitiesCall(lat, lng, streetAddress, city, state, zip, driveTime, services, _callback);

    }

    /**
     * Retrieve all VA health facilities reachable by driving within the specified time period
     * Retrieve all VA health facilities that are located within a specified drive time from a specified location based on coordinates (lat and lng). Optional filter parameters include drive_time and services[]. Address (street_address, city, state, and zip) no longer returns results.  The \&quot;attributes\&quot; element has information about the drive-time band that contains the requested location for each facility in the response. The values of &#x60;min_time&#x60; and &#x60;max_time&#x60; are in minutes. For example, a facility returned with a matched &#x60;min_time&#x60; of 10 and &#x60;max_time&#x60; of 20 is a 10 to 20 minute drive from the requested location.  To retrieve full details for nearby facilities, see the documentation for &#x60;/facilities?ids&#x60;.
     * @param lat Latitude of the location from which drive time will be calculated. (optional)
     * @param lng Longitude of the location from which drive time will be calculated. (optional)
     * @param streetAddress Street address of the location from which drive time will be calculated. (optional)
     * @param city City of the location from which drive time will be calculated. (optional)
     * @param state Two character state code of the location from which drive time will be calculated. (optional)
     * @param zip Zip code of the location from which drive time will be calculated. (optional)
     * @param driveTime Filter to only include facilities that are within the specified number of drive time minutes from the requested location. (optional, default to 90)
     * @param services Optional facility service search filter (optional)
     * @return NearbyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Or Ambiguous Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public NearbyResponse getNearbyFacilities(Float lat, Float lng, String streetAddress, String city, String state, String zip, Integer driveTime, List<String> services) throws ApiException {
        ApiResponse<NearbyResponse> localVarResp = getNearbyFacilitiesWithHttpInfo(lat, lng, streetAddress, city, state, zip, driveTime, services);
        return localVarResp.getData();
    }

    /**
     * Retrieve all VA health facilities reachable by driving within the specified time period
     * Retrieve all VA health facilities that are located within a specified drive time from a specified location based on coordinates (lat and lng). Optional filter parameters include drive_time and services[]. Address (street_address, city, state, and zip) no longer returns results.  The \&quot;attributes\&quot; element has information about the drive-time band that contains the requested location for each facility in the response. The values of &#x60;min_time&#x60; and &#x60;max_time&#x60; are in minutes. For example, a facility returned with a matched &#x60;min_time&#x60; of 10 and &#x60;max_time&#x60; of 20 is a 10 to 20 minute drive from the requested location.  To retrieve full details for nearby facilities, see the documentation for &#x60;/facilities?ids&#x60;.
     * @param lat Latitude of the location from which drive time will be calculated. (optional)
     * @param lng Longitude of the location from which drive time will be calculated. (optional)
     * @param streetAddress Street address of the location from which drive time will be calculated. (optional)
     * @param city City of the location from which drive time will be calculated. (optional)
     * @param state Two character state code of the location from which drive time will be calculated. (optional)
     * @param zip Zip code of the location from which drive time will be calculated. (optional)
     * @param driveTime Filter to only include facilities that are within the specified number of drive time minutes from the requested location. (optional, default to 90)
     * @param services Optional facility service search filter (optional)
     * @return ApiResponse&lt;NearbyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Or Ambiguous Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NearbyResponse> getNearbyFacilitiesWithHttpInfo(Float lat, Float lng, String streetAddress, String city, String state, String zip, Integer driveTime, List<String> services) throws ApiException {
        okhttp3.Call localVarCall = getNearbyFacilitiesValidateBeforeCall(lat, lng, streetAddress, city, state, zip, driveTime, services, null);
        Type localVarReturnType = new TypeToken<NearbyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve all VA health facilities reachable by driving within the specified time period (asynchronously)
     * Retrieve all VA health facilities that are located within a specified drive time from a specified location based on coordinates (lat and lng). Optional filter parameters include drive_time and services[]. Address (street_address, city, state, and zip) no longer returns results.  The \&quot;attributes\&quot; element has information about the drive-time band that contains the requested location for each facility in the response. The values of &#x60;min_time&#x60; and &#x60;max_time&#x60; are in minutes. For example, a facility returned with a matched &#x60;min_time&#x60; of 10 and &#x60;max_time&#x60; of 20 is a 10 to 20 minute drive from the requested location.  To retrieve full details for nearby facilities, see the documentation for &#x60;/facilities?ids&#x60;.
     * @param lat Latitude of the location from which drive time will be calculated. (optional)
     * @param lng Longitude of the location from which drive time will be calculated. (optional)
     * @param streetAddress Street address of the location from which drive time will be calculated. (optional)
     * @param city City of the location from which drive time will be calculated. (optional)
     * @param state Two character state code of the location from which drive time will be calculated. (optional)
     * @param zip Zip code of the location from which drive time will be calculated. (optional)
     * @param driveTime Filter to only include facilities that are within the specified number of drive time minutes from the requested location. (optional, default to 90)
     * @param services Optional facility service search filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Missing Required Or Ambiguous Parameters </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Missing API token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API token </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Requested format unacceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> API rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNearbyFacilitiesAsync(Float lat, Float lng, String streetAddress, String city, String state, String zip, Integer driveTime, List<String> services, final ApiCallback<NearbyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNearbyFacilitiesValidateBeforeCall(lat, lng, streetAddress, city, state, zip, driveTime, services, _callback);
        Type localVarReturnType = new TypeToken<NearbyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
