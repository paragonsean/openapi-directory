/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppointmentPhoneNumber;
import org.openapitools.client.model.DetailedServiceAddress;
import org.openapitools.client.model.DetailedServiceEmailContact;
import org.openapitools.client.model.DetailedServiceHours;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for a location offering a service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetailedServiceLocation {
  public static final String SERIALIZED_NAME_ADDITIONAL_HOURS_INFO = "additional_hours_info";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_HOURS_INFO)
  private String additionalHoursInfo;

  public static final String SERIALIZED_NAME_APPOINTMENT_PHONES = "appointment_phones";
  @SerializedName(SERIALIZED_NAME_APPOINTMENT_PHONES)
  private List<AppointmentPhoneNumber> appointmentPhones;

  public static final String SERIALIZED_NAME_EMAIL_CONTACTS = "email_contacts";
  @SerializedName(SERIALIZED_NAME_EMAIL_CONTACTS)
  private List<DetailedServiceEmailContact> emailContacts;

  public static final String SERIALIZED_NAME_FACILITY_SERVICE_HOURS = "facility_service_hours";
  @SerializedName(SERIALIZED_NAME_FACILITY_SERVICE_HOURS)
  private DetailedServiceHours facilityServiceHours;

  public static final String SERIALIZED_NAME_SERVICE_LOCATION_ADDRESS = "service_location_address";
  @SerializedName(SERIALIZED_NAME_SERVICE_LOCATION_ADDRESS)
  private DetailedServiceAddress serviceLocationAddress;

  public DetailedServiceLocation() {
  }

  public DetailedServiceLocation additionalHoursInfo(String additionalHoursInfo) {
    this.additionalHoursInfo = additionalHoursInfo;
    return this;
  }

  /**
   * Additional information related to service location hours.
   * @return additionalHoursInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalHoursInfo() {
    return additionalHoursInfo;
  }

  public void setAdditionalHoursInfo(String additionalHoursInfo) {
    this.additionalHoursInfo = additionalHoursInfo;
  }


  public DetailedServiceLocation appointmentPhones(List<AppointmentPhoneNumber> appointmentPhones) {
    this.appointmentPhones = appointmentPhones;
    return this;
  }

  public DetailedServiceLocation addAppointmentPhonesItem(AppointmentPhoneNumber appointmentPhonesItem) {
    if (this.appointmentPhones == null) {
      this.appointmentPhones = new ArrayList<>();
    }
    this.appointmentPhones.add(appointmentPhonesItem);
    return this;
  }

  /**
   * List of appointment phone information.
   * @return appointmentPhones
   */
  @javax.annotation.Nullable
  public List<AppointmentPhoneNumber> getAppointmentPhones() {
    return appointmentPhones;
  }

  public void setAppointmentPhones(List<AppointmentPhoneNumber> appointmentPhones) {
    this.appointmentPhones = appointmentPhones;
  }


  public DetailedServiceLocation emailContacts(List<DetailedServiceEmailContact> emailContacts) {
    this.emailContacts = emailContacts;
    return this;
  }

  public DetailedServiceLocation addEmailContactsItem(DetailedServiceEmailContact emailContactsItem) {
    if (this.emailContacts == null) {
      this.emailContacts = new ArrayList<>();
    }
    this.emailContacts.add(emailContactsItem);
    return this;
  }

  /**
   * List of email contact information regarding facility services.
   * @return emailContacts
   */
  @javax.annotation.Nullable
  public List<DetailedServiceEmailContact> getEmailContacts() {
    return emailContacts;
  }

  public void setEmailContacts(List<DetailedServiceEmailContact> emailContacts) {
    this.emailContacts = emailContacts;
  }


  public DetailedServiceLocation facilityServiceHours(DetailedServiceHours facilityServiceHours) {
    this.facilityServiceHours = facilityServiceHours;
    return this;
  }

  /**
   * Get facilityServiceHours
   * @return facilityServiceHours
   */
  @javax.annotation.Nullable
  public DetailedServiceHours getFacilityServiceHours() {
    return facilityServiceHours;
  }

  public void setFacilityServiceHours(DetailedServiceHours facilityServiceHours) {
    this.facilityServiceHours = facilityServiceHours;
  }


  public DetailedServiceLocation serviceLocationAddress(DetailedServiceAddress serviceLocationAddress) {
    this.serviceLocationAddress = serviceLocationAddress;
    return this;
  }

  /**
   * Get serviceLocationAddress
   * @return serviceLocationAddress
   */
  @javax.annotation.Nullable
  public DetailedServiceAddress getServiceLocationAddress() {
    return serviceLocationAddress;
  }

  public void setServiceLocationAddress(DetailedServiceAddress serviceLocationAddress) {
    this.serviceLocationAddress = serviceLocationAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailedServiceLocation detailedServiceLocation = (DetailedServiceLocation) o;
    return Objects.equals(this.additionalHoursInfo, detailedServiceLocation.additionalHoursInfo) &&
        Objects.equals(this.appointmentPhones, detailedServiceLocation.appointmentPhones) &&
        Objects.equals(this.emailContacts, detailedServiceLocation.emailContacts) &&
        Objects.equals(this.facilityServiceHours, detailedServiceLocation.facilityServiceHours) &&
        Objects.equals(this.serviceLocationAddress, detailedServiceLocation.serviceLocationAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalHoursInfo, appointmentPhones, emailContacts, facilityServiceHours, serviceLocationAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailedServiceLocation {\n");
    sb.append("    additionalHoursInfo: ").append(toIndentedString(additionalHoursInfo)).append("\n");
    sb.append("    appointmentPhones: ").append(toIndentedString(appointmentPhones)).append("\n");
    sb.append("    emailContacts: ").append(toIndentedString(emailContacts)).append("\n");
    sb.append("    facilityServiceHours: ").append(toIndentedString(facilityServiceHours)).append("\n");
    sb.append("    serviceLocationAddress: ").append(toIndentedString(serviceLocationAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_hours_info");
    openapiFields.add("appointment_phones");
    openapiFields.add("email_contacts");
    openapiFields.add("facility_service_hours");
    openapiFields.add("service_location_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailedServiceLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetailedServiceLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetailedServiceLocation is not found in the empty JSON string", DetailedServiceLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetailedServiceLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetailedServiceLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additional_hours_info") != null && !jsonObj.get("additional_hours_info").isJsonNull()) && !jsonObj.get("additional_hours_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additional_hours_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additional_hours_info").toString()));
      }
      if (jsonObj.get("appointment_phones") != null && !jsonObj.get("appointment_phones").isJsonNull()) {
        JsonArray jsonArrayappointmentPhones = jsonObj.getAsJsonArray("appointment_phones");
        if (jsonArrayappointmentPhones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appointment_phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appointment_phones` to be an array in the JSON string but got `%s`", jsonObj.get("appointment_phones").toString()));
          }

          // validate the optional field `appointment_phones` (array)
          for (int i = 0; i < jsonArrayappointmentPhones.size(); i++) {
            AppointmentPhoneNumber.validateJsonElement(jsonArrayappointmentPhones.get(i));
          };
        }
      }
      if (jsonObj.get("email_contacts") != null && !jsonObj.get("email_contacts").isJsonNull()) {
        JsonArray jsonArrayemailContacts = jsonObj.getAsJsonArray("email_contacts");
        if (jsonArrayemailContacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("email_contacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `email_contacts` to be an array in the JSON string but got `%s`", jsonObj.get("email_contacts").toString()));
          }

          // validate the optional field `email_contacts` (array)
          for (int i = 0; i < jsonArrayemailContacts.size(); i++) {
            DetailedServiceEmailContact.validateJsonElement(jsonArrayemailContacts.get(i));
          };
        }
      }
      // validate the optional field `facility_service_hours`
      if (jsonObj.get("facility_service_hours") != null && !jsonObj.get("facility_service_hours").isJsonNull()) {
        DetailedServiceHours.validateJsonElement(jsonObj.get("facility_service_hours"));
      }
      // validate the optional field `service_location_address`
      if (jsonObj.get("service_location_address") != null && !jsonObj.get("service_location_address").isJsonNull()) {
        DetailedServiceAddress.validateJsonElement(jsonObj.get("service_location_address"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetailedServiceLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetailedServiceLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetailedServiceLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetailedServiceLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<DetailedServiceLocation>() {
           @Override
           public void write(JsonWriter out, DetailedServiceLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetailedServiceLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailedServiceLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailedServiceLocation
   * @throws IOException if the JSON string is invalid with respect to DetailedServiceLocation
   */
  public static DetailedServiceLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailedServiceLocation.class);
  }

  /**
   * Convert an instance of DetailedServiceLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

