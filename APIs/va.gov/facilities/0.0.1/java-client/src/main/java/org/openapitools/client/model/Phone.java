/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Collection of all telephone contact numbers for given facility. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:27.185471-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Phone {
  public static final String SERIALIZED_NAME_AFTER_HOURS = "after_hours";
  @SerializedName(SERIALIZED_NAME_AFTER_HOURS)
  private String afterHours;

  public static final String SERIALIZED_NAME_ENROLLMENT_COORDINATOR = "enrollment_coordinator";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_COORDINATOR)
  private String enrollmentCoordinator;

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private String fax;

  public static final String SERIALIZED_NAME_HEALTH_CONNECT = "health_connect";
  @SerializedName(SERIALIZED_NAME_HEALTH_CONNECT)
  private String healthConnect;

  public static final String SERIALIZED_NAME_MAIN = "main";
  @SerializedName(SERIALIZED_NAME_MAIN)
  private String main;

  public static final String SERIALIZED_NAME_MENTAL_HEALTH_CLINIC = "mental_health_clinic";
  @SerializedName(SERIALIZED_NAME_MENTAL_HEALTH_CLINIC)
  private String mentalHealthClinic;

  public static final String SERIALIZED_NAME_PATIENT_ADVOCATE = "patient_advocate";
  @SerializedName(SERIALIZED_NAME_PATIENT_ADVOCATE)
  private String patientAdvocate;

  public static final String SERIALIZED_NAME_PHARMACY = "pharmacy";
  @SerializedName(SERIALIZED_NAME_PHARMACY)
  private String pharmacy;

  public Phone() {
  }

  public Phone afterHours(String afterHours) {
    this.afterHours = afterHours;
    return this;
  }

  /**
   * Phone number that may be reached outside of operating hours for given facility.
   * @return afterHours
   */
  @javax.annotation.Nullable
  public String getAfterHours() {
    return afterHours;
  }

  public void setAfterHours(String afterHours) {
    this.afterHours = afterHours;
  }


  public Phone enrollmentCoordinator(String enrollmentCoordinator) {
    this.enrollmentCoordinator = enrollmentCoordinator;
    return this;
  }

  /**
   * Phone number for enrollment coordinator for given facility.
   * @return enrollmentCoordinator
   */
  @javax.annotation.Nullable
  public String getEnrollmentCoordinator() {
    return enrollmentCoordinator;
  }

  public void setEnrollmentCoordinator(String enrollmentCoordinator) {
    this.enrollmentCoordinator = enrollmentCoordinator;
  }


  public Phone fax(String fax) {
    this.fax = fax;
    return this;
  }

  /**
   * Phone number used for faxing to given facility.
   * @return fax
   */
  @javax.annotation.Nullable
  public String getFax() {
    return fax;
  }

  public void setFax(String fax) {
    this.fax = fax;
  }


  public Phone healthConnect(String healthConnect) {
    this.healthConnect = healthConnect;
    return this;
  }

  /**
   * Phone number for VA Health Connect.
   * @return healthConnect
   */
  @javax.annotation.Nullable
  public String getHealthConnect() {
    return healthConnect;
  }

  public void setHealthConnect(String healthConnect) {
    this.healthConnect = healthConnect;
  }


  public Phone main(String main) {
    this.main = main;
    return this;
  }

  /**
   * Phone number for given facility.
   * @return main
   */
  @javax.annotation.Nullable
  public String getMain() {
    return main;
  }

  public void setMain(String main) {
    this.main = main;
  }


  public Phone mentalHealthClinic(String mentalHealthClinic) {
    this.mentalHealthClinic = mentalHealthClinic;
    return this;
  }

  /**
   * Phone number for mental health clinic for given facility.
   * @return mentalHealthClinic
   */
  @javax.annotation.Nullable
  public String getMentalHealthClinic() {
    return mentalHealthClinic;
  }

  public void setMentalHealthClinic(String mentalHealthClinic) {
    this.mentalHealthClinic = mentalHealthClinic;
  }


  public Phone patientAdvocate(String patientAdvocate) {
    this.patientAdvocate = patientAdvocate;
    return this;
  }

  /**
   * Phone number for patient advocate for given facility.
   * @return patientAdvocate
   */
  @javax.annotation.Nullable
  public String getPatientAdvocate() {
    return patientAdvocate;
  }

  public void setPatientAdvocate(String patientAdvocate) {
    this.patientAdvocate = patientAdvocate;
  }


  public Phone pharmacy(String pharmacy) {
    this.pharmacy = pharmacy;
    return this;
  }

  /**
   * Phone number for pharmacy for given facility.
   * @return pharmacy
   */
  @javax.annotation.Nullable
  public String getPharmacy() {
    return pharmacy;
  }

  public void setPharmacy(String pharmacy) {
    this.pharmacy = pharmacy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Phone phone = (Phone) o;
    return Objects.equals(this.afterHours, phone.afterHours) &&
        Objects.equals(this.enrollmentCoordinator, phone.enrollmentCoordinator) &&
        Objects.equals(this.fax, phone.fax) &&
        Objects.equals(this.healthConnect, phone.healthConnect) &&
        Objects.equals(this.main, phone.main) &&
        Objects.equals(this.mentalHealthClinic, phone.mentalHealthClinic) &&
        Objects.equals(this.patientAdvocate, phone.patientAdvocate) &&
        Objects.equals(this.pharmacy, phone.pharmacy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterHours, enrollmentCoordinator, fax, healthConnect, main, mentalHealthClinic, patientAdvocate, pharmacy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Phone {\n");
    sb.append("    afterHours: ").append(toIndentedString(afterHours)).append("\n");
    sb.append("    enrollmentCoordinator: ").append(toIndentedString(enrollmentCoordinator)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    healthConnect: ").append(toIndentedString(healthConnect)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    mentalHealthClinic: ").append(toIndentedString(mentalHealthClinic)).append("\n");
    sb.append("    patientAdvocate: ").append(toIndentedString(patientAdvocate)).append("\n");
    sb.append("    pharmacy: ").append(toIndentedString(pharmacy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("after_hours");
    openapiFields.add("enrollment_coordinator");
    openapiFields.add("fax");
    openapiFields.add("health_connect");
    openapiFields.add("main");
    openapiFields.add("mental_health_clinic");
    openapiFields.add("patient_advocate");
    openapiFields.add("pharmacy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Phone
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Phone.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Phone is not found in the empty JSON string", Phone.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Phone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Phone` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("after_hours") != null && !jsonObj.get("after_hours").isJsonNull()) && !jsonObj.get("after_hours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `after_hours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("after_hours").toString()));
      }
      if ((jsonObj.get("enrollment_coordinator") != null && !jsonObj.get("enrollment_coordinator").isJsonNull()) && !jsonObj.get("enrollment_coordinator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollment_coordinator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollment_coordinator").toString()));
      }
      if ((jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull()) && !jsonObj.get("fax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      if ((jsonObj.get("health_connect") != null && !jsonObj.get("health_connect").isJsonNull()) && !jsonObj.get("health_connect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health_connect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health_connect").toString()));
      }
      if ((jsonObj.get("main") != null && !jsonObj.get("main").isJsonNull()) && !jsonObj.get("main").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main").toString()));
      }
      if ((jsonObj.get("mental_health_clinic") != null && !jsonObj.get("mental_health_clinic").isJsonNull()) && !jsonObj.get("mental_health_clinic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mental_health_clinic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mental_health_clinic").toString()));
      }
      if ((jsonObj.get("patient_advocate") != null && !jsonObj.get("patient_advocate").isJsonNull()) && !jsonObj.get("patient_advocate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patient_advocate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patient_advocate").toString()));
      }
      if ((jsonObj.get("pharmacy") != null && !jsonObj.get("pharmacy").isJsonNull()) && !jsonObj.get("pharmacy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pharmacy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pharmacy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Phone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Phone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Phone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Phone.class));

       return (TypeAdapter<T>) new TypeAdapter<Phone>() {
           @Override
           public void write(JsonWriter out, Phone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Phone read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Phone given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Phone
   * @throws IOException if the JSON string is invalid with respect to Phone
   */
  public static Phone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Phone.class);
  }

  /**
   * Convert an instance of Phone to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

