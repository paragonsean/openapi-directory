/*
 * VA Facilities
 * ## Background  The VA Facilities API version 0 (v0) provides information about VA facilities, including locations, addresses, phone numbers, hours of operation, and available services.  This API gives information about several types of VA facilities: - Health facilities (vha) - Benefits facilities (vba) - Cemeteries (nca) - Vet Centers (vc)  ## Technical overview  For in-depth details on data sources for the Facilities API, [read our Facilities GitHub documentation](https://github.com/department-of-veterans-affairs/lighthouse-facilities#readme).  Health service and service availability data for v0 of this API are based on historical data.  - Historical data is returned for the previous 30 days. - Data is based on both pending and completed appointments for a service at a given facility.   ### Authentication and Authorization  VA Facilities is an open data API. Open data API requests are authorized through a symmetric API token that's provided in an HTTP header with the name 'apikey'.  ### Test data  Test data for the sandbox environment is only for testing the API and is not guaranteed to be up-to-date. After testing this API in sandbox, you can start the process of moving to production.  ### Facility ID formats  A facility ID has the format prefix_stationNumber. The prefix is nca, vc, vba, or vha. Cemeteries may be VA national cemeteries or non-national; non-national cemeteries have the station number prefixed with an s. There are no other constraints on the format. Some facility ID examples are: - Health: `vha_402GA` - Benefits: `vba_539GB` - National cemetery: `nca_063` - Non-national cemetery: `nca_s1082` - Vet Center: `vc_0872MVC`   ### Mobile facilities  The mobile health facilities move regularly within a region. If a facility comes back from this API with \"mobile\": \"true\", the latitude/longitude and address could be inaccurate. To get the exact current location, please call the mobile facility number listed.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Addresses;
import org.openapitools.client.model.DetailedService;
import org.openapitools.client.model.Hours;
import org.openapitools.client.model.OperatingStatus;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.Satisfaction;
import org.openapitools.client.model.Services;
import org.openapitools.client.model.WaitTimes;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for FacilityAttributes
 */
public class FacilityAttributesTest {
    private final FacilityAttributes model = new FacilityAttributes();

    /**
     * Model tests for FacilityAttributes
     */
    @Test
    public void testFacilityAttributes() {
        // TODO: test FacilityAttributes
    }

    /**
     * Test the property 'activeStatus'
     */
    @Test
    public void activeStatusTest() {
        // TODO: test activeStatus
    }

    /**
     * Test the property 'address'
     */
    @Test
    public void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'classification'
     */
    @Test
    public void classificationTest() {
        // TODO: test classification
    }

    /**
     * Test the property 'detailedServices'
     */
    @Test
    public void detailedServicesTest() {
        // TODO: test detailedServices
    }

    /**
     * Test the property 'facilityType'
     */
    @Test
    public void facilityTypeTest() {
        // TODO: test facilityType
    }

    /**
     * Test the property 'hours'
     */
    @Test
    public void hoursTest() {
        // TODO: test hours
    }

    /**
     * Test the property 'lat'
     */
    @Test
    public void latTest() {
        // TODO: test lat
    }

    /**
     * Test the property '_long'
     */
    @Test
    public void _longTest() {
        // TODO: test _long
    }

    /**
     * Test the property 'mobile'
     */
    @Test
    public void mobileTest() {
        // TODO: test mobile
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'operatingStatus'
     */
    @Test
    public void operatingStatusTest() {
        // TODO: test operatingStatus
    }

    /**
     * Test the property 'operationalHoursSpecialInstructions'
     */
    @Test
    public void operationalHoursSpecialInstructionsTest() {
        // TODO: test operationalHoursSpecialInstructions
    }

    /**
     * Test the property 'phone'
     */
    @Test
    public void phoneTest() {
        // TODO: test phone
    }

    /**
     * Test the property 'satisfaction'
     */
    @Test
    public void satisfactionTest() {
        // TODO: test satisfaction
    }

    /**
     * Test the property 'services'
     */
    @Test
    public void servicesTest() {
        // TODO: test services
    }

    /**
     * Test the property 'timeZone'
     */
    @Test
    public void timeZoneTest() {
        // TODO: test timeZone
    }

    /**
     * Test the property 'visn'
     */
    @Test
    public void visnTest() {
        // TODO: test visn
    }

    /**
     * Test the property 'waitTimes'
     */
    @Test
    public void waitTimesTest() {
        // TODO: test waitTimes
    }

    /**
     * Test the property 'website'
     */
    @Test
    public void websiteTest() {
        // TODO: test website
    }

}
