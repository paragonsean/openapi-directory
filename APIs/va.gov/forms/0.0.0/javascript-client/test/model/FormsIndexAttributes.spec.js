/**
 * VA Forms
 * Use the VA Forms API to search for VA forms, get the form's PDF link and metadata, and check for new versions.  Visit our VA Lighthouse [Contact Us page](https://developer.va.gov/support) for further assistance.  ## Background This API offers an efficient way to stay up-to-date with the latest VA forms and information. The forms information listed on VA.gov matches the information returned by this API. - Search by form number, keyword, or title - Get a link to the form in PDF format - Get detailed form metadata including the number of pages, related forms, benefit categories, language, and more - Retrieve the latest date of PDF changes and the SHA256 checksum - Identify when a form is deleted by the VA  ## Technical summary The VA Forms API collects form data from the official VA Form Repository on a nightly basis.  The Index endpoint can return all available forms or, if an optional query parameter is passed, will return only forms that may relate to the query value. When a valid form name is passed to the Show endpoint, it will return a single form with additional metadata and full revision history. A JSON response is given with the PDF link (if published) and the corresponding form metadata.  ### Authentication and authorization The form information shared by this API is publicly available.  API requests are authorized through a symmetric API token, provided in an HTTP header with name apikey. [Get a sandbox API Key](https://developer.va.gov/apply).  ### Testing in sandbox environment Form data in the sandbox environment is for testing your API only, and is not guaranteed to be up-to-date. This API also has a reduced API rate limit. When you're ready to move to production, be sure to [request a production API key.](https://developer.va.gov/go-live)  ### SHA256 revision history Each form is checked nightly for recent file changes. A corresponding SHA256 checksum is calculated, which provides a record of when the PDF changed and the SHA256 hash that was calculated. This allows end users to know that they have the most recent version and can verify the integrity of a previously downloaded PDF.  ### Valid PDF link Additionally, during the nightly refresh process, the link to the form PDF is verified and the `valid_pdf` metadata is updated accordingly. If marked `true`, the link is valid and is a current form. If marked `false`, the link is either broken or the form has been removed.  ### Deleted forms If the `deleted_at` metadata is set, that means the VA has removed this form from the repository and it is no longer to be used. 
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VaForms);
  }
}(this, function(expect, VaForms) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VaForms.FormsIndexAttributes();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FormsIndexAttributes', function() {
    it('should create an instance of FormsIndexAttributes', function() {
      // uncomment below and update the code to test FormsIndexAttributes
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be.a(VaForms.FormsIndexAttributes);
    });

    it('should have the property benefitCategories (base name: "benefit_categories")', function() {
      // uncomment below and update the code to test the property benefitCategories
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property firstIssuedOn (base name: "first_issued_on")', function() {
      // uncomment below and update the code to test the property firstIssuedOn
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formDetailsUrl (base name: "form_details_url")', function() {
      // uncomment below and update the code to test the property formDetailsUrl
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formName (base name: "form_name")', function() {
      // uncomment below and update the code to test the property formName
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formToolIntro (base name: "form_tool_intro")', function() {
      // uncomment below and update the code to test the property formToolIntro
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formToolUrl (base name: "form_tool_url")', function() {
      // uncomment below and update the code to test the property formToolUrl
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formType (base name: "form_type")', function() {
      // uncomment below and update the code to test the property formType
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property formUsage (base name: "form_usage")', function() {
      // uncomment below and update the code to test the property formUsage
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastRevisionOn (base name: "last_revision_on")', function() {
      // uncomment below and update the code to test the property lastRevisionOn
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property lastSha256Change (base name: "last_sha256_change")', function() {
      // uncomment below and update the code to test the property lastSha256Change
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property pages (base name: "pages")', function() {
      // uncomment below and update the code to test the property pages
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property relatedForms (base name: "related_forms")', function() {
      // uncomment below and update the code to test the property relatedForms
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property sha256 (base name: "sha256")', function() {
      // uncomment below and update the code to test the property sha256
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property vaFormAdministration (base name: "va_form_administration")', function() {
      // uncomment below and update the code to test the property vaFormAdministration
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

    it('should have the property validPdf (base name: "valid_pdf")', function() {
      // uncomment below and update the code to test the property validPdf
      //var instance = new VaForms.FormsIndexAttributes();
      //expect(instance).to.be();
    });

  });

}));
