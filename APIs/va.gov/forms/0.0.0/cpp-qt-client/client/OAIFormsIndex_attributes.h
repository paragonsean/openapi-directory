/**
 * VA Forms
 * Use the VA Forms API to search for VA forms, get the form's PDF link and metadata, and check for new versions.  Visit our VA Lighthouse [Contact Us page](https://developer.va.gov/support) for further assistance.  ## Background This API offers an efficient way to stay up-to-date with the latest VA forms and information. The forms information listed on VA.gov matches the information returned by this API. - Search by form number, keyword, or title - Get a link to the form in PDF format - Get detailed form metadata including the number of pages, related forms, benefit categories, language, and more - Retrieve the latest date of PDF changes and the SHA256 checksum - Identify when a form is deleted by the VA  ## Technical summary The VA Forms API collects form data from the official VA Form Repository on a nightly basis.  The Index endpoint can return all available forms or, if an optional query parameter is passed, will return only forms that may relate to the query value. When a valid form name is passed to the Show endpoint, it will return a single form with additional metadata and full revision history. A JSON response is given with the PDF link (if published) and the corresponding form metadata.  ### Authentication and authorization The form information shared by this API is publicly available.  API requests are authorized through a symmetric API token, provided in an HTTP header with name apikey. [Get a sandbox API Key](https://developer.va.gov/apply).  ### Testing in sandbox environment Form data in the sandbox environment is for testing your API only, and is not guaranteed to be up-to-date. This API also has a reduced API rate limit. When you're ready to move to production, be sure to [request a production API key.](https://developer.va.gov/go-live)  ### SHA256 revision history Each form is checked nightly for recent file changes. A corresponding SHA256 checksum is calculated, which provides a record of when the PDF changed and the SHA256 hash that was calculated. This allows end users to know that they have the most recent version and can verify the integrity of a previously downloaded PDF.  ### Valid PDF link Additionally, during the nightly refresh process, the link to the form PDF is verified and the `valid_pdf` metadata is updated accordingly. If marked `true`, the link is valid and is a current form. If marked `false`, the link is either broken or the form has been removed.  ### Deleted forms If the `deleted_at` metadata is set, that means the VA has removed this form from the repository and it is no longer to be used. 
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFormsIndex_attributes.h
 *
 * 
 */

#ifndef OAIFormsIndex_attributes_H
#define OAIFormsIndex_attributes_H

#include <QJsonObject>

#include "OAIFormShow_attributes_benefit_categories_inner.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFormShow_attributes_benefit_categories_inner;

class OAIFormsIndex_attributes : public OAIObject {
public:
    OAIFormsIndex_attributes();
    OAIFormsIndex_attributes(QString json);
    ~OAIFormsIndex_attributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIFormShow_attributes_benefit_categories_inner> getBenefitCategories() const;
    void setBenefitCategories(const QList<OAIFormShow_attributes_benefit_categories_inner> &benefit_categories);
    bool is_benefit_categories_Set() const;
    bool is_benefit_categories_Valid() const;

    QDateTime getDeletedAt() const;
    void setDeletedAt(const QDateTime &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    QDate getFirstIssuedOn() const;
    void setFirstIssuedOn(const QDate &first_issued_on);
    bool is_first_issued_on_Set() const;
    bool is_first_issued_on_Valid() const;

    QString getFormDetailsUrl() const;
    void setFormDetailsUrl(const QString &form_details_url);
    bool is_form_details_url_Set() const;
    bool is_form_details_url_Valid() const;

    QString getFormName() const;
    void setFormName(const QString &form_name);
    bool is_form_name_Set() const;
    bool is_form_name_Valid() const;

    QString getFormToolIntro() const;
    void setFormToolIntro(const QString &form_tool_intro);
    bool is_form_tool_intro_Set() const;
    bool is_form_tool_intro_Valid() const;

    QString getFormToolUrl() const;
    void setFormToolUrl(const QString &form_tool_url);
    bool is_form_tool_url_Set() const;
    bool is_form_tool_url_Valid() const;

    QString getFormType() const;
    void setFormType(const QString &form_type);
    bool is_form_type_Set() const;
    bool is_form_type_Valid() const;

    QString getFormUsage() const;
    void setFormUsage(const QString &form_usage);
    bool is_form_usage_Set() const;
    bool is_form_usage_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QDate getLastRevisionOn() const;
    void setLastRevisionOn(const QDate &last_revision_on);
    bool is_last_revision_on_Set() const;
    bool is_last_revision_on_Valid() const;

    QDate getLastSha256Change() const;
    void setLastSha256Change(const QDate &last_sha256_change);
    bool is_last_sha256_change_Set() const;
    bool is_last_sha256_change_Valid() const;

    qint32 getPages() const;
    void setPages(const qint32 &pages);
    bool is_pages_Set() const;
    bool is_pages_Valid() const;

    QList<QString> getRelatedForms() const;
    void setRelatedForms(const QList<QString> &related_forms);
    bool is_related_forms_Set() const;
    bool is_related_forms_Valid() const;

    QString getSha256() const;
    void setSha256(const QString &sha256);
    bool is_sha256_Set() const;
    bool is_sha256_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getVaFormAdministration() const;
    void setVaFormAdministration(const QString &va_form_administration);
    bool is_va_form_administration_Set() const;
    bool is_va_form_administration_Valid() const;

    bool isValidPdf() const;
    void setValidPdf(const bool &valid_pdf);
    bool is_valid_pdf_Set() const;
    bool is_valid_pdf_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIFormShow_attributes_benefit_categories_inner> m_benefit_categories;
    bool m_benefit_categories_isSet;
    bool m_benefit_categories_isValid;

    QDateTime m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    QDate m_first_issued_on;
    bool m_first_issued_on_isSet;
    bool m_first_issued_on_isValid;

    QString m_form_details_url;
    bool m_form_details_url_isSet;
    bool m_form_details_url_isValid;

    QString m_form_name;
    bool m_form_name_isSet;
    bool m_form_name_isValid;

    QString m_form_tool_intro;
    bool m_form_tool_intro_isSet;
    bool m_form_tool_intro_isValid;

    QString m_form_tool_url;
    bool m_form_tool_url_isSet;
    bool m_form_tool_url_isValid;

    QString m_form_type;
    bool m_form_type_isSet;
    bool m_form_type_isValid;

    QString m_form_usage;
    bool m_form_usage_isSet;
    bool m_form_usage_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QDate m_last_revision_on;
    bool m_last_revision_on_isSet;
    bool m_last_revision_on_isValid;

    QDate m_last_sha256_change;
    bool m_last_sha256_change_isSet;
    bool m_last_sha256_change_isValid;

    qint32 m_pages;
    bool m_pages_isSet;
    bool m_pages_isValid;

    QList<QString> m_related_forms;
    bool m_related_forms_isSet;
    bool m_related_forms_isValid;

    QString m_sha256;
    bool m_sha256_isSet;
    bool m_sha256_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_va_form_administration;
    bool m_va_form_administration_isSet;
    bool m_va_form_administration_isValid;

    bool m_valid_pdf;
    bool m_valid_pdf_isSet;
    bool m_valid_pdf_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFormsIndex_attributes)

#endif // OAIFormsIndex_attributes_H
