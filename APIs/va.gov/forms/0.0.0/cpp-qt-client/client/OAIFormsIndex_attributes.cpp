/**
 * VA Forms
 * Use the VA Forms API to search for VA forms, get the form's PDF link and metadata, and check for new versions.  Visit our VA Lighthouse [Contact Us page](https://developer.va.gov/support) for further assistance.  ## Background This API offers an efficient way to stay up-to-date with the latest VA forms and information. The forms information listed on VA.gov matches the information returned by this API. - Search by form number, keyword, or title - Get a link to the form in PDF format - Get detailed form metadata including the number of pages, related forms, benefit categories, language, and more - Retrieve the latest date of PDF changes and the SHA256 checksum - Identify when a form is deleted by the VA  ## Technical summary The VA Forms API collects form data from the official VA Form Repository on a nightly basis.  The Index endpoint can return all available forms or, if an optional query parameter is passed, will return only forms that may relate to the query value. When a valid form name is passed to the Show endpoint, it will return a single form with additional metadata and full revision history. A JSON response is given with the PDF link (if published) and the corresponding form metadata.  ### Authentication and authorization The form information shared by this API is publicly available.  API requests are authorized through a symmetric API token, provided in an HTTP header with name apikey. [Get a sandbox API Key](https://developer.va.gov/apply).  ### Testing in sandbox environment Form data in the sandbox environment is for testing your API only, and is not guaranteed to be up-to-date. This API also has a reduced API rate limit. When you're ready to move to production, be sure to [request a production API key.](https://developer.va.gov/go-live)  ### SHA256 revision history Each form is checked nightly for recent file changes. A corresponding SHA256 checksum is calculated, which provides a record of when the PDF changed and the SHA256 hash that was calculated. This allows end users to know that they have the most recent version and can verify the integrity of a previously downloaded PDF.  ### Valid PDF link Additionally, during the nightly refresh process, the link to the form PDF is verified and the `valid_pdf` metadata is updated accordingly. If marked `true`, the link is valid and is a current form. If marked `false`, the link is either broken or the form has been removed.  ### Deleted forms If the `deleted_at` metadata is set, that means the VA has removed this form from the repository and it is no longer to be used. 
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormsIndex_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormsIndex_attributes::OAIFormsIndex_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormsIndex_attributes::OAIFormsIndex_attributes() {
    this->initializeModel();
}

OAIFormsIndex_attributes::~OAIFormsIndex_attributes() {}

void OAIFormsIndex_attributes::initializeModel() {

    m_benefit_categories_isSet = false;
    m_benefit_categories_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_first_issued_on_isSet = false;
    m_first_issued_on_isValid = false;

    m_form_details_url_isSet = false;
    m_form_details_url_isValid = false;

    m_form_name_isSet = false;
    m_form_name_isValid = false;

    m_form_tool_intro_isSet = false;
    m_form_tool_intro_isValid = false;

    m_form_tool_url_isSet = false;
    m_form_tool_url_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_form_usage_isSet = false;
    m_form_usage_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_revision_on_isSet = false;
    m_last_revision_on_isValid = false;

    m_last_sha256_change_isSet = false;
    m_last_sha256_change_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_related_forms_isSet = false;
    m_related_forms_isValid = false;

    m_sha256_isSet = false;
    m_sha256_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_va_form_administration_isSet = false;
    m_va_form_administration_isValid = false;

    m_valid_pdf_isSet = false;
    m_valid_pdf_isValid = false;
}

void OAIFormsIndex_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormsIndex_attributes::fromJsonObject(QJsonObject json) {

    m_benefit_categories_isValid = ::OpenAPI::fromJsonValue(m_benefit_categories, json[QString("benefit_categories")]);
    m_benefit_categories_isSet = !json[QString("benefit_categories")].isNull() && m_benefit_categories_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_first_issued_on_isValid = ::OpenAPI::fromJsonValue(m_first_issued_on, json[QString("first_issued_on")]);
    m_first_issued_on_isSet = !json[QString("first_issued_on")].isNull() && m_first_issued_on_isValid;

    m_form_details_url_isValid = ::OpenAPI::fromJsonValue(m_form_details_url, json[QString("form_details_url")]);
    m_form_details_url_isSet = !json[QString("form_details_url")].isNull() && m_form_details_url_isValid;

    m_form_name_isValid = ::OpenAPI::fromJsonValue(m_form_name, json[QString("form_name")]);
    m_form_name_isSet = !json[QString("form_name")].isNull() && m_form_name_isValid;

    m_form_tool_intro_isValid = ::OpenAPI::fromJsonValue(m_form_tool_intro, json[QString("form_tool_intro")]);
    m_form_tool_intro_isSet = !json[QString("form_tool_intro")].isNull() && m_form_tool_intro_isValid;

    m_form_tool_url_isValid = ::OpenAPI::fromJsonValue(m_form_tool_url, json[QString("form_tool_url")]);
    m_form_tool_url_isSet = !json[QString("form_tool_url")].isNull() && m_form_tool_url_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("form_type")]);
    m_form_type_isSet = !json[QString("form_type")].isNull() && m_form_type_isValid;

    m_form_usage_isValid = ::OpenAPI::fromJsonValue(m_form_usage, json[QString("form_usage")]);
    m_form_usage_isSet = !json[QString("form_usage")].isNull() && m_form_usage_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_revision_on_isValid = ::OpenAPI::fromJsonValue(m_last_revision_on, json[QString("last_revision_on")]);
    m_last_revision_on_isSet = !json[QString("last_revision_on")].isNull() && m_last_revision_on_isValid;

    m_last_sha256_change_isValid = ::OpenAPI::fromJsonValue(m_last_sha256_change, json[QString("last_sha256_change")]);
    m_last_sha256_change_isSet = !json[QString("last_sha256_change")].isNull() && m_last_sha256_change_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_related_forms_isValid = ::OpenAPI::fromJsonValue(m_related_forms, json[QString("related_forms")]);
    m_related_forms_isSet = !json[QString("related_forms")].isNull() && m_related_forms_isValid;

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_va_form_administration_isValid = ::OpenAPI::fromJsonValue(m_va_form_administration, json[QString("va_form_administration")]);
    m_va_form_administration_isSet = !json[QString("va_form_administration")].isNull() && m_va_form_administration_isValid;

    m_valid_pdf_isValid = ::OpenAPI::fromJsonValue(m_valid_pdf, json[QString("valid_pdf")]);
    m_valid_pdf_isSet = !json[QString("valid_pdf")].isNull() && m_valid_pdf_isValid;
}

QString OAIFormsIndex_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormsIndex_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m_benefit_categories.size() > 0) {
        obj.insert(QString("benefit_categories"), ::OpenAPI::toJsonValue(m_benefit_categories));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_first_issued_on_isSet) {
        obj.insert(QString("first_issued_on"), ::OpenAPI::toJsonValue(m_first_issued_on));
    }
    if (m_form_details_url_isSet) {
        obj.insert(QString("form_details_url"), ::OpenAPI::toJsonValue(m_form_details_url));
    }
    if (m_form_name_isSet) {
        obj.insert(QString("form_name"), ::OpenAPI::toJsonValue(m_form_name));
    }
    if (m_form_tool_intro_isSet) {
        obj.insert(QString("form_tool_intro"), ::OpenAPI::toJsonValue(m_form_tool_intro));
    }
    if (m_form_tool_url_isSet) {
        obj.insert(QString("form_tool_url"), ::OpenAPI::toJsonValue(m_form_tool_url));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("form_type"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_form_usage_isSet) {
        obj.insert(QString("form_usage"), ::OpenAPI::toJsonValue(m_form_usage));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_revision_on_isSet) {
        obj.insert(QString("last_revision_on"), ::OpenAPI::toJsonValue(m_last_revision_on));
    }
    if (m_last_sha256_change_isSet) {
        obj.insert(QString("last_sha256_change"), ::OpenAPI::toJsonValue(m_last_sha256_change));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_related_forms.size() > 0) {
        obj.insert(QString("related_forms"), ::OpenAPI::toJsonValue(m_related_forms));
    }
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_va_form_administration_isSet) {
        obj.insert(QString("va_form_administration"), ::OpenAPI::toJsonValue(m_va_form_administration));
    }
    if (m_valid_pdf_isSet) {
        obj.insert(QString("valid_pdf"), ::OpenAPI::toJsonValue(m_valid_pdf));
    }
    return obj;
}

QList<OAIFormShow_attributes_benefit_categories_inner> OAIFormsIndex_attributes::getBenefitCategories() const {
    return m_benefit_categories;
}
void OAIFormsIndex_attributes::setBenefitCategories(const QList<OAIFormShow_attributes_benefit_categories_inner> &benefit_categories) {
    m_benefit_categories = benefit_categories;
    m_benefit_categories_isSet = true;
}

bool OAIFormsIndex_attributes::is_benefit_categories_Set() const{
    return m_benefit_categories_isSet;
}

bool OAIFormsIndex_attributes::is_benefit_categories_Valid() const{
    return m_benefit_categories_isValid;
}

QDateTime OAIFormsIndex_attributes::getDeletedAt() const {
    return m_deleted_at;
}
void OAIFormsIndex_attributes::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIFormsIndex_attributes::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIFormsIndex_attributes::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QDate OAIFormsIndex_attributes::getFirstIssuedOn() const {
    return m_first_issued_on;
}
void OAIFormsIndex_attributes::setFirstIssuedOn(const QDate &first_issued_on) {
    m_first_issued_on = first_issued_on;
    m_first_issued_on_isSet = true;
}

bool OAIFormsIndex_attributes::is_first_issued_on_Set() const{
    return m_first_issued_on_isSet;
}

bool OAIFormsIndex_attributes::is_first_issued_on_Valid() const{
    return m_first_issued_on_isValid;
}

QString OAIFormsIndex_attributes::getFormDetailsUrl() const {
    return m_form_details_url;
}
void OAIFormsIndex_attributes::setFormDetailsUrl(const QString &form_details_url) {
    m_form_details_url = form_details_url;
    m_form_details_url_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_details_url_Set() const{
    return m_form_details_url_isSet;
}

bool OAIFormsIndex_attributes::is_form_details_url_Valid() const{
    return m_form_details_url_isValid;
}

QString OAIFormsIndex_attributes::getFormName() const {
    return m_form_name;
}
void OAIFormsIndex_attributes::setFormName(const QString &form_name) {
    m_form_name = form_name;
    m_form_name_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_name_Set() const{
    return m_form_name_isSet;
}

bool OAIFormsIndex_attributes::is_form_name_Valid() const{
    return m_form_name_isValid;
}

QString OAIFormsIndex_attributes::getFormToolIntro() const {
    return m_form_tool_intro;
}
void OAIFormsIndex_attributes::setFormToolIntro(const QString &form_tool_intro) {
    m_form_tool_intro = form_tool_intro;
    m_form_tool_intro_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_tool_intro_Set() const{
    return m_form_tool_intro_isSet;
}

bool OAIFormsIndex_attributes::is_form_tool_intro_Valid() const{
    return m_form_tool_intro_isValid;
}

QString OAIFormsIndex_attributes::getFormToolUrl() const {
    return m_form_tool_url;
}
void OAIFormsIndex_attributes::setFormToolUrl(const QString &form_tool_url) {
    m_form_tool_url = form_tool_url;
    m_form_tool_url_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_tool_url_Set() const{
    return m_form_tool_url_isSet;
}

bool OAIFormsIndex_attributes::is_form_tool_url_Valid() const{
    return m_form_tool_url_isValid;
}

QString OAIFormsIndex_attributes::getFormType() const {
    return m_form_type;
}
void OAIFormsIndex_attributes::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIFormsIndex_attributes::is_form_type_Valid() const{
    return m_form_type_isValid;
}

QString OAIFormsIndex_attributes::getFormUsage() const {
    return m_form_usage;
}
void OAIFormsIndex_attributes::setFormUsage(const QString &form_usage) {
    m_form_usage = form_usage;
    m_form_usage_isSet = true;
}

bool OAIFormsIndex_attributes::is_form_usage_Set() const{
    return m_form_usage_isSet;
}

bool OAIFormsIndex_attributes::is_form_usage_Valid() const{
    return m_form_usage_isValid;
}

QString OAIFormsIndex_attributes::getLanguage() const {
    return m_language;
}
void OAIFormsIndex_attributes::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIFormsIndex_attributes::is_language_Set() const{
    return m_language_isSet;
}

bool OAIFormsIndex_attributes::is_language_Valid() const{
    return m_language_isValid;
}

QDate OAIFormsIndex_attributes::getLastRevisionOn() const {
    return m_last_revision_on;
}
void OAIFormsIndex_attributes::setLastRevisionOn(const QDate &last_revision_on) {
    m_last_revision_on = last_revision_on;
    m_last_revision_on_isSet = true;
}

bool OAIFormsIndex_attributes::is_last_revision_on_Set() const{
    return m_last_revision_on_isSet;
}

bool OAIFormsIndex_attributes::is_last_revision_on_Valid() const{
    return m_last_revision_on_isValid;
}

QDate OAIFormsIndex_attributes::getLastSha256Change() const {
    return m_last_sha256_change;
}
void OAIFormsIndex_attributes::setLastSha256Change(const QDate &last_sha256_change) {
    m_last_sha256_change = last_sha256_change;
    m_last_sha256_change_isSet = true;
}

bool OAIFormsIndex_attributes::is_last_sha256_change_Set() const{
    return m_last_sha256_change_isSet;
}

bool OAIFormsIndex_attributes::is_last_sha256_change_Valid() const{
    return m_last_sha256_change_isValid;
}

qint32 OAIFormsIndex_attributes::getPages() const {
    return m_pages;
}
void OAIFormsIndex_attributes::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIFormsIndex_attributes::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIFormsIndex_attributes::is_pages_Valid() const{
    return m_pages_isValid;
}

QList<QString> OAIFormsIndex_attributes::getRelatedForms() const {
    return m_related_forms;
}
void OAIFormsIndex_attributes::setRelatedForms(const QList<QString> &related_forms) {
    m_related_forms = related_forms;
    m_related_forms_isSet = true;
}

bool OAIFormsIndex_attributes::is_related_forms_Set() const{
    return m_related_forms_isSet;
}

bool OAIFormsIndex_attributes::is_related_forms_Valid() const{
    return m_related_forms_isValid;
}

QString OAIFormsIndex_attributes::getSha256() const {
    return m_sha256;
}
void OAIFormsIndex_attributes::setSha256(const QString &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIFormsIndex_attributes::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIFormsIndex_attributes::is_sha256_Valid() const{
    return m_sha256_isValid;
}

QString OAIFormsIndex_attributes::getTitle() const {
    return m_title;
}
void OAIFormsIndex_attributes::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFormsIndex_attributes::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFormsIndex_attributes::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFormsIndex_attributes::getUrl() const {
    return m_url;
}
void OAIFormsIndex_attributes::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFormsIndex_attributes::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFormsIndex_attributes::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIFormsIndex_attributes::getVaFormAdministration() const {
    return m_va_form_administration;
}
void OAIFormsIndex_attributes::setVaFormAdministration(const QString &va_form_administration) {
    m_va_form_administration = va_form_administration;
    m_va_form_administration_isSet = true;
}

bool OAIFormsIndex_attributes::is_va_form_administration_Set() const{
    return m_va_form_administration_isSet;
}

bool OAIFormsIndex_attributes::is_va_form_administration_Valid() const{
    return m_va_form_administration_isValid;
}

bool OAIFormsIndex_attributes::isValidPdf() const {
    return m_valid_pdf;
}
void OAIFormsIndex_attributes::setValidPdf(const bool &valid_pdf) {
    m_valid_pdf = valid_pdf;
    m_valid_pdf_isSet = true;
}

bool OAIFormsIndex_attributes::is_valid_pdf_Set() const{
    return m_valid_pdf_isSet;
}

bool OAIFormsIndex_attributes::is_valid_pdf_Valid() const{
    return m_valid_pdf_isValid;
}

bool OAIFormsIndex_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefit_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_issued_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_tool_intro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_tool_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_revision_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sha256_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_forms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_va_form_administration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_pdf_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormsIndex_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
