/*
 * VA Forms
 * Use the VA Forms API to search for VA forms, get the form's PDF link and metadata, and check for new versions.  Visit our VA Lighthouse [Contact Us page](https://developer.va.gov/support) for further assistance.  ## Background This API offers an efficient way to stay up-to-date with the latest VA forms and information. The forms information listed on VA.gov matches the information returned by this API. - Search by form number, keyword, or title - Get a link to the form in PDF format - Get detailed form metadata including the number of pages, related forms, benefit categories, language, and more - Retrieve the latest date of PDF changes and the SHA256 checksum - Identify when a form is deleted by the VA  ## Technical summary The VA Forms API collects form data from the official VA Form Repository on a nightly basis.  The Index endpoint can return all available forms or, if an optional query parameter is passed, will return only forms that may relate to the query value. When a valid form name is passed to the Show endpoint, it will return a single form with additional metadata and full revision history. A JSON response is given with the PDF link (if published) and the corresponding form metadata.  ### Authentication and authorization The form information shared by this API is publicly available.  API requests are authorized through a symmetric API token, provided in an HTTP header with name apikey. [Get a sandbox API Key](https://developer.va.gov/apply).  ### Testing in sandbox environment Form data in the sandbox environment is for testing your API only, and is not guaranteed to be up-to-date. This API also has a reduced API rate limit. When you're ready to move to production, be sure to [request a production API key.](https://developer.va.gov/go-live)  ### SHA256 revision history Each form is checked nightly for recent file changes. A corresponding SHA256 checksum is calculated, which provides a record of when the PDF changed and the SHA256 hash that was calculated. This allows end users to know that they have the most recent version and can verify the integrity of a previously downloaded PDF.  ### Valid PDF link Additionally, during the nightly refresh process, the link to the form PDF is verified and the `valid_pdf` metadata is updated accordingly. If marked `true`, the link is valid and is a current form. If marked `false`, the link is either broken or the form has been removed.  ### Deleted forms If the `deleted_at` metadata is set, that means the VA has removed this form from the repository and it is no longer to be used. 
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FormShowAttributesBenefitCategoriesInner;
import org.openapitools.client.model.FormShowAttributesVersionsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormShowAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:29.594604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormShowAttributes {
  public static final String SERIALIZED_NAME_BENEFIT_CATEGORIES = "benefit_categories";
  @SerializedName(SERIALIZED_NAME_BENEFIT_CATEGORIES)
  private List<FormShowAttributesBenefitCategoriesInner> benefitCategories;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_FIRST_ISSUED_ON = "first_issued_on";
  @SerializedName(SERIALIZED_NAME_FIRST_ISSUED_ON)
  private LocalDate firstIssuedOn;

  public static final String SERIALIZED_NAME_FORM_DETAILS_URL = "form_details_url";
  @SerializedName(SERIALIZED_NAME_FORM_DETAILS_URL)
  private String formDetailsUrl;

  public static final String SERIALIZED_NAME_FORM_NAME = "form_name";
  @SerializedName(SERIALIZED_NAME_FORM_NAME)
  private String formName;

  public static final String SERIALIZED_NAME_FORM_TOOL_INTRO = "form_tool_intro";
  @SerializedName(SERIALIZED_NAME_FORM_TOOL_INTRO)
  private String formToolIntro;

  public static final String SERIALIZED_NAME_FORM_TOOL_URL = "form_tool_url";
  @SerializedName(SERIALIZED_NAME_FORM_TOOL_URL)
  private String formToolUrl;

  public static final String SERIALIZED_NAME_FORM_TYPE = "form_type";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private String formType;

  public static final String SERIALIZED_NAME_FORM_USAGE = "form_usage";
  @SerializedName(SERIALIZED_NAME_FORM_USAGE)
  private String formUsage;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_REVISION_ON = "last_revision_on";
  @SerializedName(SERIALIZED_NAME_LAST_REVISION_ON)
  private LocalDate lastRevisionOn;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_RELATED_FORMS = "related_forms";
  @SerializedName(SERIALIZED_NAME_RELATED_FORMS)
  private List<String> relatedForms;

  public static final String SERIALIZED_NAME_SHA256 = "sha256";
  @SerializedName(SERIALIZED_NAME_SHA256)
  private String sha256;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VA_FORM_ADMINISTRATION = "va_form_administration";
  @SerializedName(SERIALIZED_NAME_VA_FORM_ADMINISTRATION)
  private String vaFormAdministration;

  public static final String SERIALIZED_NAME_VALID_PDF = "valid_pdf";
  @SerializedName(SERIALIZED_NAME_VALID_PDF)
  private Boolean validPdf;

  public static final String SERIALIZED_NAME_VERSIONS = "versions";
  @SerializedName(SERIALIZED_NAME_VERSIONS)
  private List<FormShowAttributesVersionsInner> versions;

  public FormShowAttributes() {
  }

  public FormShowAttributes benefitCategories(List<FormShowAttributesBenefitCategoriesInner> benefitCategories) {
    this.benefitCategories = benefitCategories;
    return this;
  }

  public FormShowAttributes addBenefitCategoriesItem(FormShowAttributesBenefitCategoriesInner benefitCategoriesItem) {
    if (this.benefitCategories == null) {
      this.benefitCategories = new ArrayList<>();
    }
    this.benefitCategories.add(benefitCategoriesItem);
    return this;
  }

  /**
   * Listing of benefit categories and match
   * @return benefitCategories
   */
  @javax.annotation.Nullable
  public List<FormShowAttributesBenefitCategoriesInner> getBenefitCategories() {
    return benefitCategories;
  }

  public void setBenefitCategories(List<FormShowAttributesBenefitCategoriesInner> benefitCategories) {
    this.benefitCategories = benefitCategories;
  }


  public FormShowAttributes createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Internal field for VA.gov use
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FormShowAttributes deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * The timestamp at which the form was deleted
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public FormShowAttributes firstIssuedOn(LocalDate firstIssuedOn) {
    this.firstIssuedOn = firstIssuedOn;
    return this;
  }

  /**
   * The date the form first became available
   * @return firstIssuedOn
   */
  @javax.annotation.Nullable
  public LocalDate getFirstIssuedOn() {
    return firstIssuedOn;
  }

  public void setFirstIssuedOn(LocalDate firstIssuedOn) {
    this.firstIssuedOn = firstIssuedOn;
  }


  public FormShowAttributes formDetailsUrl(String formDetailsUrl) {
    this.formDetailsUrl = formDetailsUrl;
    return this;
  }

  /**
   * Location on www.va.gov of the info page for this form
   * @return formDetailsUrl
   */
  @javax.annotation.Nullable
  public String getFormDetailsUrl() {
    return formDetailsUrl;
  }

  public void setFormDetailsUrl(String formDetailsUrl) {
    this.formDetailsUrl = formDetailsUrl;
  }


  public FormShowAttributes formName(String formName) {
    this.formName = formName;
    return this;
  }

  /**
   * Name of the VA Form
   * @return formName
   */
  @javax.annotation.Nullable
  public String getFormName() {
    return formName;
  }

  public void setFormName(String formName) {
    this.formName = formName;
  }


  public FormShowAttributes formToolIntro(String formToolIntro) {
    this.formToolIntro = formToolIntro;
    return this;
  }

  /**
   * Introductory text describing the VA online tool for this form
   * @return formToolIntro
   */
  @javax.annotation.Nullable
  public String getFormToolIntro() {
    return formToolIntro;
  }

  public void setFormToolIntro(String formToolIntro) {
    this.formToolIntro = formToolIntro;
  }


  public FormShowAttributes formToolUrl(String formToolUrl) {
    this.formToolUrl = formToolUrl;
    return this;
  }

  /**
   * Location of the online tool for this form
   * @return formToolUrl
   */
  @javax.annotation.Nullable
  public String getFormToolUrl() {
    return formToolUrl;
  }

  public void setFormToolUrl(String formToolUrl) {
    this.formToolUrl = formToolUrl;
  }


  public FormShowAttributes formType(String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * VA Type of the form
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(String formType) {
    this.formType = formType;
  }


  public FormShowAttributes formUsage(String formUsage) {
    this.formUsage = formUsage;
    return this;
  }

  /**
   * A description of how the form is to be used
   * @return formUsage
   */
  @javax.annotation.Nullable
  public String getFormUsage() {
    return formUsage;
  }

  public void setFormUsage(String formUsage) {
    this.formUsage = formUsage;
  }


  public FormShowAttributes language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Language code of the form
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public FormShowAttributes lastRevisionOn(LocalDate lastRevisionOn) {
    this.lastRevisionOn = lastRevisionOn;
    return this;
  }

  /**
   * The date the form was last updated
   * @return lastRevisionOn
   */
  @javax.annotation.Nullable
  public LocalDate getLastRevisionOn() {
    return lastRevisionOn;
  }

  public void setLastRevisionOn(LocalDate lastRevisionOn) {
    this.lastRevisionOn = lastRevisionOn;
  }


  public FormShowAttributes pages(Integer pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Number of pages contained in the form
   * @return pages
   */
  @javax.annotation.Nullable
  public Integer getPages() {
    return pages;
  }

  public void setPages(Integer pages) {
    this.pages = pages;
  }


  public FormShowAttributes relatedForms(List<String> relatedForms) {
    this.relatedForms = relatedForms;
    return this;
  }

  public FormShowAttributes addRelatedFormsItem(String relatedFormsItem) {
    if (this.relatedForms == null) {
      this.relatedForms = new ArrayList<>();
    }
    this.relatedForms.add(relatedFormsItem);
    return this;
  }

  /**
   * A listing of other forms that relate to current form
   * @return relatedForms
   */
  @javax.annotation.Nullable
  public List<String> getRelatedForms() {
    return relatedForms;
  }

  public void setRelatedForms(List<String> relatedForms) {
    this.relatedForms = relatedForms;
  }


  public FormShowAttributes sha256(String sha256) {
    this.sha256 = sha256;
    return this;
  }

  /**
   * A sha256 hash of the form contents
   * @return sha256
   */
  @javax.annotation.Nullable
  public String getSha256() {
    return sha256;
  }

  public void setSha256(String sha256) {
    this.sha256 = sha256;
  }


  public FormShowAttributes title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the form as given by VA
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public FormShowAttributes url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Web location of the form
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public FormShowAttributes vaFormAdministration(String vaFormAdministration) {
    this.vaFormAdministration = vaFormAdministration;
    return this;
  }

  /**
   * The VA organization that administers the form
   * @return vaFormAdministration
   */
  @javax.annotation.Nullable
  public String getVaFormAdministration() {
    return vaFormAdministration;
  }

  public void setVaFormAdministration(String vaFormAdministration) {
    this.vaFormAdministration = vaFormAdministration;
  }


  public FormShowAttributes validPdf(Boolean validPdf) {
    this.validPdf = validPdf;
    return this;
  }

  /**
   * A flag indicating whether the form url was confirmed as a valid download
   * @return validPdf
   */
  @javax.annotation.Nullable
  public Boolean getValidPdf() {
    return validPdf;
  }

  public void setValidPdf(Boolean validPdf) {
    this.validPdf = validPdf;
  }


  public FormShowAttributes versions(List<FormShowAttributesVersionsInner> versions) {
    this.versions = versions;
    return this;
  }

  public FormShowAttributes addVersionsItem(FormShowAttributesVersionsInner versionsItem) {
    if (this.versions == null) {
      this.versions = new ArrayList<>();
    }
    this.versions.add(versionsItem);
    return this;
  }

  /**
   * The version history of revisions to the form
   * @return versions
   */
  @javax.annotation.Nullable
  public List<FormShowAttributesVersionsInner> getVersions() {
    return versions;
  }

  public void setVersions(List<FormShowAttributesVersionsInner> versions) {
    this.versions = versions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormShowAttributes formShowAttributes = (FormShowAttributes) o;
    return Objects.equals(this.benefitCategories, formShowAttributes.benefitCategories) &&
        Objects.equals(this.createdAt, formShowAttributes.createdAt) &&
        Objects.equals(this.deletedAt, formShowAttributes.deletedAt) &&
        Objects.equals(this.firstIssuedOn, formShowAttributes.firstIssuedOn) &&
        Objects.equals(this.formDetailsUrl, formShowAttributes.formDetailsUrl) &&
        Objects.equals(this.formName, formShowAttributes.formName) &&
        Objects.equals(this.formToolIntro, formShowAttributes.formToolIntro) &&
        Objects.equals(this.formToolUrl, formShowAttributes.formToolUrl) &&
        Objects.equals(this.formType, formShowAttributes.formType) &&
        Objects.equals(this.formUsage, formShowAttributes.formUsage) &&
        Objects.equals(this.language, formShowAttributes.language) &&
        Objects.equals(this.lastRevisionOn, formShowAttributes.lastRevisionOn) &&
        Objects.equals(this.pages, formShowAttributes.pages) &&
        Objects.equals(this.relatedForms, formShowAttributes.relatedForms) &&
        Objects.equals(this.sha256, formShowAttributes.sha256) &&
        Objects.equals(this.title, formShowAttributes.title) &&
        Objects.equals(this.url, formShowAttributes.url) &&
        Objects.equals(this.vaFormAdministration, formShowAttributes.vaFormAdministration) &&
        Objects.equals(this.validPdf, formShowAttributes.validPdf) &&
        Objects.equals(this.versions, formShowAttributes.versions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefitCategories, createdAt, deletedAt, firstIssuedOn, formDetailsUrl, formName, formToolIntro, formToolUrl, formType, formUsage, language, lastRevisionOn, pages, relatedForms, sha256, title, url, vaFormAdministration, validPdf, versions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormShowAttributes {\n");
    sb.append("    benefitCategories: ").append(toIndentedString(benefitCategories)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    firstIssuedOn: ").append(toIndentedString(firstIssuedOn)).append("\n");
    sb.append("    formDetailsUrl: ").append(toIndentedString(formDetailsUrl)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    formToolIntro: ").append(toIndentedString(formToolIntro)).append("\n");
    sb.append("    formToolUrl: ").append(toIndentedString(formToolUrl)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    formUsage: ").append(toIndentedString(formUsage)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastRevisionOn: ").append(toIndentedString(lastRevisionOn)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    relatedForms: ").append(toIndentedString(relatedForms)).append("\n");
    sb.append("    sha256: ").append(toIndentedString(sha256)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vaFormAdministration: ").append(toIndentedString(vaFormAdministration)).append("\n");
    sb.append("    validPdf: ").append(toIndentedString(validPdf)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("benefit_categories");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("first_issued_on");
    openapiFields.add("form_details_url");
    openapiFields.add("form_name");
    openapiFields.add("form_tool_intro");
    openapiFields.add("form_tool_url");
    openapiFields.add("form_type");
    openapiFields.add("form_usage");
    openapiFields.add("language");
    openapiFields.add("last_revision_on");
    openapiFields.add("pages");
    openapiFields.add("related_forms");
    openapiFields.add("sha256");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("va_form_administration");
    openapiFields.add("valid_pdf");
    openapiFields.add("versions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormShowAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormShowAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormShowAttributes is not found in the empty JSON string", FormShowAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormShowAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormShowAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("benefit_categories") != null && !jsonObj.get("benefit_categories").isJsonNull()) {
        JsonArray jsonArraybenefitCategories = jsonObj.getAsJsonArray("benefit_categories");
        if (jsonArraybenefitCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefit_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefit_categories` to be an array in the JSON string but got `%s`", jsonObj.get("benefit_categories").toString()));
          }

          // validate the optional field `benefit_categories` (array)
          for (int i = 0; i < jsonArraybenefitCategories.size(); i++) {
            FormShowAttributesBenefitCategoriesInner.validateJsonElement(jsonArraybenefitCategories.get(i));
          };
        }
      }
      if ((jsonObj.get("form_details_url") != null && !jsonObj.get("form_details_url").isJsonNull()) && !jsonObj.get("form_details_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_details_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_details_url").toString()));
      }
      if ((jsonObj.get("form_name") != null && !jsonObj.get("form_name").isJsonNull()) && !jsonObj.get("form_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_name").toString()));
      }
      if ((jsonObj.get("form_tool_intro") != null && !jsonObj.get("form_tool_intro").isJsonNull()) && !jsonObj.get("form_tool_intro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_tool_intro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_tool_intro").toString()));
      }
      if ((jsonObj.get("form_tool_url") != null && !jsonObj.get("form_tool_url").isJsonNull()) && !jsonObj.get("form_tool_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_tool_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_tool_url").toString()));
      }
      if ((jsonObj.get("form_type") != null && !jsonObj.get("form_type").isJsonNull()) && !jsonObj.get("form_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_type").toString()));
      }
      if ((jsonObj.get("form_usage") != null && !jsonObj.get("form_usage").isJsonNull()) && !jsonObj.get("form_usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("form_usage").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("related_forms") != null && !jsonObj.get("related_forms").isJsonNull() && !jsonObj.get("related_forms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_forms` to be an array in the JSON string but got `%s`", jsonObj.get("related_forms").toString()));
      }
      if ((jsonObj.get("sha256") != null && !jsonObj.get("sha256").isJsonNull()) && !jsonObj.get("sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha256").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("va_form_administration") != null && !jsonObj.get("va_form_administration").isJsonNull()) && !jsonObj.get("va_form_administration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `va_form_administration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("va_form_administration").toString()));
      }
      if (jsonObj.get("versions") != null && !jsonObj.get("versions").isJsonNull()) {
        JsonArray jsonArrayversions = jsonObj.getAsJsonArray("versions");
        if (jsonArrayversions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("versions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `versions` to be an array in the JSON string but got `%s`", jsonObj.get("versions").toString()));
          }

          // validate the optional field `versions` (array)
          for (int i = 0; i < jsonArrayversions.size(); i++) {
            FormShowAttributesVersionsInner.validateJsonElement(jsonArrayversions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormShowAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormShowAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormShowAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormShowAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<FormShowAttributes>() {
           @Override
           public void write(JsonWriter out, FormShowAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormShowAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormShowAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormShowAttributes
   * @throws IOException if the JSON string is invalid with respect to FormShowAttributes
   */
  public static FormShowAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormShowAttributes.class);
  }

  /**
   * Convert an instance of FormShowAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

