# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VeteranStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_date: str=None, first_name: str=None, gender: str=None, last_name: str=None, middle_name: str=None, ssn: str=None):
        """VeteranStatusRequest - a model defined in OpenAPI

        :param birth_date: The birth_date of this VeteranStatusRequest.
        :param first_name: The first_name of this VeteranStatusRequest.
        :param gender: The gender of this VeteranStatusRequest.
        :param last_name: The last_name of this VeteranStatusRequest.
        :param middle_name: The middle_name of this VeteranStatusRequest.
        :param ssn: The ssn of this VeteranStatusRequest.
        """
        self.openapi_types = {
            'birth_date': str,
            'first_name': str,
            'gender': str,
            'last_name': str,
            'middle_name': str,
            'ssn': str
        }

        self.attribute_map = {
            'birth_date': 'birth_date',
            'first_name': 'first_name',
            'gender': 'gender',
            'last_name': 'last_name',
            'middle_name': 'middle_name',
            'ssn': 'ssn'
        }

        self._birth_date = birth_date
        self._first_name = first_name
        self._gender = gender
        self._last_name = last_name
        self._middle_name = middle_name
        self._ssn = ssn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VeteranStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VeteranStatusRequest of this VeteranStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_date(self):
        """Gets the birth_date of this VeteranStatusRequest.

        Birth date for the person of interest in any valid ISO8601 format

        :return: The birth_date of this VeteranStatusRequest.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this VeteranStatusRequest.

        Birth date for the person of interest in any valid ISO8601 format

        :param birth_date: The birth_date of this VeteranStatusRequest.
        :type birth_date: str
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date

    @property
    def first_name(self):
        """Gets the first_name of this VeteranStatusRequest.

        First name for the person of interest

        :return: The first_name of this VeteranStatusRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VeteranStatusRequest.

        First name for the person of interest

        :param first_name: The first_name of this VeteranStatusRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this VeteranStatusRequest.

        Optional gender of M or F for the person of interest

        :return: The gender of this VeteranStatusRequest.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this VeteranStatusRequest.

        Optional gender of M or F for the person of interest

        :param gender: The gender of this VeteranStatusRequest.
        :type gender: str
        """
        allowed_values = ["M", "F"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def last_name(self):
        """Gets the last_name of this VeteranStatusRequest.

        Last name for the person of interest

        :return: The last_name of this VeteranStatusRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VeteranStatusRequest.

        Last name for the person of interest

        :param last_name: The last_name of this VeteranStatusRequest.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this VeteranStatusRequest.

        Optional middle name for the person of interest

        :return: The middle_name of this VeteranStatusRequest.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this VeteranStatusRequest.

        Optional middle name for the person of interest

        :param middle_name: The middle_name of this VeteranStatusRequest.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def ssn(self):
        """Gets the ssn of this VeteranStatusRequest.

        Social Security Number for the person of interest with or without dashes

        :return: The ssn of this VeteranStatusRequest.
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this VeteranStatusRequest.

        Social Security Number for the person of interest with or without dashes

        :param ssn: The ssn of this VeteranStatusRequest.
        :type ssn: str
        """
        if ssn is None:
            raise ValueError("Invalid value for `ssn`, must not be `None`")

        self._ssn = ssn
