/*
 * Veteran Confirmation
 * The Deprecated Veteran Confirmation API allows you to confirm Veteran status for a given person. This can be useful for offering Veterans discounts or other benefits.  The API will only return “Confirmed” or “Not Confirmed”.  ## Quickstart Guide ### 1. Get Access Credentials Get started by filling out the form on the [Apply for VA Lighthouse Developer Access](https://developer.va.gov/apply) page.  After submitting a request, you will receive your credentials for using the API in the Development environment, which allows you to try it out with mock data before moving to the Production environment.  ### 2. Test the API In the endpoint documentation below, we've provided a curl command builder for trying out the API before implementation with your app. Use [Test User](https://github.com/department-of-veterans-affairs/vets-api-clients/blob/master/test_accounts/confirmation_test_accounts.md) attributes to populate the request body.  ### 3. Build your app The base URI for the Veteran Confirmation API in the Sandbox environment is:  https://sandbox-api.va.gov/services/veteran_confirmation/v0  In this environment, use attributes from the list of [Test Users](https://github.com/department-of-veterans-affairs/vets-api-clients/blob/master/test_accounts/confirmation_test_accounts.md). Only Test Users can return a `\"confirmed\"` response.  Check out some of our [sample apps](https://github.com/department-of-veterans-affairs/vets-api-clients). Please visit our VA Lighthouse [Support portal](https://developer.va.gov/support) should you need further assistance.  ### 4. Show us a demo and get access to the Production environment After building your app, we ask that you give us a demo before we set you up with production credentials. Please see the [Path to Production](https://developer.va.gov/go-live) page for more details.  ## Authorization This API requires an API key in combination with identifiable information for the person being confirmed listed below. API requests are authorized through a symmetric API token provided in an HTTP header with name `apikey`. Including more information has a better chance of making a match and returning a Confirmed status. ### Required information: * First Name * Last Name * Date of Birth * Social Security Number  ### Optional information: * Middle Name * Gender  ## Reference ### Sandbox vs. Production Data APIs accessed via the Sandbox environment are using the same underlying logic as VA’s production APIs; only the underlying data store is different.  ### Master Veteran Index (MVI) The Master Veteran Index confirms a user's identity. In Production, several factors are considered to confirm identity. These include: a user’s first name, last name, date of birth and Social Security number. The MVI is mocked in the Sandbox environment. In this environment, the only factor used to confirm identity is the Social Security number.  ### Rate Limiting We implemented basic rate limiting of 60 requests per minute. If you exceed this quota, your request will return a 429 status code. You may petition for increased rate limits by emailing and requests will be decided on a case by case basis.  ### Raw Open API Spec https://api.va.gov/services/veteran_confirmation/docs/v0/api 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Veteran status confirmation for an individual
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:31.094251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VeteranStatusConfirmation {
  /**
   * Whether the system could confirm the Veteran status of an individual based on traits 
   */
  @JsonAdapter(VeteranStatusEnum.Adapter.class)
  public enum VeteranStatusEnum {
    CONFIRMED("confirmed"),
    
    NOT_CONFIRMED("not confirmed");

    private String value;

    VeteranStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VeteranStatusEnum fromValue(String value) {
      for (VeteranStatusEnum b : VeteranStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VeteranStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VeteranStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VeteranStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VeteranStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VeteranStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VETERAN_STATUS = "veteran_status";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VETERAN_STATUS)
  private VeteranStatusEnum veteranStatus;

  public VeteranStatusConfirmation() {
  }

  @Deprecated
  public VeteranStatusConfirmation veteranStatus(VeteranStatusEnum veteranStatus) {
    this.veteranStatus = veteranStatus;
    return this;
  }

  /**
   * Whether the system could confirm the Veteran status of an individual based on traits 
   * @return veteranStatus
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public VeteranStatusEnum getVeteranStatus() {
    return veteranStatus;
  }

  @Deprecated
  public void setVeteranStatus(VeteranStatusEnum veteranStatus) {
    this.veteranStatus = veteranStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VeteranStatusConfirmation veteranStatusConfirmation = (VeteranStatusConfirmation) o;
    return Objects.equals(this.veteranStatus, veteranStatusConfirmation.veteranStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(veteranStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VeteranStatusConfirmation {\n");
    sb.append("    veteranStatus: ").append(toIndentedString(veteranStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("veteran_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VeteranStatusConfirmation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VeteranStatusConfirmation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VeteranStatusConfirmation is not found in the empty JSON string", VeteranStatusConfirmation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VeteranStatusConfirmation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VeteranStatusConfirmation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("veteran_status") != null && !jsonObj.get("veteran_status").isJsonNull()) && !jsonObj.get("veteran_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `veteran_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("veteran_status").toString()));
      }
      // validate the optional field `veteran_status`
      if (jsonObj.get("veteran_status") != null && !jsonObj.get("veteran_status").isJsonNull()) {
        VeteranStatusEnum.validateJsonElement(jsonObj.get("veteran_status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VeteranStatusConfirmation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VeteranStatusConfirmation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VeteranStatusConfirmation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VeteranStatusConfirmation.class));

       return (TypeAdapter<T>) new TypeAdapter<VeteranStatusConfirmation>() {
           @Override
           public void write(JsonWriter out, VeteranStatusConfirmation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VeteranStatusConfirmation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VeteranStatusConfirmation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VeteranStatusConfirmation
   * @throws IOException if the JSON string is invalid with respect to VeteranStatusConfirmation
   */
  public static VeteranStatusConfirmation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VeteranStatusConfirmation.class);
  }

  /**
   * Convert an instance of VeteranStatusConfirmation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

