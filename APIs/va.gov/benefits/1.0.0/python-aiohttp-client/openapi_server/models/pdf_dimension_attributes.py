# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PdfDimensionAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, oversized_pdf: bool=None, width: int=None):
        """PdfDimensionAttributes - a model defined in OpenAPI

        :param height: The height of this PdfDimensionAttributes.
        :param oversized_pdf: The oversized_pdf of this PdfDimensionAttributes.
        :param width: The width of this PdfDimensionAttributes.
        """
        self.openapi_types = {
            'height': int,
            'oversized_pdf': bool,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'oversized_pdf': 'oversized_pdf',
            'width': 'width'
        }

        self._height = height
        self._oversized_pdf = oversized_pdf
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfDimensionAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfDimensionAttributes of this PdfDimensionAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this PdfDimensionAttributes.

        The document height

        :return: The height of this PdfDimensionAttributes.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PdfDimensionAttributes.

        The document height

        :param height: The height of this PdfDimensionAttributes.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def oversized_pdf(self):
        """Gets the oversized_pdf of this PdfDimensionAttributes.

        Indicates if this is an oversized PDF (greater than 21x21)

        :return: The oversized_pdf of this PdfDimensionAttributes.
        :rtype: bool
        """
        return self._oversized_pdf

    @oversized_pdf.setter
    def oversized_pdf(self, oversized_pdf):
        """Sets the oversized_pdf of this PdfDimensionAttributes.

        Indicates if this is an oversized PDF (greater than 21x21)

        :param oversized_pdf: The oversized_pdf of this PdfDimensionAttributes.
        :type oversized_pdf: bool
        """
        if oversized_pdf is None:
            raise ValueError("Invalid value for `oversized_pdf`, must not be `None`")

        self._oversized_pdf = oversized_pdf

    @property
    def width(self):
        """Gets the width of this PdfDimensionAttributes.

        The document width

        :return: The width of this PdfDimensionAttributes.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PdfDimensionAttributes.

        The document width

        :param width: The width of this PdfDimensionAttributes.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
