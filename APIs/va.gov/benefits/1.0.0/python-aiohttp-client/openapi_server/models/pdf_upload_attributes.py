# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pdf_upload_attributes_content import PdfUploadAttributesContent
from openapi_server import util


class PdfUploadAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: PdfUploadAttributesContent=None, total_documents: int=None, total_pages: int=None):
        """PdfUploadAttributes - a model defined in OpenAPI

        :param content: The content of this PdfUploadAttributes.
        :param total_documents: The total_documents of this PdfUploadAttributes.
        :param total_pages: The total_pages of this PdfUploadAttributes.
        """
        self.openapi_types = {
            'content': PdfUploadAttributesContent,
            'total_documents': int,
            'total_pages': int
        }

        self.attribute_map = {
            'content': 'content',
            'total_documents': 'total_documents',
            'total_pages': 'total_pages'
        }

        self._content = content
        self._total_documents = total_documents
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PdfUploadAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PdfUploadAttributes of this PdfUploadAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this PdfUploadAttributes.


        :return: The content of this PdfUploadAttributes.
        :rtype: PdfUploadAttributesContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PdfUploadAttributes.


        :param content: The content of this PdfUploadAttributes.
        :type content: PdfUploadAttributesContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def total_documents(self):
        """Gets the total_documents of this PdfUploadAttributes.

        The total number of documents contained in this upload

        :return: The total_documents of this PdfUploadAttributes.
        :rtype: int
        """
        return self._total_documents

    @total_documents.setter
    def total_documents(self, total_documents):
        """Sets the total_documents of this PdfUploadAttributes.

        The total number of documents contained in this upload

        :param total_documents: The total_documents of this PdfUploadAttributes.
        :type total_documents: int
        """
        if total_documents is None:
            raise ValueError("Invalid value for `total_documents`, must not be `None`")

        self._total_documents = total_documents

    @property
    def total_pages(self):
        """Gets the total_pages of this PdfUploadAttributes.

        The total number of pages contained in this upload

        :return: The total_pages of this PdfUploadAttributes.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PdfUploadAttributes.

        The total number of pages contained in this upload

        :param total_pages: The total_pages of this PdfUploadAttributes.
        :type total_pages: int
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")

        self._total_pages = total_pages
