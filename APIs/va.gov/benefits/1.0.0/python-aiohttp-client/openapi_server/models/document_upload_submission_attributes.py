# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pdf_upload_attributes import PdfUploadAttributes
from openapi_server import util


class DocumentUploadSubmissionAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, detail: str=None, guid: str=None, message: str=None, status: str=None, updated_at: datetime=None, uploaded_pdf: PdfUploadAttributes=None):
        """DocumentUploadSubmissionAttributes - a model defined in OpenAPI

        :param code: The code of this DocumentUploadSubmissionAttributes.
        :param detail: The detail of this DocumentUploadSubmissionAttributes.
        :param guid: The guid of this DocumentUploadSubmissionAttributes.
        :param message: The message of this DocumentUploadSubmissionAttributes.
        :param status: The status of this DocumentUploadSubmissionAttributes.
        :param updated_at: The updated_at of this DocumentUploadSubmissionAttributes.
        :param uploaded_pdf: The uploaded_pdf of this DocumentUploadSubmissionAttributes.
        """
        self.openapi_types = {
            'code': str,
            'detail': str,
            'guid': str,
            'message': str,
            'status': str,
            'updated_at': datetime,
            'uploaded_pdf': PdfUploadAttributes
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'guid': 'guid',
            'message': 'message',
            'status': 'status',
            'updated_at': 'updated_at',
            'uploaded_pdf': 'uploaded_pdf'
        }

        self._code = code
        self._detail = detail
        self._guid = guid
        self._message = message
        self._status = status
        self._updated_at = updated_at
        self._uploaded_pdf = uploaded_pdf

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentUploadSubmissionAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentUploadSubmissionAttributes of this DocumentUploadSubmissionAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this DocumentUploadSubmissionAttributes.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :return: The code of this DocumentUploadSubmissionAttributes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DocumentUploadSubmissionAttributes.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :param code: The code of this DocumentUploadSubmissionAttributes.
        :type code: str
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this DocumentUploadSubmissionAttributes.

        Human readable error detail. Only present if status = \"error\"

        :return: The detail of this DocumentUploadSubmissionAttributes.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this DocumentUploadSubmissionAttributes.

        Human readable error detail. Only present if status = \"error\"

        :param detail: The detail of this DocumentUploadSubmissionAttributes.
        :type detail: str
        """

        self._detail = detail

    @property
    def guid(self):
        """Gets the guid of this DocumentUploadSubmissionAttributes.

        The document upload identifier

        :return: The guid of this DocumentUploadSubmissionAttributes.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this DocumentUploadSubmissionAttributes.

        The document upload identifier

        :param guid: The guid of this DocumentUploadSubmissionAttributes.
        :type guid: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")

        self._guid = guid

    @property
    def message(self):
        """Gets the message of this DocumentUploadSubmissionAttributes.

        Human readable error description. Only present if status = \"error\"

        :return: The message of this DocumentUploadSubmissionAttributes.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DocumentUploadSubmissionAttributes.

        Human readable error description. Only present if status = \"error\"

        :param message: The message of this DocumentUploadSubmissionAttributes.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this DocumentUploadSubmissionAttributes.

        Document upload status. 

        :return: The status of this DocumentUploadSubmissionAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentUploadSubmissionAttributes.

        Document upload status. 

        :param status: The status of this DocumentUploadSubmissionAttributes.
        :type status: str
        """
        allowed_values = ["pending", "uploaded", "received", "processing", "success", "vbms", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this DocumentUploadSubmissionAttributes.

        The last time the submission was updated

        :return: The updated_at of this DocumentUploadSubmissionAttributes.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DocumentUploadSubmissionAttributes.

        The last time the submission was updated

        :param updated_at: The updated_at of this DocumentUploadSubmissionAttributes.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def uploaded_pdf(self):
        """Gets the uploaded_pdf of this DocumentUploadSubmissionAttributes.


        :return: The uploaded_pdf of this DocumentUploadSubmissionAttributes.
        :rtype: PdfUploadAttributes
        """
        return self._uploaded_pdf

    @uploaded_pdf.setter
    def uploaded_pdf(self, uploaded_pdf):
        """Sets the uploaded_pdf of this DocumentUploadSubmissionAttributes.


        :param uploaded_pdf: The uploaded_pdf of this DocumentUploadSubmissionAttributes.
        :type uploaded_pdf: PdfUploadAttributes
        """

        self._uploaded_pdf = uploaded_pdf
