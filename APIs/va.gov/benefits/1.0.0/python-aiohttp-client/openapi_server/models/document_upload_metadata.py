# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DocumentUploadMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_line: str=None, doc_type: str=None, file_number: str=None, source: str=None, veteran_first_name: str=None, veteran_last_name: str=None, zip_code: str=None):
        """DocumentUploadMetadata - a model defined in OpenAPI

        :param business_line: The business_line of this DocumentUploadMetadata.
        :param doc_type: The doc_type of this DocumentUploadMetadata.
        :param file_number: The file_number of this DocumentUploadMetadata.
        :param source: The source of this DocumentUploadMetadata.
        :param veteran_first_name: The veteran_first_name of this DocumentUploadMetadata.
        :param veteran_last_name: The veteran_last_name of this DocumentUploadMetadata.
        :param zip_code: The zip_code of this DocumentUploadMetadata.
        """
        self.openapi_types = {
            'business_line': str,
            'doc_type': str,
            'file_number': str,
            'source': str,
            'veteran_first_name': str,
            'veteran_last_name': str,
            'zip_code': str
        }

        self.attribute_map = {
            'business_line': 'businessLine',
            'doc_type': 'docType',
            'file_number': 'fileNumber',
            'source': 'source',
            'veteran_first_name': 'veteranFirstName',
            'veteran_last_name': 'veteranLastName',
            'zip_code': 'zipCode'
        }

        self._business_line = business_line
        self._doc_type = doc_type
        self._file_number = file_number
        self._source = source
        self._veteran_first_name = veteran_first_name
        self._veteran_last_name = veteran_last_name
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentUploadMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentUploadMetadata of this DocumentUploadMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_line(self):
        """Gets the business_line of this DocumentUploadMetadata.

        Optional parameter (can be missing or empty). The values are:<br><br> CMP - Compensation requests such as those related to disability, unemployment, and pandemic claims<br><br> PMC - Pension requests including survivor’s pension<br><br> INS - Insurance such as life insurance, disability insurance, and other health insurance<br><br> EDU - Education benefits, programs, and affiliations<br><br> VRE - Veteran Readiness & Employment such as employment questionnaires, employment discrimination, employment verification<br><br> BVA - Board of Veteran Appeals<br><br> FID - Fiduciary / financial appointee, including family member benefits<br><br> NCA - National Cemetery Administration<br><br> OTH - Other (this value if used, will be treated as CMP)<br> 

        :return: The business_line of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._business_line

    @business_line.setter
    def business_line(self, business_line):
        """Sets the business_line of this DocumentUploadMetadata.

        Optional parameter (can be missing or empty). The values are:<br><br> CMP - Compensation requests such as those related to disability, unemployment, and pandemic claims<br><br> PMC - Pension requests including survivor’s pension<br><br> INS - Insurance such as life insurance, disability insurance, and other health insurance<br><br> EDU - Education benefits, programs, and affiliations<br><br> VRE - Veteran Readiness & Employment such as employment questionnaires, employment discrimination, employment verification<br><br> BVA - Board of Veteran Appeals<br><br> FID - Fiduciary / financial appointee, including family member benefits<br><br> NCA - National Cemetery Administration<br><br> OTH - Other (this value if used, will be treated as CMP)<br> 

        :param business_line: The business_line of this DocumentUploadMetadata.
        :type business_line: str
        """
        allowed_values = ["CMP", "PMC", "INS", "EDU", "VRE", "BVA", "FID", "NCA", "OTH"]  # noqa: E501
        if business_line not in allowed_values:
            raise ValueError(
                "Invalid value for `business_line` ({0}), must be one of {1}"
                .format(business_line, allowed_values)
            )

        self._business_line = business_line

    @property
    def doc_type(self):
        """Gets the doc_type of this DocumentUploadMetadata.

        VBA form number of the document

        :return: The doc_type of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this DocumentUploadMetadata.

        VBA form number of the document

        :param doc_type: The doc_type of this DocumentUploadMetadata.
        :type doc_type: str
        """

        self._doc_type = doc_type

    @property
    def file_number(self):
        """Gets the file_number of this DocumentUploadMetadata.

        The Veteran's file number is exactly 9 digits with no alpha characters, hyphens, spaces or punctuation. In most cases, this is the Veteran's SSN but may also be an 8 digit BIRL number. If no file number has been established or if it is unknown, the application should use the Veteran's SSN and the file number will be associated with the submission later in the process. Incorrect file numbers can cause delays.

        :return: The file_number of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._file_number

    @file_number.setter
    def file_number(self, file_number):
        """Sets the file_number of this DocumentUploadMetadata.

        The Veteran's file number is exactly 9 digits with no alpha characters, hyphens, spaces or punctuation. In most cases, this is the Veteran's SSN but may also be an 8 digit BIRL number. If no file number has been established or if it is unknown, the application should use the Veteran's SSN and the file number will be associated with the submission later in the process. Incorrect file numbers can cause delays.

        :param file_number: The file_number of this DocumentUploadMetadata.
        :type file_number: str
        """
        if file_number is None:
            raise ValueError("Invalid value for `file_number`, must not be `None`")
        if file_number is not None and not re.search(r'^\d{8,9}$', file_number):
            raise ValueError("Invalid value for `file_number`, must be a follow pattern or equal to `/^\d{8,9}$/`")

        self._file_number = file_number

    @property
    def source(self):
        """Gets the source of this DocumentUploadMetadata.

        System, installation, or entity submitting the document

        :return: The source of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DocumentUploadMetadata.

        System, installation, or entity submitting the document

        :param source: The source of this DocumentUploadMetadata.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def veteran_first_name(self):
        """Gets the veteran_first_name of this DocumentUploadMetadata.

        Veteran first name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.

        :return: The veteran_first_name of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._veteran_first_name

    @veteran_first_name.setter
    def veteran_first_name(self, veteran_first_name):
        """Sets the veteran_first_name of this DocumentUploadMetadata.

        Veteran first name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.

        :param veteran_first_name: The veteran_first_name of this DocumentUploadMetadata.
        :type veteran_first_name: str
        """
        if veteran_first_name is None:
            raise ValueError("Invalid value for `veteran_first_name`, must not be `None`")
        if veteran_first_name is not None and not re.search(r'^[a-zA-Z\-\/\s]{1,50}$', veteran_first_name):
            raise ValueError("Invalid value for `veteran_first_name`, must be a follow pattern or equal to `/^[a-zA-Z\-\/\s]{1,50}$/`")

        self._veteran_first_name = veteran_first_name

    @property
    def veteran_last_name(self):
        """Gets the veteran_last_name of this DocumentUploadMetadata.

        Veteran last name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.

        :return: The veteran_last_name of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._veteran_last_name

    @veteran_last_name.setter
    def veteran_last_name(self, veteran_last_name):
        """Sets the veteran_last_name of this DocumentUploadMetadata.

        Veteran last name. Cannot be missing or empty or longer than 50 characters. Only upper/lower case letters, hyphens(-), spaces and forward-slash(/) allowed.

        :param veteran_last_name: The veteran_last_name of this DocumentUploadMetadata.
        :type veteran_last_name: str
        """
        if veteran_last_name is None:
            raise ValueError("Invalid value for `veteran_last_name`, must not be `None`")
        if veteran_last_name is not None and not re.search(r'^[a-zA-Z\-\/\s]{1,50}$', veteran_last_name):
            raise ValueError("Invalid value for `veteran_last_name`, must be a follow pattern or equal to `/^[a-zA-Z\-\/\s]{1,50}$/`")

        self._veteran_last_name = veteran_last_name

    @property
    def zip_code(self):
        """Gets the zip_code of this DocumentUploadMetadata.

        Veteran zip code. Either five digits (XXXXX) or five digits then four digits separated by a hyphen (XXXXX-XXXX). Use '00000' for Veterans with non-US addresses.

        :return: The zip_code of this DocumentUploadMetadata.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this DocumentUploadMetadata.

        Veteran zip code. Either five digits (XXXXX) or five digits then four digits separated by a hyphen (XXXXX-XXXX). Use '00000' for Veterans with non-US addresses.

        :param zip_code: The zip_code of this DocumentUploadMetadata.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")

        self._zip_code = zip_code
