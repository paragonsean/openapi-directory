# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutBenefitsDocumentUpload500Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, detail: str=None, status: str=None, title: str=None):
        """PutBenefitsDocumentUpload500Response - a model defined in OpenAPI

        :param code: The code of this PutBenefitsDocumentUpload500Response.
        :param detail: The detail of this PutBenefitsDocumentUpload500Response.
        :param status: The status of this PutBenefitsDocumentUpload500Response.
        :param title: The title of this PutBenefitsDocumentUpload500Response.
        """
        self.openapi_types = {
            'code': str,
            'detail': str,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'status': 'status',
            'title': 'title'
        }

        self._code = code
        self._detail = detail
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutBenefitsDocumentUpload500Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The putBenefitsDocumentUpload_500_response of this PutBenefitsDocumentUpload500Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this PutBenefitsDocumentUpload500Response.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :return: The code of this PutBenefitsDocumentUpload500Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PutBenefitsDocumentUpload500Response.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :param code: The code of this PutBenefitsDocumentUpload500Response.
        :type code: str
        """

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this PutBenefitsDocumentUpload500Response.

        Human readable error detail. Only present if status = \"error\"

        :return: The detail of this PutBenefitsDocumentUpload500Response.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this PutBenefitsDocumentUpload500Response.

        Human readable error detail. Only present if status = \"error\"

        :param detail: The detail of this PutBenefitsDocumentUpload500Response.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this PutBenefitsDocumentUpload500Response.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :return: The status of this PutBenefitsDocumentUpload500Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PutBenefitsDocumentUpload500Response.

        Unambiguous status code. Only present if status = \"error\"  * `DOC101` - Invalid multipart payload provided - not a multipart, or missing one or more required parts. * `DOC102` - Invalid metadata - not parseable as JSON, incorrect fields, etc. * `DOC103` - Invalid content - not parseable as PDF. Detail field will indicate which document or attachment part was affected. * `DOC104` - Upload rejected by upstream system. Processing failed and upload must be resubmitted. Detail field will indicate nature of rejection. * `DOC105` - Invalid or unknown id * `DOC106` - File size limit exceeded. Each document may be a maximum of 100MB. * `DOC107` - Empty payload. * `DOC108` - Maximum dimensions exceeded. Height and width must be less than 21 in x 21 in. * `DOC201` - Upload server error. * `DOC202` - Error during processing by upstream system. Processing failed and upload must be resubmitted. Detail field will provide additional details where available. 

        :param status: The status of this PutBenefitsDocumentUpload500Response.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this PutBenefitsDocumentUpload500Response.

        Human readable title description.

        :return: The title of this PutBenefitsDocumentUpload500Response.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PutBenefitsDocumentUpload500Response.

        Human readable title description.

        :param title: The title of this PutBenefitsDocumentUpload500Response.
        :type title: str
        """

        self._title = title
