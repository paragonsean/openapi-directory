/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame::OAIGame(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame::OAIGame() {
    this->initializeModel();
}

OAIGame::~OAIGame() {}

void OAIGame::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_added_by_status_isSet = false;
    m_added_by_status_isValid = false;

    m_background_image_isSet = false;
    m_background_image_isValid = false;

    m_esrb_rating_isSet = false;
    m_esrb_rating_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metacritic_isSet = false;
    m_metacritic_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_playtime_isSet = false;
    m_playtime_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_rating_top_isSet = false;
    m_rating_top_isValid = false;

    m_ratings_isSet = false;
    m_ratings_isValid = false;

    m_ratings_count_isSet = false;
    m_ratings_count_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_reviews_text_count_isSet = false;
    m_reviews_text_count_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_suggestions_count_isSet = false;
    m_suggestions_count_isValid = false;

    m_tba_isSet = false;
    m_tba_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIGame::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_added_by_status_isValid = ::OpenAPI::fromJsonValue(m_added_by_status, json[QString("added_by_status")]);
    m_added_by_status_isSet = !json[QString("added_by_status")].isNull() && m_added_by_status_isValid;

    m_background_image_isValid = ::OpenAPI::fromJsonValue(m_background_image, json[QString("background_image")]);
    m_background_image_isSet = !json[QString("background_image")].isNull() && m_background_image_isValid;

    m_esrb_rating_isValid = ::OpenAPI::fromJsonValue(m_esrb_rating, json[QString("esrb_rating")]);
    m_esrb_rating_isSet = !json[QString("esrb_rating")].isNull() && m_esrb_rating_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metacritic_isValid = ::OpenAPI::fromJsonValue(m_metacritic, json[QString("metacritic")]);
    m_metacritic_isSet = !json[QString("metacritic")].isNull() && m_metacritic_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_playtime_isValid = ::OpenAPI::fromJsonValue(m_playtime, json[QString("playtime")]);
    m_playtime_isSet = !json[QString("playtime")].isNull() && m_playtime_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_rating_top_isValid = ::OpenAPI::fromJsonValue(m_rating_top, json[QString("rating_top")]);
    m_rating_top_isSet = !json[QString("rating_top")].isNull() && m_rating_top_isValid;

    m_ratings_isValid = ::OpenAPI::fromJsonValue(m_ratings, json[QString("ratings")]);
    m_ratings_isSet = !json[QString("ratings")].isNull() && m_ratings_isValid;

    m_ratings_count_isValid = ::OpenAPI::fromJsonValue(m_ratings_count, json[QString("ratings_count")]);
    m_ratings_count_isSet = !json[QString("ratings_count")].isNull() && m_ratings_count_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_reviews_text_count_isValid = ::OpenAPI::fromJsonValue(m_reviews_text_count, json[QString("reviews_text_count")]);
    m_reviews_text_count_isSet = !json[QString("reviews_text_count")].isNull() && m_reviews_text_count_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_suggestions_count_isValid = ::OpenAPI::fromJsonValue(m_suggestions_count, json[QString("suggestions_count")]);
    m_suggestions_count_isSet = !json[QString("suggestions_count")].isNull() && m_suggestions_count_isValid;

    m_tba_isValid = ::OpenAPI::fromJsonValue(m_tba, json[QString("tba")]);
    m_tba_isSet = !json[QString("tba")].isNull() && m_tba_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIGame::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame::asJsonObject() const {
    QJsonObject obj;
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_added_by_status_isSet) {
        obj.insert(QString("added_by_status"), ::OpenAPI::toJsonValue(m_added_by_status));
    }
    if (m_background_image_isSet) {
        obj.insert(QString("background_image"), ::OpenAPI::toJsonValue(m_background_image));
    }
    if (m_esrb_rating.isSet()) {
        obj.insert(QString("esrb_rating"), ::OpenAPI::toJsonValue(m_esrb_rating));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metacritic_isSet) {
        obj.insert(QString("metacritic"), ::OpenAPI::toJsonValue(m_metacritic));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_playtime_isSet) {
        obj.insert(QString("playtime"), ::OpenAPI::toJsonValue(m_playtime));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_rating_top_isSet) {
        obj.insert(QString("rating_top"), ::OpenAPI::toJsonValue(m_rating_top));
    }
    if (m_ratings_isSet) {
        obj.insert(QString("ratings"), ::OpenAPI::toJsonValue(m_ratings));
    }
    if (m_ratings_count_isSet) {
        obj.insert(QString("ratings_count"), ::OpenAPI::toJsonValue(m_ratings_count));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_reviews_text_count_isSet) {
        obj.insert(QString("reviews_text_count"), ::OpenAPI::toJsonValue(m_reviews_text_count));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_suggestions_count_isSet) {
        obj.insert(QString("suggestions_count"), ::OpenAPI::toJsonValue(m_suggestions_count));
    }
    if (m_tba_isSet) {
        obj.insert(QString("tba"), ::OpenAPI::toJsonValue(m_tba));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

qint32 OAIGame::getAdded() const {
    return m_added;
}
void OAIGame::setAdded(const qint32 &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIGame::is_added_Set() const{
    return m_added_isSet;
}

bool OAIGame::is_added_Valid() const{
    return m_added_isValid;
}

OAIObject OAIGame::getAddedByStatus() const {
    return m_added_by_status;
}
void OAIGame::setAddedByStatus(const OAIObject &added_by_status) {
    m_added_by_status = added_by_status;
    m_added_by_status_isSet = true;
}

bool OAIGame::is_added_by_status_Set() const{
    return m_added_by_status_isSet;
}

bool OAIGame::is_added_by_status_Valid() const{
    return m_added_by_status_isValid;
}

QString OAIGame::getBackgroundImage() const {
    return m_background_image;
}
void OAIGame::setBackgroundImage(const QString &background_image) {
    m_background_image = background_image;
    m_background_image_isSet = true;
}

bool OAIGame::is_background_image_Set() const{
    return m_background_image_isSet;
}

bool OAIGame::is_background_image_Valid() const{
    return m_background_image_isValid;
}

OAIGame_esrb_rating OAIGame::getEsrbRating() const {
    return m_esrb_rating;
}
void OAIGame::setEsrbRating(const OAIGame_esrb_rating &esrb_rating) {
    m_esrb_rating = esrb_rating;
    m_esrb_rating_isSet = true;
}

bool OAIGame::is_esrb_rating_Set() const{
    return m_esrb_rating_isSet;
}

bool OAIGame::is_esrb_rating_Valid() const{
    return m_esrb_rating_isValid;
}

qint32 OAIGame::getId() const {
    return m_id;
}
void OAIGame::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGame::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGame::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGame::getMetacritic() const {
    return m_metacritic;
}
void OAIGame::setMetacritic(const qint32 &metacritic) {
    m_metacritic = metacritic;
    m_metacritic_isSet = true;
}

bool OAIGame::is_metacritic_Set() const{
    return m_metacritic_isSet;
}

bool OAIGame::is_metacritic_Valid() const{
    return m_metacritic_isValid;
}

QString OAIGame::getName() const {
    return m_name;
}
void OAIGame::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGame::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGame::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGame_platforms_inner> OAIGame::getPlatforms() const {
    return m_platforms;
}
void OAIGame::setPlatforms(const QList<OAIGame_platforms_inner> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIGame::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIGame::is_platforms_Valid() const{
    return m_platforms_isValid;
}

qint32 OAIGame::getPlaytime() const {
    return m_playtime;
}
void OAIGame::setPlaytime(const qint32 &playtime) {
    m_playtime = playtime;
    m_playtime_isSet = true;
}

bool OAIGame::is_playtime_Set() const{
    return m_playtime_isSet;
}

bool OAIGame::is_playtime_Valid() const{
    return m_playtime_isValid;
}

double OAIGame::getRating() const {
    return m_rating;
}
void OAIGame::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGame::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGame::is_rating_Valid() const{
    return m_rating_isValid;
}

qint32 OAIGame::getRatingTop() const {
    return m_rating_top;
}
void OAIGame::setRatingTop(const qint32 &rating_top) {
    m_rating_top = rating_top;
    m_rating_top_isSet = true;
}

bool OAIGame::is_rating_top_Set() const{
    return m_rating_top_isSet;
}

bool OAIGame::is_rating_top_Valid() const{
    return m_rating_top_isValid;
}

OAIObject OAIGame::getRatings() const {
    return m_ratings;
}
void OAIGame::setRatings(const OAIObject &ratings) {
    m_ratings = ratings;
    m_ratings_isSet = true;
}

bool OAIGame::is_ratings_Set() const{
    return m_ratings_isSet;
}

bool OAIGame::is_ratings_Valid() const{
    return m_ratings_isValid;
}

qint32 OAIGame::getRatingsCount() const {
    return m_ratings_count;
}
void OAIGame::setRatingsCount(const qint32 &ratings_count) {
    m_ratings_count = ratings_count;
    m_ratings_count_isSet = true;
}

bool OAIGame::is_ratings_count_Set() const{
    return m_ratings_count_isSet;
}

bool OAIGame::is_ratings_count_Valid() const{
    return m_ratings_count_isValid;
}

QDate OAIGame::getReleased() const {
    return m_released;
}
void OAIGame::setReleased(const QDate &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIGame::is_released_Set() const{
    return m_released_isSet;
}

bool OAIGame::is_released_Valid() const{
    return m_released_isValid;
}

QString OAIGame::getReviewsTextCount() const {
    return m_reviews_text_count;
}
void OAIGame::setReviewsTextCount(const QString &reviews_text_count) {
    m_reviews_text_count = reviews_text_count;
    m_reviews_text_count_isSet = true;
}

bool OAIGame::is_reviews_text_count_Set() const{
    return m_reviews_text_count_isSet;
}

bool OAIGame::is_reviews_text_count_Valid() const{
    return m_reviews_text_count_isValid;
}

QString OAIGame::getSlug() const {
    return m_slug;
}
void OAIGame::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGame::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGame::is_slug_Valid() const{
    return m_slug_isValid;
}

qint32 OAIGame::getSuggestionsCount() const {
    return m_suggestions_count;
}
void OAIGame::setSuggestionsCount(const qint32 &suggestions_count) {
    m_suggestions_count = suggestions_count;
    m_suggestions_count_isSet = true;
}

bool OAIGame::is_suggestions_count_Set() const{
    return m_suggestions_count_isSet;
}

bool OAIGame::is_suggestions_count_Valid() const{
    return m_suggestions_count_isValid;
}

bool OAIGame::isTba() const {
    return m_tba;
}
void OAIGame::setTba(const bool &tba) {
    m_tba = tba;
    m_tba_isSet = true;
}

bool OAIGame::is_tba_Set() const{
    return m_tba_isSet;
}

bool OAIGame::is_tba_Valid() const{
    return m_tba_isValid;
}

QDateTime OAIGame::getUpdated() const {
    return m_updated;
}
void OAIGame::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGame::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGame::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIGame::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_by_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_esrb_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metacritic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_playtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviews_text_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && true;
}

} // namespace OpenAPI
