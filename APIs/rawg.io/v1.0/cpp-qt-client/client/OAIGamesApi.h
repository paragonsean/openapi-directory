/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGamesApi_H
#define OAI_OAIGamesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGameSingle.h"
#include "OAIGames_development_team_list_200_response.h"
#include "OAIGames_list_200_response.h"
#include "OAIGames_screenshots_list_200_response.h"
#include "OAIGames_stores_list_200_response.h"
#include "OAIMovie.h"
#include "OAIParentAchievement.h"
#include "OAIReddit.h"
#include "OAITwitch.h"
#include "OAIYoutube.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGamesApi : public QObject {
    Q_OBJECT

public:
    OAIGamesApi(const int timeOut = 0);
    ~OAIGamesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesAchievementsRead(const QString &id);

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesAdditionsList(const QString &game_pk, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  ordering QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesDevelopmentTeamList(const QString &game_pk, const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesGameSeriesList(const QString &game_pk, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  search QString [optional]
    * @param[in]  search_precise bool [optional]
    * @param[in]  search_exact bool [optional]
    * @param[in]  parent_platforms QString [optional]
    * @param[in]  platforms QString [optional]
    * @param[in]  stores QString [optional]
    * @param[in]  developers QString [optional]
    * @param[in]  publishers QString [optional]
    * @param[in]  genres QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  creators QString [optional]
    * @param[in]  dates QString [optional]
    * @param[in]  updated QString [optional]
    * @param[in]  platforms_count qint32 [optional]
    * @param[in]  metacritic QString [optional]
    * @param[in]  exclude_collection qint32 [optional]
    * @param[in]  exclude_additions bool [optional]
    * @param[in]  exclude_parents bool [optional]
    * @param[in]  exclude_game_series bool [optional]
    * @param[in]  exclude_stores QString [optional]
    * @param[in]  ordering QString [optional]
    */
    virtual void gamesList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &search_precise = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &search_exact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parent_platforms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &platforms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stores = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &developers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publishers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &genres = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &creators = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &platforms_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &metacritic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &exclude_collection = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &exclude_additions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_parents = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_game_series = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &exclude_stores = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesMoviesRead(const QString &id);

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesParentGamesList(const QString &game_pk, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesRedditRead(const QString &id);

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  ordering QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesScreenshotsList(const QString &game_pk, const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  game_pk QString [required]
    * @param[in]  ordering QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void gamesStoresList(const QString &game_pk, const ::OpenAPI::OptionalParam<QString> &ordering = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesSuggestedRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesTwitchRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void gamesYoutubeRead(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gamesAchievementsReadCallback(OAIHttpRequestWorker *worker);
    void gamesAdditionsListCallback(OAIHttpRequestWorker *worker);
    void gamesDevelopmentTeamListCallback(OAIHttpRequestWorker *worker);
    void gamesGameSeriesListCallback(OAIHttpRequestWorker *worker);
    void gamesListCallback(OAIHttpRequestWorker *worker);
    void gamesMoviesReadCallback(OAIHttpRequestWorker *worker);
    void gamesParentGamesListCallback(OAIHttpRequestWorker *worker);
    void gamesReadCallback(OAIHttpRequestWorker *worker);
    void gamesRedditReadCallback(OAIHttpRequestWorker *worker);
    void gamesScreenshotsListCallback(OAIHttpRequestWorker *worker);
    void gamesStoresListCallback(OAIHttpRequestWorker *worker);
    void gamesSuggestedReadCallback(OAIHttpRequestWorker *worker);
    void gamesTwitchReadCallback(OAIHttpRequestWorker *worker);
    void gamesYoutubeReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gamesAchievementsReadSignal(OAIParentAchievement summary);
    void gamesAdditionsListSignal(OAIGames_list_200_response summary);
    void gamesDevelopmentTeamListSignal(OAIGames_development_team_list_200_response summary);
    void gamesGameSeriesListSignal(OAIGames_list_200_response summary);
    void gamesListSignal(OAIGames_list_200_response summary);
    void gamesMoviesReadSignal(OAIMovie summary);
    void gamesParentGamesListSignal(OAIGames_list_200_response summary);
    void gamesReadSignal(OAIGameSingle summary);
    void gamesRedditReadSignal(OAIReddit summary);
    void gamesScreenshotsListSignal(OAIGames_screenshots_list_200_response summary);
    void gamesStoresListSignal(OAIGames_stores_list_200_response summary);
    void gamesSuggestedReadSignal(OAIGameSingle summary);
    void gamesTwitchReadSignal(OAITwitch summary);
    void gamesYoutubeReadSignal(OAIYoutube summary);


    void gamesAchievementsReadSignalFull(OAIHttpRequestWorker *worker, OAIParentAchievement summary);
    void gamesAdditionsListSignalFull(OAIHttpRequestWorker *worker, OAIGames_list_200_response summary);
    void gamesDevelopmentTeamListSignalFull(OAIHttpRequestWorker *worker, OAIGames_development_team_list_200_response summary);
    void gamesGameSeriesListSignalFull(OAIHttpRequestWorker *worker, OAIGames_list_200_response summary);
    void gamesListSignalFull(OAIHttpRequestWorker *worker, OAIGames_list_200_response summary);
    void gamesMoviesReadSignalFull(OAIHttpRequestWorker *worker, OAIMovie summary);
    void gamesParentGamesListSignalFull(OAIHttpRequestWorker *worker, OAIGames_list_200_response summary);
    void gamesReadSignalFull(OAIHttpRequestWorker *worker, OAIGameSingle summary);
    void gamesRedditReadSignalFull(OAIHttpRequestWorker *worker, OAIReddit summary);
    void gamesScreenshotsListSignalFull(OAIHttpRequestWorker *worker, OAIGames_screenshots_list_200_response summary);
    void gamesStoresListSignalFull(OAIHttpRequestWorker *worker, OAIGames_stores_list_200_response summary);
    void gamesSuggestedReadSignalFull(OAIHttpRequestWorker *worker, OAIGameSingle summary);
    void gamesTwitchReadSignalFull(OAIHttpRequestWorker *worker, OAITwitch summary);
    void gamesYoutubeReadSignalFull(OAIHttpRequestWorker *worker, OAIYoutube summary);

    Q_DECL_DEPRECATED_X("Use gamesAchievementsReadSignalError() instead")
    void gamesAchievementsReadSignalE(OAIParentAchievement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesAchievementsReadSignalError(OAIParentAchievement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesAdditionsListSignalError() instead")
    void gamesAdditionsListSignalE(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesAdditionsListSignalError(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesDevelopmentTeamListSignalError() instead")
    void gamesDevelopmentTeamListSignalE(OAIGames_development_team_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesDevelopmentTeamListSignalError(OAIGames_development_team_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesGameSeriesListSignalError() instead")
    void gamesGameSeriesListSignalE(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesGameSeriesListSignalError(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesListSignalError() instead")
    void gamesListSignalE(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesListSignalError(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesMoviesReadSignalError() instead")
    void gamesMoviesReadSignalE(OAIMovie summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesMoviesReadSignalError(OAIMovie summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesParentGamesListSignalError() instead")
    void gamesParentGamesListSignalE(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesParentGamesListSignalError(OAIGames_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesReadSignalError() instead")
    void gamesReadSignalE(OAIGameSingle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesReadSignalError(OAIGameSingle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesRedditReadSignalError() instead")
    void gamesRedditReadSignalE(OAIReddit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesRedditReadSignalError(OAIReddit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesScreenshotsListSignalError() instead")
    void gamesScreenshotsListSignalE(OAIGames_screenshots_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesScreenshotsListSignalError(OAIGames_screenshots_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesStoresListSignalError() instead")
    void gamesStoresListSignalE(OAIGames_stores_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesStoresListSignalError(OAIGames_stores_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesSuggestedReadSignalError() instead")
    void gamesSuggestedReadSignalE(OAIGameSingle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesSuggestedReadSignalError(OAIGameSingle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesTwitchReadSignalError() instead")
    void gamesTwitchReadSignalE(OAITwitch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesTwitchReadSignalError(OAITwitch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesYoutubeReadSignalError() instead")
    void gamesYoutubeReadSignalE(OAIYoutube summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesYoutubeReadSignalError(OAIYoutube summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gamesAchievementsReadSignalErrorFull() instead")
    void gamesAchievementsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesAchievementsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesAdditionsListSignalErrorFull() instead")
    void gamesAdditionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesAdditionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesDevelopmentTeamListSignalErrorFull() instead")
    void gamesDevelopmentTeamListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesDevelopmentTeamListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesGameSeriesListSignalErrorFull() instead")
    void gamesGameSeriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesGameSeriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesListSignalErrorFull() instead")
    void gamesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesMoviesReadSignalErrorFull() instead")
    void gamesMoviesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesMoviesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesParentGamesListSignalErrorFull() instead")
    void gamesParentGamesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesParentGamesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesReadSignalErrorFull() instead")
    void gamesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesRedditReadSignalErrorFull() instead")
    void gamesRedditReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesRedditReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesScreenshotsListSignalErrorFull() instead")
    void gamesScreenshotsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesScreenshotsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesStoresListSignalErrorFull() instead")
    void gamesStoresListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesStoresListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesSuggestedReadSignalErrorFull() instead")
    void gamesSuggestedReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesSuggestedReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesTwitchReadSignalErrorFull() instead")
    void gamesTwitchReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesTwitchReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gamesYoutubeReadSignalErrorFull() instead")
    void gamesYoutubeReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gamesYoutubeReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
