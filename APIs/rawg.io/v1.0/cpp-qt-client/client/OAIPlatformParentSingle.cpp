/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatformParentSingle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatformParentSingle::OAIPlatformParentSingle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatformParentSingle::OAIPlatformParentSingle() {
    this->initializeModel();
}

OAIPlatformParentSingle::~OAIPlatformParentSingle() {}

void OAIPlatformParentSingle::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;
}

void OAIPlatformParentSingle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlatformParentSingle::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;
}

QString OAIPlatformParentSingle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlatformParentSingle::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    return obj;
}

qint32 OAIPlatformParentSingle::getId() const {
    return m_id;
}
void OAIPlatformParentSingle::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlatformParentSingle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlatformParentSingle::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlatformParentSingle::getName() const {
    return m_name;
}
void OAIPlatformParentSingle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlatformParentSingle::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlatformParentSingle::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPlatform> OAIPlatformParentSingle::getPlatforms() const {
    return m_platforms;
}
void OAIPlatformParentSingle::setPlatforms(const QList<OAIPlatform> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIPlatformParentSingle::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIPlatformParentSingle::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QString OAIPlatformParentSingle::getSlug() const {
    return m_slug;
}
void OAIPlatformParentSingle::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIPlatformParentSingle::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIPlatformParentSingle::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIPlatformParentSingle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlatformParentSingle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_platforms_isValid && true;
}

} // namespace OpenAPI
