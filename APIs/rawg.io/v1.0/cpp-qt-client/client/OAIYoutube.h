/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIYoutube.h
 *
 * 
 */

#ifndef OAIYoutube_H
#define OAIYoutube_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIYoutube : public OAIObject {
public:
    OAIYoutube();
    OAIYoutube(QString json);
    ~OAIYoutube() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelTitle() const;
    void setChannelTitle(const QString &channel_title);
    bool is_channel_title_Set() const;
    bool is_channel_title_Valid() const;

    qint32 getCommentsCount() const;
    void setCommentsCount(const qint32 &comments_count);
    bool is_comments_count_Set() const;
    bool is_comments_count_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getDislikeCount() const;
    void setDislikeCount(const qint32 &dislike_count);
    bool is_dislike_count_Set() const;
    bool is_dislike_count_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    qint32 getFavoriteCount() const;
    void setFavoriteCount(const qint32 &favorite_count);
    bool is_favorite_count_Set() const;
    bool is_favorite_count_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getLikeCount() const;
    void setLikeCount(const qint32 &like_count);
    bool is_like_count_Set() const;
    bool is_like_count_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIObject getThumbnails() const;
    void setThumbnails(const OAIObject &thumbnails);
    bool is_thumbnails_Set() const;
    bool is_thumbnails_Valid() const;

    qint32 getViewCount() const;
    void setViewCount(const qint32 &view_count);
    bool is_view_count_Set() const;
    bool is_view_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_title;
    bool m_channel_title_isSet;
    bool m_channel_title_isValid;

    qint32 m_comments_count;
    bool m_comments_count_isSet;
    bool m_comments_count_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_dislike_count;
    bool m_dislike_count_isSet;
    bool m_dislike_count_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    qint32 m_favorite_count;
    bool m_favorite_count_isSet;
    bool m_favorite_count_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_like_count;
    bool m_like_count_isSet;
    bool m_like_count_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIObject m_thumbnails;
    bool m_thumbnails_isSet;
    bool m_thumbnails_isValid;

    qint32 m_view_count;
    bool m_view_count_isSet;
    bool m_view_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIYoutube)

#endif // OAIYoutube_H
