/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIYoutube.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIYoutube::OAIYoutube(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIYoutube::OAIYoutube() {
    this->initializeModel();
}

OAIYoutube::~OAIYoutube() {}

void OAIYoutube::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_title_isSet = false;
    m_channel_title_isValid = false;

    m_comments_count_isSet = false;
    m_comments_count_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dislike_count_isSet = false;
    m_dislike_count_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_favorite_count_isSet = false;
    m_favorite_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_like_count_isSet = false;
    m_like_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_thumbnails_isSet = false;
    m_thumbnails_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIYoutube::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIYoutube::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_channel_title_isValid = ::OpenAPI::fromJsonValue(m_channel_title, json[QString("channel_title")]);
    m_channel_title_isSet = !json[QString("channel_title")].isNull() && m_channel_title_isValid;

    m_comments_count_isValid = ::OpenAPI::fromJsonValue(m_comments_count, json[QString("comments_count")]);
    m_comments_count_isSet = !json[QString("comments_count")].isNull() && m_comments_count_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dislike_count_isValid = ::OpenAPI::fromJsonValue(m_dislike_count, json[QString("dislike_count")]);
    m_dislike_count_isSet = !json[QString("dislike_count")].isNull() && m_dislike_count_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_favorite_count_isValid = ::OpenAPI::fromJsonValue(m_favorite_count, json[QString("favorite_count")]);
    m_favorite_count_isSet = !json[QString("favorite_count")].isNull() && m_favorite_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_like_count_isValid = ::OpenAPI::fromJsonValue(m_like_count, json[QString("like_count")]);
    m_like_count_isSet = !json[QString("like_count")].isNull() && m_like_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_thumbnails_isValid = ::OpenAPI::fromJsonValue(m_thumbnails, json[QString("thumbnails")]);
    m_thumbnails_isSet = !json[QString("thumbnails")].isNull() && m_thumbnails_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("view_count")]);
    m_view_count_isSet = !json[QString("view_count")].isNull() && m_view_count_isValid;
}

QString OAIYoutube::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIYoutube::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_title_isSet) {
        obj.insert(QString("channel_title"), ::OpenAPI::toJsonValue(m_channel_title));
    }
    if (m_comments_count_isSet) {
        obj.insert(QString("comments_count"), ::OpenAPI::toJsonValue(m_comments_count));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dislike_count_isSet) {
        obj.insert(QString("dislike_count"), ::OpenAPI::toJsonValue(m_dislike_count));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_favorite_count_isSet) {
        obj.insert(QString("favorite_count"), ::OpenAPI::toJsonValue(m_favorite_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_like_count_isSet) {
        obj.insert(QString("like_count"), ::OpenAPI::toJsonValue(m_like_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_thumbnails_isSet) {
        obj.insert(QString("thumbnails"), ::OpenAPI::toJsonValue(m_thumbnails));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("view_count"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

QString OAIYoutube::getChannelId() const {
    return m_channel_id;
}
void OAIYoutube::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIYoutube::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIYoutube::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIYoutube::getChannelTitle() const {
    return m_channel_title;
}
void OAIYoutube::setChannelTitle(const QString &channel_title) {
    m_channel_title = channel_title;
    m_channel_title_isSet = true;
}

bool OAIYoutube::is_channel_title_Set() const{
    return m_channel_title_isSet;
}

bool OAIYoutube::is_channel_title_Valid() const{
    return m_channel_title_isValid;
}

qint32 OAIYoutube::getCommentsCount() const {
    return m_comments_count;
}
void OAIYoutube::setCommentsCount(const qint32 &comments_count) {
    m_comments_count = comments_count;
    m_comments_count_isSet = true;
}

bool OAIYoutube::is_comments_count_Set() const{
    return m_comments_count_isSet;
}

bool OAIYoutube::is_comments_count_Valid() const{
    return m_comments_count_isValid;
}

QDateTime OAIYoutube::getCreated() const {
    return m_created;
}
void OAIYoutube::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIYoutube::is_created_Set() const{
    return m_created_isSet;
}

bool OAIYoutube::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIYoutube::getDescription() const {
    return m_description;
}
void OAIYoutube::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIYoutube::is_description_Set() const{
    return m_description_isSet;
}

bool OAIYoutube::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIYoutube::getDislikeCount() const {
    return m_dislike_count;
}
void OAIYoutube::setDislikeCount(const qint32 &dislike_count) {
    m_dislike_count = dislike_count;
    m_dislike_count_isSet = true;
}

bool OAIYoutube::is_dislike_count_Set() const{
    return m_dislike_count_isSet;
}

bool OAIYoutube::is_dislike_count_Valid() const{
    return m_dislike_count_isValid;
}

QString OAIYoutube::getExternalId() const {
    return m_external_id;
}
void OAIYoutube::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIYoutube::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIYoutube::is_external_id_Valid() const{
    return m_external_id_isValid;
}

qint32 OAIYoutube::getFavoriteCount() const {
    return m_favorite_count;
}
void OAIYoutube::setFavoriteCount(const qint32 &favorite_count) {
    m_favorite_count = favorite_count;
    m_favorite_count_isSet = true;
}

bool OAIYoutube::is_favorite_count_Set() const{
    return m_favorite_count_isSet;
}

bool OAIYoutube::is_favorite_count_Valid() const{
    return m_favorite_count_isValid;
}

qint32 OAIYoutube::getId() const {
    return m_id;
}
void OAIYoutube::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIYoutube::is_id_Set() const{
    return m_id_isSet;
}

bool OAIYoutube::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIYoutube::getLikeCount() const {
    return m_like_count;
}
void OAIYoutube::setLikeCount(const qint32 &like_count) {
    m_like_count = like_count;
    m_like_count_isSet = true;
}

bool OAIYoutube::is_like_count_Set() const{
    return m_like_count_isSet;
}

bool OAIYoutube::is_like_count_Valid() const{
    return m_like_count_isValid;
}

QString OAIYoutube::getName() const {
    return m_name;
}
void OAIYoutube::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIYoutube::is_name_Set() const{
    return m_name_isSet;
}

bool OAIYoutube::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIYoutube::getThumbnails() const {
    return m_thumbnails;
}
void OAIYoutube::setThumbnails(const OAIObject &thumbnails) {
    m_thumbnails = thumbnails;
    m_thumbnails_isSet = true;
}

bool OAIYoutube::is_thumbnails_Set() const{
    return m_thumbnails_isSet;
}

bool OAIYoutube::is_thumbnails_Valid() const{
    return m_thumbnails_isValid;
}

qint32 OAIYoutube::getViewCount() const {
    return m_view_count;
}
void OAIYoutube::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIYoutube::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIYoutube::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIYoutube::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dislike_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_like_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIYoutube::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
