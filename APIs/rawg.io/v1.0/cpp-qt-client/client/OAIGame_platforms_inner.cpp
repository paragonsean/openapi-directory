/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGame_platforms_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGame_platforms_inner::OAIGame_platforms_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGame_platforms_inner::OAIGame_platforms_inner() {
    this->initializeModel();
}

OAIGame_platforms_inner::~OAIGame_platforms_inner() {}

void OAIGame_platforms_inner::initializeModel() {

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_released_at_isSet = false;
    m_released_at_isValid = false;

    m_requirements_isSet = false;
    m_requirements_isValid = false;
}

void OAIGame_platforms_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGame_platforms_inner::fromJsonObject(QJsonObject json) {

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_released_at_isValid = ::OpenAPI::fromJsonValue(m_released_at, json[QString("released_at")]);
    m_released_at_isSet = !json[QString("released_at")].isNull() && m_released_at_isValid;

    m_requirements_isValid = ::OpenAPI::fromJsonValue(m_requirements, json[QString("requirements")]);
    m_requirements_isSet = !json[QString("requirements")].isNull() && m_requirements_isValid;
}

QString OAIGame_platforms_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGame_platforms_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_platform.isSet()) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_released_at_isSet) {
        obj.insert(QString("released_at"), ::OpenAPI::toJsonValue(m_released_at));
    }
    if (m_requirements.isSet()) {
        obj.insert(QString("requirements"), ::OpenAPI::toJsonValue(m_requirements));
    }
    return obj;
}

OAIGame_platforms_inner_platform OAIGame_platforms_inner::getPlatform() const {
    return m_platform;
}
void OAIGame_platforms_inner::setPlatform(const OAIGame_platforms_inner_platform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIGame_platforms_inner::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIGame_platforms_inner::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIGame_platforms_inner::getReleasedAt() const {
    return m_released_at;
}
void OAIGame_platforms_inner::setReleasedAt(const QString &released_at) {
    m_released_at = released_at;
    m_released_at_isSet = true;
}

bool OAIGame_platforms_inner::is_released_at_Set() const{
    return m_released_at_isSet;
}

bool OAIGame_platforms_inner::is_released_at_Valid() const{
    return m_released_at_isValid;
}

OAIGame_platforms_inner_requirements OAIGame_platforms_inner::getRequirements() const {
    return m_requirements;
}
void OAIGame_platforms_inner::setRequirements(const OAIGame_platforms_inner_requirements &requirements) {
    m_requirements = requirements;
    m_requirements_isSet = true;
}

bool OAIGame_platforms_inner::is_requirements_Set() const{
    return m_requirements_isSet;
}

bool OAIGame_platforms_inner::is_requirements_Valid() const{
    return m_requirements_isValid;
}

bool OAIGame_platforms_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requirements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGame_platforms_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
