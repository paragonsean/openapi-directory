/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameSingle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameSingle::OAIGameSingle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameSingle::OAIGameSingle() {
    this->initializeModel();
}

OAIGameSingle::~OAIGameSingle() {}

void OAIGameSingle::initializeModel() {

    m_achievements_count_isSet = false;
    m_achievements_count_isValid = false;

    m_added_isSet = false;
    m_added_isValid = false;

    m_added_by_status_isSet = false;
    m_added_by_status_isValid = false;

    m_additions_count_isSet = false;
    m_additions_count_isValid = false;

    m_alternative_names_isSet = false;
    m_alternative_names_isValid = false;

    m_background_image_isSet = false;
    m_background_image_isValid = false;

    m_background_image_additional_isSet = false;
    m_background_image_additional_isValid = false;

    m_creators_count_isSet = false;
    m_creators_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_esrb_rating_isSet = false;
    m_esrb_rating_isValid = false;

    m_game_series_count_isSet = false;
    m_game_series_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metacritic_isSet = false;
    m_metacritic_isValid = false;

    m_metacritic_platforms_isSet = false;
    m_metacritic_platforms_isValid = false;

    m_metacritic_url_isSet = false;
    m_metacritic_url_isValid = false;

    m_movies_count_isSet = false;
    m_movies_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_original_isSet = false;
    m_name_original_isValid = false;

    m_parent_achievements_count_isSet = false;
    m_parent_achievements_count_isValid = false;

    m_parents_count_isSet = false;
    m_parents_count_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_playtime_isSet = false;
    m_playtime_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_rating_top_isSet = false;
    m_rating_top_isValid = false;

    m_ratings_isSet = false;
    m_ratings_isValid = false;

    m_ratings_count_isSet = false;
    m_ratings_count_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_reddit_count_isSet = false;
    m_reddit_count_isValid = false;

    m_reddit_description_isSet = false;
    m_reddit_description_isValid = false;

    m_reddit_logo_isSet = false;
    m_reddit_logo_isValid = false;

    m_reddit_name_isSet = false;
    m_reddit_name_isValid = false;

    m_reddit_url_isSet = false;
    m_reddit_url_isValid = false;

    m_released_isSet = false;
    m_released_isValid = false;

    m_reviews_text_count_isSet = false;
    m_reviews_text_count_isValid = false;

    m_screenshots_count_isSet = false;
    m_screenshots_count_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_suggestions_count_isSet = false;
    m_suggestions_count_isValid = false;

    m_tba_isSet = false;
    m_tba_isValid = false;

    m_twitch_count_isSet = false;
    m_twitch_count_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;

    m_youtube_count_isSet = false;
    m_youtube_count_isValid = false;
}

void OAIGameSingle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameSingle::fromJsonObject(QJsonObject json) {

    m_achievements_count_isValid = ::OpenAPI::fromJsonValue(m_achievements_count, json[QString("achievements_count")]);
    m_achievements_count_isSet = !json[QString("achievements_count")].isNull() && m_achievements_count_isValid;

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_added_by_status_isValid = ::OpenAPI::fromJsonValue(m_added_by_status, json[QString("added_by_status")]);
    m_added_by_status_isSet = !json[QString("added_by_status")].isNull() && m_added_by_status_isValid;

    m_additions_count_isValid = ::OpenAPI::fromJsonValue(m_additions_count, json[QString("additions_count")]);
    m_additions_count_isSet = !json[QString("additions_count")].isNull() && m_additions_count_isValid;

    m_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_alternative_names, json[QString("alternative_names")]);
    m_alternative_names_isSet = !json[QString("alternative_names")].isNull() && m_alternative_names_isValid;

    m_background_image_isValid = ::OpenAPI::fromJsonValue(m_background_image, json[QString("background_image")]);
    m_background_image_isSet = !json[QString("background_image")].isNull() && m_background_image_isValid;

    m_background_image_additional_isValid = ::OpenAPI::fromJsonValue(m_background_image_additional, json[QString("background_image_additional")]);
    m_background_image_additional_isSet = !json[QString("background_image_additional")].isNull() && m_background_image_additional_isValid;

    m_creators_count_isValid = ::OpenAPI::fromJsonValue(m_creators_count, json[QString("creators_count")]);
    m_creators_count_isSet = !json[QString("creators_count")].isNull() && m_creators_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_esrb_rating_isValid = ::OpenAPI::fromJsonValue(m_esrb_rating, json[QString("esrb_rating")]);
    m_esrb_rating_isSet = !json[QString("esrb_rating")].isNull() && m_esrb_rating_isValid;

    m_game_series_count_isValid = ::OpenAPI::fromJsonValue(m_game_series_count, json[QString("game_series_count")]);
    m_game_series_count_isSet = !json[QString("game_series_count")].isNull() && m_game_series_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metacritic_isValid = ::OpenAPI::fromJsonValue(m_metacritic, json[QString("metacritic")]);
    m_metacritic_isSet = !json[QString("metacritic")].isNull() && m_metacritic_isValid;

    m_metacritic_platforms_isValid = ::OpenAPI::fromJsonValue(m_metacritic_platforms, json[QString("metacritic_platforms")]);
    m_metacritic_platforms_isSet = !json[QString("metacritic_platforms")].isNull() && m_metacritic_platforms_isValid;

    m_metacritic_url_isValid = ::OpenAPI::fromJsonValue(m_metacritic_url, json[QString("metacritic_url")]);
    m_metacritic_url_isSet = !json[QString("metacritic_url")].isNull() && m_metacritic_url_isValid;

    m_movies_count_isValid = ::OpenAPI::fromJsonValue(m_movies_count, json[QString("movies_count")]);
    m_movies_count_isSet = !json[QString("movies_count")].isNull() && m_movies_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_original_isValid = ::OpenAPI::fromJsonValue(m_name_original, json[QString("name_original")]);
    m_name_original_isSet = !json[QString("name_original")].isNull() && m_name_original_isValid;

    m_parent_achievements_count_isValid = ::OpenAPI::fromJsonValue(m_parent_achievements_count, json[QString("parent_achievements_count")]);
    m_parent_achievements_count_isSet = !json[QString("parent_achievements_count")].isNull() && m_parent_achievements_count_isValid;

    m_parents_count_isValid = ::OpenAPI::fromJsonValue(m_parents_count, json[QString("parents_count")]);
    m_parents_count_isSet = !json[QString("parents_count")].isNull() && m_parents_count_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("platforms")]);
    m_platforms_isSet = !json[QString("platforms")].isNull() && m_platforms_isValid;

    m_playtime_isValid = ::OpenAPI::fromJsonValue(m_playtime, json[QString("playtime")]);
    m_playtime_isSet = !json[QString("playtime")].isNull() && m_playtime_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_rating_top_isValid = ::OpenAPI::fromJsonValue(m_rating_top, json[QString("rating_top")]);
    m_rating_top_isSet = !json[QString("rating_top")].isNull() && m_rating_top_isValid;

    m_ratings_isValid = ::OpenAPI::fromJsonValue(m_ratings, json[QString("ratings")]);
    m_ratings_isSet = !json[QString("ratings")].isNull() && m_ratings_isValid;

    m_ratings_count_isValid = ::OpenAPI::fromJsonValue(m_ratings_count, json[QString("ratings_count")]);
    m_ratings_count_isSet = !json[QString("ratings_count")].isNull() && m_ratings_count_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_reddit_count_isValid = ::OpenAPI::fromJsonValue(m_reddit_count, json[QString("reddit_count")]);
    m_reddit_count_isSet = !json[QString("reddit_count")].isNull() && m_reddit_count_isValid;

    m_reddit_description_isValid = ::OpenAPI::fromJsonValue(m_reddit_description, json[QString("reddit_description")]);
    m_reddit_description_isSet = !json[QString("reddit_description")].isNull() && m_reddit_description_isValid;

    m_reddit_logo_isValid = ::OpenAPI::fromJsonValue(m_reddit_logo, json[QString("reddit_logo")]);
    m_reddit_logo_isSet = !json[QString("reddit_logo")].isNull() && m_reddit_logo_isValid;

    m_reddit_name_isValid = ::OpenAPI::fromJsonValue(m_reddit_name, json[QString("reddit_name")]);
    m_reddit_name_isSet = !json[QString("reddit_name")].isNull() && m_reddit_name_isValid;

    m_reddit_url_isValid = ::OpenAPI::fromJsonValue(m_reddit_url, json[QString("reddit_url")]);
    m_reddit_url_isSet = !json[QString("reddit_url")].isNull() && m_reddit_url_isValid;

    m_released_isValid = ::OpenAPI::fromJsonValue(m_released, json[QString("released")]);
    m_released_isSet = !json[QString("released")].isNull() && m_released_isValid;

    m_reviews_text_count_isValid = ::OpenAPI::fromJsonValue(m_reviews_text_count, json[QString("reviews_text_count")]);
    m_reviews_text_count_isSet = !json[QString("reviews_text_count")].isNull() && m_reviews_text_count_isValid;

    m_screenshots_count_isValid = ::OpenAPI::fromJsonValue(m_screenshots_count, json[QString("screenshots_count")]);
    m_screenshots_count_isSet = !json[QString("screenshots_count")].isNull() && m_screenshots_count_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_suggestions_count_isValid = ::OpenAPI::fromJsonValue(m_suggestions_count, json[QString("suggestions_count")]);
    m_suggestions_count_isSet = !json[QString("suggestions_count")].isNull() && m_suggestions_count_isValid;

    m_tba_isValid = ::OpenAPI::fromJsonValue(m_tba, json[QString("tba")]);
    m_tba_isSet = !json[QString("tba")].isNull() && m_tba_isValid;

    m_twitch_count_isValid = ::OpenAPI::fromJsonValue(m_twitch_count, json[QString("twitch_count")]);
    m_twitch_count_isSet = !json[QString("twitch_count")].isNull() && m_twitch_count_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;

    m_youtube_count_isValid = ::OpenAPI::fromJsonValue(m_youtube_count, json[QString("youtube_count")]);
    m_youtube_count_isSet = !json[QString("youtube_count")].isNull() && m_youtube_count_isValid;
}

QString OAIGameSingle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameSingle::asJsonObject() const {
    QJsonObject obj;
    if (m_achievements_count_isSet) {
        obj.insert(QString("achievements_count"), ::OpenAPI::toJsonValue(m_achievements_count));
    }
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_added_by_status_isSet) {
        obj.insert(QString("added_by_status"), ::OpenAPI::toJsonValue(m_added_by_status));
    }
    if (m_additions_count_isSet) {
        obj.insert(QString("additions_count"), ::OpenAPI::toJsonValue(m_additions_count));
    }
    if (m_alternative_names.size() > 0) {
        obj.insert(QString("alternative_names"), ::OpenAPI::toJsonValue(m_alternative_names));
    }
    if (m_background_image_isSet) {
        obj.insert(QString("background_image"), ::OpenAPI::toJsonValue(m_background_image));
    }
    if (m_background_image_additional_isSet) {
        obj.insert(QString("background_image_additional"), ::OpenAPI::toJsonValue(m_background_image_additional));
    }
    if (m_creators_count_isSet) {
        obj.insert(QString("creators_count"), ::OpenAPI::toJsonValue(m_creators_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_esrb_rating.isSet()) {
        obj.insert(QString("esrb_rating"), ::OpenAPI::toJsonValue(m_esrb_rating));
    }
    if (m_game_series_count_isSet) {
        obj.insert(QString("game_series_count"), ::OpenAPI::toJsonValue(m_game_series_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metacritic_isSet) {
        obj.insert(QString("metacritic"), ::OpenAPI::toJsonValue(m_metacritic));
    }
    if (m_metacritic_platforms.size() > 0) {
        obj.insert(QString("metacritic_platforms"), ::OpenAPI::toJsonValue(m_metacritic_platforms));
    }
    if (m_metacritic_url_isSet) {
        obj.insert(QString("metacritic_url"), ::OpenAPI::toJsonValue(m_metacritic_url));
    }
    if (m_movies_count_isSet) {
        obj.insert(QString("movies_count"), ::OpenAPI::toJsonValue(m_movies_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_original_isSet) {
        obj.insert(QString("name_original"), ::OpenAPI::toJsonValue(m_name_original));
    }
    if (m_parent_achievements_count_isSet) {
        obj.insert(QString("parent_achievements_count"), ::OpenAPI::toJsonValue(m_parent_achievements_count));
    }
    if (m_parents_count_isSet) {
        obj.insert(QString("parents_count"), ::OpenAPI::toJsonValue(m_parents_count));
    }
    if (m_platforms.size() > 0) {
        obj.insert(QString("platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_playtime_isSet) {
        obj.insert(QString("playtime"), ::OpenAPI::toJsonValue(m_playtime));
    }
    if (m_rating_isSet) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_rating_top_isSet) {
        obj.insert(QString("rating_top"), ::OpenAPI::toJsonValue(m_rating_top));
    }
    if (m_ratings_isSet) {
        obj.insert(QString("ratings"), ::OpenAPI::toJsonValue(m_ratings));
    }
    if (m_ratings_count_isSet) {
        obj.insert(QString("ratings_count"), ::OpenAPI::toJsonValue(m_ratings_count));
    }
    if (m_reactions_isSet) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_reddit_count_isSet) {
        obj.insert(QString("reddit_count"), ::OpenAPI::toJsonValue(m_reddit_count));
    }
    if (m_reddit_description_isSet) {
        obj.insert(QString("reddit_description"), ::OpenAPI::toJsonValue(m_reddit_description));
    }
    if (m_reddit_logo_isSet) {
        obj.insert(QString("reddit_logo"), ::OpenAPI::toJsonValue(m_reddit_logo));
    }
    if (m_reddit_name_isSet) {
        obj.insert(QString("reddit_name"), ::OpenAPI::toJsonValue(m_reddit_name));
    }
    if (m_reddit_url_isSet) {
        obj.insert(QString("reddit_url"), ::OpenAPI::toJsonValue(m_reddit_url));
    }
    if (m_released_isSet) {
        obj.insert(QString("released"), ::OpenAPI::toJsonValue(m_released));
    }
    if (m_reviews_text_count_isSet) {
        obj.insert(QString("reviews_text_count"), ::OpenAPI::toJsonValue(m_reviews_text_count));
    }
    if (m_screenshots_count_isSet) {
        obj.insert(QString("screenshots_count"), ::OpenAPI::toJsonValue(m_screenshots_count));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_suggestions_count_isSet) {
        obj.insert(QString("suggestions_count"), ::OpenAPI::toJsonValue(m_suggestions_count));
    }
    if (m_tba_isSet) {
        obj.insert(QString("tba"), ::OpenAPI::toJsonValue(m_tba));
    }
    if (m_twitch_count_isSet) {
        obj.insert(QString("twitch_count"), ::OpenAPI::toJsonValue(m_twitch_count));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    if (m_youtube_count_isSet) {
        obj.insert(QString("youtube_count"), ::OpenAPI::toJsonValue(m_youtube_count));
    }
    return obj;
}

qint32 OAIGameSingle::getAchievementsCount() const {
    return m_achievements_count;
}
void OAIGameSingle::setAchievementsCount(const qint32 &achievements_count) {
    m_achievements_count = achievements_count;
    m_achievements_count_isSet = true;
}

bool OAIGameSingle::is_achievements_count_Set() const{
    return m_achievements_count_isSet;
}

bool OAIGameSingle::is_achievements_count_Valid() const{
    return m_achievements_count_isValid;
}

qint32 OAIGameSingle::getAdded() const {
    return m_added;
}
void OAIGameSingle::setAdded(const qint32 &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIGameSingle::is_added_Set() const{
    return m_added_isSet;
}

bool OAIGameSingle::is_added_Valid() const{
    return m_added_isValid;
}

OAIObject OAIGameSingle::getAddedByStatus() const {
    return m_added_by_status;
}
void OAIGameSingle::setAddedByStatus(const OAIObject &added_by_status) {
    m_added_by_status = added_by_status;
    m_added_by_status_isSet = true;
}

bool OAIGameSingle::is_added_by_status_Set() const{
    return m_added_by_status_isSet;
}

bool OAIGameSingle::is_added_by_status_Valid() const{
    return m_added_by_status_isValid;
}

qint32 OAIGameSingle::getAdditionsCount() const {
    return m_additions_count;
}
void OAIGameSingle::setAdditionsCount(const qint32 &additions_count) {
    m_additions_count = additions_count;
    m_additions_count_isSet = true;
}

bool OAIGameSingle::is_additions_count_Set() const{
    return m_additions_count_isSet;
}

bool OAIGameSingle::is_additions_count_Valid() const{
    return m_additions_count_isValid;
}

QList<QString> OAIGameSingle::getAlternativeNames() const {
    return m_alternative_names;
}
void OAIGameSingle::setAlternativeNames(const QList<QString> &alternative_names) {
    m_alternative_names = alternative_names;
    m_alternative_names_isSet = true;
}

bool OAIGameSingle::is_alternative_names_Set() const{
    return m_alternative_names_isSet;
}

bool OAIGameSingle::is_alternative_names_Valid() const{
    return m_alternative_names_isValid;
}

QString OAIGameSingle::getBackgroundImage() const {
    return m_background_image;
}
void OAIGameSingle::setBackgroundImage(const QString &background_image) {
    m_background_image = background_image;
    m_background_image_isSet = true;
}

bool OAIGameSingle::is_background_image_Set() const{
    return m_background_image_isSet;
}

bool OAIGameSingle::is_background_image_Valid() const{
    return m_background_image_isValid;
}

QString OAIGameSingle::getBackgroundImageAdditional() const {
    return m_background_image_additional;
}
void OAIGameSingle::setBackgroundImageAdditional(const QString &background_image_additional) {
    m_background_image_additional = background_image_additional;
    m_background_image_additional_isSet = true;
}

bool OAIGameSingle::is_background_image_additional_Set() const{
    return m_background_image_additional_isSet;
}

bool OAIGameSingle::is_background_image_additional_Valid() const{
    return m_background_image_additional_isValid;
}

qint32 OAIGameSingle::getCreatorsCount() const {
    return m_creators_count;
}
void OAIGameSingle::setCreatorsCount(const qint32 &creators_count) {
    m_creators_count = creators_count;
    m_creators_count_isSet = true;
}

bool OAIGameSingle::is_creators_count_Set() const{
    return m_creators_count_isSet;
}

bool OAIGameSingle::is_creators_count_Valid() const{
    return m_creators_count_isValid;
}

QString OAIGameSingle::getDescription() const {
    return m_description;
}
void OAIGameSingle::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGameSingle::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGameSingle::is_description_Valid() const{
    return m_description_isValid;
}

OAIGame_esrb_rating OAIGameSingle::getEsrbRating() const {
    return m_esrb_rating;
}
void OAIGameSingle::setEsrbRating(const OAIGame_esrb_rating &esrb_rating) {
    m_esrb_rating = esrb_rating;
    m_esrb_rating_isSet = true;
}

bool OAIGameSingle::is_esrb_rating_Set() const{
    return m_esrb_rating_isSet;
}

bool OAIGameSingle::is_esrb_rating_Valid() const{
    return m_esrb_rating_isValid;
}

qint32 OAIGameSingle::getGameSeriesCount() const {
    return m_game_series_count;
}
void OAIGameSingle::setGameSeriesCount(const qint32 &game_series_count) {
    m_game_series_count = game_series_count;
    m_game_series_count_isSet = true;
}

bool OAIGameSingle::is_game_series_count_Set() const{
    return m_game_series_count_isSet;
}

bool OAIGameSingle::is_game_series_count_Valid() const{
    return m_game_series_count_isValid;
}

qint32 OAIGameSingle::getId() const {
    return m_id;
}
void OAIGameSingle::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGameSingle::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGameSingle::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIGameSingle::getMetacritic() const {
    return m_metacritic;
}
void OAIGameSingle::setMetacritic(const qint32 &metacritic) {
    m_metacritic = metacritic;
    m_metacritic_isSet = true;
}

bool OAIGameSingle::is_metacritic_Set() const{
    return m_metacritic_isSet;
}

bool OAIGameSingle::is_metacritic_Valid() const{
    return m_metacritic_isValid;
}

QList<OAIGamePlatformMetacritic> OAIGameSingle::getMetacriticPlatforms() const {
    return m_metacritic_platforms;
}
void OAIGameSingle::setMetacriticPlatforms(const QList<OAIGamePlatformMetacritic> &metacritic_platforms) {
    m_metacritic_platforms = metacritic_platforms;
    m_metacritic_platforms_isSet = true;
}

bool OAIGameSingle::is_metacritic_platforms_Set() const{
    return m_metacritic_platforms_isSet;
}

bool OAIGameSingle::is_metacritic_platforms_Valid() const{
    return m_metacritic_platforms_isValid;
}

QString OAIGameSingle::getMetacriticUrl() const {
    return m_metacritic_url;
}
void OAIGameSingle::setMetacriticUrl(const QString &metacritic_url) {
    m_metacritic_url = metacritic_url;
    m_metacritic_url_isSet = true;
}

bool OAIGameSingle::is_metacritic_url_Set() const{
    return m_metacritic_url_isSet;
}

bool OAIGameSingle::is_metacritic_url_Valid() const{
    return m_metacritic_url_isValid;
}

qint32 OAIGameSingle::getMoviesCount() const {
    return m_movies_count;
}
void OAIGameSingle::setMoviesCount(const qint32 &movies_count) {
    m_movies_count = movies_count;
    m_movies_count_isSet = true;
}

bool OAIGameSingle::is_movies_count_Set() const{
    return m_movies_count_isSet;
}

bool OAIGameSingle::is_movies_count_Valid() const{
    return m_movies_count_isValid;
}

QString OAIGameSingle::getName() const {
    return m_name;
}
void OAIGameSingle::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGameSingle::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGameSingle::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGameSingle::getNameOriginal() const {
    return m_name_original;
}
void OAIGameSingle::setNameOriginal(const QString &name_original) {
    m_name_original = name_original;
    m_name_original_isSet = true;
}

bool OAIGameSingle::is_name_original_Set() const{
    return m_name_original_isSet;
}

bool OAIGameSingle::is_name_original_Valid() const{
    return m_name_original_isValid;
}

QString OAIGameSingle::getParentAchievementsCount() const {
    return m_parent_achievements_count;
}
void OAIGameSingle::setParentAchievementsCount(const QString &parent_achievements_count) {
    m_parent_achievements_count = parent_achievements_count;
    m_parent_achievements_count_isSet = true;
}

bool OAIGameSingle::is_parent_achievements_count_Set() const{
    return m_parent_achievements_count_isSet;
}

bool OAIGameSingle::is_parent_achievements_count_Valid() const{
    return m_parent_achievements_count_isValid;
}

qint32 OAIGameSingle::getParentsCount() const {
    return m_parents_count;
}
void OAIGameSingle::setParentsCount(const qint32 &parents_count) {
    m_parents_count = parents_count;
    m_parents_count_isSet = true;
}

bool OAIGameSingle::is_parents_count_Set() const{
    return m_parents_count_isSet;
}

bool OAIGameSingle::is_parents_count_Valid() const{
    return m_parents_count_isValid;
}

QList<OAIGame_platforms_inner> OAIGameSingle::getPlatforms() const {
    return m_platforms;
}
void OAIGameSingle::setPlatforms(const QList<OAIGame_platforms_inner> &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIGameSingle::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIGameSingle::is_platforms_Valid() const{
    return m_platforms_isValid;
}

qint32 OAIGameSingle::getPlaytime() const {
    return m_playtime;
}
void OAIGameSingle::setPlaytime(const qint32 &playtime) {
    m_playtime = playtime;
    m_playtime_isSet = true;
}

bool OAIGameSingle::is_playtime_Set() const{
    return m_playtime_isSet;
}

bool OAIGameSingle::is_playtime_Valid() const{
    return m_playtime_isValid;
}

double OAIGameSingle::getRating() const {
    return m_rating;
}
void OAIGameSingle::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGameSingle::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGameSingle::is_rating_Valid() const{
    return m_rating_isValid;
}

qint32 OAIGameSingle::getRatingTop() const {
    return m_rating_top;
}
void OAIGameSingle::setRatingTop(const qint32 &rating_top) {
    m_rating_top = rating_top;
    m_rating_top_isSet = true;
}

bool OAIGameSingle::is_rating_top_Set() const{
    return m_rating_top_isSet;
}

bool OAIGameSingle::is_rating_top_Valid() const{
    return m_rating_top_isValid;
}

OAIObject OAIGameSingle::getRatings() const {
    return m_ratings;
}
void OAIGameSingle::setRatings(const OAIObject &ratings) {
    m_ratings = ratings;
    m_ratings_isSet = true;
}

bool OAIGameSingle::is_ratings_Set() const{
    return m_ratings_isSet;
}

bool OAIGameSingle::is_ratings_Valid() const{
    return m_ratings_isValid;
}

qint32 OAIGameSingle::getRatingsCount() const {
    return m_ratings_count;
}
void OAIGameSingle::setRatingsCount(const qint32 &ratings_count) {
    m_ratings_count = ratings_count;
    m_ratings_count_isSet = true;
}

bool OAIGameSingle::is_ratings_count_Set() const{
    return m_ratings_count_isSet;
}

bool OAIGameSingle::is_ratings_count_Valid() const{
    return m_ratings_count_isValid;
}

OAIObject OAIGameSingle::getReactions() const {
    return m_reactions;
}
void OAIGameSingle::setReactions(const OAIObject &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIGameSingle::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIGameSingle::is_reactions_Valid() const{
    return m_reactions_isValid;
}

qint32 OAIGameSingle::getRedditCount() const {
    return m_reddit_count;
}
void OAIGameSingle::setRedditCount(const qint32 &reddit_count) {
    m_reddit_count = reddit_count;
    m_reddit_count_isSet = true;
}

bool OAIGameSingle::is_reddit_count_Set() const{
    return m_reddit_count_isSet;
}

bool OAIGameSingle::is_reddit_count_Valid() const{
    return m_reddit_count_isValid;
}

QString OAIGameSingle::getRedditDescription() const {
    return m_reddit_description;
}
void OAIGameSingle::setRedditDescription(const QString &reddit_description) {
    m_reddit_description = reddit_description;
    m_reddit_description_isSet = true;
}

bool OAIGameSingle::is_reddit_description_Set() const{
    return m_reddit_description_isSet;
}

bool OAIGameSingle::is_reddit_description_Valid() const{
    return m_reddit_description_isValid;
}

QString OAIGameSingle::getRedditLogo() const {
    return m_reddit_logo;
}
void OAIGameSingle::setRedditLogo(const QString &reddit_logo) {
    m_reddit_logo = reddit_logo;
    m_reddit_logo_isSet = true;
}

bool OAIGameSingle::is_reddit_logo_Set() const{
    return m_reddit_logo_isSet;
}

bool OAIGameSingle::is_reddit_logo_Valid() const{
    return m_reddit_logo_isValid;
}

QString OAIGameSingle::getRedditName() const {
    return m_reddit_name;
}
void OAIGameSingle::setRedditName(const QString &reddit_name) {
    m_reddit_name = reddit_name;
    m_reddit_name_isSet = true;
}

bool OAIGameSingle::is_reddit_name_Set() const{
    return m_reddit_name_isSet;
}

bool OAIGameSingle::is_reddit_name_Valid() const{
    return m_reddit_name_isValid;
}

QString OAIGameSingle::getRedditUrl() const {
    return m_reddit_url;
}
void OAIGameSingle::setRedditUrl(const QString &reddit_url) {
    m_reddit_url = reddit_url;
    m_reddit_url_isSet = true;
}

bool OAIGameSingle::is_reddit_url_Set() const{
    return m_reddit_url_isSet;
}

bool OAIGameSingle::is_reddit_url_Valid() const{
    return m_reddit_url_isValid;
}

QDate OAIGameSingle::getReleased() const {
    return m_released;
}
void OAIGameSingle::setReleased(const QDate &released) {
    m_released = released;
    m_released_isSet = true;
}

bool OAIGameSingle::is_released_Set() const{
    return m_released_isSet;
}

bool OAIGameSingle::is_released_Valid() const{
    return m_released_isValid;
}

QString OAIGameSingle::getReviewsTextCount() const {
    return m_reviews_text_count;
}
void OAIGameSingle::setReviewsTextCount(const QString &reviews_text_count) {
    m_reviews_text_count = reviews_text_count;
    m_reviews_text_count_isSet = true;
}

bool OAIGameSingle::is_reviews_text_count_Set() const{
    return m_reviews_text_count_isSet;
}

bool OAIGameSingle::is_reviews_text_count_Valid() const{
    return m_reviews_text_count_isValid;
}

qint32 OAIGameSingle::getScreenshotsCount() const {
    return m_screenshots_count;
}
void OAIGameSingle::setScreenshotsCount(const qint32 &screenshots_count) {
    m_screenshots_count = screenshots_count;
    m_screenshots_count_isSet = true;
}

bool OAIGameSingle::is_screenshots_count_Set() const{
    return m_screenshots_count_isSet;
}

bool OAIGameSingle::is_screenshots_count_Valid() const{
    return m_screenshots_count_isValid;
}

QString OAIGameSingle::getSlug() const {
    return m_slug;
}
void OAIGameSingle::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIGameSingle::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIGameSingle::is_slug_Valid() const{
    return m_slug_isValid;
}

qint32 OAIGameSingle::getSuggestionsCount() const {
    return m_suggestions_count;
}
void OAIGameSingle::setSuggestionsCount(const qint32 &suggestions_count) {
    m_suggestions_count = suggestions_count;
    m_suggestions_count_isSet = true;
}

bool OAIGameSingle::is_suggestions_count_Set() const{
    return m_suggestions_count_isSet;
}

bool OAIGameSingle::is_suggestions_count_Valid() const{
    return m_suggestions_count_isValid;
}

bool OAIGameSingle::isTba() const {
    return m_tba;
}
void OAIGameSingle::setTba(const bool &tba) {
    m_tba = tba;
    m_tba_isSet = true;
}

bool OAIGameSingle::is_tba_Set() const{
    return m_tba_isSet;
}

bool OAIGameSingle::is_tba_Valid() const{
    return m_tba_isValid;
}

QString OAIGameSingle::getTwitchCount() const {
    return m_twitch_count;
}
void OAIGameSingle::setTwitchCount(const QString &twitch_count) {
    m_twitch_count = twitch_count;
    m_twitch_count_isSet = true;
}

bool OAIGameSingle::is_twitch_count_Set() const{
    return m_twitch_count_isSet;
}

bool OAIGameSingle::is_twitch_count_Valid() const{
    return m_twitch_count_isValid;
}

QDateTime OAIGameSingle::getUpdated() const {
    return m_updated;
}
void OAIGameSingle::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIGameSingle::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIGameSingle::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIGameSingle::getWebsite() const {
    return m_website;
}
void OAIGameSingle::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIGameSingle::is_website_Set() const{
    return m_website_isSet;
}

bool OAIGameSingle::is_website_Valid() const{
    return m_website_isValid;
}

QString OAIGameSingle::getYoutubeCount() const {
    return m_youtube_count;
}
void OAIGameSingle::setYoutubeCount(const QString &youtube_count) {
    m_youtube_count = youtube_count;
    m_youtube_count_isSet = true;
}

bool OAIGameSingle::is_youtube_count_Set() const{
    return m_youtube_count_isSet;
}

bool OAIGameSingle::is_youtube_count_Valid() const{
    return m_youtube_count_isValid;
}

bool OAIGameSingle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_achievements_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_by_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_additional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creators_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_esrb_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_game_series_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metacritic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metacritic_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metacritic_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movies_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_achievements_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_playtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratings_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reddit_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reddit_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reddit_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reddit_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reddit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviews_text_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshots_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggestions_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tba_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitch_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameSingle::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rating_isValid && true;
}

} // namespace OpenAPI
