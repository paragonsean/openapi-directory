/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGame.h
 *
 * 
 */

#ifndef OAIGame_H
#define OAIGame_H

#include <QJsonObject>

#include "OAIGame_esrb_rating.h"
#include "OAIGame_platforms_inner.h"
#include "OAIObject.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGame_esrb_rating;
class OAIGame_platforms_inner;

class OAIGame : public OAIObject {
public:
    OAIGame();
    OAIGame(QString json);
    ~OAIGame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAdded() const;
    void setAdded(const qint32 &added);
    bool is_added_Set() const;
    bool is_added_Valid() const;

    OAIObject getAddedByStatus() const;
    void setAddedByStatus(const OAIObject &added_by_status);
    bool is_added_by_status_Set() const;
    bool is_added_by_status_Valid() const;

    QString getBackgroundImage() const;
    void setBackgroundImage(const QString &background_image);
    bool is_background_image_Set() const;
    bool is_background_image_Valid() const;

    OAIGame_esrb_rating getEsrbRating() const;
    void setEsrbRating(const OAIGame_esrb_rating &esrb_rating);
    bool is_esrb_rating_Set() const;
    bool is_esrb_rating_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMetacritic() const;
    void setMetacritic(const qint32 &metacritic);
    bool is_metacritic_Set() const;
    bool is_metacritic_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIGame_platforms_inner> getPlatforms() const;
    void setPlatforms(const QList<OAIGame_platforms_inner> &platforms);
    bool is_platforms_Set() const;
    bool is_platforms_Valid() const;

    qint32 getPlaytime() const;
    void setPlaytime(const qint32 &playtime);
    bool is_playtime_Set() const;
    bool is_playtime_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    qint32 getRatingTop() const;
    void setRatingTop(const qint32 &rating_top);
    bool is_rating_top_Set() const;
    bool is_rating_top_Valid() const;

    OAIObject getRatings() const;
    void setRatings(const OAIObject &ratings);
    bool is_ratings_Set() const;
    bool is_ratings_Valid() const;

    qint32 getRatingsCount() const;
    void setRatingsCount(const qint32 &ratings_count);
    bool is_ratings_count_Set() const;
    bool is_ratings_count_Valid() const;

    QDate getReleased() const;
    void setReleased(const QDate &released);
    bool is_released_Set() const;
    bool is_released_Valid() const;

    QString getReviewsTextCount() const;
    void setReviewsTextCount(const QString &reviews_text_count);
    bool is_reviews_text_count_Set() const;
    bool is_reviews_text_count_Valid() const;

    QString getSlug() const;
    void setSlug(const QString &slug);
    bool is_slug_Set() const;
    bool is_slug_Valid() const;

    qint32 getSuggestionsCount() const;
    void setSuggestionsCount(const qint32 &suggestions_count);
    bool is_suggestions_count_Set() const;
    bool is_suggestions_count_Valid() const;

    bool isTba() const;
    void setTba(const bool &tba);
    bool is_tba_Set() const;
    bool is_tba_Valid() const;

    QDateTime getUpdated() const;
    void setUpdated(const QDateTime &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_added;
    bool m_added_isSet;
    bool m_added_isValid;

    OAIObject m_added_by_status;
    bool m_added_by_status_isSet;
    bool m_added_by_status_isValid;

    QString m_background_image;
    bool m_background_image_isSet;
    bool m_background_image_isValid;

    OAIGame_esrb_rating m_esrb_rating;
    bool m_esrb_rating_isSet;
    bool m_esrb_rating_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_metacritic;
    bool m_metacritic_isSet;
    bool m_metacritic_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIGame_platforms_inner> m_platforms;
    bool m_platforms_isSet;
    bool m_platforms_isValid;

    qint32 m_playtime;
    bool m_playtime_isSet;
    bool m_playtime_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    qint32 m_rating_top;
    bool m_rating_top_isSet;
    bool m_rating_top_isValid;

    OAIObject m_ratings;
    bool m_ratings_isSet;
    bool m_ratings_isValid;

    qint32 m_ratings_count;
    bool m_ratings_count_isSet;
    bool m_ratings_count_isValid;

    QDate m_released;
    bool m_released_isSet;
    bool m_released_isValid;

    QString m_reviews_text_count;
    bool m_reviews_text_count_isSet;
    bool m_reviews_text_count_isValid;

    QString m_slug;
    bool m_slug_isSet;
    bool m_slug_isValid;

    qint32 m_suggestions_count;
    bool m_suggestions_count_isSet;
    bool m_suggestions_count_isValid;

    bool m_tba;
    bool m_tba_isSet;
    bool m_tba_isValid;

    QDateTime m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGame)

#endif // OAIGame_H
