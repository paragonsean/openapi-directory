/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameEsrbRating;
import org.openapitools.client.model.GamePlatformsInner;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Game
 */
public class GameTest {
    private final Game model = new Game();

    /**
     * Model tests for Game
     */
    @Test
    public void testGame() {
        // TODO: test Game
    }

    /**
     * Test the property 'added'
     */
    @Test
    public void addedTest() {
        // TODO: test added
    }

    /**
     * Test the property 'addedByStatus'
     */
    @Test
    public void addedByStatusTest() {
        // TODO: test addedByStatus
    }

    /**
     * Test the property 'backgroundImage'
     */
    @Test
    public void backgroundImageTest() {
        // TODO: test backgroundImage
    }

    /**
     * Test the property 'esrbRating'
     */
    @Test
    public void esrbRatingTest() {
        // TODO: test esrbRating
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'metacritic'
     */
    @Test
    public void metacriticTest() {
        // TODO: test metacritic
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'platforms'
     */
    @Test
    public void platformsTest() {
        // TODO: test platforms
    }

    /**
     * Test the property 'playtime'
     */
    @Test
    public void playtimeTest() {
        // TODO: test playtime
    }

    /**
     * Test the property 'rating'
     */
    @Test
    public void ratingTest() {
        // TODO: test rating
    }

    /**
     * Test the property 'ratingTop'
     */
    @Test
    public void ratingTopTest() {
        // TODO: test ratingTop
    }

    /**
     * Test the property 'ratings'
     */
    @Test
    public void ratingsTest() {
        // TODO: test ratings
    }

    /**
     * Test the property 'ratingsCount'
     */
    @Test
    public void ratingsCountTest() {
        // TODO: test ratingsCount
    }

    /**
     * Test the property 'released'
     */
    @Test
    public void releasedTest() {
        // TODO: test released
    }

    /**
     * Test the property 'reviewsTextCount'
     */
    @Test
    public void reviewsTextCountTest() {
        // TODO: test reviewsTextCount
    }

    /**
     * Test the property 'slug'
     */
    @Test
    public void slugTest() {
        // TODO: test slug
    }

    /**
     * Test the property 'suggestionsCount'
     */
    @Test
    public void suggestionsCountTest() {
        // TODO: test suggestionsCount
    }

    /**
     * Test the property 'tba'
     */
    @Test
    public void tbaTest() {
        // TODO: test tba
    }

    /**
     * Test the property 'updated'
     */
    @Test
    public void updatedTest() {
        // TODO: test updated
    }

}
