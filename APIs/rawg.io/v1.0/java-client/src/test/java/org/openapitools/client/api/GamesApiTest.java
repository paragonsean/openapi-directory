/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GameSingle;
import org.openapitools.client.model.GamesDevelopmentTeamList200Response;
import org.openapitools.client.model.GamesList200Response;
import org.openapitools.client.model.GamesScreenshotsList200Response;
import org.openapitools.client.model.GamesStoresList200Response;
import org.openapitools.client.model.Movie;
import org.openapitools.client.model.ParentAchievement;
import org.openapitools.client.model.Reddit;
import org.openapitools.client.model.Twitch;
import org.openapitools.client.model.Youtube;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GamesApi
 */
@Disabled
public class GamesApiTest {

    private final GamesApi api = new GamesApi();

    /**
     * Get a list of game achievements.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAchievementsReadTest() throws ApiException {
        String id = null;
        ParentAchievement response = api.gamesAchievementsRead(id);
        // TODO: test validations
    }

    /**
     * Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesAdditionsListTest() throws ApiException {
        String gamePk = null;
        Integer page = null;
        Integer pageSize = null;
        GamesList200Response response = api.gamesAdditionsList(gamePk, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get a list of individual creators that were part of the development team.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesDevelopmentTeamListTest() throws ApiException {
        String gamePk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        GamesDevelopmentTeamList200Response response = api.gamesDevelopmentTeamList(gamePk, ordering, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get a list of games that are part of the same series.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesGameSeriesListTest() throws ApiException {
        String gamePk = null;
        Integer page = null;
        Integer pageSize = null;
        GamesList200Response response = api.gamesGameSeriesList(gamePk, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get a list of games.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesListTest() throws ApiException {
        Integer page = null;
        Integer pageSize = null;
        String search = null;
        Boolean searchPrecise = null;
        Boolean searchExact = null;
        String parentPlatforms = null;
        String platforms = null;
        String stores = null;
        String developers = null;
        String publishers = null;
        String genres = null;
        String tags = null;
        String creators = null;
        String dates = null;
        String updated = null;
        Integer platformsCount = null;
        String metacritic = null;
        Integer excludeCollection = null;
        Boolean excludeAdditions = null;
        Boolean excludeParents = null;
        Boolean excludeGameSeries = null;
        String excludeStores = null;
        String ordering = null;
        GamesList200Response response = api.gamesList(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering);
        // TODO: test validations
    }

    /**
     * Get a list of game trailers.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesMoviesReadTest() throws ApiException {
        String id = null;
        Movie response = api.gamesMoviesRead(id);
        // TODO: test validations
    }

    /**
     * Get a list of parent games for DLC&#39;s and editions.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesParentGamesListTest() throws ApiException {
        String gamePk = null;
        Integer page = null;
        Integer pageSize = null;
        GamesList200Response response = api.gamesParentGamesList(gamePk, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get details of the game.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesReadTest() throws ApiException {
        String id = null;
        GameSingle response = api.gamesRead(id);
        // TODO: test validations
    }

    /**
     * Get a list of most recent posts from the game&#39;s subreddit.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesRedditReadTest() throws ApiException {
        String id = null;
        Reddit response = api.gamesRedditRead(id);
        // TODO: test validations
    }

    /**
     * Get screenshots for the game.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesScreenshotsListTest() throws ApiException {
        String gamePk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        GamesScreenshotsList200Response response = api.gamesScreenshotsList(gamePk, ordering, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get links to the stores that sell the game.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesStoresListTest() throws ApiException {
        String gamePk = null;
        String ordering = null;
        Integer page = null;
        Integer pageSize = null;
        GamesStoresList200Response response = api.gamesStoresList(gamePk, ordering, page, pageSize);
        // TODO: test validations
    }

    /**
     * Get a list of visually similar games, available only for business and enterprise API users.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesSuggestedReadTest() throws ApiException {
        String id = null;
        GameSingle response = api.gamesSuggestedRead(id);
        // TODO: test validations
    }

    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesTwitchReadTest() throws ApiException {
        String id = null;
        Twitch response = api.gamesTwitchRead(id);
        // TODO: test validations
    }

    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users.
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gamesYoutubeReadTest() throws ApiException {
        String id = null;
        Youtube response = api.gamesYoutubeRead(id);
        // TODO: test validations
    }

}
