/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameEsrbRating;
import org.openapitools.client.model.GamePlatformsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Game
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.491097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Game {
  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private Integer added;

  public static final String SERIALIZED_NAME_ADDED_BY_STATUS = "added_by_status";
  @SerializedName(SERIALIZED_NAME_ADDED_BY_STATUS)
  private Object addedByStatus;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE = "background_image";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE)
  private URI backgroundImage;

  public static final String SERIALIZED_NAME_ESRB_RATING = "esrb_rating";
  @SerializedName(SERIALIZED_NAME_ESRB_RATING)
  private GameEsrbRating esrbRating;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METACRITIC = "metacritic";
  @SerializedName(SERIALIZED_NAME_METACRITIC)
  private Integer metacritic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private List<GamePlatformsInner> platforms = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYTIME = "playtime";
  @SerializedName(SERIALIZED_NAME_PLAYTIME)
  private Integer playtime;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_RATING_TOP = "rating_top";
  @SerializedName(SERIALIZED_NAME_RATING_TOP)
  private Integer ratingTop;

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private Object ratings;

  public static final String SERIALIZED_NAME_RATINGS_COUNT = "ratings_count";
  @SerializedName(SERIALIZED_NAME_RATINGS_COUNT)
  private Integer ratingsCount;

  public static final String SERIALIZED_NAME_RELEASED = "released";
  @SerializedName(SERIALIZED_NAME_RELEASED)
  private LocalDate released;

  public static final String SERIALIZED_NAME_REVIEWS_TEXT_COUNT = "reviews_text_count";
  @SerializedName(SERIALIZED_NAME_REVIEWS_TEXT_COUNT)
  private String reviewsTextCount;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SUGGESTIONS_COUNT = "suggestions_count";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS_COUNT)
  private Integer suggestionsCount;

  public static final String SERIALIZED_NAME_TBA = "tba";
  @SerializedName(SERIALIZED_NAME_TBA)
  private Boolean tba;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public Game() {
  }

  public Game(
     Integer added, 
     Object addedByStatus, 
     URI backgroundImage, 
     Integer id, 
     Integer metacritic, 
     String name, 
     Integer playtime, 
     Integer ratingTop, 
     Object ratings, 
     Integer ratingsCount, 
     LocalDate released, 
     String reviewsTextCount, 
     String slug, 
     Integer suggestionsCount, 
     Boolean tba, 
     OffsetDateTime updated
  ) {
    this();
    this.added = added;
    this.addedByStatus = addedByStatus;
    this.backgroundImage = backgroundImage;
    this.id = id;
    this.metacritic = metacritic;
    this.name = name;
    this.playtime = playtime;
    this.ratingTop = ratingTop;
    this.ratings = ratings;
    this.ratingsCount = ratingsCount;
    this.released = released;
    this.reviewsTextCount = reviewsTextCount;
    this.slug = slug;
    this.suggestionsCount = suggestionsCount;
    this.tba = tba;
    this.updated = updated;
  }

  /**
   * Get added
   * @return added
   */
  @javax.annotation.Nullable
  public Integer getAdded() {
    return added;
  }



  /**
   * Get addedByStatus
   * @return addedByStatus
   */
  @javax.annotation.Nullable
  public Object getAddedByStatus() {
    return addedByStatus;
  }



  /**
   * Get backgroundImage
   * @return backgroundImage
   */
  @javax.annotation.Nullable
  public URI getBackgroundImage() {
    return backgroundImage;
  }



  public Game esrbRating(GameEsrbRating esrbRating) {
    this.esrbRating = esrbRating;
    return this;
  }

  /**
   * Get esrbRating
   * @return esrbRating
   */
  @javax.annotation.Nullable
  public GameEsrbRating getEsrbRating() {
    return esrbRating;
  }

  public void setEsrbRating(GameEsrbRating esrbRating) {
    this.esrbRating = esrbRating;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get metacritic
   * @return metacritic
   */
  @javax.annotation.Nullable
  public Integer getMetacritic() {
    return metacritic;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Game platforms(List<GamePlatformsInner> platforms) {
    this.platforms = platforms;
    return this;
  }

  public Game addPlatformsItem(GamePlatformsInner platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

  /**
   * Get platforms
   * @return platforms
   */
  @javax.annotation.Nullable
  public List<GamePlatformsInner> getPlatforms() {
    return platforms;
  }

  public void setPlatforms(List<GamePlatformsInner> platforms) {
    this.platforms = platforms;
  }


  /**
   * in hours
   * @return playtime
   */
  @javax.annotation.Nullable
  public Integer getPlaytime() {
    return playtime;
  }



  public Game rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nonnull
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  /**
   * Get ratingTop
   * @return ratingTop
   */
  @javax.annotation.Nullable
  public Integer getRatingTop() {
    return ratingTop;
  }



  /**
   * Get ratings
   * @return ratings
   */
  @javax.annotation.Nullable
  public Object getRatings() {
    return ratings;
  }



  /**
   * Get ratingsCount
   * @return ratingsCount
   */
  @javax.annotation.Nullable
  public Integer getRatingsCount() {
    return ratingsCount;
  }



  /**
   * Get released
   * @return released
   */
  @javax.annotation.Nullable
  public LocalDate getReleased() {
    return released;
  }



  /**
   * Get reviewsTextCount
   * @return reviewsTextCount
   */
  @javax.annotation.Nullable
  public String getReviewsTextCount() {
    return reviewsTextCount;
  }



  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }



  /**
   * Get suggestionsCount
   * @return suggestionsCount
   */
  @javax.annotation.Nullable
  public Integer getSuggestionsCount() {
    return suggestionsCount;
  }



  /**
   * Get tba
   * @return tba
   */
  @javax.annotation.Nullable
  public Boolean getTba() {
    return tba;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Game game = (Game) o;
    return Objects.equals(this.added, game.added) &&
        Objects.equals(this.addedByStatus, game.addedByStatus) &&
        Objects.equals(this.backgroundImage, game.backgroundImage) &&
        Objects.equals(this.esrbRating, game.esrbRating) &&
        Objects.equals(this.id, game.id) &&
        Objects.equals(this.metacritic, game.metacritic) &&
        Objects.equals(this.name, game.name) &&
        Objects.equals(this.platforms, game.platforms) &&
        Objects.equals(this.playtime, game.playtime) &&
        Objects.equals(this.rating, game.rating) &&
        Objects.equals(this.ratingTop, game.ratingTop) &&
        Objects.equals(this.ratings, game.ratings) &&
        Objects.equals(this.ratingsCount, game.ratingsCount) &&
        Objects.equals(this.released, game.released) &&
        Objects.equals(this.reviewsTextCount, game.reviewsTextCount) &&
        Objects.equals(this.slug, game.slug) &&
        Objects.equals(this.suggestionsCount, game.suggestionsCount) &&
        Objects.equals(this.tba, game.tba) &&
        Objects.equals(this.updated, game.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(added, addedByStatus, backgroundImage, esrbRating, id, metacritic, name, platforms, playtime, rating, ratingTop, ratings, ratingsCount, released, reviewsTextCount, slug, suggestionsCount, tba, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Game {\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    addedByStatus: ").append(toIndentedString(addedByStatus)).append("\n");
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    esrbRating: ").append(toIndentedString(esrbRating)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metacritic: ").append(toIndentedString(metacritic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("    playtime: ").append(toIndentedString(playtime)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    ratingTop: ").append(toIndentedString(ratingTop)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    ratingsCount: ").append(toIndentedString(ratingsCount)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    reviewsTextCount: ").append(toIndentedString(reviewsTextCount)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    suggestionsCount: ").append(toIndentedString(suggestionsCount)).append("\n");
    sb.append("    tba: ").append(toIndentedString(tba)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added");
    openapiFields.add("added_by_status");
    openapiFields.add("background_image");
    openapiFields.add("esrb_rating");
    openapiFields.add("id");
    openapiFields.add("metacritic");
    openapiFields.add("name");
    openapiFields.add("platforms");
    openapiFields.add("playtime");
    openapiFields.add("rating");
    openapiFields.add("rating_top");
    openapiFields.add("ratings");
    openapiFields.add("ratings_count");
    openapiFields.add("released");
    openapiFields.add("reviews_text_count");
    openapiFields.add("slug");
    openapiFields.add("suggestions_count");
    openapiFields.add("tba");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rating");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Game
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Game.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Game is not found in the empty JSON string", Game.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Game.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Game` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Game.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("background_image") != null && !jsonObj.get("background_image").isJsonNull()) && !jsonObj.get("background_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_image").toString()));
      }
      // validate the optional field `esrb_rating`
      if (jsonObj.get("esrb_rating") != null && !jsonObj.get("esrb_rating").isJsonNull()) {
        GameEsrbRating.validateJsonElement(jsonObj.get("esrb_rating"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("platforms") != null && !jsonObj.get("platforms").isJsonNull()) {
        JsonArray jsonArrayplatforms = jsonObj.getAsJsonArray("platforms");
        if (jsonArrayplatforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
          }

          // validate the optional field `platforms` (array)
          for (int i = 0; i < jsonArrayplatforms.size(); i++) {
            GamePlatformsInner.validateJsonElement(jsonArrayplatforms.get(i));
          };
        }
      }
      if ((jsonObj.get("reviews_text_count") != null && !jsonObj.get("reviews_text_count").isJsonNull()) && !jsonObj.get("reviews_text_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviews_text_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviews_text_count").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Game.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Game' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Game> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Game.class));

       return (TypeAdapter<T>) new TypeAdapter<Game>() {
           @Override
           public void write(JsonWriter out, Game value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Game read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Game given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Game
   * @throws IOException if the JSON string is invalid with respect to Game
   */
  public static Game fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Game.class);
  }

  /**
   * Convert an instance of Game to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

