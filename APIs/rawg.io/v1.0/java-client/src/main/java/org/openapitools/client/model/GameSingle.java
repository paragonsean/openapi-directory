/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GameEsrbRating;
import org.openapitools.client.model.GamePlatformMetacritic;
import org.openapitools.client.model.GamePlatformsInner;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GameSingle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.491097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GameSingle {
  public static final String SERIALIZED_NAME_ACHIEVEMENTS_COUNT = "achievements_count";
  @SerializedName(SERIALIZED_NAME_ACHIEVEMENTS_COUNT)
  private Integer achievementsCount;

  public static final String SERIALIZED_NAME_ADDED = "added";
  @SerializedName(SERIALIZED_NAME_ADDED)
  private Integer added;

  public static final String SERIALIZED_NAME_ADDED_BY_STATUS = "added_by_status";
  @SerializedName(SERIALIZED_NAME_ADDED_BY_STATUS)
  private Object addedByStatus;

  public static final String SERIALIZED_NAME_ADDITIONS_COUNT = "additions_count";
  @SerializedName(SERIALIZED_NAME_ADDITIONS_COUNT)
  private Integer additionsCount;

  public static final String SERIALIZED_NAME_ALTERNATIVE_NAMES = "alternative_names";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_NAMES)
  private List<String> alternativeNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE = "background_image";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE)
  private URI backgroundImage;

  public static final String SERIALIZED_NAME_BACKGROUND_IMAGE_ADDITIONAL = "background_image_additional";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_IMAGE_ADDITIONAL)
  private String backgroundImageAdditional;

  public static final String SERIALIZED_NAME_CREATORS_COUNT = "creators_count";
  @SerializedName(SERIALIZED_NAME_CREATORS_COUNT)
  private Integer creatorsCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESRB_RATING = "esrb_rating";
  @SerializedName(SERIALIZED_NAME_ESRB_RATING)
  private GameEsrbRating esrbRating;

  public static final String SERIALIZED_NAME_GAME_SERIES_COUNT = "game_series_count";
  @SerializedName(SERIALIZED_NAME_GAME_SERIES_COUNT)
  private Integer gameSeriesCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_METACRITIC = "metacritic";
  @SerializedName(SERIALIZED_NAME_METACRITIC)
  private Integer metacritic;

  public static final String SERIALIZED_NAME_METACRITIC_PLATFORMS = "metacritic_platforms";
  @SerializedName(SERIALIZED_NAME_METACRITIC_PLATFORMS)
  private List<GamePlatformMetacritic> metacriticPlatforms = new ArrayList<>();

  public static final String SERIALIZED_NAME_METACRITIC_URL = "metacritic_url";
  @SerializedName(SERIALIZED_NAME_METACRITIC_URL)
  private String metacriticUrl;

  public static final String SERIALIZED_NAME_MOVIES_COUNT = "movies_count";
  @SerializedName(SERIALIZED_NAME_MOVIES_COUNT)
  private Integer moviesCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_ORIGINAL = "name_original";
  @SerializedName(SERIALIZED_NAME_NAME_ORIGINAL)
  private String nameOriginal;

  public static final String SERIALIZED_NAME_PARENT_ACHIEVEMENTS_COUNT = "parent_achievements_count";
  @SerializedName(SERIALIZED_NAME_PARENT_ACHIEVEMENTS_COUNT)
  private String parentAchievementsCount;

  public static final String SERIALIZED_NAME_PARENTS_COUNT = "parents_count";
  @SerializedName(SERIALIZED_NAME_PARENTS_COUNT)
  private Integer parentsCount;

  public static final String SERIALIZED_NAME_PLATFORMS = "platforms";
  @SerializedName(SERIALIZED_NAME_PLATFORMS)
  private List<GamePlatformsInner> platforms = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLAYTIME = "playtime";
  @SerializedName(SERIALIZED_NAME_PLAYTIME)
  private Integer playtime;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private BigDecimal rating;

  public static final String SERIALIZED_NAME_RATING_TOP = "rating_top";
  @SerializedName(SERIALIZED_NAME_RATING_TOP)
  private Integer ratingTop;

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private Object ratings;

  public static final String SERIALIZED_NAME_RATINGS_COUNT = "ratings_count";
  @SerializedName(SERIALIZED_NAME_RATINGS_COUNT)
  private Integer ratingsCount;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private Object reactions;

  public static final String SERIALIZED_NAME_REDDIT_COUNT = "reddit_count";
  @SerializedName(SERIALIZED_NAME_REDDIT_COUNT)
  private Integer redditCount;

  public static final String SERIALIZED_NAME_REDDIT_DESCRIPTION = "reddit_description";
  @SerializedName(SERIALIZED_NAME_REDDIT_DESCRIPTION)
  private String redditDescription;

  public static final String SERIALIZED_NAME_REDDIT_LOGO = "reddit_logo";
  @SerializedName(SERIALIZED_NAME_REDDIT_LOGO)
  private URI redditLogo;

  public static final String SERIALIZED_NAME_REDDIT_NAME = "reddit_name";
  @SerializedName(SERIALIZED_NAME_REDDIT_NAME)
  private String redditName;

  public static final String SERIALIZED_NAME_REDDIT_URL = "reddit_url";
  @SerializedName(SERIALIZED_NAME_REDDIT_URL)
  private String redditUrl;

  public static final String SERIALIZED_NAME_RELEASED = "released";
  @SerializedName(SERIALIZED_NAME_RELEASED)
  private LocalDate released;

  public static final String SERIALIZED_NAME_REVIEWS_TEXT_COUNT = "reviews_text_count";
  @SerializedName(SERIALIZED_NAME_REVIEWS_TEXT_COUNT)
  private String reviewsTextCount;

  public static final String SERIALIZED_NAME_SCREENSHOTS_COUNT = "screenshots_count";
  @SerializedName(SERIALIZED_NAME_SCREENSHOTS_COUNT)
  private Integer screenshotsCount;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SUGGESTIONS_COUNT = "suggestions_count";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS_COUNT)
  private Integer suggestionsCount;

  public static final String SERIALIZED_NAME_TBA = "tba";
  @SerializedName(SERIALIZED_NAME_TBA)
  private Boolean tba;

  public static final String SERIALIZED_NAME_TWITCH_COUNT = "twitch_count";
  @SerializedName(SERIALIZED_NAME_TWITCH_COUNT)
  private String twitchCount;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private URI website;

  public static final String SERIALIZED_NAME_YOUTUBE_COUNT = "youtube_count";
  @SerializedName(SERIALIZED_NAME_YOUTUBE_COUNT)
  private String youtubeCount;

  public GameSingle() {
  }

  public GameSingle(
     Integer achievementsCount, 
     Integer added, 
     Object addedByStatus, 
     Integer additionsCount, 
     List<String> alternativeNames, 
     URI backgroundImage, 
     String backgroundImageAdditional, 
     Integer creatorsCount, 
     String description, 
     Integer gameSeriesCount, 
     Integer id, 
     Integer metacritic, 
     List<GamePlatformMetacritic> metacriticPlatforms, 
     String metacriticUrl, 
     Integer moviesCount, 
     String name, 
     String nameOriginal, 
     String parentAchievementsCount, 
     Integer parentsCount, 
     Integer playtime, 
     Integer ratingTop, 
     Object ratings, 
     Integer ratingsCount, 
     Object reactions, 
     Integer redditCount, 
     String redditDescription, 
     URI redditLogo, 
     String redditName, 
     String redditUrl, 
     LocalDate released, 
     String reviewsTextCount, 
     Integer screenshotsCount, 
     String slug, 
     Integer suggestionsCount, 
     Boolean tba, 
     String twitchCount, 
     OffsetDateTime updated, 
     URI website, 
     String youtubeCount
  ) {
    this();
    this.achievementsCount = achievementsCount;
    this.added = added;
    this.addedByStatus = addedByStatus;
    this.additionsCount = additionsCount;
    this.alternativeNames = alternativeNames;
    this.backgroundImage = backgroundImage;
    this.backgroundImageAdditional = backgroundImageAdditional;
    this.creatorsCount = creatorsCount;
    this.description = description;
    this.gameSeriesCount = gameSeriesCount;
    this.id = id;
    this.metacritic = metacritic;
    this.metacriticPlatforms = metacriticPlatforms;
    this.metacriticUrl = metacriticUrl;
    this.moviesCount = moviesCount;
    this.name = name;
    this.nameOriginal = nameOriginal;
    this.parentAchievementsCount = parentAchievementsCount;
    this.parentsCount = parentsCount;
    this.playtime = playtime;
    this.ratingTop = ratingTop;
    this.ratings = ratings;
    this.ratingsCount = ratingsCount;
    this.reactions = reactions;
    this.redditCount = redditCount;
    this.redditDescription = redditDescription;
    this.redditLogo = redditLogo;
    this.redditName = redditName;
    this.redditUrl = redditUrl;
    this.released = released;
    this.reviewsTextCount = reviewsTextCount;
    this.screenshotsCount = screenshotsCount;
    this.slug = slug;
    this.suggestionsCount = suggestionsCount;
    this.tba = tba;
    this.twitchCount = twitchCount;
    this.updated = updated;
    this.website = website;
    this.youtubeCount = youtubeCount;
  }

  /**
   * Get achievementsCount
   * @return achievementsCount
   */
  @javax.annotation.Nullable
  public Integer getAchievementsCount() {
    return achievementsCount;
  }



  /**
   * Get added
   * @return added
   */
  @javax.annotation.Nullable
  public Integer getAdded() {
    return added;
  }



  /**
   * Get addedByStatus
   * @return addedByStatus
   */
  @javax.annotation.Nullable
  public Object getAddedByStatus() {
    return addedByStatus;
  }



  /**
   * Get additionsCount
   * @return additionsCount
   */
  @javax.annotation.Nullable
  public Integer getAdditionsCount() {
    return additionsCount;
  }



  /**
   * Get alternativeNames
   * @return alternativeNames
   */
  @javax.annotation.Nullable
  public List<String> getAlternativeNames() {
    return alternativeNames;
  }



  /**
   * Get backgroundImage
   * @return backgroundImage
   */
  @javax.annotation.Nullable
  public URI getBackgroundImage() {
    return backgroundImage;
  }



  /**
   * Get backgroundImageAdditional
   * @return backgroundImageAdditional
   */
  @javax.annotation.Nullable
  public String getBackgroundImageAdditional() {
    return backgroundImageAdditional;
  }



  /**
   * Get creatorsCount
   * @return creatorsCount
   */
  @javax.annotation.Nullable
  public Integer getCreatorsCount() {
    return creatorsCount;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public GameSingle esrbRating(GameEsrbRating esrbRating) {
    this.esrbRating = esrbRating;
    return this;
  }

  /**
   * Get esrbRating
   * @return esrbRating
   */
  @javax.annotation.Nullable
  public GameEsrbRating getEsrbRating() {
    return esrbRating;
  }

  public void setEsrbRating(GameEsrbRating esrbRating) {
    this.esrbRating = esrbRating;
  }


  /**
   * Get gameSeriesCount
   * @return gameSeriesCount
   */
  @javax.annotation.Nullable
  public Integer getGameSeriesCount() {
    return gameSeriesCount;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get metacritic
   * @return metacritic
   */
  @javax.annotation.Nullable
  public Integer getMetacritic() {
    return metacritic;
  }



  /**
   * Get metacriticPlatforms
   * @return metacriticPlatforms
   */
  @javax.annotation.Nullable
  public List<GamePlatformMetacritic> getMetacriticPlatforms() {
    return metacriticPlatforms;
  }



  /**
   * For example \&quot;http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\&quot;
   * @return metacriticUrl
   */
  @javax.annotation.Nullable
  public String getMetacriticUrl() {
    return metacriticUrl;
  }



  /**
   * Get moviesCount
   * @return moviesCount
   */
  @javax.annotation.Nullable
  public Integer getMoviesCount() {
    return moviesCount;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get nameOriginal
   * @return nameOriginal
   */
  @javax.annotation.Nullable
  public String getNameOriginal() {
    return nameOriginal;
  }



  /**
   * Get parentAchievementsCount
   * @return parentAchievementsCount
   */
  @javax.annotation.Nullable
  public String getParentAchievementsCount() {
    return parentAchievementsCount;
  }



  /**
   * Get parentsCount
   * @return parentsCount
   */
  @javax.annotation.Nullable
  public Integer getParentsCount() {
    return parentsCount;
  }



  public GameSingle platforms(List<GamePlatformsInner> platforms) {
    this.platforms = platforms;
    return this;
  }

  public GameSingle addPlatformsItem(GamePlatformsInner platformsItem) {
    if (this.platforms == null) {
      this.platforms = new ArrayList<>();
    }
    this.platforms.add(platformsItem);
    return this;
  }

  /**
   * Get platforms
   * @return platforms
   */
  @javax.annotation.Nullable
  public List<GamePlatformsInner> getPlatforms() {
    return platforms;
  }

  public void setPlatforms(List<GamePlatformsInner> platforms) {
    this.platforms = platforms;
  }


  /**
   * in hours
   * @return playtime
   */
  @javax.annotation.Nullable
  public Integer getPlaytime() {
    return playtime;
  }



  public GameSingle rating(BigDecimal rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nonnull
  public BigDecimal getRating() {
    return rating;
  }

  public void setRating(BigDecimal rating) {
    this.rating = rating;
  }


  /**
   * Get ratingTop
   * @return ratingTop
   */
  @javax.annotation.Nullable
  public Integer getRatingTop() {
    return ratingTop;
  }



  /**
   * Get ratings
   * @return ratings
   */
  @javax.annotation.Nullable
  public Object getRatings() {
    return ratings;
  }



  /**
   * Get ratingsCount
   * @return ratingsCount
   */
  @javax.annotation.Nullable
  public Integer getRatingsCount() {
    return ratingsCount;
  }



  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nullable
  public Object getReactions() {
    return reactions;
  }



  /**
   * Get redditCount
   * @return redditCount
   */
  @javax.annotation.Nullable
  public Integer getRedditCount() {
    return redditCount;
  }



  /**
   * Get redditDescription
   * @return redditDescription
   */
  @javax.annotation.Nullable
  public String getRedditDescription() {
    return redditDescription;
  }



  /**
   * Get redditLogo
   * @return redditLogo
   */
  @javax.annotation.Nullable
  public URI getRedditLogo() {
    return redditLogo;
  }



  /**
   * Get redditName
   * @return redditName
   */
  @javax.annotation.Nullable
  public String getRedditName() {
    return redditName;
  }



  /**
   * For example \&quot;https://www.reddit.com/r/uncharted/\&quot; or \&quot;uncharted\&quot;
   * @return redditUrl
   */
  @javax.annotation.Nullable
  public String getRedditUrl() {
    return redditUrl;
  }



  /**
   * Get released
   * @return released
   */
  @javax.annotation.Nullable
  public LocalDate getReleased() {
    return released;
  }



  /**
   * Get reviewsTextCount
   * @return reviewsTextCount
   */
  @javax.annotation.Nullable
  public String getReviewsTextCount() {
    return reviewsTextCount;
  }



  /**
   * Get screenshotsCount
   * @return screenshotsCount
   */
  @javax.annotation.Nullable
  public Integer getScreenshotsCount() {
    return screenshotsCount;
  }



  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }



  /**
   * Get suggestionsCount
   * @return suggestionsCount
   */
  @javax.annotation.Nullable
  public Integer getSuggestionsCount() {
    return suggestionsCount;
  }



  /**
   * Get tba
   * @return tba
   */
  @javax.annotation.Nullable
  public Boolean getTba() {
    return tba;
  }



  /**
   * Get twitchCount
   * @return twitchCount
   */
  @javax.annotation.Nullable
  public String getTwitchCount() {
    return twitchCount;
  }



  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }



  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public URI getWebsite() {
    return website;
  }



  /**
   * Get youtubeCount
   * @return youtubeCount
   */
  @javax.annotation.Nullable
  public String getYoutubeCount() {
    return youtubeCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameSingle gameSingle = (GameSingle) o;
    return Objects.equals(this.achievementsCount, gameSingle.achievementsCount) &&
        Objects.equals(this.added, gameSingle.added) &&
        Objects.equals(this.addedByStatus, gameSingle.addedByStatus) &&
        Objects.equals(this.additionsCount, gameSingle.additionsCount) &&
        Objects.equals(this.alternativeNames, gameSingle.alternativeNames) &&
        Objects.equals(this.backgroundImage, gameSingle.backgroundImage) &&
        Objects.equals(this.backgroundImageAdditional, gameSingle.backgroundImageAdditional) &&
        Objects.equals(this.creatorsCount, gameSingle.creatorsCount) &&
        Objects.equals(this.description, gameSingle.description) &&
        Objects.equals(this.esrbRating, gameSingle.esrbRating) &&
        Objects.equals(this.gameSeriesCount, gameSingle.gameSeriesCount) &&
        Objects.equals(this.id, gameSingle.id) &&
        Objects.equals(this.metacritic, gameSingle.metacritic) &&
        Objects.equals(this.metacriticPlatforms, gameSingle.metacriticPlatforms) &&
        Objects.equals(this.metacriticUrl, gameSingle.metacriticUrl) &&
        Objects.equals(this.moviesCount, gameSingle.moviesCount) &&
        Objects.equals(this.name, gameSingle.name) &&
        Objects.equals(this.nameOriginal, gameSingle.nameOriginal) &&
        Objects.equals(this.parentAchievementsCount, gameSingle.parentAchievementsCount) &&
        Objects.equals(this.parentsCount, gameSingle.parentsCount) &&
        Objects.equals(this.platforms, gameSingle.platforms) &&
        Objects.equals(this.playtime, gameSingle.playtime) &&
        Objects.equals(this.rating, gameSingle.rating) &&
        Objects.equals(this.ratingTop, gameSingle.ratingTop) &&
        Objects.equals(this.ratings, gameSingle.ratings) &&
        Objects.equals(this.ratingsCount, gameSingle.ratingsCount) &&
        Objects.equals(this.reactions, gameSingle.reactions) &&
        Objects.equals(this.redditCount, gameSingle.redditCount) &&
        Objects.equals(this.redditDescription, gameSingle.redditDescription) &&
        Objects.equals(this.redditLogo, gameSingle.redditLogo) &&
        Objects.equals(this.redditName, gameSingle.redditName) &&
        Objects.equals(this.redditUrl, gameSingle.redditUrl) &&
        Objects.equals(this.released, gameSingle.released) &&
        Objects.equals(this.reviewsTextCount, gameSingle.reviewsTextCount) &&
        Objects.equals(this.screenshotsCount, gameSingle.screenshotsCount) &&
        Objects.equals(this.slug, gameSingle.slug) &&
        Objects.equals(this.suggestionsCount, gameSingle.suggestionsCount) &&
        Objects.equals(this.tba, gameSingle.tba) &&
        Objects.equals(this.twitchCount, gameSingle.twitchCount) &&
        Objects.equals(this.updated, gameSingle.updated) &&
        Objects.equals(this.website, gameSingle.website) &&
        Objects.equals(this.youtubeCount, gameSingle.youtubeCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(achievementsCount, added, addedByStatus, additionsCount, alternativeNames, backgroundImage, backgroundImageAdditional, creatorsCount, description, esrbRating, gameSeriesCount, id, metacritic, metacriticPlatforms, metacriticUrl, moviesCount, name, nameOriginal, parentAchievementsCount, parentsCount, platforms, playtime, rating, ratingTop, ratings, ratingsCount, reactions, redditCount, redditDescription, redditLogo, redditName, redditUrl, released, reviewsTextCount, screenshotsCount, slug, suggestionsCount, tba, twitchCount, updated, website, youtubeCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameSingle {\n");
    sb.append("    achievementsCount: ").append(toIndentedString(achievementsCount)).append("\n");
    sb.append("    added: ").append(toIndentedString(added)).append("\n");
    sb.append("    addedByStatus: ").append(toIndentedString(addedByStatus)).append("\n");
    sb.append("    additionsCount: ").append(toIndentedString(additionsCount)).append("\n");
    sb.append("    alternativeNames: ").append(toIndentedString(alternativeNames)).append("\n");
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    backgroundImageAdditional: ").append(toIndentedString(backgroundImageAdditional)).append("\n");
    sb.append("    creatorsCount: ").append(toIndentedString(creatorsCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    esrbRating: ").append(toIndentedString(esrbRating)).append("\n");
    sb.append("    gameSeriesCount: ").append(toIndentedString(gameSeriesCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metacritic: ").append(toIndentedString(metacritic)).append("\n");
    sb.append("    metacriticPlatforms: ").append(toIndentedString(metacriticPlatforms)).append("\n");
    sb.append("    metacriticUrl: ").append(toIndentedString(metacriticUrl)).append("\n");
    sb.append("    moviesCount: ").append(toIndentedString(moviesCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameOriginal: ").append(toIndentedString(nameOriginal)).append("\n");
    sb.append("    parentAchievementsCount: ").append(toIndentedString(parentAchievementsCount)).append("\n");
    sb.append("    parentsCount: ").append(toIndentedString(parentsCount)).append("\n");
    sb.append("    platforms: ").append(toIndentedString(platforms)).append("\n");
    sb.append("    playtime: ").append(toIndentedString(playtime)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    ratingTop: ").append(toIndentedString(ratingTop)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    ratingsCount: ").append(toIndentedString(ratingsCount)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    redditCount: ").append(toIndentedString(redditCount)).append("\n");
    sb.append("    redditDescription: ").append(toIndentedString(redditDescription)).append("\n");
    sb.append("    redditLogo: ").append(toIndentedString(redditLogo)).append("\n");
    sb.append("    redditName: ").append(toIndentedString(redditName)).append("\n");
    sb.append("    redditUrl: ").append(toIndentedString(redditUrl)).append("\n");
    sb.append("    released: ").append(toIndentedString(released)).append("\n");
    sb.append("    reviewsTextCount: ").append(toIndentedString(reviewsTextCount)).append("\n");
    sb.append("    screenshotsCount: ").append(toIndentedString(screenshotsCount)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    suggestionsCount: ").append(toIndentedString(suggestionsCount)).append("\n");
    sb.append("    tba: ").append(toIndentedString(tba)).append("\n");
    sb.append("    twitchCount: ").append(toIndentedString(twitchCount)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    youtubeCount: ").append(toIndentedString(youtubeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("achievements_count");
    openapiFields.add("added");
    openapiFields.add("added_by_status");
    openapiFields.add("additions_count");
    openapiFields.add("alternative_names");
    openapiFields.add("background_image");
    openapiFields.add("background_image_additional");
    openapiFields.add("creators_count");
    openapiFields.add("description");
    openapiFields.add("esrb_rating");
    openapiFields.add("game_series_count");
    openapiFields.add("id");
    openapiFields.add("metacritic");
    openapiFields.add("metacritic_platforms");
    openapiFields.add("metacritic_url");
    openapiFields.add("movies_count");
    openapiFields.add("name");
    openapiFields.add("name_original");
    openapiFields.add("parent_achievements_count");
    openapiFields.add("parents_count");
    openapiFields.add("platforms");
    openapiFields.add("playtime");
    openapiFields.add("rating");
    openapiFields.add("rating_top");
    openapiFields.add("ratings");
    openapiFields.add("ratings_count");
    openapiFields.add("reactions");
    openapiFields.add("reddit_count");
    openapiFields.add("reddit_description");
    openapiFields.add("reddit_logo");
    openapiFields.add("reddit_name");
    openapiFields.add("reddit_url");
    openapiFields.add("released");
    openapiFields.add("reviews_text_count");
    openapiFields.add("screenshots_count");
    openapiFields.add("slug");
    openapiFields.add("suggestions_count");
    openapiFields.add("tba");
    openapiFields.add("twitch_count");
    openapiFields.add("updated");
    openapiFields.add("website");
    openapiFields.add("youtube_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rating");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GameSingle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GameSingle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GameSingle is not found in the empty JSON string", GameSingle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GameSingle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GameSingle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GameSingle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternative_names") != null && !jsonObj.get("alternative_names").isJsonNull() && !jsonObj.get("alternative_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternative_names` to be an array in the JSON string but got `%s`", jsonObj.get("alternative_names").toString()));
      }
      if ((jsonObj.get("background_image") != null && !jsonObj.get("background_image").isJsonNull()) && !jsonObj.get("background_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_image").toString()));
      }
      if ((jsonObj.get("background_image_additional") != null && !jsonObj.get("background_image_additional").isJsonNull()) && !jsonObj.get("background_image_additional").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `background_image_additional` to be a primitive type in the JSON string but got `%s`", jsonObj.get("background_image_additional").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `esrb_rating`
      if (jsonObj.get("esrb_rating") != null && !jsonObj.get("esrb_rating").isJsonNull()) {
        GameEsrbRating.validateJsonElement(jsonObj.get("esrb_rating"));
      }
      if (jsonObj.get("metacritic_platforms") != null && !jsonObj.get("metacritic_platforms").isJsonNull()) {
        JsonArray jsonArraymetacriticPlatforms = jsonObj.getAsJsonArray("metacritic_platforms");
        if (jsonArraymetacriticPlatforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metacritic_platforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metacritic_platforms` to be an array in the JSON string but got `%s`", jsonObj.get("metacritic_platforms").toString()));
          }

          // validate the optional field `metacritic_platforms` (array)
          for (int i = 0; i < jsonArraymetacriticPlatforms.size(); i++) {
            GamePlatformMetacritic.validateJsonElement(jsonArraymetacriticPlatforms.get(i));
          };
        }
      }
      if ((jsonObj.get("metacritic_url") != null && !jsonObj.get("metacritic_url").isJsonNull()) && !jsonObj.get("metacritic_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metacritic_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metacritic_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_original") != null && !jsonObj.get("name_original").isJsonNull()) && !jsonObj.get("name_original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_original").toString()));
      }
      if ((jsonObj.get("parent_achievements_count") != null && !jsonObj.get("parent_achievements_count").isJsonNull()) && !jsonObj.get("parent_achievements_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_achievements_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_achievements_count").toString()));
      }
      if (jsonObj.get("platforms") != null && !jsonObj.get("platforms").isJsonNull()) {
        JsonArray jsonArrayplatforms = jsonObj.getAsJsonArray("platforms");
        if (jsonArrayplatforms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("platforms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `platforms` to be an array in the JSON string but got `%s`", jsonObj.get("platforms").toString()));
          }

          // validate the optional field `platforms` (array)
          for (int i = 0; i < jsonArrayplatforms.size(); i++) {
            GamePlatformsInner.validateJsonElement(jsonArrayplatforms.get(i));
          };
        }
      }
      if ((jsonObj.get("reddit_description") != null && !jsonObj.get("reddit_description").isJsonNull()) && !jsonObj.get("reddit_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reddit_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reddit_description").toString()));
      }
      if ((jsonObj.get("reddit_logo") != null && !jsonObj.get("reddit_logo").isJsonNull()) && !jsonObj.get("reddit_logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reddit_logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reddit_logo").toString()));
      }
      if ((jsonObj.get("reddit_name") != null && !jsonObj.get("reddit_name").isJsonNull()) && !jsonObj.get("reddit_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reddit_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reddit_name").toString()));
      }
      if ((jsonObj.get("reddit_url") != null && !jsonObj.get("reddit_url").isJsonNull()) && !jsonObj.get("reddit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reddit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reddit_url").toString()));
      }
      if ((jsonObj.get("reviews_text_count") != null && !jsonObj.get("reviews_text_count").isJsonNull()) && !jsonObj.get("reviews_text_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviews_text_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviews_text_count").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("twitch_count") != null && !jsonObj.get("twitch_count").isJsonNull()) && !jsonObj.get("twitch_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitch_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitch_count").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
      if ((jsonObj.get("youtube_count") != null && !jsonObj.get("youtube_count").isJsonNull()) && !jsonObj.get("youtube_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `youtube_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("youtube_count").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GameSingle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GameSingle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GameSingle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GameSingle.class));

       return (TypeAdapter<T>) new TypeAdapter<GameSingle>() {
           @Override
           public void write(JsonWriter out, GameSingle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GameSingle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GameSingle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GameSingle
   * @throws IOException if the JSON string is invalid with respect to GameSingle
   */
  public static GameSingle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GameSingle.class);
  }

  /**
   * Convert an instance of GameSingle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

