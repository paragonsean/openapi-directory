/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GameSingle;
import org.openapitools.client.model.GamesDevelopmentTeamList200Response;
import org.openapitools.client.model.GamesList200Response;
import org.openapitools.client.model.GamesScreenshotsList200Response;
import org.openapitools.client.model.GamesStoresList200Response;
import org.openapitools.client.model.Movie;
import org.openapitools.client.model.ParentAchievement;
import org.openapitools.client.model.Reddit;
import org.openapitools.client.model.Twitch;
import org.openapitools.client.model.Youtube;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GamesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gamesAchievementsRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesAchievementsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/achievements"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesAchievementsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesAchievementsRead(Async)");
        }

        return gamesAchievementsReadCall(id, _callback);

    }

    /**
     * Get a list of game achievements.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ParentAchievement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ParentAchievement gamesAchievementsRead(String id) throws ApiException {
        ApiResponse<ParentAchievement> localVarResp = gamesAchievementsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a list of game achievements.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;ParentAchievement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParentAchievement> gamesAchievementsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesAchievementsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ParentAchievement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of game achievements. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesAchievementsReadAsync(String id, final ApiCallback<ParentAchievement> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesAchievementsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ParentAchievement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesAdditionsList
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesAdditionsListCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/additions"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesAdditionsListValidateBeforeCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesAdditionsList(Async)");
        }

        return gamesAdditionsListCall(gamePk, page, pageSize, _callback);

    }

    /**
     * Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesList200Response gamesAdditionsList(String gamePk, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesList200Response> localVarResp = gamesAdditionsListWithHttpInfo(gamePk, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesList200Response> gamesAdditionsListWithHttpInfo(String gamePk, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesAdditionsListValidateBeforeCall(gamePk, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of DLC&#39;s for the game, GOTY and other editions, companion apps, etc. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesAdditionsListAsync(String gamePk, Integer page, Integer pageSize, final ApiCallback<GamesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesAdditionsListValidateBeforeCall(gamePk, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesDevelopmentTeamList
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesDevelopmentTeamListCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/development-team"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesDevelopmentTeamListValidateBeforeCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesDevelopmentTeamList(Async)");
        }

        return gamesDevelopmentTeamListCall(gamePk, ordering, page, pageSize, _callback);

    }

    /**
     * Get a list of individual creators that were part of the development team.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesDevelopmentTeamList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesDevelopmentTeamList200Response gamesDevelopmentTeamList(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesDevelopmentTeamList200Response> localVarResp = gamesDevelopmentTeamListWithHttpInfo(gamePk, ordering, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get a list of individual creators that were part of the development team.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesDevelopmentTeamList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesDevelopmentTeamList200Response> gamesDevelopmentTeamListWithHttpInfo(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesDevelopmentTeamListValidateBeforeCall(gamePk, ordering, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesDevelopmentTeamList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of individual creators that were part of the development team. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesDevelopmentTeamListAsync(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback<GamesDevelopmentTeamList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesDevelopmentTeamListValidateBeforeCall(gamePk, ordering, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesDevelopmentTeamList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesGameSeriesList
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameSeriesListCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/game-series"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesGameSeriesListValidateBeforeCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesGameSeriesList(Async)");
        }

        return gamesGameSeriesListCall(gamePk, page, pageSize, _callback);

    }

    /**
     * Get a list of games that are part of the same series.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesList200Response gamesGameSeriesList(String gamePk, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesList200Response> localVarResp = gamesGameSeriesListWithHttpInfo(gamePk, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get a list of games that are part of the same series.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesList200Response> gamesGameSeriesListWithHttpInfo(String gamePk, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesGameSeriesListValidateBeforeCall(gamePk, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of games that are part of the same series. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesGameSeriesListAsync(String gamePk, Integer page, Integer pageSize, final ApiCallback<GamesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesGameSeriesListValidateBeforeCall(gamePk, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesList
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search Search query. (optional)
     * @param searchPrecise Disable fuzziness for the search query. (optional)
     * @param searchExact Mark the search query as exact. (optional)
     * @param parentPlatforms Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)
     * @param platforms Filter by platforms, for example: &#x60;4,5&#x60;. (optional)
     * @param stores Filter by stores, for example: &#x60;5,6&#x60;. (optional)
     * @param developers Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)
     * @param publishers Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)
     * @param genres Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)
     * @param tags Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)
     * @param creators Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)
     * @param dates Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)
     * @param updated Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;. (optional)
     * @param platformsCount Filter by platforms count, for example: &#x60;1&#x60;. (optional)
     * @param metacritic Filter by a metacritic rating, for example: &#x60;80,100&#x60;. (optional)
     * @param excludeCollection Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)
     * @param excludeAdditions Exclude additions. (optional)
     * @param excludeParents Exclude games which have additions. (optional)
     * @param excludeGameSeries Exclude games which included in a game series. (optional)
     * @param excludeStores Exclude stores, for example: &#x60;5,6&#x60;. (optional)
     * @param ordering Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesListCall(Integer page, Integer pageSize, String search, Boolean searchPrecise, Boolean searchExact, String parentPlatforms, String platforms, String stores, String developers, String publishers, String genres, String tags, String creators, String dates, String updated, Integer platformsCount, String metacritic, Integer excludeCollection, Boolean excludeAdditions, Boolean excludeParents, Boolean excludeGameSeries, String excludeStores, String ordering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (searchPrecise != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_precise", searchPrecise));
        }

        if (searchExact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_exact", searchExact));
        }

        if (parentPlatforms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_platforms", parentPlatforms));
        }

        if (platforms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platforms", platforms));
        }

        if (stores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores", stores));
        }

        if (developers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("developers", developers));
        }

        if (publishers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publishers", publishers));
        }

        if (genres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genres", genres));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (creators != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("creators", creators));
        }

        if (dates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dates", dates));
        }

        if (updated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated", updated));
        }

        if (platformsCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platforms_count", platformsCount));
        }

        if (metacritic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metacritic", metacritic));
        }

        if (excludeCollection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_collection", excludeCollection));
        }

        if (excludeAdditions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_additions", excludeAdditions));
        }

        if (excludeParents != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_parents", excludeParents));
        }

        if (excludeGameSeries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_game_series", excludeGameSeries));
        }

        if (excludeStores != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_stores", excludeStores));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesListValidateBeforeCall(Integer page, Integer pageSize, String search, Boolean searchPrecise, Boolean searchExact, String parentPlatforms, String platforms, String stores, String developers, String publishers, String genres, String tags, String creators, String dates, String updated, Integer platformsCount, String metacritic, Integer excludeCollection, Boolean excludeAdditions, Boolean excludeParents, Boolean excludeGameSeries, String excludeStores, String ordering, final ApiCallback _callback) throws ApiException {
        return gamesListCall(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, _callback);

    }

    /**
     * Get a list of games.
     * 
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search Search query. (optional)
     * @param searchPrecise Disable fuzziness for the search query. (optional)
     * @param searchExact Mark the search query as exact. (optional)
     * @param parentPlatforms Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)
     * @param platforms Filter by platforms, for example: &#x60;4,5&#x60;. (optional)
     * @param stores Filter by stores, for example: &#x60;5,6&#x60;. (optional)
     * @param developers Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)
     * @param publishers Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)
     * @param genres Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)
     * @param tags Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)
     * @param creators Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)
     * @param dates Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)
     * @param updated Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;. (optional)
     * @param platformsCount Filter by platforms count, for example: &#x60;1&#x60;. (optional)
     * @param metacritic Filter by a metacritic rating, for example: &#x60;80,100&#x60;. (optional)
     * @param excludeCollection Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)
     * @param excludeAdditions Exclude additions. (optional)
     * @param excludeParents Exclude games which have additions. (optional)
     * @param excludeGameSeries Exclude games which included in a game series. (optional)
     * @param excludeStores Exclude stores, for example: &#x60;5,6&#x60;. (optional)
     * @param ordering Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)
     * @return GamesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesList200Response gamesList(Integer page, Integer pageSize, String search, Boolean searchPrecise, Boolean searchExact, String parentPlatforms, String platforms, String stores, String developers, String publishers, String genres, String tags, String creators, String dates, String updated, Integer platformsCount, String metacritic, Integer excludeCollection, Boolean excludeAdditions, Boolean excludeParents, Boolean excludeGameSeries, String excludeStores, String ordering) throws ApiException {
        ApiResponse<GamesList200Response> localVarResp = gamesListWithHttpInfo(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering);
        return localVarResp.getData();
    }

    /**
     * Get a list of games.
     * 
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search Search query. (optional)
     * @param searchPrecise Disable fuzziness for the search query. (optional)
     * @param searchExact Mark the search query as exact. (optional)
     * @param parentPlatforms Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)
     * @param platforms Filter by platforms, for example: &#x60;4,5&#x60;. (optional)
     * @param stores Filter by stores, for example: &#x60;5,6&#x60;. (optional)
     * @param developers Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)
     * @param publishers Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)
     * @param genres Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)
     * @param tags Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)
     * @param creators Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)
     * @param dates Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)
     * @param updated Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;. (optional)
     * @param platformsCount Filter by platforms count, for example: &#x60;1&#x60;. (optional)
     * @param metacritic Filter by a metacritic rating, for example: &#x60;80,100&#x60;. (optional)
     * @param excludeCollection Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)
     * @param excludeAdditions Exclude additions. (optional)
     * @param excludeParents Exclude games which have additions. (optional)
     * @param excludeGameSeries Exclude games which included in a game series. (optional)
     * @param excludeStores Exclude stores, for example: &#x60;5,6&#x60;. (optional)
     * @param ordering Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)
     * @return ApiResponse&lt;GamesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesList200Response> gamesListWithHttpInfo(Integer page, Integer pageSize, String search, Boolean searchPrecise, Boolean searchExact, String parentPlatforms, String platforms, String stores, String developers, String publishers, String genres, String tags, String creators, String dates, String updated, Integer platformsCount, String metacritic, Integer excludeCollection, Boolean excludeAdditions, Boolean excludeParents, Boolean excludeGameSeries, String excludeStores, String ordering) throws ApiException {
        okhttp3.Call localVarCall = gamesListValidateBeforeCall(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, null);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of games. (asynchronously)
     * 
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param search Search query. (optional)
     * @param searchPrecise Disable fuzziness for the search query. (optional)
     * @param searchExact Mark the search query as exact. (optional)
     * @param parentPlatforms Filter by parent platforms, for example: &#x60;1,2,3&#x60;. (optional)
     * @param platforms Filter by platforms, for example: &#x60;4,5&#x60;. (optional)
     * @param stores Filter by stores, for example: &#x60;5,6&#x60;. (optional)
     * @param developers Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;. (optional)
     * @param publishers Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;. (optional)
     * @param genres Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;. (optional)
     * @param tags Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;. (optional)
     * @param creators Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;. (optional)
     * @param dates Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;. (optional)
     * @param updated Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;. (optional)
     * @param platformsCount Filter by platforms count, for example: &#x60;1&#x60;. (optional)
     * @param metacritic Filter by a metacritic rating, for example: &#x60;80,100&#x60;. (optional)
     * @param excludeCollection Exclude games from a particular collection, for example: &#x60;123&#x60;. (optional)
     * @param excludeAdditions Exclude additions. (optional)
     * @param excludeParents Exclude games which have additions. (optional)
     * @param excludeGameSeries Exclude games which included in a game series. (optional)
     * @param excludeStores Exclude stores, for example: &#x60;5,6&#x60;. (optional)
     * @param ordering Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesListAsync(Integer page, Integer pageSize, String search, Boolean searchPrecise, Boolean searchExact, String parentPlatforms, String platforms, String stores, String developers, String publishers, String genres, String tags, String creators, String dates, String updated, Integer platformsCount, String metacritic, Integer excludeCollection, Boolean excludeAdditions, Boolean excludeParents, Boolean excludeGameSeries, String excludeStores, String ordering, final ApiCallback<GamesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesListValidateBeforeCall(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, _callback);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesMoviesRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesMoviesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/movies"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesMoviesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesMoviesRead(Async)");
        }

        return gamesMoviesReadCall(id, _callback);

    }

    /**
     * Get a list of game trailers.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return Movie
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Movie gamesMoviesRead(String id) throws ApiException {
        ApiResponse<Movie> localVarResp = gamesMoviesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a list of game trailers.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;Movie&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Movie> gamesMoviesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesMoviesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Movie>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of game trailers. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesMoviesReadAsync(String id, final ApiCallback<Movie> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesMoviesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Movie>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesParentGamesList
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesParentGamesListCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/parent-games"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesParentGamesListValidateBeforeCall(String gamePk, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesParentGamesList(Async)");
        }

        return gamesParentGamesListCall(gamePk, page, pageSize, _callback);

    }

    /**
     * Get a list of parent games for DLC&#39;s and editions.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesList200Response gamesParentGamesList(String gamePk, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesList200Response> localVarResp = gamesParentGamesListWithHttpInfo(gamePk, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get a list of parent games for DLC&#39;s and editions.
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesList200Response> gamesParentGamesListWithHttpInfo(String gamePk, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesParentGamesListValidateBeforeCall(gamePk, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of parent games for DLC&#39;s and editions. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesParentGamesListAsync(String gamePk, Integer page, Integer pageSize, final ApiCallback<GamesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesParentGamesListValidateBeforeCall(gamePk, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesRead(Async)");
        }

        return gamesReadCall(id, _callback);

    }

    /**
     * Get details of the game.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return GameSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GameSingle gamesRead(String id) throws ApiException {
        ApiResponse<GameSingle> localVarResp = gamesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get details of the game.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;GameSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameSingle> gamesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GameSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of the game. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesReadAsync(String id, final ApiCallback<GameSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GameSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesRedditRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesRedditReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/reddit"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesRedditReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesRedditRead(Async)");
        }

        return gamesRedditReadCall(id, _callback);

    }

    /**
     * Get a list of most recent posts from the game&#39;s subreddit.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return Reddit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Reddit gamesRedditRead(String id) throws ApiException {
        ApiResponse<Reddit> localVarResp = gamesRedditReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a list of most recent posts from the game&#39;s subreddit.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;Reddit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reddit> gamesRedditReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesRedditReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Reddit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of most recent posts from the game&#39;s subreddit. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesRedditReadAsync(String id, final ApiCallback<Reddit> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesRedditReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Reddit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesScreenshotsList
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScreenshotsListCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/screenshots"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesScreenshotsListValidateBeforeCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesScreenshotsList(Async)");
        }

        return gamesScreenshotsListCall(gamePk, ordering, page, pageSize, _callback);

    }

    /**
     * Get screenshots for the game.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesScreenshotsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesScreenshotsList200Response gamesScreenshotsList(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesScreenshotsList200Response> localVarResp = gamesScreenshotsListWithHttpInfo(gamePk, ordering, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get screenshots for the game.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesScreenshotsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesScreenshotsList200Response> gamesScreenshotsListWithHttpInfo(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesScreenshotsListValidateBeforeCall(gamePk, ordering, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesScreenshotsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get screenshots for the game. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesScreenshotsListAsync(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback<GamesScreenshotsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesScreenshotsListValidateBeforeCall(gamePk, ordering, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesScreenshotsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesStoresList
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesStoresListCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{game_pk}/stores"
            .replace("{" + "game_pk" + "}", localVarApiClient.escapeString(gamePk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesStoresListValidateBeforeCall(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gamePk' is set
        if (gamePk == null) {
            throw new ApiException("Missing the required parameter 'gamePk' when calling gamesStoresList(Async)");
        }

        return gamesStoresListCall(gamePk, ordering, page, pageSize, _callback);

    }

    /**
     * Get links to the stores that sell the game.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return GamesStoresList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GamesStoresList200Response gamesStoresList(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GamesStoresList200Response> localVarResp = gamesStoresListWithHttpInfo(gamePk, ordering, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get links to the stores that sell the game.
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;GamesStoresList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GamesStoresList200Response> gamesStoresListWithHttpInfo(String gamePk, String ordering, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = gamesStoresListValidateBeforeCall(gamePk, ordering, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GamesStoresList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get links to the stores that sell the game. (asynchronously)
     * 
     * @param gamePk  (required)
     * @param ordering Which field to use when ordering the results. (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesStoresListAsync(String gamePk, String ordering, Integer page, Integer pageSize, final ApiCallback<GamesStoresList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesStoresListValidateBeforeCall(gamePk, ordering, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GamesStoresList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesSuggestedRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesSuggestedReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/suggested"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesSuggestedReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesSuggestedRead(Async)");
        }

        return gamesSuggestedReadCall(id, _callback);

    }

    /**
     * Get a list of visually similar games, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return GameSingle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GameSingle gamesSuggestedRead(String id) throws ApiException {
        ApiResponse<GameSingle> localVarResp = gamesSuggestedReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a list of visually similar games, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;GameSingle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GameSingle> gamesSuggestedReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesSuggestedReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GameSingle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of visually similar games, available only for business and enterprise API users. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesSuggestedReadAsync(String id, final ApiCallback<GameSingle> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesSuggestedReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GameSingle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesTwitchRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesTwitchReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/twitch"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesTwitchReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesTwitchRead(Async)");
        }

        return gamesTwitchReadCall(id, _callback);

    }

    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return Twitch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Twitch gamesTwitchRead(String id) throws ApiException {
        ApiResponse<Twitch> localVarResp = gamesTwitchReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;Twitch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Twitch> gamesTwitchReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesTwitchReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Twitch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesTwitchReadAsync(String id, final ApiCallback<Twitch> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesTwitchReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Twitch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gamesYoutubeRead
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesYoutubeReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/games/{id}/youtube"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gamesYoutubeReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling gamesYoutubeRead(Async)");
        }

        return gamesYoutubeReadCall(id, _callback);

    }

    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return Youtube
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Youtube gamesYoutubeRead(String id) throws ApiException {
        ApiResponse<Youtube> localVarResp = gamesYoutubeReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users.
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @return ApiResponse&lt;Youtube&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Youtube> gamesYoutubeReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = gamesYoutubeReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Youtube>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users. (asynchronously)
     * 
     * @param id An ID or a slug identifying this Game. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gamesYoutubeReadAsync(String id, final ApiCallback<Youtube> _callback) throws ApiException {

        okhttp3.Call localVarCall = gamesYoutubeReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Youtube>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
