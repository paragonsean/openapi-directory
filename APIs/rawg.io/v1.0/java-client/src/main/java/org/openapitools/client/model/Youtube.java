/*
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Youtube
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:16.491097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Youtube {
  public static final String SERIALIZED_NAME_CHANNEL_ID = "channel_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TITLE = "channel_title";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TITLE)
  private String channelTitle;

  public static final String SERIALIZED_NAME_COMMENTS_COUNT = "comments_count";
  @SerializedName(SERIALIZED_NAME_COMMENTS_COUNT)
  private Integer commentsCount;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISLIKE_COUNT = "dislike_count";
  @SerializedName(SERIALIZED_NAME_DISLIKE_COUNT)
  private Integer dislikeCount;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FAVORITE_COUNT = "favorite_count";
  @SerializedName(SERIALIZED_NAME_FAVORITE_COUNT)
  private Integer favoriteCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LIKE_COUNT = "like_count";
  @SerializedName(SERIALIZED_NAME_LIKE_COUNT)
  private Integer likeCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private Object thumbnails;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "view_count";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Integer viewCount;

  public Youtube() {
  }

  public Youtube(
     String channelId, 
     String channelTitle, 
     Integer commentsCount, 
     OffsetDateTime created, 
     String description, 
     Integer dislikeCount, 
     String externalId, 
     Integer favoriteCount, 
     Integer id, 
     Integer likeCount, 
     String name, 
     Object thumbnails, 
     Integer viewCount
  ) {
    this();
    this.channelId = channelId;
    this.channelTitle = channelTitle;
    this.commentsCount = commentsCount;
    this.created = created;
    this.description = description;
    this.dislikeCount = dislikeCount;
    this.externalId = externalId;
    this.favoriteCount = favoriteCount;
    this.id = id;
    this.likeCount = likeCount;
    this.name = name;
    this.thumbnails = thumbnails;
    this.viewCount = viewCount;
  }

  /**
   * Get channelId
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }



  /**
   * Get channelTitle
   * @return channelTitle
   */
  @javax.annotation.Nullable
  public String getChannelTitle() {
    return channelTitle;
  }



  /**
   * Get commentsCount
   * @return commentsCount
   */
  @javax.annotation.Nullable
  public Integer getCommentsCount() {
    return commentsCount;
  }



  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Get dislikeCount
   * @return dislikeCount
   */
  @javax.annotation.Nullable
  public Integer getDislikeCount() {
    return dislikeCount;
  }



  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }



  /**
   * Get favoriteCount
   * @return favoriteCount
   */
  @javax.annotation.Nullable
  public Integer getFavoriteCount() {
    return favoriteCount;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }



  /**
   * Get likeCount
   * @return likeCount
   */
  @javax.annotation.Nullable
  public Integer getLikeCount() {
    return likeCount;
  }



  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Get thumbnails
   * @return thumbnails
   */
  @javax.annotation.Nullable
  public Object getThumbnails() {
    return thumbnails;
  }



  /**
   * Get viewCount
   * @return viewCount
   */
  @javax.annotation.Nullable
  public Integer getViewCount() {
    return viewCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Youtube youtube = (Youtube) o;
    return Objects.equals(this.channelId, youtube.channelId) &&
        Objects.equals(this.channelTitle, youtube.channelTitle) &&
        Objects.equals(this.commentsCount, youtube.commentsCount) &&
        Objects.equals(this.created, youtube.created) &&
        Objects.equals(this.description, youtube.description) &&
        Objects.equals(this.dislikeCount, youtube.dislikeCount) &&
        Objects.equals(this.externalId, youtube.externalId) &&
        Objects.equals(this.favoriteCount, youtube.favoriteCount) &&
        Objects.equals(this.id, youtube.id) &&
        Objects.equals(this.likeCount, youtube.likeCount) &&
        Objects.equals(this.name, youtube.name) &&
        Objects.equals(this.thumbnails, youtube.thumbnails) &&
        Objects.equals(this.viewCount, youtube.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelId, channelTitle, commentsCount, created, description, dislikeCount, externalId, favoriteCount, id, likeCount, name, thumbnails, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Youtube {\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelTitle: ").append(toIndentedString(channelTitle)).append("\n");
    sb.append("    commentsCount: ").append(toIndentedString(commentsCount)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dislikeCount: ").append(toIndentedString(dislikeCount)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    likeCount: ").append(toIndentedString(likeCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_id");
    openapiFields.add("channel_title");
    openapiFields.add("comments_count");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("dislike_count");
    openapiFields.add("external_id");
    openapiFields.add("favorite_count");
    openapiFields.add("id");
    openapiFields.add("like_count");
    openapiFields.add("name");
    openapiFields.add("thumbnails");
    openapiFields.add("view_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Youtube
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Youtube.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Youtube is not found in the empty JSON string", Youtube.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Youtube.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Youtube` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel_id") != null && !jsonObj.get("channel_id").isJsonNull()) && !jsonObj.get("channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_id").toString()));
      }
      if ((jsonObj.get("channel_title") != null && !jsonObj.get("channel_title").isJsonNull()) && !jsonObj.get("channel_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Youtube.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Youtube' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Youtube> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Youtube.class));

       return (TypeAdapter<T>) new TypeAdapter<Youtube>() {
           @Override
           public void write(JsonWriter out, Youtube value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Youtube read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Youtube given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Youtube
   * @throws IOException if the JSON string is invalid with respect to Youtube
   */
  public static Youtube fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Youtube.class);
  }

  /**
   * Convert an instance of Youtube to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

