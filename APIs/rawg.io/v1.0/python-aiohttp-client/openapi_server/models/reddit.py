# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Reddit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, id: int=None, image: str=None, name: str=None, text: str=None, url: str=None, username: str=None, username_url: str=None):
        """Reddit - a model defined in OpenAPI

        :param created: The created of this Reddit.
        :param id: The id of this Reddit.
        :param image: The image of this Reddit.
        :param name: The name of this Reddit.
        :param text: The text of this Reddit.
        :param url: The url of this Reddit.
        :param username: The username of this Reddit.
        :param username_url: The username_url of this Reddit.
        """
        self.openapi_types = {
            'created': datetime,
            'id': int,
            'image': str,
            'name': str,
            'text': str,
            'url': str,
            'username': str,
            'username_url': str
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'image': 'image',
            'name': 'name',
            'text': 'text',
            'url': 'url',
            'username': 'username',
            'username_url': 'username_url'
        }

        self._created = created
        self._id = id
        self._image = image
        self._name = name
        self._text = text
        self._url = url
        self._username = username
        self._username_url = username_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reddit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reddit of this Reddit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Reddit.


        :return: The created of this Reddit.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Reddit.


        :param created: The created of this Reddit.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Reddit.


        :return: The id of this Reddit.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Reddit.


        :param id: The id of this Reddit.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this Reddit.


        :return: The image of this Reddit.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Reddit.


        :param image: The image of this Reddit.
        :type image: str
        """
        if image is not None and len(image) < 1:
            raise ValueError("Invalid value for `image`, length must be greater than or equal to `1`")

        self._image = image

    @property
    def name(self):
        """Gets the name of this Reddit.


        :return: The name of this Reddit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Reddit.


        :param name: The name of this Reddit.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def text(self):
        """Gets the text of this Reddit.


        :return: The text of this Reddit.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Reddit.


        :param text: The text of this Reddit.
        :type text: str
        """
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")

        self._text = text

    @property
    def url(self):
        """Gets the url of this Reddit.


        :return: The url of this Reddit.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Reddit.


        :param url: The url of this Reddit.
        :type url: str
        """
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")

        self._url = url

    @property
    def username(self):
        """Gets the username of this Reddit.


        :return: The username of this Reddit.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Reddit.


        :param username: The username of this Reddit.
        :type username: str
        """
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username

    @property
    def username_url(self):
        """Gets the username_url of this Reddit.


        :return: The username_url of this Reddit.
        :rtype: str
        """
        return self._username_url

    @username_url.setter
    def username_url(self, username_url):
        """Sets the username_url of this Reddit.


        :param username_url: The username_url of this Reddit.
        :type username_url: str
        """
        if username_url is not None and len(username_url) < 1:
            raise ValueError("Invalid value for `username_url`, length must be greater than or equal to `1`")

        self._username_url = username_url
