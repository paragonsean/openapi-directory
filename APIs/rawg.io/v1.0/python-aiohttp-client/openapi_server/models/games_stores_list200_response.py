# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game_store_full import GameStoreFull
from openapi_server import util


class GamesStoresList200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, next: str=None, previous: str=None, results: List[GameStoreFull]=None):
        """GamesStoresList200Response - a model defined in OpenAPI

        :param count: The count of this GamesStoresList200Response.
        :param next: The next of this GamesStoresList200Response.
        :param previous: The previous of this GamesStoresList200Response.
        :param results: The results of this GamesStoresList200Response.
        """
        self.openapi_types = {
            'count': int,
            'next': str,
            'previous': str,
            'results': List[GameStoreFull]
        }

        self.attribute_map = {
            'count': 'count',
            'next': 'next',
            'previous': 'previous',
            'results': 'results'
        }

        self._count = count
        self._next = next
        self._previous = previous
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GamesStoresList200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The games_stores_list_200_response of this GamesStoresList200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GamesStoresList200Response.


        :return: The count of this GamesStoresList200Response.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GamesStoresList200Response.


        :param count: The count of this GamesStoresList200Response.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def next(self):
        """Gets the next of this GamesStoresList200Response.


        :return: The next of this GamesStoresList200Response.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this GamesStoresList200Response.


        :param next: The next of this GamesStoresList200Response.
        :type next: str
        """

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this GamesStoresList200Response.


        :return: The previous of this GamesStoresList200Response.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this GamesStoresList200Response.


        :param previous: The previous of this GamesStoresList200Response.
        :type previous: str
        """

        self._previous = previous

    @property
    def results(self):
        """Gets the results of this GamesStoresList200Response.


        :return: The results of this GamesStoresList200Response.
        :rtype: List[GameStoreFull]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this GamesStoresList200Response.


        :param results: The results of this GamesStoresList200Response.
        :type results: List[GameStoreFull]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results
