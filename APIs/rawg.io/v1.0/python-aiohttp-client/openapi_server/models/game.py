# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game_esrb_rating import GameEsrbRating
from openapi_server.models.game_platforms_inner import GamePlatformsInner
import re
from openapi_server import util


class Game(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added: int=None, added_by_status: object=None, background_image: str=None, esrb_rating: GameEsrbRating=None, id: int=None, metacritic: int=None, name: str=None, platforms: List[GamePlatformsInner]=None, playtime: int=None, rating: float=None, rating_top: int=None, ratings: object=None, ratings_count: int=None, released: date=None, reviews_text_count: str=None, slug: str=None, suggestions_count: int=None, tba: bool=None, updated: datetime=None):
        """Game - a model defined in OpenAPI

        :param added: The added of this Game.
        :param added_by_status: The added_by_status of this Game.
        :param background_image: The background_image of this Game.
        :param esrb_rating: The esrb_rating of this Game.
        :param id: The id of this Game.
        :param metacritic: The metacritic of this Game.
        :param name: The name of this Game.
        :param platforms: The platforms of this Game.
        :param playtime: The playtime of this Game.
        :param rating: The rating of this Game.
        :param rating_top: The rating_top of this Game.
        :param ratings: The ratings of this Game.
        :param ratings_count: The ratings_count of this Game.
        :param released: The released of this Game.
        :param reviews_text_count: The reviews_text_count of this Game.
        :param slug: The slug of this Game.
        :param suggestions_count: The suggestions_count of this Game.
        :param tba: The tba of this Game.
        :param updated: The updated of this Game.
        """
        self.openapi_types = {
            'added': int,
            'added_by_status': object,
            'background_image': str,
            'esrb_rating': GameEsrbRating,
            'id': int,
            'metacritic': int,
            'name': str,
            'platforms': List[GamePlatformsInner],
            'playtime': int,
            'rating': float,
            'rating_top': int,
            'ratings': object,
            'ratings_count': int,
            'released': date,
            'reviews_text_count': str,
            'slug': str,
            'suggestions_count': int,
            'tba': bool,
            'updated': datetime
        }

        self.attribute_map = {
            'added': 'added',
            'added_by_status': 'added_by_status',
            'background_image': 'background_image',
            'esrb_rating': 'esrb_rating',
            'id': 'id',
            'metacritic': 'metacritic',
            'name': 'name',
            'platforms': 'platforms',
            'playtime': 'playtime',
            'rating': 'rating',
            'rating_top': 'rating_top',
            'ratings': 'ratings',
            'ratings_count': 'ratings_count',
            'released': 'released',
            'reviews_text_count': 'reviews_text_count',
            'slug': 'slug',
            'suggestions_count': 'suggestions_count',
            'tba': 'tba',
            'updated': 'updated'
        }

        self._added = added
        self._added_by_status = added_by_status
        self._background_image = background_image
        self._esrb_rating = esrb_rating
        self._id = id
        self._metacritic = metacritic
        self._name = name
        self._platforms = platforms
        self._playtime = playtime
        self._rating = rating
        self._rating_top = rating_top
        self._ratings = ratings
        self._ratings_count = ratings_count
        self._released = released
        self._reviews_text_count = reviews_text_count
        self._slug = slug
        self._suggestions_count = suggestions_count
        self._tba = tba
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Game':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Game of this Game.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added(self):
        """Gets the added of this Game.


        :return: The added of this Game.
        :rtype: int
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this Game.


        :param added: The added of this Game.
        :type added: int
        """

        self._added = added

    @property
    def added_by_status(self):
        """Gets the added_by_status of this Game.


        :return: The added_by_status of this Game.
        :rtype: object
        """
        return self._added_by_status

    @added_by_status.setter
    def added_by_status(self, added_by_status):
        """Sets the added_by_status of this Game.


        :param added_by_status: The added_by_status of this Game.
        :type added_by_status: object
        """

        self._added_by_status = added_by_status

    @property
    def background_image(self):
        """Gets the background_image of this Game.


        :return: The background_image of this Game.
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this Game.


        :param background_image: The background_image of this Game.
        :type background_image: str
        """

        self._background_image = background_image

    @property
    def esrb_rating(self):
        """Gets the esrb_rating of this Game.


        :return: The esrb_rating of this Game.
        :rtype: GameEsrbRating
        """
        return self._esrb_rating

    @esrb_rating.setter
    def esrb_rating(self, esrb_rating):
        """Sets the esrb_rating of this Game.


        :param esrb_rating: The esrb_rating of this Game.
        :type esrb_rating: GameEsrbRating
        """

        self._esrb_rating = esrb_rating

    @property
    def id(self):
        """Gets the id of this Game.


        :return: The id of this Game.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Game.


        :param id: The id of this Game.
        :type id: int
        """

        self._id = id

    @property
    def metacritic(self):
        """Gets the metacritic of this Game.


        :return: The metacritic of this Game.
        :rtype: int
        """
        return self._metacritic

    @metacritic.setter
    def metacritic(self, metacritic):
        """Sets the metacritic of this Game.


        :param metacritic: The metacritic of this Game.
        :type metacritic: int
        """

        self._metacritic = metacritic

    @property
    def name(self):
        """Gets the name of this Game.


        :return: The name of this Game.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Game.


        :param name: The name of this Game.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def platforms(self):
        """Gets the platforms of this Game.


        :return: The platforms of this Game.
        :rtype: List[GamePlatformsInner]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this Game.


        :param platforms: The platforms of this Game.
        :type platforms: List[GamePlatformsInner]
        """

        self._platforms = platforms

    @property
    def playtime(self):
        """Gets the playtime of this Game.

        in hours

        :return: The playtime of this Game.
        :rtype: int
        """
        return self._playtime

    @playtime.setter
    def playtime(self, playtime):
        """Sets the playtime of this Game.

        in hours

        :param playtime: The playtime of this Game.
        :type playtime: int
        """

        self._playtime = playtime

    @property
    def rating(self):
        """Gets the rating of this Game.


        :return: The rating of this Game.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Game.


        :param rating: The rating of this Game.
        :type rating: float
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def rating_top(self):
        """Gets the rating_top of this Game.


        :return: The rating_top of this Game.
        :rtype: int
        """
        return self._rating_top

    @rating_top.setter
    def rating_top(self, rating_top):
        """Sets the rating_top of this Game.


        :param rating_top: The rating_top of this Game.
        :type rating_top: int
        """

        self._rating_top = rating_top

    @property
    def ratings(self):
        """Gets the ratings of this Game.


        :return: The ratings of this Game.
        :rtype: object
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this Game.


        :param ratings: The ratings of this Game.
        :type ratings: object
        """

        self._ratings = ratings

    @property
    def ratings_count(self):
        """Gets the ratings_count of this Game.


        :return: The ratings_count of this Game.
        :rtype: int
        """
        return self._ratings_count

    @ratings_count.setter
    def ratings_count(self, ratings_count):
        """Sets the ratings_count of this Game.


        :param ratings_count: The ratings_count of this Game.
        :type ratings_count: int
        """

        self._ratings_count = ratings_count

    @property
    def released(self):
        """Gets the released of this Game.


        :return: The released of this Game.
        :rtype: date
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this Game.


        :param released: The released of this Game.
        :type released: date
        """

        self._released = released

    @property
    def reviews_text_count(self):
        """Gets the reviews_text_count of this Game.


        :return: The reviews_text_count of this Game.
        :rtype: str
        """
        return self._reviews_text_count

    @reviews_text_count.setter
    def reviews_text_count(self, reviews_text_count):
        """Sets the reviews_text_count of this Game.


        :param reviews_text_count: The reviews_text_count of this Game.
        :type reviews_text_count: str
        """

        self._reviews_text_count = reviews_text_count

    @property
    def slug(self):
        """Gets the slug of this Game.


        :return: The slug of this Game.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Game.


        :param slug: The slug of this Game.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def suggestions_count(self):
        """Gets the suggestions_count of this Game.


        :return: The suggestions_count of this Game.
        :rtype: int
        """
        return self._suggestions_count

    @suggestions_count.setter
    def suggestions_count(self, suggestions_count):
        """Sets the suggestions_count of this Game.


        :param suggestions_count: The suggestions_count of this Game.
        :type suggestions_count: int
        """

        self._suggestions_count = suggestions_count

    @property
    def tba(self):
        """Gets the tba of this Game.


        :return: The tba of this Game.
        :rtype: bool
        """
        return self._tba

    @tba.setter
    def tba(self, tba):
        """Sets the tba of this Game.


        :param tba: The tba of this Game.
        :type tba: bool
        """

        self._tba = tba

    @property
    def updated(self):
        """Gets the updated of this Game.


        :return: The updated of this Game.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Game.


        :param updated: The updated of this Game.
        :type updated: datetime
        """

        self._updated = updated
