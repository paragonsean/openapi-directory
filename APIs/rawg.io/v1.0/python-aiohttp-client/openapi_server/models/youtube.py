# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Youtube(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_title: str=None, comments_count: int=None, created: datetime=None, description: str=None, dislike_count: int=None, external_id: str=None, favorite_count: int=None, id: int=None, like_count: int=None, name: str=None, thumbnails: object=None, view_count: int=None):
        """Youtube - a model defined in OpenAPI

        :param channel_id: The channel_id of this Youtube.
        :param channel_title: The channel_title of this Youtube.
        :param comments_count: The comments_count of this Youtube.
        :param created: The created of this Youtube.
        :param description: The description of this Youtube.
        :param dislike_count: The dislike_count of this Youtube.
        :param external_id: The external_id of this Youtube.
        :param favorite_count: The favorite_count of this Youtube.
        :param id: The id of this Youtube.
        :param like_count: The like_count of this Youtube.
        :param name: The name of this Youtube.
        :param thumbnails: The thumbnails of this Youtube.
        :param view_count: The view_count of this Youtube.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_title': str,
            'comments_count': int,
            'created': datetime,
            'description': str,
            'dislike_count': int,
            'external_id': str,
            'favorite_count': int,
            'id': int,
            'like_count': int,
            'name': str,
            'thumbnails': object,
            'view_count': int
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'channel_title': 'channel_title',
            'comments_count': 'comments_count',
            'created': 'created',
            'description': 'description',
            'dislike_count': 'dislike_count',
            'external_id': 'external_id',
            'favorite_count': 'favorite_count',
            'id': 'id',
            'like_count': 'like_count',
            'name': 'name',
            'thumbnails': 'thumbnails',
            'view_count': 'view_count'
        }

        self._channel_id = channel_id
        self._channel_title = channel_title
        self._comments_count = comments_count
        self._created = created
        self._description = description
        self._dislike_count = dislike_count
        self._external_id = external_id
        self._favorite_count = favorite_count
        self._id = id
        self._like_count = like_count
        self._name = name
        self._thumbnails = thumbnails
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Youtube':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Youtube of this Youtube.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this Youtube.


        :return: The channel_id of this Youtube.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Youtube.


        :param channel_id: The channel_id of this Youtube.
        :type channel_id: str
        """
        if channel_id is not None and len(channel_id) < 1:
            raise ValueError("Invalid value for `channel_id`, length must be greater than or equal to `1`")

        self._channel_id = channel_id

    @property
    def channel_title(self):
        """Gets the channel_title of this Youtube.


        :return: The channel_title of this Youtube.
        :rtype: str
        """
        return self._channel_title

    @channel_title.setter
    def channel_title(self, channel_title):
        """Sets the channel_title of this Youtube.


        :param channel_title: The channel_title of this Youtube.
        :type channel_title: str
        """
        if channel_title is not None and len(channel_title) < 1:
            raise ValueError("Invalid value for `channel_title`, length must be greater than or equal to `1`")

        self._channel_title = channel_title

    @property
    def comments_count(self):
        """Gets the comments_count of this Youtube.


        :return: The comments_count of this Youtube.
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count):
        """Sets the comments_count of this Youtube.


        :param comments_count: The comments_count of this Youtube.
        :type comments_count: int
        """

        self._comments_count = comments_count

    @property
    def created(self):
        """Gets the created of this Youtube.


        :return: The created of this Youtube.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Youtube.


        :param created: The created of this Youtube.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Youtube.


        :return: The description of this Youtube.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Youtube.


        :param description: The description of this Youtube.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def dislike_count(self):
        """Gets the dislike_count of this Youtube.


        :return: The dislike_count of this Youtube.
        :rtype: int
        """
        return self._dislike_count

    @dislike_count.setter
    def dislike_count(self, dislike_count):
        """Sets the dislike_count of this Youtube.


        :param dislike_count: The dislike_count of this Youtube.
        :type dislike_count: int
        """

        self._dislike_count = dislike_count

    @property
    def external_id(self):
        """Gets the external_id of this Youtube.


        :return: The external_id of this Youtube.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Youtube.


        :param external_id: The external_id of this Youtube.
        :type external_id: str
        """
        if external_id is not None and len(external_id) < 1:
            raise ValueError("Invalid value for `external_id`, length must be greater than or equal to `1`")

        self._external_id = external_id

    @property
    def favorite_count(self):
        """Gets the favorite_count of this Youtube.


        :return: The favorite_count of this Youtube.
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """Sets the favorite_count of this Youtube.


        :param favorite_count: The favorite_count of this Youtube.
        :type favorite_count: int
        """

        self._favorite_count = favorite_count

    @property
    def id(self):
        """Gets the id of this Youtube.


        :return: The id of this Youtube.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Youtube.


        :param id: The id of this Youtube.
        :type id: int
        """

        self._id = id

    @property
    def like_count(self):
        """Gets the like_count of this Youtube.


        :return: The like_count of this Youtube.
        :rtype: int
        """
        return self._like_count

    @like_count.setter
    def like_count(self, like_count):
        """Sets the like_count of this Youtube.


        :param like_count: The like_count of this Youtube.
        :type like_count: int
        """

        self._like_count = like_count

    @property
    def name(self):
        """Gets the name of this Youtube.


        :return: The name of this Youtube.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Youtube.


        :param name: The name of this Youtube.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def thumbnails(self):
        """Gets the thumbnails of this Youtube.


        :return: The thumbnails of this Youtube.
        :rtype: object
        """
        return self._thumbnails

    @thumbnails.setter
    def thumbnails(self, thumbnails):
        """Sets the thumbnails of this Youtube.


        :param thumbnails: The thumbnails of this Youtube.
        :type thumbnails: object
        """

        self._thumbnails = thumbnails

    @property
    def view_count(self):
        """Gets the view_count of this Youtube.


        :return: The view_count of this Youtube.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this Youtube.


        :param view_count: The view_count of this Youtube.
        :type view_count: int
        """

        self._view_count = view_count
