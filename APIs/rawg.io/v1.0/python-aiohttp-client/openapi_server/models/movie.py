# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Movie(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, id: int=None, name: str=None, preview: str=None):
        """Movie - a model defined in OpenAPI

        :param data: The data of this Movie.
        :param id: The id of this Movie.
        :param name: The name of this Movie.
        :param preview: The preview of this Movie.
        """
        self.openapi_types = {
            'data': object,
            'id': int,
            'name': str,
            'preview': str
        }

        self.attribute_map = {
            'data': 'data',
            'id': 'id',
            'name': 'name',
            'preview': 'preview'
        }

        self._data = data
        self._id = id
        self._name = name
        self._preview = preview

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Movie':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Movie of this Movie.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Movie.


        :return: The data of this Movie.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Movie.


        :param data: The data of this Movie.
        :type data: object
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this Movie.


        :return: The id of this Movie.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Movie.


        :param id: The id of this Movie.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Movie.


        :return: The name of this Movie.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Movie.


        :param name: The name of this Movie.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def preview(self):
        """Gets the preview of this Movie.


        :return: The preview of this Movie.
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this Movie.


        :param preview: The preview of this Movie.
        :type preview: str
        """

        self._preview = preview
