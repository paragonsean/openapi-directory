# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Twitch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, external_id: int=None, id: int=None, language: str=None, name: str=None, published: datetime=None, thumbnail: str=None, view_count: int=None):
        """Twitch - a model defined in OpenAPI

        :param created: The created of this Twitch.
        :param description: The description of this Twitch.
        :param external_id: The external_id of this Twitch.
        :param id: The id of this Twitch.
        :param language: The language of this Twitch.
        :param name: The name of this Twitch.
        :param published: The published of this Twitch.
        :param thumbnail: The thumbnail of this Twitch.
        :param view_count: The view_count of this Twitch.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'external_id': int,
            'id': int,
            'language': str,
            'name': str,
            'published': datetime,
            'thumbnail': str,
            'view_count': int
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'external_id': 'external_id',
            'id': 'id',
            'language': 'language',
            'name': 'name',
            'published': 'published',
            'thumbnail': 'thumbnail',
            'view_count': 'view_count'
        }

        self._created = created
        self._description = description
        self._external_id = external_id
        self._id = id
        self._language = language
        self._name = name
        self._published = published
        self._thumbnail = thumbnail
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Twitch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Twitch of this Twitch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Twitch.


        :return: The created of this Twitch.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Twitch.


        :param created: The created of this Twitch.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Twitch.


        :return: The description of this Twitch.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Twitch.


        :param description: The description of this Twitch.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this Twitch.


        :return: The external_id of this Twitch.
        :rtype: int
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Twitch.


        :param external_id: The external_id of this Twitch.
        :type external_id: int
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this Twitch.


        :return: The id of this Twitch.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Twitch.


        :param id: The id of this Twitch.
        :type id: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Twitch.


        :return: The language of this Twitch.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Twitch.


        :param language: The language of this Twitch.
        :type language: str
        """
        if language is not None and len(language) < 1:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this Twitch.


        :return: The name of this Twitch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Twitch.


        :param name: The name of this Twitch.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def published(self):
        """Gets the published of this Twitch.


        :return: The published of this Twitch.
        :rtype: datetime
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Twitch.


        :param published: The published of this Twitch.
        :type published: datetime
        """

        self._published = published

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Twitch.


        :return: The thumbnail of this Twitch.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Twitch.


        :param thumbnail: The thumbnail of this Twitch.
        :type thumbnail: str
        """
        if thumbnail is not None and len(thumbnail) < 1:
            raise ValueError("Invalid value for `thumbnail`, length must be greater than or equal to `1`")

        self._thumbnail = thumbnail

    @property
    def view_count(self):
        """Gets the view_count of this Twitch.


        :return: The view_count of this Twitch.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this Twitch.


        :param view_count: The view_count of this Twitch.
        :type view_count: int
        """

        self._view_count = view_count
