# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.game_esrb_rating import GameEsrbRating
from openapi_server.models.game_platform_metacritic import GamePlatformMetacritic
from openapi_server.models.game_platforms_inner import GamePlatformsInner
import re
from openapi_server import util


class GameSingle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, achievements_count: int=None, added: int=None, added_by_status: object=None, additions_count: int=None, alternative_names: List[str]=None, background_image: str=None, background_image_additional: str=None, creators_count: int=None, description: str=None, esrb_rating: GameEsrbRating=None, game_series_count: int=None, id: int=None, metacritic: int=None, metacritic_platforms: List[GamePlatformMetacritic]=None, metacritic_url: str=None, movies_count: int=None, name: str=None, name_original: str=None, parent_achievements_count: str=None, parents_count: int=None, platforms: List[GamePlatformsInner]=None, playtime: int=None, rating: float=None, rating_top: int=None, ratings: object=None, ratings_count: int=None, reactions: object=None, reddit_count: int=None, reddit_description: str=None, reddit_logo: str=None, reddit_name: str=None, reddit_url: str=None, released: date=None, reviews_text_count: str=None, screenshots_count: int=None, slug: str=None, suggestions_count: int=None, tba: bool=None, twitch_count: str=None, updated: datetime=None, website: str=None, youtube_count: str=None):
        """GameSingle - a model defined in OpenAPI

        :param achievements_count: The achievements_count of this GameSingle.
        :param added: The added of this GameSingle.
        :param added_by_status: The added_by_status of this GameSingle.
        :param additions_count: The additions_count of this GameSingle.
        :param alternative_names: The alternative_names of this GameSingle.
        :param background_image: The background_image of this GameSingle.
        :param background_image_additional: The background_image_additional of this GameSingle.
        :param creators_count: The creators_count of this GameSingle.
        :param description: The description of this GameSingle.
        :param esrb_rating: The esrb_rating of this GameSingle.
        :param game_series_count: The game_series_count of this GameSingle.
        :param id: The id of this GameSingle.
        :param metacritic: The metacritic of this GameSingle.
        :param metacritic_platforms: The metacritic_platforms of this GameSingle.
        :param metacritic_url: The metacritic_url of this GameSingle.
        :param movies_count: The movies_count of this GameSingle.
        :param name: The name of this GameSingle.
        :param name_original: The name_original of this GameSingle.
        :param parent_achievements_count: The parent_achievements_count of this GameSingle.
        :param parents_count: The parents_count of this GameSingle.
        :param platforms: The platforms of this GameSingle.
        :param playtime: The playtime of this GameSingle.
        :param rating: The rating of this GameSingle.
        :param rating_top: The rating_top of this GameSingle.
        :param ratings: The ratings of this GameSingle.
        :param ratings_count: The ratings_count of this GameSingle.
        :param reactions: The reactions of this GameSingle.
        :param reddit_count: The reddit_count of this GameSingle.
        :param reddit_description: The reddit_description of this GameSingle.
        :param reddit_logo: The reddit_logo of this GameSingle.
        :param reddit_name: The reddit_name of this GameSingle.
        :param reddit_url: The reddit_url of this GameSingle.
        :param released: The released of this GameSingle.
        :param reviews_text_count: The reviews_text_count of this GameSingle.
        :param screenshots_count: The screenshots_count of this GameSingle.
        :param slug: The slug of this GameSingle.
        :param suggestions_count: The suggestions_count of this GameSingle.
        :param tba: The tba of this GameSingle.
        :param twitch_count: The twitch_count of this GameSingle.
        :param updated: The updated of this GameSingle.
        :param website: The website of this GameSingle.
        :param youtube_count: The youtube_count of this GameSingle.
        """
        self.openapi_types = {
            'achievements_count': int,
            'added': int,
            'added_by_status': object,
            'additions_count': int,
            'alternative_names': List[str],
            'background_image': str,
            'background_image_additional': str,
            'creators_count': int,
            'description': str,
            'esrb_rating': GameEsrbRating,
            'game_series_count': int,
            'id': int,
            'metacritic': int,
            'metacritic_platforms': List[GamePlatformMetacritic],
            'metacritic_url': str,
            'movies_count': int,
            'name': str,
            'name_original': str,
            'parent_achievements_count': str,
            'parents_count': int,
            'platforms': List[GamePlatformsInner],
            'playtime': int,
            'rating': float,
            'rating_top': int,
            'ratings': object,
            'ratings_count': int,
            'reactions': object,
            'reddit_count': int,
            'reddit_description': str,
            'reddit_logo': str,
            'reddit_name': str,
            'reddit_url': str,
            'released': date,
            'reviews_text_count': str,
            'screenshots_count': int,
            'slug': str,
            'suggestions_count': int,
            'tba': bool,
            'twitch_count': str,
            'updated': datetime,
            'website': str,
            'youtube_count': str
        }

        self.attribute_map = {
            'achievements_count': 'achievements_count',
            'added': 'added',
            'added_by_status': 'added_by_status',
            'additions_count': 'additions_count',
            'alternative_names': 'alternative_names',
            'background_image': 'background_image',
            'background_image_additional': 'background_image_additional',
            'creators_count': 'creators_count',
            'description': 'description',
            'esrb_rating': 'esrb_rating',
            'game_series_count': 'game_series_count',
            'id': 'id',
            'metacritic': 'metacritic',
            'metacritic_platforms': 'metacritic_platforms',
            'metacritic_url': 'metacritic_url',
            'movies_count': 'movies_count',
            'name': 'name',
            'name_original': 'name_original',
            'parent_achievements_count': 'parent_achievements_count',
            'parents_count': 'parents_count',
            'platforms': 'platforms',
            'playtime': 'playtime',
            'rating': 'rating',
            'rating_top': 'rating_top',
            'ratings': 'ratings',
            'ratings_count': 'ratings_count',
            'reactions': 'reactions',
            'reddit_count': 'reddit_count',
            'reddit_description': 'reddit_description',
            'reddit_logo': 'reddit_logo',
            'reddit_name': 'reddit_name',
            'reddit_url': 'reddit_url',
            'released': 'released',
            'reviews_text_count': 'reviews_text_count',
            'screenshots_count': 'screenshots_count',
            'slug': 'slug',
            'suggestions_count': 'suggestions_count',
            'tba': 'tba',
            'twitch_count': 'twitch_count',
            'updated': 'updated',
            'website': 'website',
            'youtube_count': 'youtube_count'
        }

        self._achievements_count = achievements_count
        self._added = added
        self._added_by_status = added_by_status
        self._additions_count = additions_count
        self._alternative_names = alternative_names
        self._background_image = background_image
        self._background_image_additional = background_image_additional
        self._creators_count = creators_count
        self._description = description
        self._esrb_rating = esrb_rating
        self._game_series_count = game_series_count
        self._id = id
        self._metacritic = metacritic
        self._metacritic_platforms = metacritic_platforms
        self._metacritic_url = metacritic_url
        self._movies_count = movies_count
        self._name = name
        self._name_original = name_original
        self._parent_achievements_count = parent_achievements_count
        self._parents_count = parents_count
        self._platforms = platforms
        self._playtime = playtime
        self._rating = rating
        self._rating_top = rating_top
        self._ratings = ratings
        self._ratings_count = ratings_count
        self._reactions = reactions
        self._reddit_count = reddit_count
        self._reddit_description = reddit_description
        self._reddit_logo = reddit_logo
        self._reddit_name = reddit_name
        self._reddit_url = reddit_url
        self._released = released
        self._reviews_text_count = reviews_text_count
        self._screenshots_count = screenshots_count
        self._slug = slug
        self._suggestions_count = suggestions_count
        self._tba = tba
        self._twitch_count = twitch_count
        self._updated = updated
        self._website = website
        self._youtube_count = youtube_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GameSingle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GameSingle of this GameSingle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def achievements_count(self):
        """Gets the achievements_count of this GameSingle.


        :return: The achievements_count of this GameSingle.
        :rtype: int
        """
        return self._achievements_count

    @achievements_count.setter
    def achievements_count(self, achievements_count):
        """Sets the achievements_count of this GameSingle.


        :param achievements_count: The achievements_count of this GameSingle.
        :type achievements_count: int
        """

        self._achievements_count = achievements_count

    @property
    def added(self):
        """Gets the added of this GameSingle.


        :return: The added of this GameSingle.
        :rtype: int
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this GameSingle.


        :param added: The added of this GameSingle.
        :type added: int
        """

        self._added = added

    @property
    def added_by_status(self):
        """Gets the added_by_status of this GameSingle.


        :return: The added_by_status of this GameSingle.
        :rtype: object
        """
        return self._added_by_status

    @added_by_status.setter
    def added_by_status(self, added_by_status):
        """Sets the added_by_status of this GameSingle.


        :param added_by_status: The added_by_status of this GameSingle.
        :type added_by_status: object
        """

        self._added_by_status = added_by_status

    @property
    def additions_count(self):
        """Gets the additions_count of this GameSingle.


        :return: The additions_count of this GameSingle.
        :rtype: int
        """
        return self._additions_count

    @additions_count.setter
    def additions_count(self, additions_count):
        """Sets the additions_count of this GameSingle.


        :param additions_count: The additions_count of this GameSingle.
        :type additions_count: int
        """

        self._additions_count = additions_count

    @property
    def alternative_names(self):
        """Gets the alternative_names of this GameSingle.


        :return: The alternative_names of this GameSingle.
        :rtype: List[str]
        """
        return self._alternative_names

    @alternative_names.setter
    def alternative_names(self, alternative_names):
        """Sets the alternative_names of this GameSingle.


        :param alternative_names: The alternative_names of this GameSingle.
        :type alternative_names: List[str]
        """

        self._alternative_names = alternative_names

    @property
    def background_image(self):
        """Gets the background_image of this GameSingle.


        :return: The background_image of this GameSingle.
        :rtype: str
        """
        return self._background_image

    @background_image.setter
    def background_image(self, background_image):
        """Sets the background_image of this GameSingle.


        :param background_image: The background_image of this GameSingle.
        :type background_image: str
        """

        self._background_image = background_image

    @property
    def background_image_additional(self):
        """Gets the background_image_additional of this GameSingle.


        :return: The background_image_additional of this GameSingle.
        :rtype: str
        """
        return self._background_image_additional

    @background_image_additional.setter
    def background_image_additional(self, background_image_additional):
        """Sets the background_image_additional of this GameSingle.


        :param background_image_additional: The background_image_additional of this GameSingle.
        :type background_image_additional: str
        """

        self._background_image_additional = background_image_additional

    @property
    def creators_count(self):
        """Gets the creators_count of this GameSingle.


        :return: The creators_count of this GameSingle.
        :rtype: int
        """
        return self._creators_count

    @creators_count.setter
    def creators_count(self, creators_count):
        """Sets the creators_count of this GameSingle.


        :param creators_count: The creators_count of this GameSingle.
        :type creators_count: int
        """

        self._creators_count = creators_count

    @property
    def description(self):
        """Gets the description of this GameSingle.


        :return: The description of this GameSingle.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GameSingle.


        :param description: The description of this GameSingle.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def esrb_rating(self):
        """Gets the esrb_rating of this GameSingle.


        :return: The esrb_rating of this GameSingle.
        :rtype: GameEsrbRating
        """
        return self._esrb_rating

    @esrb_rating.setter
    def esrb_rating(self, esrb_rating):
        """Sets the esrb_rating of this GameSingle.


        :param esrb_rating: The esrb_rating of this GameSingle.
        :type esrb_rating: GameEsrbRating
        """

        self._esrb_rating = esrb_rating

    @property
    def game_series_count(self):
        """Gets the game_series_count of this GameSingle.


        :return: The game_series_count of this GameSingle.
        :rtype: int
        """
        return self._game_series_count

    @game_series_count.setter
    def game_series_count(self, game_series_count):
        """Sets the game_series_count of this GameSingle.


        :param game_series_count: The game_series_count of this GameSingle.
        :type game_series_count: int
        """

        self._game_series_count = game_series_count

    @property
    def id(self):
        """Gets the id of this GameSingle.


        :return: The id of this GameSingle.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GameSingle.


        :param id: The id of this GameSingle.
        :type id: int
        """

        self._id = id

    @property
    def metacritic(self):
        """Gets the metacritic of this GameSingle.


        :return: The metacritic of this GameSingle.
        :rtype: int
        """
        return self._metacritic

    @metacritic.setter
    def metacritic(self, metacritic):
        """Sets the metacritic of this GameSingle.


        :param metacritic: The metacritic of this GameSingle.
        :type metacritic: int
        """

        self._metacritic = metacritic

    @property
    def metacritic_platforms(self):
        """Gets the metacritic_platforms of this GameSingle.


        :return: The metacritic_platforms of this GameSingle.
        :rtype: List[GamePlatformMetacritic]
        """
        return self._metacritic_platforms

    @metacritic_platforms.setter
    def metacritic_platforms(self, metacritic_platforms):
        """Sets the metacritic_platforms of this GameSingle.


        :param metacritic_platforms: The metacritic_platforms of this GameSingle.
        :type metacritic_platforms: List[GamePlatformMetacritic]
        """

        self._metacritic_platforms = metacritic_platforms

    @property
    def metacritic_url(self):
        """Gets the metacritic_url of this GameSingle.

        For example \"http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\"

        :return: The metacritic_url of this GameSingle.
        :rtype: str
        """
        return self._metacritic_url

    @metacritic_url.setter
    def metacritic_url(self, metacritic_url):
        """Sets the metacritic_url of this GameSingle.

        For example \"http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\"

        :param metacritic_url: The metacritic_url of this GameSingle.
        :type metacritic_url: str
        """
        if metacritic_url is not None and len(metacritic_url) < 1:
            raise ValueError("Invalid value for `metacritic_url`, length must be greater than or equal to `1`")

        self._metacritic_url = metacritic_url

    @property
    def movies_count(self):
        """Gets the movies_count of this GameSingle.


        :return: The movies_count of this GameSingle.
        :rtype: int
        """
        return self._movies_count

    @movies_count.setter
    def movies_count(self, movies_count):
        """Sets the movies_count of this GameSingle.


        :param movies_count: The movies_count of this GameSingle.
        :type movies_count: int
        """

        self._movies_count = movies_count

    @property
    def name(self):
        """Gets the name of this GameSingle.


        :return: The name of this GameSingle.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GameSingle.


        :param name: The name of this GameSingle.
        :type name: str
        """
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def name_original(self):
        """Gets the name_original of this GameSingle.


        :return: The name_original of this GameSingle.
        :rtype: str
        """
        return self._name_original

    @name_original.setter
    def name_original(self, name_original):
        """Sets the name_original of this GameSingle.


        :param name_original: The name_original of this GameSingle.
        :type name_original: str
        """
        if name_original is not None and len(name_original) < 1:
            raise ValueError("Invalid value for `name_original`, length must be greater than or equal to `1`")

        self._name_original = name_original

    @property
    def parent_achievements_count(self):
        """Gets the parent_achievements_count of this GameSingle.


        :return: The parent_achievements_count of this GameSingle.
        :rtype: str
        """
        return self._parent_achievements_count

    @parent_achievements_count.setter
    def parent_achievements_count(self, parent_achievements_count):
        """Sets the parent_achievements_count of this GameSingle.


        :param parent_achievements_count: The parent_achievements_count of this GameSingle.
        :type parent_achievements_count: str
        """

        self._parent_achievements_count = parent_achievements_count

    @property
    def parents_count(self):
        """Gets the parents_count of this GameSingle.


        :return: The parents_count of this GameSingle.
        :rtype: int
        """
        return self._parents_count

    @parents_count.setter
    def parents_count(self, parents_count):
        """Sets the parents_count of this GameSingle.


        :param parents_count: The parents_count of this GameSingle.
        :type parents_count: int
        """

        self._parents_count = parents_count

    @property
    def platforms(self):
        """Gets the platforms of this GameSingle.


        :return: The platforms of this GameSingle.
        :rtype: List[GamePlatformsInner]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this GameSingle.


        :param platforms: The platforms of this GameSingle.
        :type platforms: List[GamePlatformsInner]
        """

        self._platforms = platforms

    @property
    def playtime(self):
        """Gets the playtime of this GameSingle.

        in hours

        :return: The playtime of this GameSingle.
        :rtype: int
        """
        return self._playtime

    @playtime.setter
    def playtime(self, playtime):
        """Sets the playtime of this GameSingle.

        in hours

        :param playtime: The playtime of this GameSingle.
        :type playtime: int
        """

        self._playtime = playtime

    @property
    def rating(self):
        """Gets the rating of this GameSingle.


        :return: The rating of this GameSingle.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this GameSingle.


        :param rating: The rating of this GameSingle.
        :type rating: float
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")

        self._rating = rating

    @property
    def rating_top(self):
        """Gets the rating_top of this GameSingle.


        :return: The rating_top of this GameSingle.
        :rtype: int
        """
        return self._rating_top

    @rating_top.setter
    def rating_top(self, rating_top):
        """Sets the rating_top of this GameSingle.


        :param rating_top: The rating_top of this GameSingle.
        :type rating_top: int
        """

        self._rating_top = rating_top

    @property
    def ratings(self):
        """Gets the ratings of this GameSingle.


        :return: The ratings of this GameSingle.
        :rtype: object
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this GameSingle.


        :param ratings: The ratings of this GameSingle.
        :type ratings: object
        """

        self._ratings = ratings

    @property
    def ratings_count(self):
        """Gets the ratings_count of this GameSingle.


        :return: The ratings_count of this GameSingle.
        :rtype: int
        """
        return self._ratings_count

    @ratings_count.setter
    def ratings_count(self, ratings_count):
        """Sets the ratings_count of this GameSingle.


        :param ratings_count: The ratings_count of this GameSingle.
        :type ratings_count: int
        """

        self._ratings_count = ratings_count

    @property
    def reactions(self):
        """Gets the reactions of this GameSingle.


        :return: The reactions of this GameSingle.
        :rtype: object
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this GameSingle.


        :param reactions: The reactions of this GameSingle.
        :type reactions: object
        """

        self._reactions = reactions

    @property
    def reddit_count(self):
        """Gets the reddit_count of this GameSingle.


        :return: The reddit_count of this GameSingle.
        :rtype: int
        """
        return self._reddit_count

    @reddit_count.setter
    def reddit_count(self, reddit_count):
        """Sets the reddit_count of this GameSingle.


        :param reddit_count: The reddit_count of this GameSingle.
        :type reddit_count: int
        """

        self._reddit_count = reddit_count

    @property
    def reddit_description(self):
        """Gets the reddit_description of this GameSingle.


        :return: The reddit_description of this GameSingle.
        :rtype: str
        """
        return self._reddit_description

    @reddit_description.setter
    def reddit_description(self, reddit_description):
        """Sets the reddit_description of this GameSingle.


        :param reddit_description: The reddit_description of this GameSingle.
        :type reddit_description: str
        """
        if reddit_description is not None and len(reddit_description) < 1:
            raise ValueError("Invalid value for `reddit_description`, length must be greater than or equal to `1`")

        self._reddit_description = reddit_description

    @property
    def reddit_logo(self):
        """Gets the reddit_logo of this GameSingle.


        :return: The reddit_logo of this GameSingle.
        :rtype: str
        """
        return self._reddit_logo

    @reddit_logo.setter
    def reddit_logo(self, reddit_logo):
        """Sets the reddit_logo of this GameSingle.


        :param reddit_logo: The reddit_logo of this GameSingle.
        :type reddit_logo: str
        """
        if reddit_logo is not None and len(reddit_logo) < 1:
            raise ValueError("Invalid value for `reddit_logo`, length must be greater than or equal to `1`")

        self._reddit_logo = reddit_logo

    @property
    def reddit_name(self):
        """Gets the reddit_name of this GameSingle.


        :return: The reddit_name of this GameSingle.
        :rtype: str
        """
        return self._reddit_name

    @reddit_name.setter
    def reddit_name(self, reddit_name):
        """Sets the reddit_name of this GameSingle.


        :param reddit_name: The reddit_name of this GameSingle.
        :type reddit_name: str
        """
        if reddit_name is not None and len(reddit_name) < 1:
            raise ValueError("Invalid value for `reddit_name`, length must be greater than or equal to `1`")

        self._reddit_name = reddit_name

    @property
    def reddit_url(self):
        """Gets the reddit_url of this GameSingle.

        For example \"https://www.reddit.com/r/uncharted/\" or \"uncharted\"

        :return: The reddit_url of this GameSingle.
        :rtype: str
        """
        return self._reddit_url

    @reddit_url.setter
    def reddit_url(self, reddit_url):
        """Sets the reddit_url of this GameSingle.

        For example \"https://www.reddit.com/r/uncharted/\" or \"uncharted\"

        :param reddit_url: The reddit_url of this GameSingle.
        :type reddit_url: str
        """
        if reddit_url is not None and len(reddit_url) < 1:
            raise ValueError("Invalid value for `reddit_url`, length must be greater than or equal to `1`")

        self._reddit_url = reddit_url

    @property
    def released(self):
        """Gets the released of this GameSingle.


        :return: The released of this GameSingle.
        :rtype: date
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this GameSingle.


        :param released: The released of this GameSingle.
        :type released: date
        """

        self._released = released

    @property
    def reviews_text_count(self):
        """Gets the reviews_text_count of this GameSingle.


        :return: The reviews_text_count of this GameSingle.
        :rtype: str
        """
        return self._reviews_text_count

    @reviews_text_count.setter
    def reviews_text_count(self, reviews_text_count):
        """Sets the reviews_text_count of this GameSingle.


        :param reviews_text_count: The reviews_text_count of this GameSingle.
        :type reviews_text_count: str
        """

        self._reviews_text_count = reviews_text_count

    @property
    def screenshots_count(self):
        """Gets the screenshots_count of this GameSingle.


        :return: The screenshots_count of this GameSingle.
        :rtype: int
        """
        return self._screenshots_count

    @screenshots_count.setter
    def screenshots_count(self, screenshots_count):
        """Sets the screenshots_count of this GameSingle.


        :param screenshots_count: The screenshots_count of this GameSingle.
        :type screenshots_count: int
        """

        self._screenshots_count = screenshots_count

    @property
    def slug(self):
        """Gets the slug of this GameSingle.


        :return: The slug of this GameSingle.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GameSingle.


        :param slug: The slug of this GameSingle.
        :type slug: str
        """
        if slug is not None and len(slug) < 1:
            raise ValueError("Invalid value for `slug`, length must be greater than or equal to `1`")
        if slug is not None and not re.search(r'^[-a-zA-Z0-9_]+$', slug):
            raise ValueError("Invalid value for `slug`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")

        self._slug = slug

    @property
    def suggestions_count(self):
        """Gets the suggestions_count of this GameSingle.


        :return: The suggestions_count of this GameSingle.
        :rtype: int
        """
        return self._suggestions_count

    @suggestions_count.setter
    def suggestions_count(self, suggestions_count):
        """Sets the suggestions_count of this GameSingle.


        :param suggestions_count: The suggestions_count of this GameSingle.
        :type suggestions_count: int
        """

        self._suggestions_count = suggestions_count

    @property
    def tba(self):
        """Gets the tba of this GameSingle.


        :return: The tba of this GameSingle.
        :rtype: bool
        """
        return self._tba

    @tba.setter
    def tba(self, tba):
        """Sets the tba of this GameSingle.


        :param tba: The tba of this GameSingle.
        :type tba: bool
        """

        self._tba = tba

    @property
    def twitch_count(self):
        """Gets the twitch_count of this GameSingle.


        :return: The twitch_count of this GameSingle.
        :rtype: str
        """
        return self._twitch_count

    @twitch_count.setter
    def twitch_count(self, twitch_count):
        """Sets the twitch_count of this GameSingle.


        :param twitch_count: The twitch_count of this GameSingle.
        :type twitch_count: str
        """

        self._twitch_count = twitch_count

    @property
    def updated(self):
        """Gets the updated of this GameSingle.


        :return: The updated of this GameSingle.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GameSingle.


        :param updated: The updated of this GameSingle.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def website(self):
        """Gets the website of this GameSingle.


        :return: The website of this GameSingle.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this GameSingle.


        :param website: The website of this GameSingle.
        :type website: str
        """
        if website is not None and len(website) < 1:
            raise ValueError("Invalid value for `website`, length must be greater than or equal to `1`")

        self._website = website

    @property
    def youtube_count(self):
        """Gets the youtube_count of this GameSingle.


        :return: The youtube_count of this GameSingle.
        :rtype: str
        """
        return self._youtube_count

    @youtube_count.setter
    def youtube_count(self, youtube_count):
        """Sets the youtube_count of this GameSingle.


        :param youtube_count: The youtube_count of this GameSingle.
        :type youtube_count: str
        """

        self._youtube_count = youtube_count
