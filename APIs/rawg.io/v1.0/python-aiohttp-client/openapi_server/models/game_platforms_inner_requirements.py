# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GamePlatformsInnerRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum: str=None, recommended: str=None):
        """GamePlatformsInnerRequirements - a model defined in OpenAPI

        :param minimum: The minimum of this GamePlatformsInnerRequirements.
        :param recommended: The recommended of this GamePlatformsInnerRequirements.
        """
        self.openapi_types = {
            'minimum': str,
            'recommended': str
        }

        self.attribute_map = {
            'minimum': 'minimum',
            'recommended': 'recommended'
        }

        self._minimum = minimum
        self._recommended = recommended

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GamePlatformsInnerRequirements':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Game_platforms_inner_requirements of this GamePlatformsInnerRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum(self):
        """Gets the minimum of this GamePlatformsInnerRequirements.


        :return: The minimum of this GamePlatformsInnerRequirements.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this GamePlatformsInnerRequirements.


        :param minimum: The minimum of this GamePlatformsInnerRequirements.
        :type minimum: str
        """

        self._minimum = minimum

    @property
    def recommended(self):
        """Gets the recommended of this GamePlatformsInnerRequirements.


        :return: The recommended of this GamePlatformsInnerRequirements.
        :rtype: str
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended):
        """Sets the recommended of this GamePlatformsInnerRequirements.


        :param recommended: The recommended of this GamePlatformsInnerRequirements.
        :type recommended: str
        """

        self._recommended = recommended
