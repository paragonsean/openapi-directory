# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScreenShot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, hidden: bool=False, id: int=None, image: str=None, width: int=None):
        """ScreenShot - a model defined in OpenAPI

        :param height: The height of this ScreenShot.
        :param hidden: The hidden of this ScreenShot.
        :param id: The id of this ScreenShot.
        :param image: The image of this ScreenShot.
        :param width: The width of this ScreenShot.
        """
        self.openapi_types = {
            'height': int,
            'hidden': bool,
            'id': int,
            'image': str,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'hidden': 'hidden',
            'id': 'id',
            'image': 'image',
            'width': 'width'
        }

        self._height = height
        self._hidden = hidden
        self._id = id
        self._image = image
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScreenShot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScreenShot of this ScreenShot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this ScreenShot.


        :return: The height of this ScreenShot.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ScreenShot.


        :param height: The height of this ScreenShot.
        :type height: int
        """

        self._height = height

    @property
    def hidden(self):
        """Gets the hidden of this ScreenShot.

        Set image as hidden or visible.

        :return: The hidden of this ScreenShot.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ScreenShot.

        Set image as hidden or visible.

        :param hidden: The hidden of this ScreenShot.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this ScreenShot.


        :return: The id of this ScreenShot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScreenShot.


        :param id: The id of this ScreenShot.
        :type id: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this ScreenShot.

        An image file with size up to 20 MB.

        :return: The image of this ScreenShot.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ScreenShot.

        An image file with size up to 20 MB.

        :param image: The image of this ScreenShot.
        :type image: str
        """

        self._image = image

    @property
    def width(self):
        """Gets the width of this ScreenShot.


        :return: The width of this ScreenShot.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ScreenShot.


        :param width: The width of this ScreenShot.
        :type width: int
        """

        self._width = width
