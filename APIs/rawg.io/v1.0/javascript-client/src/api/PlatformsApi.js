/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you don’t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PlatformSingle from '../model/PlatformSingle';
import PlatformsList200Response from '../model/PlatformsList200Response';
import PlatformsListsParentsList200Response from '../model/PlatformsListsParentsList200Response';

/**
* Platforms service.
* @module api/PlatformsApi
* @version v1.0
*/
export default class PlatformsApi {

    /**
    * Constructs a new PlatformsApi. 
    * @alias module:api/PlatformsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the platformsList operation.
     * @callback module:api/PlatformsApi~platformsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlatformsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of video game platforms.
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/PlatformsApi~platformsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlatformsList200Response}
     */
    platformsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformsList200Response;
      return this.apiClient.callApi(
        '/platforms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformsListsParentsList operation.
     * @callback module:api/PlatformsApi~platformsListsParentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlatformsListsParentsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of parent platforms.
     * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
     * @param {Object} opts Optional parameters
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/PlatformsApi~platformsListsParentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlatformsListsParentsList200Response}
     */
    platformsListsParentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformsListsParentsList200Response;
      return this.apiClient.callApi(
        '/platforms/lists/parents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the platformsRead operation.
     * @callback module:api/PlatformsApi~platformsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlatformSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of the platform.
     * 
     * @param {Number} id A unique integer value identifying this Platform.
     * @param {module:api/PlatformsApi~platformsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlatformSingle}
     */
    platformsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling platformsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlatformSingle;
      return this.apiClient.callApi(
        '/platforms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
