/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GameSingle from '../model/GameSingle';
import GamesDevelopmentTeamList200Response from '../model/GamesDevelopmentTeamList200Response';
import GamesList200Response from '../model/GamesList200Response';
import GamesScreenshotsList200Response from '../model/GamesScreenshotsList200Response';
import GamesStoresList200Response from '../model/GamesStoresList200Response';
import Movie from '../model/Movie';
import ParentAchievement from '../model/ParentAchievement';
import Reddit from '../model/Reddit';
import Twitch from '../model/Twitch';
import Youtube from '../model/Youtube';

/**
* Games service.
* @module api/GamesApi
* @version v1.0
*/
export default class GamesApi {

    /**
    * Constructs a new GamesApi. 
    * @alias module:api/GamesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gamesAchievementsRead operation.
     * @callback module:api/GamesApi~gamesAchievementsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParentAchievement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of game achievements.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesAchievementsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParentAchievement}
     */
    gamesAchievementsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesAchievementsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParentAchievement;
      return this.apiClient.callApi(
        '/games/{id}/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesAdditionsList operation.
     * @callback module:api/GamesApi~gamesAdditionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of DLC's for the game, GOTY and other editions, companion apps, etc.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesAdditionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesList200Response}
     */
    gamesAdditionsList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesAdditionsList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/additions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesDevelopmentTeamList operation.
     * @callback module:api/GamesApi~gamesDevelopmentTeamListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesDevelopmentTeamList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of individual creators that were part of the development team.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesDevelopmentTeamListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesDevelopmentTeamList200Response}
     */
    gamesDevelopmentTeamList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesDevelopmentTeamList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesDevelopmentTeamList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/development-team', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesGameSeriesList operation.
     * @callback module:api/GamesApi~gamesGameSeriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of games that are part of the same series.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesGameSeriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesList200Response}
     */
    gamesGameSeriesList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesGameSeriesList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/game-series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesList operation.
     * @callback module:api/GamesApi~gamesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of games.
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {String} [search] Search query.
     * @param {Boolean} [searchPrecise] Disable fuzziness for the search query.
     * @param {Boolean} [searchExact] Mark the search query as exact.
     * @param {String} [parentPlatforms] Filter by parent platforms, for example: `1,2,3`.
     * @param {String} [platforms] Filter by platforms, for example: `4,5`.
     * @param {String} [stores] Filter by stores, for example: `5,6`.
     * @param {String} [developers] Filter by developers, for example: `1612,18893` or `valve-software,feral-interactive`.
     * @param {String} [publishers] Filter by publishers, for example: `354,20987` or `electronic-arts,microsoft-studios`.
     * @param {String} [genres] Filter by genres, for example: `4,51` or `action,indie`.
     * @param {String} [tags] Filter by tags, for example: `31,7` or `singleplayer,multiplayer`.
     * @param {String} [creators] Filter by creators, for example: `78,28` or `cris-velasco,mike-morasky`.
     * @param {String} [dates] Filter by a release date, for example: `2010-01-01,2018-12-31.1960-01-01,1969-12-31`.
     * @param {String} [updated] Filter by an update date, for example: `2020-12-01,2020-12-31`.
     * @param {Number} [platformsCount] Filter by platforms count, for example: `1`.
     * @param {String} [metacritic] Filter by a metacritic rating, for example: `80,100`.
     * @param {Number} [excludeCollection] Exclude games from a particular collection, for example: `123`.
     * @param {Boolean} [excludeAdditions] Exclude additions.
     * @param {Boolean} [excludeParents] Exclude games which have additions.
     * @param {Boolean} [excludeGameSeries] Exclude games which included in a game series.
     * @param {String} [excludeStores] Exclude stores, for example: `5,6`.
     * @param {String} [ordering] Available fields: `name`, `released`, `added`, `created`, `updated`, `rating`, `metacritic`. You can reverse the sort order adding a hyphen, for example: `-released`.
     * @param {module:api/GamesApi~gamesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesList200Response}
     */
    gamesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
        'search': opts['search'],
        'search_precise': opts['searchPrecise'],
        'search_exact': opts['searchExact'],
        'parent_platforms': opts['parentPlatforms'],
        'platforms': opts['platforms'],
        'stores': opts['stores'],
        'developers': opts['developers'],
        'publishers': opts['publishers'],
        'genres': opts['genres'],
        'tags': opts['tags'],
        'creators': opts['creators'],
        'dates': opts['dates'],
        'updated': opts['updated'],
        'platforms_count': opts['platformsCount'],
        'metacritic': opts['metacritic'],
        'exclude_collection': opts['excludeCollection'],
        'exclude_additions': opts['excludeAdditions'],
        'exclude_parents': opts['excludeParents'],
        'exclude_game_series': opts['excludeGameSeries'],
        'exclude_stores': opts['excludeStores'],
        'ordering': opts['ordering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesList200Response;
      return this.apiClient.callApi(
        '/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesMoviesRead operation.
     * @callback module:api/GamesApi~gamesMoviesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Movie} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of game trailers.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesMoviesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Movie}
     */
    gamesMoviesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesMoviesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Movie;
      return this.apiClient.callApi(
        '/games/{id}/movies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesParentGamesList operation.
     * @callback module:api/GamesApi~gamesParentGamesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of parent games for DLC's and editions.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesParentGamesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesList200Response}
     */
    gamesParentGamesList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesParentGamesList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/parent-games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesRead operation.
     * @callback module:api/GamesApi~gamesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of the game.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSingle}
     */
    gamesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameSingle;
      return this.apiClient.callApi(
        '/games/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesRedditRead operation.
     * @callback module:api/GamesApi~gamesRedditReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Reddit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of most recent posts from the game's subreddit.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesRedditReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Reddit}
     */
    gamesRedditRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesRedditRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reddit;
      return this.apiClient.callApi(
        '/games/{id}/reddit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesScreenshotsList operation.
     * @callback module:api/GamesApi~gamesScreenshotsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesScreenshotsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screenshots for the game.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesScreenshotsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesScreenshotsList200Response}
     */
    gamesScreenshotsList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesScreenshotsList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesScreenshotsList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/screenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesStoresList operation.
     * @callback module:api/GamesApi~gamesStoresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GamesStoresList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get links to the stores that sell the game.
     * 
     * @param {String} gamePk 
     * @param {Object} opts Optional parameters
     * @param {String} [ordering] Which field to use when ordering the results.
     * @param {Number} [page] A page number within the paginated result set.
     * @param {Number} [pageSize] Number of results to return per page.
     * @param {module:api/GamesApi~gamesStoresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GamesStoresList200Response}
     */
    gamesStoresList(gamePk, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gamePk' is set
      if (gamePk === undefined || gamePk === null) {
        throw new Error("Missing the required parameter 'gamePk' when calling gamesStoresList");
      }

      let pathParams = {
        'game_pk': gamePk
      };
      let queryParams = {
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GamesStoresList200Response;
      return this.apiClient.callApi(
        '/games/{game_pk}/stores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesSuggestedRead operation.
     * @callback module:api/GamesApi~gamesSuggestedReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSingle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of visually similar games, available only for business and enterprise API users.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesSuggestedReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSingle}
     */
    gamesSuggestedRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesSuggestedRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameSingle;
      return this.apiClient.callApi(
        '/games/{id}/suggested', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesTwitchRead operation.
     * @callback module:api/GamesApi~gamesTwitchReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Twitch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesTwitchReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Twitch}
     */
    gamesTwitchRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesTwitchRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Twitch;
      return this.apiClient.callApi(
        '/games/{id}/twitch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gamesYoutubeRead operation.
     * @callback module:api/GamesApi~gamesYoutubeReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Youtube} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users.
     * 
     * @param {String} id An ID or a slug identifying this Game.
     * @param {module:api/GamesApi~gamesYoutubeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Youtube}
     */
    gamesYoutubeRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gamesYoutubeRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Youtube;
      return this.apiClient.callApi(
        '/games/{id}/youtube', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
