/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you don’t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CreatorRolesList200Response from './model/CreatorRolesList200Response';
import CreatorsList200Response from './model/CreatorsList200Response';
import Developer from './model/Developer';
import DeveloperSingle from './model/DeveloperSingle';
import DevelopersList200Response from './model/DevelopersList200Response';
import Game from './model/Game';
import GameEsrbRating from './model/GameEsrbRating';
import GamePersonList from './model/GamePersonList';
import GamePlatformMetacritic from './model/GamePlatformMetacritic';
import GamePlatformsInner from './model/GamePlatformsInner';
import GamePlatformsInnerPlatform from './model/GamePlatformsInnerPlatform';
import GamePlatformsInnerRequirements from './model/GamePlatformsInnerRequirements';
import GameSingle from './model/GameSingle';
import GameStoreFull from './model/GameStoreFull';
import GamesDevelopmentTeamList200Response from './model/GamesDevelopmentTeamList200Response';
import GamesList200Response from './model/GamesList200Response';
import GamesScreenshotsList200Response from './model/GamesScreenshotsList200Response';
import GamesStoresList200Response from './model/GamesStoresList200Response';
import Genre from './model/Genre';
import GenreSingle from './model/GenreSingle';
import GenresList200Response from './model/GenresList200Response';
import Movie from './model/Movie';
import ParentAchievement from './model/ParentAchievement';
import Person from './model/Person';
import PersonSingle from './model/PersonSingle';
import Platform from './model/Platform';
import PlatformParentSingle from './model/PlatformParentSingle';
import PlatformSingle from './model/PlatformSingle';
import PlatformsList200Response from './model/PlatformsList200Response';
import PlatformsListsParentsList200Response from './model/PlatformsListsParentsList200Response';
import Position from './model/Position';
import Publisher from './model/Publisher';
import PublisherSingle from './model/PublisherSingle';
import PublishersList200Response from './model/PublishersList200Response';
import Reddit from './model/Reddit';
import ScreenShot from './model/ScreenShot';
import Store from './model/Store';
import StoreSingle from './model/StoreSingle';
import StoresList200Response from './model/StoresList200Response';
import Tag from './model/Tag';
import TagSingle from './model/TagSingle';
import TagsList200Response from './model/TagsList200Response';
import Twitch from './model/Twitch';
import Youtube from './model/Youtube';
import CreatorRolesApi from './api/CreatorRolesApi';
import CreatorsApi from './api/CreatorsApi';
import DevelopersApi from './api/DevelopersApi';
import GamesApi from './api/GamesApi';
import GenresApi from './api/GenresApi';
import PlatformsApi from './api/PlatformsApi';
import PublishersApi from './api/PublishersApi';
import StoresApi from './api/StoresApi';
import TagsApi from './api/TagsApi';


/**
*  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn&#39;t. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you don’t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var RawgVideoGamesDatabaseApi = require('index'); // See note below*.
* var xxxSvc = new RawgVideoGamesDatabaseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new RawgVideoGamesDatabaseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new RawgVideoGamesDatabaseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new RawgVideoGamesDatabaseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CreatorRolesList200Response model constructor.
     * @property {module:model/CreatorRolesList200Response}
     */
    CreatorRolesList200Response,

    /**
     * The CreatorsList200Response model constructor.
     * @property {module:model/CreatorsList200Response}
     */
    CreatorsList200Response,

    /**
     * The Developer model constructor.
     * @property {module:model/Developer}
     */
    Developer,

    /**
     * The DeveloperSingle model constructor.
     * @property {module:model/DeveloperSingle}
     */
    DeveloperSingle,

    /**
     * The DevelopersList200Response model constructor.
     * @property {module:model/DevelopersList200Response}
     */
    DevelopersList200Response,

    /**
     * The Game model constructor.
     * @property {module:model/Game}
     */
    Game,

    /**
     * The GameEsrbRating model constructor.
     * @property {module:model/GameEsrbRating}
     */
    GameEsrbRating,

    /**
     * The GamePersonList model constructor.
     * @property {module:model/GamePersonList}
     */
    GamePersonList,

    /**
     * The GamePlatformMetacritic model constructor.
     * @property {module:model/GamePlatformMetacritic}
     */
    GamePlatformMetacritic,

    /**
     * The GamePlatformsInner model constructor.
     * @property {module:model/GamePlatformsInner}
     */
    GamePlatformsInner,

    /**
     * The GamePlatformsInnerPlatform model constructor.
     * @property {module:model/GamePlatformsInnerPlatform}
     */
    GamePlatformsInnerPlatform,

    /**
     * The GamePlatformsInnerRequirements model constructor.
     * @property {module:model/GamePlatformsInnerRequirements}
     */
    GamePlatformsInnerRequirements,

    /**
     * The GameSingle model constructor.
     * @property {module:model/GameSingle}
     */
    GameSingle,

    /**
     * The GameStoreFull model constructor.
     * @property {module:model/GameStoreFull}
     */
    GameStoreFull,

    /**
     * The GamesDevelopmentTeamList200Response model constructor.
     * @property {module:model/GamesDevelopmentTeamList200Response}
     */
    GamesDevelopmentTeamList200Response,

    /**
     * The GamesList200Response model constructor.
     * @property {module:model/GamesList200Response}
     */
    GamesList200Response,

    /**
     * The GamesScreenshotsList200Response model constructor.
     * @property {module:model/GamesScreenshotsList200Response}
     */
    GamesScreenshotsList200Response,

    /**
     * The GamesStoresList200Response model constructor.
     * @property {module:model/GamesStoresList200Response}
     */
    GamesStoresList200Response,

    /**
     * The Genre model constructor.
     * @property {module:model/Genre}
     */
    Genre,

    /**
     * The GenreSingle model constructor.
     * @property {module:model/GenreSingle}
     */
    GenreSingle,

    /**
     * The GenresList200Response model constructor.
     * @property {module:model/GenresList200Response}
     */
    GenresList200Response,

    /**
     * The Movie model constructor.
     * @property {module:model/Movie}
     */
    Movie,

    /**
     * The ParentAchievement model constructor.
     * @property {module:model/ParentAchievement}
     */
    ParentAchievement,

    /**
     * The Person model constructor.
     * @property {module:model/Person}
     */
    Person,

    /**
     * The PersonSingle model constructor.
     * @property {module:model/PersonSingle}
     */
    PersonSingle,

    /**
     * The Platform model constructor.
     * @property {module:model/Platform}
     */
    Platform,

    /**
     * The PlatformParentSingle model constructor.
     * @property {module:model/PlatformParentSingle}
     */
    PlatformParentSingle,

    /**
     * The PlatformSingle model constructor.
     * @property {module:model/PlatformSingle}
     */
    PlatformSingle,

    /**
     * The PlatformsList200Response model constructor.
     * @property {module:model/PlatformsList200Response}
     */
    PlatformsList200Response,

    /**
     * The PlatformsListsParentsList200Response model constructor.
     * @property {module:model/PlatformsListsParentsList200Response}
     */
    PlatformsListsParentsList200Response,

    /**
     * The Position model constructor.
     * @property {module:model/Position}
     */
    Position,

    /**
     * The Publisher model constructor.
     * @property {module:model/Publisher}
     */
    Publisher,

    /**
     * The PublisherSingle model constructor.
     * @property {module:model/PublisherSingle}
     */
    PublisherSingle,

    /**
     * The PublishersList200Response model constructor.
     * @property {module:model/PublishersList200Response}
     */
    PublishersList200Response,

    /**
     * The Reddit model constructor.
     * @property {module:model/Reddit}
     */
    Reddit,

    /**
     * The ScreenShot model constructor.
     * @property {module:model/ScreenShot}
     */
    ScreenShot,

    /**
     * The Store model constructor.
     * @property {module:model/Store}
     */
    Store,

    /**
     * The StoreSingle model constructor.
     * @property {module:model/StoreSingle}
     */
    StoreSingle,

    /**
     * The StoresList200Response model constructor.
     * @property {module:model/StoresList200Response}
     */
    StoresList200Response,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The TagSingle model constructor.
     * @property {module:model/TagSingle}
     */
    TagSingle,

    /**
     * The TagsList200Response model constructor.
     * @property {module:model/TagsList200Response}
     */
    TagsList200Response,

    /**
     * The Twitch model constructor.
     * @property {module:model/Twitch}
     */
    Twitch,

    /**
     * The Youtube model constructor.
     * @property {module:model/Youtube}
     */
    Youtube,

    /**
    * The CreatorRolesApi service constructor.
    * @property {module:api/CreatorRolesApi}
    */
    CreatorRolesApi,

    /**
    * The CreatorsApi service constructor.
    * @property {module:api/CreatorsApi}
    */
    CreatorsApi,

    /**
    * The DevelopersApi service constructor.
    * @property {module:api/DevelopersApi}
    */
    DevelopersApi,

    /**
    * The GamesApi service constructor.
    * @property {module:api/GamesApi}
    */
    GamesApi,

    /**
    * The GenresApi service constructor.
    * @property {module:api/GenresApi}
    */
    GenresApi,

    /**
    * The PlatformsApi service constructor.
    * @property {module:api/PlatformsApi}
    */
    PlatformsApi,

    /**
    * The PublishersApi service constructor.
    * @property {module:api/PublishersApi}
    */
    PublishersApi,

    /**
    * The StoresApi service constructor.
    * @property {module:api/StoresApi}
    */
    StoresApi,

    /**
    * The TagsApi service constructor.
    * @property {module:api/TagsApi}
    */
    TagsApi
};
