/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn't. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you donâ€™t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RawgVideoGamesDatabaseApi);
  }
}(this, function(expect, RawgVideoGamesDatabaseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RawgVideoGamesDatabaseApi.GameSingle();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GameSingle', function() {
    it('should create an instance of GameSingle', function() {
      // uncomment below and update the code to test GameSingle
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be.a(RawgVideoGamesDatabaseApi.GameSingle);
    });

    it('should have the property achievementsCount (base name: "achievements_count")', function() {
      // uncomment below and update the code to test the property achievementsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property added (base name: "added")', function() {
      // uncomment below and update the code to test the property added
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property addedByStatus (base name: "added_by_status")', function() {
      // uncomment below and update the code to test the property addedByStatus
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property additionsCount (base name: "additions_count")', function() {
      // uncomment below and update the code to test the property additionsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property alternativeNames (base name: "alternative_names")', function() {
      // uncomment below and update the code to test the property alternativeNames
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property backgroundImage (base name: "background_image")', function() {
      // uncomment below and update the code to test the property backgroundImage
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property backgroundImageAdditional (base name: "background_image_additional")', function() {
      // uncomment below and update the code to test the property backgroundImageAdditional
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property creatorsCount (base name: "creators_count")', function() {
      // uncomment below and update the code to test the property creatorsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property esrbRating (base name: "esrb_rating")', function() {
      // uncomment below and update the code to test the property esrbRating
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property gameSeriesCount (base name: "game_series_count")', function() {
      // uncomment below and update the code to test the property gameSeriesCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property metacritic (base name: "metacritic")', function() {
      // uncomment below and update the code to test the property metacritic
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property metacriticPlatforms (base name: "metacritic_platforms")', function() {
      // uncomment below and update the code to test the property metacriticPlatforms
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property metacriticUrl (base name: "metacritic_url")', function() {
      // uncomment below and update the code to test the property metacriticUrl
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property moviesCount (base name: "movies_count")', function() {
      // uncomment below and update the code to test the property moviesCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property nameOriginal (base name: "name_original")', function() {
      // uncomment below and update the code to test the property nameOriginal
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property parentAchievementsCount (base name: "parent_achievements_count")', function() {
      // uncomment below and update the code to test the property parentAchievementsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property parentsCount (base name: "parents_count")', function() {
      // uncomment below and update the code to test the property parentsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property platforms (base name: "platforms")', function() {
      // uncomment below and update the code to test the property platforms
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property playtime (base name: "playtime")', function() {
      // uncomment below and update the code to test the property playtime
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property ratingTop (base name: "rating_top")', function() {
      // uncomment below and update the code to test the property ratingTop
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property ratings (base name: "ratings")', function() {
      // uncomment below and update the code to test the property ratings
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property ratingsCount (base name: "ratings_count")', function() {
      // uncomment below and update the code to test the property ratingsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property reactions (base name: "reactions")', function() {
      // uncomment below and update the code to test the property reactions
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property redditCount (base name: "reddit_count")', function() {
      // uncomment below and update the code to test the property redditCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property redditDescription (base name: "reddit_description")', function() {
      // uncomment below and update the code to test the property redditDescription
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property redditLogo (base name: "reddit_logo")', function() {
      // uncomment below and update the code to test the property redditLogo
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property redditName (base name: "reddit_name")', function() {
      // uncomment below and update the code to test the property redditName
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property redditUrl (base name: "reddit_url")', function() {
      // uncomment below and update the code to test the property redditUrl
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property released (base name: "released")', function() {
      // uncomment below and update the code to test the property released
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property reviewsTextCount (base name: "reviews_text_count")', function() {
      // uncomment below and update the code to test the property reviewsTextCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property screenshotsCount (base name: "screenshots_count")', function() {
      // uncomment below and update the code to test the property screenshotsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property suggestionsCount (base name: "suggestions_count")', function() {
      // uncomment below and update the code to test the property suggestionsCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property tba (base name: "tba")', function() {
      // uncomment below and update the code to test the property tba
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property twitchCount (base name: "twitch_count")', function() {
      // uncomment below and update the code to test the property twitchCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property website (base name: "website")', function() {
      // uncomment below and update the code to test the property website
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

    it('should have the property youtubeCount (base name: "youtube_count")', function() {
      // uncomment below and update the code to test the property youtubeCount
      //var instance = new RawgVideoGamesDatabaseApi.GameSingle();
      //expect(instance).to.be();
    });

  });

}));
