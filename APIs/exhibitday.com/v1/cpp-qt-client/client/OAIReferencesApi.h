/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReferencesApi_H
#define OAI_OAIReferencesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReferencesApi : public QObject {
    Q_OBJECT

public:
    OAIReferencesApi(const int timeOut = 0);
    ~OAIReferencesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void referencesEventCostTypes0Get(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void referencesEventCustomFields0Get(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void referencesEventParticipationTypes0Get(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void referencesEventTags0Get(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void referencesUsersAndResources0Get(const QString &api_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void referencesEventCostTypes0GetCallback(OAIHttpRequestWorker *worker);
    void referencesEventCustomFields0GetCallback(OAIHttpRequestWorker *worker);
    void referencesEventParticipationTypes0GetCallback(OAIHttpRequestWorker *worker);
    void referencesEventTags0GetCallback(OAIHttpRequestWorker *worker);
    void referencesUsersAndResources0GetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void referencesEventCostTypes0GetSignal(QString summary);
    void referencesEventCustomFields0GetSignal(QString summary);
    void referencesEventParticipationTypes0GetSignal(QString summary);
    void referencesEventTags0GetSignal(QString summary);
    void referencesUsersAndResources0GetSignal(QString summary);


    void referencesEventCostTypes0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void referencesEventCustomFields0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void referencesEventParticipationTypes0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void referencesEventTags0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void referencesUsersAndResources0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use referencesEventCostTypes0GetSignalError() instead")
    void referencesEventCostTypes0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventCostTypes0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventCustomFields0GetSignalError() instead")
    void referencesEventCustomFields0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventCustomFields0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventParticipationTypes0GetSignalError() instead")
    void referencesEventParticipationTypes0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventParticipationTypes0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventTags0GetSignalError() instead")
    void referencesEventTags0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventTags0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesUsersAndResources0GetSignalError() instead")
    void referencesUsersAndResources0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesUsersAndResources0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use referencesEventCostTypes0GetSignalErrorFull() instead")
    void referencesEventCostTypes0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventCostTypes0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventCustomFields0GetSignalErrorFull() instead")
    void referencesEventCustomFields0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventCustomFields0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventParticipationTypes0GetSignalErrorFull() instead")
    void referencesEventParticipationTypes0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventParticipationTypes0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesEventTags0GetSignalErrorFull() instead")
    void referencesEventTags0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesEventTags0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use referencesUsersAndResources0GetSignalErrorFull() instead")
    void referencesUsersAndResources0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void referencesUsersAndResources0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
