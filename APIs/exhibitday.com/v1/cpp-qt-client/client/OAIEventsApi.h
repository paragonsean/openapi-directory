/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventsApi_H
#define OAI_OAIEventsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventsApi : public QObject {
    Q_OBJECT

public:
    OAIEventsApi(const int timeOut = 0);
    ~OAIEventsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  filter_by_event_name_contains_text QString [optional]
    * @param[in]  filter_by_start_date_greater_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_start_date_smaller_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_end_date_greater_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_end_date_smaller_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_event_participation_type_id double [optional]
    * @param[in]  filter_by_event_format_id double [optional]
    * @param[in]  filter_by_event_star_rating double [optional]
    * @param[in]  filter_by_event_tag QString [optional]
    * @param[in]  filter_by_custom_event_field__custom_nnnnnn QString [optional]
    * @param[in]  filter_by_integration_metadata_field_1 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_2 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_3 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_4 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_5 QString [optional]
    * @param[in]  hydrate_tasks QString [optional]
    * @param[in]  hydrate_task_sections_list QString [optional]
    * @param[in]  hydrate_custom_fields QString [optional]
    */
    virtual void events0Get(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &filter_by_event_name_contains_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_start_date_greater_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_start_date_smaller_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_end_date_greater_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_end_date_smaller_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<double> &filter_by_event_participation_type_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &filter_by_event_format_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &filter_by_event_star_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &filter_by_event_tag = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_custom_event_field__custom_nnnnnn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hydrate_tasks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hydrate_task_sections_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hydrate_custom_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  name QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  format_id double [optional]
    * @param[in]  participation_type_id double [optional]
    * @param[in]  integration_metadata_field_1 QString [optional]
    * @param[in]  integration_metadata_field_2 QString [optional]
    * @param[in]  integration_metadata_field_3 QString [optional]
    * @param[in]  integration_metadata_field_4 QString [optional]
    * @param[in]  integration_metadata_field_5 QString [optional]
    */
    virtual void events1Post(const QString &api_key, const QString &name, const QDate &start_date, const QDate &end_date, const ::OpenAPI::OptionalParam<double> &format_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &participation_type_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    * @param[in]  name QString [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  participation_type_id double [optional]
    * @param[in]  format_id double [optional]
    * @param[in]  star_rating double [optional]
    * @param[in]  website_url QString [optional]
    * @param[in]  venue_name QString [optional]
    * @param[in]  booth_size double [optional]
    * @param[in]  booth_number double [optional]
    * @param[in]  event_notes double [optional]
    * @param[in]  booth_notes double [optional]
    * @param[in]  budget_notes double [optional]
    * @param[in]  roi_notes double [optional]
    * @param[in]  budget_booth_reservation double [optional]
    * @param[in]  budget_booth_services double [optional]
    * @param[in]  budget_attendee_registrations double [optional]
    * @param[in]  budget_travel double [optional]
    * @param[in]  budget_giveaways double [optional]
    * @param[in]  budget_shipments double [optional]
    * @param[in]  budget_misc_expenses double [optional]
    * @param[in]  budget_sponsorships double [optional]
    * @param[in]  roi_num_leads double [optional]
    * @param[in]  roi_num_impressions_booth double [optional]
    * @param[in]  roi_num_impressions_sponsorships double [optional]
    * @param[in]  roi_num_impressions_media double [optional]
    * @param[in]  roi_num_meetings_existing_customers double [optional]
    * @param[in]  roi_num_meetings_new_customers double [optional]
    * @param[in]  roi_amount_actual_sales double [optional]
    * @param[in]  roi_amount_potential_sales double [optional]
    * @param[in]  integration_metadata_field_1 QString [optional]
    * @param[in]  integration_metadata_field_2 QString [optional]
    * @param[in]  integration_metadata_field_3 QString [optional]
    * @param[in]  integration_metadata_field_4 QString [optional]
    * @param[in]  integration_metadata_field_5 QString [optional]
    */
    virtual void events2Patch(const QString &api_key, const double &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<double> &participation_type_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &format_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &star_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &website_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &venue_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &booth_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &booth_number = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &event_notes = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &booth_notes = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_notes = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_notes = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_booth_reservation = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_booth_services = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_attendee_registrations = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_travel = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_giveaways = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_shipments = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_misc_expenses = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &budget_sponsorships = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_leads = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_impressions_booth = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_impressions_sponsorships = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_impressions_media = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_meetings_existing_customers = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_num_meetings_new_customers = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_amount_actual_sales = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &roi_amount_potential_sales = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void events3Delete(const QString &api_key, const double &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void eventsInfo0Get(const QString &api_key, const double &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void events0GetCallback(OAIHttpRequestWorker *worker);
    void events1PostCallback(OAIHttpRequestWorker *worker);
    void events2PatchCallback(OAIHttpRequestWorker *worker);
    void events3DeleteCallback(OAIHttpRequestWorker *worker);
    void eventsInfo0GetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void events0GetSignal(QString summary);
    void events1PostSignal(QString summary);
    void events2PatchSignal(QString summary);
    void events3DeleteSignal(QString summary);
    void eventsInfo0GetSignal(QString summary);


    void events0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void events1PostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void events2PatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void events3DeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void eventsInfo0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use events0GetSignalError() instead")
    void events0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void events0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events1PostSignalError() instead")
    void events1PostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void events1PostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events2PatchSignalError() instead")
    void events2PatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void events2PatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events3DeleteSignalError() instead")
    void events3DeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void events3DeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsInfo0GetSignalError() instead")
    void eventsInfo0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsInfo0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use events0GetSignalErrorFull() instead")
    void events0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void events0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events1PostSignalErrorFull() instead")
    void events1PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void events1PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events2PatchSignalErrorFull() instead")
    void events2PatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void events2PatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use events3DeleteSignalErrorFull() instead")
    void events3DeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void events3DeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsInfo0GetSignalErrorFull() instead")
    void eventsInfo0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsInfo0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
