/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  filter_by_event_id double [optional]
    * @param[in]  filter_by_general_tasks_only double [optional]
    * @param[in]  filter_by_incomplete_only QString [optional]
    * @param[in]  filter_by_completed_only QString [optional]
    * @param[in]  filter_by_no_due_date QString [optional]
    * @param[in]  filter_by_due_date_greater_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_due_date_smaller_than_or_equal_to QDate [optional]
    * @param[in]  filter_by_has_assignee QString [optional]
    * @param[in]  filter_by_assignee_user_id QString [optional]
    * @param[in]  filter_by_task_name_contains_text QString [optional]
    * @param[in]  filter_by_integration_metadata_field_1 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_2 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_3 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_4 QString [optional]
    * @param[in]  filter_by_integration_metadata_field_5 QString [optional]
    * @param[in]  hydrate_task_comments QString [optional]
    */
    virtual void tasks0Get(const QString &api_key, const ::OpenAPI::OptionalParam<double> &filter_by_event_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &filter_by_general_tasks_only = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &filter_by_incomplete_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_completed_only = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_no_due_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_due_date_greater_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &filter_by_due_date_smaller_than_or_equal_to = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &filter_by_has_assignee = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_assignee_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_task_name_contains_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hydrate_task_comments = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  name QString [required]
    * @param[in]  event_id double [optional]
    * @param[in]  task_section_id double [optional]
    * @param[in]  is_completed QString [optional]
    * @param[in]  due_date QDate [optional]
    * @param[in]  assignee_user_id QString [optional]
    * @param[in]  details QString [optional]
    * @param[in]  integration_metadata_field_1 QString [optional]
    * @param[in]  integration_metadata_field_2 QString [optional]
    * @param[in]  integration_metadata_field_3 QString [optional]
    * @param[in]  integration_metadata_field_4 QString [optional]
    * @param[in]  integration_metadata_field_5 QString [optional]
    */
    virtual void tasks1Post(const QString &api_key, const QString &name, const ::OpenAPI::OptionalParam<double> &event_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &task_section_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &is_completed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &due_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &assignee_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    * @param[in]  name QString [optional]
    * @param[in]  task_section_id double [optional]
    * @param[in]  is_completed QString [optional]
    * @param[in]  due_date QDate [optional]
    * @param[in]  assignee_user_id QString [optional]
    * @param[in]  details QString [optional]
    * @param[in]  integration_metadata_field_1 QString [optional]
    * @param[in]  integration_metadata_field_2 QString [optional]
    * @param[in]  integration_metadata_field_3 QString [optional]
    * @param[in]  integration_metadata_field_4 QString [optional]
    * @param[in]  integration_metadata_field_5 QString [optional]
    */
    virtual void tasks2Patch(const QString &api_key, const double &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &task_section_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &is_completed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &due_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &assignee_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &details = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void tasks3Delete(const QString &api_key, const double &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void tasksComment0Get(const QString &api_key, const double &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  task_id double [required]
    * @param[in]  comment QString [required]
    */
    virtual void tasksComment1Post(const QString &api_key, const double &task_id, const QString &comment);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    * @param[in]  comment QString [required]
    */
    virtual void tasksComment2Patch(const QString &api_key, const double &id, const QString &comment);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void tasksComment3Delete(const QString &api_key, const double &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  filter_by_event_id double [optional]
    * @param[in]  filter_by_task_id double [optional]
    * @param[in]  hydrate_task QString [optional]
    */
    virtual void tasksComments0Get(const QString &api_key, const ::OpenAPI::OptionalParam<double> &filter_by_event_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &filter_by_task_id = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &hydrate_task = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id double [required]
    */
    virtual void tasksInfo0Get(const QString &api_key, const double &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tasks0GetCallback(OAIHttpRequestWorker *worker);
    void tasks1PostCallback(OAIHttpRequestWorker *worker);
    void tasks2PatchCallback(OAIHttpRequestWorker *worker);
    void tasks3DeleteCallback(OAIHttpRequestWorker *worker);
    void tasksComment0GetCallback(OAIHttpRequestWorker *worker);
    void tasksComment1PostCallback(OAIHttpRequestWorker *worker);
    void tasksComment2PatchCallback(OAIHttpRequestWorker *worker);
    void tasksComment3DeleteCallback(OAIHttpRequestWorker *worker);
    void tasksComments0GetCallback(OAIHttpRequestWorker *worker);
    void tasksInfo0GetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tasks0GetSignal(QString summary);
    void tasks1PostSignal(QString summary);
    void tasks2PatchSignal(QString summary);
    void tasks3DeleteSignal(QString summary);
    void tasksComment0GetSignal(QString summary);
    void tasksComment1PostSignal(QString summary);
    void tasksComment2PatchSignal(QString summary);
    void tasksComment3DeleteSignal(QString summary);
    void tasksComments0GetSignal(QString summary);
    void tasksInfo0GetSignal(QString summary);


    void tasks0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasks1PostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasks2PatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasks3DeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksComment0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksComment1PostSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksComment2PatchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksComment3DeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksComments0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void tasksInfo0GetSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use tasks0GetSignalError() instead")
    void tasks0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks1PostSignalError() instead")
    void tasks1PostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks1PostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks2PatchSignalError() instead")
    void tasks2PatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks2PatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks3DeleteSignalError() instead")
    void tasks3DeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks3DeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment0GetSignalError() instead")
    void tasksComment0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment1PostSignalError() instead")
    void tasksComment1PostSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment1PostSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment2PatchSignalError() instead")
    void tasksComment2PatchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment2PatchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment3DeleteSignalError() instead")
    void tasksComment3DeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment3DeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComments0GetSignalError() instead")
    void tasksComments0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComments0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksInfo0GetSignalError() instead")
    void tasksInfo0GetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksInfo0GetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tasks0GetSignalErrorFull() instead")
    void tasks0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks1PostSignalErrorFull() instead")
    void tasks1PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks1PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks2PatchSignalErrorFull() instead")
    void tasks2PatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks2PatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasks3DeleteSignalErrorFull() instead")
    void tasks3DeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasks3DeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment0GetSignalErrorFull() instead")
    void tasksComment0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment1PostSignalErrorFull() instead")
    void tasksComment1PostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment1PostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment2PatchSignalErrorFull() instead")
    void tasksComment2PatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment2PatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComment3DeleteSignalErrorFull() instead")
    void tasksComment3DeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComment3DeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksComments0GetSignalErrorFull() instead")
    void tasksComments0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksComments0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksInfo0GetSignalErrorFull() instead")
    void tasksInfo0GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksInfo0GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
