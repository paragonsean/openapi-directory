/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIEventsApi::OAIEventsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIEventsApi::~OAIEventsApi() {
}

void OAIEventsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.exhibitday.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("events0Get", defaultConf);
    _serverIndices.insert("events0Get", 0);
    _serverConfigs.insert("events1Post", defaultConf);
    _serverIndices.insert("events1Post", 0);
    _serverConfigs.insert("events2Patch", defaultConf);
    _serverIndices.insert("events2Patch", 0);
    _serverConfigs.insert("events3Delete", defaultConf);
    _serverIndices.insert("events3Delete", 0);
    _serverConfigs.insert("eventsInfo0Get", defaultConf);
    _serverIndices.insert("eventsInfo0Get", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIEventsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIEventsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIEventsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIEventsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIEventsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIEventsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIEventsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIEventsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIEventsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIEventsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEventsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIEventsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIEventsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIEventsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIEventsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIEventsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIEventsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIEventsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIEventsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIEventsApi::events0Get(const QString &api_key, const ::OpenAPI::OptionalParam<QString> &filter_by_event_name_contains_text, const ::OpenAPI::OptionalParam<QDate> &filter_by_start_date_greater_than_or_equal_to, const ::OpenAPI::OptionalParam<QDate> &filter_by_start_date_smaller_than_or_equal_to, const ::OpenAPI::OptionalParam<QDate> &filter_by_end_date_greater_than_or_equal_to, const ::OpenAPI::OptionalParam<QDate> &filter_by_end_date_smaller_than_or_equal_to, const ::OpenAPI::OptionalParam<double> &filter_by_event_participation_type_id, const ::OpenAPI::OptionalParam<double> &filter_by_event_format_id, const ::OpenAPI::OptionalParam<double> &filter_by_event_star_rating, const ::OpenAPI::OptionalParam<QString> &filter_by_event_tag, const ::OpenAPI::OptionalParam<QString> &filter_by_custom_event_field__custom_nnnnnn, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_5, const ::OpenAPI::OptionalParam<QString> &hydrate_tasks, const ::OpenAPI::OptionalParam<QString> &hydrate_task_sections_list, const ::OpenAPI::OptionalParam<QString> &hydrate_custom_fields) {
    QString fullPath = QString(_serverConfigs["events0Get"][_serverIndices.value("events0Get")].URL()+"/v1/events/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter_by_custom_event_field__custom_nnnnnn.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_custom_event_field__custom_NNNNNN", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_custom_event_field__custom_NNNNNN")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_custom_event_field__custom_nnnnnn.stringValue()));
    }
    if (filter_by_integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_1.stringValue()));
    }
    if (filter_by_integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_2.stringValue()));
    }
    if (filter_by_integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_3.stringValue()));
    }
    if (filter_by_integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_4.stringValue()));
    }
    if (filter_by_integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    if (filter_by_event_name_contains_text.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_name_contains_text.value()).isEmpty()) {
            input.headers.insert("filter_by_event_name_contains_text", ::OpenAPI::toStringValue(filter_by_event_name_contains_text.value()));
        }
        }
    if (filter_by_start_date_greater_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_start_date_greater_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_start_date_greater_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_start_date_greater_than_or_equal_to.value()));
        }
        }
    if (filter_by_start_date_smaller_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_start_date_smaller_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_start_date_smaller_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_start_date_smaller_than_or_equal_to.value()));
        }
        }
    if (filter_by_end_date_greater_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_end_date_greater_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_end_date_greater_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_end_date_greater_than_or_equal_to.value()));
        }
        }
    if (filter_by_end_date_smaller_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_end_date_smaller_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_end_date_smaller_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_end_date_smaller_than_or_equal_to.value()));
        }
        }
    if (filter_by_event_participation_type_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_participation_type_id.value()).isEmpty()) {
            input.headers.insert("filter_by_event_participation_type_id", ::OpenAPI::toStringValue(filter_by_event_participation_type_id.value()));
        }
        }
    if (filter_by_event_format_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_format_id.value()).isEmpty()) {
            input.headers.insert("filter_by_event_format_id", ::OpenAPI::toStringValue(filter_by_event_format_id.value()));
        }
        }
    if (filter_by_event_star_rating.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_star_rating.value()).isEmpty()) {
            input.headers.insert("filter_by_event_star_rating", ::OpenAPI::toStringValue(filter_by_event_star_rating.value()));
        }
        }
    if (filter_by_event_tag.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_tag.value()).isEmpty()) {
            input.headers.insert("filter_by_event_tag", ::OpenAPI::toStringValue(filter_by_event_tag.value()));
        }
        }
    if (hydrate_tasks.hasValue())
    {
        if (!::OpenAPI::toStringValue(hydrate_tasks.value()).isEmpty()) {
            input.headers.insert("hydrate_tasks", ::OpenAPI::toStringValue(hydrate_tasks.value()));
        }
        }
    if (hydrate_task_sections_list.hasValue())
    {
        if (!::OpenAPI::toStringValue(hydrate_task_sections_list.value()).isEmpty()) {
            input.headers.insert("hydrate_task_sections_list", ::OpenAPI::toStringValue(hydrate_task_sections_list.value()));
        }
        }
    if (hydrate_custom_fields.hasValue())
    {
        if (!::OpenAPI::toStringValue(hydrate_custom_fields.value()).isEmpty()) {
            input.headers.insert("hydrate_custom_fields", ::OpenAPI::toStringValue(hydrate_custom_fields.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::events0GetCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::events0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT events0GetSignal(output);
        Q_EMIT events0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT events0GetSignalE(output, error_type, error_str);
        Q_EMIT events0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT events0GetSignalError(output, error_type, error_str);
        Q_EMIT events0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::events1Post(const QString &api_key, const QString &name, const QDate &start_date, const QDate &end_date, const ::OpenAPI::OptionalParam<double> &format_id, const ::OpenAPI::OptionalParam<double> &participation_type_id, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5) {
    QString fullPath = QString(_serverConfigs["events1Post"][_serverIndices.value("events1Post")].URL()+"/v1/events/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_1.stringValue()));
    }
    if (integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_2.stringValue()));
    }
    if (integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_3.stringValue()));
    }
    if (integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_4.stringValue()));
    }
    if (integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(name).isEmpty()) {
            input.headers.insert("name", ::OpenAPI::toStringValue(name));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(start_date).isEmpty()) {
            input.headers.insert("start_date", ::OpenAPI::toStringValue(start_date));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(end_date).isEmpty()) {
            input.headers.insert("end_date", ::OpenAPI::toStringValue(end_date));
        }
        }
    if (format_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(format_id.value()).isEmpty()) {
            input.headers.insert("format_id", ::OpenAPI::toStringValue(format_id.value()));
        }
        }
    if (participation_type_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(participation_type_id.value()).isEmpty()) {
            input.headers.insert("participation_type_id", ::OpenAPI::toStringValue(participation_type_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::events1PostCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::events1PostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT events1PostSignal(output);
        Q_EMIT events1PostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT events1PostSignalE(output, error_type, error_str);
        Q_EMIT events1PostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT events1PostSignalError(output, error_type, error_str);
        Q_EMIT events1PostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::events2Patch(const QString &api_key, const double &id, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QDate> &start_date, const ::OpenAPI::OptionalParam<QDate> &end_date, const ::OpenAPI::OptionalParam<double> &participation_type_id, const ::OpenAPI::OptionalParam<double> &format_id, const ::OpenAPI::OptionalParam<double> &star_rating, const ::OpenAPI::OptionalParam<QString> &website_url, const ::OpenAPI::OptionalParam<QString> &venue_name, const ::OpenAPI::OptionalParam<double> &booth_size, const ::OpenAPI::OptionalParam<double> &booth_number, const ::OpenAPI::OptionalParam<double> &event_notes, const ::OpenAPI::OptionalParam<double> &booth_notes, const ::OpenAPI::OptionalParam<double> &budget_notes, const ::OpenAPI::OptionalParam<double> &roi_notes, const ::OpenAPI::OptionalParam<double> &budget_booth_reservation, const ::OpenAPI::OptionalParam<double> &budget_booth_services, const ::OpenAPI::OptionalParam<double> &budget_attendee_registrations, const ::OpenAPI::OptionalParam<double> &budget_travel, const ::OpenAPI::OptionalParam<double> &budget_giveaways, const ::OpenAPI::OptionalParam<double> &budget_shipments, const ::OpenAPI::OptionalParam<double> &budget_misc_expenses, const ::OpenAPI::OptionalParam<double> &budget_sponsorships, const ::OpenAPI::OptionalParam<double> &roi_num_leads, const ::OpenAPI::OptionalParam<double> &roi_num_impressions_booth, const ::OpenAPI::OptionalParam<double> &roi_num_impressions_sponsorships, const ::OpenAPI::OptionalParam<double> &roi_num_impressions_media, const ::OpenAPI::OptionalParam<double> &roi_num_meetings_existing_customers, const ::OpenAPI::OptionalParam<double> &roi_num_meetings_new_customers, const ::OpenAPI::OptionalParam<double> &roi_amount_actual_sales, const ::OpenAPI::OptionalParam<double> &roi_amount_potential_sales, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5) {
    QString fullPath = QString(_serverConfigs["events2Patch"][_serverIndices.value("events2Patch")].URL()+"/v1/events/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (website_url.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "website_url", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("website_url")).append(querySuffix).append(QUrl::toPercentEncoding(website_url.stringValue()));
    }
    if (venue_name.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "venue_name", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("venue_name")).append(querySuffix).append(QUrl::toPercentEncoding(venue_name.stringValue()));
    }
    if (event_notes.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "event_notes", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("event_notes")).append(querySuffix).append(QUrl::toPercentEncoding(event_notes.stringValue()));
    }
    if (booth_notes.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "booth_notes", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("booth_notes")).append(querySuffix).append(QUrl::toPercentEncoding(booth_notes.stringValue()));
    }
    if (budget_notes.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "budget_notes", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("budget_notes")).append(querySuffix).append(QUrl::toPercentEncoding(budget_notes.stringValue()));
    }
    if (roi_notes.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "roi_notes", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("roi_notes")).append(querySuffix).append(QUrl::toPercentEncoding(roi_notes.stringValue()));
    }
    if (integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_1.stringValue()));
    }
    if (integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_2.stringValue()));
    }
    if (integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_3.stringValue()));
    }
    if (integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_4.stringValue()));
    }
    if (integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    if (name.hasValue())
    {
        if (!::OpenAPI::toStringValue(name.value()).isEmpty()) {
            input.headers.insert("name", ::OpenAPI::toStringValue(name.value()));
        }
        }
    if (start_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(start_date.value()).isEmpty()) {
            input.headers.insert("start_date", ::OpenAPI::toStringValue(start_date.value()));
        }
        }
    if (end_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(end_date.value()).isEmpty()) {
            input.headers.insert("end_date", ::OpenAPI::toStringValue(end_date.value()));
        }
        }
    if (participation_type_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(participation_type_id.value()).isEmpty()) {
            input.headers.insert("participation_type_id", ::OpenAPI::toStringValue(participation_type_id.value()));
        }
        }
    if (format_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(format_id.value()).isEmpty()) {
            input.headers.insert("format_id", ::OpenAPI::toStringValue(format_id.value()));
        }
        }
    if (star_rating.hasValue())
    {
        if (!::OpenAPI::toStringValue(star_rating.value()).isEmpty()) {
            input.headers.insert("star_rating", ::OpenAPI::toStringValue(star_rating.value()));
        }
        }
    if (booth_size.hasValue())
    {
        if (!::OpenAPI::toStringValue(booth_size.value()).isEmpty()) {
            input.headers.insert("booth_size", ::OpenAPI::toStringValue(booth_size.value()));
        }
        }
    if (booth_number.hasValue())
    {
        if (!::OpenAPI::toStringValue(booth_number.value()).isEmpty()) {
            input.headers.insert("booth_number", ::OpenAPI::toStringValue(booth_number.value()));
        }
        }
    if (budget_booth_reservation.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_booth_reservation.value()).isEmpty()) {
            input.headers.insert("budget_booth_reservation", ::OpenAPI::toStringValue(budget_booth_reservation.value()));
        }
        }
    if (budget_booth_services.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_booth_services.value()).isEmpty()) {
            input.headers.insert("budget_booth_services", ::OpenAPI::toStringValue(budget_booth_services.value()));
        }
        }
    if (budget_attendee_registrations.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_attendee_registrations.value()).isEmpty()) {
            input.headers.insert("budget_attendee_registrations", ::OpenAPI::toStringValue(budget_attendee_registrations.value()));
        }
        }
    if (budget_travel.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_travel.value()).isEmpty()) {
            input.headers.insert("budget_travel", ::OpenAPI::toStringValue(budget_travel.value()));
        }
        }
    if (budget_giveaways.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_giveaways.value()).isEmpty()) {
            input.headers.insert("budget_giveaways", ::OpenAPI::toStringValue(budget_giveaways.value()));
        }
        }
    if (budget_shipments.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_shipments.value()).isEmpty()) {
            input.headers.insert("budget_shipments", ::OpenAPI::toStringValue(budget_shipments.value()));
        }
        }
    if (budget_misc_expenses.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_misc_expenses.value()).isEmpty()) {
            input.headers.insert("budget_misc_expenses", ::OpenAPI::toStringValue(budget_misc_expenses.value()));
        }
        }
    if (budget_sponsorships.hasValue())
    {
        if (!::OpenAPI::toStringValue(budget_sponsorships.value()).isEmpty()) {
            input.headers.insert("budget_sponsorships", ::OpenAPI::toStringValue(budget_sponsorships.value()));
        }
        }
    if (roi_num_leads.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_leads.value()).isEmpty()) {
            input.headers.insert("roi_num_leads", ::OpenAPI::toStringValue(roi_num_leads.value()));
        }
        }
    if (roi_num_impressions_booth.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_impressions_booth.value()).isEmpty()) {
            input.headers.insert("roi_num_impressions_booth", ::OpenAPI::toStringValue(roi_num_impressions_booth.value()));
        }
        }
    if (roi_num_impressions_sponsorships.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_impressions_sponsorships.value()).isEmpty()) {
            input.headers.insert("roi_num_impressions_sponsorships", ::OpenAPI::toStringValue(roi_num_impressions_sponsorships.value()));
        }
        }
    if (roi_num_impressions_media.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_impressions_media.value()).isEmpty()) {
            input.headers.insert("roi_num_impressions_media", ::OpenAPI::toStringValue(roi_num_impressions_media.value()));
        }
        }
    if (roi_num_meetings_existing_customers.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_meetings_existing_customers.value()).isEmpty()) {
            input.headers.insert("roi_num_meetings_existing_customers", ::OpenAPI::toStringValue(roi_num_meetings_existing_customers.value()));
        }
        }
    if (roi_num_meetings_new_customers.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_num_meetings_new_customers.value()).isEmpty()) {
            input.headers.insert("roi_num_meetings_new_customers", ::OpenAPI::toStringValue(roi_num_meetings_new_customers.value()));
        }
        }
    if (roi_amount_actual_sales.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_amount_actual_sales.value()).isEmpty()) {
            input.headers.insert("roi_amount_actual_sales", ::OpenAPI::toStringValue(roi_amount_actual_sales.value()));
        }
        }
    if (roi_amount_potential_sales.hasValue())
    {
        if (!::OpenAPI::toStringValue(roi_amount_potential_sales.value()).isEmpty()) {
            input.headers.insert("roi_amount_potential_sales", ::OpenAPI::toStringValue(roi_amount_potential_sales.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::events2PatchCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::events2PatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT events2PatchSignal(output);
        Q_EMIT events2PatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT events2PatchSignalE(output, error_type, error_str);
        Q_EMIT events2PatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT events2PatchSignalError(output, error_type, error_str);
        Q_EMIT events2PatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::events3Delete(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["events3Delete"][_serverIndices.value("events3Delete")].URL()+"/v1/events/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::events3DeleteCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::events3DeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT events3DeleteSignal(output);
        Q_EMIT events3DeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT events3DeleteSignalE(output, error_type, error_str);
        Q_EMIT events3DeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT events3DeleteSignalError(output, error_type, error_str);
        Q_EMIT events3DeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::eventsInfo0Get(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["eventsInfo0Get"][_serverIndices.value("eventsInfo0Get")].URL()+"/v1/events/info");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIEventsApi::eventsInfo0GetCallback);
    connect(this, &OAIEventsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIEventsApi::eventsInfo0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT eventsInfo0GetSignal(output);
        Q_EMIT eventsInfo0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT eventsInfo0GetSignalE(output, error_type, error_str);
        Q_EMIT eventsInfo0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT eventsInfo0GetSignalError(output, error_type, error_str);
        Q_EMIT eventsInfo0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIEventsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
