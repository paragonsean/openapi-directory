/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITasksApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITasksApi::OAITasksApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITasksApi::~OAITasksApi() {
}

void OAITasksApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.exhibitday.com/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("tasks0Get", defaultConf);
    _serverIndices.insert("tasks0Get", 0);
    _serverConfigs.insert("tasks1Post", defaultConf);
    _serverIndices.insert("tasks1Post", 0);
    _serverConfigs.insert("tasks2Patch", defaultConf);
    _serverIndices.insert("tasks2Patch", 0);
    _serverConfigs.insert("tasks3Delete", defaultConf);
    _serverIndices.insert("tasks3Delete", 0);
    _serverConfigs.insert("tasksComment0Get", defaultConf);
    _serverIndices.insert("tasksComment0Get", 0);
    _serverConfigs.insert("tasksComment1Post", defaultConf);
    _serverIndices.insert("tasksComment1Post", 0);
    _serverConfigs.insert("tasksComment2Patch", defaultConf);
    _serverIndices.insert("tasksComment2Patch", 0);
    _serverConfigs.insert("tasksComment3Delete", defaultConf);
    _serverIndices.insert("tasksComment3Delete", 0);
    _serverConfigs.insert("tasksComments0Get", defaultConf);
    _serverIndices.insert("tasksComments0Get", 0);
    _serverConfigs.insert("tasksInfo0Get", defaultConf);
    _serverIndices.insert("tasksInfo0Get", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITasksApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITasksApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITasksApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITasksApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITasksApi::setUsername(const QString &username) {
    _username = username;
}

void OAITasksApi::setPassword(const QString &password) {
    _password = password;
}


void OAITasksApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITasksApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITasksApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITasksApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITasksApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITasksApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITasksApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITasksApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITasksApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITasksApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITasksApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITasksApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITasksApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITasksApi::tasks0Get(const QString &api_key, const ::OpenAPI::OptionalParam<double> &filter_by_event_id, const ::OpenAPI::OptionalParam<double> &filter_by_general_tasks_only, const ::OpenAPI::OptionalParam<QString> &filter_by_incomplete_only, const ::OpenAPI::OptionalParam<QString> &filter_by_completed_only, const ::OpenAPI::OptionalParam<QString> &filter_by_no_due_date, const ::OpenAPI::OptionalParam<QDate> &filter_by_due_date_greater_than_or_equal_to, const ::OpenAPI::OptionalParam<QDate> &filter_by_due_date_smaller_than_or_equal_to, const ::OpenAPI::OptionalParam<QString> &filter_by_has_assignee, const ::OpenAPI::OptionalParam<QString> &filter_by_assignee_user_id, const ::OpenAPI::OptionalParam<QString> &filter_by_task_name_contains_text, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &filter_by_integration_metadata_field_5, const ::OpenAPI::OptionalParam<QString> &hydrate_task_comments) {
    QString fullPath = QString(_serverConfigs["tasks0Get"][_serverIndices.value("tasks0Get")].URL()+"/v1/tasks/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter_by_integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_1.stringValue()));
    }
    if (filter_by_integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_2.stringValue()));
    }
    if (filter_by_integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_3.stringValue()));
    }
    if (filter_by_integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_4.stringValue()));
    }
    if (filter_by_integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter_by_integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter_by_integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(filter_by_integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    if (filter_by_event_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_id.value()).isEmpty()) {
            input.headers.insert("filter_by_event_id", ::OpenAPI::toStringValue(filter_by_event_id.value()));
        }
        }
    if (filter_by_general_tasks_only.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_general_tasks_only.value()).isEmpty()) {
            input.headers.insert("filter_by_general_tasks_only", ::OpenAPI::toStringValue(filter_by_general_tasks_only.value()));
        }
        }
    if (filter_by_incomplete_only.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_incomplete_only.value()).isEmpty()) {
            input.headers.insert("filter_by_incomplete_only", ::OpenAPI::toStringValue(filter_by_incomplete_only.value()));
        }
        }
    if (filter_by_completed_only.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_completed_only.value()).isEmpty()) {
            input.headers.insert("filter_by_completed_only", ::OpenAPI::toStringValue(filter_by_completed_only.value()));
        }
        }
    if (filter_by_no_due_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_no_due_date.value()).isEmpty()) {
            input.headers.insert("filter_by_no_due_date", ::OpenAPI::toStringValue(filter_by_no_due_date.value()));
        }
        }
    if (filter_by_due_date_greater_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_due_date_greater_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_due_date_greater_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_due_date_greater_than_or_equal_to.value()));
        }
        }
    if (filter_by_due_date_smaller_than_or_equal_to.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_due_date_smaller_than_or_equal_to.value()).isEmpty()) {
            input.headers.insert("filter_by_due_date_smaller_than_or_equal_to", ::OpenAPI::toStringValue(filter_by_due_date_smaller_than_or_equal_to.value()));
        }
        }
    if (filter_by_has_assignee.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_has_assignee.value()).isEmpty()) {
            input.headers.insert("filter_by_has_assignee", ::OpenAPI::toStringValue(filter_by_has_assignee.value()));
        }
        }
    if (filter_by_assignee_user_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_assignee_user_id.value()).isEmpty()) {
            input.headers.insert("filter_by_assignee_user_id", ::OpenAPI::toStringValue(filter_by_assignee_user_id.value()));
        }
        }
    if (filter_by_task_name_contains_text.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_task_name_contains_text.value()).isEmpty()) {
            input.headers.insert("filter_by_task_name_contains_text", ::OpenAPI::toStringValue(filter_by_task_name_contains_text.value()));
        }
        }
    if (hydrate_task_comments.hasValue())
    {
        if (!::OpenAPI::toStringValue(hydrate_task_comments.value()).isEmpty()) {
            input.headers.insert("hydrate_task_comments", ::OpenAPI::toStringValue(hydrate_task_comments.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasks0GetCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasks0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasks0GetSignal(output);
        Q_EMIT tasks0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasks0GetSignalE(output, error_type, error_str);
        Q_EMIT tasks0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasks0GetSignalError(output, error_type, error_str);
        Q_EMIT tasks0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasks1Post(const QString &api_key, const QString &name, const ::OpenAPI::OptionalParam<double> &event_id, const ::OpenAPI::OptionalParam<double> &task_section_id, const ::OpenAPI::OptionalParam<QString> &is_completed, const ::OpenAPI::OptionalParam<QDate> &due_date, const ::OpenAPI::OptionalParam<QString> &assignee_user_id, const ::OpenAPI::OptionalParam<QString> &details, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5) {
    QString fullPath = QString(_serverConfigs["tasks1Post"][_serverIndices.value("tasks1Post")].URL()+"/v1/tasks/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (details.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "details", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("details")).append(querySuffix).append(QUrl::toPercentEncoding(details.stringValue()));
    }
    if (integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_1.stringValue()));
    }
    if (integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_2.stringValue()));
    }
    if (integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_3.stringValue()));
    }
    if (integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_4.stringValue()));
    }
    if (integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(name).isEmpty()) {
            input.headers.insert("name", ::OpenAPI::toStringValue(name));
        }
        }
    if (event_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(event_id.value()).isEmpty()) {
            input.headers.insert("event_id", ::OpenAPI::toStringValue(event_id.value()));
        }
        }
    if (task_section_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(task_section_id.value()).isEmpty()) {
            input.headers.insert("task_section_id", ::OpenAPI::toStringValue(task_section_id.value()));
        }
        }
    if (is_completed.hasValue())
    {
        if (!::OpenAPI::toStringValue(is_completed.value()).isEmpty()) {
            input.headers.insert("is_completed", ::OpenAPI::toStringValue(is_completed.value()));
        }
        }
    if (due_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(due_date.value()).isEmpty()) {
            input.headers.insert("due_date", ::OpenAPI::toStringValue(due_date.value()));
        }
        }
    if (assignee_user_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(assignee_user_id.value()).isEmpty()) {
            input.headers.insert("assignee_user_id", ::OpenAPI::toStringValue(assignee_user_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasks1PostCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasks1PostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasks1PostSignal(output);
        Q_EMIT tasks1PostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasks1PostSignalE(output, error_type, error_str);
        Q_EMIT tasks1PostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasks1PostSignalError(output, error_type, error_str);
        Q_EMIT tasks1PostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasks2Patch(const QString &api_key, const double &id, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<double> &task_section_id, const ::OpenAPI::OptionalParam<QString> &is_completed, const ::OpenAPI::OptionalParam<QDate> &due_date, const ::OpenAPI::OptionalParam<QString> &assignee_user_id, const ::OpenAPI::OptionalParam<QString> &details, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_1, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_2, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_3, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_4, const ::OpenAPI::OptionalParam<QString> &integration_metadata_field_5) {
    QString fullPath = QString(_serverConfigs["tasks2Patch"][_serverIndices.value("tasks2Patch")].URL()+"/v1/tasks/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (details.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "details", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("details")).append(querySuffix).append(QUrl::toPercentEncoding(details.stringValue()));
    }
    if (integration_metadata_field_1.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_1", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_1")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_1.stringValue()));
    }
    if (integration_metadata_field_2.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_2", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_2")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_2.stringValue()));
    }
    if (integration_metadata_field_3.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_3", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_3")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_3.stringValue()));
    }
    if (integration_metadata_field_4.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_4", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_4")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_4.stringValue()));
    }
    if (integration_metadata_field_5.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "integration_metadata_field_5", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("integration_metadata_field_5")).append(querySuffix).append(QUrl::toPercentEncoding(integration_metadata_field_5.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    if (name.hasValue())
    {
        if (!::OpenAPI::toStringValue(name.value()).isEmpty()) {
            input.headers.insert("name", ::OpenAPI::toStringValue(name.value()));
        }
        }
    if (task_section_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(task_section_id.value()).isEmpty()) {
            input.headers.insert("task_section_id", ::OpenAPI::toStringValue(task_section_id.value()));
        }
        }
    if (is_completed.hasValue())
    {
        if (!::OpenAPI::toStringValue(is_completed.value()).isEmpty()) {
            input.headers.insert("is_completed", ::OpenAPI::toStringValue(is_completed.value()));
        }
        }
    if (due_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(due_date.value()).isEmpty()) {
            input.headers.insert("due_date", ::OpenAPI::toStringValue(due_date.value()));
        }
        }
    if (assignee_user_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(assignee_user_id.value()).isEmpty()) {
            input.headers.insert("assignee_user_id", ::OpenAPI::toStringValue(assignee_user_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasks2PatchCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasks2PatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasks2PatchSignal(output);
        Q_EMIT tasks2PatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasks2PatchSignalE(output, error_type, error_str);
        Q_EMIT tasks2PatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasks2PatchSignalError(output, error_type, error_str);
        Q_EMIT tasks2PatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasks3Delete(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["tasks3Delete"][_serverIndices.value("tasks3Delete")].URL()+"/v1/tasks/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasks3DeleteCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasks3DeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasks3DeleteSignal(output);
        Q_EMIT tasks3DeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasks3DeleteSignalE(output, error_type, error_str);
        Q_EMIT tasks3DeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasks3DeleteSignalError(output, error_type, error_str);
        Q_EMIT tasks3DeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksComment0Get(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["tasksComment0Get"][_serverIndices.value("tasksComment0Get")].URL()+"/v1/tasks/comment");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksComment0GetCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksComment0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksComment0GetSignal(output);
        Q_EMIT tasksComment0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksComment0GetSignalE(output, error_type, error_str);
        Q_EMIT tasksComment0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksComment0GetSignalError(output, error_type, error_str);
        Q_EMIT tasksComment0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksComment1Post(const QString &api_key, const double &task_id, const QString &comment) {
    QString fullPath = QString(_serverConfigs["tasksComment1Post"][_serverIndices.value("tasksComment1Post")].URL()+"/v1/tasks/comment");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "comment", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("comment")).append(querySuffix).append(QUrl::toPercentEncoding(comment));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(task_id).isEmpty()) {
            input.headers.insert("task_id", ::OpenAPI::toStringValue(task_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksComment1PostCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksComment1PostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksComment1PostSignal(output);
        Q_EMIT tasksComment1PostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksComment1PostSignalE(output, error_type, error_str);
        Q_EMIT tasksComment1PostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksComment1PostSignalError(output, error_type, error_str);
        Q_EMIT tasksComment1PostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksComment2Patch(const QString &api_key, const double &id, const QString &comment) {
    QString fullPath = QString(_serverConfigs["tasksComment2Patch"][_serverIndices.value("tasksComment2Patch")].URL()+"/v1/tasks/comment");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "comment", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("comment")).append(querySuffix).append(QUrl::toPercentEncoding(comment));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksComment2PatchCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksComment2PatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksComment2PatchSignal(output);
        Q_EMIT tasksComment2PatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksComment2PatchSignalE(output, error_type, error_str);
        Q_EMIT tasksComment2PatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksComment2PatchSignalError(output, error_type, error_str);
        Q_EMIT tasksComment2PatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksComment3Delete(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["tasksComment3Delete"][_serverIndices.value("tasksComment3Delete")].URL()+"/v1/tasks/comment");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksComment3DeleteCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksComment3DeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksComment3DeleteSignal(output);
        Q_EMIT tasksComment3DeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksComment3DeleteSignalE(output, error_type, error_str);
        Q_EMIT tasksComment3DeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksComment3DeleteSignalError(output, error_type, error_str);
        Q_EMIT tasksComment3DeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksComments0Get(const QString &api_key, const ::OpenAPI::OptionalParam<double> &filter_by_event_id, const ::OpenAPI::OptionalParam<double> &filter_by_task_id, const ::OpenAPI::OptionalParam<QString> &hydrate_task) {
    QString fullPath = QString(_serverConfigs["tasksComments0Get"][_serverIndices.value("tasksComments0Get")].URL()+"/v1/tasks/comments");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    if (filter_by_event_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_event_id.value()).isEmpty()) {
            input.headers.insert("filter_by_event_id", ::OpenAPI::toStringValue(filter_by_event_id.value()));
        }
        }
    if (filter_by_task_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(filter_by_task_id.value()).isEmpty()) {
            input.headers.insert("filter_by_task_id", ::OpenAPI::toStringValue(filter_by_task_id.value()));
        }
        }
    if (hydrate_task.hasValue())
    {
        if (!::OpenAPI::toStringValue(hydrate_task.value()).isEmpty()) {
            input.headers.insert("hydrate_task", ::OpenAPI::toStringValue(hydrate_task.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksComments0GetCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksComments0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksComments0GetSignal(output);
        Q_EMIT tasksComments0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksComments0GetSignalE(output, error_type, error_str);
        Q_EMIT tasksComments0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksComments0GetSignalError(output, error_type, error_str);
        Q_EMIT tasksComments0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tasksInfo0Get(const QString &api_key, const double &id) {
    QString fullPath = QString(_serverConfigs["tasksInfo0Get"][_serverIndices.value("tasksInfo0Get")].URL()+"/v1/tasks/info");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(api_key).isEmpty()) {
            input.headers.insert("api_key", ::OpenAPI::toStringValue(api_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(id).isEmpty()) {
            input.headers.insert("id", ::OpenAPI::toStringValue(id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITasksApi::tasksInfo0GetCallback);
    connect(this, &OAITasksApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITasksApi::tasksInfo0GetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT tasksInfo0GetSignal(output);
        Q_EMIT tasksInfo0GetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT tasksInfo0GetSignalE(output, error_type, error_str);
        Q_EMIT tasksInfo0GetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT tasksInfo0GetSignalError(output, error_type, error_str);
        Q_EMIT tasksInfo0GetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITasksApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
