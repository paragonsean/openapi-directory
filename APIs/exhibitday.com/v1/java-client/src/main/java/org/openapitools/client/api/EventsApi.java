/*
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for events0Get
     * @param apiKey  (required)
     * @param filterByEventNameContainsText Only include events that have the given text in the event Name. For example: If you want to retrieve all the events that have the word “International” in the event Name field, pass in the value “International” for the filter_by_event_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByStartDateGreaterThanOrEqualTo Only include events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByStartDateSmallerThanOrEqualTo Only include events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateGreaterThanOrEqualTo Only include events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateSmallerThanOrEqualTo Only include events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEventParticipationTypeId Only include events that have their participation_type_id equal to the value passed in for this filter parameter. To get a list of available event Participation Type Ids in your workspace, refer to this endpoint: /v1/references/event_participation_types (optional)
     * @param filterByEventFormatId Only include events that have their format_id equal to the value passed in for this filter parameter. The following integer values are accepted (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param filterByEventStarRating Only include events that have their star rating equal to the value passed in for this filter parameter. The following integer values are accepted: 0, 1, 2, 3 (optional)
     * @param filterByEventTag Only include events that have this tag. For example, you can use this filter to get all the events that have the tag “International”. Note: You can only pass in one tag to filter based on. (optional)
     * @param filterByCustomEventFieldCustomNNNNNN This is a special filter that lets you filter down your events based on a value of a Custom Text field or a Custom Dropdown field under the Event Information tab, Event Booth tab, or the Special Event tab. To use this filter, you’ll need the field name for the custom text field or custom dropdown field. You can obtain a list of field names for custom event fields in your workspace from the following endpoint: /v1/references/event_custom_fields. For example, if you have configured a custom dropdown field called “Region” under the Event information tab, and its field name is “custom_123456” and you would like to filter your events to include only ones that have “Northeast” selected for that custom dropdown field, pass in “filter_by_custom_event_field__custom_123456” as the parameter name and “Northeast” as its parameter value. Note: You can only filter down based on one custom event field (and it has to be either a custom text field or a custom dropdown field). (optional)
     * @param filterByIntegrationMetadataField1 Only include events that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include events that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include events that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include events that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include events that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param hydrateTasks Include the tasks collection for each event in the result set. Note: hydrating the task collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of tasks for each event in the result set. (optional, default to false)
     * @param hydrateTaskSectionsList Include the list of available task sections for each event in the result set. Note: hydrating the event task section collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of task sections for each event in the result set. (optional, default to false)
     * @param hydrateCustomFields Include the event custom fields (i.e. custom fields that have been added to your workspace) for each event in the result set. Note: hydrating the event custom field collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the custom field values for each event in the result set. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events0GetCall(String apiKey, String filterByEventNameContainsText, LocalDate filterByStartDateGreaterThanOrEqualTo, LocalDate filterByStartDateSmallerThanOrEqualTo, LocalDate filterByEndDateGreaterThanOrEqualTo, LocalDate filterByEndDateSmallerThanOrEqualTo, BigDecimal filterByEventParticipationTypeId, BigDecimal filterByEventFormatId, BigDecimal filterByEventStarRating, String filterByEventTag, String filterByCustomEventFieldCustomNNNNNN, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTasks, String hydrateTaskSectionsList, String hydrateCustomFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/events/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterByCustomEventFieldCustomNNNNNN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_custom_event_field__custom_NNNNNN", filterByCustomEventFieldCustomNNNNNN));
        }

        if (filterByIntegrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_1", filterByIntegrationMetadataField1));
        }

        if (filterByIntegrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_2", filterByIntegrationMetadataField2));
        }

        if (filterByIntegrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_3", filterByIntegrationMetadataField3));
        }

        if (filterByIntegrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_4", filterByIntegrationMetadataField4));
        }

        if (filterByIntegrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_5", filterByIntegrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (filterByEventNameContainsText != null) {
            localVarHeaderParams.put("filter_by_event_name_contains_text", localVarApiClient.parameterToString(filterByEventNameContainsText));
        }

        if (filterByStartDateGreaterThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_start_date_greater_than_or_equal_to", localVarApiClient.parameterToString(filterByStartDateGreaterThanOrEqualTo));
        }

        if (filterByStartDateSmallerThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_start_date_smaller_than_or_equal_to", localVarApiClient.parameterToString(filterByStartDateSmallerThanOrEqualTo));
        }

        if (filterByEndDateGreaterThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_end_date_greater_than_or_equal_to", localVarApiClient.parameterToString(filterByEndDateGreaterThanOrEqualTo));
        }

        if (filterByEndDateSmallerThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_end_date_smaller_than_or_equal_to", localVarApiClient.parameterToString(filterByEndDateSmallerThanOrEqualTo));
        }

        if (filterByEventParticipationTypeId != null) {
            localVarHeaderParams.put("filter_by_event_participation_type_id", localVarApiClient.parameterToString(filterByEventParticipationTypeId));
        }

        if (filterByEventFormatId != null) {
            localVarHeaderParams.put("filter_by_event_format_id", localVarApiClient.parameterToString(filterByEventFormatId));
        }

        if (filterByEventStarRating != null) {
            localVarHeaderParams.put("filter_by_event_star_rating", localVarApiClient.parameterToString(filterByEventStarRating));
        }

        if (filterByEventTag != null) {
            localVarHeaderParams.put("filter_by_event_tag", localVarApiClient.parameterToString(filterByEventTag));
        }

        if (hydrateTasks != null) {
            localVarHeaderParams.put("hydrate_tasks", localVarApiClient.parameterToString(hydrateTasks));
        }

        if (hydrateTaskSectionsList != null) {
            localVarHeaderParams.put("hydrate_task_sections_list", localVarApiClient.parameterToString(hydrateTaskSectionsList));
        }

        if (hydrateCustomFields != null) {
            localVarHeaderParams.put("hydrate_custom_fields", localVarApiClient.parameterToString(hydrateCustomFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events0GetValidateBeforeCall(String apiKey, String filterByEventNameContainsText, LocalDate filterByStartDateGreaterThanOrEqualTo, LocalDate filterByStartDateSmallerThanOrEqualTo, LocalDate filterByEndDateGreaterThanOrEqualTo, LocalDate filterByEndDateSmallerThanOrEqualTo, BigDecimal filterByEventParticipationTypeId, BigDecimal filterByEventFormatId, BigDecimal filterByEventStarRating, String filterByEventTag, String filterByCustomEventFieldCustomNNNNNN, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTasks, String hydrateTaskSectionsList, String hydrateCustomFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling events0Get(Async)");
        }

        return events0GetCall(apiKey, filterByEventNameContainsText, filterByStartDateGreaterThanOrEqualTo, filterByStartDateSmallerThanOrEqualTo, filterByEndDateGreaterThanOrEqualTo, filterByEndDateSmallerThanOrEqualTo, filterByEventParticipationTypeId, filterByEventFormatId, filterByEventStarRating, filterByEventTag, filterByCustomEventFieldCustomNNNNNN, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTasks, hydrateTaskSectionsList, hydrateCustomFields, _callback);

    }

    /**
     * 
     * Retrieve Events
     * @param apiKey  (required)
     * @param filterByEventNameContainsText Only include events that have the given text in the event Name. For example: If you want to retrieve all the events that have the word “International” in the event Name field, pass in the value “International” for the filter_by_event_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByStartDateGreaterThanOrEqualTo Only include events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByStartDateSmallerThanOrEqualTo Only include events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateGreaterThanOrEqualTo Only include events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateSmallerThanOrEqualTo Only include events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEventParticipationTypeId Only include events that have their participation_type_id equal to the value passed in for this filter parameter. To get a list of available event Participation Type Ids in your workspace, refer to this endpoint: /v1/references/event_participation_types (optional)
     * @param filterByEventFormatId Only include events that have their format_id equal to the value passed in for this filter parameter. The following integer values are accepted (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param filterByEventStarRating Only include events that have their star rating equal to the value passed in for this filter parameter. The following integer values are accepted: 0, 1, 2, 3 (optional)
     * @param filterByEventTag Only include events that have this tag. For example, you can use this filter to get all the events that have the tag “International”. Note: You can only pass in one tag to filter based on. (optional)
     * @param filterByCustomEventFieldCustomNNNNNN This is a special filter that lets you filter down your events based on a value of a Custom Text field or a Custom Dropdown field under the Event Information tab, Event Booth tab, or the Special Event tab. To use this filter, you’ll need the field name for the custom text field or custom dropdown field. You can obtain a list of field names for custom event fields in your workspace from the following endpoint: /v1/references/event_custom_fields. For example, if you have configured a custom dropdown field called “Region” under the Event information tab, and its field name is “custom_123456” and you would like to filter your events to include only ones that have “Northeast” selected for that custom dropdown field, pass in “filter_by_custom_event_field__custom_123456” as the parameter name and “Northeast” as its parameter value. Note: You can only filter down based on one custom event field (and it has to be either a custom text field or a custom dropdown field). (optional)
     * @param filterByIntegrationMetadataField1 Only include events that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include events that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include events that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include events that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include events that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param hydrateTasks Include the tasks collection for each event in the result set. Note: hydrating the task collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of tasks for each event in the result set. (optional, default to false)
     * @param hydrateTaskSectionsList Include the list of available task sections for each event in the result set. Note: hydrating the event task section collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of task sections for each event in the result set. (optional, default to false)
     * @param hydrateCustomFields Include the event custom fields (i.e. custom fields that have been added to your workspace) for each event in the result set. Note: hydrating the event custom field collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the custom field values for each event in the result set. (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String events0Get(String apiKey, String filterByEventNameContainsText, LocalDate filterByStartDateGreaterThanOrEqualTo, LocalDate filterByStartDateSmallerThanOrEqualTo, LocalDate filterByEndDateGreaterThanOrEqualTo, LocalDate filterByEndDateSmallerThanOrEqualTo, BigDecimal filterByEventParticipationTypeId, BigDecimal filterByEventFormatId, BigDecimal filterByEventStarRating, String filterByEventTag, String filterByCustomEventFieldCustomNNNNNN, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTasks, String hydrateTaskSectionsList, String hydrateCustomFields) throws ApiException {
        ApiResponse<String> localVarResp = events0GetWithHttpInfo(apiKey, filterByEventNameContainsText, filterByStartDateGreaterThanOrEqualTo, filterByStartDateSmallerThanOrEqualTo, filterByEndDateGreaterThanOrEqualTo, filterByEndDateSmallerThanOrEqualTo, filterByEventParticipationTypeId, filterByEventFormatId, filterByEventStarRating, filterByEventTag, filterByCustomEventFieldCustomNNNNNN, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTasks, hydrateTaskSectionsList, hydrateCustomFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Events
     * @param apiKey  (required)
     * @param filterByEventNameContainsText Only include events that have the given text in the event Name. For example: If you want to retrieve all the events that have the word “International” in the event Name field, pass in the value “International” for the filter_by_event_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByStartDateGreaterThanOrEqualTo Only include events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByStartDateSmallerThanOrEqualTo Only include events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateGreaterThanOrEqualTo Only include events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateSmallerThanOrEqualTo Only include events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEventParticipationTypeId Only include events that have their participation_type_id equal to the value passed in for this filter parameter. To get a list of available event Participation Type Ids in your workspace, refer to this endpoint: /v1/references/event_participation_types (optional)
     * @param filterByEventFormatId Only include events that have their format_id equal to the value passed in for this filter parameter. The following integer values are accepted (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param filterByEventStarRating Only include events that have their star rating equal to the value passed in for this filter parameter. The following integer values are accepted: 0, 1, 2, 3 (optional)
     * @param filterByEventTag Only include events that have this tag. For example, you can use this filter to get all the events that have the tag “International”. Note: You can only pass in one tag to filter based on. (optional)
     * @param filterByCustomEventFieldCustomNNNNNN This is a special filter that lets you filter down your events based on a value of a Custom Text field or a Custom Dropdown field under the Event Information tab, Event Booth tab, or the Special Event tab. To use this filter, you’ll need the field name for the custom text field or custom dropdown field. You can obtain a list of field names for custom event fields in your workspace from the following endpoint: /v1/references/event_custom_fields. For example, if you have configured a custom dropdown field called “Region” under the Event information tab, and its field name is “custom_123456” and you would like to filter your events to include only ones that have “Northeast” selected for that custom dropdown field, pass in “filter_by_custom_event_field__custom_123456” as the parameter name and “Northeast” as its parameter value. Note: You can only filter down based on one custom event field (and it has to be either a custom text field or a custom dropdown field). (optional)
     * @param filterByIntegrationMetadataField1 Only include events that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include events that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include events that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include events that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include events that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param hydrateTasks Include the tasks collection for each event in the result set. Note: hydrating the task collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of tasks for each event in the result set. (optional, default to false)
     * @param hydrateTaskSectionsList Include the list of available task sections for each event in the result set. Note: hydrating the event task section collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of task sections for each event in the result set. (optional, default to false)
     * @param hydrateCustomFields Include the event custom fields (i.e. custom fields that have been added to your workspace) for each event in the result set. Note: hydrating the event custom field collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the custom field values for each event in the result set. (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> events0GetWithHttpInfo(String apiKey, String filterByEventNameContainsText, LocalDate filterByStartDateGreaterThanOrEqualTo, LocalDate filterByStartDateSmallerThanOrEqualTo, LocalDate filterByEndDateGreaterThanOrEqualTo, LocalDate filterByEndDateSmallerThanOrEqualTo, BigDecimal filterByEventParticipationTypeId, BigDecimal filterByEventFormatId, BigDecimal filterByEventStarRating, String filterByEventTag, String filterByCustomEventFieldCustomNNNNNN, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTasks, String hydrateTaskSectionsList, String hydrateCustomFields) throws ApiException {
        okhttp3.Call localVarCall = events0GetValidateBeforeCall(apiKey, filterByEventNameContainsText, filterByStartDateGreaterThanOrEqualTo, filterByStartDateSmallerThanOrEqualTo, filterByEndDateGreaterThanOrEqualTo, filterByEndDateSmallerThanOrEqualTo, filterByEventParticipationTypeId, filterByEventFormatId, filterByEventStarRating, filterByEventTag, filterByCustomEventFieldCustomNNNNNN, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTasks, hydrateTaskSectionsList, hydrateCustomFields, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Events
     * @param apiKey  (required)
     * @param filterByEventNameContainsText Only include events that have the given text in the event Name. For example: If you want to retrieve all the events that have the word “International” in the event Name field, pass in the value “International” for the filter_by_event_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByStartDateGreaterThanOrEqualTo Only include events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByStartDateSmallerThanOrEqualTo Only include events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateGreaterThanOrEqualTo Only include events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEndDateSmallerThanOrEqualTo Only include events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD (optional)
     * @param filterByEventParticipationTypeId Only include events that have their participation_type_id equal to the value passed in for this filter parameter. To get a list of available event Participation Type Ids in your workspace, refer to this endpoint: /v1/references/event_participation_types (optional)
     * @param filterByEventFormatId Only include events that have their format_id equal to the value passed in for this filter parameter. The following integer values are accepted (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param filterByEventStarRating Only include events that have their star rating equal to the value passed in for this filter parameter. The following integer values are accepted: 0, 1, 2, 3 (optional)
     * @param filterByEventTag Only include events that have this tag. For example, you can use this filter to get all the events that have the tag “International”. Note: You can only pass in one tag to filter based on. (optional)
     * @param filterByCustomEventFieldCustomNNNNNN This is a special filter that lets you filter down your events based on a value of a Custom Text field or a Custom Dropdown field under the Event Information tab, Event Booth tab, or the Special Event tab. To use this filter, you’ll need the field name for the custom text field or custom dropdown field. You can obtain a list of field names for custom event fields in your workspace from the following endpoint: /v1/references/event_custom_fields. For example, if you have configured a custom dropdown field called “Region” under the Event information tab, and its field name is “custom_123456” and you would like to filter your events to include only ones that have “Northeast” selected for that custom dropdown field, pass in “filter_by_custom_event_field__custom_123456” as the parameter name and “Northeast” as its parameter value. Note: You can only filter down based on one custom event field (and it has to be either a custom text field or a custom dropdown field). (optional)
     * @param filterByIntegrationMetadataField1 Only include events that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include events that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include events that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include events that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include events that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: An event&#39;s integration_metadata_field_5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \&quot;external id\&quot; of the event from another system you&#39;re integrating with). (optional)
     * @param hydrateTasks Include the tasks collection for each event in the result set. Note: hydrating the task collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of tasks for each event in the result set. (optional, default to false)
     * @param hydrateTaskSectionsList Include the list of available task sections for each event in the result set. Note: hydrating the event task section collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of task sections for each event in the result set. (optional, default to false)
     * @param hydrateCustomFields Include the event custom fields (i.e. custom fields that have been added to your workspace) for each event in the result set. Note: hydrating the event custom field collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the custom field values for each event in the result set. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events0GetAsync(String apiKey, String filterByEventNameContainsText, LocalDate filterByStartDateGreaterThanOrEqualTo, LocalDate filterByStartDateSmallerThanOrEqualTo, LocalDate filterByEndDateGreaterThanOrEqualTo, LocalDate filterByEndDateSmallerThanOrEqualTo, BigDecimal filterByEventParticipationTypeId, BigDecimal filterByEventFormatId, BigDecimal filterByEventStarRating, String filterByEventTag, String filterByCustomEventFieldCustomNNNNNN, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTasks, String hydrateTaskSectionsList, String hydrateCustomFields, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = events0GetValidateBeforeCall(apiKey, filterByEventNameContainsText, filterByStartDateGreaterThanOrEqualTo, filterByStartDateSmallerThanOrEqualTo, filterByEndDateGreaterThanOrEqualTo, filterByEndDateSmallerThanOrEqualTo, filterByEventParticipationTypeId, filterByEventFormatId, filterByEventStarRating, filterByEventTag, filterByCustomEventFieldCustomNNNNNN, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTasks, hydrateTaskSectionsList, hydrateCustomFields, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for events1Post
     * @param apiKey  (required)
     * @param name The name of the event. (required)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (required)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (required)
     * @param formatId Integer representing the format_id for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional, default to 1.0)
     * @param participationTypeId Integer representing the event_participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional, default to 1.0)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events1PostCall(String apiKey, String name, LocalDate startDate, LocalDate endDate, BigDecimal formatId, BigDecimal participationTypeId, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/events/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_1", integrationMetadataField1));
        }

        if (integrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_2", integrationMetadataField2));
        }

        if (integrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_3", integrationMetadataField3));
        }

        if (integrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_4", integrationMetadataField4));
        }

        if (integrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_5", integrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (name != null) {
            localVarHeaderParams.put("name", localVarApiClient.parameterToString(name));
        }

        if (startDate != null) {
            localVarHeaderParams.put("start_date", localVarApiClient.parameterToString(startDate));
        }

        if (endDate != null) {
            localVarHeaderParams.put("end_date", localVarApiClient.parameterToString(endDate));
        }

        if (formatId != null) {
            localVarHeaderParams.put("format_id", localVarApiClient.parameterToString(formatId));
        }

        if (participationTypeId != null) {
            localVarHeaderParams.put("participation_type_id", localVarApiClient.parameterToString(participationTypeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events1PostValidateBeforeCall(String apiKey, String name, LocalDate startDate, LocalDate endDate, BigDecimal formatId, BigDecimal participationTypeId, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling events1Post(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling events1Post(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling events1Post(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling events1Post(Async)");
        }

        return events1PostCall(apiKey, name, startDate, endDate, formatId, participationTypeId, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);

    }

    /**
     * 
     * Add an Event
     * @param apiKey  (required)
     * @param name The name of the event. (required)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (required)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (required)
     * @param formatId Integer representing the format_id for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional, default to 1.0)
     * @param participationTypeId Integer representing the event_participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional, default to 1.0)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String events1Post(String apiKey, String name, LocalDate startDate, LocalDate endDate, BigDecimal formatId, BigDecimal participationTypeId, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        ApiResponse<String> localVarResp = events1PostWithHttpInfo(apiKey, name, startDate, endDate, formatId, participationTypeId, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5);
        return localVarResp.getData();
    }

    /**
     * 
     * Add an Event
     * @param apiKey  (required)
     * @param name The name of the event. (required)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (required)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (required)
     * @param formatId Integer representing the format_id for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional, default to 1.0)
     * @param participationTypeId Integer representing the event_participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional, default to 1.0)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> events1PostWithHttpInfo(String apiKey, String name, LocalDate startDate, LocalDate endDate, BigDecimal formatId, BigDecimal participationTypeId, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        okhttp3.Call localVarCall = events1PostValidateBeforeCall(apiKey, name, startDate, endDate, formatId, participationTypeId, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an Event
     * @param apiKey  (required)
     * @param name The name of the event. (required)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (required)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (required)
     * @param formatId Integer representing the format_id for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional, default to 1.0)
     * @param participationTypeId Integer representing the event_participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional, default to 1.0)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events1PostAsync(String apiKey, String name, LocalDate startDate, LocalDate endDate, BigDecimal formatId, BigDecimal participationTypeId, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = events1PostValidateBeforeCall(apiKey, name, startDate, endDate, formatId, participationTypeId, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for events2Patch
     * @param apiKey  (required)
     * @param id The id of the event you would like to update. (required)
     * @param name The name of the event. (optional)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (optional)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (optional)
     * @param participationTypeId Integer representing the participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional)
     * @param formatId Integer representing the FormatId for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param starRating Star Rating for the event (0, 1, 2, or 3). (optional)
     * @param websiteUrl URL of the event website. Must be a well-formed URL. (optional)
     * @param venueName The name of the venue for the event. (optional)
     * @param boothSize The size of your booth for the event. (optional)
     * @param boothNumber Your booth number for the event. (optional)
     * @param eventNotes Event Notes (under the Event Information tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param boothNotes Booth Notes (under the event Booth tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetNotes Budget Notes (under the event Budget tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param roiNotes ROI Notes (under the event ROI tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetBoothReservation A number (greater or equal to 0.00) that represents the budget for reserving the booth for the event. (optional)
     * @param budgetBoothServices A number (greater or equal to 0.00) that represents the budget for all the booth services for the event. (optional)
     * @param budgetAttendeeRegistrations A number (greater or equal to 0.00) that represents the budget for event registration / attendee tickets. (optional)
     * @param budgetTravel A number (greater or equal to 0.00) that represents the budget for travel and lodging for the event. (optional)
     * @param budgetGiveaways A number (greater or equal to 0.00) that represents the budget for your giveaways (swag and raffle items) for the event. (optional)
     * @param budgetShipments A number (greater or equal to 0.00) that represents the budget for all shipments for the event. (optional)
     * @param budgetMiscExpenses A number (greater or equal to 0.00) that represents the budget for all miscellaneous expenses for the event. (optional)
     * @param budgetSponsorships A number (greater or equal to 0.00) that represents the budget for all sponsorships for the event. (optional)
     * @param roiNumLeads An integer (greater or equal to 0) that represents the number of leads generated from this event. (optional)
     * @param roiNumImpressionsBooth An integer (greater or equal to 0) that represents the number of booth walk-bys / impressions (i.e., estimated total number of people who saw your booth at this event). (optional)
     * @param roiNumImpressionsSponsorships An integer (greater or equal to 0) that represents the number of sponsorship impressions (i.e., estimated total number of people reached through all your sponsorships for this event). (optional)
     * @param roiNumImpressionsMedia An integer (greater or equal to 0) that represents the number of social/traditional media impressions (i.e., estimated total number of people reached via social media or traditional media coverage). (optional)
     * @param roiNumMeetingsExistingCustomers An integer (greater or equal to 0) that represents the number of meetings with existing customers (i.e., total number of meetings your team had with your existing customers at this event). (optional)
     * @param roiNumMeetingsNewCustomers An integer (greater or equal to 0) that represents the number of meetings with new/potential customers (i.e., total number of meetings your team had with new/potential customers at this event). (optional)
     * @param roiAmountActualSales A number (greater or equal to 0.00) that represents the actual sales amount (attributable to this event and already closed). (optional)
     * @param roiAmountPotentialSales A number (greater or equal to 0.00) that represents the additional opportunity / potential sales amount (attributable to this event, but, yet to be closed). (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events2PatchCall(String apiKey, BigDecimal id, String name, LocalDate startDate, LocalDate endDate, BigDecimal participationTypeId, BigDecimal formatId, BigDecimal starRating, String websiteUrl, String venueName, BigDecimal boothSize, BigDecimal boothNumber, BigDecimal eventNotes, BigDecimal boothNotes, BigDecimal budgetNotes, BigDecimal roiNotes, BigDecimal budgetBoothReservation, BigDecimal budgetBoothServices, BigDecimal budgetAttendeeRegistrations, BigDecimal budgetTravel, BigDecimal budgetGiveaways, BigDecimal budgetShipments, BigDecimal budgetMiscExpenses, BigDecimal budgetSponsorships, BigDecimal roiNumLeads, BigDecimal roiNumImpressionsBooth, BigDecimal roiNumImpressionsSponsorships, BigDecimal roiNumImpressionsMedia, BigDecimal roiNumMeetingsExistingCustomers, BigDecimal roiNumMeetingsNewCustomers, BigDecimal roiAmountActualSales, BigDecimal roiAmountPotentialSales, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/events/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (websiteUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("website_url", websiteUrl));
        }

        if (venueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("venue_name", venueName));
        }

        if (eventNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event_notes", eventNotes));
        }

        if (boothNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("booth_notes", boothNotes));
        }

        if (budgetNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budget_notes", budgetNotes));
        }

        if (roiNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roi_notes", roiNotes));
        }

        if (integrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_1", integrationMetadataField1));
        }

        if (integrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_2", integrationMetadataField2));
        }

        if (integrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_3", integrationMetadataField3));
        }

        if (integrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_4", integrationMetadataField4));
        }

        if (integrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_5", integrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (name != null) {
            localVarHeaderParams.put("name", localVarApiClient.parameterToString(name));
        }

        if (startDate != null) {
            localVarHeaderParams.put("start_date", localVarApiClient.parameterToString(startDate));
        }

        if (endDate != null) {
            localVarHeaderParams.put("end_date", localVarApiClient.parameterToString(endDate));
        }

        if (participationTypeId != null) {
            localVarHeaderParams.put("participation_type_id", localVarApiClient.parameterToString(participationTypeId));
        }

        if (formatId != null) {
            localVarHeaderParams.put("format_id", localVarApiClient.parameterToString(formatId));
        }

        if (starRating != null) {
            localVarHeaderParams.put("star_rating", localVarApiClient.parameterToString(starRating));
        }

        if (boothSize != null) {
            localVarHeaderParams.put("booth_size", localVarApiClient.parameterToString(boothSize));
        }

        if (boothNumber != null) {
            localVarHeaderParams.put("booth_number", localVarApiClient.parameterToString(boothNumber));
        }

        if (budgetBoothReservation != null) {
            localVarHeaderParams.put("budget_booth_reservation", localVarApiClient.parameterToString(budgetBoothReservation));
        }

        if (budgetBoothServices != null) {
            localVarHeaderParams.put("budget_booth_services", localVarApiClient.parameterToString(budgetBoothServices));
        }

        if (budgetAttendeeRegistrations != null) {
            localVarHeaderParams.put("budget_attendee_registrations", localVarApiClient.parameterToString(budgetAttendeeRegistrations));
        }

        if (budgetTravel != null) {
            localVarHeaderParams.put("budget_travel", localVarApiClient.parameterToString(budgetTravel));
        }

        if (budgetGiveaways != null) {
            localVarHeaderParams.put("budget_giveaways", localVarApiClient.parameterToString(budgetGiveaways));
        }

        if (budgetShipments != null) {
            localVarHeaderParams.put("budget_shipments", localVarApiClient.parameterToString(budgetShipments));
        }

        if (budgetMiscExpenses != null) {
            localVarHeaderParams.put("budget_misc_expenses", localVarApiClient.parameterToString(budgetMiscExpenses));
        }

        if (budgetSponsorships != null) {
            localVarHeaderParams.put("budget_sponsorships", localVarApiClient.parameterToString(budgetSponsorships));
        }

        if (roiNumLeads != null) {
            localVarHeaderParams.put("roi_num_leads", localVarApiClient.parameterToString(roiNumLeads));
        }

        if (roiNumImpressionsBooth != null) {
            localVarHeaderParams.put("roi_num_impressions_booth", localVarApiClient.parameterToString(roiNumImpressionsBooth));
        }

        if (roiNumImpressionsSponsorships != null) {
            localVarHeaderParams.put("roi_num_impressions_sponsorships", localVarApiClient.parameterToString(roiNumImpressionsSponsorships));
        }

        if (roiNumImpressionsMedia != null) {
            localVarHeaderParams.put("roi_num_impressions_media", localVarApiClient.parameterToString(roiNumImpressionsMedia));
        }

        if (roiNumMeetingsExistingCustomers != null) {
            localVarHeaderParams.put("roi_num_meetings_existing_customers", localVarApiClient.parameterToString(roiNumMeetingsExistingCustomers));
        }

        if (roiNumMeetingsNewCustomers != null) {
            localVarHeaderParams.put("roi_num_meetings_new_customers", localVarApiClient.parameterToString(roiNumMeetingsNewCustomers));
        }

        if (roiAmountActualSales != null) {
            localVarHeaderParams.put("roi_amount_actual_sales", localVarApiClient.parameterToString(roiAmountActualSales));
        }

        if (roiAmountPotentialSales != null) {
            localVarHeaderParams.put("roi_amount_potential_sales", localVarApiClient.parameterToString(roiAmountPotentialSales));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events2PatchValidateBeforeCall(String apiKey, BigDecimal id, String name, LocalDate startDate, LocalDate endDate, BigDecimal participationTypeId, BigDecimal formatId, BigDecimal starRating, String websiteUrl, String venueName, BigDecimal boothSize, BigDecimal boothNumber, BigDecimal eventNotes, BigDecimal boothNotes, BigDecimal budgetNotes, BigDecimal roiNotes, BigDecimal budgetBoothReservation, BigDecimal budgetBoothServices, BigDecimal budgetAttendeeRegistrations, BigDecimal budgetTravel, BigDecimal budgetGiveaways, BigDecimal budgetShipments, BigDecimal budgetMiscExpenses, BigDecimal budgetSponsorships, BigDecimal roiNumLeads, BigDecimal roiNumImpressionsBooth, BigDecimal roiNumImpressionsSponsorships, BigDecimal roiNumImpressionsMedia, BigDecimal roiNumMeetingsExistingCustomers, BigDecimal roiNumMeetingsNewCustomers, BigDecimal roiAmountActualSales, BigDecimal roiAmountPotentialSales, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling events2Patch(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling events2Patch(Async)");
        }

        return events2PatchCall(apiKey, id, name, startDate, endDate, participationTypeId, formatId, starRating, websiteUrl, venueName, boothSize, boothNumber, eventNotes, boothNotes, budgetNotes, roiNotes, budgetBoothReservation, budgetBoothServices, budgetAttendeeRegistrations, budgetTravel, budgetGiveaways, budgetShipments, budgetMiscExpenses, budgetSponsorships, roiNumLeads, roiNumImpressionsBooth, roiNumImpressionsSponsorships, roiNumImpressionsMedia, roiNumMeetingsExistingCustomers, roiNumMeetingsNewCustomers, roiAmountActualSales, roiAmountPotentialSales, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);

    }

    /**
     * 
     * Update an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to update. (required)
     * @param name The name of the event. (optional)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (optional)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (optional)
     * @param participationTypeId Integer representing the participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional)
     * @param formatId Integer representing the FormatId for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param starRating Star Rating for the event (0, 1, 2, or 3). (optional)
     * @param websiteUrl URL of the event website. Must be a well-formed URL. (optional)
     * @param venueName The name of the venue for the event. (optional)
     * @param boothSize The size of your booth for the event. (optional)
     * @param boothNumber Your booth number for the event. (optional)
     * @param eventNotes Event Notes (under the Event Information tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param boothNotes Booth Notes (under the event Booth tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetNotes Budget Notes (under the event Budget tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param roiNotes ROI Notes (under the event ROI tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetBoothReservation A number (greater or equal to 0.00) that represents the budget for reserving the booth for the event. (optional)
     * @param budgetBoothServices A number (greater or equal to 0.00) that represents the budget for all the booth services for the event. (optional)
     * @param budgetAttendeeRegistrations A number (greater or equal to 0.00) that represents the budget for event registration / attendee tickets. (optional)
     * @param budgetTravel A number (greater or equal to 0.00) that represents the budget for travel and lodging for the event. (optional)
     * @param budgetGiveaways A number (greater or equal to 0.00) that represents the budget for your giveaways (swag and raffle items) for the event. (optional)
     * @param budgetShipments A number (greater or equal to 0.00) that represents the budget for all shipments for the event. (optional)
     * @param budgetMiscExpenses A number (greater or equal to 0.00) that represents the budget for all miscellaneous expenses for the event. (optional)
     * @param budgetSponsorships A number (greater or equal to 0.00) that represents the budget for all sponsorships for the event. (optional)
     * @param roiNumLeads An integer (greater or equal to 0) that represents the number of leads generated from this event. (optional)
     * @param roiNumImpressionsBooth An integer (greater or equal to 0) that represents the number of booth walk-bys / impressions (i.e., estimated total number of people who saw your booth at this event). (optional)
     * @param roiNumImpressionsSponsorships An integer (greater or equal to 0) that represents the number of sponsorship impressions (i.e., estimated total number of people reached through all your sponsorships for this event). (optional)
     * @param roiNumImpressionsMedia An integer (greater or equal to 0) that represents the number of social/traditional media impressions (i.e., estimated total number of people reached via social media or traditional media coverage). (optional)
     * @param roiNumMeetingsExistingCustomers An integer (greater or equal to 0) that represents the number of meetings with existing customers (i.e., total number of meetings your team had with your existing customers at this event). (optional)
     * @param roiNumMeetingsNewCustomers An integer (greater or equal to 0) that represents the number of meetings with new/potential customers (i.e., total number of meetings your team had with new/potential customers at this event). (optional)
     * @param roiAmountActualSales A number (greater or equal to 0.00) that represents the actual sales amount (attributable to this event and already closed). (optional)
     * @param roiAmountPotentialSales A number (greater or equal to 0.00) that represents the additional opportunity / potential sales amount (attributable to this event, but, yet to be closed). (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String events2Patch(String apiKey, BigDecimal id, String name, LocalDate startDate, LocalDate endDate, BigDecimal participationTypeId, BigDecimal formatId, BigDecimal starRating, String websiteUrl, String venueName, BigDecimal boothSize, BigDecimal boothNumber, BigDecimal eventNotes, BigDecimal boothNotes, BigDecimal budgetNotes, BigDecimal roiNotes, BigDecimal budgetBoothReservation, BigDecimal budgetBoothServices, BigDecimal budgetAttendeeRegistrations, BigDecimal budgetTravel, BigDecimal budgetGiveaways, BigDecimal budgetShipments, BigDecimal budgetMiscExpenses, BigDecimal budgetSponsorships, BigDecimal roiNumLeads, BigDecimal roiNumImpressionsBooth, BigDecimal roiNumImpressionsSponsorships, BigDecimal roiNumImpressionsMedia, BigDecimal roiNumMeetingsExistingCustomers, BigDecimal roiNumMeetingsNewCustomers, BigDecimal roiAmountActualSales, BigDecimal roiAmountPotentialSales, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        ApiResponse<String> localVarResp = events2PatchWithHttpInfo(apiKey, id, name, startDate, endDate, participationTypeId, formatId, starRating, websiteUrl, venueName, boothSize, boothNumber, eventNotes, boothNotes, budgetNotes, roiNotes, budgetBoothReservation, budgetBoothServices, budgetAttendeeRegistrations, budgetTravel, budgetGiveaways, budgetShipments, budgetMiscExpenses, budgetSponsorships, roiNumLeads, roiNumImpressionsBooth, roiNumImpressionsSponsorships, roiNumImpressionsMedia, roiNumMeetingsExistingCustomers, roiNumMeetingsNewCustomers, roiAmountActualSales, roiAmountPotentialSales, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to update. (required)
     * @param name The name of the event. (optional)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (optional)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (optional)
     * @param participationTypeId Integer representing the participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional)
     * @param formatId Integer representing the FormatId for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param starRating Star Rating for the event (0, 1, 2, or 3). (optional)
     * @param websiteUrl URL of the event website. Must be a well-formed URL. (optional)
     * @param venueName The name of the venue for the event. (optional)
     * @param boothSize The size of your booth for the event. (optional)
     * @param boothNumber Your booth number for the event. (optional)
     * @param eventNotes Event Notes (under the Event Information tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param boothNotes Booth Notes (under the event Booth tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetNotes Budget Notes (under the event Budget tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param roiNotes ROI Notes (under the event ROI tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetBoothReservation A number (greater or equal to 0.00) that represents the budget for reserving the booth for the event. (optional)
     * @param budgetBoothServices A number (greater or equal to 0.00) that represents the budget for all the booth services for the event. (optional)
     * @param budgetAttendeeRegistrations A number (greater or equal to 0.00) that represents the budget for event registration / attendee tickets. (optional)
     * @param budgetTravel A number (greater or equal to 0.00) that represents the budget for travel and lodging for the event. (optional)
     * @param budgetGiveaways A number (greater or equal to 0.00) that represents the budget for your giveaways (swag and raffle items) for the event. (optional)
     * @param budgetShipments A number (greater or equal to 0.00) that represents the budget for all shipments for the event. (optional)
     * @param budgetMiscExpenses A number (greater or equal to 0.00) that represents the budget for all miscellaneous expenses for the event. (optional)
     * @param budgetSponsorships A number (greater or equal to 0.00) that represents the budget for all sponsorships for the event. (optional)
     * @param roiNumLeads An integer (greater or equal to 0) that represents the number of leads generated from this event. (optional)
     * @param roiNumImpressionsBooth An integer (greater or equal to 0) that represents the number of booth walk-bys / impressions (i.e., estimated total number of people who saw your booth at this event). (optional)
     * @param roiNumImpressionsSponsorships An integer (greater or equal to 0) that represents the number of sponsorship impressions (i.e., estimated total number of people reached through all your sponsorships for this event). (optional)
     * @param roiNumImpressionsMedia An integer (greater or equal to 0) that represents the number of social/traditional media impressions (i.e., estimated total number of people reached via social media or traditional media coverage). (optional)
     * @param roiNumMeetingsExistingCustomers An integer (greater or equal to 0) that represents the number of meetings with existing customers (i.e., total number of meetings your team had with your existing customers at this event). (optional)
     * @param roiNumMeetingsNewCustomers An integer (greater or equal to 0) that represents the number of meetings with new/potential customers (i.e., total number of meetings your team had with new/potential customers at this event). (optional)
     * @param roiAmountActualSales A number (greater or equal to 0.00) that represents the actual sales amount (attributable to this event and already closed). (optional)
     * @param roiAmountPotentialSales A number (greater or equal to 0.00) that represents the additional opportunity / potential sales amount (attributable to this event, but, yet to be closed). (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> events2PatchWithHttpInfo(String apiKey, BigDecimal id, String name, LocalDate startDate, LocalDate endDate, BigDecimal participationTypeId, BigDecimal formatId, BigDecimal starRating, String websiteUrl, String venueName, BigDecimal boothSize, BigDecimal boothNumber, BigDecimal eventNotes, BigDecimal boothNotes, BigDecimal budgetNotes, BigDecimal roiNotes, BigDecimal budgetBoothReservation, BigDecimal budgetBoothServices, BigDecimal budgetAttendeeRegistrations, BigDecimal budgetTravel, BigDecimal budgetGiveaways, BigDecimal budgetShipments, BigDecimal budgetMiscExpenses, BigDecimal budgetSponsorships, BigDecimal roiNumLeads, BigDecimal roiNumImpressionsBooth, BigDecimal roiNumImpressionsSponsorships, BigDecimal roiNumImpressionsMedia, BigDecimal roiNumMeetingsExistingCustomers, BigDecimal roiNumMeetingsNewCustomers, BigDecimal roiAmountActualSales, BigDecimal roiAmountPotentialSales, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        okhttp3.Call localVarCall = events2PatchValidateBeforeCall(apiKey, id, name, startDate, endDate, participationTypeId, formatId, starRating, websiteUrl, venueName, boothSize, boothNumber, eventNotes, boothNotes, budgetNotes, roiNotes, budgetBoothReservation, budgetBoothServices, budgetAttendeeRegistrations, budgetTravel, budgetGiveaways, budgetShipments, budgetMiscExpenses, budgetSponsorships, roiNumLeads, roiNumImpressionsBooth, roiNumImpressionsSponsorships, roiNumImpressionsMedia, roiNumMeetingsExistingCustomers, roiNumMeetingsNewCustomers, roiAmountActualSales, roiAmountPotentialSales, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to update. (required)
     * @param name The name of the event. (optional)
     * @param startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date. (optional)
     * @param endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date. (optional)
     * @param participationTypeId Integer representing the participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id&#39;s: /v1/references/event_participation_types (optional)
     * @param formatId Integer representing the FormatId for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid) (optional)
     * @param starRating Star Rating for the event (0, 1, 2, or 3). (optional)
     * @param websiteUrl URL of the event website. Must be a well-formed URL. (optional)
     * @param venueName The name of the venue for the event. (optional)
     * @param boothSize The size of your booth for the event. (optional)
     * @param boothNumber Your booth number for the event. (optional)
     * @param eventNotes Event Notes (under the Event Information tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param boothNotes Booth Notes (under the event Booth tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetNotes Budget Notes (under the event Budget tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param roiNotes ROI Notes (under the event ROI tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param budgetBoothReservation A number (greater or equal to 0.00) that represents the budget for reserving the booth for the event. (optional)
     * @param budgetBoothServices A number (greater or equal to 0.00) that represents the budget for all the booth services for the event. (optional)
     * @param budgetAttendeeRegistrations A number (greater or equal to 0.00) that represents the budget for event registration / attendee tickets. (optional)
     * @param budgetTravel A number (greater or equal to 0.00) that represents the budget for travel and lodging for the event. (optional)
     * @param budgetGiveaways A number (greater or equal to 0.00) that represents the budget for your giveaways (swag and raffle items) for the event. (optional)
     * @param budgetShipments A number (greater or equal to 0.00) that represents the budget for all shipments for the event. (optional)
     * @param budgetMiscExpenses A number (greater or equal to 0.00) that represents the budget for all miscellaneous expenses for the event. (optional)
     * @param budgetSponsorships A number (greater or equal to 0.00) that represents the budget for all sponsorships for the event. (optional)
     * @param roiNumLeads An integer (greater or equal to 0) that represents the number of leads generated from this event. (optional)
     * @param roiNumImpressionsBooth An integer (greater or equal to 0) that represents the number of booth walk-bys / impressions (i.e., estimated total number of people who saw your booth at this event). (optional)
     * @param roiNumImpressionsSponsorships An integer (greater or equal to 0) that represents the number of sponsorship impressions (i.e., estimated total number of people reached through all your sponsorships for this event). (optional)
     * @param roiNumImpressionsMedia An integer (greater or equal to 0) that represents the number of social/traditional media impressions (i.e., estimated total number of people reached via social media or traditional media coverage). (optional)
     * @param roiNumMeetingsExistingCustomers An integer (greater or equal to 0) that represents the number of meetings with existing customers (i.e., total number of meetings your team had with your existing customers at this event). (optional)
     * @param roiNumMeetingsNewCustomers An integer (greater or equal to 0) that represents the number of meetings with new/potential customers (i.e., total number of meetings your team had with new/potential customers at this event). (optional)
     * @param roiAmountActualSales A number (greater or equal to 0.00) that represents the actual sales amount (attributable to this event and already closed). (optional)
     * @param roiAmountPotentialSales A number (greater or equal to 0.00) that represents the additional opportunity / potential sales amount (attributable to this event, but, yet to be closed). (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular event. For example, you can use it to store the \&quot;external id\&quot; of the event (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events2PatchAsync(String apiKey, BigDecimal id, String name, LocalDate startDate, LocalDate endDate, BigDecimal participationTypeId, BigDecimal formatId, BigDecimal starRating, String websiteUrl, String venueName, BigDecimal boothSize, BigDecimal boothNumber, BigDecimal eventNotes, BigDecimal boothNotes, BigDecimal budgetNotes, BigDecimal roiNotes, BigDecimal budgetBoothReservation, BigDecimal budgetBoothServices, BigDecimal budgetAttendeeRegistrations, BigDecimal budgetTravel, BigDecimal budgetGiveaways, BigDecimal budgetShipments, BigDecimal budgetMiscExpenses, BigDecimal budgetSponsorships, BigDecimal roiNumLeads, BigDecimal roiNumImpressionsBooth, BigDecimal roiNumImpressionsSponsorships, BigDecimal roiNumImpressionsMedia, BigDecimal roiNumMeetingsExistingCustomers, BigDecimal roiNumMeetingsNewCustomers, BigDecimal roiAmountActualSales, BigDecimal roiAmountPotentialSales, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = events2PatchValidateBeforeCall(apiKey, id, name, startDate, endDate, participationTypeId, formatId, starRating, websiteUrl, venueName, boothSize, boothNumber, eventNotes, boothNotes, budgetNotes, roiNotes, budgetBoothReservation, budgetBoothServices, budgetAttendeeRegistrations, budgetTravel, budgetGiveaways, budgetShipments, budgetMiscExpenses, budgetSponsorships, roiNumLeads, roiNumImpressionsBooth, roiNumImpressionsSponsorships, roiNumImpressionsMedia, roiNumMeetingsExistingCustomers, roiNumMeetingsNewCustomers, roiAmountActualSales, roiAmountPotentialSales, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for events3Delete
     * @param apiKey  (required)
     * @param id The id of the event you would like to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events3DeleteCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/events/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call events3DeleteValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling events3Delete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling events3Delete(Async)");
        }

        return events3DeleteCall(apiKey, id, _callback);

    }

    /**
     * 
     * Delete an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to delete. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String events3Delete(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = events3DeleteWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to delete. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> events3DeleteWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = events3DeleteValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete an Event
     * @param apiKey  (required)
     * @param id The id of the event you would like to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call events3DeleteAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = events3DeleteValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsInfo0Get
     * @param apiKey  (required)
     * @param id Id of the specific event that you would like to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsInfo0GetCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/events/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsInfo0GetValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling eventsInfo0Get(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsInfo0Get(Async)");
        }

        return eventsInfo0GetCall(apiKey, id, _callback);

    }

    /**
     * 
     * Retrieve a Single Event by id
     * @param apiKey  (required)
     * @param id Id of the specific event that you would like to retrieve. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String eventsInfo0Get(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = eventsInfo0GetWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a Single Event by id
     * @param apiKey  (required)
     * @param id Id of the specific event that you would like to retrieve. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> eventsInfo0GetWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = eventsInfo0GetValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a Single Event by id
     * @param apiKey  (required)
     * @param id Id of the specific event that you would like to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsInfo0GetAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsInfo0GetValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
