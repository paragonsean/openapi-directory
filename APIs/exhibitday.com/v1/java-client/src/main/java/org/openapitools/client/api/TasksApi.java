/*
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tasks0Get
     * @param apiKey  (required)
     * @param filterByEventId Only include tasks from this given event. (optional)
     * @param filterByGeneralTasksOnly Only include general tasks (tasks on the main task board that do not belong to a particular event). Note: this filter cannot be used in conjunction with the filter_by_event_id filter. (optional)
     * @param filterByIncompleteOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are NOT marked as Completed. (optional, default to false)
     * @param filterByCompletedOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are marked as Completed. (optional, default to false)
     * @param filterByNoDueDate If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that do not have a due date set. (optional, default to false)
     * @param filterByDueDateGreaterThanOrEqualTo Only include tasks that have a due date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByDueDateSmallerThanOrEqualTo Only include tasks that have a due date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByHasAssignee Only include tasks that have an assignee. Unassigned tasks will get excluded. (optional, default to false)
     * @param filterByAssigneeUserId Only include tasks that are assigned to this user. You can get a list of UserId&#39;s in your workspace from the /v1/references/users_and_resources endpoint. Note: If you want to retrieve the tasks that are unassigned, include this parameter and pass in the word \&quot;null\&quot; as the value for it. (optional)
     * @param filterByTaskNameContainsText Only include tasks that have the given text in the task Name. For example: If you want to retrieve all the tasks that have the word “order” in the task Name field, pass in the value “order” for the filter_by_task_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByIntegrationMetadataField1 Only include tasks that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include tasks that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include tasks that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include tasks that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include tasks that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param hydrateTaskComments Include the comments collection for each task in the result set. Note: hydrating the comments collection for each task in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of comments for each task in the result set. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks0GetCall(String apiKey, BigDecimal filterByEventId, BigDecimal filterByGeneralTasksOnly, String filterByIncompleteOnly, String filterByCompletedOnly, String filterByNoDueDate, LocalDate filterByDueDateGreaterThanOrEqualTo, LocalDate filterByDueDateSmallerThanOrEqualTo, String filterByHasAssignee, String filterByAssigneeUserId, String filterByTaskNameContainsText, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTaskComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterByIntegrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_1", filterByIntegrationMetadataField1));
        }

        if (filterByIntegrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_2", filterByIntegrationMetadataField2));
        }

        if (filterByIntegrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_3", filterByIntegrationMetadataField3));
        }

        if (filterByIntegrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_4", filterByIntegrationMetadataField4));
        }

        if (filterByIntegrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_by_integration_metadata_field_5", filterByIntegrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (filterByEventId != null) {
            localVarHeaderParams.put("filter_by_event_id", localVarApiClient.parameterToString(filterByEventId));
        }

        if (filterByGeneralTasksOnly != null) {
            localVarHeaderParams.put("filter_by_general_tasks_only", localVarApiClient.parameterToString(filterByGeneralTasksOnly));
        }

        if (filterByIncompleteOnly != null) {
            localVarHeaderParams.put("filter_by_incomplete_only", localVarApiClient.parameterToString(filterByIncompleteOnly));
        }

        if (filterByCompletedOnly != null) {
            localVarHeaderParams.put("filter_by_completed_only", localVarApiClient.parameterToString(filterByCompletedOnly));
        }

        if (filterByNoDueDate != null) {
            localVarHeaderParams.put("filter_by_no_due_date", localVarApiClient.parameterToString(filterByNoDueDate));
        }

        if (filterByDueDateGreaterThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_due_date_greater_than_or_equal_to", localVarApiClient.parameterToString(filterByDueDateGreaterThanOrEqualTo));
        }

        if (filterByDueDateSmallerThanOrEqualTo != null) {
            localVarHeaderParams.put("filter_by_due_date_smaller_than_or_equal_to", localVarApiClient.parameterToString(filterByDueDateSmallerThanOrEqualTo));
        }

        if (filterByHasAssignee != null) {
            localVarHeaderParams.put("filter_by_has_assignee", localVarApiClient.parameterToString(filterByHasAssignee));
        }

        if (filterByAssigneeUserId != null) {
            localVarHeaderParams.put("filter_by_assignee_user_id", localVarApiClient.parameterToString(filterByAssigneeUserId));
        }

        if (filterByTaskNameContainsText != null) {
            localVarHeaderParams.put("filter_by_task_name_contains_text", localVarApiClient.parameterToString(filterByTaskNameContainsText));
        }

        if (hydrateTaskComments != null) {
            localVarHeaderParams.put("hydrate_task_comments", localVarApiClient.parameterToString(hydrateTaskComments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasks0GetValidateBeforeCall(String apiKey, BigDecimal filterByEventId, BigDecimal filterByGeneralTasksOnly, String filterByIncompleteOnly, String filterByCompletedOnly, String filterByNoDueDate, LocalDate filterByDueDateGreaterThanOrEqualTo, LocalDate filterByDueDateSmallerThanOrEqualTo, String filterByHasAssignee, String filterByAssigneeUserId, String filterByTaskNameContainsText, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTaskComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasks0Get(Async)");
        }

        return tasks0GetCall(apiKey, filterByEventId, filterByGeneralTasksOnly, filterByIncompleteOnly, filterByCompletedOnly, filterByNoDueDate, filterByDueDateGreaterThanOrEqualTo, filterByDueDateSmallerThanOrEqualTo, filterByHasAssignee, filterByAssigneeUserId, filterByTaskNameContainsText, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTaskComments, _callback);

    }

    /**
     * 
     * Retrieve Tasks
     * @param apiKey  (required)
     * @param filterByEventId Only include tasks from this given event. (optional)
     * @param filterByGeneralTasksOnly Only include general tasks (tasks on the main task board that do not belong to a particular event). Note: this filter cannot be used in conjunction with the filter_by_event_id filter. (optional)
     * @param filterByIncompleteOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are NOT marked as Completed. (optional, default to false)
     * @param filterByCompletedOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are marked as Completed. (optional, default to false)
     * @param filterByNoDueDate If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that do not have a due date set. (optional, default to false)
     * @param filterByDueDateGreaterThanOrEqualTo Only include tasks that have a due date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByDueDateSmallerThanOrEqualTo Only include tasks that have a due date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByHasAssignee Only include tasks that have an assignee. Unassigned tasks will get excluded. (optional, default to false)
     * @param filterByAssigneeUserId Only include tasks that are assigned to this user. You can get a list of UserId&#39;s in your workspace from the /v1/references/users_and_resources endpoint. Note: If you want to retrieve the tasks that are unassigned, include this parameter and pass in the word \&quot;null\&quot; as the value for it. (optional)
     * @param filterByTaskNameContainsText Only include tasks that have the given text in the task Name. For example: If you want to retrieve all the tasks that have the word “order” in the task Name field, pass in the value “order” for the filter_by_task_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByIntegrationMetadataField1 Only include tasks that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include tasks that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include tasks that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include tasks that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include tasks that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param hydrateTaskComments Include the comments collection for each task in the result set. Note: hydrating the comments collection for each task in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of comments for each task in the result set. (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasks0Get(String apiKey, BigDecimal filterByEventId, BigDecimal filterByGeneralTasksOnly, String filterByIncompleteOnly, String filterByCompletedOnly, String filterByNoDueDate, LocalDate filterByDueDateGreaterThanOrEqualTo, LocalDate filterByDueDateSmallerThanOrEqualTo, String filterByHasAssignee, String filterByAssigneeUserId, String filterByTaskNameContainsText, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTaskComments) throws ApiException {
        ApiResponse<String> localVarResp = tasks0GetWithHttpInfo(apiKey, filterByEventId, filterByGeneralTasksOnly, filterByIncompleteOnly, filterByCompletedOnly, filterByNoDueDate, filterByDueDateGreaterThanOrEqualTo, filterByDueDateSmallerThanOrEqualTo, filterByHasAssignee, filterByAssigneeUserId, filterByTaskNameContainsText, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTaskComments);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Tasks
     * @param apiKey  (required)
     * @param filterByEventId Only include tasks from this given event. (optional)
     * @param filterByGeneralTasksOnly Only include general tasks (tasks on the main task board that do not belong to a particular event). Note: this filter cannot be used in conjunction with the filter_by_event_id filter. (optional)
     * @param filterByIncompleteOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are NOT marked as Completed. (optional, default to false)
     * @param filterByCompletedOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are marked as Completed. (optional, default to false)
     * @param filterByNoDueDate If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that do not have a due date set. (optional, default to false)
     * @param filterByDueDateGreaterThanOrEqualTo Only include tasks that have a due date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByDueDateSmallerThanOrEqualTo Only include tasks that have a due date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByHasAssignee Only include tasks that have an assignee. Unassigned tasks will get excluded. (optional, default to false)
     * @param filterByAssigneeUserId Only include tasks that are assigned to this user. You can get a list of UserId&#39;s in your workspace from the /v1/references/users_and_resources endpoint. Note: If you want to retrieve the tasks that are unassigned, include this parameter and pass in the word \&quot;null\&quot; as the value for it. (optional)
     * @param filterByTaskNameContainsText Only include tasks that have the given text in the task Name. For example: If you want to retrieve all the tasks that have the word “order” in the task Name field, pass in the value “order” for the filter_by_task_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByIntegrationMetadataField1 Only include tasks that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include tasks that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include tasks that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include tasks that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include tasks that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param hydrateTaskComments Include the comments collection for each task in the result set. Note: hydrating the comments collection for each task in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of comments for each task in the result set. (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasks0GetWithHttpInfo(String apiKey, BigDecimal filterByEventId, BigDecimal filterByGeneralTasksOnly, String filterByIncompleteOnly, String filterByCompletedOnly, String filterByNoDueDate, LocalDate filterByDueDateGreaterThanOrEqualTo, LocalDate filterByDueDateSmallerThanOrEqualTo, String filterByHasAssignee, String filterByAssigneeUserId, String filterByTaskNameContainsText, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTaskComments) throws ApiException {
        okhttp3.Call localVarCall = tasks0GetValidateBeforeCall(apiKey, filterByEventId, filterByGeneralTasksOnly, filterByIncompleteOnly, filterByCompletedOnly, filterByNoDueDate, filterByDueDateGreaterThanOrEqualTo, filterByDueDateSmallerThanOrEqualTo, filterByHasAssignee, filterByAssigneeUserId, filterByTaskNameContainsText, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTaskComments, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Tasks
     * @param apiKey  (required)
     * @param filterByEventId Only include tasks from this given event. (optional)
     * @param filterByGeneralTasksOnly Only include general tasks (tasks on the main task board that do not belong to a particular event). Note: this filter cannot be used in conjunction with the filter_by_event_id filter. (optional)
     * @param filterByIncompleteOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are NOT marked as Completed. (optional, default to false)
     * @param filterByCompletedOnly If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that are marked as Completed. (optional, default to false)
     * @param filterByNoDueDate If you pass in the value \&quot;true\&quot; for this parameter, the result will only include tasks that do not have a due date set. (optional, default to false)
     * @param filterByDueDateGreaterThanOrEqualTo Only include tasks that have a due date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByDueDateSmallerThanOrEqualTo Only include tasks that have a due date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD. Note: this filter cannot be used in conjunction with the filter_by_no_due_date filter. (optional)
     * @param filterByHasAssignee Only include tasks that have an assignee. Unassigned tasks will get excluded. (optional, default to false)
     * @param filterByAssigneeUserId Only include tasks that are assigned to this user. You can get a list of UserId&#39;s in your workspace from the /v1/references/users_and_resources endpoint. Note: If you want to retrieve the tasks that are unassigned, include this parameter and pass in the word \&quot;null\&quot; as the value for it. (optional)
     * @param filterByTaskNameContainsText Only include tasks that have the given text in the task Name. For example: If you want to retrieve all the tasks that have the word “order” in the task Name field, pass in the value “order” for the filter_by_task_name_contains_text parameter. Note: this text search is not case-sensitive. (optional)
     * @param filterByIntegrationMetadataField1 Only include tasks that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField2 Only include tasks that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField3 Only include tasks that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField4 Only include tasks that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param filterByIntegrationMetadataField5 Only include tasks that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: A task&#39;s IntegrationMetadataField5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular task (e.g., the \&quot;external id\&quot; of the task from another system you&#39;re integrating with). (optional)
     * @param hydrateTaskComments Include the comments collection for each task in the result set. Note: hydrating the comments collection for each task in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of comments for each task in the result set. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks0GetAsync(String apiKey, BigDecimal filterByEventId, BigDecimal filterByGeneralTasksOnly, String filterByIncompleteOnly, String filterByCompletedOnly, String filterByNoDueDate, LocalDate filterByDueDateGreaterThanOrEqualTo, LocalDate filterByDueDateSmallerThanOrEqualTo, String filterByHasAssignee, String filterByAssigneeUserId, String filterByTaskNameContainsText, String filterByIntegrationMetadataField1, String filterByIntegrationMetadataField2, String filterByIntegrationMetadataField3, String filterByIntegrationMetadataField4, String filterByIntegrationMetadataField5, String hydrateTaskComments, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasks0GetValidateBeforeCall(apiKey, filterByEventId, filterByGeneralTasksOnly, filterByIncompleteOnly, filterByCompletedOnly, filterByNoDueDate, filterByDueDateGreaterThanOrEqualTo, filterByDueDateSmallerThanOrEqualTo, filterByHasAssignee, filterByAssigneeUserId, filterByTaskNameContainsText, filterByIntegrationMetadataField1, filterByIntegrationMetadataField2, filterByIntegrationMetadataField3, filterByIntegrationMetadataField4, filterByIntegrationMetadataField5, hydrateTaskComments, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasks1Post
     * @param apiKey  (required)
     * @param name The name/short description of the task. (required)
     * @param eventId The id of the event you would like to add the task under. If this value is not provided, the task will be added as a general (non-event-specific) task in your workspace (under the main Task Board). (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. Leave this value blank if you don&#39;t want to place/categorize the task under a specific event task section. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). (optional)
     * @param assigneeUserId The id of the user you would like to assign the task to. If you want the task to be unassigned, leave the value for this parameter blank. To get a list of all the user ids in your workspace, use the /v1/references/users_and_resources API endpoint. Users that can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks1PostCall(String apiKey, String name, BigDecimal eventId, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (integrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_1", integrationMetadataField1));
        }

        if (integrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_2", integrationMetadataField2));
        }

        if (integrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_3", integrationMetadataField3));
        }

        if (integrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_4", integrationMetadataField4));
        }

        if (integrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_5", integrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (name != null) {
            localVarHeaderParams.put("name", localVarApiClient.parameterToString(name));
        }

        if (eventId != null) {
            localVarHeaderParams.put("event_id", localVarApiClient.parameterToString(eventId));
        }

        if (taskSectionId != null) {
            localVarHeaderParams.put("task_section_id", localVarApiClient.parameterToString(taskSectionId));
        }

        if (isCompleted != null) {
            localVarHeaderParams.put("is_completed", localVarApiClient.parameterToString(isCompleted));
        }

        if (dueDate != null) {
            localVarHeaderParams.put("due_date", localVarApiClient.parameterToString(dueDate));
        }

        if (assigneeUserId != null) {
            localVarHeaderParams.put("assignee_user_id", localVarApiClient.parameterToString(assigneeUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasks1PostValidateBeforeCall(String apiKey, String name, BigDecimal eventId, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasks1Post(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling tasks1Post(Async)");
        }

        return tasks1PostCall(apiKey, name, eventId, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);

    }

    /**
     * 
     * Add a Task
     * @param apiKey  (required)
     * @param name The name/short description of the task. (required)
     * @param eventId The id of the event you would like to add the task under. If this value is not provided, the task will be added as a general (non-event-specific) task in your workspace (under the main Task Board). (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. Leave this value blank if you don&#39;t want to place/categorize the task under a specific event task section. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). (optional)
     * @param assigneeUserId The id of the user you would like to assign the task to. If you want the task to be unassigned, leave the value for this parameter blank. To get a list of all the user ids in your workspace, use the /v1/references/users_and_resources API endpoint. Users that can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasks1Post(String apiKey, String name, BigDecimal eventId, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        ApiResponse<String> localVarResp = tasks1PostWithHttpInfo(apiKey, name, eventId, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a Task
     * @param apiKey  (required)
     * @param name The name/short description of the task. (required)
     * @param eventId The id of the event you would like to add the task under. If this value is not provided, the task will be added as a general (non-event-specific) task in your workspace (under the main Task Board). (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. Leave this value blank if you don&#39;t want to place/categorize the task under a specific event task section. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). (optional)
     * @param assigneeUserId The id of the user you would like to assign the task to. If you want the task to be unassigned, leave the value for this parameter blank. To get a list of all the user ids in your workspace, use the /v1/references/users_and_resources API endpoint. Users that can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasks1PostWithHttpInfo(String apiKey, String name, BigDecimal eventId, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        okhttp3.Call localVarCall = tasks1PostValidateBeforeCall(apiKey, name, eventId, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a Task
     * @param apiKey  (required)
     * @param name The name/short description of the task. (required)
     * @param eventId The id of the event you would like to add the task under. If this value is not provided, the task will be added as a general (non-event-specific) task in your workspace (under the main Task Board). (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. Leave this value blank if you don&#39;t want to place/categorize the task under a specific event task section. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). (optional)
     * @param assigneeUserId The id of the user you would like to assign the task to. If you want the task to be unassigned, leave the value for this parameter blank. To get a list of all the user ids in your workspace, use the /v1/references/users_and_resources API endpoint. Users that can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks1PostAsync(String apiKey, String name, BigDecimal eventId, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasks1PostValidateBeforeCall(apiKey, name, eventId, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasks2Patch
     * @param apiKey  (required)
     * @param id The Id of the task you would like to update. (required)
     * @param name The name/short description of the task. (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. If you don&#39;t want to place/categorize the task under a specific event task section, pass in the value  ull\&quot; for this parameter. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). If you don&#39;t want the task to have a due date, pass in the value \&quot;null\&quot; for this parameter. (optional)
     * @param assigneeUserId The User Id of the user you would like to assign the task to. If you want the task to be unassigned, pass in the value \&quot;null\&quot; for this parameter. To get a list of all the User Ids in your workspace, use the /v1/references/users_and_resources API endpoint; users who can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks2PatchCall(String apiKey, BigDecimal id, String name, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (integrationMetadataField1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_1", integrationMetadataField1));
        }

        if (integrationMetadataField2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_2", integrationMetadataField2));
        }

        if (integrationMetadataField3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_3", integrationMetadataField3));
        }

        if (integrationMetadataField4 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_4", integrationMetadataField4));
        }

        if (integrationMetadataField5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_metadata_field_5", integrationMetadataField5));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        if (name != null) {
            localVarHeaderParams.put("name", localVarApiClient.parameterToString(name));
        }

        if (taskSectionId != null) {
            localVarHeaderParams.put("task_section_id", localVarApiClient.parameterToString(taskSectionId));
        }

        if (isCompleted != null) {
            localVarHeaderParams.put("is_completed", localVarApiClient.parameterToString(isCompleted));
        }

        if (dueDate != null) {
            localVarHeaderParams.put("due_date", localVarApiClient.parameterToString(dueDate));
        }

        if (assigneeUserId != null) {
            localVarHeaderParams.put("assignee_user_id", localVarApiClient.parameterToString(assigneeUserId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasks2PatchValidateBeforeCall(String apiKey, BigDecimal id, String name, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasks2Patch(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasks2Patch(Async)");
        }

        return tasks2PatchCall(apiKey, id, name, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);

    }

    /**
     * 
     * Update a Task
     * @param apiKey  (required)
     * @param id The Id of the task you would like to update. (required)
     * @param name The name/short description of the task. (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. If you don&#39;t want to place/categorize the task under a specific event task section, pass in the value  ull\&quot; for this parameter. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). If you don&#39;t want the task to have a due date, pass in the value \&quot;null\&quot; for this parameter. (optional)
     * @param assigneeUserId The User Id of the user you would like to assign the task to. If you want the task to be unassigned, pass in the value \&quot;null\&quot; for this parameter. To get a list of all the User Ids in your workspace, use the /v1/references/users_and_resources API endpoint; users who can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasks2Patch(String apiKey, BigDecimal id, String name, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        ApiResponse<String> localVarResp = tasks2PatchWithHttpInfo(apiKey, id, name, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a Task
     * @param apiKey  (required)
     * @param id The Id of the task you would like to update. (required)
     * @param name The name/short description of the task. (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. If you don&#39;t want to place/categorize the task under a specific event task section, pass in the value  ull\&quot; for this parameter. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). If you don&#39;t want the task to have a due date, pass in the value \&quot;null\&quot; for this parameter. (optional)
     * @param assigneeUserId The User Id of the user you would like to assign the task to. If you want the task to be unassigned, pass in the value \&quot;null\&quot; for this parameter. To get a list of all the User Ids in your workspace, use the /v1/references/users_and_resources API endpoint; users who can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasks2PatchWithHttpInfo(String apiKey, BigDecimal id, String name, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5) throws ApiException {
        okhttp3.Call localVarCall = tasks2PatchValidateBeforeCall(apiKey, id, name, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a Task
     * @param apiKey  (required)
     * @param id The Id of the task you would like to update. (required)
     * @param name The name/short description of the task. (optional)
     * @param taskSectionId The id of the event task section that the task should be placed under. If you don&#39;t want to place/categorize the task under a specific event task section, pass in the value  ull\&quot; for this parameter. Note: you can get a list of available Task Section Ids for a given event using the /v1/event/info endpoint. (optional)
     * @param isCompleted Boolean representing whether or not the task has been completed. (optional, default to false)
     * @param dueDate Task due date (format: YYYY-MM-DD). If you don&#39;t want the task to have a due date, pass in the value \&quot;null\&quot; for this parameter. (optional)
     * @param assigneeUserId The User Id of the user you would like to assign the task to. If you want the task to be unassigned, pass in the value \&quot;null\&quot; for this parameter. To get a list of all the User Ids in your workspace, use the /v1/references/users_and_resources API endpoint; users who can have tasks assigned to them will have their can_have_tasks_assigned property set to true. (optional)
     * @param details The details/description of the task. Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a &lt;br/&gt; tag. (optional)
     * @param integrationMetadataField1 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField2 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField3 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField4 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param integrationMetadataField5 This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you&#39;d like about a particular task. For example, you can use it to store the \&quot;external id\&quot; of the task (from another system you&#39;re integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of tasks (using the /v1/tasks endpoint), you can filter down the results by the value of this field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks2PatchAsync(String apiKey, BigDecimal id, String name, BigDecimal taskSectionId, String isCompleted, LocalDate dueDate, String assigneeUserId, String details, String integrationMetadataField1, String integrationMetadataField2, String integrationMetadataField3, String integrationMetadataField4, String integrationMetadataField5, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasks2PatchValidateBeforeCall(apiKey, id, name, taskSectionId, isCompleted, dueDate, assigneeUserId, details, integrationMetadataField1, integrationMetadataField2, integrationMetadataField3, integrationMetadataField4, integrationMetadataField5, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasks3Delete
     * @param apiKey  (required)
     * @param id The id of the task you would like to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks3DeleteCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasks3DeleteValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasks3Delete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasks3Delete(Async)");
        }

        return tasks3DeleteCall(apiKey, id, _callback);

    }

    /**
     * 
     * Delete a Task
     * @param apiKey  (required)
     * @param id The id of the task you would like to delete. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasks3Delete(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = tasks3DeleteWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a Task
     * @param apiKey  (required)
     * @param id The id of the task you would like to delete. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasks3DeleteWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = tasks3DeleteValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Task
     * @param apiKey  (required)
     * @param id The id of the task you would like to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasks3DeleteAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasks3DeleteValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksComment0Get
     * @param apiKey  (required)
     * @param id Id of the specific task comment that you would like to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment0GetCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksComment0GetValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksComment0Get(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksComment0Get(Async)");
        }

        return tasksComment0GetCall(apiKey, id, _callback);

    }

    /**
     * 
     * Retrieve a Single Task Comment by id
     * @param apiKey  (required)
     * @param id Id of the specific task comment that you would like to retrieve. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksComment0Get(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = tasksComment0GetWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a Single Task Comment by id
     * @param apiKey  (required)
     * @param id Id of the specific task comment that you would like to retrieve. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksComment0GetWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = tasksComment0GetValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a Single Task Comment by id
     * @param apiKey  (required)
     * @param id Id of the specific task comment that you would like to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment0GetAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksComment0GetValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksComment1Post
     * @param apiKey  (required)
     * @param taskId The id of the task you would like to add the comment to. (required)
     * @param comment The text of comment you would like to add. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment1PostCall(String apiKey, BigDecimal taskId, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (taskId != null) {
            localVarHeaderParams.put("task_id", localVarApiClient.parameterToString(taskId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksComment1PostValidateBeforeCall(String apiKey, BigDecimal taskId, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksComment1Post(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling tasksComment1Post(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling tasksComment1Post(Async)");
        }

        return tasksComment1PostCall(apiKey, taskId, comment, _callback);

    }

    /**
     * 
     * Add a Comment to a Task
     * @param apiKey  (required)
     * @param taskId The id of the task you would like to add the comment to. (required)
     * @param comment The text of comment you would like to add. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksComment1Post(String apiKey, BigDecimal taskId, String comment) throws ApiException {
        ApiResponse<String> localVarResp = tasksComment1PostWithHttpInfo(apiKey, taskId, comment);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a Comment to a Task
     * @param apiKey  (required)
     * @param taskId The id of the task you would like to add the comment to. (required)
     * @param comment The text of comment you would like to add. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksComment1PostWithHttpInfo(String apiKey, BigDecimal taskId, String comment) throws ApiException {
        okhttp3.Call localVarCall = tasksComment1PostValidateBeforeCall(apiKey, taskId, comment, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a Comment to a Task
     * @param apiKey  (required)
     * @param taskId The id of the task you would like to add the comment to. (required)
     * @param comment The text of comment you would like to add. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment1PostAsync(String apiKey, BigDecimal taskId, String comment, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksComment1PostValidateBeforeCall(apiKey, taskId, comment, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksComment2Patch
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to update. (required)
     * @param comment The text that you would like to replace the existing comment with. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment2PatchCall(String apiKey, BigDecimal id, String comment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksComment2PatchValidateBeforeCall(String apiKey, BigDecimal id, String comment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksComment2Patch(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksComment2Patch(Async)");
        }

        // verify the required parameter 'comment' is set
        if (comment == null) {
            throw new ApiException("Missing the required parameter 'comment' when calling tasksComment2Patch(Async)");
        }

        return tasksComment2PatchCall(apiKey, id, comment, _callback);

    }

    /**
     * 
     * Update a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to update. (required)
     * @param comment The text that you would like to replace the existing comment with. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksComment2Patch(String apiKey, BigDecimal id, String comment) throws ApiException {
        ApiResponse<String> localVarResp = tasksComment2PatchWithHttpInfo(apiKey, id, comment);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to update. (required)
     * @param comment The text that you would like to replace the existing comment with. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksComment2PatchWithHttpInfo(String apiKey, BigDecimal id, String comment) throws ApiException {
        okhttp3.Call localVarCall = tasksComment2PatchValidateBeforeCall(apiKey, id, comment, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to update. (required)
     * @param comment The text that you would like to replace the existing comment with. Only accepts plain text. Any html tags in the value you pass in will be stripped. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment2PatchAsync(String apiKey, BigDecimal id, String comment, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksComment2PatchValidateBeforeCall(apiKey, id, comment, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksComment3Delete
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment3DeleteCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksComment3DeleteValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksComment3Delete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksComment3Delete(Async)");
        }

        return tasksComment3DeleteCall(apiKey, id, _callback);

    }

    /**
     * 
     * Delete a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to delete. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksComment3Delete(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = tasksComment3DeleteWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to delete. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksComment3DeleteWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = tasksComment3DeleteValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Task Comment
     * @param apiKey  (required)
     * @param id The Id of the task comment you would like to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComment3DeleteAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksComment3DeleteValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksComments0Get
     * @param apiKey  (required)
     * @param filterByEventId Only include task comment for tasks from this given event. (optional)
     * @param filterByTaskId Only include task comments for this specific task. (optional)
     * @param hydrateTask Include the task object for each task comment in the result set. Note: hydrating the task object for each task comment in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the task object each comment in the result set. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComments0GetCall(String apiKey, BigDecimal filterByEventId, BigDecimal filterByTaskId, String hydrateTask, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (filterByEventId != null) {
            localVarHeaderParams.put("filter_by_event_id", localVarApiClient.parameterToString(filterByEventId));
        }

        if (filterByTaskId != null) {
            localVarHeaderParams.put("filter_by_task_id", localVarApiClient.parameterToString(filterByTaskId));
        }

        if (hydrateTask != null) {
            localVarHeaderParams.put("hydrate_task", localVarApiClient.parameterToString(hydrateTask));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksComments0GetValidateBeforeCall(String apiKey, BigDecimal filterByEventId, BigDecimal filterByTaskId, String hydrateTask, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksComments0Get(Async)");
        }

        return tasksComments0GetCall(apiKey, filterByEventId, filterByTaskId, hydrateTask, _callback);

    }

    /**
     * 
     * Retrieve Task Comments
     * @param apiKey  (required)
     * @param filterByEventId Only include task comment for tasks from this given event. (optional)
     * @param filterByTaskId Only include task comments for this specific task. (optional)
     * @param hydrateTask Include the task object for each task comment in the result set. Note: hydrating the task object for each task comment in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the task object each comment in the result set. (optional, default to false)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksComments0Get(String apiKey, BigDecimal filterByEventId, BigDecimal filterByTaskId, String hydrateTask) throws ApiException {
        ApiResponse<String> localVarResp = tasksComments0GetWithHttpInfo(apiKey, filterByEventId, filterByTaskId, hydrateTask);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Task Comments
     * @param apiKey  (required)
     * @param filterByEventId Only include task comment for tasks from this given event. (optional)
     * @param filterByTaskId Only include task comments for this specific task. (optional)
     * @param hydrateTask Include the task object for each task comment in the result set. Note: hydrating the task object for each task comment in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the task object each comment in the result set. (optional, default to false)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksComments0GetWithHttpInfo(String apiKey, BigDecimal filterByEventId, BigDecimal filterByTaskId, String hydrateTask) throws ApiException {
        okhttp3.Call localVarCall = tasksComments0GetValidateBeforeCall(apiKey, filterByEventId, filterByTaskId, hydrateTask, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Task Comments
     * @param apiKey  (required)
     * @param filterByEventId Only include task comment for tasks from this given event. (optional)
     * @param filterByTaskId Only include task comments for this specific task. (optional)
     * @param hydrateTask Include the task object for each task comment in the result set. Note: hydrating the task object for each task comment in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the task object each comment in the result set. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksComments0GetAsync(String apiKey, BigDecimal filterByEventId, BigDecimal filterByTaskId, String hydrateTask, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksComments0GetValidateBeforeCall(apiKey, filterByEventId, filterByTaskId, hydrateTask, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksInfo0Get
     * @param apiKey  (required)
     * @param id Id of the specific task that you would like to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksInfo0GetCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tasks/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("api_key", localVarApiClient.parameterToString(apiKey));
        }

        if (id != null) {
            localVarHeaderParams.put("id", localVarApiClient.parameterToString(id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksInfo0GetValidateBeforeCall(String apiKey, BigDecimal id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tasksInfo0Get(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tasksInfo0Get(Async)");
        }

        return tasksInfo0GetCall(apiKey, id, _callback);

    }

    /**
     * 
     * Retrieve a Single Task by id
     * @param apiKey  (required)
     * @param id Id of the specific task that you would like to retrieve. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String tasksInfo0Get(String apiKey, BigDecimal id) throws ApiException {
        ApiResponse<String> localVarResp = tasksInfo0GetWithHttpInfo(apiKey, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a Single Task by id
     * @param apiKey  (required)
     * @param id Id of the specific task that you would like to retrieve. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> tasksInfo0GetWithHttpInfo(String apiKey, BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = tasksInfo0GetValidateBeforeCall(apiKey, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a Single Task by id
     * @param apiKey  (required)
     * @param id Id of the specific task that you would like to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksInfo0GetAsync(String apiKey, BigDecimal id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksInfo0GetValidateBeforeCall(apiKey, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
