/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Events service.
* @module api/EventsApi
* @version v1
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the events0Get operation.
     * @callback module:api/EventsApi~events0GetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Events
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} [filterByEventNameContainsText] Only include events that have the given text in the event Name. For example: If you want to retrieve all the events that have the word “International” in the event Name field, pass in the value “International” for the filter_by_event_name_contains_text parameter. Note: this text search is not case-sensitive.
     * @param {Date} [filterByStartDateGreaterThanOrEqualTo] Only include events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByStartDateSmallerThanOrEqualTo] Only include events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByEndDateGreaterThanOrEqualTo] Only include events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByEndDateSmallerThanOrEqualTo] Only include events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Number} [filterByEventParticipationTypeId] Only include events that have their participation_type_id equal to the value passed in for this filter parameter. To get a list of available event Participation Type Ids in your workspace, refer to this endpoint: /v1/references/event_participation_types
     * @param {Number} [filterByEventFormatId] Only include events that have their format_id equal to the value passed in for this filter parameter. The following integer values are accepted (1 for In-Person, 2 for Virtual, 3 for Hybrid)
     * @param {Number} [filterByEventStarRating] Only include events that have their star rating equal to the value passed in for this filter parameter. The following integer values are accepted: 0, 1, 2, 3
     * @param {String} [filterByEventTag] Only include events that have this tag. For example, you can use this filter to get all the events that have the tag “International”. Note: You can only pass in one tag to filter based on.
     * @param {String} [filterByCustomEventFieldCustomNNNNNN] This is a special filter that lets you filter down your events based on a value of a Custom Text field or a Custom Dropdown field under the Event Information tab, Event Booth tab, or the Special Event tab. To use this filter, you’ll need the field name for the custom text field or custom dropdown field. You can obtain a list of field names for custom event fields in your workspace from the following endpoint: /v1/references/event_custom_fields. For example, if you have configured a custom dropdown field called “Region” under the Event information tab, and its field name is “custom_123456” and you would like to filter your events to include only ones that have “Northeast” selected for that custom dropdown field, pass in “filter_by_custom_event_field__custom_123456” as the parameter name and “Northeast” as its parameter value. Note: You can only filter down based on one custom event field (and it has to be either a custom text field or a custom dropdown field).
     * @param {String} [filterByIntegrationMetadataField1] Only include events that have their integration_metadata_field_1 property equal to the value you pass in for this parameter. Note: An event's integration_metadata_field_1 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \"external id\" of the event from another system you're integrating with).
     * @param {String} [filterByIntegrationMetadataField2] Only include events that have their integration_metadata_field_2 property equal to the value you pass in for this parameter. Note: An event's integration_metadata_field_2 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \"external id\" of the event from another system you're integrating with).
     * @param {String} [filterByIntegrationMetadataField3] Only include events that have their integration_metadata_field_3 property equal to the value you pass in for this parameter. Note: An event's integration_metadata_field_3 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \"external id\" of the event from another system you're integrating with).
     * @param {String} [filterByIntegrationMetadataField4] Only include events that have their integration_metadata_field_4 property equal to the value you pass in for this parameter. Note: An event's integration_metadata_field_4 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \"external id\" of the event from another system you're integrating with).
     * @param {String} [filterByIntegrationMetadataField5] Only include events that have their integration_metadata_field_5 property equal to the value you pass in for this parameter. Note: An event's integration_metadata_field_5 property is an integration-specific text field only accessible via the ExhibitDay API. This field is typically used to store metadata or information about a particular event (e.g., the \"external id\" of the event from another system you're integrating with).
     * @param {String} [hydrateTasks = 'false')] Include the tasks collection for each event in the result set. Note: hydrating the task collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of tasks for each event in the result set.
     * @param {String} [hydrateTaskSectionsList = 'false')] Include the list of available task sections for each event in the result set. Note: hydrating the event task section collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the list of task sections for each event in the result set.
     * @param {String} [hydrateCustomFields = 'false')] Include the event custom fields (i.e. custom fields that have been added to your workspace) for each event in the result set. Note: hydrating the event custom field collection for each event in the results will naturally yield a larger response size and response time. Set the value for this parameter to true only if you need to include the custom field values for each event in the result set.
     * @param {module:api/EventsApi~events0GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    events0Get(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling events0Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter_by_custom_event_field__custom_NNNNNN': opts['filterByCustomEventFieldCustomNNNNNN'],
        'filter_by_integration_metadata_field_1': opts['filterByIntegrationMetadataField1'],
        'filter_by_integration_metadata_field_2': opts['filterByIntegrationMetadataField2'],
        'filter_by_integration_metadata_field_3': opts['filterByIntegrationMetadataField3'],
        'filter_by_integration_metadata_field_4': opts['filterByIntegrationMetadataField4'],
        'filter_by_integration_metadata_field_5': opts['filterByIntegrationMetadataField5']
      };
      let headerParams = {
        'api_key': apiKey,
        'filter_by_event_name_contains_text': opts['filterByEventNameContainsText'],
        'filter_by_start_date_greater_than_or_equal_to': opts['filterByStartDateGreaterThanOrEqualTo'],
        'filter_by_start_date_smaller_than_or_equal_to': opts['filterByStartDateSmallerThanOrEqualTo'],
        'filter_by_end_date_greater_than_or_equal_to': opts['filterByEndDateGreaterThanOrEqualTo'],
        'filter_by_end_date_smaller_than_or_equal_to': opts['filterByEndDateSmallerThanOrEqualTo'],
        'filter_by_event_participation_type_id': opts['filterByEventParticipationTypeId'],
        'filter_by_event_format_id': opts['filterByEventFormatId'],
        'filter_by_event_star_rating': opts['filterByEventStarRating'],
        'filter_by_event_tag': opts['filterByEventTag'],
        'hydrate_tasks': opts['hydrateTasks'],
        'hydrate_task_sections_list': opts['hydrateTaskSectionsList'],
        'hydrate_custom_fields': opts['hydrateCustomFields']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/events/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the events1Post operation.
     * @callback module:api/EventsApi~events1PostCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an Event
     * @param {String} apiKey 
     * @param {String} name The name of the event.
     * @param {Date} startDate Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date.
     * @param {Date} endDate Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date.
     * @param {Object} opts Optional parameters
     * @param {Number} [formatId = 1.0)] Integer representing the format_id for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid)
     * @param {Number} [participationTypeId = 1.0)] Integer representing the event_participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id's: /v1/references/event_participation_types
     * @param {String} [integrationMetadataField1] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField2] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField3] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField4] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField5] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {module:api/EventsApi~events1PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    events1Post(apiKey, name, startDate, endDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling events1Post");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling events1Post");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling events1Post");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling events1Post");
      }

      let pathParams = {
      };
      let queryParams = {
        'integration_metadata_field_1': opts['integrationMetadataField1'],
        'integration_metadata_field_2': opts['integrationMetadataField2'],
        'integration_metadata_field_3': opts['integrationMetadataField3'],
        'integration_metadata_field_4': opts['integrationMetadataField4'],
        'integration_metadata_field_5': opts['integrationMetadataField5']
      };
      let headerParams = {
        'api_key': apiKey,
        'name': name,
        'start_date': startDate,
        'end_date': endDate,
        'format_id': opts['formatId'],
        'participation_type_id': opts['participationTypeId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/events/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the events2Patch operation.
     * @callback module:api/EventsApi~events2PatchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Event
     * @param {String} apiKey 
     * @param {Number} id The id of the event you would like to update.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the event.
     * @param {Date} [startDate] Event Start Date (format: YYYY-MM-DD). Must be smaller or equal to Event End Date.
     * @param {Date} [endDate] Event End Date (format: YYYY-MM-DD). Must be greater or equal to Event Start Date.
     * @param {Number} [participationTypeId] Integer representing the participation_type_id for the event (1: Committed, 2: Considering, 3: Not Going). Note: you can use the following endpoint to retrieve a list of available participation_type_id's: /v1/references/event_participation_types
     * @param {Number} [formatId] Integer representing the FormatId for the event (1 for In-Person, 2 for Virtual, 3 for Hybrid)
     * @param {Number} [starRating] Star Rating for the event (0, 1, 2, or 3).
     * @param {String} [websiteUrl] URL of the event website. Must be a well-formed URL.
     * @param {String} [venueName] The name of the venue for the event.
     * @param {Number} [boothSize] The size of your booth for the event.
     * @param {Number} [boothNumber] Your booth number for the event.
     * @param {Number} [eventNotes] Event Notes (under the Event Information tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a <br/> tag.
     * @param {Number} [boothNotes] Booth Notes (under the event Booth tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a <br/> tag.
     * @param {Number} [budgetNotes] Budget Notes (under the event Budget tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a <br/> tag.
     * @param {Number} [roiNotes] ROI Notes (under the event ROI tab). Only accepts plain text. Any html tags in the value you pass in will be stripped. New line characters will get replaced with a <br/> tag.
     * @param {Number} [budgetBoothReservation] A number (greater or equal to 0.00) that represents the budget for reserving the booth for the event.
     * @param {Number} [budgetBoothServices] A number (greater or equal to 0.00) that represents the budget for all the booth services for the event.
     * @param {Number} [budgetAttendeeRegistrations] A number (greater or equal to 0.00) that represents the budget for event registration / attendee tickets.
     * @param {Number} [budgetTravel] A number (greater or equal to 0.00) that represents the budget for travel and lodging for the event.
     * @param {Number} [budgetGiveaways] A number (greater or equal to 0.00) that represents the budget for your giveaways (swag and raffle items) for the event.
     * @param {Number} [budgetShipments] A number (greater or equal to 0.00) that represents the budget for all shipments for the event.
     * @param {Number} [budgetMiscExpenses] A number (greater or equal to 0.00) that represents the budget for all miscellaneous expenses for the event.
     * @param {Number} [budgetSponsorships] A number (greater or equal to 0.00) that represents the budget for all sponsorships for the event.
     * @param {Number} [roiNumLeads] An integer (greater or equal to 0) that represents the number of leads generated from this event.
     * @param {Number} [roiNumImpressionsBooth] An integer (greater or equal to 0) that represents the number of booth walk-bys / impressions (i.e., estimated total number of people who saw your booth at this event).
     * @param {Number} [roiNumImpressionsSponsorships] An integer (greater or equal to 0) that represents the number of sponsorship impressions (i.e., estimated total number of people reached through all your sponsorships for this event).
     * @param {Number} [roiNumImpressionsMedia] An integer (greater or equal to 0) that represents the number of social/traditional media impressions (i.e., estimated total number of people reached via social media or traditional media coverage).
     * @param {Number} [roiNumMeetingsExistingCustomers] An integer (greater or equal to 0) that represents the number of meetings with existing customers (i.e., total number of meetings your team had with your existing customers at this event).
     * @param {Number} [roiNumMeetingsNewCustomers] An integer (greater or equal to 0) that represents the number of meetings with new/potential customers (i.e., total number of meetings your team had with new/potential customers at this event).
     * @param {Number} [roiAmountActualSales] A number (greater or equal to 0.00) that represents the actual sales amount (attributable to this event and already closed).
     * @param {Number} [roiAmountPotentialSales] A number (greater or equal to 0.00) that represents the additional opportunity / potential sales amount (attributable to this event, but, yet to be closed).
     * @param {String} [integrationMetadataField1] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField2] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField3] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField4] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {String} [integrationMetadataField5] This is an integration-specific text field only accessible via the ExhibitDay API. This field can be used to store whatever metadata or information you'd like about a particular event. For example, you can use it to store the \"external id\" of the event (from another system you're integrating with). Or, you can use it to store the last sync timestamp. Note: when you retrieve a list of events (using the /v1/events endpoint), you can filter down the results by the value of this field.
     * @param {module:api/EventsApi~events2PatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    events2Patch(apiKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling events2Patch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling events2Patch");
      }

      let pathParams = {
      };
      let queryParams = {
        'website_url': opts['websiteUrl'],
        'venue_name': opts['venueName'],
        'event_notes': opts['eventNotes'],
        'booth_notes': opts['boothNotes'],
        'budget_notes': opts['budgetNotes'],
        'roi_notes': opts['roiNotes'],
        'integration_metadata_field_1': opts['integrationMetadataField1'],
        'integration_metadata_field_2': opts['integrationMetadataField2'],
        'integration_metadata_field_3': opts['integrationMetadataField3'],
        'integration_metadata_field_4': opts['integrationMetadataField4'],
        'integration_metadata_field_5': opts['integrationMetadataField5']
      };
      let headerParams = {
        'api_key': apiKey,
        'id': id,
        'name': opts['name'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'participation_type_id': opts['participationTypeId'],
        'format_id': opts['formatId'],
        'star_rating': opts['starRating'],
        'booth_size': opts['boothSize'],
        'booth_number': opts['boothNumber'],
        'budget_booth_reservation': opts['budgetBoothReservation'],
        'budget_booth_services': opts['budgetBoothServices'],
        'budget_attendee_registrations': opts['budgetAttendeeRegistrations'],
        'budget_travel': opts['budgetTravel'],
        'budget_giveaways': opts['budgetGiveaways'],
        'budget_shipments': opts['budgetShipments'],
        'budget_misc_expenses': opts['budgetMiscExpenses'],
        'budget_sponsorships': opts['budgetSponsorships'],
        'roi_num_leads': opts['roiNumLeads'],
        'roi_num_impressions_booth': opts['roiNumImpressionsBooth'],
        'roi_num_impressions_sponsorships': opts['roiNumImpressionsSponsorships'],
        'roi_num_impressions_media': opts['roiNumImpressionsMedia'],
        'roi_num_meetings_existing_customers': opts['roiNumMeetingsExistingCustomers'],
        'roi_num_meetings_new_customers': opts['roiNumMeetingsNewCustomers'],
        'roi_amount_actual_sales': opts['roiAmountActualSales'],
        'roi_amount_potential_sales': opts['roiAmountPotentialSales']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/events/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the events3Delete operation.
     * @callback module:api/EventsApi~events3DeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Event
     * @param {String} apiKey 
     * @param {Number} id The id of the event you would like to delete.
     * @param {module:api/EventsApi~events3DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    events3Delete(apiKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling events3Delete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling events3Delete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': apiKey,
        'id': id
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/events/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsInfo0Get operation.
     * @callback module:api/EventsApi~eventsInfo0GetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Single Event by id
     * @param {String} apiKey 
     * @param {Number} id Id of the specific event that you would like to retrieve.
     * @param {module:api/EventsApi~eventsInfo0GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    eventsInfo0Get(apiKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling eventsInfo0Get");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventsInfo0Get");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': apiKey,
        'id': id
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/events/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
