/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Financials service.
* @module api/FinancialsApi
* @version v1
*/
export default class FinancialsApi {

    /**
    * Constructs a new FinancialsApi. 
    * @alias module:api/FinancialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the financialsEventCosts0Get operation.
     * @callback module:api/FinancialsApi~financialsEventCosts0GetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve event costs
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Number} [filterByEventId] Id of a specific event that you would like to retrieve costs for.
     * @param {Date} [filterByEventStartDateGreaterThanOrEqualTo] Only include costs for events that have their start date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByEventStartDateSmallerThanOrEqualTo] Only include costs for events that have their start date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByEventEndDateGreaterThanOrEqualTo] Only include costs for events that have their end date greater than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {Date} [filterByEventEndDateSmallerThanOrEqualTo] Only include costs for events that have their end date smaller than or equal to the value passed in for this filter parameter. Use this date format: YYYY-MM-DD
     * @param {module:api/FinancialsApi~financialsEventCosts0GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    financialsEventCosts0Get(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling financialsEventCosts0Get");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': apiKey,
        'filter_by_event_id': opts['filterByEventId'],
        'filter_by_event_start_date_greater_than_or_equal_to': opts['filterByEventStartDateGreaterThanOrEqualTo'],
        'filter_by_event_start_date_smaller_than_or_equal_to': opts['filterByEventStartDateSmallerThanOrEqualTo'],
        'filter_by_event_end_date_greater_than_or_equal_to': opts['filterByEventEndDateGreaterThanOrEqualTo'],
        'filter_by_event_end_date_smaller_than_or_equal_to': opts['filterByEventEndDateSmallerThanOrEqualTo']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/financials/event_costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the financialsMiscAnnualExpenseCosts0Get operation.
     * @callback module:api/FinancialsApi~financialsMiscAnnualExpenseCosts0GetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Miscellaneous Annual Expense Costs
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {Number} [budgetYear] The specific budget year that you would like to retrieve miscellaneous annual expense costs for (e.g., 2023).
     * @param {module:api/FinancialsApi~financialsMiscAnnualExpenseCosts0GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    financialsMiscAnnualExpenseCosts0Get(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling financialsMiscAnnualExpenseCosts0Get");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'api_key': apiKey,
        'budget_year': opts['budgetYear']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/financials/misc_annual_expense_costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
