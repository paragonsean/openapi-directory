/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import EventsApi from './api/EventsApi';
import FinancialsApi from './api/FinancialsApi';
import ReferencesApi from './api/ReferencesApi';
import SwaggerApi from './api/SwaggerApi';
import TasksApi from './api/TasksApi';


/**
* This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you&#39;ll need working knowledge of consuming REST APIs.&lt;br /&gt;&lt;br /&gt;Docs: https://api.exhibitday.com/swagger/docs/v1.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TestTheExhibitDayApiWithSwagger = require('index'); // See note below*.
* var xxxSvc = new TestTheExhibitDayApiWithSwagger.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TestTheExhibitDayApiWithSwagger.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TestTheExhibitDayApiWithSwagger.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TestTheExhibitDayApiWithSwagger.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
    * The EventsApi service constructor.
    * @property {module:api/EventsApi}
    */
    EventsApi,

    /**
    * The FinancialsApi service constructor.
    * @property {module:api/FinancialsApi}
    */
    FinancialsApi,

    /**
    * The ReferencesApi service constructor.
    * @property {module:api/ReferencesApi}
    */
    ReferencesApi,

    /**
    * The SwaggerApi service constructor.
    * @property {module:api/SwaggerApi}
    */
    SwaggerApi,

    /**
    * The TasksApi service constructor.
    * @property {module:api/TasksApi}
    */
    TasksApi
};
