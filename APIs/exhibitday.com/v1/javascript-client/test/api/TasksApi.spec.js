/**
 * Test the ExhibitDay API with Swagger
 * This API can be used to programmatically pull data out of ExhibitDay or push data into ExhibitDay -- allowing for automation between ExhibitDay and your internal systems (or other third-party software). To use the API, you'll need working knowledge of consuming REST APIs.<br /><br />Docs: https://api.exhibitday.com/swagger/docs/v1
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TestTheExhibitDayApiWithSwagger);
  }
}(this, function(expect, TestTheExhibitDayApiWithSwagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TestTheExhibitDayApiWithSwagger.TasksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksApi', function() {
    describe('tasks0Get', function() {
      it('should call tasks0Get successfully', function(done) {
        //uncomment below and update the code to test tasks0Get
        //instance.tasks0Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasks1Post', function() {
      it('should call tasks1Post successfully', function(done) {
        //uncomment below and update the code to test tasks1Post
        //instance.tasks1Post(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasks2Patch', function() {
      it('should call tasks2Patch successfully', function(done) {
        //uncomment below and update the code to test tasks2Patch
        //instance.tasks2Patch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasks3Delete', function() {
      it('should call tasks3Delete successfully', function(done) {
        //uncomment below and update the code to test tasks3Delete
        //instance.tasks3Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksComment0Get', function() {
      it('should call tasksComment0Get successfully', function(done) {
        //uncomment below and update the code to test tasksComment0Get
        //instance.tasksComment0Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksComment1Post', function() {
      it('should call tasksComment1Post successfully', function(done) {
        //uncomment below and update the code to test tasksComment1Post
        //instance.tasksComment1Post(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksComment2Patch', function() {
      it('should call tasksComment2Patch successfully', function(done) {
        //uncomment below and update the code to test tasksComment2Patch
        //instance.tasksComment2Patch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksComment3Delete', function() {
      it('should call tasksComment3Delete successfully', function(done) {
        //uncomment below and update the code to test tasksComment3Delete
        //instance.tasksComment3Delete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksComments0Get', function() {
      it('should call tasksComments0Get successfully', function(done) {
        //uncomment below and update the code to test tasksComments0Get
        //instance.tasksComments0Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksInfo0Get', function() {
      it('should call tasksInfo0Get successfully', function(done) {
        //uncomment below and update the code to test tasksInfo0Get
        //instance.tasksInfo0Get(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
