/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Organization;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workspaceSlugOrganizationsGet
     * @param workspaceSlug  (required)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsGetCall(String workspaceSlug, String query, String page, String direction, String items, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/organizations"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugOrganizationsGetValidateBeforeCall(String workspaceSlug, String query, String page, String direction, String items, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsGet(Async)");
        }

        return workspaceSlugOrganizationsGetCall(workspaceSlug, query, page, direction, items, sort, _callback);

    }

    /**
     * List organizations in a workspace
     * 
     * @param workspaceSlug  (required)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugOrganizationsGet(String workspaceSlug, String query, String page, String direction, String items, String sort) throws ApiException {
        workspaceSlugOrganizationsGetWithHttpInfo(workspaceSlug, query, page, direction, items, sort);
    }

    /**
     * List organizations in a workspace
     * 
     * @param workspaceSlug  (required)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugOrganizationsGetWithHttpInfo(String workspaceSlug, String query, String page, String direction, String items, String sort) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugOrganizationsGetValidateBeforeCall(workspaceSlug, query, page, direction, items, sort, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List organizations in a workspace (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsGetAsync(String workspaceSlug, String query, String page, String direction, String items, String sort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugOrganizationsGetValidateBeforeCall(workspaceSlug, query, page, direction, items, sort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugOrganizationsOrganizationIdGet
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdGetCall(String workspaceSlug, String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/organizations/{organization_id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugOrganizationsOrganizationIdGetValidateBeforeCall(String workspaceSlug, String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdGet(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdGet(Async)");
        }

        return workspaceSlugOrganizationsOrganizationIdGetCall(workspaceSlug, organizationId, _callback);

    }

    /**
     * Get an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugOrganizationsOrganizationIdGet(String workspaceSlug, String organizationId) throws ApiException {
        workspaceSlugOrganizationsOrganizationIdGetWithHttpInfo(workspaceSlug, organizationId);
    }

    /**
     * Get an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugOrganizationsOrganizationIdGetWithHttpInfo(String workspaceSlug, String organizationId) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdGetValidateBeforeCall(workspaceSlug, organizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an organization (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdGetAsync(String workspaceSlug, String organizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdGetValidateBeforeCall(workspaceSlug, organizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugOrganizationsOrganizationIdPut
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param organization  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> organization updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> deal_closed_date is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdPutCall(String workspaceSlug, String organizationId, Organization organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organization;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/organizations/{organization_id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugOrganizationsOrganizationIdPutValidateBeforeCall(String workspaceSlug, String organizationId, Organization organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdPut(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdPut(Async)");
        }

        return workspaceSlugOrganizationsOrganizationIdPutCall(workspaceSlug, organizationId, organization, _callback);

    }

    /**
     * Update an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param organization  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> organization updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> deal_closed_date is invalid </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugOrganizationsOrganizationIdPut(String workspaceSlug, String organizationId, Organization organization) throws ApiException {
        workspaceSlugOrganizationsOrganizationIdPutWithHttpInfo(workspaceSlug, organizationId, organization);
    }

    /**
     * Update an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param organization  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> organization updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> deal_closed_date is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugOrganizationsOrganizationIdPutWithHttpInfo(String workspaceSlug, String organizationId, Organization organization) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdPutValidateBeforeCall(workspaceSlug, organizationId, organization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update an organization (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param organization  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> organization updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> deal_closed_date is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdPutAsync(String workspaceSlug, String organizationId, Organization organization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdPutValidateBeforeCall(workspaceSlug, organizationId, organization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
