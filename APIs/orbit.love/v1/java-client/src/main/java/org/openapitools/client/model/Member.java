/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Member
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:44.660005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Member {
  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_BIRTHDAY = "birthday";
  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  private String birthday;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_DEVTO = "devto";
  @SerializedName(SERIALIZED_NAME_DEVTO)
  private String devto;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GITHUB = "github";
  @SerializedName(SERIALIZED_NAME_GITHUB)
  private String github;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private String linkedin;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRONOUNS = "pronouns";
  @SerializedName(SERIALIZED_NAME_PRONOUNS)
  private String pronouns;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private String shippingAddress;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TAGS_TO_ADD = "tags_to_add";
  @SerializedName(SERIALIZED_NAME_TAGS_TO_ADD)
  private String tagsToAdd;

  public static final String SERIALIZED_NAME_TEAMMATE = "teammate";
  @SerializedName(SERIALIZED_NAME_TEAMMATE)
  private Boolean teammate;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TSHIRT = "tshirt";
  @SerializedName(SERIALIZED_NAME_TSHIRT)
  private String tshirt;

  public static final String SERIALIZED_NAME_TWITTER = "twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private String twitter;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Member() {
  }

  public Member bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * Get bio
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public Member birthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * Get birthday
   * @return birthday
   */
  @javax.annotation.Nullable
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(String birthday) {
    this.birthday = birthday;
  }


  public Member company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public Member devto(String devto) {
    this.devto = devto;
    return this;
  }

  /**
   * The member&#39;s DEV username
   * @return devto
   */
  @javax.annotation.Nullable
  public String getDevto() {
    return devto;
  }

  public void setDevto(String devto) {
    this.devto = devto;
  }


  public Member email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The member&#39;s email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Member github(String github) {
    this.github = github;
    return this;
  }

  /**
   * The member&#39;s GitHub username
   * @return github
   */
  @javax.annotation.Nullable
  public String getGithub() {
    return github;
  }

  public void setGithub(String github) {
    this.github = github;
  }


  public Member linkedin(String linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * The member&#39;s LinkedIn username, without the in/ or pub/
   * @return linkedin
   */
  @javax.annotation.Nullable
  public String getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(String linkedin) {
    this.linkedin = linkedin;
  }


  public Member location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Member name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Member pronouns(String pronouns) {
    this.pronouns = pronouns;
    return this;
  }

  /**
   * Get pronouns
   * @return pronouns
   */
  @javax.annotation.Nullable
  public String getPronouns() {
    return pronouns;
  }

  public void setPronouns(String pronouns) {
    this.pronouns = pronouns;
  }


  public Member shippingAddress(String shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public String getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(String shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Member slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public Member tagList(String tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Deprecated: Please use the tags attribute instead
   * @return tagList
   */
  @javax.annotation.Nullable
  public String getTagList() {
    return tagList;
  }

  public void setTagList(String tagList) {
    this.tagList = tagList;
  }


  public Member tags(String tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Replaces all tags for the member; comma-separated string or array
   * @return tags
   */
  @javax.annotation.Nullable
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  public Member tagsToAdd(String tagsToAdd) {
    this.tagsToAdd = tagsToAdd;
    return this;
  }

  /**
   * Adds tags to member; comma-separated string or array
   * @return tagsToAdd
   */
  @javax.annotation.Nullable
  public String getTagsToAdd() {
    return tagsToAdd;
  }

  public void setTagsToAdd(String tagsToAdd) {
    this.tagsToAdd = tagsToAdd;
  }


  public Member teammate(Boolean teammate) {
    this.teammate = teammate;
    return this;
  }

  /**
   * Get teammate
   * @return teammate
   */
  @javax.annotation.Nullable
  public Boolean getTeammate() {
    return teammate;
  }

  public void setTeammate(Boolean teammate) {
    this.teammate = teammate;
  }


  public Member title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Member tshirt(String tshirt) {
    this.tshirt = tshirt;
    return this;
  }

  /**
   * Get tshirt
   * @return tshirt
   */
  @javax.annotation.Nullable
  public String getTshirt() {
    return tshirt;
  }

  public void setTshirt(String tshirt) {
    this.tshirt = tshirt;
  }


  public Member twitter(String twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * The member&#39;s Twitter username
   * @return twitter
   */
  @javax.annotation.Nullable
  public String getTwitter() {
    return twitter;
  }

  public void setTwitter(String twitter) {
    this.twitter = twitter;
  }


  public Member url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Member member = (Member) o;
    return Objects.equals(this.bio, member.bio) &&
        Objects.equals(this.birthday, member.birthday) &&
        Objects.equals(this.company, member.company) &&
        Objects.equals(this.devto, member.devto) &&
        Objects.equals(this.email, member.email) &&
        Objects.equals(this.github, member.github) &&
        Objects.equals(this.linkedin, member.linkedin) &&
        Objects.equals(this.location, member.location) &&
        Objects.equals(this.name, member.name) &&
        Objects.equals(this.pronouns, member.pronouns) &&
        Objects.equals(this.shippingAddress, member.shippingAddress) &&
        Objects.equals(this.slug, member.slug) &&
        Objects.equals(this.tagList, member.tagList) &&
        Objects.equals(this.tags, member.tags) &&
        Objects.equals(this.tagsToAdd, member.tagsToAdd) &&
        Objects.equals(this.teammate, member.teammate) &&
        Objects.equals(this.title, member.title) &&
        Objects.equals(this.tshirt, member.tshirt) &&
        Objects.equals(this.twitter, member.twitter) &&
        Objects.equals(this.url, member.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bio, birthday, company, devto, email, github, linkedin, location, name, pronouns, shippingAddress, slug, tagList, tags, tagsToAdd, teammate, title, tshirt, twitter, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Member {\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    devto: ").append(toIndentedString(devto)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    github: ").append(toIndentedString(github)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pronouns: ").append(toIndentedString(pronouns)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tagsToAdd: ").append(toIndentedString(tagsToAdd)).append("\n");
    sb.append("    teammate: ").append(toIndentedString(teammate)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tshirt: ").append(toIndentedString(tshirt)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bio");
    openapiFields.add("birthday");
    openapiFields.add("company");
    openapiFields.add("devto");
    openapiFields.add("email");
    openapiFields.add("github");
    openapiFields.add("linkedin");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("pronouns");
    openapiFields.add("shipping_address");
    openapiFields.add("slug");
    openapiFields.add("tag_list");
    openapiFields.add("tags");
    openapiFields.add("tags_to_add");
    openapiFields.add("teammate");
    openapiFields.add("title");
    openapiFields.add("tshirt");
    openapiFields.add("twitter");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Member
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Member.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Member is not found in the empty JSON string", Member.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Member.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Member` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("birthday") != null && !jsonObj.get("birthday").isJsonNull()) && !jsonObj.get("birthday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthday").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("devto") != null && !jsonObj.get("devto").isJsonNull()) && !jsonObj.get("devto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `devto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("devto").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("github") != null && !jsonObj.get("github").isJsonNull()) && !jsonObj.get("github").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `github` to be a primitive type in the JSON string but got `%s`", jsonObj.get("github").toString()));
      }
      if ((jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) && !jsonObj.get("linkedin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pronouns") != null && !jsonObj.get("pronouns").isJsonNull()) && !jsonObj.get("pronouns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pronouns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pronouns").toString()));
      }
      if ((jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) && !jsonObj.get("shipping_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_address").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("tags_to_add") != null && !jsonObj.get("tags_to_add").isJsonNull()) && !jsonObj.get("tags_to_add").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags_to_add` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags_to_add").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("tshirt") != null && !jsonObj.get("tshirt").isJsonNull()) && !jsonObj.get("tshirt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tshirt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tshirt").toString()));
      }
      if ((jsonObj.get("twitter") != null && !jsonObj.get("twitter").isJsonNull()) && !jsonObj.get("twitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Member.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Member' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Member> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Member.class));

       return (TypeAdapter<T>) new TypeAdapter<Member>() {
           @Override
           public void write(JsonWriter out, Member value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Member read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Member given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Member
   * @throws IOException if the JSON string is invalid with respect to Member
   */
  public static Member fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Member.class);
  }

  /**
   * Convert an instance of Member to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

