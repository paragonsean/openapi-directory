/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Activity;
import org.openapitools.client.model.ActivityAndIdentity;
import org.openapitools.client.model.CustomOrPostActivity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workspaceSlugActivitiesGet
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesGetCall(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String page, String direction, String items, String sort, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/activities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (affiliation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation", affiliation));
        }

        if (memberTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_tags", memberTags));
        }

        if (orbit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orbit", orbit));
        }

        if (activityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity_type", activityType));
        }

        if (identity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity", identity));
        }

        if (company != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company[]", company));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title[]", title));
        }

        if (regions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regions[]", regions));
        }

        if (countries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countries[]", countries));
        }

        if (cities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cities[]", cities));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (relative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relative", relative));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugActivitiesGetValidateBeforeCall(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String page, String direction, String items, String sort, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesGet(Async)");
        }

        return workspaceSlugActivitiesGetCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, page, direction, items, sort, type, _callback);

    }

    /**
     * List activities for a workspace
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugActivitiesGet(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String page, String direction, String items, String sort, String type) throws ApiException {
        workspaceSlugActivitiesGetWithHttpInfo(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, page, direction, items, sort, type);
    }

    /**
     * List activities for a workspace
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugActivitiesGetWithHttpInfo(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String page, String direction, String items, String sort, String type) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugActivitiesGetValidateBeforeCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, page, direction, items, sort, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List activities for a workspace (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesGetAsync(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String page, String direction, String items, String sort, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugActivitiesGetValidateBeforeCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, page, direction, items, sort, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugActivitiesIdGet
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesIdGetCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/activities/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugActivitiesIdGetValidateBeforeCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugActivitiesIdGet(Async)");
        }

        return workspaceSlugActivitiesIdGetCall(workspaceSlug, id, _callback);

    }

    /**
     * Get an activity in the workspace
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugActivitiesIdGet(String workspaceSlug, String id) throws ApiException {
        workspaceSlugActivitiesIdGetWithHttpInfo(workspaceSlug, id);
    }

    /**
     * Get an activity in the workspace
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugActivitiesIdGetWithHttpInfo(String workspaceSlug, String id) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugActivitiesIdGetValidateBeforeCall(workspaceSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an activity in the workspace (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesIdGetAsync(String workspaceSlug, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugActivitiesIdGetValidateBeforeCall(workspaceSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugActivitiesPost
     * @param workspaceSlug  (required)
     * @param activityAndIdentity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesPostCall(String workspaceSlug, ActivityAndIdentity activityAndIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activityAndIdentity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/activities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugActivitiesPostValidateBeforeCall(String workspaceSlug, ActivityAndIdentity activityAndIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesPost(Async)");
        }

        return workspaceSlugActivitiesPostCall(workspaceSlug, activityAndIdentity, _callback);

    }

    /**
     * Create a Custom or a Content activity for a new or existing member
     * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
     * @param workspaceSlug  (required)
     * @param activityAndIdentity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugActivitiesPost(String workspaceSlug, ActivityAndIdentity activityAndIdentity) throws ApiException {
        workspaceSlugActivitiesPostWithHttpInfo(workspaceSlug, activityAndIdentity);
    }

    /**
     * Create a Custom or a Content activity for a new or existing member
     * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
     * @param workspaceSlug  (required)
     * @param activityAndIdentity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugActivitiesPostWithHttpInfo(String workspaceSlug, ActivityAndIdentity activityAndIdentity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugActivitiesPostValidateBeforeCall(workspaceSlug, activityAndIdentity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Custom or a Content activity for a new or existing member (asynchronously)
     * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
     * @param workspaceSlug  (required)
     * @param activityAndIdentity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugActivitiesPostAsync(String workspaceSlug, ActivityAndIdentity activityAndIdentity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugActivitiesPostValidateBeforeCall(workspaceSlug, activityAndIdentity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugActivitiesGet
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesGetCall(String workspaceSlug, String memberSlug, String page, String direction, String items, String sort, String activityType, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/activities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (activityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity_type", activityType));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugActivitiesGetValidateBeforeCall(String workspaceSlug, String memberSlug, String page, String direction, String items, String sort, String activityType, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesGet(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesGet(Async)");
        }

        return workspaceSlugMembersMemberSlugActivitiesGetCall(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type, _callback);

    }

    /**
     * List activities for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugActivitiesGet(String workspaceSlug, String memberSlug, String page, String direction, String items, String sort, String activityType, String type) throws ApiException {
        workspaceSlugMembersMemberSlugActivitiesGetWithHttpInfo(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type);
    }

    /**
     * List activities for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugActivitiesGetWithHttpInfo(String workspaceSlug, String memberSlug, String page, String direction, String items, String sort, String activityType, String type) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesGetValidateBeforeCall(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List activities for a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesGetAsync(String workspaceSlug, String memberSlug, String page, String direction, String items, String sort, String activityType, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesGetValidateBeforeCall(workspaceSlug, memberSlug, page, direction, items, sort, activityType, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugActivitiesIdDelete
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdDeleteCall(String workspaceSlug, String memberSlug, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/activities/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdDeleteValidateBeforeCall(String workspaceSlug, String memberSlug, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete(Async)");
        }

        return workspaceSlugMembersMemberSlugActivitiesIdDeleteCall(workspaceSlug, memberSlug, id, _callback);

    }

    /**
     * Delete a post activity
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugActivitiesIdDelete(String workspaceSlug, String memberSlug, String id) throws ApiException {
        workspaceSlugMembersMemberSlugActivitiesIdDeleteWithHttpInfo(workspaceSlug, memberSlug, id);
    }

    /**
     * Delete a post activity
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugActivitiesIdDeleteWithHttpInfo(String workspaceSlug, String memberSlug, String id) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesIdDeleteValidateBeforeCall(workspaceSlug, memberSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a post activity (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdDeleteAsync(String workspaceSlug, String memberSlug, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesIdDeleteValidateBeforeCall(workspaceSlug, memberSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugActivitiesIdPut
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param activity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdPutCall(String workspaceSlug, String memberSlug, String id, Activity activity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/activities/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdPutValidateBeforeCall(String workspaceSlug, String memberSlug, String id, Activity activity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdPut(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugMembersMemberSlugActivitiesIdPut(Async)");
        }

        return workspaceSlugMembersMemberSlugActivitiesIdPutCall(workspaceSlug, memberSlug, id, activity, _callback);

    }

    /**
     * Update a custom activity for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param activity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugActivitiesIdPut(String workspaceSlug, String memberSlug, String id, Activity activity) throws ApiException {
        workspaceSlugMembersMemberSlugActivitiesIdPutWithHttpInfo(workspaceSlug, memberSlug, id, activity);
    }

    /**
     * Update a custom activity for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param activity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugActivitiesIdPutWithHttpInfo(String workspaceSlug, String memberSlug, String id, Activity activity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesIdPutValidateBeforeCall(workspaceSlug, memberSlug, id, activity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a custom activity for a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param id  (required)
     * @param activity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> activity updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesIdPutAsync(String workspaceSlug, String memberSlug, String id, Activity activity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesIdPutValidateBeforeCall(workspaceSlug, memberSlug, id, activity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugActivitiesPost
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param customOrPostActivity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesPostCall(String workspaceSlug, String memberSlug, CustomOrPostActivity customOrPostActivity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customOrPostActivity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/activities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugActivitiesPostValidateBeforeCall(String workspaceSlug, String memberSlug, CustomOrPostActivity customOrPostActivity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesPost(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesPost(Async)");
        }

        return workspaceSlugMembersMemberSlugActivitiesPostCall(workspaceSlug, memberSlug, customOrPostActivity, _callback);

    }

    /**
     * Create a Custom or a Content activity for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param customOrPostActivity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugActivitiesPost(String workspaceSlug, String memberSlug, CustomOrPostActivity customOrPostActivity) throws ApiException {
        workspaceSlugMembersMemberSlugActivitiesPostWithHttpInfo(workspaceSlug, memberSlug, customOrPostActivity);
    }

    /**
     * Create a Custom or a Content activity for a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param customOrPostActivity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugActivitiesPostWithHttpInfo(String workspaceSlug, String memberSlug, CustomOrPostActivity customOrPostActivity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesPostValidateBeforeCall(workspaceSlug, memberSlug, customOrPostActivity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a Custom or a Content activity for a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param customOrPostActivity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugActivitiesPostAsync(String workspaceSlug, String memberSlug, CustomOrPostActivity customOrPostActivity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugActivitiesPostValidateBeforeCall(workspaceSlug, memberSlug, customOrPostActivity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugOrganizationsOrganizationIdActivitiesGet
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdActivitiesGetCall(String workspaceSlug, String organizationId, String page, String direction, String items, String sort, String activityType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/organizations/{organization_id}/activities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (activityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity_type", activityType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugOrganizationsOrganizationIdActivitiesGetValidateBeforeCall(String workspaceSlug, String organizationId, String page, String direction, String items, String sort, String activityType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdActivitiesGet(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdActivitiesGet(Async)");
        }

        return workspaceSlugOrganizationsOrganizationIdActivitiesGetCall(workspaceSlug, organizationId, page, direction, items, sort, activityType, _callback);

    }

    /**
     * List member activities in an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugOrganizationsOrganizationIdActivitiesGet(String workspaceSlug, String organizationId, String page, String direction, String items, String sort, String activityType) throws ApiException {
        workspaceSlugOrganizationsOrganizationIdActivitiesGetWithHttpInfo(workspaceSlug, organizationId, page, direction, items, sort, activityType);
    }

    /**
     * List member activities in an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugOrganizationsOrganizationIdActivitiesGetWithHttpInfo(String workspaceSlug, String organizationId, String page, String direction, String items, String sort, String activityType) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdActivitiesGetValidateBeforeCall(workspaceSlug, organizationId, page, direction, items, sort, activityType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List member activities in an organization (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param sort  (optional)
     * @param activityType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdActivitiesGetAsync(String workspaceSlug, String organizationId, String page, String direction, String items, String sort, String activityType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdActivitiesGetValidateBeforeCall(workspaceSlug, organizationId, page, direction, items, sort, activityType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
