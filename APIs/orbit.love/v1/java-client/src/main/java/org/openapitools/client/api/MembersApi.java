/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Identity;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.MemberAndIdentity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MembersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MembersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MembersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workspaceSlugMembersFindGet
     * @param workspaceSlug  (required)
     * @param source  (optional)
     * @param sourceHost  (optional)
     * @param uid  (optional)
     * @param username  (optional)
     * @param email  (optional)
     * @param github Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersFindGetCall(String workspaceSlug, String source, String sourceHost, String uid, String username, String email, String github, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/find"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (sourceHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source_host", sourceHost));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (github != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("github", github));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersFindGetValidateBeforeCall(String workspaceSlug, String source, String sourceHost, String uid, String username, String email, String github, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersFindGet(Async)");
        }

        return workspaceSlugMembersFindGetCall(workspaceSlug, source, sourceHost, uid, username, email, github, _callback);

    }

    /**
     * Find a member by an identity
     * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
     * @param workspaceSlug  (required)
     * @param source  (optional)
     * @param sourceHost  (optional)
     * @param uid  (optional)
     * @param username  (optional)
     * @param email  (optional)
     * @param github Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersFindGet(String workspaceSlug, String source, String sourceHost, String uid, String username, String email, String github) throws ApiException {
        workspaceSlugMembersFindGetWithHttpInfo(workspaceSlug, source, sourceHost, uid, username, email, github);
    }

    /**
     * Find a member by an identity
     * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
     * @param workspaceSlug  (required)
     * @param source  (optional)
     * @param sourceHost  (optional)
     * @param uid  (optional)
     * @param username  (optional)
     * @param email  (optional)
     * @param github Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersFindGetWithHttpInfo(String workspaceSlug, String source, String sourceHost, String uid, String username, String email, String github) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersFindGetValidateBeforeCall(workspaceSlug, source, sourceHost, uid, username, email, github, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find a member by an identity (asynchronously)
     * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
     * @param workspaceSlug  (required)
     * @param source  (optional)
     * @param sourceHost  (optional)
     * @param uid  (optional)
     * @param username  (optional)
     * @param email  (optional)
     * @param github Deprecated, please use source&#x3D;github and username&#x3D;&lt;username&gt; instead (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersFindGetAsync(String workspaceSlug, String source, String sourceHost, String uid, String username, String email, String github, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersFindGetValidateBeforeCall(workspaceSlug, source, sourceHost, uid, username, email, github, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersGet
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param activitiesCountMin  (optional)
     * @param activitiesCountMax  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersGetCall(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String query, String page, String direction, String items, String activitiesCountMin, String activitiesCountMax, String sort, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (affiliation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("affiliation", affiliation));
        }

        if (memberTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member_tags", memberTags));
        }

        if (orbit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orbit", orbit));
        }

        if (activityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activity_type", activityType));
        }

        if (identity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identity", identity));
        }

        if (company != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("company[]", company));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title[]", title));
        }

        if (regions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regions[]", regions));
        }

        if (countries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countries[]", countries));
        }

        if (cities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cities[]", cities));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (relative != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relative", relative));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        if (activitiesCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activities_count_min", activitiesCountMin));
        }

        if (activitiesCountMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("activities_count_max", activitiesCountMax));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersGetValidateBeforeCall(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String query, String page, String direction, String items, String activitiesCountMin, String activitiesCountMax, String sort, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersGet(Async)");
        }

        return workspaceSlugMembersGetCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type, _callback);

    }

    /**
     * List members in a workspace
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param activitiesCountMin  (optional)
     * @param activitiesCountMax  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersGet(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String query, String page, String direction, String items, String activitiesCountMin, String activitiesCountMax, String sort, String type) throws ApiException {
        workspaceSlugMembersGetWithHttpInfo(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type);
    }

    /**
     * List members in a workspace
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param activitiesCountMin  (optional)
     * @param activitiesCountMax  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersGetWithHttpInfo(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String query, String page, String direction, String items, String activitiesCountMin, String activitiesCountMax, String sort, String type) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersGetValidateBeforeCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List members in a workspace (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param affiliation  (optional)
     * @param memberTags The list of tags to filter against. Separate tags with &#x60;,&#x60; to do an intersection (AND), or with &#x60;|&#x60; to do a union (OR) (optional)
     * @param orbit The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like &#x60;23&#x60; would include levels 2 and 3. &#x60;n&#x60; is for members with no orbit level. (optional)
     * @param activityType Comma separated list of activity types (optional)
     * @param identity  (optional)
     * @param company Comma separated list of companies. The union (OR) of companies is applied. (optional)
     * @param title Comma separated list of job titles. The union (OR) of job titles is applied. (optional)
     * @param regions Comma separated list of regions. The union (OR) of regions is applied. (optional)
     * @param countries Comma separated list of countries. The union (OR) of countries is applied. (optional)
     * @param cities Comma separated list of cities. The union (OR) of cities is applied. (optional)
     * @param startDate Filter activities after this date. Format: YYYY-MM-DD. (optional)
     * @param endDate Filter activities before this date. Format: YYYY-MM-DD. (optional)
     * @param relative Relative timeframes. Format: this_&lt;integer&gt;_&lt;period&gt;, with period in [days, weeks, months, years]. For example, this_30_days. (optional)
     * @param query  (optional)
     * @param page  (optional)
     * @param direction  (optional)
     * @param items  (optional)
     * @param activitiesCountMin  (optional)
     * @param activitiesCountMax  (optional)
     * @param sort  (optional)
     * @param type Deprecated in favor of the activity_type parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersGetAsync(String workspaceSlug, String affiliation, String memberTags, String orbit, String activityType, String identity, String company, String title, String regions, String countries, String cities, String startDate, String endDate, String relative, String query, String page, String direction, String items, String activitiesCountMin, String activitiesCountMax, String sort, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersGetValidateBeforeCall(workspaceSlug, affiliation, memberTags, orbit, activityType, identity, company, title, regions, countries, cities, startDate, endDate, relative, query, page, direction, items, activitiesCountMin, activitiesCountMax, sort, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugDelete
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugDeleteCall(String workspaceSlug, String memberSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugDeleteValidateBeforeCall(String workspaceSlug, String memberSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugDelete(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugDelete(Async)");
        }

        return workspaceSlugMembersMemberSlugDeleteCall(workspaceSlug, memberSlug, _callback);

    }

    /**
     * Delete a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugDelete(String workspaceSlug, String memberSlug) throws ApiException {
        workspaceSlugMembersMemberSlugDeleteWithHttpInfo(workspaceSlug, memberSlug);
    }

    /**
     * Delete a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugDeleteWithHttpInfo(String workspaceSlug, String memberSlug) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugDeleteValidateBeforeCall(workspaceSlug, memberSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugDeleteAsync(String workspaceSlug, String memberSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugDeleteValidateBeforeCall(workspaceSlug, memberSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugGet
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugGetCall(String workspaceSlug, String memberSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugGetValidateBeforeCall(String workspaceSlug, String memberSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugGet(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugGet(Async)");
        }

        return workspaceSlugMembersMemberSlugGetCall(workspaceSlug, memberSlug, _callback);

    }

    /**
     * Get a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugGet(String workspaceSlug, String memberSlug) throws ApiException {
        workspaceSlugMembersMemberSlugGetWithHttpInfo(workspaceSlug, memberSlug);
    }

    /**
     * Get a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugGetWithHttpInfo(String workspaceSlug, String memberSlug) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugGetValidateBeforeCall(workspaceSlug, memberSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugGetAsync(String workspaceSlug, String memberSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugGetValidateBeforeCall(workspaceSlug, memberSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugIdentitiesDelete
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> identity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid or not attached to member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesDeleteCall(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/identities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesDeleteValidateBeforeCall(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugIdentitiesDelete(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugIdentitiesDelete(Async)");
        }

        return workspaceSlugMembersMemberSlugIdentitiesDeleteCall(workspaceSlug, memberSlug, identity, _callback);

    }

    /**
     * Remove identity from a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> identity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid or not attached to member </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugIdentitiesDelete(String workspaceSlug, String memberSlug, Identity identity) throws ApiException {
        workspaceSlugMembersMemberSlugIdentitiesDeleteWithHttpInfo(workspaceSlug, memberSlug, identity);
    }

    /**
     * Remove identity from a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> identity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid or not attached to member </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugIdentitiesDeleteWithHttpInfo(String workspaceSlug, String memberSlug, Identity identity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugIdentitiesDeleteValidateBeforeCall(workspaceSlug, memberSlug, identity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove identity from a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> identity deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid or not attached to member </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesDeleteAsync(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugIdentitiesDeleteValidateBeforeCall(workspaceSlug, memberSlug, identity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugIdentitiesPost
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesPostCall(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}/identities"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesPostValidateBeforeCall(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugIdentitiesPost(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugIdentitiesPost(Async)");
        }

        return workspaceSlugMembersMemberSlugIdentitiesPostCall(workspaceSlug, memberSlug, identity, _callback);

    }

    /**
     * Add identity to a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugIdentitiesPost(String workspaceSlug, String memberSlug, Identity identity) throws ApiException {
        workspaceSlugMembersMemberSlugIdentitiesPostWithHttpInfo(workspaceSlug, memberSlug, identity);
    }

    /**
     * Add identity to a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugIdentitiesPostWithHttpInfo(String workspaceSlug, String memberSlug, Identity identity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugIdentitiesPostValidateBeforeCall(workspaceSlug, memberSlug, identity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add identity to a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param identity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> identity is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugIdentitiesPostAsync(String workspaceSlug, String memberSlug, Identity identity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugIdentitiesPostValidateBeforeCall(workspaceSlug, memberSlug, identity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersMemberSlugPut
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param member  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugPutCall(String workspaceSlug, String memberSlug, Member member, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = member;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members/{member_slug}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "member_slug" + "}", localVarApiClient.escapeString(memberSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersMemberSlugPutValidateBeforeCall(String workspaceSlug, String memberSlug, Member member, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugPut(Async)");
        }

        // verify the required parameter 'memberSlug' is set
        if (memberSlug == null) {
            throw new ApiException("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugPut(Async)");
        }

        return workspaceSlugMembersMemberSlugPutCall(workspaceSlug, memberSlug, member, _callback);

    }

    /**
     * Update a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param member  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersMemberSlugPut(String workspaceSlug, String memberSlug, Member member) throws ApiException {
        workspaceSlugMembersMemberSlugPutWithHttpInfo(workspaceSlug, memberSlug, member);
    }

    /**
     * Update a member
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param member  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersMemberSlugPutWithHttpInfo(String workspaceSlug, String memberSlug, Member member) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugPutValidateBeforeCall(workspaceSlug, memberSlug, member, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a member (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param memberSlug  (required)
     * @param member  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> member updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersMemberSlugPutAsync(String workspaceSlug, String memberSlug, Member member, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersMemberSlugPutValidateBeforeCall(workspaceSlug, memberSlug, member, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugMembersPost
     * @param workspaceSlug  (required)
     * @param memberAndIdentity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersPostCall(String workspaceSlug, MemberAndIdentity memberAndIdentity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = memberAndIdentity;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/members"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugMembersPostValidateBeforeCall(String workspaceSlug, MemberAndIdentity memberAndIdentity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersPost(Async)");
        }

        return workspaceSlugMembersPostCall(workspaceSlug, memberAndIdentity, _callback);

    }

    /**
     * Create or update a member
     * This method is useful when you know a member&#39;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
     * @param workspaceSlug  (required)
     * @param memberAndIdentity  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugMembersPost(String workspaceSlug, MemberAndIdentity memberAndIdentity) throws ApiException {
        workspaceSlugMembersPostWithHttpInfo(workspaceSlug, memberAndIdentity);
    }

    /**
     * Create or update a member
     * This method is useful when you know a member&#39;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
     * @param workspaceSlug  (required)
     * @param memberAndIdentity  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugMembersPostWithHttpInfo(String workspaceSlug, MemberAndIdentity memberAndIdentity) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugMembersPostValidateBeforeCall(workspaceSlug, memberAndIdentity, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or update a member (asynchronously)
     * This method is useful when you know a member&#39;s identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
     * @param workspaceSlug  (required)
     * @param memberAndIdentity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> unprocessable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugMembersPostAsync(String workspaceSlug, MemberAndIdentity memberAndIdentity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugMembersPostValidateBeforeCall(workspaceSlug, memberAndIdentity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugOrganizationsOrganizationIdMembersGet
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param items  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdMembersGetCall(String workspaceSlug, String organizationId, String page, String items, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/organizations/{organization_id}/members"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugOrganizationsOrganizationIdMembersGetValidateBeforeCall(String workspaceSlug, String organizationId, String page, String items, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdMembersGet(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdMembersGet(Async)");
        }

        return workspaceSlugOrganizationsOrganizationIdMembersGetCall(workspaceSlug, organizationId, page, items, _callback);

    }

    /**
     * List members in an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param items  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugOrganizationsOrganizationIdMembersGet(String workspaceSlug, String organizationId, String page, String items) throws ApiException {
        workspaceSlugOrganizationsOrganizationIdMembersGetWithHttpInfo(workspaceSlug, organizationId, page, items);
    }

    /**
     * List members in an organization
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param items  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugOrganizationsOrganizationIdMembersGetWithHttpInfo(String workspaceSlug, String organizationId, String page, String items) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdMembersGetValidateBeforeCall(workspaceSlug, organizationId, page, items, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List members in an organization (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param organizationId  (required)
     * @param page  (optional)
     * @param items  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugOrganizationsOrganizationIdMembersGetAsync(String workspaceSlug, String organizationId, String page, String items, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugOrganizationsOrganizationIdMembersGetValidateBeforeCall(workspaceSlug, organizationId, page, items, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
