/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:44.660005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookSubscription {
  public static final String SERIALIZED_NAME_ACTIVITY_TAGS = "activity_tags";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TAGS)
  private List<String> activityTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVITY_TYPES = "activity_types";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPES)
  private List<String> activityTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_MEMBER_TAGS = "member_tags";
  @SerializedName(SERIALIZED_NAME_MEMBER_TAGS)
  private List<String> memberTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public WebhookSubscription() {
  }

  public WebhookSubscription activityTags(List<String> activityTags) {
    this.activityTags = activityTags;
    return this;
  }

  public WebhookSubscription addActivityTagsItem(String activityTagsItem) {
    if (this.activityTags == null) {
      this.activityTags = new ArrayList<>();
    }
    this.activityTags.add(activityTagsItem);
    return this;
  }

  /**
   * Get activityTags
   * @return activityTags
   */
  @javax.annotation.Nullable
  public List<String> getActivityTags() {
    return activityTags;
  }

  public void setActivityTags(List<String> activityTags) {
    this.activityTags = activityTags;
  }


  public WebhookSubscription activityTypes(List<String> activityTypes) {
    this.activityTypes = activityTypes;
    return this;
  }

  public WebhookSubscription addActivityTypesItem(String activityTypesItem) {
    if (this.activityTypes == null) {
      this.activityTypes = new ArrayList<>();
    }
    this.activityTypes.add(activityTypesItem);
    return this;
  }

  /**
   * Get activityTypes
   * @return activityTypes
   */
  @javax.annotation.Nullable
  public List<String> getActivityTypes() {
    return activityTypes;
  }

  public void setActivityTypes(List<String> activityTypes) {
    this.activityTypes = activityTypes;
  }


  public WebhookSubscription eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public WebhookSubscription memberTags(List<String> memberTags) {
    this.memberTags = memberTags;
    return this;
  }

  public WebhookSubscription addMemberTagsItem(String memberTagsItem) {
    if (this.memberTags == null) {
      this.memberTags = new ArrayList<>();
    }
    this.memberTags.add(memberTagsItem);
    return this;
  }

  /**
   * Get memberTags
   * @return memberTags
   */
  @javax.annotation.Nullable
  public List<String> getMemberTags() {
    return memberTags;
  }

  public void setMemberTags(List<String> memberTags) {
    this.memberTags = memberTags;
  }


  public WebhookSubscription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebhookSubscription secret(String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * Get secret
   * @return secret
   */
  @javax.annotation.Nullable
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }


  public WebhookSubscription url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookSubscription webhookSubscription = (WebhookSubscription) o;
    return Objects.equals(this.activityTags, webhookSubscription.activityTags) &&
        Objects.equals(this.activityTypes, webhookSubscription.activityTypes) &&
        Objects.equals(this.eventType, webhookSubscription.eventType) &&
        Objects.equals(this.memberTags, webhookSubscription.memberTags) &&
        Objects.equals(this.name, webhookSubscription.name) &&
        Objects.equals(this.secret, webhookSubscription.secret) &&
        Objects.equals(this.url, webhookSubscription.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityTags, activityTypes, eventType, memberTags, name, secret, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookSubscription {\n");
    sb.append("    activityTags: ").append(toIndentedString(activityTags)).append("\n");
    sb.append("    activityTypes: ").append(toIndentedString(activityTypes)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    memberTags: ").append(toIndentedString(memberTags)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_tags");
    openapiFields.add("activity_types");
    openapiFields.add("event_type");
    openapiFields.add("member_tags");
    openapiFields.add("name");
    openapiFields.add("secret");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookSubscription is not found in the empty JSON string", WebhookSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("activity_tags") != null && !jsonObj.get("activity_tags").isJsonNull() && !jsonObj.get("activity_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_tags` to be an array in the JSON string but got `%s`", jsonObj.get("activity_tags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("activity_types") != null && !jsonObj.get("activity_types").isJsonNull() && !jsonObj.get("activity_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_types` to be an array in the JSON string but got `%s`", jsonObj.get("activity_types").toString()));
      }
      if (!jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("member_tags") != null && !jsonObj.get("member_tags").isJsonNull() && !jsonObj.get("member_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_tags` to be an array in the JSON string but got `%s`", jsonObj.get("member_tags").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookSubscription>() {
           @Override
           public void write(JsonWriter out, WebhookSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookSubscription
   * @throws IOException if the JSON string is invalid with respect to WebhookSubscription
   */
  public static WebhookSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookSubscription.class);
  }

  /**
   * Convert an instance of WebhookSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

