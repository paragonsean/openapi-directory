/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Member;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivityWithMember
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:44.660005-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivityWithMember {
  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activity_type";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private String activityType;

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE_KEY = "activity_type_key";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE_KEY)
  private String activityTypeKey;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LINK_TEXT = "link_text";
  @SerializedName(SERIALIZED_NAME_LINK_TEXT)
  private String linkText;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private String occurredAt;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private String weight;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private Member member;

  public ActivityWithMember() {
  }

  public ActivityWithMember activityType(String activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * The type of activity - what action was done by the member. This is a legacy field, use activity_type_key instead.
   * @return activityType
   */
  @javax.annotation.Nullable
  public String getActivityType() {
    return activityType;
  }

  public void setActivityType(String activityType) {
    this.activityType = activityType;
  }


  public ActivityWithMember activityTypeKey(String activityTypeKey) {
    this.activityTypeKey = activityTypeKey;
    return this;
  }

  /**
   * The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.
   * @return activityTypeKey
   */
  @javax.annotation.Nullable
  public String getActivityTypeKey() {
    return activityTypeKey;
  }

  public void setActivityTypeKey(String activityTypeKey) {
    this.activityTypeKey = activityTypeKey;
  }


  public ActivityWithMember description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the activity; displayed in the timeline
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ActivityWithMember key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Supply a key that must be unique or leave blank to have one generated.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public ActivityWithMember link(String link) {
    this.link = link;
    return this;
  }

  /**
   * A URL for the activity; displayed in the timeline
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ActivityWithMember linkText(String linkText) {
    this.linkText = linkText;
    return this;
  }

  /**
   * The text for the timeline link
   * @return linkText
   */
  @javax.annotation.Nullable
  public String getLinkText() {
    return linkText;
  }

  public void setLinkText(String linkText) {
    this.linkText = linkText;
  }


  public ActivityWithMember occurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * The date and time the activity occurred; defaults to now
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public String getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
  }


  public ActivityWithMember properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Key-value pairs to provide contextual metadata about an activity.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public ActivityWithMember title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A title for the activity; displayed in the timeline
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ActivityWithMember weight(String weight) {
    this.weight = weight;
    return this;
  }

  /**
   * A custom weight to be used in filters and reports; defaults to 1.
   * @return weight
   */
  @javax.annotation.Nullable
  public String getWeight() {
    return weight;
  }

  public void setWeight(String weight) {
    this.weight = weight;
  }


  public ActivityWithMember member(Member member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public Member getMember() {
    return member;
  }

  public void setMember(Member member) {
    this.member = member;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityWithMember activityWithMember = (ActivityWithMember) o;
    return Objects.equals(this.activityType, activityWithMember.activityType) &&
        Objects.equals(this.activityTypeKey, activityWithMember.activityTypeKey) &&
        Objects.equals(this.description, activityWithMember.description) &&
        Objects.equals(this.key, activityWithMember.key) &&
        Objects.equals(this.link, activityWithMember.link) &&
        Objects.equals(this.linkText, activityWithMember.linkText) &&
        Objects.equals(this.occurredAt, activityWithMember.occurredAt) &&
        Objects.equals(this.properties, activityWithMember.properties) &&
        Objects.equals(this.title, activityWithMember.title) &&
        Objects.equals(this.weight, activityWithMember.weight) &&
        Objects.equals(this.member, activityWithMember.member);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, activityTypeKey, description, key, link, linkText, occurredAt, properties, title, weight, member);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityWithMember {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    activityTypeKey: ").append(toIndentedString(activityTypeKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    linkText: ").append(toIndentedString(linkText)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_type");
    openapiFields.add("activity_type_key");
    openapiFields.add("description");
    openapiFields.add("key");
    openapiFields.add("link");
    openapiFields.add("link_text");
    openapiFields.add("occurred_at");
    openapiFields.add("properties");
    openapiFields.add("title");
    openapiFields.add("weight");
    openapiFields.add("member");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivityWithMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivityWithMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivityWithMember is not found in the empty JSON string", ActivityWithMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivityWithMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivityWithMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivityWithMember.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity_type") != null && !jsonObj.get("activity_type").isJsonNull()) && !jsonObj.get("activity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_type").toString()));
      }
      if ((jsonObj.get("activity_type_key") != null && !jsonObj.get("activity_type_key").isJsonNull()) && !jsonObj.get("activity_type_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_type_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_type_key").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("link_text") != null && !jsonObj.get("link_text").isJsonNull()) && !jsonObj.get("link_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_text").toString()));
      }
      if ((jsonObj.get("occurred_at") != null && !jsonObj.get("occurred_at").isJsonNull()) && !jsonObj.get("occurred_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occurred_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occurred_at").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) && !jsonObj.get("weight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weight").toString()));
      }
      // validate the optional field `member`
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        Member.validateJsonElement(jsonObj.get("member"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivityWithMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivityWithMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivityWithMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivityWithMember.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivityWithMember>() {
           @Override
           public void write(JsonWriter out, ActivityWithMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivityWithMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivityWithMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivityWithMember
   * @throws IOException if the JSON string is invalid with respect to ActivityWithMember
   */
  public static ActivityWithMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivityWithMember.class);
  }

  /**
   * Convert an instance of ActivityWithMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

