/*
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WebhookSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workspaceSlugWebhooksGet
     * @param workspaceSlug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksGetCall(String workspaceSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/webhooks"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugWebhooksGetValidateBeforeCall(String workspaceSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksGet(Async)");
        }

        return workspaceSlugWebhooksGetCall(workspaceSlug, _callback);

    }

    /**
     * List webhooks in a workspace
     * 
     * @param workspaceSlug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugWebhooksGet(String workspaceSlug) throws ApiException {
        workspaceSlugWebhooksGetWithHttpInfo(workspaceSlug);
    }

    /**
     * List webhooks in a workspace
     * 
     * @param workspaceSlug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugWebhooksGetWithHttpInfo(String workspaceSlug) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugWebhooksGetValidateBeforeCall(workspaceSlug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List webhooks in a workspace (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksGetAsync(String workspaceSlug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugWebhooksGetValidateBeforeCall(workspaceSlug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugWebhooksIdDelete
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdDeleteCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/webhooks/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugWebhooksIdDeleteValidateBeforeCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdDelete(Async)");
        }

        return workspaceSlugWebhooksIdDeleteCall(workspaceSlug, id, _callback);

    }

    /**
     * Delete a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugWebhooksIdDelete(String workspaceSlug, String id) throws ApiException {
        workspaceSlugWebhooksIdDeleteWithHttpInfo(workspaceSlug, id);
    }

    /**
     * Delete a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugWebhooksIdDeleteWithHttpInfo(String workspaceSlug, String id) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugWebhooksIdDeleteValidateBeforeCall(workspaceSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a webhook (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdDeleteAsync(String workspaceSlug, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugWebhooksIdDeleteValidateBeforeCall(workspaceSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugWebhooksIdGet
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdGetCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/webhooks/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugWebhooksIdGetValidateBeforeCall(String workspaceSlug, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdGet(Async)");
        }

        return workspaceSlugWebhooksIdGetCall(workspaceSlug, id, _callback);

    }

    /**
     * Get a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugWebhooksIdGet(String workspaceSlug, String id) throws ApiException {
        workspaceSlugWebhooksIdGetWithHttpInfo(workspaceSlug, id);
    }

    /**
     * Get a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugWebhooksIdGetWithHttpInfo(String workspaceSlug, String id) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugWebhooksIdGetValidateBeforeCall(workspaceSlug, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a webhook (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdGetAsync(String workspaceSlug, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugWebhooksIdGetValidateBeforeCall(workspaceSlug, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugWebhooksIdPut
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param webhookSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdPutCall(String workspaceSlug, String id, WebhookSubscription webhookSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookSubscription;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/webhooks/{id}"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugWebhooksIdPutValidateBeforeCall(String workspaceSlug, String id, WebhookSubscription webhookSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdPut(Async)");
        }

        return workspaceSlugWebhooksIdPutCall(workspaceSlug, id, webhookSubscription, _callback);

    }

    /**
     * Update a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param webhookSubscription  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugWebhooksIdPut(String workspaceSlug, String id, WebhookSubscription webhookSubscription) throws ApiException {
        workspaceSlugWebhooksIdPutWithHttpInfo(workspaceSlug, id, webhookSubscription);
    }

    /**
     * Update a webhook
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param webhookSubscription  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugWebhooksIdPutWithHttpInfo(String workspaceSlug, String id, WebhookSubscription webhookSubscription) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugWebhooksIdPutValidateBeforeCall(workspaceSlug, id, webhookSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a webhook (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param id  (required)
     * @param webhookSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> webhook updated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksIdPutAsync(String workspaceSlug, String id, WebhookSubscription webhookSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugWebhooksIdPutValidateBeforeCall(workspaceSlug, id, webhookSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workspaceSlugWebhooksPost
     * @param workspaceSlug  (required)
     * @param webhookSubscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> webhook created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksPostCall(String workspaceSlug, WebhookSubscription webhookSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookSubscription;

        // create path and map variables
        String localVarPath = "/{workspace_slug}/webhooks"
            .replace("{" + "workspace_slug" + "}", localVarApiClient.escapeString(workspaceSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workspaceSlugWebhooksPostValidateBeforeCall(String workspaceSlug, WebhookSubscription webhookSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspaceSlug' is set
        if (workspaceSlug == null) {
            throw new ApiException("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksPost(Async)");
        }

        return workspaceSlugWebhooksPostCall(workspaceSlug, webhookSubscription, _callback);

    }

    /**
     * Create a webhook
     * 
     * @param workspaceSlug  (required)
     * @param webhookSubscription  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> webhook created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void workspaceSlugWebhooksPost(String workspaceSlug, WebhookSubscription webhookSubscription) throws ApiException {
        workspaceSlugWebhooksPostWithHttpInfo(workspaceSlug, webhookSubscription);
    }

    /**
     * Create a webhook
     * 
     * @param workspaceSlug  (required)
     * @param webhookSubscription  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> webhook created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workspaceSlugWebhooksPostWithHttpInfo(String workspaceSlug, WebhookSubscription webhookSubscription) throws ApiException {
        okhttp3.Call localVarCall = workspaceSlugWebhooksPostValidateBeforeCall(workspaceSlug, webhookSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a webhook (asynchronously)
     * 
     * @param workspaceSlug  (required)
     * @param webhookSubscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> webhook created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workspaceSlugWebhooksPostAsync(String workspaceSlug, WebhookSubscription webhookSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workspaceSlugWebhooksPostValidateBeforeCall(workspaceSlug, webhookSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
