/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMembersApi_H
#define OAI_OAIMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIdentity.h"
#include "OAIMember.h"
#include "OAIMember_and_identity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMembersApi : public QObject {
    Q_OBJECT

public:
    OAIMembersApi(const int timeOut = 0);
    ~OAIMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  source QString [optional]
    * @param[in]  source_host QString [optional]
    * @param[in]  uid QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  github QString [optional]
    */
    virtual void workspaceSlugMembersFindGet(const QString &workspace_slug, const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &github = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  affiliation QString [optional]
    * @param[in]  member_tags QString [optional]
    * @param[in]  orbit QString [optional]
    * @param[in]  activity_type QString [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  regions QString [optional]
    * @param[in]  countries QString [optional]
    * @param[in]  cities QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  relative QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  items QString [optional]
    * @param[in]  activities_count_min QString [optional]
    * @param[in]  activities_count_max QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void workspaceSlugMembersGet(const QString &workspace_slug, const ::OpenAPI::OptionalParam<QString> &affiliation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orbit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &countries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relative = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activities_count_min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activities_count_max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    */
    virtual void workspaceSlugMembersMemberSlugDelete(const QString &workspace_slug, const QString &member_slug);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    */
    virtual void workspaceSlugMembersMemberSlugGet(const QString &workspace_slug, const QString &member_slug);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  oai_identity OAIIdentity [optional]
    */
    virtual void workspaceSlugMembersMemberSlugIdentitiesDelete(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIIdentity> &oai_identity = ::OpenAPI::OptionalParam<OAIIdentity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  oai_identity OAIIdentity [optional]
    */
    virtual void workspaceSlugMembersMemberSlugIdentitiesPost(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIIdentity> &oai_identity = ::OpenAPI::OptionalParam<OAIIdentity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  oai_member OAIMember [optional]
    */
    virtual void workspaceSlugMembersMemberSlugPut(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIMember> &oai_member = ::OpenAPI::OptionalParam<OAIMember>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  oai_member_and_identity OAIMember_and_identity [optional]
    */
    virtual void workspaceSlugMembersPost(const QString &workspace_slug, const ::OpenAPI::OptionalParam<OAIMember_and_identity> &oai_member_and_identity = ::OpenAPI::OptionalParam<OAIMember_and_identity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  items QString [optional]
    */
    virtual void workspaceSlugOrganizationsOrganizationIdMembersGet(const QString &workspace_slug, const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &items = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspaceSlugMembersFindGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugIdentitiesDeleteCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugIdentitiesPostCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugPutCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersPostCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugOrganizationsOrganizationIdMembersGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspaceSlugMembersFindGetSignal();
    void workspaceSlugMembersGetSignal();
    void workspaceSlugMembersMemberSlugDeleteSignal();
    void workspaceSlugMembersMemberSlugGetSignal();
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignal();
    void workspaceSlugMembersMemberSlugIdentitiesPostSignal();
    void workspaceSlugMembersMemberSlugPutSignal();
    void workspaceSlugMembersPostSignal();
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignal();


    void workspaceSlugMembersFindGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugIdentitiesPostSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugPutSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersPostSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersFindGetSignalError() instead")
    void workspaceSlugMembersFindGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersFindGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersGetSignalError() instead")
    void workspaceSlugMembersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugDeleteSignalError() instead")
    void workspaceSlugMembersMemberSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugGetSignalError() instead")
    void workspaceSlugMembersMemberSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugIdentitiesDeleteSignalError() instead")
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugIdentitiesPostSignalError() instead")
    void workspaceSlugMembersMemberSlugIdentitiesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugIdentitiesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugPutSignalError() instead")
    void workspaceSlugMembersMemberSlugPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersPostSignalError() instead")
    void workspaceSlugMembersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugOrganizationsOrganizationIdMembersGetSignalError() instead")
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersFindGetSignalErrorFull() instead")
    void workspaceSlugMembersFindGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersFindGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersGetSignalErrorFull() instead")
    void workspaceSlugMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugDeleteSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugGetSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugIdentitiesDeleteSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugIdentitiesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugIdentitiesPostSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugIdentitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugIdentitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugPutSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersPostSignalErrorFull() instead")
    void workspaceSlugMembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugOrganizationsOrganizationIdMembersGetSignalErrorFull() instead")
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugOrganizationsOrganizationIdMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
