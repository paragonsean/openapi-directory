/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentity::OAIIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentity::OAIIdentity() {
    this->initializeModel();
}

OAIIdentity::~OAIIdentity() {}

void OAIIdentity::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_host_isSet = false;
    m_source_host_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentity::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_host_isValid = ::OpenAPI::fromJsonValue(m_source_host, json[QString("source_host")]);
    m_source_host_isSet = !json[QString("source_host")].isNull() && m_source_host_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_host_isSet) {
        obj.insert(QString("source_host"), ::OpenAPI::toJsonValue(m_source_host));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIIdentity::getEmail() const {
    return m_email;
}
void OAIIdentity::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIdentity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIdentity::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIIdentity::getName() const {
    return m_name;
}
void OAIIdentity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIdentity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIdentity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIdentity::getSource() const {
    return m_source;
}
void OAIIdentity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIIdentity::is_source_Set() const{
    return m_source_isSet;
}

bool OAIIdentity::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIIdentity::getSourceHost() const {
    return m_source_host;
}
void OAIIdentity::setSourceHost(const QString &source_host) {
    m_source_host = source_host;
    m_source_host_isSet = true;
}

bool OAIIdentity::is_source_host_Set() const{
    return m_source_host_isSet;
}

bool OAIIdentity::is_source_host_Valid() const{
    return m_source_host_isValid;
}

QString OAIIdentity::getUid() const {
    return m_uid;
}
void OAIIdentity::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIIdentity::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIIdentity::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIIdentity::getUrl() const {
    return m_url;
}
void OAIIdentity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIIdentity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIIdentity::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIIdentity::getUsername() const {
    return m_username;
}
void OAIIdentity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIIdentity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIIdentity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
