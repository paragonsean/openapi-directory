/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMember::OAIMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMember::OAIMember() {
    this->initializeModel();
}

OAIMember::~OAIMember() {}

void OAIMember::initializeModel() {

    m_bio_isSet = false;
    m_bio_isValid = false;

    m_birthday_isSet = false;
    m_birthday_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_devto_isSet = false;
    m_devto_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_github_isSet = false;
    m_github_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pronouns_isSet = false;
    m_pronouns_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tags_to_add_isSet = false;
    m_tags_to_add_isValid = false;

    m_teammate_isSet = false;
    m_teammate_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tshirt_isSet = false;
    m_tshirt_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMember::fromJsonObject(QJsonObject json) {

    m_bio_isValid = ::OpenAPI::fromJsonValue(m_bio, json[QString("bio")]);
    m_bio_isSet = !json[QString("bio")].isNull() && m_bio_isValid;

    m_birthday_isValid = ::OpenAPI::fromJsonValue(m_birthday, json[QString("birthday")]);
    m_birthday_isSet = !json[QString("birthday")].isNull() && m_birthday_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_devto_isValid = ::OpenAPI::fromJsonValue(m_devto, json[QString("devto")]);
    m_devto_isSet = !json[QString("devto")].isNull() && m_devto_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_github_isValid = ::OpenAPI::fromJsonValue(m_github, json[QString("github")]);
    m_github_isSet = !json[QString("github")].isNull() && m_github_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pronouns_isValid = ::OpenAPI::fromJsonValue(m_pronouns, json[QString("pronouns")]);
    m_pronouns_isSet = !json[QString("pronouns")].isNull() && m_pronouns_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tag_list")]);
    m_tag_list_isSet = !json[QString("tag_list")].isNull() && m_tag_list_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tags_to_add_isValid = ::OpenAPI::fromJsonValue(m_tags_to_add, json[QString("tags_to_add")]);
    m_tags_to_add_isSet = !json[QString("tags_to_add")].isNull() && m_tags_to_add_isValid;

    m_teammate_isValid = ::OpenAPI::fromJsonValue(m_teammate, json[QString("teammate")]);
    m_teammate_isSet = !json[QString("teammate")].isNull() && m_teammate_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tshirt_isValid = ::OpenAPI::fromJsonValue(m_tshirt, json[QString("tshirt")]);
    m_tshirt_isSet = !json[QString("tshirt")].isNull() && m_tshirt_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMember::asJsonObject() const {
    QJsonObject obj;
    if (m_bio_isSet) {
        obj.insert(QString("bio"), ::OpenAPI::toJsonValue(m_bio));
    }
    if (m_birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(m_birthday));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_devto_isSet) {
        obj.insert(QString("devto"), ::OpenAPI::toJsonValue(m_devto));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_github_isSet) {
        obj.insert(QString("github"), ::OpenAPI::toJsonValue(m_github));
    }
    if (m_linkedin_isSet) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pronouns_isSet) {
        obj.insert(QString("pronouns"), ::OpenAPI::toJsonValue(m_pronouns));
    }
    if (m_shipping_address_isSet) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_tag_list_isSet) {
        obj.insert(QString("tag_list"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tags_to_add_isSet) {
        obj.insert(QString("tags_to_add"), ::OpenAPI::toJsonValue(m_tags_to_add));
    }
    if (m_teammate_isSet) {
        obj.insert(QString("teammate"), ::OpenAPI::toJsonValue(m_teammate));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tshirt_isSet) {
        obj.insert(QString("tshirt"), ::OpenAPI::toJsonValue(m_tshirt));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIMember::getBio() const {
    return m_bio;
}
void OAIMember::setBio(const QString &bio) {
    m_bio = bio;
    m_bio_isSet = true;
}

bool OAIMember::is_bio_Set() const{
    return m_bio_isSet;
}

bool OAIMember::is_bio_Valid() const{
    return m_bio_isValid;
}

QString OAIMember::getBirthday() const {
    return m_birthday;
}
void OAIMember::setBirthday(const QString &birthday) {
    m_birthday = birthday;
    m_birthday_isSet = true;
}

bool OAIMember::is_birthday_Set() const{
    return m_birthday_isSet;
}

bool OAIMember::is_birthday_Valid() const{
    return m_birthday_isValid;
}

QString OAIMember::getCompany() const {
    return m_company;
}
void OAIMember::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIMember::is_company_Set() const{
    return m_company_isSet;
}

bool OAIMember::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIMember::getDevto() const {
    return m_devto;
}
void OAIMember::setDevto(const QString &devto) {
    m_devto = devto;
    m_devto_isSet = true;
}

bool OAIMember::is_devto_Set() const{
    return m_devto_isSet;
}

bool OAIMember::is_devto_Valid() const{
    return m_devto_isValid;
}

QString OAIMember::getEmail() const {
    return m_email;
}
void OAIMember::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMember::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMember::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIMember::getGithub() const {
    return m_github;
}
void OAIMember::setGithub(const QString &github) {
    m_github = github;
    m_github_isSet = true;
}

bool OAIMember::is_github_Set() const{
    return m_github_isSet;
}

bool OAIMember::is_github_Valid() const{
    return m_github_isValid;
}

QString OAIMember::getLinkedin() const {
    return m_linkedin;
}
void OAIMember::setLinkedin(const QString &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIMember::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIMember::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

QString OAIMember::getLocation() const {
    return m_location;
}
void OAIMember::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMember::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMember::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMember::getName() const {
    return m_name;
}
void OAIMember::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMember::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMember::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMember::getPronouns() const {
    return m_pronouns;
}
void OAIMember::setPronouns(const QString &pronouns) {
    m_pronouns = pronouns;
    m_pronouns_isSet = true;
}

bool OAIMember::is_pronouns_Set() const{
    return m_pronouns_isSet;
}

bool OAIMember::is_pronouns_Valid() const{
    return m_pronouns_isValid;
}

QString OAIMember::getShippingAddress() const {
    return m_shipping_address;
}
void OAIMember::setShippingAddress(const QString &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIMember::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIMember::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAIMember::getSlug() const {
    return m_slug;
}
void OAIMember::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIMember::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIMember::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIMember::getTagList() const {
    return m_tag_list;
}
void OAIMember::setTagList(const QString &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIMember::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIMember::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIMember::getTags() const {
    return m_tags;
}
void OAIMember::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMember::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMember::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIMember::getTagsToAdd() const {
    return m_tags_to_add;
}
void OAIMember::setTagsToAdd(const QString &tags_to_add) {
    m_tags_to_add = tags_to_add;
    m_tags_to_add_isSet = true;
}

bool OAIMember::is_tags_to_add_Set() const{
    return m_tags_to_add_isSet;
}

bool OAIMember::is_tags_to_add_Valid() const{
    return m_tags_to_add_isValid;
}

bool OAIMember::isTeammate() const {
    return m_teammate;
}
void OAIMember::setTeammate(const bool &teammate) {
    m_teammate = teammate;
    m_teammate_isSet = true;
}

bool OAIMember::is_teammate_Set() const{
    return m_teammate_isSet;
}

bool OAIMember::is_teammate_Valid() const{
    return m_teammate_isValid;
}

QString OAIMember::getTitle() const {
    return m_title;
}
void OAIMember::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMember::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMember::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIMember::getTshirt() const {
    return m_tshirt;
}
void OAIMember::setTshirt(const QString &tshirt) {
    m_tshirt = tshirt;
    m_tshirt_isSet = true;
}

bool OAIMember::is_tshirt_Set() const{
    return m_tshirt_isSet;
}

bool OAIMember::is_tshirt_Valid() const{
    return m_tshirt_isValid;
}

QString OAIMember::getTwitter() const {
    return m_twitter;
}
void OAIMember::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIMember::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIMember::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAIMember::getUrl() const {
    return m_url;
}
void OAIMember::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIMember::is_url_Set() const{
    return m_url_isSet;
}

bool OAIMember::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_github_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pronouns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_to_add_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teammate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tshirt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
