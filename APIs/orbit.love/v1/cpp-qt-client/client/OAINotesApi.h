/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotesApi_H
#define OAI_OAINotesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINote.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotesApi : public QObject {
    Q_OBJECT

public:
    OAINotesApi(const int timeOut = 0);
    ~OAINotesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  page QString [optional]
    */
    virtual void workspaceSlugMembersMemberSlugNotesGet(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_note OAINote [optional]
    */
    virtual void workspaceSlugMembersMemberSlugNotesIdPut(const QString &workspace_slug, const QString &member_slug, const QString &id, const ::OpenAPI::OptionalParam<OAINote> &oai_note = ::OpenAPI::OptionalParam<OAINote>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  oai_note OAINote [optional]
    */
    virtual void workspaceSlugMembersMemberSlugNotesPost(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAINote> &oai_note = ::OpenAPI::OptionalParam<OAINote>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspaceSlugMembersMemberSlugNotesGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugNotesIdPutCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugNotesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspaceSlugMembersMemberSlugNotesGetSignal();
    void workspaceSlugMembersMemberSlugNotesIdPutSignal();
    void workspaceSlugMembersMemberSlugNotesPostSignal();


    void workspaceSlugMembersMemberSlugNotesGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugNotesIdPutSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugNotesPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesGetSignalError() instead")
    void workspaceSlugMembersMemberSlugNotesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesIdPutSignalError() instead")
    void workspaceSlugMembersMemberSlugNotesIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesPostSignalError() instead")
    void workspaceSlugMembersMemberSlugNotesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesGetSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugNotesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesIdPutSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugNotesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugNotesPostSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugNotesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugNotesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
