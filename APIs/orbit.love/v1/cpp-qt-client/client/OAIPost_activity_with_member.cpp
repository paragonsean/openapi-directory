/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_activity_with_member.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_activity_with_member::OAIPost_activity_with_member(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_activity_with_member::OAIPost_activity_with_member() {
    this->initializeModel();
}

OAIPost_activity_with_member::~OAIPost_activity_with_member() {}

void OAIPost_activity_with_member::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;
}

void OAIPost_activity_with_member::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_activity_with_member::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activity_type")]);
    m_activity_type_isSet = !json[QString("activity_type")].isNull() && m_activity_type_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurred_at")]);
    m_occurred_at_isSet = !json[QString("occurred_at")].isNull() && m_occurred_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;
}

QString OAIPost_activity_with_member::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_activity_with_member::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type_isSet) {
        obj.insert(QString("activity_type"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurred_at"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    return obj;
}

QString OAIPost_activity_with_member::getActivityType() const {
    return m_activity_type;
}
void OAIPost_activity_with_member::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIPost_activity_with_member::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIPost_activity_with_member::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QString OAIPost_activity_with_member::getOccurredAt() const {
    return m_occurred_at;
}
void OAIPost_activity_with_member::setOccurredAt(const QString &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIPost_activity_with_member::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIPost_activity_with_member::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QString OAIPost_activity_with_member::getUrl() const {
    return m_url;
}
void OAIPost_activity_with_member::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPost_activity_with_member::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPost_activity_with_member::is_url_Valid() const{
    return m_url_isValid;
}

OAIMember OAIPost_activity_with_member::getMember() const {
    return m_member;
}
void OAIPost_activity_with_member::setMember(const OAIMember &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIPost_activity_with_member::is_member_Set() const{
    return m_member_isSet;
}

bool OAIPost_activity_with_member::is_member_Valid() const{
    return m_member_isValid;
}

bool OAIPost_activity_with_member::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_activity_with_member::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_activity_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
