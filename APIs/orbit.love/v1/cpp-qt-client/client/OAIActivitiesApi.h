/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActivitiesApi_H
#define OAI_OAIActivitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivity.h"
#include "OAIActivity_and_identity.h"
#include "OAICustom_or_post_activity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActivitiesApi : public QObject {
    Q_OBJECT

public:
    OAIActivitiesApi(const int timeOut = 0);
    ~OAIActivitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  affiliation QString [optional]
    * @param[in]  member_tags QString [optional]
    * @param[in]  orbit QString [optional]
    * @param[in]  activity_type QString [optional]
    * @param[in]  identity QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  regions QString [optional]
    * @param[in]  countries QString [optional]
    * @param[in]  cities QString [optional]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  relative QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  items QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void workspaceSlugActivitiesGet(const QString &workspace_slug, const ::OpenAPI::OptionalParam<QString> &affiliation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orbit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &countries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cities = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &relative = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  id QString [required]
    */
    virtual void workspaceSlugActivitiesIdGet(const QString &workspace_slug, const QString &id);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  oai_activity_and_identity OAIActivity_and_identity [optional]
    */
    virtual void workspaceSlugActivitiesPost(const QString &workspace_slug, const ::OpenAPI::OptionalParam<OAIActivity_and_identity> &oai_activity_and_identity = ::OpenAPI::OptionalParam<OAIActivity_and_identity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  items QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  activity_type QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void workspaceSlugMembersMemberSlugActivitiesGet(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  id QString [required]
    */
    virtual void workspaceSlugMembersMemberSlugActivitiesIdDelete(const QString &workspace_slug, const QString &member_slug, const QString &id);

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_activity OAIActivity [optional]
    */
    virtual void workspaceSlugMembersMemberSlugActivitiesIdPut(const QString &workspace_slug, const QString &member_slug, const QString &id, const ::OpenAPI::OptionalParam<OAIActivity> &oai_activity = ::OpenAPI::OptionalParam<OAIActivity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  member_slug QString [required]
    * @param[in]  oai_custom_or_post_activity OAICustom_or_post_activity [optional]
    */
    virtual void workspaceSlugMembersMemberSlugActivitiesPost(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAICustom_or_post_activity> &oai_custom_or_post_activity = ::OpenAPI::OptionalParam<OAICustom_or_post_activity>());

    /**
    * @param[in]  workspace_slug QString [required]
    * @param[in]  organization_id QString [required]
    * @param[in]  page QString [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  items QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  activity_type QString [optional]
    */
    virtual void workspaceSlugOrganizationsOrganizationIdActivitiesGet(const QString &workspace_slug, const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &activity_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspaceSlugActivitiesGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugActivitiesIdGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugActivitiesPostCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesGetCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesIdPutCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesPostCallback(OAIHttpRequestWorker *worker);
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspaceSlugActivitiesGetSignal();
    void workspaceSlugActivitiesIdGetSignal();
    void workspaceSlugActivitiesPostSignal();
    void workspaceSlugMembersMemberSlugActivitiesGetSignal();
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignal();
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignal();
    void workspaceSlugMembersMemberSlugActivitiesPostSignal();
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignal();


    void workspaceSlugActivitiesGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugActivitiesIdGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugActivitiesPostSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesGetSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugMembersMemberSlugActivitiesPostSignalFull(OAIHttpRequestWorker *worker);
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesGetSignalError() instead")
    void workspaceSlugActivitiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesIdGetSignalError() instead")
    void workspaceSlugActivitiesIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesPostSignalError() instead")
    void workspaceSlugActivitiesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesGetSignalError() instead")
    void workspaceSlugMembersMemberSlugActivitiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalError() instead")
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesIdPutSignalError() instead")
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesPostSignalError() instead")
    void workspaceSlugMembersMemberSlugActivitiesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalError() instead")
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesGetSignalErrorFull() instead")
    void workspaceSlugActivitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesIdGetSignalErrorFull() instead")
    void workspaceSlugActivitiesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugActivitiesPostSignalErrorFull() instead")
    void workspaceSlugActivitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugActivitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesGetSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugActivitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesIdPutSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugMembersMemberSlugActivitiesPostSignalErrorFull() instead")
    void workspaceSlugMembersMemberSlugActivitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugMembersMemberSlugActivitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalErrorFull() instead")
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspaceSlugOrganizationsOrganizationIdActivitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
