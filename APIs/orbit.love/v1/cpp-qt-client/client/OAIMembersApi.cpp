/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMembersApi::OAIMembersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMembersApi::~OAIMembersApi() {
}

void OAIMembersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://app.orbit.love/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("workspaceSlugMembersFindGet", defaultConf);
    _serverIndices.insert("workspaceSlugMembersFindGet", 0);
    _serverConfigs.insert("workspaceSlugMembersGet", defaultConf);
    _serverIndices.insert("workspaceSlugMembersGet", 0);
    _serverConfigs.insert("workspaceSlugMembersMemberSlugDelete", defaultConf);
    _serverIndices.insert("workspaceSlugMembersMemberSlugDelete", 0);
    _serverConfigs.insert("workspaceSlugMembersMemberSlugGet", defaultConf);
    _serverIndices.insert("workspaceSlugMembersMemberSlugGet", 0);
    _serverConfigs.insert("workspaceSlugMembersMemberSlugIdentitiesDelete", defaultConf);
    _serverIndices.insert("workspaceSlugMembersMemberSlugIdentitiesDelete", 0);
    _serverConfigs.insert("workspaceSlugMembersMemberSlugIdentitiesPost", defaultConf);
    _serverIndices.insert("workspaceSlugMembersMemberSlugIdentitiesPost", 0);
    _serverConfigs.insert("workspaceSlugMembersMemberSlugPut", defaultConf);
    _serverIndices.insert("workspaceSlugMembersMemberSlugPut", 0);
    _serverConfigs.insert("workspaceSlugMembersPost", defaultConf);
    _serverIndices.insert("workspaceSlugMembersPost", 0);
    _serverConfigs.insert("workspaceSlugOrganizationsOrganizationIdMembersGet", defaultConf);
    _serverIndices.insert("workspaceSlugOrganizationsOrganizationIdMembersGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMembersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMembersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMembersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMembersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMembersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMembersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMembersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMembersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMembersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMembersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMembersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMembersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMembersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMembersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMembersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMembersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMembersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMembersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMembersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMembersApi::workspaceSlugMembersFindGet(const QString &workspace_slug, const ::OpenAPI::OptionalParam<QString> &source, const ::OpenAPI::OptionalParam<QString> &source_host, const ::OpenAPI::OptionalParam<QString> &uid, const ::OpenAPI::OptionalParam<QString> &username, const ::OpenAPI::OptionalParam<QString> &email, const ::OpenAPI::OptionalParam<QString> &github) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersFindGet"][_serverIndices.value("workspaceSlugMembersFindGet")].URL()+"/{workspace_slug}/members/find");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source")).append(querySuffix).append(QUrl::toPercentEncoding(source.stringValue()));
    }
    if (source_host.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source_host", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source_host")).append(querySuffix).append(QUrl::toPercentEncoding(source_host.stringValue()));
    }
    if (uid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "uid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("uid")).append(querySuffix).append(QUrl::toPercentEncoding(uid.stringValue()));
    }
    if (username.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "username", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("username")).append(querySuffix).append(QUrl::toPercentEncoding(username.stringValue()));
    }
    if (email.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "email", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("email")).append(querySuffix).append(QUrl::toPercentEncoding(email.stringValue()));
    }
    if (github.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "github", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("github")).append(querySuffix).append(QUrl::toPercentEncoding(github.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersFindGetCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersFindGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersFindGetSignal();
        Q_EMIT workspaceSlugMembersFindGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersFindGetSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersFindGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersFindGetSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersFindGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersGet(const QString &workspace_slug, const ::OpenAPI::OptionalParam<QString> &affiliation, const ::OpenAPI::OptionalParam<QString> &member_tags, const ::OpenAPI::OptionalParam<QString> &orbit, const ::OpenAPI::OptionalParam<QString> &activity_type, const ::OpenAPI::OptionalParam<QString> &identity, const ::OpenAPI::OptionalParam<QString> &company, const ::OpenAPI::OptionalParam<QString> &title, const ::OpenAPI::OptionalParam<QString> &regions, const ::OpenAPI::OptionalParam<QString> &countries, const ::OpenAPI::OptionalParam<QString> &cities, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &relative, const ::OpenAPI::OptionalParam<QString> &query, const ::OpenAPI::OptionalParam<QString> &page, const ::OpenAPI::OptionalParam<QString> &direction, const ::OpenAPI::OptionalParam<QString> &items, const ::OpenAPI::OptionalParam<QString> &activities_count_min, const ::OpenAPI::OptionalParam<QString> &activities_count_max, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &type) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersGet"][_serverIndices.value("workspaceSlugMembersGet")].URL()+"/{workspace_slug}/members");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (affiliation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "affiliation", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("affiliation")).append(querySuffix).append(QUrl::toPercentEncoding(affiliation.stringValue()));
    }
    if (member_tags.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "member_tags", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("member_tags")).append(querySuffix).append(QUrl::toPercentEncoding(member_tags.stringValue()));
    }
    if (orbit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "orbit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("orbit")).append(querySuffix).append(QUrl::toPercentEncoding(orbit.stringValue()));
    }
    if (activity_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "activity_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("activity_type")).append(querySuffix).append(QUrl::toPercentEncoding(activity_type.stringValue()));
    }
    if (identity.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "identity", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("identity")).append(querySuffix).append(QUrl::toPercentEncoding(identity.stringValue()));
    }
    if (company.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "company[]", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("company[]")).append(querySuffix).append(QUrl::toPercentEncoding(company.stringValue()));
    }
    if (title.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "title[]", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("title[]")).append(querySuffix).append(QUrl::toPercentEncoding(title.stringValue()));
    }
    if (regions.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "regions[]", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("regions[]")).append(querySuffix).append(QUrl::toPercentEncoding(regions.stringValue()));
    }
    if (countries.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "countries[]", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("countries[]")).append(querySuffix).append(QUrl::toPercentEncoding(countries.stringValue()));
    }
    if (cities.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cities[]", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cities[]")).append(querySuffix).append(QUrl::toPercentEncoding(cities.stringValue()));
    }
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(start_date.stringValue()));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(end_date.stringValue()));
    }
    if (relative.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "relative", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("relative")).append(querySuffix).append(QUrl::toPercentEncoding(relative.stringValue()));
    }
    if (query.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "query", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("query")).append(querySuffix).append(QUrl::toPercentEncoding(query.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (direction.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "direction", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("direction")).append(querySuffix).append(QUrl::toPercentEncoding(direction.stringValue()));
    }
    if (items.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "items", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("items")).append(querySuffix).append(QUrl::toPercentEncoding(items.stringValue()));
    }
    if (activities_count_min.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "activities_count_min", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("activities_count_min")).append(querySuffix).append(QUrl::toPercentEncoding(activities_count_min.stringValue()));
    }
    if (activities_count_max.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "activities_count_max", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("activities_count_max")).append(querySuffix).append(QUrl::toPercentEncoding(activities_count_max.stringValue()));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(sort.stringValue()));
    }
    if (type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("type")).append(querySuffix).append(QUrl::toPercentEncoding(type.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersGetCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersGetSignal();
        Q_EMIT workspaceSlugMembersGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersGetSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersGetSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersMemberSlugDelete(const QString &workspace_slug, const QString &member_slug) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersMemberSlugDelete"][_serverIndices.value("workspaceSlugMembersMemberSlugDelete")].URL()+"/{workspace_slug}/members/{member_slug}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString member_slugPathParam("{");
        member_slugPathParam.append("member_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "member_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"member_slug"+pathSuffix : pathPrefix;
        fullPath.replace(member_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersMemberSlugDeleteCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersMemberSlugDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignal();
        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersMemberSlugGet(const QString &workspace_slug, const QString &member_slug) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersMemberSlugGet"][_serverIndices.value("workspaceSlugMembersMemberSlugGet")].URL()+"/{workspace_slug}/members/{member_slug}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString member_slugPathParam("{");
        member_slugPathParam.append("member_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "member_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"member_slug"+pathSuffix : pathPrefix;
        fullPath.replace(member_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersMemberSlugGetCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersMemberSlugGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersMemberSlugGetSignal();
        Q_EMIT workspaceSlugMembersMemberSlugGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersMemberSlugGetSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersMemberSlugGetSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesDelete(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIIdentity> &oai_identity) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersMemberSlugIdentitiesDelete"][_serverIndices.value("workspaceSlugMembersMemberSlugIdentitiesDelete")].URL()+"/{workspace_slug}/members/{member_slug}/identities");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString member_slugPathParam("{");
        member_slugPathParam.append("member_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "member_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"member_slug"+pathSuffix : pathPrefix;
        fullPath.replace(member_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (oai_identity.hasValue()){

        
        QByteArray output = oai_identity.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesDeleteCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignal();
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesPost(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIIdentity> &oai_identity) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersMemberSlugIdentitiesPost"][_serverIndices.value("workspaceSlugMembersMemberSlugIdentitiesPost")].URL()+"/{workspace_slug}/members/{member_slug}/identities");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString member_slugPathParam("{");
        member_slugPathParam.append("member_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "member_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"member_slug"+pathSuffix : pathPrefix;
        fullPath.replace(member_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_identity.hasValue()){

        
        QByteArray output = oai_identity.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesPostCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersMemberSlugIdentitiesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignal();
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugIdentitiesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersMemberSlugPut(const QString &workspace_slug, const QString &member_slug, const ::OpenAPI::OptionalParam<OAIMember> &oai_member) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersMemberSlugPut"][_serverIndices.value("workspaceSlugMembersMemberSlugPut")].URL()+"/{workspace_slug}/members/{member_slug}");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString member_slugPathParam("{");
        member_slugPathParam.append("member_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "member_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"member_slug"+pathSuffix : pathPrefix;
        fullPath.replace(member_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(member_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_member.hasValue()){

        
        QByteArray output = oai_member.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersMemberSlugPutCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersMemberSlugPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersMemberSlugPutSignal();
        Q_EMIT workspaceSlugMembersMemberSlugPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersMemberSlugPutSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersMemberSlugPutSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersMemberSlugPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugMembersPost(const QString &workspace_slug, const ::OpenAPI::OptionalParam<OAIMember_and_identity> &oai_member_and_identity) {
    QString fullPath = QString(_serverConfigs["workspaceSlugMembersPost"][_serverIndices.value("workspaceSlugMembersPost")].URL()+"/{workspace_slug}/members");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_member_and_identity.hasValue()){

        
        QByteArray output = oai_member_and_identity.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugMembersPostCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugMembersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugMembersPostSignal();
        Q_EMIT workspaceSlugMembersPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugMembersPostSignalE(error_type, error_str);
        Q_EMIT workspaceSlugMembersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugMembersPostSignalError(error_type, error_str);
        Q_EMIT workspaceSlugMembersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::workspaceSlugOrganizationsOrganizationIdMembersGet(const QString &workspace_slug, const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &page, const ::OpenAPI::OptionalParam<QString> &items) {
    QString fullPath = QString(_serverConfigs["workspaceSlugOrganizationsOrganizationIdMembersGet"][_serverIndices.value("workspaceSlugOrganizationsOrganizationIdMembersGet")].URL()+"/{workspace_slug}/organizations/{organization_id}/members");
    
    if (!_bearerToken.isEmpty())
        addHeaders("Authorization", "Bearer " + _bearerToken);
    
    
    {
        QString workspace_slugPathParam("{");
        workspace_slugPathParam.append("workspace_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace_slug"+pathSuffix : pathPrefix;
        fullPath.replace(workspace_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace_slug)));
    }
    
    {
        QString organization_idPathParam("{");
        organization_idPathParam.append("organization_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "organization_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"organization_id"+pathSuffix : pathPrefix;
        fullPath.replace(organization_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(organization_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (items.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "items", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("items")).append(querySuffix).append(QUrl::toPercentEncoding(items.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMembersApi::workspaceSlugOrganizationsOrganizationIdMembersGetCallback);
    connect(this, &OAIMembersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMembersApi::workspaceSlugOrganizationsOrganizationIdMembersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignal();
        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignalE(error_type, error_str);
        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignalError(error_type, error_str);
        Q_EMIT workspaceSlugOrganizationsOrganizationIdMembersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMembersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
