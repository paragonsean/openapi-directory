/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_activity_types_isSet = false;
    m_activity_types_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_member_tags_isSet = false;
    m_member_tags_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_activity_types_isValid = ::OpenAPI::fromJsonValue(m_activity_types, json[QString("activity_types")]);
    m_activity_types_isSet = !json[QString("activity_types")].isNull() && m_activity_types_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_member_tags_isValid = ::OpenAPI::fromJsonValue(m_member_tags, json[QString("member_tags")]);
    m_member_tags_isSet = !json[QString("member_tags")].isNull() && m_member_tags_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_types.size() > 0) {
        obj.insert(QString("activity_types"), ::OpenAPI::toJsonValue(m_activity_types));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_member_tags.size() > 0) {
        obj.insert(QString("member_tags"), ::OpenAPI::toJsonValue(m_member_tags));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIAlert::getActivityTypes() const {
    return m_activity_types;
}
void OAIAlert::setActivityTypes(const QList<QString> &activity_types) {
    m_activity_types = activity_types;
    m_activity_types_isSet = true;
}

bool OAIAlert::is_activity_types_Set() const{
    return m_activity_types_isSet;
}

bool OAIAlert::is_activity_types_Valid() const{
    return m_activity_types_isValid;
}

QString OAIAlert::getEventType() const {
    return m_event_type;
}
void OAIAlert::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIAlert::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIAlert::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QList<QString> OAIAlert::getMemberTags() const {
    return m_member_tags;
}
void OAIAlert::setMemberTags(const QList<QString> &member_tags) {
    m_member_tags = member_tags;
    m_member_tags_isSet = true;
}

bool OAIAlert::is_member_tags_Set() const{
    return m_member_tags_isSet;
}

bool OAIAlert::is_member_tags_Valid() const{
    return m_member_tags_isValid;
}

QString OAIAlert::getName() const {
    return m_name;
}
void OAIAlert::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlert::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlert::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
