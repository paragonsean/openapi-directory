# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Identity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, name: str=None, source: str=None, source_host: str=None, uid: str=None, url: str=None, username: str=None):
        """Identity - a model defined in OpenAPI

        :param email: The email of this Identity.
        :param name: The name of this Identity.
        :param source: The source of this Identity.
        :param source_host: The source_host of this Identity.
        :param uid: The uid of this Identity.
        :param url: The url of this Identity.
        :param username: The username of this Identity.
        """
        self.openapi_types = {
            'email': str,
            'name': str,
            'source': str,
            'source_host': str,
            'uid': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'name': 'name',
            'source': 'source',
            'source_host': 'source_host',
            'uid': 'uid',
            'url': 'url',
            'username': 'username'
        }

        self._email = email
        self._name = name
        self._source = source
        self._source_host = source_host
        self._uid = uid
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Identity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The identity of this Identity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Identity.

        The email of the person in the source system

        :return: The email of this Identity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Identity.

        The email of the person in the source system

        :param email: The email of this Identity.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this Identity.

        The name of the person in the source system

        :return: The name of this Identity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Identity.

        The name of the person in the source system

        :param name: The name of this Identity.
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Identity.

        The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used

        :return: The source of this Identity.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Identity.

        The type of source: known values include github, twitter, discourse, email, linkedin, devto. Custom values can also be used

        :param source: The source of this Identity.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_host(self):
        """Gets the source_host of this Identity.

        Specifies the location of the source, such as the host of a Discourse instance

        :return: The source_host of this Identity.
        :rtype: str
        """
        return self._source_host

    @source_host.setter
    def source_host(self, source_host):
        """Sets the source_host of this Identity.

        Specifies the location of the source, such as the host of a Discourse instance

        :param source_host: The source_host of this Identity.
        :type source_host: str
        """

        self._source_host = source_host

    @property
    def uid(self):
        """Gets the uid of this Identity.

        The uid of the person in the source system

        :return: The uid of this Identity.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Identity.

        The uid of the person in the source system

        :param uid: The uid of this Identity.
        :type uid: str
        """

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this Identity.

        For custom identities, an optional link to the profile on the source system

        :return: The url of this Identity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Identity.

        For custom identities, an optional link to the profile on the source system

        :param url: The url of this Identity.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this Identity.

        The username of the person in the source system

        :return: The username of this Identity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Identity.

        The username of the person in the source system

        :param username: The username of this Identity.
        :type username: str
        """

        self._username = username
