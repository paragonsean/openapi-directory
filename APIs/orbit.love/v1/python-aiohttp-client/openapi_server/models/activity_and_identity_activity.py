# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_with_member import ActivityWithMember
from openapi_server.models.member import Member
from openapi_server.models.post_activity_with_member import PostActivityWithMember
from openapi_server import util


class ActivityAndIdentityActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: str=None, activity_type_key: str=None, description: str=None, key: str=None, link: str=None, link_text: str=None, occurred_at: str=None, properties: object=None, title: str=None, weight: str=None, member: Member=None, url: str=None):
        """ActivityAndIdentityActivity - a model defined in OpenAPI

        :param activity_type: The activity_type of this ActivityAndIdentityActivity.
        :param activity_type_key: The activity_type_key of this ActivityAndIdentityActivity.
        :param description: The description of this ActivityAndIdentityActivity.
        :param key: The key of this ActivityAndIdentityActivity.
        :param link: The link of this ActivityAndIdentityActivity.
        :param link_text: The link_text of this ActivityAndIdentityActivity.
        :param occurred_at: The occurred_at of this ActivityAndIdentityActivity.
        :param properties: The properties of this ActivityAndIdentityActivity.
        :param title: The title of this ActivityAndIdentityActivity.
        :param weight: The weight of this ActivityAndIdentityActivity.
        :param member: The member of this ActivityAndIdentityActivity.
        :param url: The url of this ActivityAndIdentityActivity.
        """
        self.openapi_types = {
            'activity_type': str,
            'activity_type_key': str,
            'description': str,
            'key': str,
            'link': str,
            'link_text': str,
            'occurred_at': str,
            'properties': object,
            'title': str,
            'weight': str,
            'member': Member,
            'url': str
        }

        self.attribute_map = {
            'activity_type': 'activity_type',
            'activity_type_key': 'activity_type_key',
            'description': 'description',
            'key': 'key',
            'link': 'link',
            'link_text': 'link_text',
            'occurred_at': 'occurred_at',
            'properties': 'properties',
            'title': 'title',
            'weight': 'weight',
            'member': 'member',
            'url': 'url'
        }

        self._activity_type = activity_type
        self._activity_type_key = activity_type_key
        self._description = description
        self._key = key
        self._link = link
        self._link_text = link_text
        self._occurred_at = occurred_at
        self._properties = properties
        self._title = title
        self._weight = weight
        self._member = member
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityAndIdentityActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The activity_and_identity_activity of this ActivityAndIdentityActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityAndIdentityActivity.


        :return: The activity_type of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityAndIdentityActivity.


        :param activity_type: The activity_type of this ActivityAndIdentityActivity.
        :type activity_type: str
        """
        allowed_values = ["content"]  # noqa: E501
        if activity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_type` ({0}), must be one of {1}"
                .format(activity_type, allowed_values)
            )

        self._activity_type = activity_type

    @property
    def activity_type_key(self):
        """Gets the activity_type_key of this ActivityAndIdentityActivity.

        The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.

        :return: The activity_type_key of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._activity_type_key

    @activity_type_key.setter
    def activity_type_key(self, activity_type_key):
        """Sets the activity_type_key of this ActivityAndIdentityActivity.

        The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.

        :param activity_type_key: The activity_type_key of this ActivityAndIdentityActivity.
        :type activity_type_key: str
        """

        self._activity_type_key = activity_type_key

    @property
    def description(self):
        """Gets the description of this ActivityAndIdentityActivity.

        A description of the activity; displayed in the timeline

        :return: The description of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivityAndIdentityActivity.

        A description of the activity; displayed in the timeline

        :param description: The description of this ActivityAndIdentityActivity.
        :type description: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this ActivityAndIdentityActivity.

        Supply a key that must be unique or leave blank to have one generated.

        :return: The key of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ActivityAndIdentityActivity.

        Supply a key that must be unique or leave blank to have one generated.

        :param key: The key of this ActivityAndIdentityActivity.
        :type key: str
        """

        self._key = key

    @property
    def link(self):
        """Gets the link of this ActivityAndIdentityActivity.

        A URL for the activity; displayed in the timeline

        :return: The link of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ActivityAndIdentityActivity.

        A URL for the activity; displayed in the timeline

        :param link: The link of this ActivityAndIdentityActivity.
        :type link: str
        """

        self._link = link

    @property
    def link_text(self):
        """Gets the link_text of this ActivityAndIdentityActivity.

        The text for the timeline link

        :return: The link_text of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._link_text

    @link_text.setter
    def link_text(self, link_text):
        """Sets the link_text of this ActivityAndIdentityActivity.

        The text for the timeline link

        :param link_text: The link_text of this ActivityAndIdentityActivity.
        :type link_text: str
        """

        self._link_text = link_text

    @property
    def occurred_at(self):
        """Gets the occurred_at of this ActivityAndIdentityActivity.

        The date and time at which the content was published; defaults to now

        :return: The occurred_at of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this ActivityAndIdentityActivity.

        The date and time at which the content was published; defaults to now

        :param occurred_at: The occurred_at of this ActivityAndIdentityActivity.
        :type occurred_at: str
        """

        self._occurred_at = occurred_at

    @property
    def properties(self):
        """Gets the properties of this ActivityAndIdentityActivity.

        Key-value pairs to provide contextual metadata about an activity.

        :return: The properties of this ActivityAndIdentityActivity.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ActivityAndIdentityActivity.

        Key-value pairs to provide contextual metadata about an activity.

        :param properties: The properties of this ActivityAndIdentityActivity.
        :type properties: object
        """

        self._properties = properties

    @property
    def title(self):
        """Gets the title of this ActivityAndIdentityActivity.

        A title for the activity; displayed in the timeline

        :return: The title of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActivityAndIdentityActivity.

        A title for the activity; displayed in the timeline

        :param title: The title of this ActivityAndIdentityActivity.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def weight(self):
        """Gets the weight of this ActivityAndIdentityActivity.

        A custom weight to be used in filters and reports; defaults to 1.

        :return: The weight of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ActivityAndIdentityActivity.

        A custom weight to be used in filters and reports; defaults to 1.

        :param weight: The weight of this ActivityAndIdentityActivity.
        :type weight: str
        """

        self._weight = weight

    @property
    def member(self):
        """Gets the member of this ActivityAndIdentityActivity.


        :return: The member of this ActivityAndIdentityActivity.
        :rtype: Member
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ActivityAndIdentityActivity.


        :param member: The member of this ActivityAndIdentityActivity.
        :type member: Member
        """

        self._member = member

    @property
    def url(self):
        """Gets the url of this ActivityAndIdentityActivity.

        The url representing the post

        :return: The url of this ActivityAndIdentityActivity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActivityAndIdentityActivity.

        The url representing the post

        :param url: The url of this ActivityAndIdentityActivity.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
