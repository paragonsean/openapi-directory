# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert import Alert
from openapi_server import util


class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: List[Alert]=None, name: str=None, url: str=None):
        """Destination - a model defined in OpenAPI

        :param alerts: The alerts of this Destination.
        :param name: The name of this Destination.
        :param url: The url of this Destination.
        """
        self.openapi_types = {
            'alerts': List[Alert],
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'name': 'name',
            'url': 'url'
        }

        self._alerts = alerts
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The destination of this Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this Destination.


        :return: The alerts of this Destination.
        :rtype: List[Alert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this Destination.


        :param alerts: The alerts of this Destination.
        :type alerts: List[Alert]
        """

        self._alerts = alerts

    @property
    def name(self):
        """Gets the name of this Destination.


        :return: The name of this Destination.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Destination.


        :param name: The name of this Destination.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def url(self):
        """Gets the url of this Destination.


        :return: The url of this Destination.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Destination.


        :param url: The url of this Destination.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
