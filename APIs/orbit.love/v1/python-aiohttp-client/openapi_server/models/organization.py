# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crm_uid: str=None, crm_url: str=None, deal_closed_date: str=None, lifecycle_stage: str=None, owner_email: str=None, owner_name: str=None, price_plan: str=None, source: str=None):
        """Organization - a model defined in OpenAPI

        :param crm_uid: The crm_uid of this Organization.
        :param crm_url: The crm_url of this Organization.
        :param deal_closed_date: The deal_closed_date of this Organization.
        :param lifecycle_stage: The lifecycle_stage of this Organization.
        :param owner_email: The owner_email of this Organization.
        :param owner_name: The owner_name of this Organization.
        :param price_plan: The price_plan of this Organization.
        :param source: The source of this Organization.
        """
        self.openapi_types = {
            'crm_uid': str,
            'crm_url': str,
            'deal_closed_date': str,
            'lifecycle_stage': str,
            'owner_email': str,
            'owner_name': str,
            'price_plan': str,
            'source': str
        }

        self.attribute_map = {
            'crm_uid': 'crm_uid',
            'crm_url': 'crm_url',
            'deal_closed_date': 'deal_closed_date',
            'lifecycle_stage': 'lifecycle_stage',
            'owner_email': 'owner_email',
            'owner_name': 'owner_name',
            'price_plan': 'price_plan',
            'source': 'source'
        }

        self._crm_uid = crm_uid
        self._crm_url = crm_url
        self._deal_closed_date = deal_closed_date
        self._lifecycle_stage = lifecycle_stage
        self._owner_email = owner_email
        self._owner_name = owner_name
        self._price_plan = price_plan
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crm_uid(self):
        """Gets the crm_uid of this Organization.

        The unique identifier of the organization in your CRM.

        :return: The crm_uid of this Organization.
        :rtype: str
        """
        return self._crm_uid

    @crm_uid.setter
    def crm_uid(self, crm_uid):
        """Sets the crm_uid of this Organization.

        The unique identifier of the organization in your CRM.

        :param crm_uid: The crm_uid of this Organization.
        :type crm_uid: str
        """

        self._crm_uid = crm_uid

    @property
    def crm_url(self):
        """Gets the crm_url of this Organization.

        A link to the organization profile in your CRM.

        :return: The crm_url of this Organization.
        :rtype: str
        """
        return self._crm_url

    @crm_url.setter
    def crm_url(self, crm_url):
        """Sets the crm_url of this Organization.

        A link to the organization profile in your CRM.

        :param crm_url: The crm_url of this Organization.
        :type crm_url: str
        """
        if crm_url is None:
            raise ValueError("Invalid value for `crm_url`, must not be `None`")

        self._crm_url = crm_url

    @property
    def deal_closed_date(self):
        """Gets the deal_closed_date of this Organization.

        The date the organization became a customer.

        :return: The deal_closed_date of this Organization.
        :rtype: str
        """
        return self._deal_closed_date

    @deal_closed_date.setter
    def deal_closed_date(self, deal_closed_date):
        """Sets the deal_closed_date of this Organization.

        The date the organization became a customer.

        :param deal_closed_date: The deal_closed_date of this Organization.
        :type deal_closed_date: str
        """

        self._deal_closed_date = deal_closed_date

    @property
    def lifecycle_stage(self):
        """Gets the lifecycle_stage of this Organization.

        The current stage of the organization in the marketing or sales process.

        :return: The lifecycle_stage of this Organization.
        :rtype: str
        """
        return self._lifecycle_stage

    @lifecycle_stage.setter
    def lifecycle_stage(self, lifecycle_stage):
        """Sets the lifecycle_stage of this Organization.

        The current stage of the organization in the marketing or sales process.

        :param lifecycle_stage: The lifecycle_stage of this Organization.
        :type lifecycle_stage: str
        """
        if lifecycle_stage is None:
            raise ValueError("Invalid value for `lifecycle_stage`, must not be `None`")

        self._lifecycle_stage = lifecycle_stage

    @property
    def owner_email(self):
        """Gets the owner_email of this Organization.

        The email of the team member who is in charge of the organization.

        :return: The owner_email of this Organization.
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this Organization.

        The email of the team member who is in charge of the organization.

        :param owner_email: The owner_email of this Organization.
        :type owner_email: str
        """

        self._owner_email = owner_email

    @property
    def owner_name(self):
        """Gets the owner_name of this Organization.

        The name of the team member who is in charge of the organization.

        :return: The owner_name of this Organization.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Organization.

        The name of the team member who is in charge of the organization.

        :param owner_name: The owner_name of this Organization.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def price_plan(self):
        """Gets the price_plan of this Organization.

        The pricing plan the organization is on.

        :return: The price_plan of this Organization.
        :rtype: str
        """
        return self._price_plan

    @price_plan.setter
    def price_plan(self, price_plan):
        """Sets the price_plan of this Organization.

        The pricing plan the organization is on.

        :param price_plan: The price_plan of this Organization.
        :type price_plan: str
        """

        self._price_plan = price_plan

    @property
    def source(self):
        """Gets the source of this Organization.

        The name of the CRM you use for tracking the organization.

        :return: The source of this Organization.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Organization.

        The name of the CRM you use for tracking the organization.

        :param source: The source of this Organization.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
