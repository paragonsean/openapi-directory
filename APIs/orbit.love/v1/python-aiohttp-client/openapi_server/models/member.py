# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Member(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bio: str=None, birthday: str=None, company: str=None, devto: str=None, email: str=None, github: str=None, linkedin: str=None, location: str=None, name: str=None, pronouns: str=None, shipping_address: str=None, slug: str=None, tag_list: str=None, tags: str=None, tags_to_add: str=None, teammate: bool=None, title: str=None, tshirt: str=None, twitter: str=None, url: str=None):
        """Member - a model defined in OpenAPI

        :param bio: The bio of this Member.
        :param birthday: The birthday of this Member.
        :param company: The company of this Member.
        :param devto: The devto of this Member.
        :param email: The email of this Member.
        :param github: The github of this Member.
        :param linkedin: The linkedin of this Member.
        :param location: The location of this Member.
        :param name: The name of this Member.
        :param pronouns: The pronouns of this Member.
        :param shipping_address: The shipping_address of this Member.
        :param slug: The slug of this Member.
        :param tag_list: The tag_list of this Member.
        :param tags: The tags of this Member.
        :param tags_to_add: The tags_to_add of this Member.
        :param teammate: The teammate of this Member.
        :param title: The title of this Member.
        :param tshirt: The tshirt of this Member.
        :param twitter: The twitter of this Member.
        :param url: The url of this Member.
        """
        self.openapi_types = {
            'bio': str,
            'birthday': str,
            'company': str,
            'devto': str,
            'email': str,
            'github': str,
            'linkedin': str,
            'location': str,
            'name': str,
            'pronouns': str,
            'shipping_address': str,
            'slug': str,
            'tag_list': str,
            'tags': str,
            'tags_to_add': str,
            'teammate': bool,
            'title': str,
            'tshirt': str,
            'twitter': str,
            'url': str
        }

        self.attribute_map = {
            'bio': 'bio',
            'birthday': 'birthday',
            'company': 'company',
            'devto': 'devto',
            'email': 'email',
            'github': 'github',
            'linkedin': 'linkedin',
            'location': 'location',
            'name': 'name',
            'pronouns': 'pronouns',
            'shipping_address': 'shipping_address',
            'slug': 'slug',
            'tag_list': 'tag_list',
            'tags': 'tags',
            'tags_to_add': 'tags_to_add',
            'teammate': 'teammate',
            'title': 'title',
            'tshirt': 'tshirt',
            'twitter': 'twitter',
            'url': 'url'
        }

        self._bio = bio
        self._birthday = birthday
        self._company = company
        self._devto = devto
        self._email = email
        self._github = github
        self._linkedin = linkedin
        self._location = location
        self._name = name
        self._pronouns = pronouns
        self._shipping_address = shipping_address
        self._slug = slug
        self._tag_list = tag_list
        self._tags = tags
        self._tags_to_add = tags_to_add
        self._teammate = teammate
        self._title = title
        self._tshirt = tshirt
        self._twitter = twitter
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Member':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The member of this Member.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bio(self):
        """Gets the bio of this Member.


        :return: The bio of this Member.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Member.


        :param bio: The bio of this Member.
        :type bio: str
        """

        self._bio = bio

    @property
    def birthday(self):
        """Gets the birthday of this Member.


        :return: The birthday of this Member.
        :rtype: str
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this Member.


        :param birthday: The birthday of this Member.
        :type birthday: str
        """

        self._birthday = birthday

    @property
    def company(self):
        """Gets the company of this Member.


        :return: The company of this Member.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Member.


        :param company: The company of this Member.
        :type company: str
        """

        self._company = company

    @property
    def devto(self):
        """Gets the devto of this Member.

        The member's DEV username

        :return: The devto of this Member.
        :rtype: str
        """
        return self._devto

    @devto.setter
    def devto(self, devto):
        """Sets the devto of this Member.

        The member's DEV username

        :param devto: The devto of this Member.
        :type devto: str
        """

        self._devto = devto

    @property
    def email(self):
        """Gets the email of this Member.

        The member's email

        :return: The email of this Member.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Member.

        The member's email

        :param email: The email of this Member.
        :type email: str
        """

        self._email = email

    @property
    def github(self):
        """Gets the github of this Member.

        The member's GitHub username

        :return: The github of this Member.
        :rtype: str
        """
        return self._github

    @github.setter
    def github(self, github):
        """Sets the github of this Member.

        The member's GitHub username

        :param github: The github of this Member.
        :type github: str
        """

        self._github = github

    @property
    def linkedin(self):
        """Gets the linkedin of this Member.

        The member's LinkedIn username, without the in/ or pub/

        :return: The linkedin of this Member.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this Member.

        The member's LinkedIn username, without the in/ or pub/

        :param linkedin: The linkedin of this Member.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def location(self):
        """Gets the location of this Member.


        :return: The location of this Member.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Member.


        :param location: The location of this Member.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Member.


        :return: The name of this Member.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Member.


        :param name: The name of this Member.
        :type name: str
        """

        self._name = name

    @property
    def pronouns(self):
        """Gets the pronouns of this Member.


        :return: The pronouns of this Member.
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this Member.


        :param pronouns: The pronouns of this Member.
        :type pronouns: str
        """

        self._pronouns = pronouns

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Member.


        :return: The shipping_address of this Member.
        :rtype: str
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Member.


        :param shipping_address: The shipping_address of this Member.
        :type shipping_address: str
        """

        self._shipping_address = shipping_address

    @property
    def slug(self):
        """Gets the slug of this Member.


        :return: The slug of this Member.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Member.


        :param slug: The slug of this Member.
        :type slug: str
        """

        self._slug = slug

    @property
    def tag_list(self):
        """Gets the tag_list of this Member.

        Deprecated: Please use the tags attribute instead

        :return: The tag_list of this Member.
        :rtype: str
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this Member.

        Deprecated: Please use the tags attribute instead

        :param tag_list: The tag_list of this Member.
        :type tag_list: str
        """

        self._tag_list = tag_list

    @property
    def tags(self):
        """Gets the tags of this Member.

        Replaces all tags for the member; comma-separated string or array

        :return: The tags of this Member.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Member.

        Replaces all tags for the member; comma-separated string or array

        :param tags: The tags of this Member.
        :type tags: str
        """

        self._tags = tags

    @property
    def tags_to_add(self):
        """Gets the tags_to_add of this Member.

        Adds tags to member; comma-separated string or array

        :return: The tags_to_add of this Member.
        :rtype: str
        """
        return self._tags_to_add

    @tags_to_add.setter
    def tags_to_add(self, tags_to_add):
        """Sets the tags_to_add of this Member.

        Adds tags to member; comma-separated string or array

        :param tags_to_add: The tags_to_add of this Member.
        :type tags_to_add: str
        """

        self._tags_to_add = tags_to_add

    @property
    def teammate(self):
        """Gets the teammate of this Member.


        :return: The teammate of this Member.
        :rtype: bool
        """
        return self._teammate

    @teammate.setter
    def teammate(self, teammate):
        """Sets the teammate of this Member.


        :param teammate: The teammate of this Member.
        :type teammate: bool
        """

        self._teammate = teammate

    @property
    def title(self):
        """Gets the title of this Member.


        :return: The title of this Member.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Member.


        :param title: The title of this Member.
        :type title: str
        """

        self._title = title

    @property
    def tshirt(self):
        """Gets the tshirt of this Member.


        :return: The tshirt of this Member.
        :rtype: str
        """
        return self._tshirt

    @tshirt.setter
    def tshirt(self, tshirt):
        """Sets the tshirt of this Member.


        :param tshirt: The tshirt of this Member.
        :type tshirt: str
        """

        self._tshirt = tshirt

    @property
    def twitter(self):
        """Gets the twitter of this Member.

        The member's Twitter username

        :return: The twitter of this Member.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this Member.

        The member's Twitter username

        :param twitter: The twitter of this Member.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def url(self):
        """Gets the url of this Member.


        :return: The url of this Member.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Member.


        :param url: The url of this Member.
        :type url: str
        """

        self._url = url
