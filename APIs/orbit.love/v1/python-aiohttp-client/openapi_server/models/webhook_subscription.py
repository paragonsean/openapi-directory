# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhookSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_tags: List[str]=None, activity_types: List[str]=None, event_type: str=None, member_tags: List[str]=None, name: str=None, secret: str=None, url: str=None):
        """WebhookSubscription - a model defined in OpenAPI

        :param activity_tags: The activity_tags of this WebhookSubscription.
        :param activity_types: The activity_types of this WebhookSubscription.
        :param event_type: The event_type of this WebhookSubscription.
        :param member_tags: The member_tags of this WebhookSubscription.
        :param name: The name of this WebhookSubscription.
        :param secret: The secret of this WebhookSubscription.
        :param url: The url of this WebhookSubscription.
        """
        self.openapi_types = {
            'activity_tags': List[str],
            'activity_types': List[str],
            'event_type': str,
            'member_tags': List[str],
            'name': str,
            'secret': str,
            'url': str
        }

        self.attribute_map = {
            'activity_tags': 'activity_tags',
            'activity_types': 'activity_types',
            'event_type': 'event_type',
            'member_tags': 'member_tags',
            'name': 'name',
            'secret': 'secret',
            'url': 'url'
        }

        self._activity_tags = activity_tags
        self._activity_types = activity_types
        self._event_type = event_type
        self._member_tags = member_tags
        self._name = name
        self._secret = secret
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The webhook_subscription of this WebhookSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_tags(self):
        """Gets the activity_tags of this WebhookSubscription.


        :return: The activity_tags of this WebhookSubscription.
        :rtype: List[str]
        """
        return self._activity_tags

    @activity_tags.setter
    def activity_tags(self, activity_tags):
        """Sets the activity_tags of this WebhookSubscription.


        :param activity_tags: The activity_tags of this WebhookSubscription.
        :type activity_tags: List[str]
        """

        self._activity_tags = activity_tags

    @property
    def activity_types(self):
        """Gets the activity_types of this WebhookSubscription.


        :return: The activity_types of this WebhookSubscription.
        :rtype: List[str]
        """
        return self._activity_types

    @activity_types.setter
    def activity_types(self, activity_types):
        """Sets the activity_types of this WebhookSubscription.


        :param activity_types: The activity_types of this WebhookSubscription.
        :type activity_types: List[str]
        """

        self._activity_types = activity_types

    @property
    def event_type(self):
        """Gets the event_type of this WebhookSubscription.


        :return: The event_type of this WebhookSubscription.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this WebhookSubscription.


        :param event_type: The event_type of this WebhookSubscription.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def member_tags(self):
        """Gets the member_tags of this WebhookSubscription.


        :return: The member_tags of this WebhookSubscription.
        :rtype: List[str]
        """
        return self._member_tags

    @member_tags.setter
    def member_tags(self, member_tags):
        """Sets the member_tags of this WebhookSubscription.


        :param member_tags: The member_tags of this WebhookSubscription.
        :type member_tags: List[str]
        """

        self._member_tags = member_tags

    @property
    def name(self):
        """Gets the name of this WebhookSubscription.


        :return: The name of this WebhookSubscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookSubscription.


        :param name: The name of this WebhookSubscription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this WebhookSubscription.


        :return: The secret of this WebhookSubscription.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this WebhookSubscription.


        :param secret: The secret of this WebhookSubscription.
        :type secret: str
        """

        self._secret = secret

    @property
    def url(self):
        """Gets the url of this WebhookSubscription.


        :return: The url of this WebhookSubscription.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookSubscription.


        :param url: The url of this WebhookSubscription.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
