/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Activity from '../model/Activity';
import ActivityAndIdentity from '../model/ActivityAndIdentity';
import CustomOrPostActivity from '../model/CustomOrPostActivity';

/**
* Activities service.
* @module api/ActivitiesApi
* @version v1
*/
export default class ActivitiesApi {

    /**
    * Constructs a new ActivitiesApi. 
    * @alias module:api/ActivitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspaceSlugActivitiesGet operation.
     * @callback module:api/ActivitiesApi~workspaceSlugActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List activities for a workspace
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [affiliation] 
     * @param {String} [memberTags] The list of tags to filter against. Separate tags with `,` to do an intersection (AND), or with `|` to do a union (OR)
     * @param {String} [orbit] The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like `23` would include levels 2 and 3. `n` is for members with no orbit level.
     * @param {module:model/String} [activityType] Comma separated list of activity types
     * @param {module:model/String} [identity] 
     * @param {String} [company] Comma separated list of companies. The union (OR) of companies is applied.
     * @param {String} [title] Comma separated list of job titles. The union (OR) of job titles is applied.
     * @param {String} [regions] Comma separated list of regions. The union (OR) of regions is applied.
     * @param {String} [countries] Comma separated list of countries. The union (OR) of countries is applied.
     * @param {String} [cities] Comma separated list of cities. The union (OR) of cities is applied.
     * @param {String} [startDate] Filter activities after this date. Format: YYYY-MM-DD.
     * @param {String} [endDate] Filter activities before this date. Format: YYYY-MM-DD.
     * @param {String} [relative] Relative timeframes. Format: this_<integer>_<period>, with period in [days, weeks, months, years]. For example, this_30_days.
     * @param {String} [page] 
     * @param {module:model/String} [direction] 
     * @param {module:model/String} [items] 
     * @param {module:model/String} [sort] 
     * @param {String} [type] Deprecated in favor of the activity_type parameter.
     * @param {module:api/ActivitiesApi~workspaceSlugActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugActivitiesGet(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
        'affiliation': opts['affiliation'],
        'member_tags': opts['memberTags'],
        'orbit': opts['orbit'],
        'activity_type': opts['activityType'],
        'identity': opts['identity'],
        'company[]': opts['company'],
        'title[]': opts['title'],
        'regions[]': opts['regions'],
        'countries[]': opts['countries'],
        'cities[]': opts['cities'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'relative': opts['relative'],
        'page': opts['page'],
        'direction': opts['direction'],
        'items': opts['items'],
        'sort': opts['sort'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugActivitiesIdGet operation.
     * @callback module:api/ActivitiesApi~workspaceSlugActivitiesIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an activity in the workspace
     * @param {String} workspaceSlug 
     * @param {String} id 
     * @param {module:api/ActivitiesApi~workspaceSlugActivitiesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugActivitiesIdGet(workspaceSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugActivitiesIdGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/activities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugActivitiesPost operation.
     * @callback module:api/ActivitiesApi~workspaceSlugActivitiesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Custom or a Content activity for a new or existing member
     * Use this method when you know an identity of the member (github, email, twitter, etc.) but not their Orbit ID. Pass fields in the member object to update the member in addition to creating the activity.
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/ActivityAndIdentity} [activityAndIdentity] 
     * @param {module:api/ActivitiesApi~workspaceSlugActivitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugActivitiesPost(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['activityAndIdentity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugActivitiesPost");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugActivitiesGet operation.
     * @callback module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List activities for a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {module:model/String} [direction] 
     * @param {module:model/String} [items] 
     * @param {module:model/String} [sort] 
     * @param {String} [activityType] 
     * @param {String} [type] Deprecated in favor of the activity_type parameter.
     * @param {module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugActivitiesGet(workspaceSlug, memberSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesGet");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
        'page': opts['page'],
        'direction': opts['direction'],
        'items': opts['items'],
        'sort': opts['sort'],
        'activity_type': opts['activityType'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugActivitiesIdDelete operation.
     * @callback module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a post activity
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {String} id 
     * @param {module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugActivitiesIdDelete(workspaceSlug, memberSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugMembersMemberSlugActivitiesIdDelete");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/activities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugActivitiesIdPut operation.
     * @callback module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom activity for a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Activity} [activity] 
     * @param {module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugActivitiesIdPut(workspaceSlug, memberSlug, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['activity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdPut");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugMembersMemberSlugActivitiesIdPut");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/activities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugActivitiesPost operation.
     * @callback module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Custom or a Content activity for a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/CustomOrPostActivity} [customOrPostActivity] 
     * @param {module:api/ActivitiesApi~workspaceSlugMembersMemberSlugActivitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugActivitiesPost(workspaceSlug, memberSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['customOrPostActivity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugActivitiesPost");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugActivitiesPost");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugOrganizationsOrganizationIdActivitiesGet operation.
     * @callback module:api/ActivitiesApi~workspaceSlugOrganizationsOrganizationIdActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List member activities in an organization
     * @param {String} workspaceSlug 
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {module:model/String} [direction] 
     * @param {module:model/String} [items] 
     * @param {module:model/String} [sort] 
     * @param {module:model/String} [activityType] 
     * @param {module:api/ActivitiesApi~workspaceSlugOrganizationsOrganizationIdActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugOrganizationsOrganizationIdActivitiesGet(workspaceSlug, organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdActivitiesGet");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdActivitiesGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'organization_id': organizationId
      };
      let queryParams = {
        'page': opts['page'],
        'direction': opts['direction'],
        'items': opts['items'],
        'sort': opts['sort'],
        'activity_type': opts['activityType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/organizations/{organization_id}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
