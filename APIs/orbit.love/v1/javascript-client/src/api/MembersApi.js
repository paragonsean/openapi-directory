/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Identity from '../model/Identity';
import Member from '../model/Member';
import MemberAndIdentity from '../model/MemberAndIdentity';

/**
* Members service.
* @module api/MembersApi
* @version v1
*/
export default class MembersApi {

    /**
    * Constructs a new MembersApi. 
    * @alias module:api/MembersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspaceSlugMembersFindGet operation.
     * @callback module:api/MembersApi~workspaceSlugMembersFindGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a member by an identity
     * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {String} [source] 
     * @param {String} [sourceHost] 
     * @param {String} [uid] 
     * @param {String} [username] 
     * @param {String} [email] 
     * @param {String} [github] Deprecated, please use source=github and username=<username> instead
     * @param {module:api/MembersApi~workspaceSlugMembersFindGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersFindGet(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersFindGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
        'source': opts['source'],
        'source_host': opts['sourceHost'],
        'uid': opts['uid'],
        'username': opts['username'],
        'email': opts['email'],
        'github': opts['github']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersGet operation.
     * @callback module:api/MembersApi~workspaceSlugMembersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members in a workspace
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [affiliation] 
     * @param {String} [memberTags] The list of tags to filter against. Separate tags with `,` to do an intersection (AND), or with `|` to do a union (OR)
     * @param {String} [orbit] The list of orbit levels to filter against. Accepted values are 1, 2, 3, 4, n. In the request, a format like `23` would include levels 2 and 3. `n` is for members with no orbit level.
     * @param {module:model/String} [activityType] Comma separated list of activity types
     * @param {module:model/String} [identity] 
     * @param {String} [company] Comma separated list of companies. The union (OR) of companies is applied.
     * @param {String} [title] Comma separated list of job titles. The union (OR) of job titles is applied.
     * @param {String} [regions] Comma separated list of regions. The union (OR) of regions is applied.
     * @param {String} [countries] Comma separated list of countries. The union (OR) of countries is applied.
     * @param {String} [cities] Comma separated list of cities. The union (OR) of cities is applied.
     * @param {String} [startDate] Filter activities after this date. Format: YYYY-MM-DD.
     * @param {String} [endDate] Filter activities before this date. Format: YYYY-MM-DD.
     * @param {String} [relative] Relative timeframes. Format: this_<integer>_<period>, with period in [days, weeks, months, years]. For example, this_30_days.
     * @param {String} [query] 
     * @param {String} [page] 
     * @param {module:model/String} [direction] 
     * @param {module:model/String} [items] 
     * @param {String} [activitiesCountMin] 
     * @param {String} [activitiesCountMax] 
     * @param {module:model/String} [sort] 
     * @param {String} [type] Deprecated in favor of the activity_type parameter.
     * @param {module:api/MembersApi~workspaceSlugMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersGet(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
        'affiliation': opts['affiliation'],
        'member_tags': opts['memberTags'],
        'orbit': opts['orbit'],
        'activity_type': opts['activityType'],
        'identity': opts['identity'],
        'company[]': opts['company'],
        'title[]': opts['title'],
        'regions[]': opts['regions'],
        'countries[]': opts['countries'],
        'cities[]': opts['cities'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'relative': opts['relative'],
        'query': opts['query'],
        'page': opts['page'],
        'direction': opts['direction'],
        'items': opts['items'],
        'activities_count_min': opts['activitiesCountMin'],
        'activities_count_max': opts['activitiesCountMax'],
        'sort': opts['sort'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugDelete operation.
     * @callback module:api/MembersApi~workspaceSlugMembersMemberSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {module:api/MembersApi~workspaceSlugMembersMemberSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugDelete(workspaceSlug, memberSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugDelete");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugDelete");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugGet operation.
     * @callback module:api/MembersApi~workspaceSlugMembersMemberSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {module:api/MembersApi~workspaceSlugMembersMemberSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugGet(workspaceSlug, memberSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugGet");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugIdentitiesDelete operation.
     * @callback module:api/MembersApi~workspaceSlugMembersMemberSlugIdentitiesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove identity from a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/Identity} [identity] 
     * @param {module:api/MembersApi~workspaceSlugMembersMemberSlugIdentitiesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugIdentitiesDelete(workspaceSlug, memberSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['identity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugIdentitiesDelete");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugIdentitiesDelete");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/identities', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugIdentitiesPost operation.
     * @callback module:api/MembersApi~workspaceSlugMembersMemberSlugIdentitiesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add identity to a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/Identity} [identity] 
     * @param {module:api/MembersApi~workspaceSlugMembersMemberSlugIdentitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugIdentitiesPost(workspaceSlug, memberSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['identity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugIdentitiesPost");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugIdentitiesPost");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}/identities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersMemberSlugPut operation.
     * @callback module:api/MembersApi~workspaceSlugMembersMemberSlugPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a member
     * @param {String} workspaceSlug 
     * @param {String} memberSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/Member} [member] 
     * @param {module:api/MembersApi~workspaceSlugMembersMemberSlugPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersMemberSlugPut(workspaceSlug, memberSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['member'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersMemberSlugPut");
      }
      // verify the required parameter 'memberSlug' is set
      if (memberSlug === undefined || memberSlug === null) {
        throw new Error("Missing the required parameter 'memberSlug' when calling workspaceSlugMembersMemberSlugPut");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'member_slug': memberSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members/{member_slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugMembersPost operation.
     * @callback module:api/MembersApi~workspaceSlugMembersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a member
     * This method is useful when you know a member's identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/MemberAndIdentity} [memberAndIdentity] 
     * @param {module:api/MembersApi~workspaceSlugMembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugMembersPost(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['memberAndIdentity'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugMembersPost");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugOrganizationsOrganizationIdMembersGet operation.
     * @callback module:api/MembersApi~workspaceSlugOrganizationsOrganizationIdMembersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List members in an organization
     * @param {String} workspaceSlug 
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [page] 
     * @param {module:model/String} [items] 
     * @param {module:api/MembersApi~workspaceSlugOrganizationsOrganizationIdMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugOrganizationsOrganizationIdMembersGet(workspaceSlug, organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdMembersGet");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdMembersGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'organization_id': organizationId
      };
      let queryParams = {
        'page': opts['page'],
        'items': opts['items']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/organizations/{organization_id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
