/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Organization from '../model/Organization';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version v1
*/
export default class OrganizationsApi {

    /**
    * Constructs a new OrganizationsApi. 
    * @alias module:api/OrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspaceSlugOrganizationsGet operation.
     * @callback module:api/OrganizationsApi~workspaceSlugOrganizationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations in a workspace
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {String} [query] 
     * @param {String} [page] 
     * @param {module:model/String} [direction] 
     * @param {module:model/String} [items] 
     * @param {module:model/String} [sort] 
     * @param {module:api/OrganizationsApi~workspaceSlugOrganizationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugOrganizationsGet(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
        'query': opts['query'],
        'page': opts['page'],
        'direction': opts['direction'],
        'items': opts['items'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugOrganizationsOrganizationIdGet operation.
     * @callback module:api/OrganizationsApi~workspaceSlugOrganizationsOrganizationIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an organization
     * @param {String} workspaceSlug 
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~workspaceSlugOrganizationsOrganizationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugOrganizationsOrganizationIdGet(workspaceSlug, organizationId, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdGet");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/organizations/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugOrganizationsOrganizationIdPut operation.
     * @callback module:api/OrganizationsApi~workspaceSlugOrganizationsOrganizationIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an organization
     * @param {String} workspaceSlug 
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Organization} [organization] 
     * @param {module:api/OrganizationsApi~workspaceSlugOrganizationsOrganizationIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugOrganizationsOrganizationIdPut(workspaceSlug, organizationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['organization'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugOrganizationsOrganizationIdPut");
      }
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling workspaceSlugOrganizationsOrganizationIdPut");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'organization_id': organizationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/organizations/{organization_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
