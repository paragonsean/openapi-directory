/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebhookSubscription from '../model/WebhookSubscription';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version v1
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workspaceSlugWebhooksGet operation.
     * @callback module:api/WebhooksApi~workspaceSlugWebhooksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhooks in a workspace
     * @param {String} workspaceSlug 
     * @param {module:api/WebhooksApi~workspaceSlugWebhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugWebhooksGet(workspaceSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugWebhooksIdDelete operation.
     * @callback module:api/WebhooksApi~workspaceSlugWebhooksIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook
     * @param {String} workspaceSlug 
     * @param {String} id 
     * @param {module:api/WebhooksApi~workspaceSlugWebhooksIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugWebhooksIdDelete(workspaceSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdDelete");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugWebhooksIdGet operation.
     * @callback module:api/WebhooksApi~workspaceSlugWebhooksIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webhook
     * @param {String} workspaceSlug 
     * @param {String} id 
     * @param {module:api/WebhooksApi~workspaceSlugWebhooksIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugWebhooksIdGet(workspaceSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdGet");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugWebhooksIdPut operation.
     * @callback module:api/WebhooksApi~workspaceSlugWebhooksIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook
     * @param {String} workspaceSlug 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookSubscription} [webhookSubscription] 
     * @param {module:api/WebhooksApi~workspaceSlugWebhooksIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugWebhooksIdPut(workspaceSlug, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['webhookSubscription'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling workspaceSlugWebhooksIdPut");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/webhooks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspaceSlugWebhooksPost operation.
     * @callback module:api/WebhooksApi~workspaceSlugWebhooksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook
     * @param {String} workspaceSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhookSubscription} [webhookSubscription] 
     * @param {module:api/WebhooksApi~workspaceSlugWebhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspaceSlugWebhooksPost(workspaceSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['webhookSubscription'];
      // verify the required parameter 'workspaceSlug' is set
      if (workspaceSlug === undefined || workspaceSlug === null) {
        throw new Error("Missing the required parameter 'workspaceSlug' when calling workspaceSlugWebhooksPost");
      }

      let pathParams = {
        'workspace_slug': workspaceSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{workspace_slug}/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
