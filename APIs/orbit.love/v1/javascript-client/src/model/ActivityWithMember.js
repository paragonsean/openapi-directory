/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Activity from './Activity';
import Member from './Member';

/**
 * The ActivityWithMember model module.
 * @module model/ActivityWithMember
 * @version v1
 */
class ActivityWithMember {
    /**
     * Constructs a new <code>ActivityWithMember</code>.
     * @alias module:model/ActivityWithMember
     * @implements module:model/Activity
     * @param title {String} A title for the activity; displayed in the timeline
     */
    constructor(title) { 
        Activity.initialize(this, title);
        ActivityWithMember.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>ActivityWithMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityWithMember} obj Optional instance to populate.
     * @return {module:model/ActivityWithMember} The populated <code>ActivityWithMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityWithMember();
            Activity.constructFromObject(data, obj);

            if (data.hasOwnProperty('activity_type')) {
                obj['activity_type'] = ApiClient.convertToType(data['activity_type'], 'String');
            }
            if (data.hasOwnProperty('activity_type_key')) {
                obj['activity_type_key'] = ApiClient.convertToType(data['activity_type_key'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('link_text')) {
                obj['link_text'] = ApiClient.convertToType(data['link_text'], 'String');
            }
            if (data.hasOwnProperty('occurred_at')) {
                obj['occurred_at'] = ApiClient.convertToType(data['occurred_at'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'String');
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = Member.constructFromObject(data['member']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityWithMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityWithMember</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ActivityWithMember.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activity_type'] && !(typeof data['activity_type'] === 'string' || data['activity_type'] instanceof String)) {
            throw new Error("Expected the field `activity_type` to be a primitive type in the JSON string but got " + data['activity_type']);
        }
        // ensure the json data is a string
        if (data['activity_type_key'] && !(typeof data['activity_type_key'] === 'string' || data['activity_type_key'] instanceof String)) {
            throw new Error("Expected the field `activity_type_key` to be a primitive type in the JSON string but got " + data['activity_type_key']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['link_text'] && !(typeof data['link_text'] === 'string' || data['link_text'] instanceof String)) {
            throw new Error("Expected the field `link_text` to be a primitive type in the JSON string but got " + data['link_text']);
        }
        // ensure the json data is a string
        if (data['occurred_at'] && !(typeof data['occurred_at'] === 'string' || data['occurred_at'] instanceof String)) {
            throw new Error("Expected the field `occurred_at` to be a primitive type in the JSON string but got " + data['occurred_at']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['weight'] && !(typeof data['weight'] === 'string' || data['weight'] instanceof String)) {
            throw new Error("Expected the field `weight` to be a primitive type in the JSON string but got " + data['weight']);
        }
        // validate the optional field `member`
        if (data['member']) { // data not null
          Member.validateJSON(data['member']);
        }

        return true;
    }


}

ActivityWithMember.RequiredProperties = ["title"];

/**
 * The type of activity - what action was done by the member. This is a legacy field, use activity_type_key instead.
 * @member {String} activity_type
 */
ActivityWithMember.prototype['activity_type'] = undefined;

/**
 * The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.
 * @member {String} activity_type_key
 */
ActivityWithMember.prototype['activity_type_key'] = undefined;

/**
 * A description of the activity; displayed in the timeline
 * @member {String} description
 */
ActivityWithMember.prototype['description'] = undefined;

/**
 * Supply a key that must be unique or leave blank to have one generated.
 * @member {String} key
 */
ActivityWithMember.prototype['key'] = undefined;

/**
 * A URL for the activity; displayed in the timeline
 * @member {String} link
 */
ActivityWithMember.prototype['link'] = undefined;

/**
 * The text for the timeline link
 * @member {String} link_text
 */
ActivityWithMember.prototype['link_text'] = undefined;

/**
 * The date and time the activity occurred; defaults to now
 * @member {String} occurred_at
 */
ActivityWithMember.prototype['occurred_at'] = undefined;

/**
 * Key-value pairs to provide contextual metadata about an activity.
 * @member {Object} properties
 */
ActivityWithMember.prototype['properties'] = undefined;

/**
 * A title for the activity; displayed in the timeline
 * @member {String} title
 */
ActivityWithMember.prototype['title'] = undefined;

/**
 * A custom weight to be used in filters and reports; defaults to 1.
 * @member {String} weight
 */
ActivityWithMember.prototype['weight'] = undefined;

/**
 * @member {module:model/Member} member
 */
ActivityWithMember.prototype['member'] = undefined;


// Implement Activity interface:
/**
 * The type of activity - what action was done by the member. This is a legacy field, use activity_type_key instead.
 * @member {String} activity_type
 */
Activity.prototype['activity_type'] = undefined;
/**
 * The key for a custom activity type for the workspace. Will create a new activity type if it does not exist.
 * @member {String} activity_type_key
 */
Activity.prototype['activity_type_key'] = undefined;
/**
 * A description of the activity; displayed in the timeline
 * @member {String} description
 */
Activity.prototype['description'] = undefined;
/**
 * Supply a key that must be unique or leave blank to have one generated.
 * @member {String} key
 */
Activity.prototype['key'] = undefined;
/**
 * A URL for the activity; displayed in the timeline
 * @member {String} link
 */
Activity.prototype['link'] = undefined;
/**
 * The text for the timeline link
 * @member {String} link_text
 */
Activity.prototype['link_text'] = undefined;
/**
 * The date and time the activity occurred; defaults to now
 * @member {String} occurred_at
 */
Activity.prototype['occurred_at'] = undefined;
/**
 * Key-value pairs to provide contextual metadata about an activity.
 * @member {Object} properties
 */
Activity.prototype['properties'] = undefined;
/**
 * A title for the activity; displayed in the timeline
 * @member {String} title
 */
Activity.prototype['title'] = undefined;
/**
 * A custom weight to be used in filters and reports; defaults to 1.
 * @member {String} weight
 */
Activity.prototype['weight'] = undefined;




export default ActivityWithMember;

