/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Organization model module.
 * @module model/Organization
 * @version v1
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * @alias module:model/Organization
     * @param crmUrl {String} A link to the organization profile in your CRM.
     * @param lifecycleStage {String} The current stage of the organization in the marketing or sales process.
     * @param source {String} The name of the CRM you use for tracking the organization.
     */
    constructor(crmUrl, lifecycleStage, source) { 
        
        Organization.initialize(this, crmUrl, lifecycleStage, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, crmUrl, lifecycleStage, source) { 
        obj['crm_url'] = crmUrl;
        obj['lifecycle_stage'] = lifecycleStage;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('crm_uid')) {
                obj['crm_uid'] = ApiClient.convertToType(data['crm_uid'], 'String');
            }
            if (data.hasOwnProperty('crm_url')) {
                obj['crm_url'] = ApiClient.convertToType(data['crm_url'], 'String');
            }
            if (data.hasOwnProperty('deal_closed_date')) {
                obj['deal_closed_date'] = ApiClient.convertToType(data['deal_closed_date'], 'String');
            }
            if (data.hasOwnProperty('lifecycle_stage')) {
                obj['lifecycle_stage'] = ApiClient.convertToType(data['lifecycle_stage'], 'String');
            }
            if (data.hasOwnProperty('owner_email')) {
                obj['owner_email'] = ApiClient.convertToType(data['owner_email'], 'String');
            }
            if (data.hasOwnProperty('owner_name')) {
                obj['owner_name'] = ApiClient.convertToType(data['owner_name'], 'String');
            }
            if (data.hasOwnProperty('price_plan')) {
                obj['price_plan'] = ApiClient.convertToType(data['price_plan'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['crm_uid'] && !(typeof data['crm_uid'] === 'string' || data['crm_uid'] instanceof String)) {
            throw new Error("Expected the field `crm_uid` to be a primitive type in the JSON string but got " + data['crm_uid']);
        }
        // ensure the json data is a string
        if (data['crm_url'] && !(typeof data['crm_url'] === 'string' || data['crm_url'] instanceof String)) {
            throw new Error("Expected the field `crm_url` to be a primitive type in the JSON string but got " + data['crm_url']);
        }
        // ensure the json data is a string
        if (data['deal_closed_date'] && !(typeof data['deal_closed_date'] === 'string' || data['deal_closed_date'] instanceof String)) {
            throw new Error("Expected the field `deal_closed_date` to be a primitive type in the JSON string but got " + data['deal_closed_date']);
        }
        // ensure the json data is a string
        if (data['lifecycle_stage'] && !(typeof data['lifecycle_stage'] === 'string' || data['lifecycle_stage'] instanceof String)) {
            throw new Error("Expected the field `lifecycle_stage` to be a primitive type in the JSON string but got " + data['lifecycle_stage']);
        }
        // ensure the json data is a string
        if (data['owner_email'] && !(typeof data['owner_email'] === 'string' || data['owner_email'] instanceof String)) {
            throw new Error("Expected the field `owner_email` to be a primitive type in the JSON string but got " + data['owner_email']);
        }
        // ensure the json data is a string
        if (data['owner_name'] && !(typeof data['owner_name'] === 'string' || data['owner_name'] instanceof String)) {
            throw new Error("Expected the field `owner_name` to be a primitive type in the JSON string but got " + data['owner_name']);
        }
        // ensure the json data is a string
        if (data['price_plan'] && !(typeof data['price_plan'] === 'string' || data['price_plan'] instanceof String)) {
            throw new Error("Expected the field `price_plan` to be a primitive type in the JSON string but got " + data['price_plan']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

Organization.RequiredProperties = ["crm_url", "lifecycle_stage", "source"];

/**
 * The unique identifier of the organization in your CRM.
 * @member {String} crm_uid
 */
Organization.prototype['crm_uid'] = undefined;

/**
 * A link to the organization profile in your CRM.
 * @member {String} crm_url
 */
Organization.prototype['crm_url'] = undefined;

/**
 * The date the organization became a customer.
 * @member {String} deal_closed_date
 */
Organization.prototype['deal_closed_date'] = undefined;

/**
 * The current stage of the organization in the marketing or sales process.
 * @member {String} lifecycle_stage
 */
Organization.prototype['lifecycle_stage'] = undefined;

/**
 * The email of the team member who is in charge of the organization.
 * @member {String} owner_email
 */
Organization.prototype['owner_email'] = undefined;

/**
 * The name of the team member who is in charge of the organization.
 * @member {String} owner_name
 */
Organization.prototype['owner_name'] = undefined;

/**
 * The pricing plan the organization is on.
 * @member {String} price_plan
 */
Organization.prototype['price_plan'] = undefined;

/**
 * The name of the CRM you use for tracking the organization.
 * @member {String} source
 */
Organization.prototype['source'] = undefined;






export default Organization;

