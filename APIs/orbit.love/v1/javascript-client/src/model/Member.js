/**
 * Orbit API
 * Please see the complete Orbit API documentation at [https://api.orbit.love/](https://api.orbit.love/).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Member model module.
 * @module model/Member
 * @version v1
 */
class Member {
    /**
     * Constructs a new <code>Member</code>.
     * @alias module:model/Member
     */
    constructor() { 
        
        Member.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Member</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Member} obj Optional instance to populate.
     * @return {module:model/Member} The populated <code>Member</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Member();

            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('devto')) {
                obj['devto'] = ApiClient.convertToType(data['devto'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('github')) {
                obj['github'] = ApiClient.convertToType(data['github'], 'String');
            }
            if (data.hasOwnProperty('linkedin')) {
                obj['linkedin'] = ApiClient.convertToType(data['linkedin'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pronouns')) {
                obj['pronouns'] = ApiClient.convertToType(data['pronouns'], 'String');
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = ApiClient.convertToType(data['shipping_address'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('tag_list')) {
                obj['tag_list'] = ApiClient.convertToType(data['tag_list'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
            if (data.hasOwnProperty('tags_to_add')) {
                obj['tags_to_add'] = ApiClient.convertToType(data['tags_to_add'], 'String');
            }
            if (data.hasOwnProperty('teammate')) {
                obj['teammate'] = ApiClient.convertToType(data['teammate'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('tshirt')) {
                obj['tshirt'] = ApiClient.convertToType(data['tshirt'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Member</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Member</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['birthday'] && !(typeof data['birthday'] === 'string' || data['birthday'] instanceof String)) {
            throw new Error("Expected the field `birthday` to be a primitive type in the JSON string but got " + data['birthday']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['devto'] && !(typeof data['devto'] === 'string' || data['devto'] instanceof String)) {
            throw new Error("Expected the field `devto` to be a primitive type in the JSON string but got " + data['devto']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['github'] && !(typeof data['github'] === 'string' || data['github'] instanceof String)) {
            throw new Error("Expected the field `github` to be a primitive type in the JSON string but got " + data['github']);
        }
        // ensure the json data is a string
        if (data['linkedin'] && !(typeof data['linkedin'] === 'string' || data['linkedin'] instanceof String)) {
            throw new Error("Expected the field `linkedin` to be a primitive type in the JSON string but got " + data['linkedin']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pronouns'] && !(typeof data['pronouns'] === 'string' || data['pronouns'] instanceof String)) {
            throw new Error("Expected the field `pronouns` to be a primitive type in the JSON string but got " + data['pronouns']);
        }
        // ensure the json data is a string
        if (data['shipping_address'] && !(typeof data['shipping_address'] === 'string' || data['shipping_address'] instanceof String)) {
            throw new Error("Expected the field `shipping_address` to be a primitive type in the JSON string but got " + data['shipping_address']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['tag_list'] && !(typeof data['tag_list'] === 'string' || data['tag_list'] instanceof String)) {
            throw new Error("Expected the field `tag_list` to be a primitive type in the JSON string but got " + data['tag_list']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['tags_to_add'] && !(typeof data['tags_to_add'] === 'string' || data['tags_to_add'] instanceof String)) {
            throw new Error("Expected the field `tags_to_add` to be a primitive type in the JSON string but got " + data['tags_to_add']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['tshirt'] && !(typeof data['tshirt'] === 'string' || data['tshirt'] instanceof String)) {
            throw new Error("Expected the field `tshirt` to be a primitive type in the JSON string but got " + data['tshirt']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {String} bio
 */
Member.prototype['bio'] = undefined;

/**
 * @member {String} birthday
 */
Member.prototype['birthday'] = undefined;

/**
 * @member {String} company
 */
Member.prototype['company'] = undefined;

/**
 * The member's DEV username
 * @member {String} devto
 */
Member.prototype['devto'] = undefined;

/**
 * The member's email
 * @member {String} email
 */
Member.prototype['email'] = undefined;

/**
 * The member's GitHub username
 * @member {String} github
 */
Member.prototype['github'] = undefined;

/**
 * The member's LinkedIn username, without the in/ or pub/
 * @member {String} linkedin
 */
Member.prototype['linkedin'] = undefined;

/**
 * @member {String} location
 */
Member.prototype['location'] = undefined;

/**
 * @member {String} name
 */
Member.prototype['name'] = undefined;

/**
 * @member {String} pronouns
 */
Member.prototype['pronouns'] = undefined;

/**
 * @member {String} shipping_address
 */
Member.prototype['shipping_address'] = undefined;

/**
 * @member {String} slug
 */
Member.prototype['slug'] = undefined;

/**
 * Deprecated: Please use the tags attribute instead
 * @member {String} tag_list
 */
Member.prototype['tag_list'] = undefined;

/**
 * Replaces all tags for the member; comma-separated string or array
 * @member {String} tags
 */
Member.prototype['tags'] = undefined;

/**
 * Adds tags to member; comma-separated string or array
 * @member {String} tags_to_add
 */
Member.prototype['tags_to_add'] = undefined;

/**
 * @member {Boolean} teammate
 */
Member.prototype['teammate'] = undefined;

/**
 * @member {String} title
 */
Member.prototype['title'] = undefined;

/**
 * @member {String} tshirt
 */
Member.prototype['tshirt'] = undefined;

/**
 * The member's Twitter username
 * @member {String} twitter
 */
Member.prototype['twitter'] = undefined;

/**
 * @member {String} url
 */
Member.prototype['url'] = undefined;






export default Member;

