/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStructuresApi_H
#define OAI_OAIStructuresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataset.h"
#include "OAISubstanceComposition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStructuresApi : public QObject {
    Q_OBJECT

public:
    OAIStructuresApi(const int timeOut = 0);
    ~OAIStructuresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  db QString [required]
    * @param[in]  uuid QString [required]
    * @param[in]  all bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void getSubstanceComposition(const QString &db, const QString &uuid, const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  uuid QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void getSubstanceStructures(const QString &db, const QString &uuid, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  term QString [required]
    * @param[in]  representation QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  b64search QString [optional]
    * @param[in]  casesens bool [optional]
    * @param[in]  bundle_uri QString [optional]
    * @param[in]  sameas QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void searchByIdentifier(const QString &db, const QString &term, const QString &representation, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &b64search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &casesens = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sameas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  b64search QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  threshold double [optional]
    * @param[in]  dataset_uri QString [optional]
    * @param[in]  filter_by_substance bool [optional]
    * @param[in]  bundle_uri QString [optional]
    * @param[in]  sameas QString [optional]
    * @param[in]  mol bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void searchBySimilarity(const QString &db, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &b64search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &threshold = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &dataset_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_by_substance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sameas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &mol = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  b64search QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  dataset_uri QString [optional]
    * @param[in]  filter_by_substance bool [optional]
    * @param[in]  bundle_uri QString [optional]
    * @param[in]  sameas QString [optional]
    * @param[in]  mol bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void searchBySmarts(const QString &db, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &b64search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &filter_by_substance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sameas = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &mol = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSubstanceCompositionCallback(OAIHttpRequestWorker *worker);
    void getSubstanceStructuresCallback(OAIHttpRequestWorker *worker);
    void searchByIdentifierCallback(OAIHttpRequestWorker *worker);
    void searchBySimilarityCallback(OAIHttpRequestWorker *worker);
    void searchBySmartsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSubstanceCompositionSignal(OAISubstanceComposition summary);
    void getSubstanceStructuresSignal(OAIDataset summary);
    void searchByIdentifierSignal(OAIDataset summary);
    void searchBySimilaritySignal(OAIDataset summary);
    void searchBySmartsSignal(OAIDataset summary);


    void getSubstanceCompositionSignalFull(OAIHttpRequestWorker *worker, OAISubstanceComposition summary);
    void getSubstanceStructuresSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void searchByIdentifierSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void searchBySimilaritySignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);
    void searchBySmartsSignalFull(OAIHttpRequestWorker *worker, OAIDataset summary);

    Q_DECL_DEPRECATED_X("Use getSubstanceCompositionSignalError() instead")
    void getSubstanceCompositionSignalE(OAISubstanceComposition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceCompositionSignalError(OAISubstanceComposition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStructuresSignalError() instead")
    void getSubstanceStructuresSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStructuresSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchByIdentifierSignalError() instead")
    void searchByIdentifierSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchByIdentifierSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchBySimilaritySignalError() instead")
    void searchBySimilaritySignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBySimilaritySignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchBySmartsSignalError() instead")
    void searchBySmartsSignalE(OAIDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBySmartsSignalError(OAIDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSubstanceCompositionSignalErrorFull() instead")
    void getSubstanceCompositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceCompositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStructuresSignalErrorFull() instead")
    void getSubstanceStructuresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStructuresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchByIdentifierSignalErrorFull() instead")
    void searchByIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchByIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchBySimilaritySignalErrorFull() instead")
    void searchBySimilaritySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBySimilaritySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchBySmartsSignalErrorFull() instead")
    void searchBySmartsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchBySmartsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
