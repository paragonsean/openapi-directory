/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvestigation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvestigation::OAIInvestigation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvestigation::OAIInvestigation() {
    this->initializeModel();
}

OAIInvestigation::~OAIInvestigation() {}

void OAIInvestigation::initializeModel() {

    m__child_documents__isSet = false;
    m__child_documents__isValid = false;

    m_assay_isSet = false;
    m_assay_isValid = false;

    m_document_uuid_isSet = false;
    m_document_uuid_isValid = false;

    m_effectendpoint_isSet = false;
    m_effectendpoint_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_endpointcategory_isSet = false;
    m_endpointcategory_isValid = false;

    m_err_isSet = false;
    m_err_isValid = false;

    m_err_qualifier_isSet = false;
    m_err_qualifier_isValid = false;

    m_guidance_isSet = false;
    m_guidance_isValid = false;

    m_investigation_isSet = false;
    m_investigation_isValid = false;

    m_lo_qualifier_isSet = false;
    m_lo_qualifier_isValid = false;

    m_lo_value_isSet = false;
    m_lo_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_publicname_isSet = false;
    m_publicname_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_owner_isSet = false;
    m_reference_owner_isValid = false;

    m_reference_year_isSet = false;
    m_reference_year_isValid = false;

    m_resulttype_isSet = false;
    m_resulttype_isValid = false;

    m_s_uuid_isSet = false;
    m_s_uuid_isValid = false;

    m_study_result_type_isSet = false;
    m_study_result_type_isValid = false;

    m_substance_type_isSet = false;
    m_substance_type_isValid = false;

    m_text_value_isSet = false;
    m_text_value_isValid = false;

    m_topcategory_isSet = false;
    m_topcategory_isValid = false;

    m_type_s_isSet = false;
    m_type_s_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_up_qualifier_isSet = false;
    m_up_qualifier_isValid = false;

    m_up_value_isSet = false;
    m_up_value_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIInvestigation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvestigation::fromJsonObject(QJsonObject json) {

    m__child_documents__isValid = ::OpenAPI::fromJsonValue(m__child_documents_, json[QString("_childDocuments_")]);
    m__child_documents__isSet = !json[QString("_childDocuments_")].isNull() && m__child_documents__isValid;

    m_assay_isValid = ::OpenAPI::fromJsonValue(m_assay, json[QString("assay")]);
    m_assay_isSet = !json[QString("assay")].isNull() && m_assay_isValid;

    m_document_uuid_isValid = ::OpenAPI::fromJsonValue(m_document_uuid, json[QString("document_uuid")]);
    m_document_uuid_isSet = !json[QString("document_uuid")].isNull() && m_document_uuid_isValid;

    m_effectendpoint_isValid = ::OpenAPI::fromJsonValue(m_effectendpoint, json[QString("effectendpoint")]);
    m_effectendpoint_isSet = !json[QString("effectendpoint")].isNull() && m_effectendpoint_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_endpointcategory_isValid = ::OpenAPI::fromJsonValue(m_endpointcategory, json[QString("endpointcategory")]);
    m_endpointcategory_isSet = !json[QString("endpointcategory")].isNull() && m_endpointcategory_isValid;

    m_err_isValid = ::OpenAPI::fromJsonValue(m_err, json[QString("err")]);
    m_err_isSet = !json[QString("err")].isNull() && m_err_isValid;

    m_err_qualifier_isValid = ::OpenAPI::fromJsonValue(m_err_qualifier, json[QString("errQualifier")]);
    m_err_qualifier_isSet = !json[QString("errQualifier")].isNull() && m_err_qualifier_isValid;

    m_guidance_isValid = ::OpenAPI::fromJsonValue(m_guidance, json[QString("guidance")]);
    m_guidance_isSet = !json[QString("guidance")].isNull() && m_guidance_isValid;

    m_investigation_isValid = ::OpenAPI::fromJsonValue(m_investigation, json[QString("investigation")]);
    m_investigation_isSet = !json[QString("investigation")].isNull() && m_investigation_isValid;

    m_lo_qualifier_isValid = ::OpenAPI::fromJsonValue(m_lo_qualifier, json[QString("loQualifier")]);
    m_lo_qualifier_isSet = !json[QString("loQualifier")].isNull() && m_lo_qualifier_isValid;

    m_lo_value_isValid = ::OpenAPI::fromJsonValue(m_lo_value, json[QString("loValue")]);
    m_lo_value_isSet = !json[QString("loValue")].isNull() && m_lo_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("owner_name")]);
    m_owner_name_isSet = !json[QString("owner_name")].isNull() && m_owner_name_isValid;

    m_publicname_isValid = ::OpenAPI::fromJsonValue(m_publicname, json[QString("publicname")]);
    m_publicname_isSet = !json[QString("publicname")].isNull() && m_publicname_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_owner_isValid = ::OpenAPI::fromJsonValue(m_reference_owner, json[QString("reference_owner")]);
    m_reference_owner_isSet = !json[QString("reference_owner")].isNull() && m_reference_owner_isValid;

    m_reference_year_isValid = ::OpenAPI::fromJsonValue(m_reference_year, json[QString("reference_year")]);
    m_reference_year_isSet = !json[QString("reference_year")].isNull() && m_reference_year_isValid;

    m_resulttype_isValid = ::OpenAPI::fromJsonValue(m_resulttype, json[QString("resulttype")]);
    m_resulttype_isSet = !json[QString("resulttype")].isNull() && m_resulttype_isValid;

    m_s_uuid_isValid = ::OpenAPI::fromJsonValue(m_s_uuid, json[QString("s_uuid")]);
    m_s_uuid_isSet = !json[QString("s_uuid")].isNull() && m_s_uuid_isValid;

    m_study_result_type_isValid = ::OpenAPI::fromJsonValue(m_study_result_type, json[QString("studyResultType")]);
    m_study_result_type_isSet = !json[QString("studyResultType")].isNull() && m_study_result_type_isValid;

    m_substance_type_isValid = ::OpenAPI::fromJsonValue(m_substance_type, json[QString("substanceType")]);
    m_substance_type_isSet = !json[QString("substanceType")].isNull() && m_substance_type_isValid;

    m_text_value_isValid = ::OpenAPI::fromJsonValue(m_text_value, json[QString("textValue")]);
    m_text_value_isSet = !json[QString("textValue")].isNull() && m_text_value_isValid;

    m_topcategory_isValid = ::OpenAPI::fromJsonValue(m_topcategory, json[QString("topcategory")]);
    m_topcategory_isSet = !json[QString("topcategory")].isNull() && m_topcategory_isValid;

    m_type_s_isValid = ::OpenAPI::fromJsonValue(m_type_s, json[QString("type_s")]);
    m_type_s_isSet = !json[QString("type_s")].isNull() && m_type_s_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_up_qualifier_isValid = ::OpenAPI::fromJsonValue(m_up_qualifier, json[QString("upQualifier")]);
    m_up_qualifier_isSet = !json[QString("upQualifier")].isNull() && m_up_qualifier_isValid;

    m_up_value_isValid = ::OpenAPI::fromJsonValue(m_up_value, json[QString("upValue")]);
    m_up_value_isSet = !json[QString("upValue")].isNull() && m_up_value_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIInvestigation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvestigation::asJsonObject() const {
    QJsonObject obj;
    if (m__child_documents__isSet) {
        obj.insert(QString("_childDocuments_"), ::OpenAPI::toJsonValue(m__child_documents_));
    }
    if (m_assay_isSet) {
        obj.insert(QString("assay"), ::OpenAPI::toJsonValue(m_assay));
    }
    if (m_document_uuid_isSet) {
        obj.insert(QString("document_uuid"), ::OpenAPI::toJsonValue(m_document_uuid));
    }
    if (m_effectendpoint_isSet) {
        obj.insert(QString("effectendpoint"), ::OpenAPI::toJsonValue(m_effectendpoint));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_endpointcategory_isSet) {
        obj.insert(QString("endpointcategory"), ::OpenAPI::toJsonValue(m_endpointcategory));
    }
    if (m_err_isSet) {
        obj.insert(QString("err"), ::OpenAPI::toJsonValue(m_err));
    }
    if (m_err_qualifier_isSet) {
        obj.insert(QString("errQualifier"), ::OpenAPI::toJsonValue(m_err_qualifier));
    }
    if (m_guidance_isSet) {
        obj.insert(QString("guidance"), ::OpenAPI::toJsonValue(m_guidance));
    }
    if (m_investigation_isSet) {
        obj.insert(QString("investigation"), ::OpenAPI::toJsonValue(m_investigation));
    }
    if (m_lo_qualifier_isSet) {
        obj.insert(QString("loQualifier"), ::OpenAPI::toJsonValue(m_lo_qualifier));
    }
    if (m_lo_value_isSet) {
        obj.insert(QString("loValue"), ::OpenAPI::toJsonValue(m_lo_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("owner_name"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_publicname_isSet) {
        obj.insert(QString("publicname"), ::OpenAPI::toJsonValue(m_publicname));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_owner_isSet) {
        obj.insert(QString("reference_owner"), ::OpenAPI::toJsonValue(m_reference_owner));
    }
    if (m_reference_year_isSet) {
        obj.insert(QString("reference_year"), ::OpenAPI::toJsonValue(m_reference_year));
    }
    if (m_resulttype_isSet) {
        obj.insert(QString("resulttype"), ::OpenAPI::toJsonValue(m_resulttype));
    }
    if (m_s_uuid_isSet) {
        obj.insert(QString("s_uuid"), ::OpenAPI::toJsonValue(m_s_uuid));
    }
    if (m_study_result_type_isSet) {
        obj.insert(QString("studyResultType"), ::OpenAPI::toJsonValue(m_study_result_type));
    }
    if (m_substance_type_isSet) {
        obj.insert(QString("substanceType"), ::OpenAPI::toJsonValue(m_substance_type));
    }
    if (m_text_value_isSet) {
        obj.insert(QString("textValue"), ::OpenAPI::toJsonValue(m_text_value));
    }
    if (m_topcategory_isSet) {
        obj.insert(QString("topcategory"), ::OpenAPI::toJsonValue(m_topcategory));
    }
    if (m_type_s_isSet) {
        obj.insert(QString("type_s"), ::OpenAPI::toJsonValue(m_type_s));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_up_qualifier_isSet) {
        obj.insert(QString("upQualifier"), ::OpenAPI::toJsonValue(m_up_qualifier));
    }
    if (m_up_value_isSet) {
        obj.insert(QString("upValue"), ::OpenAPI::toJsonValue(m_up_value));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

OAIObject OAIInvestigation::getChildDocuments() const {
    return m__child_documents_;
}
void OAIInvestigation::setChildDocuments(const OAIObject &_child_documents_) {
    m__child_documents_ = _child_documents_;
    m__child_documents__isSet = true;
}

bool OAIInvestigation::is__child_documents__Set() const{
    return m__child_documents__isSet;
}

bool OAIInvestigation::is__child_documents__Valid() const{
    return m__child_documents__isValid;
}

QString OAIInvestigation::getAssay() const {
    return m_assay;
}
void OAIInvestigation::setAssay(const QString &assay) {
    m_assay = assay;
    m_assay_isSet = true;
}

bool OAIInvestigation::is_assay_Set() const{
    return m_assay_isSet;
}

bool OAIInvestigation::is_assay_Valid() const{
    return m_assay_isValid;
}

QString OAIInvestigation::getDocumentUuid() const {
    return m_document_uuid;
}
void OAIInvestigation::setDocumentUuid(const QString &document_uuid) {
    m_document_uuid = document_uuid;
    m_document_uuid_isSet = true;
}

bool OAIInvestigation::is_document_uuid_Set() const{
    return m_document_uuid_isSet;
}

bool OAIInvestigation::is_document_uuid_Valid() const{
    return m_document_uuid_isValid;
}

QString OAIInvestigation::getEffectendpoint() const {
    return m_effectendpoint;
}
void OAIInvestigation::setEffectendpoint(const QString &effectendpoint) {
    m_effectendpoint = effectendpoint;
    m_effectendpoint_isSet = true;
}

bool OAIInvestigation::is_effectendpoint_Set() const{
    return m_effectendpoint_isSet;
}

bool OAIInvestigation::is_effectendpoint_Valid() const{
    return m_effectendpoint_isValid;
}

QString OAIInvestigation::getEndpoint() const {
    return m_endpoint;
}
void OAIInvestigation::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIInvestigation::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIInvestigation::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIInvestigation::getEndpointcategory() const {
    return m_endpointcategory;
}
void OAIInvestigation::setEndpointcategory(const QString &endpointcategory) {
    m_endpointcategory = endpointcategory;
    m_endpointcategory_isSet = true;
}

bool OAIInvestigation::is_endpointcategory_Set() const{
    return m_endpointcategory_isSet;
}

bool OAIInvestigation::is_endpointcategory_Valid() const{
    return m_endpointcategory_isValid;
}

double OAIInvestigation::getErr() const {
    return m_err;
}
void OAIInvestigation::setErr(const double &err) {
    m_err = err;
    m_err_isSet = true;
}

bool OAIInvestigation::is_err_Set() const{
    return m_err_isSet;
}

bool OAIInvestigation::is_err_Valid() const{
    return m_err_isValid;
}

QString OAIInvestigation::getErrQualifier() const {
    return m_err_qualifier;
}
void OAIInvestigation::setErrQualifier(const QString &err_qualifier) {
    m_err_qualifier = err_qualifier;
    m_err_qualifier_isSet = true;
}

bool OAIInvestigation::is_err_qualifier_Set() const{
    return m_err_qualifier_isSet;
}

bool OAIInvestigation::is_err_qualifier_Valid() const{
    return m_err_qualifier_isValid;
}

QString OAIInvestigation::getGuidance() const {
    return m_guidance;
}
void OAIInvestigation::setGuidance(const QString &guidance) {
    m_guidance = guidance;
    m_guidance_isSet = true;
}

bool OAIInvestigation::is_guidance_Set() const{
    return m_guidance_isSet;
}

bool OAIInvestigation::is_guidance_Valid() const{
    return m_guidance_isValid;
}

QString OAIInvestigation::getInvestigation() const {
    return m_investigation;
}
void OAIInvestigation::setInvestigation(const QString &investigation) {
    m_investigation = investigation;
    m_investigation_isSet = true;
}

bool OAIInvestigation::is_investigation_Set() const{
    return m_investigation_isSet;
}

bool OAIInvestigation::is_investigation_Valid() const{
    return m_investigation_isValid;
}

QString OAIInvestigation::getLoQualifier() const {
    return m_lo_qualifier;
}
void OAIInvestigation::setLoQualifier(const QString &lo_qualifier) {
    m_lo_qualifier = lo_qualifier;
    m_lo_qualifier_isSet = true;
}

bool OAIInvestigation::is_lo_qualifier_Set() const{
    return m_lo_qualifier_isSet;
}

bool OAIInvestigation::is_lo_qualifier_Valid() const{
    return m_lo_qualifier_isValid;
}

double OAIInvestigation::getLoValue() const {
    return m_lo_value;
}
void OAIInvestigation::setLoValue(const double &lo_value) {
    m_lo_value = lo_value;
    m_lo_value_isSet = true;
}

bool OAIInvestigation::is_lo_value_Set() const{
    return m_lo_value_isSet;
}

bool OAIInvestigation::is_lo_value_Valid() const{
    return m_lo_value_isValid;
}

QString OAIInvestigation::getName() const {
    return m_name;
}
void OAIInvestigation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvestigation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvestigation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInvestigation::getOwnerName() const {
    return m_owner_name;
}
void OAIInvestigation::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIInvestigation::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIInvestigation::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIInvestigation::getPublicname() const {
    return m_publicname;
}
void OAIInvestigation::setPublicname(const QString &publicname) {
    m_publicname = publicname;
    m_publicname_isSet = true;
}

bool OAIInvestigation::is_publicname_Set() const{
    return m_publicname_isSet;
}

bool OAIInvestigation::is_publicname_Valid() const{
    return m_publicname_isValid;
}

QString OAIInvestigation::getReference() const {
    return m_reference;
}
void OAIInvestigation::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIInvestigation::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIInvestigation::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIInvestigation::getReferenceOwner() const {
    return m_reference_owner;
}
void OAIInvestigation::setReferenceOwner(const QString &reference_owner) {
    m_reference_owner = reference_owner;
    m_reference_owner_isSet = true;
}

bool OAIInvestigation::is_reference_owner_Set() const{
    return m_reference_owner_isSet;
}

bool OAIInvestigation::is_reference_owner_Valid() const{
    return m_reference_owner_isValid;
}

QString OAIInvestigation::getReferenceYear() const {
    return m_reference_year;
}
void OAIInvestigation::setReferenceYear(const QString &reference_year) {
    m_reference_year = reference_year;
    m_reference_year_isSet = true;
}

bool OAIInvestigation::is_reference_year_Set() const{
    return m_reference_year_isSet;
}

bool OAIInvestigation::is_reference_year_Valid() const{
    return m_reference_year_isValid;
}

QString OAIInvestigation::getResulttype() const {
    return m_resulttype;
}
void OAIInvestigation::setResulttype(const QString &resulttype) {
    m_resulttype = resulttype;
    m_resulttype_isSet = true;
}

bool OAIInvestigation::is_resulttype_Set() const{
    return m_resulttype_isSet;
}

bool OAIInvestigation::is_resulttype_Valid() const{
    return m_resulttype_isValid;
}

QString OAIInvestigation::getSUuid() const {
    return m_s_uuid;
}
void OAIInvestigation::setSUuid(const QString &s_uuid) {
    m_s_uuid = s_uuid;
    m_s_uuid_isSet = true;
}

bool OAIInvestigation::is_s_uuid_Set() const{
    return m_s_uuid_isSet;
}

bool OAIInvestigation::is_s_uuid_Valid() const{
    return m_s_uuid_isValid;
}

QString OAIInvestigation::getStudyResultType() const {
    return m_study_result_type;
}
void OAIInvestigation::setStudyResultType(const QString &study_result_type) {
    m_study_result_type = study_result_type;
    m_study_result_type_isSet = true;
}

bool OAIInvestigation::is_study_result_type_Set() const{
    return m_study_result_type_isSet;
}

bool OAIInvestigation::is_study_result_type_Valid() const{
    return m_study_result_type_isValid;
}

QString OAIInvestigation::getSubstanceType() const {
    return m_substance_type;
}
void OAIInvestigation::setSubstanceType(const QString &substance_type) {
    m_substance_type = substance_type;
    m_substance_type_isSet = true;
}

bool OAIInvestigation::is_substance_type_Set() const{
    return m_substance_type_isSet;
}

bool OAIInvestigation::is_substance_type_Valid() const{
    return m_substance_type_isValid;
}

QString OAIInvestigation::getTextValue() const {
    return m_text_value;
}
void OAIInvestigation::setTextValue(const QString &text_value) {
    m_text_value = text_value;
    m_text_value_isSet = true;
}

bool OAIInvestigation::is_text_value_Set() const{
    return m_text_value_isSet;
}

bool OAIInvestigation::is_text_value_Valid() const{
    return m_text_value_isValid;
}

QString OAIInvestigation::getTopcategory() const {
    return m_topcategory;
}
void OAIInvestigation::setTopcategory(const QString &topcategory) {
    m_topcategory = topcategory;
    m_topcategory_isSet = true;
}

bool OAIInvestigation::is_topcategory_Set() const{
    return m_topcategory_isSet;
}

bool OAIInvestigation::is_topcategory_Valid() const{
    return m_topcategory_isValid;
}

QString OAIInvestigation::getTypeS() const {
    return m_type_s;
}
void OAIInvestigation::setTypeS(const QString &type_s) {
    m_type_s = type_s;
    m_type_s_isSet = true;
}

bool OAIInvestigation::is_type_s_Set() const{
    return m_type_s_isSet;
}

bool OAIInvestigation::is_type_s_Valid() const{
    return m_type_s_isValid;
}

QString OAIInvestigation::getUnit() const {
    return m_unit;
}
void OAIInvestigation::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIInvestigation::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIInvestigation::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAIInvestigation::getUpQualifier() const {
    return m_up_qualifier;
}
void OAIInvestigation::setUpQualifier(const QString &up_qualifier) {
    m_up_qualifier = up_qualifier;
    m_up_qualifier_isSet = true;
}

bool OAIInvestigation::is_up_qualifier_Set() const{
    return m_up_qualifier_isSet;
}

bool OAIInvestigation::is_up_qualifier_Valid() const{
    return m_up_qualifier_isValid;
}

double OAIInvestigation::getUpValue() const {
    return m_up_value;
}
void OAIInvestigation::setUpValue(const double &up_value) {
    m_up_value = up_value;
    m_up_value_isSet = true;
}

bool OAIInvestigation::is_up_value_Set() const{
    return m_up_value_isSet;
}

bool OAIInvestigation::is_up_value_Valid() const{
    return m_up_value_isValid;
}

QString OAIInvestigation::getUpdated() const {
    return m_updated;
}
void OAIInvestigation::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIInvestigation::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIInvestigation::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIInvestigation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__child_documents__isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effectendpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpointcategory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_err_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_err_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guidance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_investigation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lo_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publicname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resulttype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topcategory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_s_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvestigation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
