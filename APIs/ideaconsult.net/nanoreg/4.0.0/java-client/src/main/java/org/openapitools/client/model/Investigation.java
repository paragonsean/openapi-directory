/*
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Investigation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:03:53.357345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Investigation {
  public static final String SERIALIZED_NAME_CHILD_DOCUMENTS = "_childDocuments_";
  @SerializedName(SERIALIZED_NAME_CHILD_DOCUMENTS)
  private Object childDocuments;

  public static final String SERIALIZED_NAME_ASSAY = "assay";
  @SerializedName(SERIALIZED_NAME_ASSAY)
  private String assay;

  public static final String SERIALIZED_NAME_DOCUMENT_UUID = "document_uuid";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_UUID)
  private String documentUuid;

  public static final String SERIALIZED_NAME_EFFECTENDPOINT = "effectendpoint";
  @SerializedName(SERIALIZED_NAME_EFFECTENDPOINT)
  private String effectendpoint;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ENDPOINTCATEGORY = "endpointcategory";
  @SerializedName(SERIALIZED_NAME_ENDPOINTCATEGORY)
  private String endpointcategory;

  public static final String SERIALIZED_NAME_ERR = "err";
  @SerializedName(SERIALIZED_NAME_ERR)
  private BigDecimal err;

  public static final String SERIALIZED_NAME_ERR_QUALIFIER = "errQualifier";
  @SerializedName(SERIALIZED_NAME_ERR_QUALIFIER)
  private String errQualifier;

  public static final String SERIALIZED_NAME_GUIDANCE = "guidance";
  @SerializedName(SERIALIZED_NAME_GUIDANCE)
  private String guidance;

  public static final String SERIALIZED_NAME_INVESTIGATION = "investigation";
  @SerializedName(SERIALIZED_NAME_INVESTIGATION)
  private String investigation;

  public static final String SERIALIZED_NAME_LO_QUALIFIER = "loQualifier";
  @SerializedName(SERIALIZED_NAME_LO_QUALIFIER)
  private String loQualifier;

  public static final String SERIALIZED_NAME_LO_VALUE = "loValue";
  @SerializedName(SERIALIZED_NAME_LO_VALUE)
  private BigDecimal loValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_NAME = "owner_name";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_PUBLICNAME = "publicname";
  @SerializedName(SERIALIZED_NAME_PUBLICNAME)
  private String publicname;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_REFERENCE_OWNER = "reference_owner";
  @SerializedName(SERIALIZED_NAME_REFERENCE_OWNER)
  private String referenceOwner;

  public static final String SERIALIZED_NAME_REFERENCE_YEAR = "reference_year";
  @SerializedName(SERIALIZED_NAME_REFERENCE_YEAR)
  private String referenceYear;

  public static final String SERIALIZED_NAME_RESULTTYPE = "resulttype";
  @SerializedName(SERIALIZED_NAME_RESULTTYPE)
  private String resulttype;

  public static final String SERIALIZED_NAME_S_UUID = "s_uuid";
  @SerializedName(SERIALIZED_NAME_S_UUID)
  private String sUuid;

  public static final String SERIALIZED_NAME_STUDY_RESULT_TYPE = "studyResultType";
  @SerializedName(SERIALIZED_NAME_STUDY_RESULT_TYPE)
  private String studyResultType;

  public static final String SERIALIZED_NAME_SUBSTANCE_TYPE = "substanceType";
  @SerializedName(SERIALIZED_NAME_SUBSTANCE_TYPE)
  private String substanceType;

  public static final String SERIALIZED_NAME_TEXT_VALUE = "textValue";
  @SerializedName(SERIALIZED_NAME_TEXT_VALUE)
  private String textValue;

  public static final String SERIALIZED_NAME_TOPCATEGORY = "topcategory";
  @SerializedName(SERIALIZED_NAME_TOPCATEGORY)
  private String topcategory;

  public static final String SERIALIZED_NAME_TYPE_S = "type_s";
  @SerializedName(SERIALIZED_NAME_TYPE_S)
  private String typeS;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_UP_QUALIFIER = "upQualifier";
  @SerializedName(SERIALIZED_NAME_UP_QUALIFIER)
  private String upQualifier;

  public static final String SERIALIZED_NAME_UP_VALUE = "upValue";
  @SerializedName(SERIALIZED_NAME_UP_VALUE)
  private BigDecimal upValue;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public Investigation() {
  }

  public Investigation childDocuments(Object childDocuments) {
    this.childDocuments = childDocuments;
    return this;
  }

  /**
   * Get childDocuments
   * @return childDocuments
   */
  @javax.annotation.Nullable
  public Object getChildDocuments() {
    return childDocuments;
  }

  public void setChildDocuments(Object childDocuments) {
    this.childDocuments = childDocuments;
  }


  public Investigation assay(String assay) {
    this.assay = assay;
    return this;
  }

  /**
   * Get assay
   * @return assay
   */
  @javax.annotation.Nullable
  public String getAssay() {
    return assay;
  }

  public void setAssay(String assay) {
    this.assay = assay;
  }


  public Investigation documentUuid(String documentUuid) {
    this.documentUuid = documentUuid;
    return this;
  }

  /**
   * Get documentUuid
   * @return documentUuid
   */
  @javax.annotation.Nullable
  public String getDocumentUuid() {
    return documentUuid;
  }

  public void setDocumentUuid(String documentUuid) {
    this.documentUuid = documentUuid;
  }


  public Investigation effectendpoint(String effectendpoint) {
    this.effectendpoint = effectendpoint;
    return this;
  }

  /**
   * Get effectendpoint
   * @return effectendpoint
   */
  @javax.annotation.Nullable
  public String getEffectendpoint() {
    return effectendpoint;
  }

  public void setEffectendpoint(String effectendpoint) {
    this.effectendpoint = effectendpoint;
  }


  public Investigation endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public Investigation endpointcategory(String endpointcategory) {
    this.endpointcategory = endpointcategory;
    return this;
  }

  /**
   * Get endpointcategory
   * @return endpointcategory
   */
  @javax.annotation.Nullable
  public String getEndpointcategory() {
    return endpointcategory;
  }

  public void setEndpointcategory(String endpointcategory) {
    this.endpointcategory = endpointcategory;
  }


  public Investigation err(BigDecimal err) {
    this.err = err;
    return this;
  }

  /**
   * Get err
   * @return err
   */
  @javax.annotation.Nullable
  public BigDecimal getErr() {
    return err;
  }

  public void setErr(BigDecimal err) {
    this.err = err;
  }


  public Investigation errQualifier(String errQualifier) {
    this.errQualifier = errQualifier;
    return this;
  }

  /**
   * Get errQualifier
   * @return errQualifier
   */
  @javax.annotation.Nullable
  public String getErrQualifier() {
    return errQualifier;
  }

  public void setErrQualifier(String errQualifier) {
    this.errQualifier = errQualifier;
  }


  public Investigation guidance(String guidance) {
    this.guidance = guidance;
    return this;
  }

  /**
   * Get guidance
   * @return guidance
   */
  @javax.annotation.Nullable
  public String getGuidance() {
    return guidance;
  }

  public void setGuidance(String guidance) {
    this.guidance = guidance;
  }


  public Investigation investigation(String investigation) {
    this.investigation = investigation;
    return this;
  }

  /**
   * Get investigation
   * @return investigation
   */
  @javax.annotation.Nullable
  public String getInvestigation() {
    return investigation;
  }

  public void setInvestigation(String investigation) {
    this.investigation = investigation;
  }


  public Investigation loQualifier(String loQualifier) {
    this.loQualifier = loQualifier;
    return this;
  }

  /**
   * Get loQualifier
   * @return loQualifier
   */
  @javax.annotation.Nullable
  public String getLoQualifier() {
    return loQualifier;
  }

  public void setLoQualifier(String loQualifier) {
    this.loQualifier = loQualifier;
  }


  public Investigation loValue(BigDecimal loValue) {
    this.loValue = loValue;
    return this;
  }

  /**
   * Get loValue
   * @return loValue
   */
  @javax.annotation.Nullable
  public BigDecimal getLoValue() {
    return loValue;
  }

  public void setLoValue(BigDecimal loValue) {
    this.loValue = loValue;
  }


  public Investigation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Investigation ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public Investigation publicname(String publicname) {
    this.publicname = publicname;
    return this;
  }

  /**
   * Get publicname
   * @return publicname
   */
  @javax.annotation.Nullable
  public String getPublicname() {
    return publicname;
  }

  public void setPublicname(String publicname) {
    this.publicname = publicname;
  }


  public Investigation reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public Investigation referenceOwner(String referenceOwner) {
    this.referenceOwner = referenceOwner;
    return this;
  }

  /**
   * Get referenceOwner
   * @return referenceOwner
   */
  @javax.annotation.Nullable
  public String getReferenceOwner() {
    return referenceOwner;
  }

  public void setReferenceOwner(String referenceOwner) {
    this.referenceOwner = referenceOwner;
  }


  public Investigation referenceYear(String referenceYear) {
    this.referenceYear = referenceYear;
    return this;
  }

  /**
   * Get referenceYear
   * @return referenceYear
   */
  @javax.annotation.Nullable
  public String getReferenceYear() {
    return referenceYear;
  }

  public void setReferenceYear(String referenceYear) {
    this.referenceYear = referenceYear;
  }


  public Investigation resulttype(String resulttype) {
    this.resulttype = resulttype;
    return this;
  }

  /**
   * Get resulttype
   * @return resulttype
   */
  @javax.annotation.Nullable
  public String getResulttype() {
    return resulttype;
  }

  public void setResulttype(String resulttype) {
    this.resulttype = resulttype;
  }


  public Investigation sUuid(String sUuid) {
    this.sUuid = sUuid;
    return this;
  }

  /**
   * Get sUuid
   * @return sUuid
   */
  @javax.annotation.Nullable
  public String getsUuid() {
    return sUuid;
  }

  public void setsUuid(String sUuid) {
    this.sUuid = sUuid;
  }


  public Investigation studyResultType(String studyResultType) {
    this.studyResultType = studyResultType;
    return this;
  }

  /**
   * Get studyResultType
   * @return studyResultType
   */
  @javax.annotation.Nullable
  public String getStudyResultType() {
    return studyResultType;
  }

  public void setStudyResultType(String studyResultType) {
    this.studyResultType = studyResultType;
  }


  public Investigation substanceType(String substanceType) {
    this.substanceType = substanceType;
    return this;
  }

  /**
   * Get substanceType
   * @return substanceType
   */
  @javax.annotation.Nullable
  public String getSubstanceType() {
    return substanceType;
  }

  public void setSubstanceType(String substanceType) {
    this.substanceType = substanceType;
  }


  public Investigation textValue(String textValue) {
    this.textValue = textValue;
    return this;
  }

  /**
   * Get textValue
   * @return textValue
   */
  @javax.annotation.Nullable
  public String getTextValue() {
    return textValue;
  }

  public void setTextValue(String textValue) {
    this.textValue = textValue;
  }


  public Investigation topcategory(String topcategory) {
    this.topcategory = topcategory;
    return this;
  }

  /**
   * Get topcategory
   * @return topcategory
   */
  @javax.annotation.Nullable
  public String getTopcategory() {
    return topcategory;
  }

  public void setTopcategory(String topcategory) {
    this.topcategory = topcategory;
  }


  public Investigation typeS(String typeS) {
    this.typeS = typeS;
    return this;
  }

  /**
   * Get typeS
   * @return typeS
   */
  @javax.annotation.Nullable
  public String getTypeS() {
    return typeS;
  }

  public void setTypeS(String typeS) {
    this.typeS = typeS;
  }


  public Investigation unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public Investigation upQualifier(String upQualifier) {
    this.upQualifier = upQualifier;
    return this;
  }

  /**
   * Get upQualifier
   * @return upQualifier
   */
  @javax.annotation.Nullable
  public String getUpQualifier() {
    return upQualifier;
  }

  public void setUpQualifier(String upQualifier) {
    this.upQualifier = upQualifier;
  }


  public Investigation upValue(BigDecimal upValue) {
    this.upValue = upValue;
    return this;
  }

  /**
   * Get upValue
   * @return upValue
   */
  @javax.annotation.Nullable
  public BigDecimal getUpValue() {
    return upValue;
  }

  public void setUpValue(BigDecimal upValue) {
    this.upValue = upValue;
  }


  public Investigation updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Investigation investigation = (Investigation) o;
    return Objects.equals(this.childDocuments, investigation.childDocuments) &&
        Objects.equals(this.assay, investigation.assay) &&
        Objects.equals(this.documentUuid, investigation.documentUuid) &&
        Objects.equals(this.effectendpoint, investigation.effectendpoint) &&
        Objects.equals(this.endpoint, investigation.endpoint) &&
        Objects.equals(this.endpointcategory, investigation.endpointcategory) &&
        Objects.equals(this.err, investigation.err) &&
        Objects.equals(this.errQualifier, investigation.errQualifier) &&
        Objects.equals(this.guidance, investigation.guidance) &&
        Objects.equals(this.investigation, investigation.investigation) &&
        Objects.equals(this.loQualifier, investigation.loQualifier) &&
        Objects.equals(this.loValue, investigation.loValue) &&
        Objects.equals(this.name, investigation.name) &&
        Objects.equals(this.ownerName, investigation.ownerName) &&
        Objects.equals(this.publicname, investigation.publicname) &&
        Objects.equals(this.reference, investigation.reference) &&
        Objects.equals(this.referenceOwner, investigation.referenceOwner) &&
        Objects.equals(this.referenceYear, investigation.referenceYear) &&
        Objects.equals(this.resulttype, investigation.resulttype) &&
        Objects.equals(this.sUuid, investigation.sUuid) &&
        Objects.equals(this.studyResultType, investigation.studyResultType) &&
        Objects.equals(this.substanceType, investigation.substanceType) &&
        Objects.equals(this.textValue, investigation.textValue) &&
        Objects.equals(this.topcategory, investigation.topcategory) &&
        Objects.equals(this.typeS, investigation.typeS) &&
        Objects.equals(this.unit, investigation.unit) &&
        Objects.equals(this.upQualifier, investigation.upQualifier) &&
        Objects.equals(this.upValue, investigation.upValue) &&
        Objects.equals(this.updated, investigation.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childDocuments, assay, documentUuid, effectendpoint, endpoint, endpointcategory, err, errQualifier, guidance, investigation, loQualifier, loValue, name, ownerName, publicname, reference, referenceOwner, referenceYear, resulttype, sUuid, studyResultType, substanceType, textValue, topcategory, typeS, unit, upQualifier, upValue, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Investigation {\n");
    sb.append("    childDocuments: ").append(toIndentedString(childDocuments)).append("\n");
    sb.append("    assay: ").append(toIndentedString(assay)).append("\n");
    sb.append("    documentUuid: ").append(toIndentedString(documentUuid)).append("\n");
    sb.append("    effectendpoint: ").append(toIndentedString(effectendpoint)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    endpointcategory: ").append(toIndentedString(endpointcategory)).append("\n");
    sb.append("    err: ").append(toIndentedString(err)).append("\n");
    sb.append("    errQualifier: ").append(toIndentedString(errQualifier)).append("\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    investigation: ").append(toIndentedString(investigation)).append("\n");
    sb.append("    loQualifier: ").append(toIndentedString(loQualifier)).append("\n");
    sb.append("    loValue: ").append(toIndentedString(loValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    publicname: ").append(toIndentedString(publicname)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    referenceOwner: ").append(toIndentedString(referenceOwner)).append("\n");
    sb.append("    referenceYear: ").append(toIndentedString(referenceYear)).append("\n");
    sb.append("    resulttype: ").append(toIndentedString(resulttype)).append("\n");
    sb.append("    sUuid: ").append(toIndentedString(sUuid)).append("\n");
    sb.append("    studyResultType: ").append(toIndentedString(studyResultType)).append("\n");
    sb.append("    substanceType: ").append(toIndentedString(substanceType)).append("\n");
    sb.append("    textValue: ").append(toIndentedString(textValue)).append("\n");
    sb.append("    topcategory: ").append(toIndentedString(topcategory)).append("\n");
    sb.append("    typeS: ").append(toIndentedString(typeS)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    upQualifier: ").append(toIndentedString(upQualifier)).append("\n");
    sb.append("    upValue: ").append(toIndentedString(upValue)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_childDocuments_");
    openapiFields.add("assay");
    openapiFields.add("document_uuid");
    openapiFields.add("effectendpoint");
    openapiFields.add("endpoint");
    openapiFields.add("endpointcategory");
    openapiFields.add("err");
    openapiFields.add("errQualifier");
    openapiFields.add("guidance");
    openapiFields.add("investigation");
    openapiFields.add("loQualifier");
    openapiFields.add("loValue");
    openapiFields.add("name");
    openapiFields.add("owner_name");
    openapiFields.add("publicname");
    openapiFields.add("reference");
    openapiFields.add("reference_owner");
    openapiFields.add("reference_year");
    openapiFields.add("resulttype");
    openapiFields.add("s_uuid");
    openapiFields.add("studyResultType");
    openapiFields.add("substanceType");
    openapiFields.add("textValue");
    openapiFields.add("topcategory");
    openapiFields.add("type_s");
    openapiFields.add("unit");
    openapiFields.add("upQualifier");
    openapiFields.add("upValue");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Investigation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Investigation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Investigation is not found in the empty JSON string", Investigation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Investigation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Investigation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assay") != null && !jsonObj.get("assay").isJsonNull()) && !jsonObj.get("assay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assay").toString()));
      }
      if ((jsonObj.get("document_uuid") != null && !jsonObj.get("document_uuid").isJsonNull()) && !jsonObj.get("document_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_uuid").toString()));
      }
      if ((jsonObj.get("effectendpoint") != null && !jsonObj.get("effectendpoint").isJsonNull()) && !jsonObj.get("effectendpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectendpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectendpoint").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("endpointcategory") != null && !jsonObj.get("endpointcategory").isJsonNull()) && !jsonObj.get("endpointcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointcategory").toString()));
      }
      if ((jsonObj.get("errQualifier") != null && !jsonObj.get("errQualifier").isJsonNull()) && !jsonObj.get("errQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errQualifier").toString()));
      }
      if ((jsonObj.get("guidance") != null && !jsonObj.get("guidance").isJsonNull()) && !jsonObj.get("guidance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guidance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guidance").toString()));
      }
      if ((jsonObj.get("investigation") != null && !jsonObj.get("investigation").isJsonNull()) && !jsonObj.get("investigation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `investigation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("investigation").toString()));
      }
      if ((jsonObj.get("loQualifier") != null && !jsonObj.get("loQualifier").isJsonNull()) && !jsonObj.get("loQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loQualifier").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("owner_name") != null && !jsonObj.get("owner_name").isJsonNull()) && !jsonObj.get("owner_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_name").toString()));
      }
      if ((jsonObj.get("publicname") != null && !jsonObj.get("publicname").isJsonNull()) && !jsonObj.get("publicname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicname").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("reference_owner") != null && !jsonObj.get("reference_owner").isJsonNull()) && !jsonObj.get("reference_owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_owner").toString()));
      }
      if ((jsonObj.get("reference_year") != null && !jsonObj.get("reference_year").isJsonNull()) && !jsonObj.get("reference_year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference_year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference_year").toString()));
      }
      if ((jsonObj.get("resulttype") != null && !jsonObj.get("resulttype").isJsonNull()) && !jsonObj.get("resulttype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resulttype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resulttype").toString()));
      }
      if ((jsonObj.get("s_uuid") != null && !jsonObj.get("s_uuid").isJsonNull()) && !jsonObj.get("s_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s_uuid").toString()));
      }
      if ((jsonObj.get("studyResultType") != null && !jsonObj.get("studyResultType").isJsonNull()) && !jsonObj.get("studyResultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studyResultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studyResultType").toString()));
      }
      if ((jsonObj.get("substanceType") != null && !jsonObj.get("substanceType").isJsonNull()) && !jsonObj.get("substanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substanceType").toString()));
      }
      if ((jsonObj.get("textValue") != null && !jsonObj.get("textValue").isJsonNull()) && !jsonObj.get("textValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textValue").toString()));
      }
      if ((jsonObj.get("topcategory") != null && !jsonObj.get("topcategory").isJsonNull()) && !jsonObj.get("topcategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topcategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topcategory").toString()));
      }
      if ((jsonObj.get("type_s") != null && !jsonObj.get("type_s").isJsonNull()) && !jsonObj.get("type_s").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_s` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_s").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("upQualifier") != null && !jsonObj.get("upQualifier").isJsonNull()) && !jsonObj.get("upQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upQualifier").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Investigation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Investigation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Investigation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Investigation.class));

       return (TypeAdapter<T>) new TypeAdapter<Investigation>() {
           @Override
           public void write(JsonWriter out, Investigation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Investigation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Investigation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Investigation
   * @throws IOException if the JSON string is invalid with respect to Investigation
   */
  public static Investigation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Investigation.class);
  }

  /**
   * Convert an instance of Investigation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

