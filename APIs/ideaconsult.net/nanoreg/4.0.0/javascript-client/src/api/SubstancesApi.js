/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import Substance from '../model/Substance';
import SubstanceComposition from '../model/SubstanceComposition';
import SubstanceStudy from '../model/SubstanceStudy';
import SubstanceStudySummary from '../model/SubstanceStudySummary';

/**
* Substances service.
* @module api/SubstancesApi
* @version 4.0.0
*/
export default class SubstancesApi {

    /**
    * Constructs a new SubstancesApi. 
    * @alias module:api/SubstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSubstanceByUUID operation.
     * @callback module:api/SubstancesApi~getSubstanceByUUIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Substance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a substance
     * Returns substance representation
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {String} [propertyUris] Property URIs
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstanceByUUIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Substance}
     */
    getSubstanceByUUID(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceByUUID");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceByUUID");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'property_uris[]': opts['propertyUris'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Substance;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceComposition_0 operation.
     * @callback module:api/SubstancesApi~getSubstanceComposition_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Substance composition
     * Returns substance composition
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] true (Show all compositions) false (do not show hidden compositions)
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstanceComposition_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceComposition}
     */
    getSubstanceComposition_0(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceComposition_0");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceComposition_0");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'all': opts['all'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceComposition;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/composition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStructures_0 operation.
     * @callback module:api/SubstancesApi~getSubstanceStructures_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get substance composition as a dataset
     * Returns substance composition
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstanceStructures_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    getSubstanceStructures_0(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStructures_0");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStructures_0");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/structures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStudySummary_0 operation.
     * @callback module:api/SubstancesApi~getSubstanceStudySummary_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceStudySummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get study summary for the substance
     * Study summary
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [top] Top endpoint category
     * @param {String} [category] Endpoint category (The value in the protocol.category.code field)
     * @param {String} [propertyUri] Property URI https://data.enanomapper.net/property/{UUID} , see Property service
     * @param {String} [property] Property UUID, see Property service
     * @param {Boolean} [result] If true will group by topcategory,endpointcategory,interpretation result
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstanceStudySummary_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceStudySummary}
     */
    getSubstanceStudySummary_0(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStudySummary_0");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStudySummary_0");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'top': opts['top'],
        'category': opts['category'],
        'property_uri': opts['propertyUri'],
        'property': opts['property'],
        'result': opts['result'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceStudySummary;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/studySummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStudy_0 operation.
     * @callback module:api/SubstancesApi~getSubstanceStudy_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceStudy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get substance study
     * Returns substance study representation
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [top] Top endpoint category
     * @param {String} [category] Endpoint category (The value in the protocol.category.code field)
     * @param {String} [propertyUri] Property URI https://data.enanomapper.net/property/{UUID} , see Property service
     * @param {String} [property] Property UUID
     * @param {String} [investigationUuid] Investigation UUID, a code to link different studies
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstanceStudy_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceStudy}
     */
    getSubstanceStudy_0(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStudy_0");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStudy_0");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'top': opts['top'],
        'category': opts['category'],
        'property_uri': opts['propertyUri'],
        'property': opts['property'],
        'investigation_uuid': opts['investigationUuid'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceStudy;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/study', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstances operation.
     * @callback module:api/SubstancesApi~getSubstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Substance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List substances
     * Returns a list of substances, according to the search criteria
     * @param {module:model/String} db Database ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Search parameter
     * @param {module:model/String} [type] 
     * @param {String} [compoundUri] If type=related finds all substances containing this compound; if typ =reference - finds all substances with this compound as reference structure
     * @param {String} [bundleUri] Retrieves if selected in this bundle
     * @param {Boolean} [addDummySubstance] Adds a compound record as substance in JSON; only if type=related
     * @param {Boolean} [studysummary] If true retrieves study summary for each substance
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/SubstancesApi~getSubstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Substance}
     */
    getSubstances(db, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstances");
      }

      let pathParams = {
        'db': db
      };
      let queryParams = {
        'search': opts['search'],
        'type': opts['type'],
        'compound_uri': opts['compoundUri'],
        'bundle_uri': opts['bundleUri'],
        'addDummySubstance': opts['addDummySubstance'],
        'studysummary': opts['studysummary'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Substance;
      return this.apiClient.callApi(
        '/enm/{db}/substance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
