# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SolrQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facet: str=None, filter: str=None, query: str=None, rows: int=None, sort: bool=None, start: int=None):
        """SolrQuery - a model defined in OpenAPI

        :param facet: The facet of this SolrQuery.
        :param filter: The filter of this SolrQuery.
        :param query: The query of this SolrQuery.
        :param rows: The rows of this SolrQuery.
        :param sort: The sort of this SolrQuery.
        :param start: The start of this SolrQuery.
        """
        self.openapi_types = {
            'facet': str,
            'filter': str,
            'query': str,
            'rows': int,
            'sort': bool,
            'start': int
        }

        self.attribute_map = {
            'facet': 'facet',
            'filter': 'filter',
            'query': 'query',
            'rows': 'rows',
            'sort': 'sort',
            'start': 'start'
        }

        self._facet = facet
        self._filter = filter
        self._query = query
        self._rows = rows
        self._sort = sort
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SolrQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SolrQuery of this SolrQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facet(self):
        """Gets the facet of this SolrQuery.


        :return: The facet of this SolrQuery.
        :rtype: str
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """Sets the facet of this SolrQuery.


        :param facet: The facet of this SolrQuery.
        :type facet: str
        """

        self._facet = facet

    @property
    def filter(self):
        """Gets the filter of this SolrQuery.


        :return: The filter of this SolrQuery.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SolrQuery.


        :param filter: The filter of this SolrQuery.
        :type filter: str
        """

        self._filter = filter

    @property
    def query(self):
        """Gets the query of this SolrQuery.


        :return: The query of this SolrQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SolrQuery.


        :param query: The query of this SolrQuery.
        :type query: str
        """

        self._query = query

    @property
    def rows(self):
        """Gets the rows of this SolrQuery.


        :return: The rows of this SolrQuery.
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this SolrQuery.


        :param rows: The rows of this SolrQuery.
        :type rows: int
        """

        self._rows = rows

    @property
    def sort(self):
        """Gets the sort of this SolrQuery.


        :return: The sort of this SolrQuery.
        :rtype: bool
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SolrQuery.


        :param sort: The sort of this SolrQuery.
        :type sort: bool
        """

        self._sort = sort

    @property
    def start(self):
        """Gets the start of this SolrQuery.


        :return: The start of this SolrQuery.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SolrQuery.


        :param start: The start of this SolrQuery.
        :type start: int
        """

        self._start = start
