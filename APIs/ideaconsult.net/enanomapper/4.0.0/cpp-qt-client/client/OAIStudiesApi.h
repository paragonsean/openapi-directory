/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStudiesApi_H
#define OAI_OAIStudiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFacet.h"
#include "OAIInvestigation.h"
#include "OAISubstanceStudy.h"
#include "OAISubstanceStudySummary.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStudiesApi : public QObject {
    Q_OBJECT

public:
    OAIStudiesApi(const int timeOut = 0);
    ~OAIStudiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  db QString [required]
    * @param[in]  top QString [optional]
    * @param[in]  category QString [optional]
    */
    virtual void getEndpointSummary(const QString &db, const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  type QString [required]
    * @param[in]  search QString [required]
    * @param[in]  inchikey QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void getInvestigationResults(const QString &db, const QString &type, const QString &search, const ::OpenAPI::OptionalParam<QString> &inchikey = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  uuid QString [required]
    * @param[in]  top QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  property_uri QString [optional]
    * @param[in]  property QString [optional]
    * @param[in]  investigation_uuid QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void getSubstanceStudy(const QString &db, const QString &uuid, const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &investigation_uuid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  db QString [required]
    * @param[in]  uuid QString [required]
    * @param[in]  top QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  property_uri QString [optional]
    * @param[in]  property QString [optional]
    * @param[in]  result bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    */
    virtual void getSubstanceStudySummary(const QString &db, const QString &uuid, const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &property = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &result = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEndpointSummaryCallback(OAIHttpRequestWorker *worker);
    void getInvestigationResultsCallback(OAIHttpRequestWorker *worker);
    void getSubstanceStudyCallback(OAIHttpRequestWorker *worker);
    void getSubstanceStudySummaryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEndpointSummarySignal(OAIFacet summary);
    void getInvestigationResultsSignal(OAIInvestigation summary);
    void getSubstanceStudySignal(OAISubstanceStudy summary);
    void getSubstanceStudySummarySignal(OAISubstanceStudySummary summary);


    void getEndpointSummarySignalFull(OAIHttpRequestWorker *worker, OAIFacet summary);
    void getInvestigationResultsSignalFull(OAIHttpRequestWorker *worker, OAIInvestigation summary);
    void getSubstanceStudySignalFull(OAIHttpRequestWorker *worker, OAISubstanceStudy summary);
    void getSubstanceStudySummarySignalFull(OAIHttpRequestWorker *worker, OAISubstanceStudySummary summary);

    Q_DECL_DEPRECATED_X("Use getEndpointSummarySignalError() instead")
    void getEndpointSummarySignalE(OAIFacet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSummarySignalError(OAIFacet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvestigationResultsSignalError() instead")
    void getInvestigationResultsSignalE(OAIInvestigation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvestigationResultsSignalError(OAIInvestigation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStudySignalError() instead")
    void getSubstanceStudySignalE(OAISubstanceStudy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStudySignalError(OAISubstanceStudy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStudySummarySignalError() instead")
    void getSubstanceStudySummarySignalE(OAISubstanceStudySummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStudySummarySignalError(OAISubstanceStudySummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEndpointSummarySignalErrorFull() instead")
    void getEndpointSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvestigationResultsSignalErrorFull() instead")
    void getInvestigationResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvestigationResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStudySignalErrorFull() instead")
    void getSubstanceStudySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStudySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSubstanceStudySummarySignalErrorFull() instead")
    void getSubstanceStudySummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSubstanceStudySummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
