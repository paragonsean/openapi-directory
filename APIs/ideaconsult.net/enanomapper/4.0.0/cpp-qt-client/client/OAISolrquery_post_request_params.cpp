/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolrquery_post_request_params.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolrquery_post_request_params::OAISolrquery_post_request_params(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolrquery_post_request_params::OAISolrquery_post_request_params() {
    this->initializeModel();
}

OAISolrquery_post_request_params::~OAISolrquery_post_request_params() {}

void OAISolrquery_post_request_params::initializeModel() {

    m_fl_isSet = false;
    m_fl_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;
}

void OAISolrquery_post_request_params::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolrquery_post_request_params::fromJsonObject(QJsonObject json) {

    m_fl_isValid = ::OpenAPI::fromJsonValue(m_fl, json[QString("fl")]);
    m_fl_isSet = !json[QString("fl")].isNull() && m_fl_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;
}

QString OAISolrquery_post_request_params::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolrquery_post_request_params::asJsonObject() const {
    QJsonObject obj;
    if (m_fl.size() > 0) {
        obj.insert(QString("fl"), ::OpenAPI::toJsonValue(m_fl));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    return obj;
}

QList<QString> OAISolrquery_post_request_params::getFl() const {
    return m_fl;
}
void OAISolrquery_post_request_params::setFl(const QList<QString> &fl) {
    m_fl = fl;
    m_fl_isSet = true;
}

bool OAISolrquery_post_request_params::is_fl_Set() const{
    return m_fl_isSet;
}

bool OAISolrquery_post_request_params::is_fl_Valid() const{
    return m_fl_isValid;
}

qint32 OAISolrquery_post_request_params::getRows() const {
    return m_rows;
}
void OAISolrquery_post_request_params::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAISolrquery_post_request_params::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAISolrquery_post_request_params::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAISolrquery_post_request_params::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolrquery_post_request_params::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
