/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_data_entry_isSet = false;
    m_data_entry_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_model_uri_isSet = false;
    m_model_uri_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_data_entry_isValid = ::OpenAPI::fromJsonValue(m_data_entry, json[QString("dataEntry")]);
    m_data_entry_isSet = !json[QString("dataEntry")].isNull() && m_data_entry_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_model_uri_isValid = ::OpenAPI::fromJsonValue(m_model_uri, json[QString("model_uri")]);
    m_model_uri_isSet = !json[QString("model_uri")].isNull() && m_model_uri_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_data_entry_isSet) {
        obj.insert(QString("dataEntry"), ::OpenAPI::toJsonValue(m_data_entry));
    }
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_model_uri_isSet) {
        obj.insert(QString("model_uri"), ::OpenAPI::toJsonValue(m_model_uri));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIObject OAIDataset::getDataEntry() const {
    return m_data_entry;
}
void OAIDataset::setDataEntry(const OAIObject &data_entry) {
    m_data_entry = data_entry;
    m_data_entry_isSet = true;
}

bool OAIDataset::is_data_entry_Set() const{
    return m_data_entry_isSet;
}

bool OAIDataset::is_data_entry_Valid() const{
    return m_data_entry_isValid;
}

OAIObject OAIDataset::getFeature() const {
    return m_feature;
}
void OAIDataset::setFeature(const OAIObject &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIDataset::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIDataset::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAIDataset::getModelUri() const {
    return m_model_uri;
}
void OAIDataset::setModelUri(const QString &model_uri) {
    m_model_uri = model_uri;
    m_model_uri_isSet = true;
}

bool OAIDataset::is_model_uri_Set() const{
    return m_model_uri_isSet;
}

bool OAIDataset::is_model_uri_Valid() const{
    return m_model_uri_isValid;
}

OAIObject OAIDataset::getQuery() const {
    return m_query;
}
void OAIDataset::setQuery(const OAIObject &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIDataset::is_query_Set() const{
    return m_query_isSet;
}

bool OAIDataset::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
