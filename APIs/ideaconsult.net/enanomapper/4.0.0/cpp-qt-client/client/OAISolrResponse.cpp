/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolrResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolrResponse::OAISolrResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolrResponse::OAISolrResponse() {
    this->initializeModel();
}

OAISolrResponse::~OAISolrResponse() {}

void OAISolrResponse::initializeModel() {

    m_response_isSet = false;
    m_response_isValid = false;

    m_response_header_isSet = false;
    m_response_header_isValid = false;
}

void OAISolrResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolrResponse::fromJsonObject(QJsonObject json) {

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_response_header_isValid = ::OpenAPI::fromJsonValue(m_response_header, json[QString("responseHeader")]);
    m_response_header_isSet = !json[QString("responseHeader")].isNull() && m_response_header_isValid;
}

QString OAISolrResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolrResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_response_header.isSet()) {
        obj.insert(QString("responseHeader"), ::OpenAPI::toJsonValue(m_response_header));
    }
    return obj;
}

OAISolrResponse_response OAISolrResponse::getResponse() const {
    return m_response;
}
void OAISolrResponse::setResponse(const OAISolrResponse_response &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAISolrResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAISolrResponse::is_response_Valid() const{
    return m_response_isValid;
}

OAISolrResponse_responseHeader OAISolrResponse::getResponseHeader() const {
    return m_response_header;
}
void OAISolrResponse::setResponseHeader(const OAISolrResponse_responseHeader &response_header) {
    m_response_header = response_header;
    m_response_header_isSet = true;
}

bool OAISolrResponse::is_response_header_Set() const{
    return m_response_header_isSet;
}

bool OAISolrResponse::is_response_header_Valid() const{
    return m_response_header_isValid;
}

bool OAISolrResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_header.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolrResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
