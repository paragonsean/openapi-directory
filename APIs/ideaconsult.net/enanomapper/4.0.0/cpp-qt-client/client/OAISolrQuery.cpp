/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolrQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolrQuery::OAISolrQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolrQuery::OAISolrQuery() {
    this->initializeModel();
}

OAISolrQuery::~OAISolrQuery() {}

void OAISolrQuery::initializeModel() {

    m_facet_isSet = false;
    m_facet_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAISolrQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolrQuery::fromJsonObject(QJsonObject json) {

    m_facet_isValid = ::OpenAPI::fromJsonValue(m_facet, json[QString("facet")]);
    m_facet_isSet = !json[QString("facet")].isNull() && m_facet_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_rows_isValid = ::OpenAPI::fromJsonValue(m_rows, json[QString("rows")]);
    m_rows_isSet = !json[QString("rows")].isNull() && m_rows_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAISolrQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolrQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_facet_isSet) {
        obj.insert(QString("facet"), ::OpenAPI::toJsonValue(m_facet));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_rows_isSet) {
        obj.insert(QString("rows"), ::OpenAPI::toJsonValue(m_rows));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAISolrQuery::getFacet() const {
    return m_facet;
}
void OAISolrQuery::setFacet(const QString &facet) {
    m_facet = facet;
    m_facet_isSet = true;
}

bool OAISolrQuery::is_facet_Set() const{
    return m_facet_isSet;
}

bool OAISolrQuery::is_facet_Valid() const{
    return m_facet_isValid;
}

QString OAISolrQuery::getFilter() const {
    return m_filter;
}
void OAISolrQuery::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISolrQuery::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISolrQuery::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISolrQuery::getQuery() const {
    return m_query;
}
void OAISolrQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISolrQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAISolrQuery::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAISolrQuery::getRows() const {
    return m_rows;
}
void OAISolrQuery::setRows(const qint32 &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAISolrQuery::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAISolrQuery::is_rows_Valid() const{
    return m_rows_isValid;
}

bool OAISolrQuery::isSort() const {
    return m_sort;
}
void OAISolrQuery::setSort(const bool &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISolrQuery::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISolrQuery::is_sort_Valid() const{
    return m_sort_isValid;
}

qint32 OAISolrQuery::getStart() const {
    return m_start;
}
void OAISolrQuery::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISolrQuery::is_start_Set() const{
    return m_start_isSet;
}

bool OAISolrQuery::is_start_Valid() const{
    return m_start_isValid;
}

bool OAISolrQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolrQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
