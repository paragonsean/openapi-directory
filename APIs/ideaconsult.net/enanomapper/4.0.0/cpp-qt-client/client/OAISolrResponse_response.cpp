/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolrResponse_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolrResponse_response::OAISolrResponse_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolrResponse_response::OAISolrResponse_response() {
    this->initializeModel();
}

OAISolrResponse_response::~OAISolrResponse_response() {}

void OAISolrResponse_response::initializeModel() {

    m_docs_isSet = false;
    m_docs_isValid = false;

    m_max_score_isSet = false;
    m_max_score_isValid = false;

    m_num_found_isSet = false;
    m_num_found_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAISolrResponse_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolrResponse_response::fromJsonObject(QJsonObject json) {

    m_docs_isValid = ::OpenAPI::fromJsonValue(m_docs, json[QString("docs")]);
    m_docs_isSet = !json[QString("docs")].isNull() && m_docs_isValid;

    m_max_score_isValid = ::OpenAPI::fromJsonValue(m_max_score, json[QString("maxScore")]);
    m_max_score_isSet = !json[QString("maxScore")].isNull() && m_max_score_isValid;

    m_num_found_isValid = ::OpenAPI::fromJsonValue(m_num_found, json[QString("numFound")]);
    m_num_found_isSet = !json[QString("numFound")].isNull() && m_num_found_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAISolrResponse_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolrResponse_response::asJsonObject() const {
    QJsonObject obj;
    if (m_docs.size() > 0) {
        obj.insert(QString("docs"), ::OpenAPI::toJsonValue(m_docs));
    }
    if (m_max_score_isSet) {
        obj.insert(QString("maxScore"), ::OpenAPI::toJsonValue(m_max_score));
    }
    if (m_num_found_isSet) {
        obj.insert(QString("numFound"), ::OpenAPI::toJsonValue(m_num_found));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QList<OAIObject> OAISolrResponse_response::getDocs() const {
    return m_docs;
}
void OAISolrResponse_response::setDocs(const QList<OAIObject> &docs) {
    m_docs = docs;
    m_docs_isSet = true;
}

bool OAISolrResponse_response::is_docs_Set() const{
    return m_docs_isSet;
}

bool OAISolrResponse_response::is_docs_Valid() const{
    return m_docs_isValid;
}

double OAISolrResponse_response::getMaxScore() const {
    return m_max_score;
}
void OAISolrResponse_response::setMaxScore(const double &max_score) {
    m_max_score = max_score;
    m_max_score_isSet = true;
}

bool OAISolrResponse_response::is_max_score_Set() const{
    return m_max_score_isSet;
}

bool OAISolrResponse_response::is_max_score_Valid() const{
    return m_max_score_isValid;
}

qint32 OAISolrResponse_response::getNumFound() const {
    return m_num_found;
}
void OAISolrResponse_response::setNumFound(const qint32 &num_found) {
    m_num_found = num_found;
    m_num_found_isSet = true;
}

bool OAISolrResponse_response::is_num_found_Set() const{
    return m_num_found_isSet;
}

bool OAISolrResponse_response::is_num_found_Valid() const{
    return m_num_found_isValid;
}

qint32 OAISolrResponse_response::getStart() const {
    return m_start;
}
void OAISolrResponse_response::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISolrResponse_response::is_start_Set() const{
    return m_start_isSet;
}

bool OAISolrResponse_response::is_start_Valid() const{
    return m_start_isValid;
}

bool OAISolrResponse_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_docs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolrResponse_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
