/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SolrQuery model module.
 * @module model/SolrQuery
 * @version 4.0.0
 */
class SolrQuery {
    /**
     * Constructs a new <code>SolrQuery</code>.
     * @alias module:model/SolrQuery
     */
    constructor() { 
        
        SolrQuery.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SolrQuery</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolrQuery} obj Optional instance to populate.
     * @return {module:model/SolrQuery} The populated <code>SolrQuery</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolrQuery();

            if (data.hasOwnProperty('facet')) {
                obj['facet'] = ApiClient.convertToType(data['facet'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('rows')) {
                obj['rows'] = ApiClient.convertToType(data['rows'], 'Number');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'Boolean');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolrQuery</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolrQuery</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['facet'] && !(typeof data['facet'] === 'string' || data['facet'] instanceof String)) {
            throw new Error("Expected the field `facet` to be a primitive type in the JSON string but got " + data['facet']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }

        return true;
    }


}



/**
 * @member {String} facet
 */
SolrQuery.prototype['facet'] = undefined;

/**
 * @member {String} filter
 */
SolrQuery.prototype['filter'] = undefined;

/**
 * @member {String} query
 */
SolrQuery.prototype['query'] = undefined;

/**
 * @member {Number} rows
 */
SolrQuery.prototype['rows'] = undefined;

/**
 * @member {Boolean} sort
 */
SolrQuery.prototype['sort'] = undefined;

/**
 * @member {Number} start
 */
SolrQuery.prototype['start'] = undefined;






export default SolrQuery;

