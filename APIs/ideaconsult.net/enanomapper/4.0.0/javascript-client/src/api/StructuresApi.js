/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dataset from '../model/Dataset';
import SubstanceComposition from '../model/SubstanceComposition';

/**
* Structures service.
* @module api/StructuresApi
* @version 4.0.0
*/
export default class StructuresApi {

    /**
    * Constructs a new StructuresApi. 
    * @alias module:api/StructuresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSubstanceComposition operation.
     * @callback module:api/StructuresApi~getSubstanceCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceComposition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Substance composition
     * Returns substance composition
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] true (Show all compositions) false (do not show hidden compositions)
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StructuresApi~getSubstanceCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceComposition}
     */
    getSubstanceComposition(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceComposition");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceComposition");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'all': opts['all'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceComposition;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/composition', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStructures operation.
     * @callback module:api/StructuresApi~getSubstanceStructuresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get substance composition as a dataset
     * Returns substance composition
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StructuresApi~getSubstanceStructuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    getSubstanceStructures(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStructures");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStructures");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/structures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchByIdentifier operation.
     * @callback module:api/StructuresApi~searchByIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exact chemical structure search
     * Returns compounds found
     * @param {module:model/String} db Database ID
     * @param {module:model/String} term search term type
     * @param {module:model/String} representation 
     * @param {Object} opts Optional parameters
     * @param {String} [search] Compound identifier (SMILES, InChI, name, registry identifiers)
     * @param {String} [b64search] Base64 encoded mol file; if included, will be used instead of the 'search' parameter
     * @param {Boolean} [casesens] Case sensitive search if yes
     * @param {String} [bundleUri] Bundle URI
     * @param {String} [sameas] Ontology URI to define groups of columns
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StructuresApi~searchByIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    searchByIdentifier(db, term, representation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling searchByIdentifier");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling searchByIdentifier");
      }
      // verify the required parameter 'representation' is set
      if (representation === undefined || representation === null) {
        throw new Error("Missing the required parameter 'representation' when calling searchByIdentifier");
      }

      let pathParams = {
        'db': db,
        'term': term,
        'representation': representation
      };
      let queryParams = {
        'search': opts['search'],
        'b64search': opts['b64search'],
        'casesens': opts['casesens'],
        'bundle_uri': opts['bundleUri'],
        'sameas': opts['sameas'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/enm/{db}/query/compound/{term}/{representation}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBySimilarity operation.
     * @callback module:api/StructuresApi~searchBySimilarityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exact similarity search
     * Returns similar compounds
     * @param {module:model/String} db Database ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Compound identifier (SMILES, InChI, name, registry identifiers)
     * @param {String} [b64search] Base64 encoded mol file; if included, will be used instead of the 'search' parameter
     * @param {module:model/String} [type] Defines the expected content of the search parameter
     * @param {Number} [threshold] Similarity threshold
     * @param {String} [datasetUri] Restrict the search within the AMBIT dataset specified with the URI
     * @param {Boolean} [filterBySubstance] Restrict the search within the set of structures with assigned substances
     * @param {String} [bundleUri] If the structure is used in the specified bundle URI, the selection tag will be returned
     * @param {String} [sameas] Ontology URI to define groups of columns
     * @param {Boolean} [mol] Only for application/json; to include mol as JSON field
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StructuresApi~searchBySimilarityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    searchBySimilarity(db, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling searchBySimilarity");
      }

      let pathParams = {
        'db': db
      };
      let queryParams = {
        'search': opts['search'],
        'b64search': opts['b64search'],
        'type': opts['type'],
        'threshold': opts['threshold'],
        'dataset_uri': opts['datasetUri'],
        'filterBySubstance': opts['filterBySubstance'],
        'bundle_uri': opts['bundleUri'],
        'sameas': opts['sameas'],
        'mol': opts['mol'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/enm/{db}/query/similarity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBySmarts operation.
     * @callback module:api/StructuresApi~searchBySmartsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Substructure search
     * Returns compounds with the specified substructure
     * @param {module:model/String} db Database ID
     * @param {Object} opts Optional parameters
     * @param {String} [search] Compound identifier (SMILES, InChI, name, registry identifiers)
     * @param {String} [b64search] Base64 encoded mol file; if included, will be used instead of the 'search' parameter
     * @param {module:model/String} [type] Defines the expected content of the search parameter
     * @param {String} [datasetUri] Restrict the search within the AMBIT dataset specified with the URI
     * @param {Boolean} [filterBySubstance] Restrict the search within the set of structures with assigned substances
     * @param {String} [bundleUri] If the structure is used in the specified bundle URI, the selection tag will be returned
     * @param {String} [sameas] Ontology URI to define groups of columns
     * @param {Boolean} [mol] Only for application/json; to include mol as JSON field
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StructuresApi~searchBySmartsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dataset}
     */
    searchBySmarts(db, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling searchBySmarts");
      }

      let pathParams = {
        'db': db
      };
      let queryParams = {
        'search': opts['search'],
        'b64search': opts['b64search'],
        'type': opts['type'],
        'dataset_uri': opts['datasetUri'],
        'filterBySubstance': opts['filterBySubstance'],
        'bundle_uri': opts['bundleUri'],
        'sameas': opts['sameas'],
        'mol': opts['mol'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dataset;
      return this.apiClient.callApi(
        '/enm/{db}/query/smarts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
