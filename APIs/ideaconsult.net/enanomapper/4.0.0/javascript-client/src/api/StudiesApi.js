/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Facet from '../model/Facet';
import Investigation from '../model/Investigation';
import SubstanceStudy from '../model/SubstanceStudy';
import SubstanceStudySummary from '../model/SubstanceStudySummary';

/**
* Studies service.
* @module api/StudiesApi
* @version 4.0.0
*/
export default class StudiesApi {

    /**
    * Constructs a new StudiesApi. 
    * @alias module:api/StudiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEndpointSummary operation.
     * @callback module:api/StudiesApi~getEndpointSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search endpoint summary
     * Returns endpoint summary
     * @param {module:model/String} db Database ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [top] Top endpoint category
     * @param {String} [category] Endpoint category (The value in the protocol.category.code field)
     * @param {module:api/StudiesApi~getEndpointSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facet}
     */
    getEndpointSummary(db, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getEndpointSummary");
      }

      let pathParams = {
        'db': db
      };
      let queryParams = {
        'top': opts['top'],
        'category': opts['category']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Facet;
      return this.apiClient.callApi(
        '/enm/{db}/query/study', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvestigationResults operation.
     * @callback module:api/StudiesApi~getInvestigationResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Investigation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details of multiple studies
     * Multiple studies in tabular form
     * @param {module:model/String} db Database ID
     * @param {module:model/String} type query type
     * @param {String} search Search parameter, UUID of the investigation or a substance
     * @param {Object} opts Optional parameters
     * @param {String} [inchikey] Search parameter, InChI key(s) of the substance component(s), comma delimited
     * @param {String} [id] Search parameter, chemical structure or substance identifier(s), comma delimited
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StudiesApi~getInvestigationResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Investigation}
     */
    getInvestigationResults(db, type, search, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getInvestigationResults");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getInvestigationResults");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling getInvestigationResults");
      }

      let pathParams = {
        'db': db
      };
      let queryParams = {
        'type': type,
        'search': search,
        'inchikey': opts['inchikey'],
        'id': opts['id'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/x-javascript', 'text/csv', 'text/plain'];
      let returnType = Investigation;
      return this.apiClient.callApi(
        '/enm/{db}/investigation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStudy operation.
     * @callback module:api/StudiesApi~getSubstanceStudyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceStudy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get substance study
     * Returns substance study representation
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [top] Top endpoint category
     * @param {String} [category] Endpoint category (The value in the protocol.category.code field)
     * @param {String} [propertyUri] Property URI https://data.enanomapper.net/property/{UUID} , see Property service
     * @param {String} [property] Property UUID
     * @param {String} [investigationUuid] Investigation UUID, a code to link different studies
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StudiesApi~getSubstanceStudyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceStudy}
     */
    getSubstanceStudy(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStudy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStudy");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'top': opts['top'],
        'category': opts['category'],
        'property_uri': opts['propertyUri'],
        'property': opts['property'],
        'investigation_uuid': opts['investigationUuid'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceStudy;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/study', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubstanceStudySummary operation.
     * @callback module:api/StudiesApi~getSubstanceStudySummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubstanceStudySummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get study summary for the substance
     * Study summary
     * @param {module:model/String} db Database ID
     * @param {String} uuid Substance UUID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [top] Top endpoint category
     * @param {String} [category] Endpoint category (The value in the protocol.category.code field)
     * @param {String} [propertyUri] Property URI https://data.enanomapper.net/property/{UUID} , see Property service
     * @param {String} [property] Property UUID, see Property service
     * @param {Boolean} [result] If true will group by topcategory,endpointcategory,interpretation result
     * @param {Number} [page] Starting page
     * @param {Number} [pagesize] Page size
     * @param {module:api/StudiesApi~getSubstanceStudySummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubstanceStudySummary}
     */
    getSubstanceStudySummary(db, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'db' is set
      if (db === undefined || db === null) {
        throw new Error("Missing the required parameter 'db' when calling getSubstanceStudySummary");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getSubstanceStudySummary");
      }

      let pathParams = {
        'db': db,
        'uuid': uuid
      };
      let queryParams = {
        'top': opts['top'],
        'category': opts['category'],
        'property_uri': opts['propertyUri'],
        'property': opts['property'],
        'result': opts['result'],
        'page': opts['page'],
        'pagesize': opts['pagesize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubstanceStudySummary;
      return this.apiClient.callApi(
        '/enm/{db}/substance/{uuid}/studySummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
