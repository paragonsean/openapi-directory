/**
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ENanoMapperDatabase);
  }
}(this, function(expect, ENanoMapperDatabase) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ENanoMapperDatabase.Investigation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Investigation', function() {
    it('should create an instance of Investigation', function() {
      // uncomment below and update the code to test Investigation
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be.a(ENanoMapperDatabase.Investigation);
    });

    it('should have the property childDocuments (base name: "_childDocuments_")', function() {
      // uncomment below and update the code to test the property childDocuments
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property assay (base name: "assay")', function() {
      // uncomment below and update the code to test the property assay
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property documentUuid (base name: "document_uuid")', function() {
      // uncomment below and update the code to test the property documentUuid
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property effectendpoint (base name: "effectendpoint")', function() {
      // uncomment below and update the code to test the property effectendpoint
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property endpointcategory (base name: "endpointcategory")', function() {
      // uncomment below and update the code to test the property endpointcategory
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property err (base name: "err")', function() {
      // uncomment below and update the code to test the property err
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property errQualifier (base name: "errQualifier")', function() {
      // uncomment below and update the code to test the property errQualifier
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property guidance (base name: "guidance")', function() {
      // uncomment below and update the code to test the property guidance
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property investigation (base name: "investigation")', function() {
      // uncomment below and update the code to test the property investigation
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property loQualifier (base name: "loQualifier")', function() {
      // uncomment below and update the code to test the property loQualifier
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property loValue (base name: "loValue")', function() {
      // uncomment below and update the code to test the property loValue
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property ownerName (base name: "owner_name")', function() {
      // uncomment below and update the code to test the property ownerName
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property publicname (base name: "publicname")', function() {
      // uncomment below and update the code to test the property publicname
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property referenceOwner (base name: "reference_owner")', function() {
      // uncomment below and update the code to test the property referenceOwner
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property referenceYear (base name: "reference_year")', function() {
      // uncomment below and update the code to test the property referenceYear
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property resulttype (base name: "resulttype")', function() {
      // uncomment below and update the code to test the property resulttype
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property sUuid (base name: "s_uuid")', function() {
      // uncomment below and update the code to test the property sUuid
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property studyResultType (base name: "studyResultType")', function() {
      // uncomment below and update the code to test the property studyResultType
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property substanceType (base name: "substanceType")', function() {
      // uncomment below and update the code to test the property substanceType
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property textValue (base name: "textValue")', function() {
      // uncomment below and update the code to test the property textValue
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property topcategory (base name: "topcategory")', function() {
      // uncomment below and update the code to test the property topcategory
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property typeS (base name: "type_s")', function() {
      // uncomment below and update the code to test the property typeS
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property unit (base name: "unit")', function() {
      // uncomment below and update the code to test the property unit
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property upQualifier (base name: "upQualifier")', function() {
      // uncomment below and update the code to test the property upQualifier
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property upValue (base name: "upValue")', function() {
      // uncomment below and update the code to test the property upValue
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new ENanoMapperDatabase.Investigation();
      //expect(instance).to.be();
    });

  });

}));
