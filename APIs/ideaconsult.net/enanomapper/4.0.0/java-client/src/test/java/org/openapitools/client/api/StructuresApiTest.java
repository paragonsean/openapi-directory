/*
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.SubstanceComposition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StructuresApi
 */
@Disabled
public class StructuresApiTest {

    private final StructuresApi api = new StructuresApi();

    /**
     * Substance composition
     *
     * Returns substance composition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubstanceCompositionTest() throws ApiException {
        String db = null;
        String uuid = null;
        Boolean all = null;
        Integer page = null;
        Integer pagesize = null;
        SubstanceComposition response = api.getSubstanceComposition(db, uuid, all, page, pagesize);
        // TODO: test validations
    }

    /**
     * Get substance composition as a dataset
     *
     * Returns substance composition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubstanceStructuresTest() throws ApiException {
        String db = null;
        String uuid = null;
        Integer page = null;
        Integer pagesize = null;
        Dataset response = api.getSubstanceStructures(db, uuid, page, pagesize);
        // TODO: test validations
    }

    /**
     * Exact chemical structure search
     *
     * Returns compounds found
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchByIdentifierTest() throws ApiException {
        String db = null;
        String term = null;
        String representation = null;
        String search = null;
        String b64search = null;
        Boolean casesens = null;
        String bundleUri = null;
        String sameas = null;
        Integer page = null;
        Integer pagesize = null;
        Dataset response = api.searchByIdentifier(db, term, representation, search, b64search, casesens, bundleUri, sameas, page, pagesize);
        // TODO: test validations
    }

    /**
     * Exact similarity search
     *
     * Returns similar compounds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchBySimilarityTest() throws ApiException {
        String db = null;
        String search = null;
        String b64search = null;
        String type = null;
        BigDecimal threshold = null;
        String datasetUri = null;
        Boolean filterBySubstance = null;
        String bundleUri = null;
        String sameas = null;
        Boolean mol = null;
        Integer page = null;
        Integer pagesize = null;
        Dataset response = api.searchBySimilarity(db, search, b64search, type, threshold, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize);
        // TODO: test validations
    }

    /**
     * Substructure search
     *
     * Returns compounds with the specified substructure
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchBySmartsTest() throws ApiException {
        String db = null;
        String search = null;
        String b64search = null;
        String type = null;
        String datasetUri = null;
        Boolean filterBySubstance = null;
        String bundleUri = null;
        String sameas = null;
        Boolean mol = null;
        Integer page = null;
        Integer pagesize = null;
        Dataset response = api.searchBySmarts(db, search, b64search, type, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize);
        // TODO: test validations
    }

}
