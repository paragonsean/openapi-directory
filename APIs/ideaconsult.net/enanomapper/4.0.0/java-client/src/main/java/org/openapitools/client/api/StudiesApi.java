/*
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Facet;
import org.openapitools.client.model.Investigation;
import org.openapitools.client.model.SubstanceStudy;
import org.openapitools.client.model.SubstanceStudySummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StudiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StudiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StudiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEndpointSummary
     * @param db Database ID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointSummaryCall(String db, String top, String category, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/query/study"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEndpointSummaryValidateBeforeCall(String db, String top, String category, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getEndpointSummary(Async)");
        }

        return getEndpointSummaryCall(db, top, category, _callback);

    }

    /**
     * Search endpoint summary
     * Returns endpoint summary
     * @param db Database ID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @return Facet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public Facet getEndpointSummary(String db, String top, String category) throws ApiException {
        ApiResponse<Facet> localVarResp = getEndpointSummaryWithHttpInfo(db, top, category);
        return localVarResp.getData();
    }

    /**
     * Search endpoint summary
     * Returns endpoint summary
     * @param db Database ID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @return ApiResponse&lt;Facet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Facet> getEndpointSummaryWithHttpInfo(String db, String top, String category) throws ApiException {
        okhttp3.Call localVarCall = getEndpointSummaryValidateBeforeCall(db, top, category, null);
        Type localVarReturnType = new TypeToken<Facet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search endpoint summary (asynchronously)
     * Returns endpoint summary
     * @param db Database ID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointSummaryAsync(String db, String top, String category, final ApiCallback<Facet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEndpointSummaryValidateBeforeCall(db, top, category, _callback);
        Type localVarReturnType = new TypeToken<Facet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInvestigationResults
     * @param db Database ID (required)
     * @param type query type (required)
     * @param search Search parameter, UUID of the investigation or a substance (required)
     * @param inchikey Search parameter, InChI key(s) of the substance component(s), comma delimited (optional)
     * @param id Search parameter, chemical structure or substance identifier(s), comma delimited (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestigationResultsCall(String db, String type, String search, String inchikey, String id, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/investigation"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (inchikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inchikey", inchikey));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            "application/x-javascript",
            "text/csv",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvestigationResultsValidateBeforeCall(String db, String type, String search, String inchikey, String id, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getInvestigationResults(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getInvestigationResults(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling getInvestigationResults(Async)");
        }

        return getInvestigationResultsCall(db, type, search, inchikey, id, page, pagesize, _callback);

    }

    /**
     * Details of multiple studies
     * Multiple studies in tabular form
     * @param db Database ID (required)
     * @param type query type (required)
     * @param search Search parameter, UUID of the investigation or a substance (required)
     * @param inchikey Search parameter, InChI key(s) of the substance component(s), comma delimited (optional)
     * @param id Search parameter, chemical structure or substance identifier(s), comma delimited (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return Investigation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public Investigation getInvestigationResults(String db, String type, String search, String inchikey, String id, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<Investigation> localVarResp = getInvestigationResultsWithHttpInfo(db, type, search, inchikey, id, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Details of multiple studies
     * Multiple studies in tabular form
     * @param db Database ID (required)
     * @param type query type (required)
     * @param search Search parameter, UUID of the investigation or a substance (required)
     * @param inchikey Search parameter, InChI key(s) of the substance component(s), comma delimited (optional)
     * @param id Search parameter, chemical structure or substance identifier(s), comma delimited (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;Investigation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Investigation> getInvestigationResultsWithHttpInfo(String db, String type, String search, String inchikey, String id, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getInvestigationResultsValidateBeforeCall(db, type, search, inchikey, id, page, pagesize, null);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Details of multiple studies (asynchronously)
     * Multiple studies in tabular form
     * @param db Database ID (required)
     * @param type query type (required)
     * @param search Search parameter, UUID of the investigation or a substance (required)
     * @param inchikey Search parameter, InChI key(s) of the substance component(s), comma delimited (optional)
     * @param id Search parameter, chemical structure or substance identifier(s), comma delimited (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvestigationResultsAsync(String db, String type, String search, String inchikey, String id, Integer page, Integer pagesize, final ApiCallback<Investigation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvestigationResultsValidateBeforeCall(db, type, search, inchikey, id, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<Investigation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceStudy
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID (optional)
     * @param investigationUuid Investigation UUID, a code to link different studies (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Substances found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Substances not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStudyCall(String db, String uuid, String top, String category, String propertyUri, String property, String investigationUuid, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/substance/{uuid}/study"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (propertyUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property_uri", propertyUri));
        }

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        if (investigationUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("investigation_uuid", investigationUuid));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceStudyValidateBeforeCall(String db, String uuid, String top, String category, String propertyUri, String property, String investigationUuid, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getSubstanceStudy(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getSubstanceStudy(Async)");
        }

        return getSubstanceStudyCall(db, uuid, top, category, propertyUri, property, investigationUuid, page, pagesize, _callback);

    }

    /**
     * get substance study
     * Returns substance study representation
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID (optional)
     * @param investigationUuid Investigation UUID, a code to link different studies (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return SubstanceStudy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Substances found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Substances not found </td><td>  -  </td></tr>
     </table>
     */
    public SubstanceStudy getSubstanceStudy(String db, String uuid, String top, String category, String propertyUri, String property, String investigationUuid, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<SubstanceStudy> localVarResp = getSubstanceStudyWithHttpInfo(db, uuid, top, category, propertyUri, property, investigationUuid, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * get substance study
     * Returns substance study representation
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID (optional)
     * @param investigationUuid Investigation UUID, a code to link different studies (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;SubstanceStudy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Substances found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Substances not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubstanceStudy> getSubstanceStudyWithHttpInfo(String db, String uuid, String top, String category, String propertyUri, String property, String investigationUuid, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceStudyValidateBeforeCall(db, uuid, top, category, propertyUri, property, investigationUuid, page, pagesize, null);
        Type localVarReturnType = new TypeToken<SubstanceStudy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * get substance study (asynchronously)
     * Returns substance study representation
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID (optional)
     * @param investigationUuid Investigation UUID, a code to link different studies (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Substances found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Substances not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStudyAsync(String db, String uuid, String top, String category, String propertyUri, String property, String investigationUuid, Integer page, Integer pagesize, final ApiCallback<SubstanceStudy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceStudyValidateBeforeCall(db, uuid, top, category, propertyUri, property, investigationUuid, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<SubstanceStudy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceStudySummary
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID, see Property service (optional)
     * @param result If true will group by topcategory,endpointcategory,interpretation result (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStudySummaryCall(String db, String uuid, String top, String category, String propertyUri, String property, Boolean result, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/substance/{uuid}/studySummary"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (propertyUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property_uri", propertyUri));
        }

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        if (result != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("result", result));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceStudySummaryValidateBeforeCall(String db, String uuid, String top, String category, String propertyUri, String property, Boolean result, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getSubstanceStudySummary(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getSubstanceStudySummary(Async)");
        }

        return getSubstanceStudySummaryCall(db, uuid, top, category, propertyUri, property, result, page, pagesize, _callback);

    }

    /**
     * Get study summary for the substance
     * Study summary
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID, see Property service (optional)
     * @param result If true will group by topcategory,endpointcategory,interpretation result (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return SubstanceStudySummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public SubstanceStudySummary getSubstanceStudySummary(String db, String uuid, String top, String category, String propertyUri, String property, Boolean result, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<SubstanceStudySummary> localVarResp = getSubstanceStudySummaryWithHttpInfo(db, uuid, top, category, propertyUri, property, result, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Get study summary for the substance
     * Study summary
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID, see Property service (optional)
     * @param result If true will group by topcategory,endpointcategory,interpretation result (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;SubstanceStudySummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubstanceStudySummary> getSubstanceStudySummaryWithHttpInfo(String db, String uuid, String top, String category, String propertyUri, String property, Boolean result, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceStudySummaryValidateBeforeCall(db, uuid, top, category, propertyUri, property, result, page, pagesize, null);
        Type localVarReturnType = new TypeToken<SubstanceStudySummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get study summary for the substance (asynchronously)
     * Study summary
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param top Top endpoint category (optional)
     * @param category Endpoint category (The value in the protocol.category.code field) (optional)
     * @param propertyUri Property URI https://data.enanomapper.net/property/{UUID} , see Property service (optional)
     * @param property Property UUID, see Property service (optional)
     * @param result If true will group by topcategory,endpointcategory,interpretation result (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStudySummaryAsync(String db, String uuid, String top, String category, String propertyUri, String property, Boolean result, Integer page, Integer pagesize, final ApiCallback<SubstanceStudySummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceStudySummaryValidateBeforeCall(db, uuid, top, category, propertyUri, property, result, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<SubstanceStudySummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
