/*
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Dataset;
import org.openapitools.client.model.SubstanceComposition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StructuresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StructuresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StructuresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSubstanceComposition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param all true (Show all compositions) false (do not show hidden compositions) (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceCompositionCall(String db, String uuid, Boolean all, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/substance/{uuid}/composition"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (all != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all", all));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceCompositionValidateBeforeCall(String db, String uuid, Boolean all, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getSubstanceComposition(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getSubstanceComposition(Async)");
        }

        return getSubstanceCompositionCall(db, uuid, all, page, pagesize, _callback);

    }

    /**
     * Substance composition
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param all true (Show all compositions) false (do not show hidden compositions) (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return SubstanceComposition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public SubstanceComposition getSubstanceComposition(String db, String uuid, Boolean all, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<SubstanceComposition> localVarResp = getSubstanceCompositionWithHttpInfo(db, uuid, all, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Substance composition
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param all true (Show all compositions) false (do not show hidden compositions) (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;SubstanceComposition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubstanceComposition> getSubstanceCompositionWithHttpInfo(String db, String uuid, Boolean all, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceCompositionValidateBeforeCall(db, uuid, all, page, pagesize, null);
        Type localVarReturnType = new TypeToken<SubstanceComposition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Substance composition (asynchronously)
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param all true (Show all compositions) false (do not show hidden compositions) (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceCompositionAsync(String db, String uuid, Boolean all, Integer page, Integer pagesize, final ApiCallback<SubstanceComposition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceCompositionValidateBeforeCall(db, uuid, all, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<SubstanceComposition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSubstanceStructures
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStructuresCall(String db, String uuid, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/substance/{uuid}/structures"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()))
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubstanceStructuresValidateBeforeCall(String db, String uuid, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling getSubstanceStructures(Async)");
        }

        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getSubstanceStructures(Async)");
        }

        return getSubstanceStructuresCall(db, uuid, page, pagesize, _callback);

    }

    /**
     * Get substance composition as a dataset
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public Dataset getSubstanceStructures(String db, String uuid, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<Dataset> localVarResp = getSubstanceStructuresWithHttpInfo(db, uuid, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Get substance composition as a dataset
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dataset> getSubstanceStructuresWithHttpInfo(String db, String uuid, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getSubstanceStructuresValidateBeforeCall(db, uuid, page, pagesize, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get substance composition as a dataset (asynchronously)
     * Returns substance composition
     * @param db Database ID (required)
     * @param uuid Substance UUID (required)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. compositions found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> compositions not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSubstanceStructuresAsync(String db, String uuid, Integer page, Integer pagesize, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSubstanceStructuresValidateBeforeCall(db, uuid, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchByIdentifier
     * @param db Database ID (required)
     * @param term search term type (required)
     * @param representation  (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param casesens Case sensitive search if yes (optional)
     * @param bundleUri Bundle URI (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact chemical structure search Documentation</a>
     */
    public okhttp3.Call searchByIdentifierCall(String db, String term, String representation, String search, String b64search, Boolean casesens, String bundleUri, String sameas, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/query/compound/{term}/{representation}"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()))
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()))
            .replace("{" + "representation" + "}", localVarApiClient.escapeString(representation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (b64search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("b64search", b64search));
        }

        if (casesens != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("casesens", casesens));
        }

        if (bundleUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundle_uri", bundleUri));
        }

        if (sameas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sameas", sameas));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchByIdentifierValidateBeforeCall(String db, String term, String representation, String search, String b64search, Boolean casesens, String bundleUri, String sameas, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling searchByIdentifier(Async)");
        }

        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling searchByIdentifier(Async)");
        }

        // verify the required parameter 'representation' is set
        if (representation == null) {
            throw new ApiException("Missing the required parameter 'representation' when calling searchByIdentifier(Async)");
        }

        return searchByIdentifierCall(db, term, representation, search, b64search, casesens, bundleUri, sameas, page, pagesize, _callback);

    }

    /**
     * Exact chemical structure search
     * Returns compounds found
     * @param db Database ID (required)
     * @param term search term type (required)
     * @param representation  (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param casesens Case sensitive search if yes (optional)
     * @param bundleUri Bundle URI (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact chemical structure search Documentation</a>
     */
    public Dataset searchByIdentifier(String db, String term, String representation, String search, String b64search, Boolean casesens, String bundleUri, String sameas, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<Dataset> localVarResp = searchByIdentifierWithHttpInfo(db, term, representation, search, b64search, casesens, bundleUri, sameas, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Exact chemical structure search
     * Returns compounds found
     * @param db Database ID (required)
     * @param term search term type (required)
     * @param representation  (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param casesens Case sensitive search if yes (optional)
     * @param bundleUri Bundle URI (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact chemical structure search Documentation</a>
     */
    public ApiResponse<Dataset> searchByIdentifierWithHttpInfo(String db, String term, String representation, String search, String b64search, Boolean casesens, String bundleUri, String sameas, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = searchByIdentifierValidateBeforeCall(db, term, representation, search, b64search, casesens, bundleUri, sameas, page, pagesize, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exact chemical structure search (asynchronously)
     * Returns compounds found
     * @param db Database ID (required)
     * @param term search term type (required)
     * @param representation  (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param casesens Case sensitive search if yes (optional)
     * @param bundleUri Bundle URI (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact chemical structure search Documentation</a>
     */
    public okhttp3.Call searchByIdentifierAsync(String db, String term, String representation, String search, String b64search, Boolean casesens, String bundleUri, String sameas, Integer page, Integer pagesize, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchByIdentifierValidateBeforeCall(db, term, representation, search, b64search, casesens, bundleUri, sameas, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchBySimilarity
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param threshold Similarity threshold (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact similarity search Documentation</a>
     */
    public okhttp3.Call searchBySimilarityCall(String db, String search, String b64search, String type, BigDecimal threshold, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/query/similarity"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (b64search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("b64search", b64search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (threshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("threshold", threshold));
        }

        if (datasetUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataset_uri", datasetUri));
        }

        if (filterBySubstance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterBySubstance", filterBySubstance));
        }

        if (bundleUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundle_uri", bundleUri));
        }

        if (sameas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sameas", sameas));
        }

        if (mol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mol", mol));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBySimilarityValidateBeforeCall(String db, String search, String b64search, String type, BigDecimal threshold, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling searchBySimilarity(Async)");
        }

        return searchBySimilarityCall(db, search, b64search, type, threshold, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, _callback);

    }

    /**
     * Exact similarity search
     * Returns similar compounds
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param threshold Similarity threshold (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact similarity search Documentation</a>
     */
    public Dataset searchBySimilarity(String db, String search, String b64search, String type, BigDecimal threshold, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<Dataset> localVarResp = searchBySimilarityWithHttpInfo(db, search, b64search, type, threshold, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Exact similarity search
     * Returns similar compounds
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param threshold Similarity threshold (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact similarity search Documentation</a>
     */
    public ApiResponse<Dataset> searchBySimilarityWithHttpInfo(String db, String search, String b64search, String type, BigDecimal threshold, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = searchBySimilarityValidateBeforeCall(db, search, b64search, type, threshold, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exact similarity search (asynchronously)
     * Returns similar compounds
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param threshold Similarity threshold (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Exact similarity search Documentation</a>
     */
    public okhttp3.Call searchBySimilarityAsync(String db, String search, String b64search, String type, BigDecimal threshold, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBySimilarityValidateBeforeCall(db, search, b64search, type, threshold, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchBySmarts
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Substructure search Documentation</a>
     */
    public okhttp3.Call searchBySmartsCall(String db, String search, String b64search, String type, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enm/{db}/query/smarts"
            .replace("{" + "db" + "}", localVarApiClient.escapeString(db.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (b64search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("b64search", b64search));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (datasetUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataset_uri", datasetUri));
        }

        if (filterBySubstance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterBySubstance", filterBySubstance));
        }

        if (bundleUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundle_uri", bundleUri));
        }

        if (sameas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sameas", sameas));
        }

        if (mol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mol", mol));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBySmartsValidateBeforeCall(String db, String search, String b64search, String type, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'db' is set
        if (db == null) {
            throw new ApiException("Missing the required parameter 'db' when calling searchBySmarts(Async)");
        }

        return searchBySmartsCall(db, search, b64search, type, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, _callback);

    }

    /**
     * Substructure search
     * Returns compounds with the specified substructure
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return Dataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Substructure search Documentation</a>
     */
    public Dataset searchBySmarts(String db, String search, String b64search, String type, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize) throws ApiException {
        ApiResponse<Dataset> localVarResp = searchBySmartsWithHttpInfo(db, search, b64search, type, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize);
        return localVarResp.getData();
    }

    /**
     * Substructure search
     * Returns compounds with the specified substructure
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @return ApiResponse&lt;Dataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Substructure search Documentation</a>
     */
    public ApiResponse<Dataset> searchBySmartsWithHttpInfo(String db, String search, String b64search, String type, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = searchBySmartsValidateBeforeCall(db, search, b64search, type, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, null);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Substructure search (asynchronously)
     * Returns compounds with the specified substructure
     * @param db Database ID (required)
     * @param search Compound identifier (SMILES, InChI, name, registry identifiers) (optional)
     * @param b64search Base64 encoded mol file; if included, will be used instead of the &#39;search&#39; parameter (optional)
     * @param type Defines the expected content of the search parameter (optional)
     * @param datasetUri Restrict the search within the AMBIT dataset specified with the URI (optional)
     * @param filterBySubstance Restrict the search within the set of structures with assigned substances (optional)
     * @param bundleUri If the structure is used in the specified bundle URI, the selection tag will be returned (optional)
     * @param sameas Ontology URI to define groups of columns (optional)
     * @param mol Only for application/json; to include mol as JSON field (optional)
     * @param page Starting page (optional)
     * @param pagesize Page size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Entries found </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entries not found </td><td>  -  </td></tr>
     </table>
     * Learn more about operations provided by this API.
     * @see <a href="http://ambit.sf.net">Substructure search Documentation</a>
     */
    public okhttp3.Call searchBySmartsAsync(String db, String search, String b64search, String type, String datasetUri, Boolean filterBySubstance, String bundleUri, String sameas, Boolean mol, Integer page, Integer pagesize, final ApiCallback<Dataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBySmartsValidateBeforeCall(db, search, b64search, type, datasetUri, filterBySubstance, bundleUri, sameas, mol, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<Dataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
