/*
 * eNanoMapper database
 * AMBIT REST web services [eNanoMapper profile] with free text & faceted search
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@ideaconsult.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SolrResponse;
import org.openapitools.client.model.SolrqueryPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for solrqueryGet
     * @param q The query (optional)
     * @param fq Filter query (optional)
     * @param fl Field list (optional)
     * @param start Starting page (optional)
     * @param rows Page size (optional)
     * @param wt Response format (optional, default to xml)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE           </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solrqueryGetCall(String q, String fq, String fl, Integer start, Integer rows, String wt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (fq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fq", fq));
        }

        if (fl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fl", fl));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (wt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wt", wt));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call solrqueryGetValidateBeforeCall(String q, String fq, String fl, Integer start, Integer rows, String wt, final ApiCallback _callback) throws ApiException {
        return solrqueryGetCall(q, fq, fl, start, rows, wt, _callback);

    }

    /**
     * Apache Solr powered search
     * GET is simpler to use, but imposes restrictions on the complexity and the lenght of the parameters.
     * @param q The query (optional)
     * @param fq Filter query (optional)
     * @param fl Field list (optional)
     * @param start Starting page (optional)
     * @param rows Page size (optional)
     * @param wt Response format (optional, default to xml)
     * @return SolrResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE           </td><td>  -  </td></tr>
     </table>
     */
    public SolrResponse solrqueryGet(String q, String fq, String fl, Integer start, Integer rows, String wt) throws ApiException {
        ApiResponse<SolrResponse> localVarResp = solrqueryGetWithHttpInfo(q, fq, fl, start, rows, wt);
        return localVarResp.getData();
    }

    /**
     * Apache Solr powered search
     * GET is simpler to use, but imposes restrictions on the complexity and the lenght of the parameters.
     * @param q The query (optional)
     * @param fq Filter query (optional)
     * @param fl Field list (optional)
     * @param start Starting page (optional)
     * @param rows Page size (optional)
     * @param wt Response format (optional, default to xml)
     * @return ApiResponse&lt;SolrResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE           </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SolrResponse> solrqueryGetWithHttpInfo(String q, String fq, String fl, Integer start, Integer rows, String wt) throws ApiException {
        okhttp3.Call localVarCall = solrqueryGetValidateBeforeCall(q, fq, fl, start, rows, wt, null);
        Type localVarReturnType = new TypeToken<SolrResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apache Solr powered search (asynchronously)
     * GET is simpler to use, but imposes restrictions on the complexity and the lenght of the parameters.
     * @param q The query (optional)
     * @param fq Filter query (optional)
     * @param fl Field list (optional)
     * @param start Starting page (optional)
     * @param rows Page size (optional)
     * @param wt Response format (optional, default to xml)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE           </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solrqueryGetAsync(String q, String fq, String fl, Integer start, Integer rows, String wt, final ApiCallback<SolrResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = solrqueryGetValidateBeforeCall(q, fq, fl, start, rows, wt, _callback);
        Type localVarReturnType = new TypeToken<SolrResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for solrqueryPost
     * @param wt Response format (optional, default to xml)
     * @param solrqueryPostRequest a JSON object with Solr query parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solrqueryPostCall(String wt, SolrqueryPostRequest solrqueryPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = solrqueryPostRequest;

        // create path and map variables
        String localVarPath = "/select";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wt", wt));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call solrqueryPostValidateBeforeCall(String wt, SolrqueryPostRequest solrqueryPostRequest, final ApiCallback _callback) throws ApiException {
        return solrqueryPostCall(wt, solrqueryPostRequest, _callback);

    }

    /**
     * Apache Solr powered search
     * POST is more complex to use, but also allows for much for complex and lengthy queries.
     * @param wt Response format (optional, default to xml)
     * @param solrqueryPostRequest a JSON object with Solr query parameters (optional)
     * @return SolrResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE </td><td>  -  </td></tr>
     </table>
     */
    public SolrResponse solrqueryPost(String wt, SolrqueryPostRequest solrqueryPostRequest) throws ApiException {
        ApiResponse<SolrResponse> localVarResp = solrqueryPostWithHttpInfo(wt, solrqueryPostRequest);
        return localVarResp.getData();
    }

    /**
     * Apache Solr powered search
     * POST is more complex to use, but also allows for much for complex and lengthy queries.
     * @param wt Response format (optional, default to xml)
     * @param solrqueryPostRequest a JSON object with Solr query parameters (optional)
     * @return ApiResponse&lt;SolrResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SolrResponse> solrqueryPostWithHttpInfo(String wt, SolrqueryPostRequest solrqueryPostRequest) throws ApiException {
        okhttp3.Call localVarCall = solrqueryPostValidateBeforeCall(wt, solrqueryPostRequest, null);
        Type localVarReturnType = new TypeToken<SolrResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apache Solr powered search (asynchronously)
     * POST is more complex to use, but also allows for much for complex and lengthy queries.
     * @param wt Response format (optional, default to xml)
     * @param solrqueryPostRequest a JSON object with Solr query parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query performed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD_REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT_FOUND </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> CONFLICT </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> UNSUPPORTED_MEDIA_TYPE </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> SERVER_ERROR </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> SERVICE_UNAVAILABLE </td><td>  -  </td></tr>
        <tr><td> 510 </td><td> INVALID_STATE </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call solrqueryPostAsync(String wt, SolrqueryPostRequest solrqueryPostRequest, final ApiCallback<SolrResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = solrqueryPostValidateBeforeCall(wt, solrqueryPostRequest, _callback);
        Type localVarReturnType = new TypeToken<SolrResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
