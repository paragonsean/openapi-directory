# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Investigation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_documents_: object=None, assay: str=None, document_uuid: str=None, effectendpoint: str=None, endpoint: str=None, endpointcategory: str=None, err: float=None, err_qualifier: str=None, guidance: str=None, investigation: str=None, lo_qualifier: str=None, lo_value: float=None, name: str=None, owner_name: str=None, publicname: str=None, reference: str=None, reference_owner: str=None, reference_year: str=None, resulttype: str=None, s_uuid: str=None, study_result_type: str=None, substance_type: str=None, text_value: str=None, topcategory: str=None, type_s: str=None, unit: str=None, up_qualifier: str=None, up_value: float=None, updated: str=None):
        """Investigation - a model defined in OpenAPI

        :param child_documents_: The child_documents_ of this Investigation.
        :param assay: The assay of this Investigation.
        :param document_uuid: The document_uuid of this Investigation.
        :param effectendpoint: The effectendpoint of this Investigation.
        :param endpoint: The endpoint of this Investigation.
        :param endpointcategory: The endpointcategory of this Investigation.
        :param err: The err of this Investigation.
        :param err_qualifier: The err_qualifier of this Investigation.
        :param guidance: The guidance of this Investigation.
        :param investigation: The investigation of this Investigation.
        :param lo_qualifier: The lo_qualifier of this Investigation.
        :param lo_value: The lo_value of this Investigation.
        :param name: The name of this Investigation.
        :param owner_name: The owner_name of this Investigation.
        :param publicname: The publicname of this Investigation.
        :param reference: The reference of this Investigation.
        :param reference_owner: The reference_owner of this Investigation.
        :param reference_year: The reference_year of this Investigation.
        :param resulttype: The resulttype of this Investigation.
        :param s_uuid: The s_uuid of this Investigation.
        :param study_result_type: The study_result_type of this Investigation.
        :param substance_type: The substance_type of this Investigation.
        :param text_value: The text_value of this Investigation.
        :param topcategory: The topcategory of this Investigation.
        :param type_s: The type_s of this Investigation.
        :param unit: The unit of this Investigation.
        :param up_qualifier: The up_qualifier of this Investigation.
        :param up_value: The up_value of this Investigation.
        :param updated: The updated of this Investigation.
        """
        self.openapi_types = {
            'child_documents_': object,
            'assay': str,
            'document_uuid': str,
            'effectendpoint': str,
            'endpoint': str,
            'endpointcategory': str,
            'err': float,
            'err_qualifier': str,
            'guidance': str,
            'investigation': str,
            'lo_qualifier': str,
            'lo_value': float,
            'name': str,
            'owner_name': str,
            'publicname': str,
            'reference': str,
            'reference_owner': str,
            'reference_year': str,
            'resulttype': str,
            's_uuid': str,
            'study_result_type': str,
            'substance_type': str,
            'text_value': str,
            'topcategory': str,
            'type_s': str,
            'unit': str,
            'up_qualifier': str,
            'up_value': float,
            'updated': str
        }

        self.attribute_map = {
            'child_documents_': '_childDocuments_',
            'assay': 'assay',
            'document_uuid': 'document_uuid',
            'effectendpoint': 'effectendpoint',
            'endpoint': 'endpoint',
            'endpointcategory': 'endpointcategory',
            'err': 'err',
            'err_qualifier': 'errQualifier',
            'guidance': 'guidance',
            'investigation': 'investigation',
            'lo_qualifier': 'loQualifier',
            'lo_value': 'loValue',
            'name': 'name',
            'owner_name': 'owner_name',
            'publicname': 'publicname',
            'reference': 'reference',
            'reference_owner': 'reference_owner',
            'reference_year': 'reference_year',
            'resulttype': 'resulttype',
            's_uuid': 's_uuid',
            'study_result_type': 'studyResultType',
            'substance_type': 'substanceType',
            'text_value': 'textValue',
            'topcategory': 'topcategory',
            'type_s': 'type_s',
            'unit': 'unit',
            'up_qualifier': 'upQualifier',
            'up_value': 'upValue',
            'updated': 'updated'
        }

        self._child_documents_ = child_documents_
        self._assay = assay
        self._document_uuid = document_uuid
        self._effectendpoint = effectendpoint
        self._endpoint = endpoint
        self._endpointcategory = endpointcategory
        self._err = err
        self._err_qualifier = err_qualifier
        self._guidance = guidance
        self._investigation = investigation
        self._lo_qualifier = lo_qualifier
        self._lo_value = lo_value
        self._name = name
        self._owner_name = owner_name
        self._publicname = publicname
        self._reference = reference
        self._reference_owner = reference_owner
        self._reference_year = reference_year
        self._resulttype = resulttype
        self._s_uuid = s_uuid
        self._study_result_type = study_result_type
        self._substance_type = substance_type
        self._text_value = text_value
        self._topcategory = topcategory
        self._type_s = type_s
        self._unit = unit
        self._up_qualifier = up_qualifier
        self._up_value = up_value
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Investigation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Investigation of this Investigation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_documents_(self):
        """Gets the child_documents_ of this Investigation.


        :return: The child_documents_ of this Investigation.
        :rtype: object
        """
        return self._child_documents_

    @child_documents_.setter
    def child_documents_(self, child_documents_):
        """Sets the child_documents_ of this Investigation.


        :param child_documents_: The child_documents_ of this Investigation.
        :type child_documents_: object
        """

        self._child_documents_ = child_documents_

    @property
    def assay(self):
        """Gets the assay of this Investigation.


        :return: The assay of this Investigation.
        :rtype: str
        """
        return self._assay

    @assay.setter
    def assay(self, assay):
        """Sets the assay of this Investigation.


        :param assay: The assay of this Investigation.
        :type assay: str
        """

        self._assay = assay

    @property
    def document_uuid(self):
        """Gets the document_uuid of this Investigation.


        :return: The document_uuid of this Investigation.
        :rtype: str
        """
        return self._document_uuid

    @document_uuid.setter
    def document_uuid(self, document_uuid):
        """Sets the document_uuid of this Investigation.


        :param document_uuid: The document_uuid of this Investigation.
        :type document_uuid: str
        """

        self._document_uuid = document_uuid

    @property
    def effectendpoint(self):
        """Gets the effectendpoint of this Investigation.


        :return: The effectendpoint of this Investigation.
        :rtype: str
        """
        return self._effectendpoint

    @effectendpoint.setter
    def effectendpoint(self, effectendpoint):
        """Sets the effectendpoint of this Investigation.


        :param effectendpoint: The effectendpoint of this Investigation.
        :type effectendpoint: str
        """

        self._effectendpoint = effectendpoint

    @property
    def endpoint(self):
        """Gets the endpoint of this Investigation.


        :return: The endpoint of this Investigation.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Investigation.


        :param endpoint: The endpoint of this Investigation.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def endpointcategory(self):
        """Gets the endpointcategory of this Investigation.


        :return: The endpointcategory of this Investigation.
        :rtype: str
        """
        return self._endpointcategory

    @endpointcategory.setter
    def endpointcategory(self, endpointcategory):
        """Sets the endpointcategory of this Investigation.


        :param endpointcategory: The endpointcategory of this Investigation.
        :type endpointcategory: str
        """

        self._endpointcategory = endpointcategory

    @property
    def err(self):
        """Gets the err of this Investigation.


        :return: The err of this Investigation.
        :rtype: float
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this Investigation.


        :param err: The err of this Investigation.
        :type err: float
        """

        self._err = err

    @property
    def err_qualifier(self):
        """Gets the err_qualifier of this Investigation.


        :return: The err_qualifier of this Investigation.
        :rtype: str
        """
        return self._err_qualifier

    @err_qualifier.setter
    def err_qualifier(self, err_qualifier):
        """Sets the err_qualifier of this Investigation.


        :param err_qualifier: The err_qualifier of this Investigation.
        :type err_qualifier: str
        """

        self._err_qualifier = err_qualifier

    @property
    def guidance(self):
        """Gets the guidance of this Investigation.


        :return: The guidance of this Investigation.
        :rtype: str
        """
        return self._guidance

    @guidance.setter
    def guidance(self, guidance):
        """Sets the guidance of this Investigation.


        :param guidance: The guidance of this Investigation.
        :type guidance: str
        """

        self._guidance = guidance

    @property
    def investigation(self):
        """Gets the investigation of this Investigation.


        :return: The investigation of this Investigation.
        :rtype: str
        """
        return self._investigation

    @investigation.setter
    def investigation(self, investigation):
        """Sets the investigation of this Investigation.


        :param investigation: The investigation of this Investigation.
        :type investigation: str
        """

        self._investigation = investigation

    @property
    def lo_qualifier(self):
        """Gets the lo_qualifier of this Investigation.


        :return: The lo_qualifier of this Investigation.
        :rtype: str
        """
        return self._lo_qualifier

    @lo_qualifier.setter
    def lo_qualifier(self, lo_qualifier):
        """Sets the lo_qualifier of this Investigation.


        :param lo_qualifier: The lo_qualifier of this Investigation.
        :type lo_qualifier: str
        """

        self._lo_qualifier = lo_qualifier

    @property
    def lo_value(self):
        """Gets the lo_value of this Investigation.


        :return: The lo_value of this Investigation.
        :rtype: float
        """
        return self._lo_value

    @lo_value.setter
    def lo_value(self, lo_value):
        """Sets the lo_value of this Investigation.


        :param lo_value: The lo_value of this Investigation.
        :type lo_value: float
        """

        self._lo_value = lo_value

    @property
    def name(self):
        """Gets the name of this Investigation.


        :return: The name of this Investigation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Investigation.


        :param name: The name of this Investigation.
        :type name: str
        """

        self._name = name

    @property
    def owner_name(self):
        """Gets the owner_name of this Investigation.


        :return: The owner_name of this Investigation.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Investigation.


        :param owner_name: The owner_name of this Investigation.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def publicname(self):
        """Gets the publicname of this Investigation.


        :return: The publicname of this Investigation.
        :rtype: str
        """
        return self._publicname

    @publicname.setter
    def publicname(self, publicname):
        """Sets the publicname of this Investigation.


        :param publicname: The publicname of this Investigation.
        :type publicname: str
        """

        self._publicname = publicname

    @property
    def reference(self):
        """Gets the reference of this Investigation.


        :return: The reference of this Investigation.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Investigation.


        :param reference: The reference of this Investigation.
        :type reference: str
        """

        self._reference = reference

    @property
    def reference_owner(self):
        """Gets the reference_owner of this Investigation.


        :return: The reference_owner of this Investigation.
        :rtype: str
        """
        return self._reference_owner

    @reference_owner.setter
    def reference_owner(self, reference_owner):
        """Sets the reference_owner of this Investigation.


        :param reference_owner: The reference_owner of this Investigation.
        :type reference_owner: str
        """

        self._reference_owner = reference_owner

    @property
    def reference_year(self):
        """Gets the reference_year of this Investigation.


        :return: The reference_year of this Investigation.
        :rtype: str
        """
        return self._reference_year

    @reference_year.setter
    def reference_year(self, reference_year):
        """Sets the reference_year of this Investigation.


        :param reference_year: The reference_year of this Investigation.
        :type reference_year: str
        """

        self._reference_year = reference_year

    @property
    def resulttype(self):
        """Gets the resulttype of this Investigation.


        :return: The resulttype of this Investigation.
        :rtype: str
        """
        return self._resulttype

    @resulttype.setter
    def resulttype(self, resulttype):
        """Sets the resulttype of this Investigation.


        :param resulttype: The resulttype of this Investigation.
        :type resulttype: str
        """

        self._resulttype = resulttype

    @property
    def s_uuid(self):
        """Gets the s_uuid of this Investigation.


        :return: The s_uuid of this Investigation.
        :rtype: str
        """
        return self._s_uuid

    @s_uuid.setter
    def s_uuid(self, s_uuid):
        """Sets the s_uuid of this Investigation.


        :param s_uuid: The s_uuid of this Investigation.
        :type s_uuid: str
        """

        self._s_uuid = s_uuid

    @property
    def study_result_type(self):
        """Gets the study_result_type of this Investigation.


        :return: The study_result_type of this Investigation.
        :rtype: str
        """
        return self._study_result_type

    @study_result_type.setter
    def study_result_type(self, study_result_type):
        """Sets the study_result_type of this Investigation.


        :param study_result_type: The study_result_type of this Investigation.
        :type study_result_type: str
        """

        self._study_result_type = study_result_type

    @property
    def substance_type(self):
        """Gets the substance_type of this Investigation.


        :return: The substance_type of this Investigation.
        :rtype: str
        """
        return self._substance_type

    @substance_type.setter
    def substance_type(self, substance_type):
        """Sets the substance_type of this Investigation.


        :param substance_type: The substance_type of this Investigation.
        :type substance_type: str
        """

        self._substance_type = substance_type

    @property
    def text_value(self):
        """Gets the text_value of this Investigation.


        :return: The text_value of this Investigation.
        :rtype: str
        """
        return self._text_value

    @text_value.setter
    def text_value(self, text_value):
        """Sets the text_value of this Investigation.


        :param text_value: The text_value of this Investigation.
        :type text_value: str
        """

        self._text_value = text_value

    @property
    def topcategory(self):
        """Gets the topcategory of this Investigation.


        :return: The topcategory of this Investigation.
        :rtype: str
        """
        return self._topcategory

    @topcategory.setter
    def topcategory(self, topcategory):
        """Sets the topcategory of this Investigation.


        :param topcategory: The topcategory of this Investigation.
        :type topcategory: str
        """

        self._topcategory = topcategory

    @property
    def type_s(self):
        """Gets the type_s of this Investigation.


        :return: The type_s of this Investigation.
        :rtype: str
        """
        return self._type_s

    @type_s.setter
    def type_s(self, type_s):
        """Sets the type_s of this Investigation.


        :param type_s: The type_s of this Investigation.
        :type type_s: str
        """

        self._type_s = type_s

    @property
    def unit(self):
        """Gets the unit of this Investigation.


        :return: The unit of this Investigation.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Investigation.


        :param unit: The unit of this Investigation.
        :type unit: str
        """

        self._unit = unit

    @property
    def up_qualifier(self):
        """Gets the up_qualifier of this Investigation.


        :return: The up_qualifier of this Investigation.
        :rtype: str
        """
        return self._up_qualifier

    @up_qualifier.setter
    def up_qualifier(self, up_qualifier):
        """Sets the up_qualifier of this Investigation.


        :param up_qualifier: The up_qualifier of this Investigation.
        :type up_qualifier: str
        """

        self._up_qualifier = up_qualifier

    @property
    def up_value(self):
        """Gets the up_value of this Investigation.


        :return: The up_value of this Investigation.
        :rtype: float
        """
        return self._up_value

    @up_value.setter
    def up_value(self, up_value):
        """Sets the up_value of this Investigation.


        :param up_value: The up_value of this Investigation.
        :type up_value: float
        """

        self._up_value = up_value

    @property
    def updated(self):
        """Gets the updated of this Investigation.


        :return: The updated of this Investigation.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Investigation.


        :param updated: The updated of this Investigation.
        :type updated: str
        """

        self._updated = updated
