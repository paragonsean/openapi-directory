# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, description: str=None, expression: str=None, id: int=None, type: str=None):
        """Attribute - a model defined in OpenAPI

        :param attribute: The attribute of this Attribute.
        :param description: The description of this Attribute.
        :param expression: The expression of this Attribute.
        :param id: The id of this Attribute.
        :param type: The type of this Attribute.
        """
        self.openapi_types = {
            'attribute': str,
            'description': str,
            'expression': str,
            'id': int,
            'type': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'description': 'description',
            'expression': 'expression',
            'id': 'id',
            'type': 'type'
        }

        self._attribute = attribute
        self._description = description
        self._expression = expression
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attribute of this Attribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this Attribute.


        :return: The attribute of this Attribute.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this Attribute.


        :param attribute: The attribute of this Attribute.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def description(self):
        """Gets the description of this Attribute.


        :return: The description of this Attribute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attribute.


        :param description: The description of this Attribute.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this Attribute.


        :return: The expression of this Attribute.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Attribute.


        :param expression: The expression of this Attribute.
        :type expression: str
        """

        self._expression = expression

    @property
    def id(self):
        """Gets the id of this Attribute.


        :return: The id of this Attribute.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attribute.


        :param id: The id of this Attribute.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Attribute.

        String|Number|Boolean

        :return: The type of this Attribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attribute.

        String|Number|Boolean

        :param type: The type of this Attribute.
        :type type: str
        """

        self._type = type
