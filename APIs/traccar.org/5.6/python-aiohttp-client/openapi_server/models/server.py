# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Server(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, bing_key: str=None, coordinate_format: str=None, device_readonly: bool=None, force_settings: bool=None, id: int=None, latitude: float=None, limit_commands: bool=None, longitude: float=None, map: str=None, map_url: str=None, poi_layer: str=None, readonly: bool=None, registration: bool=None, twelve_hour_format: bool=None, version: str=None, zoom: int=None):
        """Server - a model defined in OpenAPI

        :param attributes: The attributes of this Server.
        :param bing_key: The bing_key of this Server.
        :param coordinate_format: The coordinate_format of this Server.
        :param device_readonly: The device_readonly of this Server.
        :param force_settings: The force_settings of this Server.
        :param id: The id of this Server.
        :param latitude: The latitude of this Server.
        :param limit_commands: The limit_commands of this Server.
        :param longitude: The longitude of this Server.
        :param map: The map of this Server.
        :param map_url: The map_url of this Server.
        :param poi_layer: The poi_layer of this Server.
        :param readonly: The readonly of this Server.
        :param registration: The registration of this Server.
        :param twelve_hour_format: The twelve_hour_format of this Server.
        :param version: The version of this Server.
        :param zoom: The zoom of this Server.
        """
        self.openapi_types = {
            'attributes': object,
            'bing_key': str,
            'coordinate_format': str,
            'device_readonly': bool,
            'force_settings': bool,
            'id': int,
            'latitude': float,
            'limit_commands': bool,
            'longitude': float,
            'map': str,
            'map_url': str,
            'poi_layer': str,
            'readonly': bool,
            'registration': bool,
            'twelve_hour_format': bool,
            'version': str,
            'zoom': int
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'bing_key': 'bingKey',
            'coordinate_format': 'coordinateFormat',
            'device_readonly': 'deviceReadonly',
            'force_settings': 'forceSettings',
            'id': 'id',
            'latitude': 'latitude',
            'limit_commands': 'limitCommands',
            'longitude': 'longitude',
            'map': 'map',
            'map_url': 'mapUrl',
            'poi_layer': 'poiLayer',
            'readonly': 'readonly',
            'registration': 'registration',
            'twelve_hour_format': 'twelveHourFormat',
            'version': 'version',
            'zoom': 'zoom'
        }

        self._attributes = attributes
        self._bing_key = bing_key
        self._coordinate_format = coordinate_format
        self._device_readonly = device_readonly
        self._force_settings = force_settings
        self._id = id
        self._latitude = latitude
        self._limit_commands = limit_commands
        self._longitude = longitude
        self._map = map
        self._map_url = map_url
        self._poi_layer = poi_layer
        self._readonly = readonly
        self._registration = registration
        self._twelve_hour_format = twelve_hour_format
        self._version = version
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Server of this Server.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Server.


        :return: The attributes of this Server.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Server.


        :param attributes: The attributes of this Server.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def bing_key(self):
        """Gets the bing_key of this Server.


        :return: The bing_key of this Server.
        :rtype: str
        """
        return self._bing_key

    @bing_key.setter
    def bing_key(self, bing_key):
        """Sets the bing_key of this Server.


        :param bing_key: The bing_key of this Server.
        :type bing_key: str
        """

        self._bing_key = bing_key

    @property
    def coordinate_format(self):
        """Gets the coordinate_format of this Server.


        :return: The coordinate_format of this Server.
        :rtype: str
        """
        return self._coordinate_format

    @coordinate_format.setter
    def coordinate_format(self, coordinate_format):
        """Sets the coordinate_format of this Server.


        :param coordinate_format: The coordinate_format of this Server.
        :type coordinate_format: str
        """

        self._coordinate_format = coordinate_format

    @property
    def device_readonly(self):
        """Gets the device_readonly of this Server.


        :return: The device_readonly of this Server.
        :rtype: bool
        """
        return self._device_readonly

    @device_readonly.setter
    def device_readonly(self, device_readonly):
        """Sets the device_readonly of this Server.


        :param device_readonly: The device_readonly of this Server.
        :type device_readonly: bool
        """

        self._device_readonly = device_readonly

    @property
    def force_settings(self):
        """Gets the force_settings of this Server.


        :return: The force_settings of this Server.
        :rtype: bool
        """
        return self._force_settings

    @force_settings.setter
    def force_settings(self, force_settings):
        """Sets the force_settings of this Server.


        :param force_settings: The force_settings of this Server.
        :type force_settings: bool
        """

        self._force_settings = force_settings

    @property
    def id(self):
        """Gets the id of this Server.


        :return: The id of this Server.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Server.


        :param id: The id of this Server.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this Server.


        :return: The latitude of this Server.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Server.


        :param latitude: The latitude of this Server.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def limit_commands(self):
        """Gets the limit_commands of this Server.


        :return: The limit_commands of this Server.
        :rtype: bool
        """
        return self._limit_commands

    @limit_commands.setter
    def limit_commands(self, limit_commands):
        """Sets the limit_commands of this Server.


        :param limit_commands: The limit_commands of this Server.
        :type limit_commands: bool
        """

        self._limit_commands = limit_commands

    @property
    def longitude(self):
        """Gets the longitude of this Server.


        :return: The longitude of this Server.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Server.


        :param longitude: The longitude of this Server.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def map(self):
        """Gets the map of this Server.


        :return: The map of this Server.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Server.


        :param map: The map of this Server.
        :type map: str
        """

        self._map = map

    @property
    def map_url(self):
        """Gets the map_url of this Server.


        :return: The map_url of this Server.
        :rtype: str
        """
        return self._map_url

    @map_url.setter
    def map_url(self, map_url):
        """Sets the map_url of this Server.


        :param map_url: The map_url of this Server.
        :type map_url: str
        """

        self._map_url = map_url

    @property
    def poi_layer(self):
        """Gets the poi_layer of this Server.


        :return: The poi_layer of this Server.
        :rtype: str
        """
        return self._poi_layer

    @poi_layer.setter
    def poi_layer(self, poi_layer):
        """Sets the poi_layer of this Server.


        :param poi_layer: The poi_layer of this Server.
        :type poi_layer: str
        """

        self._poi_layer = poi_layer

    @property
    def readonly(self):
        """Gets the readonly of this Server.


        :return: The readonly of this Server.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this Server.


        :param readonly: The readonly of this Server.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def registration(self):
        """Gets the registration of this Server.


        :return: The registration of this Server.
        :rtype: bool
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Server.


        :param registration: The registration of this Server.
        :type registration: bool
        """

        self._registration = registration

    @property
    def twelve_hour_format(self):
        """Gets the twelve_hour_format of this Server.


        :return: The twelve_hour_format of this Server.
        :rtype: bool
        """
        return self._twelve_hour_format

    @twelve_hour_format.setter
    def twelve_hour_format(self, twelve_hour_format):
        """Sets the twelve_hour_format of this Server.


        :param twelve_hour_format: The twelve_hour_format of this Server.
        :type twelve_hour_format: bool
        """

        self._twelve_hour_format = twelve_hour_format

    @property
    def version(self):
        """Gets the version of this Server.


        :return: The version of this Server.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Server.


        :param version: The version of this Server.
        :type version: str
        """

        self._version = version

    @property
    def zoom(self):
        """Gets the zoom of this Server.


        :return: The zoom of this Server.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this Server.


        :param zoom: The zoom of this Server.
        :type zoom: int
        """

        self._zoom = zoom
