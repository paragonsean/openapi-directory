# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, device_id: int=None, event_time: datetime=None, geofence_id: int=None, id: int=None, maintenance_id: int=None, position_id: int=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param attributes: The attributes of this Event.
        :param device_id: The device_id of this Event.
        :param event_time: The event_time of this Event.
        :param geofence_id: The geofence_id of this Event.
        :param id: The id of this Event.
        :param maintenance_id: The maintenance_id of this Event.
        :param position_id: The position_id of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            'attributes': object,
            'device_id': int,
            'event_time': datetime,
            'geofence_id': int,
            'id': int,
            'maintenance_id': int,
            'position_id': int,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'device_id': 'deviceId',
            'event_time': 'eventTime',
            'geofence_id': 'geofenceId',
            'id': 'id',
            'maintenance_id': 'maintenanceId',
            'position_id': 'positionId',
            'type': 'type'
        }

        self._attributes = attributes
        self._device_id = device_id
        self._event_time = event_time
        self._geofence_id = geofence_id
        self._id = id
        self._maintenance_id = maintenance_id
        self._position_id = position_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Event.


        :return: The attributes of this Event.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Event.


        :param attributes: The attributes of this Event.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def device_id(self):
        """Gets the device_id of this Event.


        :return: The device_id of this Event.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Event.


        :param device_id: The device_id of this Event.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def event_time(self):
        """Gets the event_time of this Event.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The event_time of this Event.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this Event.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param event_time: The event_time of this Event.
        :type event_time: datetime
        """

        self._event_time = event_time

    @property
    def geofence_id(self):
        """Gets the geofence_id of this Event.


        :return: The geofence_id of this Event.
        :rtype: int
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this Event.


        :param geofence_id: The geofence_id of this Event.
        :type geofence_id: int
        """

        self._geofence_id = geofence_id

    @property
    def id(self):
        """Gets the id of this Event.


        :return: The id of this Event.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.
        :type id: int
        """

        self._id = id

    @property
    def maintenance_id(self):
        """Gets the maintenance_id of this Event.


        :return: The maintenance_id of this Event.
        :rtype: int
        """
        return self._maintenance_id

    @maintenance_id.setter
    def maintenance_id(self, maintenance_id):
        """Sets the maintenance_id of this Event.


        :param maintenance_id: The maintenance_id of this Event.
        :type maintenance_id: int
        """

        self._maintenance_id = maintenance_id

    @property
    def position_id(self):
        """Gets the position_id of this Event.


        :return: The position_id of this Event.
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this Event.


        :param position_id: The position_id of this Event.
        :type position_id: int
        """

        self._position_id = position_id

    @property
    def type(self):
        """Gets the type of this Event.


        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.
        :type type: str
        """

        self._type = type
