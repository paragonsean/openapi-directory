# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Calendar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, data: str=None, id: int=None, name: str=None):
        """Calendar - a model defined in OpenAPI

        :param attributes: The attributes of this Calendar.
        :param data: The data of this Calendar.
        :param id: The id of this Calendar.
        :param name: The name of this Calendar.
        """
        self.openapi_types = {
            'attributes': object,
            'data': str,
            'id': int,
            'name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'data': 'data',
            'id': 'id',
            'name': 'name'
        }

        self._attributes = attributes
        self._data = data
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Calendar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Calendar of this Calendar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Calendar.


        :return: The attributes of this Calendar.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Calendar.


        :param attributes: The attributes of this Calendar.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def data(self):
        """Gets the data of this Calendar.

        base64 encoded in iCalendar format

        :return: The data of this Calendar.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Calendar.

        base64 encoded in iCalendar format

        :param data: The data of this Calendar.
        :type data: str
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this Calendar.


        :return: The id of this Calendar.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Calendar.


        :param id: The id of this Calendar.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Calendar.


        :return: The name of this Calendar.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Calendar.


        :param name: The name of this Calendar.
        :type name: str
        """

        self._name = name
