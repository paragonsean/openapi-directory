# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Driver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, id: int=None, name: str=None, unique_id: str=None):
        """Driver - a model defined in OpenAPI

        :param attributes: The attributes of this Driver.
        :param id: The id of this Driver.
        :param name: The name of this Driver.
        :param unique_id: The unique_id of this Driver.
        """
        self.openapi_types = {
            'attributes': object,
            'id': int,
            'name': str,
            'unique_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'name': 'name',
            'unique_id': 'uniqueId'
        }

        self._attributes = attributes
        self._id = id
        self._name = name
        self._unique_id = unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Driver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Driver of this Driver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Driver.


        :return: The attributes of this Driver.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Driver.


        :param attributes: The attributes of this Driver.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this Driver.


        :return: The id of this Driver.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Driver.


        :param id: The id of this Driver.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Driver.


        :return: The name of this Driver.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Driver.


        :param name: The name of this Driver.
        :type name: str
        """

        self._name = name

    @property
    def unique_id(self):
        """Gets the unique_id of this Driver.


        :return: The unique_id of this Driver.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Driver.


        :param unique_id: The unique_id of this Driver.
        :type unique_id: str
        """

        self._unique_id = unique_id
