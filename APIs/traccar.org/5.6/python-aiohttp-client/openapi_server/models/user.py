# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator: bool=None, attributes: object=None, coordinate_format: str=None, device_limit: int=None, device_readonly: bool=None, disabled: bool=None, email: str=None, expiration_time: datetime=None, id: int=None, latitude: float=None, limit_commands: bool=None, longitude: float=None, map: str=None, name: str=None, password: str=None, phone: str=None, poi_layer: str=None, readonly: bool=None, twelve_hour_format: bool=None, user_limit: int=None, zoom: int=None):
        """User - a model defined in OpenAPI

        :param administrator: The administrator of this User.
        :param attributes: The attributes of this User.
        :param coordinate_format: The coordinate_format of this User.
        :param device_limit: The device_limit of this User.
        :param device_readonly: The device_readonly of this User.
        :param disabled: The disabled of this User.
        :param email: The email of this User.
        :param expiration_time: The expiration_time of this User.
        :param id: The id of this User.
        :param latitude: The latitude of this User.
        :param limit_commands: The limit_commands of this User.
        :param longitude: The longitude of this User.
        :param map: The map of this User.
        :param name: The name of this User.
        :param password: The password of this User.
        :param phone: The phone of this User.
        :param poi_layer: The poi_layer of this User.
        :param readonly: The readonly of this User.
        :param twelve_hour_format: The twelve_hour_format of this User.
        :param user_limit: The user_limit of this User.
        :param zoom: The zoom of this User.
        """
        self.openapi_types = {
            'administrator': bool,
            'attributes': object,
            'coordinate_format': str,
            'device_limit': int,
            'device_readonly': bool,
            'disabled': bool,
            'email': str,
            'expiration_time': datetime,
            'id': int,
            'latitude': float,
            'limit_commands': bool,
            'longitude': float,
            'map': str,
            'name': str,
            'password': str,
            'phone': str,
            'poi_layer': str,
            'readonly': bool,
            'twelve_hour_format': bool,
            'user_limit': int,
            'zoom': int
        }

        self.attribute_map = {
            'administrator': 'administrator',
            'attributes': 'attributes',
            'coordinate_format': 'coordinateFormat',
            'device_limit': 'deviceLimit',
            'device_readonly': 'deviceReadonly',
            'disabled': 'disabled',
            'email': 'email',
            'expiration_time': 'expirationTime',
            'id': 'id',
            'latitude': 'latitude',
            'limit_commands': 'limitCommands',
            'longitude': 'longitude',
            'map': 'map',
            'name': 'name',
            'password': 'password',
            'phone': 'phone',
            'poi_layer': 'poiLayer',
            'readonly': 'readonly',
            'twelve_hour_format': 'twelveHourFormat',
            'user_limit': 'userLimit',
            'zoom': 'zoom'
        }

        self._administrator = administrator
        self._attributes = attributes
        self._coordinate_format = coordinate_format
        self._device_limit = device_limit
        self._device_readonly = device_readonly
        self._disabled = disabled
        self._email = email
        self._expiration_time = expiration_time
        self._id = id
        self._latitude = latitude
        self._limit_commands = limit_commands
        self._longitude = longitude
        self._map = map
        self._name = name
        self._password = password
        self._phone = phone
        self._poi_layer = poi_layer
        self._readonly = readonly
        self._twelve_hour_format = twelve_hour_format
        self._user_limit = user_limit
        self._zoom = zoom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator(self):
        """Gets the administrator of this User.


        :return: The administrator of this User.
        :rtype: bool
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this User.


        :param administrator: The administrator of this User.
        :type administrator: bool
        """

        self._administrator = administrator

    @property
    def attributes(self):
        """Gets the attributes of this User.


        :return: The attributes of this User.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this User.


        :param attributes: The attributes of this User.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def coordinate_format(self):
        """Gets the coordinate_format of this User.


        :return: The coordinate_format of this User.
        :rtype: str
        """
        return self._coordinate_format

    @coordinate_format.setter
    def coordinate_format(self, coordinate_format):
        """Sets the coordinate_format of this User.


        :param coordinate_format: The coordinate_format of this User.
        :type coordinate_format: str
        """

        self._coordinate_format = coordinate_format

    @property
    def device_limit(self):
        """Gets the device_limit of this User.


        :return: The device_limit of this User.
        :rtype: int
        """
        return self._device_limit

    @device_limit.setter
    def device_limit(self, device_limit):
        """Sets the device_limit of this User.


        :param device_limit: The device_limit of this User.
        :type device_limit: int
        """

        self._device_limit = device_limit

    @property
    def device_readonly(self):
        """Gets the device_readonly of this User.


        :return: The device_readonly of this User.
        :rtype: bool
        """
        return self._device_readonly

    @device_readonly.setter
    def device_readonly(self, device_readonly):
        """Sets the device_readonly of this User.


        :param device_readonly: The device_readonly of this User.
        :type device_readonly: bool
        """

        self._device_readonly = device_readonly

    @property
    def disabled(self):
        """Gets the disabled of this User.


        :return: The disabled of this User.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this User.


        :param disabled: The disabled of this User.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def expiration_time(self):
        """Gets the expiration_time of this User.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The expiration_time of this User.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this User.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param expiration_time: The expiration_time of this User.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this User.


        :return: The latitude of this User.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this User.


        :param latitude: The latitude of this User.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def limit_commands(self):
        """Gets the limit_commands of this User.


        :return: The limit_commands of this User.
        :rtype: bool
        """
        return self._limit_commands

    @limit_commands.setter
    def limit_commands(self, limit_commands):
        """Sets the limit_commands of this User.


        :param limit_commands: The limit_commands of this User.
        :type limit_commands: bool
        """

        self._limit_commands = limit_commands

    @property
    def longitude(self):
        """Gets the longitude of this User.


        :return: The longitude of this User.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this User.


        :param longitude: The longitude of this User.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def map(self):
        """Gets the map of this User.


        :return: The map of this User.
        :rtype: str
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this User.


        :param map: The map of this User.
        :type map: str
        """

        self._map = map

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this User.


        :return: The phone of this User.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.


        :param phone: The phone of this User.
        :type phone: str
        """

        self._phone = phone

    @property
    def poi_layer(self):
        """Gets the poi_layer of this User.


        :return: The poi_layer of this User.
        :rtype: str
        """
        return self._poi_layer

    @poi_layer.setter
    def poi_layer(self, poi_layer):
        """Sets the poi_layer of this User.


        :param poi_layer: The poi_layer of this User.
        :type poi_layer: str
        """

        self._poi_layer = poi_layer

    @property
    def readonly(self):
        """Gets the readonly of this User.


        :return: The readonly of this User.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this User.


        :param readonly: The readonly of this User.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def twelve_hour_format(self):
        """Gets the twelve_hour_format of this User.


        :return: The twelve_hour_format of this User.
        :rtype: bool
        """
        return self._twelve_hour_format

    @twelve_hour_format.setter
    def twelve_hour_format(self, twelve_hour_format):
        """Sets the twelve_hour_format of this User.


        :param twelve_hour_format: The twelve_hour_format of this User.
        :type twelve_hour_format: bool
        """

        self._twelve_hour_format = twelve_hour_format

    @property
    def user_limit(self):
        """Gets the user_limit of this User.


        :return: The user_limit of this User.
        :rtype: int
        """
        return self._user_limit

    @user_limit.setter
    def user_limit(self, user_limit):
        """Sets the user_limit of this User.


        :param user_limit: The user_limit of this User.
        :type user_limit: int
        """

        self._user_limit = user_limit

    @property
    def zoom(self):
        """Gets the zoom of this User.


        :return: The zoom of this User.
        :rtype: int
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this User.


        :param zoom: The zoom of this User.
        :type zoom: int
        """

        self._zoom = zoom
