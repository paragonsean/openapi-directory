# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_id: int=None, calendar_id: int=None, device_id: int=None, driver_id: int=None, geofence_id: int=None, group_id: int=None, managed_user_id: int=None, notification_id: int=None, user_id: int=None):
        """Permission - a model defined in OpenAPI

        :param attribute_id: The attribute_id of this Permission.
        :param calendar_id: The calendar_id of this Permission.
        :param device_id: The device_id of this Permission.
        :param driver_id: The driver_id of this Permission.
        :param geofence_id: The geofence_id of this Permission.
        :param group_id: The group_id of this Permission.
        :param managed_user_id: The managed_user_id of this Permission.
        :param notification_id: The notification_id of this Permission.
        :param user_id: The user_id of this Permission.
        """
        self.openapi_types = {
            'attribute_id': int,
            'calendar_id': int,
            'device_id': int,
            'driver_id': int,
            'geofence_id': int,
            'group_id': int,
            'managed_user_id': int,
            'notification_id': int,
            'user_id': int
        }

        self.attribute_map = {
            'attribute_id': 'attributeId',
            'calendar_id': 'calendarId',
            'device_id': 'deviceId',
            'driver_id': 'driverId',
            'geofence_id': 'geofenceId',
            'group_id': 'groupId',
            'managed_user_id': 'managedUserId',
            'notification_id': 'notificationId',
            'user_id': 'userId'
        }

        self._attribute_id = attribute_id
        self._calendar_id = calendar_id
        self._device_id = device_id
        self._driver_id = driver_id
        self._geofence_id = geofence_id
        self._group_id = group_id
        self._managed_user_id = managed_user_id
        self._notification_id = notification_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_id(self):
        """Gets the attribute_id of this Permission.

        Computed Attribute Id, can be second parameter only

        :return: The attribute_id of this Permission.
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this Permission.

        Computed Attribute Id, can be second parameter only

        :param attribute_id: The attribute_id of this Permission.
        :type attribute_id: int
        """

        self._attribute_id = attribute_id

    @property
    def calendar_id(self):
        """Gets the calendar_id of this Permission.

        Calendar Id, can be second parameter only and only in combination with userId

        :return: The calendar_id of this Permission.
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this Permission.

        Calendar Id, can be second parameter only and only in combination with userId

        :param calendar_id: The calendar_id of this Permission.
        :type calendar_id: int
        """

        self._calendar_id = calendar_id

    @property
    def device_id(self):
        """Gets the device_id of this Permission.

        Device Id, can be first parameter or second only in combination with userId

        :return: The device_id of this Permission.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Permission.

        Device Id, can be first parameter or second only in combination with userId

        :param device_id: The device_id of this Permission.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def driver_id(self):
        """Gets the driver_id of this Permission.

        Driver Id, can be second parameter only

        :return: The driver_id of this Permission.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this Permission.

        Driver Id, can be second parameter only

        :param driver_id: The driver_id of this Permission.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def geofence_id(self):
        """Gets the geofence_id of this Permission.

        Geofence Id, can be second parameter only

        :return: The geofence_id of this Permission.
        :rtype: int
        """
        return self._geofence_id

    @geofence_id.setter
    def geofence_id(self, geofence_id):
        """Sets the geofence_id of this Permission.

        Geofence Id, can be second parameter only

        :param geofence_id: The geofence_id of this Permission.
        :type geofence_id: int
        """

        self._geofence_id = geofence_id

    @property
    def group_id(self):
        """Gets the group_id of this Permission.

        Group Id, can be first parameter or second only in combination with userId

        :return: The group_id of this Permission.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Permission.

        Group Id, can be first parameter or second only in combination with userId

        :param group_id: The group_id of this Permission.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def managed_user_id(self):
        """Gets the managed_user_id of this Permission.

        User Id, can be second parameter only and only in combination with userId

        :return: The managed_user_id of this Permission.
        :rtype: int
        """
        return self._managed_user_id

    @managed_user_id.setter
    def managed_user_id(self, managed_user_id):
        """Sets the managed_user_id of this Permission.

        User Id, can be second parameter only and only in combination with userId

        :param managed_user_id: The managed_user_id of this Permission.
        :type managed_user_id: int
        """

        self._managed_user_id = managed_user_id

    @property
    def notification_id(self):
        """Gets the notification_id of this Permission.

        Notification Id, can be second parameter only

        :return: The notification_id of this Permission.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this Permission.

        Notification Id, can be second parameter only

        :param notification_id: The notification_id of this Permission.
        :type notification_id: int
        """

        self._notification_id = notification_id

    @property
    def user_id(self):
        """Gets the user_id of this Permission.

        User Id, can be only first parameter

        :return: The user_id of this Permission.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Permission.

        User Id, can be only first parameter

        :param user_id: The user_id of this Permission.
        :type user_id: int
        """

        self._user_id = user_id
