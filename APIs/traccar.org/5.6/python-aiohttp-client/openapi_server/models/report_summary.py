# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_speed: float=None, device_id: int=None, device_name: str=None, distance: float=None, engine_hours: int=None, max_speed: float=None, spent_fuel: float=None):
        """ReportSummary - a model defined in OpenAPI

        :param average_speed: The average_speed of this ReportSummary.
        :param device_id: The device_id of this ReportSummary.
        :param device_name: The device_name of this ReportSummary.
        :param distance: The distance of this ReportSummary.
        :param engine_hours: The engine_hours of this ReportSummary.
        :param max_speed: The max_speed of this ReportSummary.
        :param spent_fuel: The spent_fuel of this ReportSummary.
        """
        self.openapi_types = {
            'average_speed': float,
            'device_id': int,
            'device_name': str,
            'distance': float,
            'engine_hours': int,
            'max_speed': float,
            'spent_fuel': float
        }

        self.attribute_map = {
            'average_speed': 'averageSpeed',
            'device_id': 'deviceId',
            'device_name': 'deviceName',
            'distance': 'distance',
            'engine_hours': 'engineHours',
            'max_speed': 'maxSpeed',
            'spent_fuel': 'spentFuel'
        }

        self._average_speed = average_speed
        self._device_id = device_id
        self._device_name = device_name
        self._distance = distance
        self._engine_hours = engine_hours
        self._max_speed = max_speed
        self._spent_fuel = spent_fuel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportSummary of this ReportSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_speed(self):
        """Gets the average_speed of this ReportSummary.

        in knots

        :return: The average_speed of this ReportSummary.
        :rtype: float
        """
        return self._average_speed

    @average_speed.setter
    def average_speed(self, average_speed):
        """Sets the average_speed of this ReportSummary.

        in knots

        :param average_speed: The average_speed of this ReportSummary.
        :type average_speed: float
        """

        self._average_speed = average_speed

    @property
    def device_id(self):
        """Gets the device_id of this ReportSummary.


        :return: The device_id of this ReportSummary.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ReportSummary.


        :param device_id: The device_id of this ReportSummary.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def device_name(self):
        """Gets the device_name of this ReportSummary.


        :return: The device_name of this ReportSummary.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ReportSummary.


        :param device_name: The device_name of this ReportSummary.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def distance(self):
        """Gets the distance of this ReportSummary.

        in meters

        :return: The distance of this ReportSummary.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ReportSummary.

        in meters

        :param distance: The distance of this ReportSummary.
        :type distance: float
        """

        self._distance = distance

    @property
    def engine_hours(self):
        """Gets the engine_hours of this ReportSummary.


        :return: The engine_hours of this ReportSummary.
        :rtype: int
        """
        return self._engine_hours

    @engine_hours.setter
    def engine_hours(self, engine_hours):
        """Sets the engine_hours of this ReportSummary.


        :param engine_hours: The engine_hours of this ReportSummary.
        :type engine_hours: int
        """

        self._engine_hours = engine_hours

    @property
    def max_speed(self):
        """Gets the max_speed of this ReportSummary.

        in knots

        :return: The max_speed of this ReportSummary.
        :rtype: float
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this ReportSummary.

        in knots

        :param max_speed: The max_speed of this ReportSummary.
        :type max_speed: float
        """

        self._max_speed = max_speed

    @property
    def spent_fuel(self):
        """Gets the spent_fuel of this ReportSummary.

        in liters

        :return: The spent_fuel of this ReportSummary.
        :rtype: float
        """
        return self._spent_fuel

    @spent_fuel.setter
    def spent_fuel(self, spent_fuel):
        """Sets the spent_fuel of this ReportSummary.

        in liters

        :param spent_fuel: The spent_fuel of this ReportSummary.
        :type spent_fuel: float
        """

        self._spent_fuel = spent_fuel
