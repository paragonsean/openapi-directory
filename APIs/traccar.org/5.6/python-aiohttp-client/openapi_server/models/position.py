# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Position(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy: float=None, address: str=None, altitude: float=None, attributes: object=None, course: float=None, device_id: int=None, device_time: datetime=None, fix_time: datetime=None, id: int=None, latitude: float=None, longitude: float=None, network: object=None, outdated: bool=None, protocol: str=None, server_time: datetime=None, speed: float=None, valid: bool=None):
        """Position - a model defined in OpenAPI

        :param accuracy: The accuracy of this Position.
        :param address: The address of this Position.
        :param altitude: The altitude of this Position.
        :param attributes: The attributes of this Position.
        :param course: The course of this Position.
        :param device_id: The device_id of this Position.
        :param device_time: The device_time of this Position.
        :param fix_time: The fix_time of this Position.
        :param id: The id of this Position.
        :param latitude: The latitude of this Position.
        :param longitude: The longitude of this Position.
        :param network: The network of this Position.
        :param outdated: The outdated of this Position.
        :param protocol: The protocol of this Position.
        :param server_time: The server_time of this Position.
        :param speed: The speed of this Position.
        :param valid: The valid of this Position.
        """
        self.openapi_types = {
            'accuracy': float,
            'address': str,
            'altitude': float,
            'attributes': object,
            'course': float,
            'device_id': int,
            'device_time': datetime,
            'fix_time': datetime,
            'id': int,
            'latitude': float,
            'longitude': float,
            'network': object,
            'outdated': bool,
            'protocol': str,
            'server_time': datetime,
            'speed': float,
            'valid': bool
        }

        self.attribute_map = {
            'accuracy': 'accuracy',
            'address': 'address',
            'altitude': 'altitude',
            'attributes': 'attributes',
            'course': 'course',
            'device_id': 'deviceId',
            'device_time': 'deviceTime',
            'fix_time': 'fixTime',
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'network': 'network',
            'outdated': 'outdated',
            'protocol': 'protocol',
            'server_time': 'serverTime',
            'speed': 'speed',
            'valid': 'valid'
        }

        self._accuracy = accuracy
        self._address = address
        self._altitude = altitude
        self._attributes = attributes
        self._course = course
        self._device_id = device_id
        self._device_time = device_time
        self._fix_time = fix_time
        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._network = network
        self._outdated = outdated
        self._protocol = protocol
        self._server_time = server_time
        self._speed = speed
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Position':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Position of this Position.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this Position.


        :return: The accuracy of this Position.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Position.


        :param accuracy: The accuracy of this Position.
        :type accuracy: float
        """

        self._accuracy = accuracy

    @property
    def address(self):
        """Gets the address of this Position.


        :return: The address of this Position.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Position.


        :param address: The address of this Position.
        :type address: str
        """

        self._address = address

    @property
    def altitude(self):
        """Gets the altitude of this Position.


        :return: The altitude of this Position.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Position.


        :param altitude: The altitude of this Position.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def attributes(self):
        """Gets the attributes of this Position.


        :return: The attributes of this Position.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Position.


        :param attributes: The attributes of this Position.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def course(self):
        """Gets the course of this Position.


        :return: The course of this Position.
        :rtype: float
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this Position.


        :param course: The course of this Position.
        :type course: float
        """

        self._course = course

    @property
    def device_id(self):
        """Gets the device_id of this Position.


        :return: The device_id of this Position.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Position.


        :param device_id: The device_id of this Position.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def device_time(self):
        """Gets the device_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The device_time of this Position.
        :rtype: datetime
        """
        return self._device_time

    @device_time.setter
    def device_time(self, device_time):
        """Sets the device_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param device_time: The device_time of this Position.
        :type device_time: datetime
        """

        self._device_time = device_time

    @property
    def fix_time(self):
        """Gets the fix_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The fix_time of this Position.
        :rtype: datetime
        """
        return self._fix_time

    @fix_time.setter
    def fix_time(self, fix_time):
        """Sets the fix_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param fix_time: The fix_time of this Position.
        :type fix_time: datetime
        """

        self._fix_time = fix_time

    @property
    def id(self):
        """Gets the id of this Position.


        :return: The id of this Position.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.
        :type id: int
        """

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this Position.


        :return: The latitude of this Position.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Position.


        :param latitude: The latitude of this Position.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Position.


        :return: The longitude of this Position.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Position.


        :param longitude: The longitude of this Position.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def network(self):
        """Gets the network of this Position.


        :return: The network of this Position.
        :rtype: object
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Position.


        :param network: The network of this Position.
        :type network: object
        """

        self._network = network

    @property
    def outdated(self):
        """Gets the outdated of this Position.


        :return: The outdated of this Position.
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this Position.


        :param outdated: The outdated of this Position.
        :type outdated: bool
        """

        self._outdated = outdated

    @property
    def protocol(self):
        """Gets the protocol of this Position.


        :return: The protocol of this Position.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Position.


        :param protocol: The protocol of this Position.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def server_time(self):
        """Gets the server_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The server_time of this Position.
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this Position.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param server_time: The server_time of this Position.
        :type server_time: datetime
        """

        self._server_time = server_time

    @property
    def speed(self):
        """Gets the speed of this Position.

        in knots

        :return: The speed of this Position.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Position.

        in knots

        :param speed: The speed of this Position.
        :type speed: float
        """

        self._speed = speed

    @property
    def valid(self):
        """Gets the valid of this Position.


        :return: The valid of this Position.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Position.


        :param valid: The valid of this Position.
        :type valid: bool
        """

        self._valid = valid
