# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: object=None, category: str=None, contact: str=None, disabled: bool=None, geofence_ids: List[int]=None, group_id: int=None, id: int=None, last_update: datetime=None, model: str=None, name: str=None, phone: str=None, position_id: int=None, status: str=None, unique_id: str=None):
        """Device - a model defined in OpenAPI

        :param attributes: The attributes of this Device.
        :param category: The category of this Device.
        :param contact: The contact of this Device.
        :param disabled: The disabled of this Device.
        :param geofence_ids: The geofence_ids of this Device.
        :param group_id: The group_id of this Device.
        :param id: The id of this Device.
        :param last_update: The last_update of this Device.
        :param model: The model of this Device.
        :param name: The name of this Device.
        :param phone: The phone of this Device.
        :param position_id: The position_id of this Device.
        :param status: The status of this Device.
        :param unique_id: The unique_id of this Device.
        """
        self.openapi_types = {
            'attributes': object,
            'category': str,
            'contact': str,
            'disabled': bool,
            'geofence_ids': List[int],
            'group_id': int,
            'id': int,
            'last_update': datetime,
            'model': str,
            'name': str,
            'phone': str,
            'position_id': int,
            'status': str,
            'unique_id': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'category': 'category',
            'contact': 'contact',
            'disabled': 'disabled',
            'geofence_ids': 'geofenceIds',
            'group_id': 'groupId',
            'id': 'id',
            'last_update': 'lastUpdate',
            'model': 'model',
            'name': 'name',
            'phone': 'phone',
            'position_id': 'positionId',
            'status': 'status',
            'unique_id': 'uniqueId'
        }

        self._attributes = attributes
        self._category = category
        self._contact = contact
        self._disabled = disabled
        self._geofence_ids = geofence_ids
        self._group_id = group_id
        self._id = id
        self._last_update = last_update
        self._model = model
        self._name = name
        self._phone = phone
        self._position_id = position_id
        self._status = status
        self._unique_id = unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this Device.


        :return: The attributes of this Device.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Device.


        :param attributes: The attributes of this Device.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def category(self):
        """Gets the category of this Device.


        :return: The category of this Device.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Device.


        :param category: The category of this Device.
        :type category: str
        """

        self._category = category

    @property
    def contact(self):
        """Gets the contact of this Device.


        :return: The contact of this Device.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Device.


        :param contact: The contact of this Device.
        :type contact: str
        """

        self._contact = contact

    @property
    def disabled(self):
        """Gets the disabled of this Device.


        :return: The disabled of this Device.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Device.


        :param disabled: The disabled of this Device.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def geofence_ids(self):
        """Gets the geofence_ids of this Device.


        :return: The geofence_ids of this Device.
        :rtype: List[int]
        """
        return self._geofence_ids

    @geofence_ids.setter
    def geofence_ids(self, geofence_ids):
        """Sets the geofence_ids of this Device.


        :param geofence_ids: The geofence_ids of this Device.
        :type geofence_ids: List[int]
        """

        self._geofence_ids = geofence_ids

    @property
    def group_id(self):
        """Gets the group_id of this Device.


        :return: The group_id of this Device.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Device.


        :param group_id: The group_id of this Device.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this Device.


        :return: The id of this Device.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.
        :type id: int
        """

        self._id = id

    @property
    def last_update(self):
        """Gets the last_update of this Device.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :return: The last_update of this Device.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this Device.

        in IS0 8601 format. eg. `1963-11-22T18:30:00Z`

        :param last_update: The last_update of this Device.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def model(self):
        """Gets the model of this Device.


        :return: The model of this Device.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.


        :param model: The model of this Device.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this Device.


        :return: The name of this Device.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.
        :type name: str
        """

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this Device.


        :return: The phone of this Device.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Device.


        :param phone: The phone of this Device.
        :type phone: str
        """

        self._phone = phone

    @property
    def position_id(self):
        """Gets the position_id of this Device.


        :return: The position_id of this Device.
        :rtype: int
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this Device.


        :param position_id: The position_id of this Device.
        :type position_id: int
        """

        self._position_id = position_id

    @property
    def status(self):
        """Gets the status of this Device.


        :return: The status of this Device.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Device.


        :param status: The status of this Device.
        :type status: str
        """

        self._status = status

    @property
    def unique_id(self):
        """Gets the unique_id of this Device.


        :return: The unique_id of this Device.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Device.


        :param unique_id: The unique_id of this Device.
        :type unique_id: str
        """

        self._unique_id = unique_id
