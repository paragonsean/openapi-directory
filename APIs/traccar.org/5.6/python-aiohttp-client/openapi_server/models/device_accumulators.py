# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceAccumulators(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: int=None, hours: float=None, total_distance: float=None):
        """DeviceAccumulators - a model defined in OpenAPI

        :param device_id: The device_id of this DeviceAccumulators.
        :param hours: The hours of this DeviceAccumulators.
        :param total_distance: The total_distance of this DeviceAccumulators.
        """
        self.openapi_types = {
            'device_id': int,
            'hours': float,
            'total_distance': float
        }

        self.attribute_map = {
            'device_id': 'deviceId',
            'hours': 'hours',
            'total_distance': 'totalDistance'
        }

        self._device_id = device_id
        self._hours = hours
        self._total_distance = total_distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceAccumulators':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceAccumulators of this DeviceAccumulators.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this DeviceAccumulators.


        :return: The device_id of this DeviceAccumulators.
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceAccumulators.


        :param device_id: The device_id of this DeviceAccumulators.
        :type device_id: int
        """

        self._device_id = device_id

    @property
    def hours(self):
        """Gets the hours of this DeviceAccumulators.


        :return: The hours of this DeviceAccumulators.
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this DeviceAccumulators.


        :param hours: The hours of this DeviceAccumulators.
        :type hours: float
        """

        self._hours = hours

    @property
    def total_distance(self):
        """Gets the total_distance of this DeviceAccumulators.

        in meters

        :return: The total_distance of this DeviceAccumulators.
        :rtype: float
        """
        return self._total_distance

    @total_distance.setter
    def total_distance(self, total_distance):
        """Sets the total_distance of this DeviceAccumulators.

        in meters

        :param total_distance: The total_distance of this DeviceAccumulators.
        :type total_distance: float
        """

        self._total_distance = total_distance
