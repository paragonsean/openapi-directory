# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, always: bool=None, attributes: object=None, calendar_id: int=None, id: int=None, mail: bool=None, sms: bool=None, type: str=None, web: bool=None):
        """Notification - a model defined in OpenAPI

        :param always: The always of this Notification.
        :param attributes: The attributes of this Notification.
        :param calendar_id: The calendar_id of this Notification.
        :param id: The id of this Notification.
        :param mail: The mail of this Notification.
        :param sms: The sms of this Notification.
        :param type: The type of this Notification.
        :param web: The web of this Notification.
        """
        self.openapi_types = {
            'always': bool,
            'attributes': object,
            'calendar_id': int,
            'id': int,
            'mail': bool,
            'sms': bool,
            'type': str,
            'web': bool
        }

        self.attribute_map = {
            'always': 'always',
            'attributes': 'attributes',
            'calendar_id': 'calendarId',
            'id': 'id',
            'mail': 'mail',
            'sms': 'sms',
            'type': 'type',
            'web': 'web'
        }

        self._always = always
        self._attributes = attributes
        self._calendar_id = calendar_id
        self._id = id
        self._mail = mail
        self._sms = sms
        self._type = type
        self._web = web

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def always(self):
        """Gets the always of this Notification.


        :return: The always of this Notification.
        :rtype: bool
        """
        return self._always

    @always.setter
    def always(self, always):
        """Sets the always of this Notification.


        :param always: The always of this Notification.
        :type always: bool
        """

        self._always = always

    @property
    def attributes(self):
        """Gets the attributes of this Notification.


        :return: The attributes of this Notification.
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Notification.


        :param attributes: The attributes of this Notification.
        :type attributes: object
        """

        self._attributes = attributes

    @property
    def calendar_id(self):
        """Gets the calendar_id of this Notification.


        :return: The calendar_id of this Notification.
        :rtype: int
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this Notification.


        :param calendar_id: The calendar_id of this Notification.
        :type calendar_id: int
        """

        self._calendar_id = calendar_id

    @property
    def id(self):
        """Gets the id of this Notification.


        :return: The id of this Notification.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.


        :param id: The id of this Notification.
        :type id: int
        """

        self._id = id

    @property
    def mail(self):
        """Gets the mail of this Notification.


        :return: The mail of this Notification.
        :rtype: bool
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this Notification.


        :param mail: The mail of this Notification.
        :type mail: bool
        """

        self._mail = mail

    @property
    def sms(self):
        """Gets the sms of this Notification.


        :return: The sms of this Notification.
        :rtype: bool
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this Notification.


        :param sms: The sms of this Notification.
        :type sms: bool
        """

        self._sms = sms

    @property
    def type(self):
        """Gets the type of this Notification.


        :return: The type of this Notification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.


        :param type: The type of this Notification.
        :type type: str
        """

        self._type = type

    @property
    def web(self):
        """Gets the web of this Notification.


        :return: The web of this Notification.
        :rtype: bool
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this Notification.


        :param web: The web of this Notification.
        :type web: bool
        """

        self._web = web
