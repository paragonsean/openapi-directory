/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import Position from '../model/Position';
import ReportStops from '../model/ReportStops';
import ReportSummary from '../model/ReportSummary';
import ReportTrips from '../model/ReportTrips';

/**
* Reports service.
* @module api/ReportsApi
* @version 5.6
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportsEventsGet operation.
     * @callback module:api/ReportsApi~reportsEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Events within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Date} to in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [deviceId] 
     * @param {Array.<Number>} [groupId] 
     * @param {Array.<String>} [type] % can be used to return events of all types
     * @param {module:api/ReportsApi~reportsEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    reportsEventsGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsEventsGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsEventsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'deviceId': this.apiClient.buildCollectionParam(opts['deviceId'], 'multi'),
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'csv'),
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = [Event];
      return this.apiClient.callApi(
        '/reports/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsRouteGet operation.
     * @callback module:api/ReportsApi~reportsRouteGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Position>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Date} to in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [deviceId] 
     * @param {Array.<Number>} [groupId] 
     * @param {module:api/ReportsApi~reportsRouteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Position>}
     */
    reportsRouteGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsRouteGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsRouteGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'deviceId': this.apiClient.buildCollectionParam(opts['deviceId'], 'multi'),
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = [Position];
      return this.apiClient.callApi(
        '/reports/route', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsStopsGet operation.
     * @callback module:api/ReportsApi~reportsStopsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportStops>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Date} to in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [deviceId] 
     * @param {Array.<Number>} [groupId] 
     * @param {module:api/ReportsApi~reportsStopsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportStops>}
     */
    reportsStopsGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsStopsGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsStopsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'deviceId': this.apiClient.buildCollectionParam(opts['deviceId'], 'multi'),
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = [ReportStops];
      return this.apiClient.callApi(
        '/reports/stops', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsSummaryGet operation.
     * @callback module:api/ReportsApi~reportsSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Date} to in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [deviceId] 
     * @param {Array.<Number>} [groupId] 
     * @param {module:api/ReportsApi~reportsSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportSummary>}
     */
    reportsSummaryGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsSummaryGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsSummaryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'deviceId': this.apiClient.buildCollectionParam(opts['deviceId'], 'multi'),
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = [ReportSummary];
      return this.apiClient.callApi(
        '/reports/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reportsTripsGet operation.
     * @callback module:api/ReportsApi~reportsTripsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReportTrips>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param {Date} from in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Date} to in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [deviceId] 
     * @param {Array.<Number>} [groupId] 
     * @param {module:api/ReportsApi~reportsTripsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReportTrips>}
     */
    reportsTripsGet(from, to, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling reportsTripsGet");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling reportsTripsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'deviceId': this.apiClient.buildCollectionParam(opts['deviceId'], 'multi'),
        'groupId': this.apiClient.buildCollectionParam(opts['groupId'], 'multi'),
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = [ReportTrips];
      return this.apiClient.callApi(
        '/reports/trips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
