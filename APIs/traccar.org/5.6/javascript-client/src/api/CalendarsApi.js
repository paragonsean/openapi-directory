/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Calendar from '../model/Calendar';

/**
* Calendars service.
* @module api/CalendarsApi
* @version 5.6
*/
export default class CalendarsApi {

    /**
    * Constructs a new CalendarsApi. 
    * @alias module:api/CalendarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calendarsGet operation.
     * @callback module:api/CalendarsApi~calendarsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Calendar>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Calendars
     * Without params, it returns a list of Calendars the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] Can only be used by admins or managers to fetch all entities
     * @param {Number} [userId] Standard users can use this only with their own _userId_
     * @param {module:api/CalendarsApi~calendarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Calendar>}
     */
    calendarsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all'],
        'userId': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Calendar];
      return this.apiClient.callApi(
        '/calendars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsIdDelete operation.
     * @callback module:api/CalendarsApi~calendarsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Calendar
     * @param {Number} id 
     * @param {module:api/CalendarsApi~calendarsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    calendarsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling calendarsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/calendars/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsIdPut operation.
     * @callback module:api/CalendarsApi~calendarsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Calendar
     * @param {Number} id 
     * @param {module:model/Calendar} body 
     * @param {module:api/CalendarsApi~calendarsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Calendar}
     */
    calendarsIdPut(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling calendarsIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling calendarsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Calendar;
      return this.apiClient.callApi(
        '/calendars/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calendarsPost operation.
     * @callback module:api/CalendarsApi~calendarsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Calendar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Calendar
     * @param {module:model/Calendar} body 
     * @param {module:api/CalendarsApi~calendarsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Calendar}
     */
    calendarsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling calendarsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Calendar;
      return this.apiClient.callApi(
        '/calendars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
