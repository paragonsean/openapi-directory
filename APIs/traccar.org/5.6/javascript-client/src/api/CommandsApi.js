/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Command from '../model/Command';
import CommandType from '../model/CommandType';

/**
* Commands service.
* @module api/CommandsApi
* @version 5.6
*/
export default class CommandsApi {

    /**
    * Constructs a new CommandsApi. 
    * @alias module:api/CommandsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commandsGet operation.
     * @callback module:api/CommandsApi~commandsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Command>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Saved Commands
     * Without params, it returns a list of Saved Commands the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] Can only be used by admins or managers to fetch all entities
     * @param {Number} [userId] Standard users can use this only with their own _userId_
     * @param {Number} [deviceId] Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} [groupId] Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} [refresh] 
     * @param {module:api/CommandsApi~commandsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Command>}
     */
    commandsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Command];
      return this.apiClient.callApi(
        '/commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsIdDelete operation.
     * @callback module:api/CommandsApi~commandsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Saved Command
     * @param {Number} id 
     * @param {module:api/CommandsApi~commandsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commandsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commandsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commands/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsIdPut operation.
     * @callback module:api/CommandsApi~commandsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Saved Command
     * @param {Number} id 
     * @param {module:model/Command} body 
     * @param {module:api/CommandsApi~commandsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    commandsIdPut(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commandsIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Command;
      return this.apiClient.callApi(
        '/commands/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsPost operation.
     * @callback module:api/CommandsApi~commandsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Saved Command
     * @param {module:model/Command} body 
     * @param {module:api/CommandsApi~commandsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    commandsPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Command;
      return this.apiClient.callApi(
        '/commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsSendGet operation.
     * @callback module:api/CommandsApi~commandsSendGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Command>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Saved Commands supported by Device at the moment
     * Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
     * @param {Object} opts Optional parameters
     * @param {Number} [deviceId] Standard users can use this only with _deviceId_s, they have access to
     * @param {module:api/CommandsApi~commandsSendGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Command>}
     */
    commandsSendGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deviceId': opts['deviceId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Command];
      return this.apiClient.callApi(
        '/commands/send', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsSendPost operation.
     * @callback module:api/CommandsApi~commandsSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Command} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dispatch commands to device
     * Dispatch a new command or Saved Command if _body.id_ set
     * @param {module:model/Command} body 
     * @param {module:api/CommandsApi~commandsSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Command}
     */
    commandsSendPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling commandsSendPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Command;
      return this.apiClient.callApi(
        '/commands/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commandsTypesGet operation.
     * @callback module:api/CommandsApi~commandsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommandType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of available Commands for the Device or all possible Commands if Device ommited
     * @param {Object} opts Optional parameters
     * @param {Number} [deviceId] Internal device identifier. Only works if device has already reported some locations
     * @param {String} [protocol] Protocol name. Can be used instead of device id
     * @param {Boolean} [textChannel] When `true` return SMS commands. If not specified or `false` return data commands
     * @param {module:api/CommandsApi~commandsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommandType>}
     */
    commandsTypesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'deviceId': opts['deviceId'],
        'protocol': opts['protocol'],
        'textChannel': opts['textChannel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CommandType];
      return this.apiClient.callApi(
        '/commands/types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
