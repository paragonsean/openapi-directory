/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Geofence from '../model/Geofence';

/**
* Geofences service.
* @module api/GeofencesApi
* @version 5.6
*/
export default class GeofencesApi {

    /**
    * Constructs a new GeofencesApi. 
    * @alias module:api/GeofencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the geofencesGet operation.
     * @callback module:api/GeofencesApi~geofencesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Geofence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a list of Geofences
     * Without params, it returns a list of Geofences the user has access to
     * @param {Object} opts Optional parameters
     * @param {Boolean} [all] Can only be used by admins or managers to fetch all entities
     * @param {Number} [userId] Standard users can use this only with their own _userId_
     * @param {Number} [deviceId] Standard users can use this only with _deviceId_s, they have access to
     * @param {Number} [groupId] Standard users can use this only with _groupId_s, they have access to
     * @param {Boolean} [refresh] 
     * @param {module:api/GeofencesApi~geofencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Geofence>}
     */
    geofencesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'all': opts['all'],
        'userId': opts['userId'],
        'deviceId': opts['deviceId'],
        'groupId': opts['groupId'],
        'refresh': opts['refresh']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Geofence];
      return this.apiClient.callApi(
        '/geofences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesIdDelete operation.
     * @callback module:api/GeofencesApi~geofencesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Geofence
     * @param {Number} id 
     * @param {module:api/GeofencesApi~geofencesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    geofencesIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geofencesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/geofences/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesIdPut operation.
     * @callback module:api/GeofencesApi~geofencesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Geofence
     * @param {Number} id 
     * @param {module:model/Geofence} body 
     * @param {module:api/GeofencesApi~geofencesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geofence}
     */
    geofencesIdPut(id, body, callback) {
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geofencesIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling geofencesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Geofence;
      return this.apiClient.callApi(
        '/geofences/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geofencesPost operation.
     * @callback module:api/GeofencesApi~geofencesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Geofence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Geofence
     * @param {module:model/Geofence} body 
     * @param {module:api/GeofencesApi~geofencesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Geofence}
     */
    geofencesPost(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling geofencesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Geofence;
      return this.apiClient.callApi(
        '/geofences', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
