/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Event model module.
 * @module model/Event
 * @version 5.6
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'Date');
            }
            if (data.hasOwnProperty('geofenceId')) {
                obj['geofenceId'] = ApiClient.convertToType(data['geofenceId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('maintenanceId')) {
                obj['maintenanceId'] = ApiClient.convertToType(data['maintenanceId'], 'Number');
            }
            if (data.hasOwnProperty('positionId')) {
                obj['positionId'] = ApiClient.convertToType(data['positionId'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Event</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Event</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Object} attributes
 */
Event.prototype['attributes'] = undefined;

/**
 * @member {Number} deviceId
 */
Event.prototype['deviceId'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} eventTime
 */
Event.prototype['eventTime'] = undefined;

/**
 * @member {Number} geofenceId
 */
Event.prototype['geofenceId'] = undefined;

/**
 * @member {Number} id
 */
Event.prototype['id'] = undefined;

/**
 * @member {Number} maintenanceId
 */
Event.prototype['maintenanceId'] = undefined;

/**
 * @member {Number} positionId
 */
Event.prototype['positionId'] = undefined;

/**
 * @member {String} type
 */
Event.prototype['type'] = undefined;






export default Event;

