/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Permission model module.
 * @module model/Permission
 * @version 5.6
 */
class Permission {
    /**
     * Constructs a new <code>Permission</code>.
     * This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }
     * @alias module:model/Permission
     */
    constructor() { 
        
        Permission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission} obj Optional instance to populate.
     * @return {module:model/Permission} The populated <code>Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission();

            if (data.hasOwnProperty('attributeId')) {
                obj['attributeId'] = ApiClient.convertToType(data['attributeId'], 'Number');
            }
            if (data.hasOwnProperty('calendarId')) {
                obj['calendarId'] = ApiClient.convertToType(data['calendarId'], 'Number');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('driverId')) {
                obj['driverId'] = ApiClient.convertToType(data['driverId'], 'Number');
            }
            if (data.hasOwnProperty('geofenceId')) {
                obj['geofenceId'] = ApiClient.convertToType(data['geofenceId'], 'Number');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('managedUserId')) {
                obj['managedUserId'] = ApiClient.convertToType(data['managedUserId'], 'Number');
            }
            if (data.hasOwnProperty('notificationId')) {
                obj['notificationId'] = ApiClient.convertToType(data['notificationId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Computed Attribute Id, can be second parameter only
 * @member {Number} attributeId
 */
Permission.prototype['attributeId'] = undefined;

/**
 * Calendar Id, can be second parameter only and only in combination with userId
 * @member {Number} calendarId
 */
Permission.prototype['calendarId'] = undefined;

/**
 * Device Id, can be first parameter or second only in combination with userId
 * @member {Number} deviceId
 */
Permission.prototype['deviceId'] = undefined;

/**
 * Driver Id, can be second parameter only
 * @member {Number} driverId
 */
Permission.prototype['driverId'] = undefined;

/**
 * Geofence Id, can be second parameter only
 * @member {Number} geofenceId
 */
Permission.prototype['geofenceId'] = undefined;

/**
 * Group Id, can be first parameter or second only in combination with userId
 * @member {Number} groupId
 */
Permission.prototype['groupId'] = undefined;

/**
 * User Id, can be second parameter only and only in combination with userId
 * @member {Number} managedUserId
 */
Permission.prototype['managedUserId'] = undefined;

/**
 * Notification Id, can be second parameter only
 * @member {Number} notificationId
 */
Permission.prototype['notificationId'] = undefined;

/**
 * User Id, can be only first parameter
 * @member {Number} userId
 */
Permission.prototype['userId'] = undefined;






export default Permission;

