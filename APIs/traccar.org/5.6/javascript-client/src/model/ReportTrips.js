/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReportTrips model module.
 * @module model/ReportTrips
 * @version 5.6
 */
class ReportTrips {
    /**
     * Constructs a new <code>ReportTrips</code>.
     * @alias module:model/ReportTrips
     */
    constructor() { 
        
        ReportTrips.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportTrips</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportTrips} obj Optional instance to populate.
     * @return {module:model/ReportTrips} The populated <code>ReportTrips</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportTrips();

            if (data.hasOwnProperty('averageSpeed')) {
                obj['averageSpeed'] = ApiClient.convertToType(data['averageSpeed'], 'Number');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('driverName')) {
                obj['driverName'] = ApiClient.convertToType(data['driverName'], 'String');
            }
            if (data.hasOwnProperty('driverUniqueId')) {
                obj['driverUniqueId'] = ApiClient.convertToType(data['driverUniqueId'], 'Number');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('endAddress')) {
                obj['endAddress'] = ApiClient.convertToType(data['endAddress'], 'String');
            }
            if (data.hasOwnProperty('endLat')) {
                obj['endLat'] = ApiClient.convertToType(data['endLat'], 'Number');
            }
            if (data.hasOwnProperty('endLon')) {
                obj['endLon'] = ApiClient.convertToType(data['endLon'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('maxSpeed')) {
                obj['maxSpeed'] = ApiClient.convertToType(data['maxSpeed'], 'Number');
            }
            if (data.hasOwnProperty('spentFuel')) {
                obj['spentFuel'] = ApiClient.convertToType(data['spentFuel'], 'Number');
            }
            if (data.hasOwnProperty('startAddress')) {
                obj['startAddress'] = ApiClient.convertToType(data['startAddress'], 'String');
            }
            if (data.hasOwnProperty('startLat')) {
                obj['startLat'] = ApiClient.convertToType(data['startLat'], 'Number');
            }
            if (data.hasOwnProperty('startLon')) {
                obj['startLon'] = ApiClient.convertToType(data['startLon'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportTrips</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportTrips</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['driverName'] && !(typeof data['driverName'] === 'string' || data['driverName'] instanceof String)) {
            throw new Error("Expected the field `driverName` to be a primitive type in the JSON string but got " + data['driverName']);
        }
        // ensure the json data is a string
        if (data['endAddress'] && !(typeof data['endAddress'] === 'string' || data['endAddress'] instanceof String)) {
            throw new Error("Expected the field `endAddress` to be a primitive type in the JSON string but got " + data['endAddress']);
        }
        // ensure the json data is a string
        if (data['startAddress'] && !(typeof data['startAddress'] === 'string' || data['startAddress'] instanceof String)) {
            throw new Error("Expected the field `startAddress` to be a primitive type in the JSON string but got " + data['startAddress']);
        }

        return true;
    }


}



/**
 * in knots
 * @member {Number} averageSpeed
 */
ReportTrips.prototype['averageSpeed'] = undefined;

/**
 * @member {Number} deviceId
 */
ReportTrips.prototype['deviceId'] = undefined;

/**
 * @member {String} deviceName
 */
ReportTrips.prototype['deviceName'] = undefined;

/**
 * in meters
 * @member {Number} distance
 */
ReportTrips.prototype['distance'] = undefined;

/**
 * @member {String} driverName
 */
ReportTrips.prototype['driverName'] = undefined;

/**
 * @member {Number} driverUniqueId
 */
ReportTrips.prototype['driverUniqueId'] = undefined;

/**
 * @member {Number} duration
 */
ReportTrips.prototype['duration'] = undefined;

/**
 * @member {String} endAddress
 */
ReportTrips.prototype['endAddress'] = undefined;

/**
 * @member {Number} endLat
 */
ReportTrips.prototype['endLat'] = undefined;

/**
 * @member {Number} endLon
 */
ReportTrips.prototype['endLon'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} endTime
 */
ReportTrips.prototype['endTime'] = undefined;

/**
 * in knots
 * @member {Number} maxSpeed
 */
ReportTrips.prototype['maxSpeed'] = undefined;

/**
 * in liters
 * @member {Number} spentFuel
 */
ReportTrips.prototype['spentFuel'] = undefined;

/**
 * @member {String} startAddress
 */
ReportTrips.prototype['startAddress'] = undefined;

/**
 * @member {Number} startLat
 */
ReportTrips.prototype['startLat'] = undefined;

/**
 * @member {Number} startLon
 */
ReportTrips.prototype['startLon'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} startTime
 */
ReportTrips.prototype['startTime'] = undefined;






export default ReportTrips;

