/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Position model module.
 * @module model/Position
 * @version 5.6
 */
class Position {
    /**
     * Constructs a new <code>Position</code>.
     * @alias module:model/Position
     */
    constructor() { 
        
        Position.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Position} obj Optional instance to populate.
     * @return {module:model/Position} The populated <code>Position</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Position();

            if (data.hasOwnProperty('accuracy')) {
                obj['accuracy'] = ApiClient.convertToType(data['accuracy'], 'Number');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('altitude')) {
                obj['altitude'] = ApiClient.convertToType(data['altitude'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Object);
            }
            if (data.hasOwnProperty('course')) {
                obj['course'] = ApiClient.convertToType(data['course'], 'Number');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('deviceTime')) {
                obj['deviceTime'] = ApiClient.convertToType(data['deviceTime'], 'Date');
            }
            if (data.hasOwnProperty('fixTime')) {
                obj['fixTime'] = ApiClient.convertToType(data['fixTime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], Object);
            }
            if (data.hasOwnProperty('outdated')) {
                obj['outdated'] = ApiClient.convertToType(data['outdated'], 'Boolean');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('serverTime')) {
                obj['serverTime'] = ApiClient.convertToType(data['serverTime'], 'Date');
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
            if (data.hasOwnProperty('valid')) {
                obj['valid'] = ApiClient.convertToType(data['valid'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Position</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Position</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}



/**
 * @member {Number} accuracy
 */
Position.prototype['accuracy'] = undefined;

/**
 * @member {String} address
 */
Position.prototype['address'] = undefined;

/**
 * @member {Number} altitude
 */
Position.prototype['altitude'] = undefined;

/**
 * @member {Object} attributes
 */
Position.prototype['attributes'] = undefined;

/**
 * @member {Number} course
 */
Position.prototype['course'] = undefined;

/**
 * @member {Number} deviceId
 */
Position.prototype['deviceId'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} deviceTime
 */
Position.prototype['deviceTime'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} fixTime
 */
Position.prototype['fixTime'] = undefined;

/**
 * @member {Number} id
 */
Position.prototype['id'] = undefined;

/**
 * @member {Number} latitude
 */
Position.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
Position.prototype['longitude'] = undefined;

/**
 * @member {Object} network
 */
Position.prototype['network'] = undefined;

/**
 * @member {Boolean} outdated
 */
Position.prototype['outdated'] = undefined;

/**
 * @member {String} protocol
 */
Position.prototype['protocol'] = undefined;

/**
 * in IS0 8601 format. eg. `1963-11-22T18:30:00Z`
 * @member {Date} serverTime
 */
Position.prototype['serverTime'] = undefined;

/**
 * in knots
 * @member {Number} speed
 */
Position.prototype['speed'] = undefined;

/**
 * @member {Boolean} valid
 */
Position.prototype['valid'] = undefined;






export default Position;

