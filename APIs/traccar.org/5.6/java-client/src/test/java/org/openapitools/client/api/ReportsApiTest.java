/*
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Event;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Position;
import org.openapitools.client.model.ReportStops;
import org.openapitools.client.model.ReportSummary;
import org.openapitools.client.model.ReportTrips;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * Fetch a list of Events within the time period for the Devices or Groups
     *
     * At least one _deviceId_ or one _groupId_ must be passed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsEventsGetTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Integer> deviceId = null;
        List<Integer> groupId = null;
        List<String> type = null;
        List<Event> response = api.reportsEventsGet(from, to, deviceId, groupId, type);
        // TODO: test validations
    }

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups
     *
     * At least one _deviceId_ or one _groupId_ must be passed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRouteGetTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Integer> deviceId = null;
        List<Integer> groupId = null;
        List<Position> response = api.reportsRouteGet(from, to, deviceId, groupId);
        // TODO: test validations
    }

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups
     *
     * At least one _deviceId_ or one _groupId_ must be passed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsStopsGetTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Integer> deviceId = null;
        List<Integer> groupId = null;
        List<ReportStops> response = api.reportsStopsGet(from, to, deviceId, groupId);
        // TODO: test validations
    }

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups
     *
     * At least one _deviceId_ or one _groupId_ must be passed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsSummaryGetTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Integer> deviceId = null;
        List<Integer> groupId = null;
        List<ReportSummary> response = api.reportsSummaryGet(from, to, deviceId, groupId);
        // TODO: test validations
    }

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups
     *
     * At least one _deviceId_ or one _groupId_ must be passed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsTripsGetTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        List<Integer> deviceId = null;
        List<Integer> groupId = null;
        List<ReportTrips> response = api.reportsTripsGet(from, to, deviceId, groupId);
        // TODO: test validations
    }

}
