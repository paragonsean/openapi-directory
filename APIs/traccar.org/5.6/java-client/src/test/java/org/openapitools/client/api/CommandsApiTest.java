/*
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Command;
import org.openapitools.client.model.CommandType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommandsApi
 */
@Disabled
public class CommandsApiTest {

    private final CommandsApi api = new CommandsApi();

    /**
     * Fetch a list of Saved Commands
     *
     * Without params, it returns a list of Saved Commands the user has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsGetTest() throws ApiException {
        Boolean all = null;
        Integer userId = null;
        Integer deviceId = null;
        Integer groupId = null;
        Boolean refresh = null;
        List<Command> response = api.commandsGet(all, userId, deviceId, groupId, refresh);
        // TODO: test validations
    }

    /**
     * Delete a Saved Command
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsIdDeleteTest() throws ApiException {
        Integer id = null;
        api.commandsIdDelete(id);
        // TODO: test validations
    }

    /**
     * Update a Saved Command
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsIdPutTest() throws ApiException {
        Integer id = null;
        Command body = null;
        Command response = api.commandsIdPut(id, body);
        // TODO: test validations
    }

    /**
     * Create a Saved Command
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsPostTest() throws ApiException {
        Command body = null;
        Command response = api.commandsPost(body);
        // TODO: test validations
    }

    /**
     * Fetch a list of Saved Commands supported by Device at the moment
     *
     * Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsSendGetTest() throws ApiException {
        Integer deviceId = null;
        List<Command> response = api.commandsSendGet(deviceId);
        // TODO: test validations
    }

    /**
     * Dispatch commands to device
     *
     * Dispatch a new command or Saved Command if _body.id_ set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsSendPostTest() throws ApiException {
        Command body = null;
        Command response = api.commandsSendPost(body);
        // TODO: test validations
    }

    /**
     * Fetch a list of available Commands for the Device or all possible Commands if Device ommited
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commandsTypesGetTest() throws ApiException {
        Integer deviceId = null;
        String protocol = null;
        Boolean textChannel = null;
        List<CommandType> response = api.commandsTypesGet(deviceId, protocol, textChannel);
        // TODO: test validations
    }

}
