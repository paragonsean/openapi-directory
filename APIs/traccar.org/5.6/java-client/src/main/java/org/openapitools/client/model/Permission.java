/*
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:39.045164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Permission {
  public static final String SERIALIZED_NAME_ATTRIBUTE_ID = "attributeId";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ID)
  private Integer attributeId;

  public static final String SERIALIZED_NAME_CALENDAR_ID = "calendarId";
  @SerializedName(SERIALIZED_NAME_CALENDAR_ID)
  private Integer calendarId;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private Integer deviceId;

  public static final String SERIALIZED_NAME_DRIVER_ID = "driverId";
  @SerializedName(SERIALIZED_NAME_DRIVER_ID)
  private Integer driverId;

  public static final String SERIALIZED_NAME_GEOFENCE_ID = "geofenceId";
  @SerializedName(SERIALIZED_NAME_GEOFENCE_ID)
  private Integer geofenceId;

  public static final String SERIALIZED_NAME_GROUP_ID = "groupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_MANAGED_USER_ID = "managedUserId";
  @SerializedName(SERIALIZED_NAME_MANAGED_USER_ID)
  private Integer managedUserId;

  public static final String SERIALIZED_NAME_NOTIFICATION_ID = "notificationId";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ID)
  private Integer notificationId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public Permission() {
  }

  public Permission attributeId(Integer attributeId) {
    this.attributeId = attributeId;
    return this;
  }

  /**
   * Computed Attribute Id, can be second parameter only
   * @return attributeId
   */
  @javax.annotation.Nullable
  public Integer getAttributeId() {
    return attributeId;
  }

  public void setAttributeId(Integer attributeId) {
    this.attributeId = attributeId;
  }


  public Permission calendarId(Integer calendarId) {
    this.calendarId = calendarId;
    return this;
  }

  /**
   * Calendar Id, can be second parameter only and only in combination with userId
   * @return calendarId
   */
  @javax.annotation.Nullable
  public Integer getCalendarId() {
    return calendarId;
  }

  public void setCalendarId(Integer calendarId) {
    this.calendarId = calendarId;
  }


  public Permission deviceId(Integer deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Device Id, can be first parameter or second only in combination with userId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public Integer getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(Integer deviceId) {
    this.deviceId = deviceId;
  }


  public Permission driverId(Integer driverId) {
    this.driverId = driverId;
    return this;
  }

  /**
   * Driver Id, can be second parameter only
   * @return driverId
   */
  @javax.annotation.Nullable
  public Integer getDriverId() {
    return driverId;
  }

  public void setDriverId(Integer driverId) {
    this.driverId = driverId;
  }


  public Permission geofenceId(Integer geofenceId) {
    this.geofenceId = geofenceId;
    return this;
  }

  /**
   * Geofence Id, can be second parameter only
   * @return geofenceId
   */
  @javax.annotation.Nullable
  public Integer getGeofenceId() {
    return geofenceId;
  }

  public void setGeofenceId(Integer geofenceId) {
    this.geofenceId = geofenceId;
  }


  public Permission groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Group Id, can be first parameter or second only in combination with userId
   * @return groupId
   */
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public Permission managedUserId(Integer managedUserId) {
    this.managedUserId = managedUserId;
    return this;
  }

  /**
   * User Id, can be second parameter only and only in combination with userId
   * @return managedUserId
   */
  @javax.annotation.Nullable
  public Integer getManagedUserId() {
    return managedUserId;
  }

  public void setManagedUserId(Integer managedUserId) {
    this.managedUserId = managedUserId;
  }


  public Permission notificationId(Integer notificationId) {
    this.notificationId = notificationId;
    return this;
  }

  /**
   * Notification Id, can be second parameter only
   * @return notificationId
   */
  @javax.annotation.Nullable
  public Integer getNotificationId() {
    return notificationId;
  }

  public void setNotificationId(Integer notificationId) {
    this.notificationId = notificationId;
  }


  public Permission userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User Id, can be only first parameter
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission permission = (Permission) o;
    return Objects.equals(this.attributeId, permission.attributeId) &&
        Objects.equals(this.calendarId, permission.calendarId) &&
        Objects.equals(this.deviceId, permission.deviceId) &&
        Objects.equals(this.driverId, permission.driverId) &&
        Objects.equals(this.geofenceId, permission.geofenceId) &&
        Objects.equals(this.groupId, permission.groupId) &&
        Objects.equals(this.managedUserId, permission.managedUserId) &&
        Objects.equals(this.notificationId, permission.notificationId) &&
        Objects.equals(this.userId, permission.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeId, calendarId, deviceId, driverId, geofenceId, groupId, managedUserId, notificationId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission {\n");
    sb.append("    attributeId: ").append(toIndentedString(attributeId)).append("\n");
    sb.append("    calendarId: ").append(toIndentedString(calendarId)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    driverId: ").append(toIndentedString(driverId)).append("\n");
    sb.append("    geofenceId: ").append(toIndentedString(geofenceId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    managedUserId: ").append(toIndentedString(managedUserId)).append("\n");
    sb.append("    notificationId: ").append(toIndentedString(notificationId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeId");
    openapiFields.add("calendarId");
    openapiFields.add("deviceId");
    openapiFields.add("driverId");
    openapiFields.add("geofenceId");
    openapiFields.add("groupId");
    openapiFields.add("managedUserId");
    openapiFields.add("notificationId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Permission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permission is not found in the empty JSON string", Permission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permission.class));

       return (TypeAdapter<T>) new TypeAdapter<Permission>() {
           @Override
           public void write(JsonWriter out, Permission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Permission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Permission
   * @throws IOException if the JSON string is invalid with respect to Permission
   */
  public static Permission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permission.class);
  }

  /**
   * Convert an instance of Permission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

