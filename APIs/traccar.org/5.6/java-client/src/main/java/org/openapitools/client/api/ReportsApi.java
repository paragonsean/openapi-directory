/*
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Event;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Position;
import org.openapitools.client.model.ReportStops;
import org.openapitools.client.model.ReportSummary;
import org.openapitools.client.model.ReportTrips;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsEventsGet
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param type % can be used to return events of all types (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsEventsGetCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, List<String> type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "type", type));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsEventsGetValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, List<String> type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportsEventsGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling reportsEventsGet(Async)");
        }

        return reportsEventsGetCall(from, to, deviceId, groupId, type, _callback);

    }

    /**
     * Fetch a list of Events within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param type % can be used to return events of all types (optional)
     * @return List&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Event> reportsEventsGet(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, List<String> type) throws ApiException {
        ApiResponse<List<Event>> localVarResp = reportsEventsGetWithHttpInfo(from, to, deviceId, groupId, type);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of Events within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param type % can be used to return events of all types (optional)
     * @return ApiResponse&lt;List&lt;Event&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Event>> reportsEventsGetWithHttpInfo(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, List<String> type) throws ApiException {
        okhttp3.Call localVarCall = reportsEventsGetValidateBeforeCall(from, to, deviceId, groupId, type, null);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of Events within the time period for the Devices or Groups (asynchronously)
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param type % can be used to return events of all types (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsEventsGetAsync(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, List<String> type, final ApiCallback<List<Event>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsEventsGetValidateBeforeCall(from, to, deviceId, groupId, type, _callback);
        Type localVarReturnType = new TypeToken<List<Event>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRouteGet
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRouteGetCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/route";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRouteGetValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportsRouteGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling reportsRouteGet(Async)");
        }

        return reportsRouteGetCall(from, to, deviceId, groupId, _callback);

    }

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return List&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Position> reportsRouteGet(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        ApiResponse<List<Position>> localVarResp = reportsRouteGetWithHttpInfo(from, to, deviceId, groupId);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return ApiResponse&lt;List&lt;Position&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Position>> reportsRouteGetWithHttpInfo(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        okhttp3.Call localVarCall = reportsRouteGetValidateBeforeCall(from, to, deviceId, groupId, null);
        Type localVarReturnType = new TypeToken<List<Position>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of Positions within the time period for the Devices or Groups (asynchronously)
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRouteGetAsync(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback<List<Position>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRouteGetValidateBeforeCall(from, to, deviceId, groupId, _callback);
        Type localVarReturnType = new TypeToken<List<Position>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsStopsGet
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsStopsGetCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/stops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsStopsGetValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportsStopsGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling reportsStopsGet(Async)");
        }

        return reportsStopsGetCall(from, to, deviceId, groupId, _callback);

    }

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return List&lt;ReportStops&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportStops> reportsStopsGet(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        ApiResponse<List<ReportStops>> localVarResp = reportsStopsGetWithHttpInfo(from, to, deviceId, groupId);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return ApiResponse&lt;List&lt;ReportStops&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportStops>> reportsStopsGetWithHttpInfo(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        okhttp3.Call localVarCall = reportsStopsGetValidateBeforeCall(from, to, deviceId, groupId, null);
        Type localVarReturnType = new TypeToken<List<ReportStops>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of ReportStops within the time period for the Devices or Groups (asynchronously)
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsStopsGetAsync(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback<List<ReportStops>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsStopsGetValidateBeforeCall(from, to, deviceId, groupId, _callback);
        Type localVarReturnType = new TypeToken<List<ReportStops>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsSummaryGet
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSummaryGetCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsSummaryGetValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportsSummaryGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling reportsSummaryGet(Async)");
        }

        return reportsSummaryGetCall(from, to, deviceId, groupId, _callback);

    }

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return List&lt;ReportSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportSummary> reportsSummaryGet(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        ApiResponse<List<ReportSummary>> localVarResp = reportsSummaryGetWithHttpInfo(from, to, deviceId, groupId);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return ApiResponse&lt;List&lt;ReportSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportSummary>> reportsSummaryGetWithHttpInfo(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        okhttp3.Call localVarCall = reportsSummaryGetValidateBeforeCall(from, to, deviceId, groupId, null);
        Type localVarReturnType = new TypeToken<List<ReportSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of ReportSummary within the time period for the Devices or Groups (asynchronously)
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsSummaryGetAsync(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback<List<ReportSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsSummaryGetValidateBeforeCall(from, to, deviceId, groupId, _callback);
        Type localVarReturnType = new TypeToken<List<ReportSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsTripsGet
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTripsGetCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reports/trips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "deviceId", deviceId));
        }

        if (groupId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groupId", groupId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsTripsGetValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling reportsTripsGet(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling reportsTripsGet(Async)");
        }

        return reportsTripsGetCall(from, to, deviceId, groupId, _callback);

    }

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return List&lt;ReportTrips&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ReportTrips> reportsTripsGet(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        ApiResponse<List<ReportTrips>> localVarResp = reportsTripsGetWithHttpInfo(from, to, deviceId, groupId);
        return localVarResp.getData();
    }

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @return ApiResponse&lt;List&lt;ReportTrips&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ReportTrips>> reportsTripsGetWithHttpInfo(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId) throws ApiException {
        okhttp3.Call localVarCall = reportsTripsGetValidateBeforeCall(from, to, deviceId, groupId, null);
        Type localVarReturnType = new TypeToken<List<ReportTrips>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a list of ReportTrips within the time period for the Devices or Groups (asynchronously)
     * At least one _deviceId_ or one _groupId_ must be passed
     * @param from in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param to in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60; (required)
     * @param deviceId  (optional)
     * @param groupId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsTripsGetAsync(OffsetDateTime from, OffsetDateTime to, List<Integer> deviceId, List<Integer> groupId, final ApiCallback<List<ReportTrips>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsTripsGetValidateBeforeCall(from, to, deviceId, groupId, _callback);
        Type localVarReturnType = new TypeToken<List<ReportTrips>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
