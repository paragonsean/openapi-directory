/*
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportTrips
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:39.045164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportTrips {
  public static final String SERIALIZED_NAME_AVERAGE_SPEED = "averageSpeed";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SPEED)
  private BigDecimal averageSpeed;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private Integer deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private BigDecimal distance;

  public static final String SERIALIZED_NAME_DRIVER_NAME = "driverName";
  @SerializedName(SERIALIZED_NAME_DRIVER_NAME)
  private String driverName;

  public static final String SERIALIZED_NAME_DRIVER_UNIQUE_ID = "driverUniqueId";
  @SerializedName(SERIALIZED_NAME_DRIVER_UNIQUE_ID)
  private Integer driverUniqueId;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_END_ADDRESS = "endAddress";
  @SerializedName(SERIALIZED_NAME_END_ADDRESS)
  private String endAddress;

  public static final String SERIALIZED_NAME_END_LAT = "endLat";
  @SerializedName(SERIALIZED_NAME_END_LAT)
  private BigDecimal endLat;

  public static final String SERIALIZED_NAME_END_LON = "endLon";
  @SerializedName(SERIALIZED_NAME_END_LON)
  private BigDecimal endLon;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MAX_SPEED = "maxSpeed";
  @SerializedName(SERIALIZED_NAME_MAX_SPEED)
  private BigDecimal maxSpeed;

  public static final String SERIALIZED_NAME_SPENT_FUEL = "spentFuel";
  @SerializedName(SERIALIZED_NAME_SPENT_FUEL)
  private BigDecimal spentFuel;

  public static final String SERIALIZED_NAME_START_ADDRESS = "startAddress";
  @SerializedName(SERIALIZED_NAME_START_ADDRESS)
  private String startAddress;

  public static final String SERIALIZED_NAME_START_LAT = "startLat";
  @SerializedName(SERIALIZED_NAME_START_LAT)
  private BigDecimal startLat;

  public static final String SERIALIZED_NAME_START_LON = "startLon";
  @SerializedName(SERIALIZED_NAME_START_LON)
  private BigDecimal startLon;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public ReportTrips() {
  }

  public ReportTrips averageSpeed(BigDecimal averageSpeed) {
    this.averageSpeed = averageSpeed;
    return this;
  }

  /**
   * in knots
   * @return averageSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageSpeed() {
    return averageSpeed;
  }

  public void setAverageSpeed(BigDecimal averageSpeed) {
    this.averageSpeed = averageSpeed;
  }


  public ReportTrips deviceId(Integer deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public Integer getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(Integer deviceId) {
    this.deviceId = deviceId;
  }


  public ReportTrips deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public ReportTrips distance(BigDecimal distance) {
    this.distance = distance;
    return this;
  }

  /**
   * in meters
   * @return distance
   */
  @javax.annotation.Nullable
  public BigDecimal getDistance() {
    return distance;
  }

  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  public ReportTrips driverName(String driverName) {
    this.driverName = driverName;
    return this;
  }

  /**
   * Get driverName
   * @return driverName
   */
  @javax.annotation.Nullable
  public String getDriverName() {
    return driverName;
  }

  public void setDriverName(String driverName) {
    this.driverName = driverName;
  }


  public ReportTrips driverUniqueId(Integer driverUniqueId) {
    this.driverUniqueId = driverUniqueId;
    return this;
  }

  /**
   * Get driverUniqueId
   * @return driverUniqueId
   */
  @javax.annotation.Nullable
  public Integer getDriverUniqueId() {
    return driverUniqueId;
  }

  public void setDriverUniqueId(Integer driverUniqueId) {
    this.driverUniqueId = driverUniqueId;
  }


  public ReportTrips duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public ReportTrips endAddress(String endAddress) {
    this.endAddress = endAddress;
    return this;
  }

  /**
   * Get endAddress
   * @return endAddress
   */
  @javax.annotation.Nullable
  public String getEndAddress() {
    return endAddress;
  }

  public void setEndAddress(String endAddress) {
    this.endAddress = endAddress;
  }


  public ReportTrips endLat(BigDecimal endLat) {
    this.endLat = endLat;
    return this;
  }

  /**
   * Get endLat
   * @return endLat
   */
  @javax.annotation.Nullable
  public BigDecimal getEndLat() {
    return endLat;
  }

  public void setEndLat(BigDecimal endLat) {
    this.endLat = endLat;
  }


  public ReportTrips endLon(BigDecimal endLon) {
    this.endLon = endLon;
    return this;
  }

  /**
   * Get endLon
   * @return endLon
   */
  @javax.annotation.Nullable
  public BigDecimal getEndLon() {
    return endLon;
  }

  public void setEndLon(BigDecimal endLon) {
    this.endLon = endLon;
  }


  public ReportTrips endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ReportTrips maxSpeed(BigDecimal maxSpeed) {
    this.maxSpeed = maxSpeed;
    return this;
  }

  /**
   * in knots
   * @return maxSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxSpeed() {
    return maxSpeed;
  }

  public void setMaxSpeed(BigDecimal maxSpeed) {
    this.maxSpeed = maxSpeed;
  }


  public ReportTrips spentFuel(BigDecimal spentFuel) {
    this.spentFuel = spentFuel;
    return this;
  }

  /**
   * in liters
   * @return spentFuel
   */
  @javax.annotation.Nullable
  public BigDecimal getSpentFuel() {
    return spentFuel;
  }

  public void setSpentFuel(BigDecimal spentFuel) {
    this.spentFuel = spentFuel;
  }


  public ReportTrips startAddress(String startAddress) {
    this.startAddress = startAddress;
    return this;
  }

  /**
   * Get startAddress
   * @return startAddress
   */
  @javax.annotation.Nullable
  public String getStartAddress() {
    return startAddress;
  }

  public void setStartAddress(String startAddress) {
    this.startAddress = startAddress;
  }


  public ReportTrips startLat(BigDecimal startLat) {
    this.startLat = startLat;
    return this;
  }

  /**
   * Get startLat
   * @return startLat
   */
  @javax.annotation.Nullable
  public BigDecimal getStartLat() {
    return startLat;
  }

  public void setStartLat(BigDecimal startLat) {
    this.startLat = startLat;
  }


  public ReportTrips startLon(BigDecimal startLon) {
    this.startLon = startLon;
    return this;
  }

  /**
   * Get startLon
   * @return startLon
   */
  @javax.annotation.Nullable
  public BigDecimal getStartLon() {
    return startLon;
  }

  public void setStartLon(BigDecimal startLon) {
    this.startLon = startLon;
  }


  public ReportTrips startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * in IS0 8601 format. eg. &#x60;1963-11-22T18:30:00Z&#x60;
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportTrips reportTrips = (ReportTrips) o;
    return Objects.equals(this.averageSpeed, reportTrips.averageSpeed) &&
        Objects.equals(this.deviceId, reportTrips.deviceId) &&
        Objects.equals(this.deviceName, reportTrips.deviceName) &&
        Objects.equals(this.distance, reportTrips.distance) &&
        Objects.equals(this.driverName, reportTrips.driverName) &&
        Objects.equals(this.driverUniqueId, reportTrips.driverUniqueId) &&
        Objects.equals(this.duration, reportTrips.duration) &&
        Objects.equals(this.endAddress, reportTrips.endAddress) &&
        Objects.equals(this.endLat, reportTrips.endLat) &&
        Objects.equals(this.endLon, reportTrips.endLon) &&
        Objects.equals(this.endTime, reportTrips.endTime) &&
        Objects.equals(this.maxSpeed, reportTrips.maxSpeed) &&
        Objects.equals(this.spentFuel, reportTrips.spentFuel) &&
        Objects.equals(this.startAddress, reportTrips.startAddress) &&
        Objects.equals(this.startLat, reportTrips.startLat) &&
        Objects.equals(this.startLon, reportTrips.startLon) &&
        Objects.equals(this.startTime, reportTrips.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageSpeed, deviceId, deviceName, distance, driverName, driverUniqueId, duration, endAddress, endLat, endLon, endTime, maxSpeed, spentFuel, startAddress, startLat, startLon, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportTrips {\n");
    sb.append("    averageSpeed: ").append(toIndentedString(averageSpeed)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    driverName: ").append(toIndentedString(driverName)).append("\n");
    sb.append("    driverUniqueId: ").append(toIndentedString(driverUniqueId)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    endAddress: ").append(toIndentedString(endAddress)).append("\n");
    sb.append("    endLat: ").append(toIndentedString(endLat)).append("\n");
    sb.append("    endLon: ").append(toIndentedString(endLon)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    maxSpeed: ").append(toIndentedString(maxSpeed)).append("\n");
    sb.append("    spentFuel: ").append(toIndentedString(spentFuel)).append("\n");
    sb.append("    startAddress: ").append(toIndentedString(startAddress)).append("\n");
    sb.append("    startLat: ").append(toIndentedString(startLat)).append("\n");
    sb.append("    startLon: ").append(toIndentedString(startLon)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageSpeed");
    openapiFields.add("deviceId");
    openapiFields.add("deviceName");
    openapiFields.add("distance");
    openapiFields.add("driverName");
    openapiFields.add("driverUniqueId");
    openapiFields.add("duration");
    openapiFields.add("endAddress");
    openapiFields.add("endLat");
    openapiFields.add("endLon");
    openapiFields.add("endTime");
    openapiFields.add("maxSpeed");
    openapiFields.add("spentFuel");
    openapiFields.add("startAddress");
    openapiFields.add("startLat");
    openapiFields.add("startLon");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportTrips
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportTrips.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportTrips is not found in the empty JSON string", ReportTrips.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportTrips.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportTrips` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if ((jsonObj.get("driverName") != null && !jsonObj.get("driverName").isJsonNull()) && !jsonObj.get("driverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driverName").toString()));
      }
      if ((jsonObj.get("endAddress") != null && !jsonObj.get("endAddress").isJsonNull()) && !jsonObj.get("endAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endAddress").toString()));
      }
      if ((jsonObj.get("startAddress") != null && !jsonObj.get("startAddress").isJsonNull()) && !jsonObj.get("startAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportTrips.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportTrips' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportTrips> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportTrips.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportTrips>() {
           @Override
           public void write(JsonWriter out, ReportTrips value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportTrips read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportTrips given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportTrips
   * @throws IOException if the JSON string is invalid with respect to ReportTrips
   */
  public static ReportTrips fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportTrips.class);
  }

  /**
   * Convert an instance of ReportTrips to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

