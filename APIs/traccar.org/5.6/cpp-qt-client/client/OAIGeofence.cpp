/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeofence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeofence::OAIGeofence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeofence::OAIGeofence() {
    this->initializeModel();
}

OAIGeofence::~OAIGeofence() {}

void OAIGeofence::initializeModel() {

    m_area_isSet = false;
    m_area_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGeofence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeofence::fromJsonObject(QJsonObject json) {

    m_area_isValid = ::OpenAPI::fromJsonValue(m_area, json[QString("area")]);
    m_area_isSet = !json[QString("area")].isNull() && m_area_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGeofence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeofence::asJsonObject() const {
    QJsonObject obj;
    if (m_area_isSet) {
        obj.insert(QString("area"), ::OpenAPI::toJsonValue(m_area));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIGeofence::getArea() const {
    return m_area;
}
void OAIGeofence::setArea(const QString &area) {
    m_area = area;
    m_area_isSet = true;
}

bool OAIGeofence::is_area_Set() const{
    return m_area_isSet;
}

bool OAIGeofence::is_area_Valid() const{
    return m_area_isValid;
}

OAIObject OAIGeofence::getAttributes() const {
    return m_attributes;
}
void OAIGeofence::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGeofence::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGeofence::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAIGeofence::getCalendarId() const {
    return m_calendar_id;
}
void OAIGeofence::setCalendarId(const qint32 &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIGeofence::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIGeofence::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIGeofence::getDescription() const {
    return m_description;
}
void OAIGeofence::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGeofence::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGeofence::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGeofence::getId() const {
    return m_id;
}
void OAIGeofence::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGeofence::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGeofence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGeofence::getName() const {
    return m_name;
}
void OAIGeofence::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeofence::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeofence::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGeofence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeofence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
