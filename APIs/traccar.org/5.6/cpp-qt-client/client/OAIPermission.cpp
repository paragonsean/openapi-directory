/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_attribute_id_isSet = false;
    m_attribute_id_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_driver_id_isSet = false;
    m_driver_id_isValid = false;

    m_geofence_id_isSet = false;
    m_geofence_id_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_managed_user_id_isSet = false;
    m_managed_user_id_isValid = false;

    m_notification_id_isSet = false;
    m_notification_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_attribute_id_isValid = ::OpenAPI::fromJsonValue(m_attribute_id, json[QString("attributeId")]);
    m_attribute_id_isSet = !json[QString("attributeId")].isNull() && m_attribute_id_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_driver_id_isValid = ::OpenAPI::fromJsonValue(m_driver_id, json[QString("driverId")]);
    m_driver_id_isSet = !json[QString("driverId")].isNull() && m_driver_id_isValid;

    m_geofence_id_isValid = ::OpenAPI::fromJsonValue(m_geofence_id, json[QString("geofenceId")]);
    m_geofence_id_isSet = !json[QString("geofenceId")].isNull() && m_geofence_id_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_managed_user_id_isValid = ::OpenAPI::fromJsonValue(m_managed_user_id, json[QString("managedUserId")]);
    m_managed_user_id_isSet = !json[QString("managedUserId")].isNull() && m_managed_user_id_isValid;

    m_notification_id_isValid = ::OpenAPI::fromJsonValue(m_notification_id, json[QString("notificationId")]);
    m_notification_id_isSet = !json[QString("notificationId")].isNull() && m_notification_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_id_isSet) {
        obj.insert(QString("attributeId"), ::OpenAPI::toJsonValue(m_attribute_id));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_driver_id_isSet) {
        obj.insert(QString("driverId"), ::OpenAPI::toJsonValue(m_driver_id));
    }
    if (m_geofence_id_isSet) {
        obj.insert(QString("geofenceId"), ::OpenAPI::toJsonValue(m_geofence_id));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_managed_user_id_isSet) {
        obj.insert(QString("managedUserId"), ::OpenAPI::toJsonValue(m_managed_user_id));
    }
    if (m_notification_id_isSet) {
        obj.insert(QString("notificationId"), ::OpenAPI::toJsonValue(m_notification_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIPermission::getAttributeId() const {
    return m_attribute_id;
}
void OAIPermission::setAttributeId(const qint32 &attribute_id) {
    m_attribute_id = attribute_id;
    m_attribute_id_isSet = true;
}

bool OAIPermission::is_attribute_id_Set() const{
    return m_attribute_id_isSet;
}

bool OAIPermission::is_attribute_id_Valid() const{
    return m_attribute_id_isValid;
}

qint32 OAIPermission::getCalendarId() const {
    return m_calendar_id;
}
void OAIPermission::setCalendarId(const qint32 &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIPermission::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIPermission::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

qint32 OAIPermission::getDeviceId() const {
    return m_device_id;
}
void OAIPermission::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIPermission::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIPermission::is_device_id_Valid() const{
    return m_device_id_isValid;
}

qint32 OAIPermission::getDriverId() const {
    return m_driver_id;
}
void OAIPermission::setDriverId(const qint32 &driver_id) {
    m_driver_id = driver_id;
    m_driver_id_isSet = true;
}

bool OAIPermission::is_driver_id_Set() const{
    return m_driver_id_isSet;
}

bool OAIPermission::is_driver_id_Valid() const{
    return m_driver_id_isValid;
}

qint32 OAIPermission::getGeofenceId() const {
    return m_geofence_id;
}
void OAIPermission::setGeofenceId(const qint32 &geofence_id) {
    m_geofence_id = geofence_id;
    m_geofence_id_isSet = true;
}

bool OAIPermission::is_geofence_id_Set() const{
    return m_geofence_id_isSet;
}

bool OAIPermission::is_geofence_id_Valid() const{
    return m_geofence_id_isValid;
}

qint32 OAIPermission::getGroupId() const {
    return m_group_id;
}
void OAIPermission::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIPermission::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIPermission::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint32 OAIPermission::getManagedUserId() const {
    return m_managed_user_id;
}
void OAIPermission::setManagedUserId(const qint32 &managed_user_id) {
    m_managed_user_id = managed_user_id;
    m_managed_user_id_isSet = true;
}

bool OAIPermission::is_managed_user_id_Set() const{
    return m_managed_user_id_isSet;
}

bool OAIPermission::is_managed_user_id_Valid() const{
    return m_managed_user_id_isValid;
}

qint32 OAIPermission::getNotificationId() const {
    return m_notification_id;
}
void OAIPermission::setNotificationId(const qint32 &notification_id) {
    m_notification_id = notification_id;
    m_notification_id_isSet = true;
}

bool OAIPermission::is_notification_id_Set() const{
    return m_notification_id_isSet;
}

bool OAIPermission::is_notification_id_Valid() const{
    return m_notification_id_isValid;
}

qint32 OAIPermission::getUserId() const {
    return m_user_id;
}
void OAIPermission::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPermission::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPermission::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
