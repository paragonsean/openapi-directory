/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeofencesApi_H
#define OAI_OAIGeofencesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGeofence.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeofencesApi : public QObject {
    Q_OBJECT

public:
    OAIGeofencesApi(const int timeOut = 0);
    ~OAIGeofencesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  device_id qint32 [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  refresh bool [optional]
    */
    virtual void geofencesGet(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &device_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &refresh = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void geofencesIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAIGeofence [required]
    */
    virtual void geofencesIdPut(const qint32 &id, const OAIGeofence &body);

    /**
    * @param[in]  body OAIGeofence [required]
    */
    virtual void geofencesPost(const OAIGeofence &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void geofencesGetCallback(OAIHttpRequestWorker *worker);
    void geofencesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void geofencesIdPutCallback(OAIHttpRequestWorker *worker);
    void geofencesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void geofencesGetSignal(QList<OAIGeofence> summary);
    void geofencesIdDeleteSignal();
    void geofencesIdPutSignal(OAIGeofence summary);
    void geofencesPostSignal(OAIGeofence summary);


    void geofencesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIGeofence> summary);
    void geofencesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void geofencesIdPutSignalFull(OAIHttpRequestWorker *worker, OAIGeofence summary);
    void geofencesPostSignalFull(OAIHttpRequestWorker *worker, OAIGeofence summary);

    Q_DECL_DEPRECATED_X("Use geofencesGetSignalError() instead")
    void geofencesGetSignalE(QList<OAIGeofence> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesGetSignalError(QList<OAIGeofence> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesIdDeleteSignalError() instead")
    void geofencesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesIdPutSignalError() instead")
    void geofencesIdPutSignalE(OAIGeofence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesIdPutSignalError(OAIGeofence summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesPostSignalError() instead")
    void geofencesPostSignalE(OAIGeofence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesPostSignalError(OAIGeofence summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use geofencesGetSignalErrorFull() instead")
    void geofencesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesIdDeleteSignalErrorFull() instead")
    void geofencesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesIdPutSignalErrorFull() instead")
    void geofencesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use geofencesPostSignalErrorFull() instead")
    void geofencesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void geofencesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
