/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAccumulators.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAccumulators::OAIDeviceAccumulators(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAccumulators::OAIDeviceAccumulators() {
    this->initializeModel();
}

OAIDeviceAccumulators::~OAIDeviceAccumulators() {}

void OAIDeviceAccumulators::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_total_distance_isSet = false;
    m_total_distance_isValid = false;
}

void OAIDeviceAccumulators::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceAccumulators::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_total_distance_isValid = ::OpenAPI::fromJsonValue(m_total_distance, json[QString("totalDistance")]);
    m_total_distance_isSet = !json[QString("totalDistance")].isNull() && m_total_distance_isValid;
}

QString OAIDeviceAccumulators::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceAccumulators::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_hours_isSet) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_total_distance_isSet) {
        obj.insert(QString("totalDistance"), ::OpenAPI::toJsonValue(m_total_distance));
    }
    return obj;
}

qint32 OAIDeviceAccumulators::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceAccumulators::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceAccumulators::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceAccumulators::is_device_id_Valid() const{
    return m_device_id_isValid;
}

double OAIDeviceAccumulators::getHours() const {
    return m_hours;
}
void OAIDeviceAccumulators::setHours(const double &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIDeviceAccumulators::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIDeviceAccumulators::is_hours_Valid() const{
    return m_hours_isValid;
}

double OAIDeviceAccumulators::getTotalDistance() const {
    return m_total_distance;
}
void OAIDeviceAccumulators::setTotalDistance(const double &total_distance) {
    m_total_distance = total_distance;
    m_total_distance_isSet = true;
}

bool OAIDeviceAccumulators::is_total_distance_Set() const{
    return m_total_distance_isSet;
}

bool OAIDeviceAccumulators::is_total_distance_Valid() const{
    return m_total_distance_isValid;
}

bool OAIDeviceAccumulators::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_distance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceAccumulators::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
