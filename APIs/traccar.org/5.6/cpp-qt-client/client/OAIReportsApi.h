/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvent.h"
#include "OAIPosition.h"
#include "OAIReportStops.h"
#include "OAIReportSummary.h"
#include "OAIReportTrips.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  device_id QList<qint32> [optional]
    * @param[in]  group_id QList<qint32> [optional]
    * @param[in]  type QList<QString> [optional]
    */
    virtual void reportsEventsGet(const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QList<qint32>> &device_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &group_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  device_id QList<qint32> [optional]
    * @param[in]  group_id QList<qint32> [optional]
    */
    virtual void reportsRouteGet(const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QList<qint32>> &device_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &group_id = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  device_id QList<qint32> [optional]
    * @param[in]  group_id QList<qint32> [optional]
    */
    virtual void reportsStopsGet(const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QList<qint32>> &device_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &group_id = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  device_id QList<qint32> [optional]
    * @param[in]  group_id QList<qint32> [optional]
    */
    virtual void reportsSummaryGet(const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QList<qint32>> &device_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &group_id = ::OpenAPI::OptionalParam<QList<qint32>>());

    /**
    * @param[in]  from QDateTime [required]
    * @param[in]  to QDateTime [required]
    * @param[in]  device_id QList<qint32> [optional]
    * @param[in]  group_id QList<qint32> [optional]
    */
    virtual void reportsTripsGet(const QDateTime &from, const QDateTime &to, const ::OpenAPI::OptionalParam<QList<qint32>> &device_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &group_id = ::OpenAPI::OptionalParam<QList<qint32>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reportsEventsGetCallback(OAIHttpRequestWorker *worker);
    void reportsRouteGetCallback(OAIHttpRequestWorker *worker);
    void reportsStopsGetCallback(OAIHttpRequestWorker *worker);
    void reportsSummaryGetCallback(OAIHttpRequestWorker *worker);
    void reportsTripsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reportsEventsGetSignal(QList<OAIEvent> summary);
    void reportsRouteGetSignal(QList<OAIPosition> summary);
    void reportsStopsGetSignal(QList<OAIReportStops> summary);
    void reportsSummaryGetSignal(QList<OAIReportSummary> summary);
    void reportsTripsGetSignal(QList<OAIReportTrips> summary);


    void reportsEventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvent> summary);
    void reportsRouteGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPosition> summary);
    void reportsStopsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReportStops> summary);
    void reportsSummaryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReportSummary> summary);
    void reportsTripsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReportTrips> summary);

    Q_DECL_DEPRECATED_X("Use reportsEventsGetSignalError() instead")
    void reportsEventsGetSignalE(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsEventsGetSignalError(QList<OAIEvent> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsRouteGetSignalError() instead")
    void reportsRouteGetSignalE(QList<OAIPosition> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsRouteGetSignalError(QList<OAIPosition> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsStopsGetSignalError() instead")
    void reportsStopsGetSignalE(QList<OAIReportStops> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsStopsGetSignalError(QList<OAIReportStops> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsSummaryGetSignalError() instead")
    void reportsSummaryGetSignalE(QList<OAIReportSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsSummaryGetSignalError(QList<OAIReportSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsTripsGetSignalError() instead")
    void reportsTripsGetSignalE(QList<OAIReportTrips> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsTripsGetSignalError(QList<OAIReportTrips> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reportsEventsGetSignalErrorFull() instead")
    void reportsEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsRouteGetSignalErrorFull() instead")
    void reportsRouteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsRouteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsStopsGetSignalErrorFull() instead")
    void reportsStopsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsStopsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsSummaryGetSignalErrorFull() instead")
    void reportsSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reportsTripsGetSignalErrorFull() instead")
    void reportsTripsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reportsTripsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
