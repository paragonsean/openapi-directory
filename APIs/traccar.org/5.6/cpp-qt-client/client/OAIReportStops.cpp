/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportStops.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportStops::OAIReportStops(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportStops::OAIReportStops() {
    this->initializeModel();
}

OAIReportStops::~OAIReportStops() {}

void OAIReportStops::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_engine_hours_isSet = false;
    m_engine_hours_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lon_isSet = false;
    m_lon_isValid = false;

    m_spent_fuel_isSet = false;
    m_spent_fuel_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIReportStops::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportStops::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_engine_hours_isValid = ::OpenAPI::fromJsonValue(m_engine_hours, json[QString("engineHours")]);
    m_engine_hours_isSet = !json[QString("engineHours")].isNull() && m_engine_hours_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lon_isValid = ::OpenAPI::fromJsonValue(m_lon, json[QString("lon")]);
    m_lon_isSet = !json[QString("lon")].isNull() && m_lon_isValid;

    m_spent_fuel_isValid = ::OpenAPI::fromJsonValue(m_spent_fuel, json[QString("spentFuel")]);
    m_spent_fuel_isSet = !json[QString("spentFuel")].isNull() && m_spent_fuel_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIReportStops::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportStops::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_engine_hours_isSet) {
        obj.insert(QString("engineHours"), ::OpenAPI::toJsonValue(m_engine_hours));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lon_isSet) {
        obj.insert(QString("lon"), ::OpenAPI::toJsonValue(m_lon));
    }
    if (m_spent_fuel_isSet) {
        obj.insert(QString("spentFuel"), ::OpenAPI::toJsonValue(m_spent_fuel));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIReportStops::getAddress() const {
    return m_address;
}
void OAIReportStops::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIReportStops::is_address_Set() const{
    return m_address_isSet;
}

bool OAIReportStops::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIReportStops::getDeviceId() const {
    return m_device_id;
}
void OAIReportStops::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIReportStops::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIReportStops::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIReportStops::getDeviceName() const {
    return m_device_name;
}
void OAIReportStops::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIReportStops::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIReportStops::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint32 OAIReportStops::getDuration() const {
    return m_duration;
}
void OAIReportStops::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReportStops::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReportStops::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAIReportStops::getEndTime() const {
    return m_end_time;
}
void OAIReportStops::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIReportStops::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIReportStops::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIReportStops::getEngineHours() const {
    return m_engine_hours;
}
void OAIReportStops::setEngineHours(const qint32 &engine_hours) {
    m_engine_hours = engine_hours;
    m_engine_hours_isSet = true;
}

bool OAIReportStops::is_engine_hours_Set() const{
    return m_engine_hours_isSet;
}

bool OAIReportStops::is_engine_hours_Valid() const{
    return m_engine_hours_isValid;
}

double OAIReportStops::getLat() const {
    return m_lat;
}
void OAIReportStops::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIReportStops::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIReportStops::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIReportStops::getLon() const {
    return m_lon;
}
void OAIReportStops::setLon(const double &lon) {
    m_lon = lon;
    m_lon_isSet = true;
}

bool OAIReportStops::is_lon_Set() const{
    return m_lon_isSet;
}

bool OAIReportStops::is_lon_Valid() const{
    return m_lon_isValid;
}

double OAIReportStops::getSpentFuel() const {
    return m_spent_fuel;
}
void OAIReportStops::setSpentFuel(const double &spent_fuel) {
    m_spent_fuel = spent_fuel;
    m_spent_fuel_isSet = true;
}

bool OAIReportStops::is_spent_fuel_Set() const{
    return m_spent_fuel_isSet;
}

bool OAIReportStops::is_spent_fuel_Valid() const{
    return m_spent_fuel_isValid;
}

QDateTime OAIReportStops::getStartTime() const {
    return m_start_time;
}
void OAIReportStops::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReportStops::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReportStops::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIReportStops::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spent_fuel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportStops::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
