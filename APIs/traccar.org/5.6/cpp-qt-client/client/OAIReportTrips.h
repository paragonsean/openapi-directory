/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportTrips.h
 *
 * 
 */

#ifndef OAIReportTrips_H
#define OAIReportTrips_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReportTrips : public OAIObject {
public:
    OAIReportTrips();
    OAIReportTrips(QString json);
    ~OAIReportTrips() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAverageSpeed() const;
    void setAverageSpeed(const double &average_speed);
    bool is_average_speed_Set() const;
    bool is_average_speed_Valid() const;

    qint32 getDeviceId() const;
    void setDeviceId(const qint32 &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getDeviceName() const;
    void setDeviceName(const QString &device_name);
    bool is_device_name_Set() const;
    bool is_device_name_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getDriverName() const;
    void setDriverName(const QString &driver_name);
    bool is_driver_name_Set() const;
    bool is_driver_name_Valid() const;

    qint32 getDriverUniqueId() const;
    void setDriverUniqueId(const qint32 &driver_unique_id);
    bool is_driver_unique_id_Set() const;
    bool is_driver_unique_id_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getEndAddress() const;
    void setEndAddress(const QString &end_address);
    bool is_end_address_Set() const;
    bool is_end_address_Valid() const;

    double getEndLat() const;
    void setEndLat(const double &end_lat);
    bool is_end_lat_Set() const;
    bool is_end_lat_Valid() const;

    double getEndLon() const;
    void setEndLon(const double &end_lon);
    bool is_end_lon_Set() const;
    bool is_end_lon_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    double getMaxSpeed() const;
    void setMaxSpeed(const double &max_speed);
    bool is_max_speed_Set() const;
    bool is_max_speed_Valid() const;

    double getSpentFuel() const;
    void setSpentFuel(const double &spent_fuel);
    bool is_spent_fuel_Set() const;
    bool is_spent_fuel_Valid() const;

    QString getStartAddress() const;
    void setStartAddress(const QString &start_address);
    bool is_start_address_Set() const;
    bool is_start_address_Valid() const;

    double getStartLat() const;
    void setStartLat(const double &start_lat);
    bool is_start_lat_Set() const;
    bool is_start_lat_Valid() const;

    double getStartLon() const;
    void setStartLon(const double &start_lon);
    bool is_start_lon_Set() const;
    bool is_start_lon_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_average_speed;
    bool m_average_speed_isSet;
    bool m_average_speed_isValid;

    qint32 m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_device_name;
    bool m_device_name_isSet;
    bool m_device_name_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_driver_name;
    bool m_driver_name_isSet;
    bool m_driver_name_isValid;

    qint32 m_driver_unique_id;
    bool m_driver_unique_id_isSet;
    bool m_driver_unique_id_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_end_address;
    bool m_end_address_isSet;
    bool m_end_address_isValid;

    double m_end_lat;
    bool m_end_lat_isSet;
    bool m_end_lat_isValid;

    double m_end_lon;
    bool m_end_lon_isSet;
    bool m_end_lon_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    double m_max_speed;
    bool m_max_speed_isSet;
    bool m_max_speed_isValid;

    double m_spent_fuel;
    bool m_spent_fuel_isSet;
    bool m_spent_fuel_isValid;

    QString m_start_address;
    bool m_start_address_isSet;
    bool m_start_address_isValid;

    double m_start_lat;
    bool m_start_lat_isSet;
    bool m_start_lat_isValid;

    double m_start_lon;
    bool m_start_lon_isSet;
    bool m_start_lon_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportTrips)

#endif // OAIReportTrips_H
