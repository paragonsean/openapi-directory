/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportTrips.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportTrips::OAIReportTrips(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportTrips::OAIReportTrips() {
    this->initializeModel();
}

OAIReportTrips::~OAIReportTrips() {}

void OAIReportTrips::initializeModel() {

    m_average_speed_isSet = false;
    m_average_speed_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_driver_name_isSet = false;
    m_driver_name_isValid = false;

    m_driver_unique_id_isSet = false;
    m_driver_unique_id_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_end_address_isSet = false;
    m_end_address_isValid = false;

    m_end_lat_isSet = false;
    m_end_lat_isValid = false;

    m_end_lon_isSet = false;
    m_end_lon_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_max_speed_isSet = false;
    m_max_speed_isValid = false;

    m_spent_fuel_isSet = false;
    m_spent_fuel_isValid = false;

    m_start_address_isSet = false;
    m_start_address_isValid = false;

    m_start_lat_isSet = false;
    m_start_lat_isValid = false;

    m_start_lon_isSet = false;
    m_start_lon_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIReportTrips::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportTrips::fromJsonObject(QJsonObject json) {

    m_average_speed_isValid = ::OpenAPI::fromJsonValue(m_average_speed, json[QString("averageSpeed")]);
    m_average_speed_isSet = !json[QString("averageSpeed")].isNull() && m_average_speed_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_driver_name_isValid = ::OpenAPI::fromJsonValue(m_driver_name, json[QString("driverName")]);
    m_driver_name_isSet = !json[QString("driverName")].isNull() && m_driver_name_isValid;

    m_driver_unique_id_isValid = ::OpenAPI::fromJsonValue(m_driver_unique_id, json[QString("driverUniqueId")]);
    m_driver_unique_id_isSet = !json[QString("driverUniqueId")].isNull() && m_driver_unique_id_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_end_address_isValid = ::OpenAPI::fromJsonValue(m_end_address, json[QString("endAddress")]);
    m_end_address_isSet = !json[QString("endAddress")].isNull() && m_end_address_isValid;

    m_end_lat_isValid = ::OpenAPI::fromJsonValue(m_end_lat, json[QString("endLat")]);
    m_end_lat_isSet = !json[QString("endLat")].isNull() && m_end_lat_isValid;

    m_end_lon_isValid = ::OpenAPI::fromJsonValue(m_end_lon, json[QString("endLon")]);
    m_end_lon_isSet = !json[QString("endLon")].isNull() && m_end_lon_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_max_speed_isValid = ::OpenAPI::fromJsonValue(m_max_speed, json[QString("maxSpeed")]);
    m_max_speed_isSet = !json[QString("maxSpeed")].isNull() && m_max_speed_isValid;

    m_spent_fuel_isValid = ::OpenAPI::fromJsonValue(m_spent_fuel, json[QString("spentFuel")]);
    m_spent_fuel_isSet = !json[QString("spentFuel")].isNull() && m_spent_fuel_isValid;

    m_start_address_isValid = ::OpenAPI::fromJsonValue(m_start_address, json[QString("startAddress")]);
    m_start_address_isSet = !json[QString("startAddress")].isNull() && m_start_address_isValid;

    m_start_lat_isValid = ::OpenAPI::fromJsonValue(m_start_lat, json[QString("startLat")]);
    m_start_lat_isSet = !json[QString("startLat")].isNull() && m_start_lat_isValid;

    m_start_lon_isValid = ::OpenAPI::fromJsonValue(m_start_lon, json[QString("startLon")]);
    m_start_lon_isSet = !json[QString("startLon")].isNull() && m_start_lon_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIReportTrips::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportTrips::asJsonObject() const {
    QJsonObject obj;
    if (m_average_speed_isSet) {
        obj.insert(QString("averageSpeed"), ::OpenAPI::toJsonValue(m_average_speed));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_driver_name_isSet) {
        obj.insert(QString("driverName"), ::OpenAPI::toJsonValue(m_driver_name));
    }
    if (m_driver_unique_id_isSet) {
        obj.insert(QString("driverUniqueId"), ::OpenAPI::toJsonValue(m_driver_unique_id));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_end_address_isSet) {
        obj.insert(QString("endAddress"), ::OpenAPI::toJsonValue(m_end_address));
    }
    if (m_end_lat_isSet) {
        obj.insert(QString("endLat"), ::OpenAPI::toJsonValue(m_end_lat));
    }
    if (m_end_lon_isSet) {
        obj.insert(QString("endLon"), ::OpenAPI::toJsonValue(m_end_lon));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_max_speed_isSet) {
        obj.insert(QString("maxSpeed"), ::OpenAPI::toJsonValue(m_max_speed));
    }
    if (m_spent_fuel_isSet) {
        obj.insert(QString("spentFuel"), ::OpenAPI::toJsonValue(m_spent_fuel));
    }
    if (m_start_address_isSet) {
        obj.insert(QString("startAddress"), ::OpenAPI::toJsonValue(m_start_address));
    }
    if (m_start_lat_isSet) {
        obj.insert(QString("startLat"), ::OpenAPI::toJsonValue(m_start_lat));
    }
    if (m_start_lon_isSet) {
        obj.insert(QString("startLon"), ::OpenAPI::toJsonValue(m_start_lon));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

double OAIReportTrips::getAverageSpeed() const {
    return m_average_speed;
}
void OAIReportTrips::setAverageSpeed(const double &average_speed) {
    m_average_speed = average_speed;
    m_average_speed_isSet = true;
}

bool OAIReportTrips::is_average_speed_Set() const{
    return m_average_speed_isSet;
}

bool OAIReportTrips::is_average_speed_Valid() const{
    return m_average_speed_isValid;
}

qint32 OAIReportTrips::getDeviceId() const {
    return m_device_id;
}
void OAIReportTrips::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIReportTrips::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIReportTrips::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIReportTrips::getDeviceName() const {
    return m_device_name;
}
void OAIReportTrips::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIReportTrips::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIReportTrips::is_device_name_Valid() const{
    return m_device_name_isValid;
}

double OAIReportTrips::getDistance() const {
    return m_distance;
}
void OAIReportTrips::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIReportTrips::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIReportTrips::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIReportTrips::getDriverName() const {
    return m_driver_name;
}
void OAIReportTrips::setDriverName(const QString &driver_name) {
    m_driver_name = driver_name;
    m_driver_name_isSet = true;
}

bool OAIReportTrips::is_driver_name_Set() const{
    return m_driver_name_isSet;
}

bool OAIReportTrips::is_driver_name_Valid() const{
    return m_driver_name_isValid;
}

qint32 OAIReportTrips::getDriverUniqueId() const {
    return m_driver_unique_id;
}
void OAIReportTrips::setDriverUniqueId(const qint32 &driver_unique_id) {
    m_driver_unique_id = driver_unique_id;
    m_driver_unique_id_isSet = true;
}

bool OAIReportTrips::is_driver_unique_id_Set() const{
    return m_driver_unique_id_isSet;
}

bool OAIReportTrips::is_driver_unique_id_Valid() const{
    return m_driver_unique_id_isValid;
}

qint32 OAIReportTrips::getDuration() const {
    return m_duration;
}
void OAIReportTrips::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReportTrips::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReportTrips::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIReportTrips::getEndAddress() const {
    return m_end_address;
}
void OAIReportTrips::setEndAddress(const QString &end_address) {
    m_end_address = end_address;
    m_end_address_isSet = true;
}

bool OAIReportTrips::is_end_address_Set() const{
    return m_end_address_isSet;
}

bool OAIReportTrips::is_end_address_Valid() const{
    return m_end_address_isValid;
}

double OAIReportTrips::getEndLat() const {
    return m_end_lat;
}
void OAIReportTrips::setEndLat(const double &end_lat) {
    m_end_lat = end_lat;
    m_end_lat_isSet = true;
}

bool OAIReportTrips::is_end_lat_Set() const{
    return m_end_lat_isSet;
}

bool OAIReportTrips::is_end_lat_Valid() const{
    return m_end_lat_isValid;
}

double OAIReportTrips::getEndLon() const {
    return m_end_lon;
}
void OAIReportTrips::setEndLon(const double &end_lon) {
    m_end_lon = end_lon;
    m_end_lon_isSet = true;
}

bool OAIReportTrips::is_end_lon_Set() const{
    return m_end_lon_isSet;
}

bool OAIReportTrips::is_end_lon_Valid() const{
    return m_end_lon_isValid;
}

QDateTime OAIReportTrips::getEndTime() const {
    return m_end_time;
}
void OAIReportTrips::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIReportTrips::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIReportTrips::is_end_time_Valid() const{
    return m_end_time_isValid;
}

double OAIReportTrips::getMaxSpeed() const {
    return m_max_speed;
}
void OAIReportTrips::setMaxSpeed(const double &max_speed) {
    m_max_speed = max_speed;
    m_max_speed_isSet = true;
}

bool OAIReportTrips::is_max_speed_Set() const{
    return m_max_speed_isSet;
}

bool OAIReportTrips::is_max_speed_Valid() const{
    return m_max_speed_isValid;
}

double OAIReportTrips::getSpentFuel() const {
    return m_spent_fuel;
}
void OAIReportTrips::setSpentFuel(const double &spent_fuel) {
    m_spent_fuel = spent_fuel;
    m_spent_fuel_isSet = true;
}

bool OAIReportTrips::is_spent_fuel_Set() const{
    return m_spent_fuel_isSet;
}

bool OAIReportTrips::is_spent_fuel_Valid() const{
    return m_spent_fuel_isValid;
}

QString OAIReportTrips::getStartAddress() const {
    return m_start_address;
}
void OAIReportTrips::setStartAddress(const QString &start_address) {
    m_start_address = start_address;
    m_start_address_isSet = true;
}

bool OAIReportTrips::is_start_address_Set() const{
    return m_start_address_isSet;
}

bool OAIReportTrips::is_start_address_Valid() const{
    return m_start_address_isValid;
}

double OAIReportTrips::getStartLat() const {
    return m_start_lat;
}
void OAIReportTrips::setStartLat(const double &start_lat) {
    m_start_lat = start_lat;
    m_start_lat_isSet = true;
}

bool OAIReportTrips::is_start_lat_Set() const{
    return m_start_lat_isSet;
}

bool OAIReportTrips::is_start_lat_Valid() const{
    return m_start_lat_isValid;
}

double OAIReportTrips::getStartLon() const {
    return m_start_lon;
}
void OAIReportTrips::setStartLon(const double &start_lon) {
    m_start_lon = start_lon;
    m_start_lon_isSet = true;
}

bool OAIReportTrips::is_start_lon_Set() const{
    return m_start_lon_isSet;
}

bool OAIReportTrips::is_start_lon_Valid() const{
    return m_start_lon_isValid;
}

QDateTime OAIReportTrips::getStartTime() const {
    return m_start_time;
}
void OAIReportTrips::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReportTrips::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReportTrips::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIReportTrips::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spent_fuel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_lon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportTrips::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
