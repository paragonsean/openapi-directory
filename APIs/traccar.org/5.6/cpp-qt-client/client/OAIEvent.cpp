/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_geofence_id_isSet = false;
    m_geofence_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_maintenance_id_isSet = false;
    m_maintenance_id_isValid = false;

    m_position_id_isSet = false;
    m_position_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_geofence_id_isValid = ::OpenAPI::fromJsonValue(m_geofence_id, json[QString("geofenceId")]);
    m_geofence_id_isSet = !json[QString("geofenceId")].isNull() && m_geofence_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_maintenance_id_isValid = ::OpenAPI::fromJsonValue(m_maintenance_id, json[QString("maintenanceId")]);
    m_maintenance_id_isSet = !json[QString("maintenanceId")].isNull() && m_maintenance_id_isValid;

    m_position_id_isValid = ::OpenAPI::fromJsonValue(m_position_id, json[QString("positionId")]);
    m_position_id_isSet = !json[QString("positionId")].isNull() && m_position_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_geofence_id_isSet) {
        obj.insert(QString("geofenceId"), ::OpenAPI::toJsonValue(m_geofence_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_maintenance_id_isSet) {
        obj.insert(QString("maintenanceId"), ::OpenAPI::toJsonValue(m_maintenance_id));
    }
    if (m_position_id_isSet) {
        obj.insert(QString("positionId"), ::OpenAPI::toJsonValue(m_position_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIEvent::getAttributes() const {
    return m_attributes;
}
void OAIEvent::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEvent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEvent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAIEvent::getDeviceId() const {
    return m_device_id;
}
void OAIEvent::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIEvent::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIEvent::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QDateTime OAIEvent::getEventTime() const {
    return m_event_time;
}
void OAIEvent::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

qint32 OAIEvent::getGeofenceId() const {
    return m_geofence_id;
}
void OAIEvent::setGeofenceId(const qint32 &geofence_id) {
    m_geofence_id = geofence_id;
    m_geofence_id_isSet = true;
}

bool OAIEvent::is_geofence_id_Set() const{
    return m_geofence_id_isSet;
}

bool OAIEvent::is_geofence_id_Valid() const{
    return m_geofence_id_isValid;
}

qint32 OAIEvent::getId() const {
    return m_id;
}
void OAIEvent::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIEvent::getMaintenanceId() const {
    return m_maintenance_id;
}
void OAIEvent::setMaintenanceId(const qint32 &maintenance_id) {
    m_maintenance_id = maintenance_id;
    m_maintenance_id_isSet = true;
}

bool OAIEvent::is_maintenance_id_Set() const{
    return m_maintenance_id_isSet;
}

bool OAIEvent::is_maintenance_id_Valid() const{
    return m_maintenance_id_isValid;
}

qint32 OAIEvent::getPositionId() const {
    return m_position_id;
}
void OAIEvent::setPositionId(const qint32 &position_id) {
    m_position_id = position_id;
    m_position_id_isSet = true;
}

bool OAIEvent::is_position_id_Set() const{
    return m_position_id_isSet;
}

bool OAIEvent::is_position_id_Valid() const{
    return m_position_id_isValid;
}

QString OAIEvent::getType() const {
    return m_type;
}
void OAIEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofence_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
