/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_administrator_isSet = false;
    m_administrator_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_coordinate_format_isSet = false;
    m_coordinate_format_isValid = false;

    m_device_limit_isSet = false;
    m_device_limit_isValid = false;

    m_device_readonly_isSet = false;
    m_device_readonly_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_limit_commands_isSet = false;
    m_limit_commands_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_poi_layer_isSet = false;
    m_poi_layer_isValid = false;

    m_readonly_isSet = false;
    m_readonly_isValid = false;

    m_twelve_hour_format_isSet = false;
    m_twelve_hour_format_isValid = false;

    m_user_limit_isSet = false;
    m_user_limit_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_administrator_isValid = ::OpenAPI::fromJsonValue(m_administrator, json[QString("administrator")]);
    m_administrator_isSet = !json[QString("administrator")].isNull() && m_administrator_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_coordinate_format_isValid = ::OpenAPI::fromJsonValue(m_coordinate_format, json[QString("coordinateFormat")]);
    m_coordinate_format_isSet = !json[QString("coordinateFormat")].isNull() && m_coordinate_format_isValid;

    m_device_limit_isValid = ::OpenAPI::fromJsonValue(m_device_limit, json[QString("deviceLimit")]);
    m_device_limit_isSet = !json[QString("deviceLimit")].isNull() && m_device_limit_isValid;

    m_device_readonly_isValid = ::OpenAPI::fromJsonValue(m_device_readonly, json[QString("deviceReadonly")]);
    m_device_readonly_isSet = !json[QString("deviceReadonly")].isNull() && m_device_readonly_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_limit_commands_isValid = ::OpenAPI::fromJsonValue(m_limit_commands, json[QString("limitCommands")]);
    m_limit_commands_isSet = !json[QString("limitCommands")].isNull() && m_limit_commands_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("map")]);
    m_map_isSet = !json[QString("map")].isNull() && m_map_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_poi_layer_isValid = ::OpenAPI::fromJsonValue(m_poi_layer, json[QString("poiLayer")]);
    m_poi_layer_isSet = !json[QString("poiLayer")].isNull() && m_poi_layer_isValid;

    m_readonly_isValid = ::OpenAPI::fromJsonValue(m_readonly, json[QString("readonly")]);
    m_readonly_isSet = !json[QString("readonly")].isNull() && m_readonly_isValid;

    m_twelve_hour_format_isValid = ::OpenAPI::fromJsonValue(m_twelve_hour_format, json[QString("twelveHourFormat")]);
    m_twelve_hour_format_isSet = !json[QString("twelveHourFormat")].isNull() && m_twelve_hour_format_isValid;

    m_user_limit_isValid = ::OpenAPI::fromJsonValue(m_user_limit, json[QString("userLimit")]);
    m_user_limit_isSet = !json[QString("userLimit")].isNull() && m_user_limit_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_isSet) {
        obj.insert(QString("administrator"), ::OpenAPI::toJsonValue(m_administrator));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_coordinate_format_isSet) {
        obj.insert(QString("coordinateFormat"), ::OpenAPI::toJsonValue(m_coordinate_format));
    }
    if (m_device_limit_isSet) {
        obj.insert(QString("deviceLimit"), ::OpenAPI::toJsonValue(m_device_limit));
    }
    if (m_device_readonly_isSet) {
        obj.insert(QString("deviceReadonly"), ::OpenAPI::toJsonValue(m_device_readonly));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_limit_commands_isSet) {
        obj.insert(QString("limitCommands"), ::OpenAPI::toJsonValue(m_limit_commands));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_map_isSet) {
        obj.insert(QString("map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_poi_layer_isSet) {
        obj.insert(QString("poiLayer"), ::OpenAPI::toJsonValue(m_poi_layer));
    }
    if (m_readonly_isSet) {
        obj.insert(QString("readonly"), ::OpenAPI::toJsonValue(m_readonly));
    }
    if (m_twelve_hour_format_isSet) {
        obj.insert(QString("twelveHourFormat"), ::OpenAPI::toJsonValue(m_twelve_hour_format));
    }
    if (m_user_limit_isSet) {
        obj.insert(QString("userLimit"), ::OpenAPI::toJsonValue(m_user_limit));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

bool OAIUser::isAdministrator() const {
    return m_administrator;
}
void OAIUser::setAdministrator(const bool &administrator) {
    m_administrator = administrator;
    m_administrator_isSet = true;
}

bool OAIUser::is_administrator_Set() const{
    return m_administrator_isSet;
}

bool OAIUser::is_administrator_Valid() const{
    return m_administrator_isValid;
}

OAIObject OAIUser::getAttributes() const {
    return m_attributes;
}
void OAIUser::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIUser::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUser::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIUser::getCoordinateFormat() const {
    return m_coordinate_format;
}
void OAIUser::setCoordinateFormat(const QString &coordinate_format) {
    m_coordinate_format = coordinate_format;
    m_coordinate_format_isSet = true;
}

bool OAIUser::is_coordinate_format_Set() const{
    return m_coordinate_format_isSet;
}

bool OAIUser::is_coordinate_format_Valid() const{
    return m_coordinate_format_isValid;
}

qint32 OAIUser::getDeviceLimit() const {
    return m_device_limit;
}
void OAIUser::setDeviceLimit(const qint32 &device_limit) {
    m_device_limit = device_limit;
    m_device_limit_isSet = true;
}

bool OAIUser::is_device_limit_Set() const{
    return m_device_limit_isSet;
}

bool OAIUser::is_device_limit_Valid() const{
    return m_device_limit_isValid;
}

bool OAIUser::isDeviceReadonly() const {
    return m_device_readonly;
}
void OAIUser::setDeviceReadonly(const bool &device_readonly) {
    m_device_readonly = device_readonly;
    m_device_readonly_isSet = true;
}

bool OAIUser::is_device_readonly_Set() const{
    return m_device_readonly_isSet;
}

bool OAIUser::is_device_readonly_Valid() const{
    return m_device_readonly_isValid;
}

bool OAIUser::isDisabled() const {
    return m_disabled;
}
void OAIUser::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIUser::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIUser::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIUser::getExpirationTime() const {
    return m_expiration_time;
}
void OAIUser::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIUser::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIUser::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

double OAIUser::getLatitude() const {
    return m_latitude;
}
void OAIUser::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIUser::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIUser::is_latitude_Valid() const{
    return m_latitude_isValid;
}

bool OAIUser::isLimitCommands() const {
    return m_limit_commands;
}
void OAIUser::setLimitCommands(const bool &limit_commands) {
    m_limit_commands = limit_commands;
    m_limit_commands_isSet = true;
}

bool OAIUser::is_limit_commands_Set() const{
    return m_limit_commands_isSet;
}

bool OAIUser::is_limit_commands_Valid() const{
    return m_limit_commands_isValid;
}

double OAIUser::getLongitude() const {
    return m_longitude;
}
void OAIUser::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIUser::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIUser::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIUser::getMap() const {
    return m_map;
}
void OAIUser::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIUser::is_map_Set() const{
    return m_map_isSet;
}

bool OAIUser::is_map_Valid() const{
    return m_map_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPassword() const {
    return m_password;
}
void OAIUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUser::getPhone() const {
    return m_phone;
}
void OAIUser::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUser::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUser::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUser::getPoiLayer() const {
    return m_poi_layer;
}
void OAIUser::setPoiLayer(const QString &poi_layer) {
    m_poi_layer = poi_layer;
    m_poi_layer_isSet = true;
}

bool OAIUser::is_poi_layer_Set() const{
    return m_poi_layer_isSet;
}

bool OAIUser::is_poi_layer_Valid() const{
    return m_poi_layer_isValid;
}

bool OAIUser::isReadonly() const {
    return m_readonly;
}
void OAIUser::setReadonly(const bool &readonly) {
    m_readonly = readonly;
    m_readonly_isSet = true;
}

bool OAIUser::is_readonly_Set() const{
    return m_readonly_isSet;
}

bool OAIUser::is_readonly_Valid() const{
    return m_readonly_isValid;
}

bool OAIUser::isTwelveHourFormat() const {
    return m_twelve_hour_format;
}
void OAIUser::setTwelveHourFormat(const bool &twelve_hour_format) {
    m_twelve_hour_format = twelve_hour_format;
    m_twelve_hour_format_isSet = true;
}

bool OAIUser::is_twelve_hour_format_Set() const{
    return m_twelve_hour_format_isSet;
}

bool OAIUser::is_twelve_hour_format_Valid() const{
    return m_twelve_hour_format_isValid;
}

qint32 OAIUser::getUserLimit() const {
    return m_user_limit;
}
void OAIUser::setUserLimit(const qint32 &user_limit) {
    m_user_limit = user_limit;
    m_user_limit_isSet = true;
}

bool OAIUser::is_user_limit_Set() const{
    return m_user_limit_isSet;
}

bool OAIUser::is_user_limit_Valid() const{
    return m_user_limit_isValid;
}

qint32 OAIUser::getZoom() const {
    return m_zoom;
}
void OAIUser::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIUser::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIUser::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_commands_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_layer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twelve_hour_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
