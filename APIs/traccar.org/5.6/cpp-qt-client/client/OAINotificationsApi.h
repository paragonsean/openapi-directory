/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationsApi_H
#define OAI_OAINotificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotification.h"
#include "OAINotificationType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationsApi(const int timeOut = 0);
    ~OAINotificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  device_id qint32 [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  refresh bool [optional]
    */
    virtual void notificationsGet(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &device_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &refresh = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void notificationsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAINotification [required]
    */
    virtual void notificationsIdPut(const qint32 &id, const OAINotification &body);

    /**
    * @param[in]  body OAINotification [required]
    */
    virtual void notificationsPost(const OAINotification &body);


    virtual void notificationsTestPost();


    virtual void notificationsTypesGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationsGetCallback(OAIHttpRequestWorker *worker);
    void notificationsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationsIdPutCallback(OAIHttpRequestWorker *worker);
    void notificationsPostCallback(OAIHttpRequestWorker *worker);
    void notificationsTestPostCallback(OAIHttpRequestWorker *worker);
    void notificationsTypesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationsGetSignal(QList<OAINotification> summary);
    void notificationsIdDeleteSignal();
    void notificationsIdPutSignal(OAINotification summary);
    void notificationsPostSignal(OAINotification summary);
    void notificationsTestPostSignal();
    void notificationsTypesGetSignal(QList<OAINotificationType> summary);


    void notificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotification> summary);
    void notificationsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationsIdPutSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsPostSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsTestPostSignalFull(OAIHttpRequestWorker *worker);
    void notificationsTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotificationType> summary);

    Q_DECL_DEPRECATED_X("Use notificationsGetSignalError() instead")
    void notificationsGetSignalE(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetSignalError(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsIdDeleteSignalError() instead")
    void notificationsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsIdPutSignalError() instead")
    void notificationsIdPutSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsIdPutSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsPostSignalError() instead")
    void notificationsPostSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsPostSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsTestPostSignalError() instead")
    void notificationsTestPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsTestPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsTypesGetSignalError() instead")
    void notificationsTypesGetSignalE(QList<OAINotificationType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsTypesGetSignalError(QList<OAINotificationType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationsGetSignalErrorFull() instead")
    void notificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsIdDeleteSignalErrorFull() instead")
    void notificationsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsIdPutSignalErrorFull() instead")
    void notificationsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsPostSignalErrorFull() instead")
    void notificationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsTestPostSignalErrorFull() instead")
    void notificationsTestPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsTestPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsTypesGetSignalErrorFull() instead")
    void notificationsTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
