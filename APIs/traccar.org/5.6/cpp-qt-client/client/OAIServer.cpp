/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServer::OAIServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServer::OAIServer() {
    this->initializeModel();
}

OAIServer::~OAIServer() {}

void OAIServer::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_bing_key_isSet = false;
    m_bing_key_isValid = false;

    m_coordinate_format_isSet = false;
    m_coordinate_format_isValid = false;

    m_device_readonly_isSet = false;
    m_device_readonly_isValid = false;

    m_force_settings_isSet = false;
    m_force_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_limit_commands_isSet = false;
    m_limit_commands_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;

    m_map_url_isSet = false;
    m_map_url_isValid = false;

    m_poi_layer_isSet = false;
    m_poi_layer_isValid = false;

    m_readonly_isSet = false;
    m_readonly_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_twelve_hour_format_isSet = false;
    m_twelve_hour_format_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_zoom_isSet = false;
    m_zoom_isValid = false;
}

void OAIServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServer::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_bing_key_isValid = ::OpenAPI::fromJsonValue(m_bing_key, json[QString("bingKey")]);
    m_bing_key_isSet = !json[QString("bingKey")].isNull() && m_bing_key_isValid;

    m_coordinate_format_isValid = ::OpenAPI::fromJsonValue(m_coordinate_format, json[QString("coordinateFormat")]);
    m_coordinate_format_isSet = !json[QString("coordinateFormat")].isNull() && m_coordinate_format_isValid;

    m_device_readonly_isValid = ::OpenAPI::fromJsonValue(m_device_readonly, json[QString("deviceReadonly")]);
    m_device_readonly_isSet = !json[QString("deviceReadonly")].isNull() && m_device_readonly_isValid;

    m_force_settings_isValid = ::OpenAPI::fromJsonValue(m_force_settings, json[QString("forceSettings")]);
    m_force_settings_isSet = !json[QString("forceSettings")].isNull() && m_force_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_limit_commands_isValid = ::OpenAPI::fromJsonValue(m_limit_commands, json[QString("limitCommands")]);
    m_limit_commands_isSet = !json[QString("limitCommands")].isNull() && m_limit_commands_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("map")]);
    m_map_isSet = !json[QString("map")].isNull() && m_map_isValid;

    m_map_url_isValid = ::OpenAPI::fromJsonValue(m_map_url, json[QString("mapUrl")]);
    m_map_url_isSet = !json[QString("mapUrl")].isNull() && m_map_url_isValid;

    m_poi_layer_isValid = ::OpenAPI::fromJsonValue(m_poi_layer, json[QString("poiLayer")]);
    m_poi_layer_isSet = !json[QString("poiLayer")].isNull() && m_poi_layer_isValid;

    m_readonly_isValid = ::OpenAPI::fromJsonValue(m_readonly, json[QString("readonly")]);
    m_readonly_isSet = !json[QString("readonly")].isNull() && m_readonly_isValid;

    m_registration_isValid = ::OpenAPI::fromJsonValue(m_registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_twelve_hour_format_isValid = ::OpenAPI::fromJsonValue(m_twelve_hour_format, json[QString("twelveHourFormat")]);
    m_twelve_hour_format_isSet = !json[QString("twelveHourFormat")].isNull() && m_twelve_hour_format_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_zoom_isValid = ::OpenAPI::fromJsonValue(m_zoom, json[QString("zoom")]);
    m_zoom_isSet = !json[QString("zoom")].isNull() && m_zoom_isValid;
}

QString OAIServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServer::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_bing_key_isSet) {
        obj.insert(QString("bingKey"), ::OpenAPI::toJsonValue(m_bing_key));
    }
    if (m_coordinate_format_isSet) {
        obj.insert(QString("coordinateFormat"), ::OpenAPI::toJsonValue(m_coordinate_format));
    }
    if (m_device_readonly_isSet) {
        obj.insert(QString("deviceReadonly"), ::OpenAPI::toJsonValue(m_device_readonly));
    }
    if (m_force_settings_isSet) {
        obj.insert(QString("forceSettings"), ::OpenAPI::toJsonValue(m_force_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_limit_commands_isSet) {
        obj.insert(QString("limitCommands"), ::OpenAPI::toJsonValue(m_limit_commands));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_map_isSet) {
        obj.insert(QString("map"), ::OpenAPI::toJsonValue(m_map));
    }
    if (m_map_url_isSet) {
        obj.insert(QString("mapUrl"), ::OpenAPI::toJsonValue(m_map_url));
    }
    if (m_poi_layer_isSet) {
        obj.insert(QString("poiLayer"), ::OpenAPI::toJsonValue(m_poi_layer));
    }
    if (m_readonly_isSet) {
        obj.insert(QString("readonly"), ::OpenAPI::toJsonValue(m_readonly));
    }
    if (m_registration_isSet) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(m_registration));
    }
    if (m_twelve_hour_format_isSet) {
        obj.insert(QString("twelveHourFormat"), ::OpenAPI::toJsonValue(m_twelve_hour_format));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_zoom_isSet) {
        obj.insert(QString("zoom"), ::OpenAPI::toJsonValue(m_zoom));
    }
    return obj;
}

OAIObject OAIServer::getAttributes() const {
    return m_attributes;
}
void OAIServer::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIServer::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIServer::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIServer::getBingKey() const {
    return m_bing_key;
}
void OAIServer::setBingKey(const QString &bing_key) {
    m_bing_key = bing_key;
    m_bing_key_isSet = true;
}

bool OAIServer::is_bing_key_Set() const{
    return m_bing_key_isSet;
}

bool OAIServer::is_bing_key_Valid() const{
    return m_bing_key_isValid;
}

QString OAIServer::getCoordinateFormat() const {
    return m_coordinate_format;
}
void OAIServer::setCoordinateFormat(const QString &coordinate_format) {
    m_coordinate_format = coordinate_format;
    m_coordinate_format_isSet = true;
}

bool OAIServer::is_coordinate_format_Set() const{
    return m_coordinate_format_isSet;
}

bool OAIServer::is_coordinate_format_Valid() const{
    return m_coordinate_format_isValid;
}

bool OAIServer::isDeviceReadonly() const {
    return m_device_readonly;
}
void OAIServer::setDeviceReadonly(const bool &device_readonly) {
    m_device_readonly = device_readonly;
    m_device_readonly_isSet = true;
}

bool OAIServer::is_device_readonly_Set() const{
    return m_device_readonly_isSet;
}

bool OAIServer::is_device_readonly_Valid() const{
    return m_device_readonly_isValid;
}

bool OAIServer::isForceSettings() const {
    return m_force_settings;
}
void OAIServer::setForceSettings(const bool &force_settings) {
    m_force_settings = force_settings;
    m_force_settings_isSet = true;
}

bool OAIServer::is_force_settings_Set() const{
    return m_force_settings_isSet;
}

bool OAIServer::is_force_settings_Valid() const{
    return m_force_settings_isValid;
}

qint32 OAIServer::getId() const {
    return m_id;
}
void OAIServer::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServer::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServer::is_id_Valid() const{
    return m_id_isValid;
}

double OAIServer::getLatitude() const {
    return m_latitude;
}
void OAIServer::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIServer::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIServer::is_latitude_Valid() const{
    return m_latitude_isValid;
}

bool OAIServer::isLimitCommands() const {
    return m_limit_commands;
}
void OAIServer::setLimitCommands(const bool &limit_commands) {
    m_limit_commands = limit_commands;
    m_limit_commands_isSet = true;
}

bool OAIServer::is_limit_commands_Set() const{
    return m_limit_commands_isSet;
}

bool OAIServer::is_limit_commands_Valid() const{
    return m_limit_commands_isValid;
}

double OAIServer::getLongitude() const {
    return m_longitude;
}
void OAIServer::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIServer::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIServer::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIServer::getMap() const {
    return m_map;
}
void OAIServer::setMap(const QString &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIServer::is_map_Set() const{
    return m_map_isSet;
}

bool OAIServer::is_map_Valid() const{
    return m_map_isValid;
}

QString OAIServer::getMapUrl() const {
    return m_map_url;
}
void OAIServer::setMapUrl(const QString &map_url) {
    m_map_url = map_url;
    m_map_url_isSet = true;
}

bool OAIServer::is_map_url_Set() const{
    return m_map_url_isSet;
}

bool OAIServer::is_map_url_Valid() const{
    return m_map_url_isValid;
}

QString OAIServer::getPoiLayer() const {
    return m_poi_layer;
}
void OAIServer::setPoiLayer(const QString &poi_layer) {
    m_poi_layer = poi_layer;
    m_poi_layer_isSet = true;
}

bool OAIServer::is_poi_layer_Set() const{
    return m_poi_layer_isSet;
}

bool OAIServer::is_poi_layer_Valid() const{
    return m_poi_layer_isValid;
}

bool OAIServer::isReadonly() const {
    return m_readonly;
}
void OAIServer::setReadonly(const bool &readonly) {
    m_readonly = readonly;
    m_readonly_isSet = true;
}

bool OAIServer::is_readonly_Set() const{
    return m_readonly_isSet;
}

bool OAIServer::is_readonly_Valid() const{
    return m_readonly_isValid;
}

bool OAIServer::isRegistration() const {
    return m_registration;
}
void OAIServer::setRegistration(const bool &registration) {
    m_registration = registration;
    m_registration_isSet = true;
}

bool OAIServer::is_registration_Set() const{
    return m_registration_isSet;
}

bool OAIServer::is_registration_Valid() const{
    return m_registration_isValid;
}

bool OAIServer::isTwelveHourFormat() const {
    return m_twelve_hour_format;
}
void OAIServer::setTwelveHourFormat(const bool &twelve_hour_format) {
    m_twelve_hour_format = twelve_hour_format;
    m_twelve_hour_format_isSet = true;
}

bool OAIServer::is_twelve_hour_format_Set() const{
    return m_twelve_hour_format_isSet;
}

bool OAIServer::is_twelve_hour_format_Valid() const{
    return m_twelve_hour_format_isValid;
}

QString OAIServer::getVersion() const {
    return m_version;
}
void OAIServer::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServer::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServer::is_version_Valid() const{
    return m_version_isValid;
}

qint32 OAIServer::getZoom() const {
    return m_zoom;
}
void OAIServer::setZoom(const qint32 &zoom) {
    m_zoom = zoom;
    m_zoom_isSet = true;
}

bool OAIServer::is_zoom_Set() const{
    return m_zoom_isSet;
}

bool OAIServer::is_zoom_Valid() const{
    return m_zoom_isValid;
}

bool OAIServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_commands_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_layer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twelve_hour_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zoom_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
