/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDevice.h"
#include "OAIDeviceAccumulators.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  id qint32 [optional]
    * @param[in]  unique_id QString [optional]
    */
    virtual void devicesGet(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &unique_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAIDeviceAccumulators [required]
    */
    virtual void devicesIdAccumulatorsPut(const qint32 &id, const OAIDeviceAccumulators &body);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void devicesIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAIDevice [required]
    */
    virtual void devicesIdPut(const qint32 &id, const OAIDevice &body);

    /**
    * @param[in]  body OAIDevice [required]
    */
    virtual void devicesPost(const OAIDevice &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devicesGetCallback(OAIHttpRequestWorker *worker);
    void devicesIdAccumulatorsPutCallback(OAIHttpRequestWorker *worker);
    void devicesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void devicesIdPutCallback(OAIHttpRequestWorker *worker);
    void devicesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void devicesGetSignal(QList<OAIDevice> summary);
    void devicesIdAccumulatorsPutSignal();
    void devicesIdDeleteSignal();
    void devicesIdPutSignal(OAIDevice summary);
    void devicesPostSignal(OAIDevice summary);


    void devicesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDevice> summary);
    void devicesIdAccumulatorsPutSignalFull(OAIHttpRequestWorker *worker);
    void devicesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void devicesIdPutSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);
    void devicesPostSignalFull(OAIHttpRequestWorker *worker, OAIDevice summary);

    Q_DECL_DEPRECATED_X("Use devicesGetSignalError() instead")
    void devicesGetSignalE(QList<OAIDevice> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalError(QList<OAIDevice> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdAccumulatorsPutSignalError() instead")
    void devicesIdAccumulatorsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdAccumulatorsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdDeleteSignalError() instead")
    void devicesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdPutSignalError() instead")
    void devicesIdPutSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdPutSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesPostSignalError() instead")
    void devicesPostSignalE(OAIDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesPostSignalError(OAIDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use devicesGetSignalErrorFull() instead")
    void devicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdAccumulatorsPutSignalErrorFull() instead")
    void devicesIdAccumulatorsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdAccumulatorsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdDeleteSignalErrorFull() instead")
    void devicesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesIdPutSignalErrorFull() instead")
    void devicesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesPostSignalErrorFull() instead")
    void devicesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
