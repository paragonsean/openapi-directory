/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_geofence_ids_isSet = false;
    m_geofence_ids_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_id_isSet = false;
    m_position_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;
}

void OAIDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_geofence_ids_isValid = ::OpenAPI::fromJsonValue(m_geofence_ids, json[QString("geofenceIds")]);
    m_geofence_ids_isSet = !json[QString("geofenceIds")].isNull() && m_geofence_ids_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_position_id_isValid = ::OpenAPI::fromJsonValue(m_position_id, json[QString("positionId")]);
    m_position_id_isSet = !json[QString("positionId")].isNull() && m_position_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;
}

QString OAIDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_contact_isSet) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_geofence_ids.size() > 0) {
        obj.insert(QString("geofenceIds"), ::OpenAPI::toJsonValue(m_geofence_ids));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_id_isSet) {
        obj.insert(QString("positionId"), ::OpenAPI::toJsonValue(m_position_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    return obj;
}

OAIObject OAIDevice::getAttributes() const {
    return m_attributes;
}
void OAIDevice::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDevice::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDevice::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIDevice::getCategory() const {
    return m_category;
}
void OAIDevice::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDevice::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDevice::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIDevice::getContact() const {
    return m_contact;
}
void OAIDevice::setContact(const QString &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIDevice::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIDevice::is_contact_Valid() const{
    return m_contact_isValid;
}

bool OAIDevice::isDisabled() const {
    return m_disabled;
}
void OAIDevice::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIDevice::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIDevice::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QList<qint32> OAIDevice::getGeofenceIds() const {
    return m_geofence_ids;
}
void OAIDevice::setGeofenceIds(const QList<qint32> &geofence_ids) {
    m_geofence_ids = geofence_ids;
    m_geofence_ids_isSet = true;
}

bool OAIDevice::is_geofence_ids_Set() const{
    return m_geofence_ids_isSet;
}

bool OAIDevice::is_geofence_ids_Valid() const{
    return m_geofence_ids_isValid;
}

qint32 OAIDevice::getGroupId() const {
    return m_group_id;
}
void OAIDevice::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIDevice::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIDevice::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint32 OAIDevice::getId() const {
    return m_id;
}
void OAIDevice::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIDevice::getLastUpdate() const {
    return m_last_update;
}
void OAIDevice::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAIDevice::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAIDevice::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QString OAIDevice::getModel() const {
    return m_model;
}
void OAIDevice::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDevice::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDevice::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDevice::getName() const {
    return m_name;
}
void OAIDevice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDevice::getPhone() const {
    return m_phone;
}
void OAIDevice::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIDevice::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIDevice::is_phone_Valid() const{
    return m_phone_isValid;
}

qint32 OAIDevice::getPositionId() const {
    return m_position_id;
}
void OAIDevice::setPositionId(const qint32 &position_id) {
    m_position_id = position_id;
    m_position_id_isSet = true;
}

bool OAIDevice::is_position_id_Set() const{
    return m_position_id_isSet;
}

bool OAIDevice::is_position_id_Valid() const{
    return m_position_id_isValid;
}

QString OAIDevice::getStatus() const {
    return m_status;
}
void OAIDevice::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDevice::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDevice::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDevice::getUniqueId() const {
    return m_unique_id;
}
void OAIDevice::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIDevice::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIDevice::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

bool OAIDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofence_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
