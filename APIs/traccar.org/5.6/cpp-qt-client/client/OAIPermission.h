/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPermission.h
 *
 * This is a permission map that contain two object indexes. It is used to link/unlink objects. Order is important. Example: { deviceId:8, geofenceId: 16 }
 */

#ifndef OAIPermission_H
#define OAIPermission_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPermission : public OAIObject {
public:
    OAIPermission();
    OAIPermission(QString json);
    ~OAIPermission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAttributeId() const;
    void setAttributeId(const qint32 &attribute_id);
    bool is_attribute_id_Set() const;
    bool is_attribute_id_Valid() const;

    qint32 getCalendarId() const;
    void setCalendarId(const qint32 &calendar_id);
    bool is_calendar_id_Set() const;
    bool is_calendar_id_Valid() const;

    qint32 getDeviceId() const;
    void setDeviceId(const qint32 &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    qint32 getDriverId() const;
    void setDriverId(const qint32 &driver_id);
    bool is_driver_id_Set() const;
    bool is_driver_id_Valid() const;

    qint32 getGeofenceId() const;
    void setGeofenceId(const qint32 &geofence_id);
    bool is_geofence_id_Set() const;
    bool is_geofence_id_Valid() const;

    qint32 getGroupId() const;
    void setGroupId(const qint32 &group_id);
    bool is_group_id_Set() const;
    bool is_group_id_Valid() const;

    qint32 getManagedUserId() const;
    void setManagedUserId(const qint32 &managed_user_id);
    bool is_managed_user_id_Set() const;
    bool is_managed_user_id_Valid() const;

    qint32 getNotificationId() const;
    void setNotificationId(const qint32 &notification_id);
    bool is_notification_id_Set() const;
    bool is_notification_id_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_attribute_id;
    bool m_attribute_id_isSet;
    bool m_attribute_id_isValid;

    qint32 m_calendar_id;
    bool m_calendar_id_isSet;
    bool m_calendar_id_isValid;

    qint32 m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    qint32 m_driver_id;
    bool m_driver_id_isSet;
    bool m_driver_id_isValid;

    qint32 m_geofence_id;
    bool m_geofence_id_isSet;
    bool m_geofence_id_isValid;

    qint32 m_group_id;
    bool m_group_id_isSet;
    bool m_group_id_isValid;

    qint32 m_managed_user_id;
    bool m_managed_user_id_isSet;
    bool m_managed_user_id_isValid;

    qint32 m_notification_id;
    bool m_notification_id_isSet;
    bool m_notification_id_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPermission)

#endif // OAIPermission_H
