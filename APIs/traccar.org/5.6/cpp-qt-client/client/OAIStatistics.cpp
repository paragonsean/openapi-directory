/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_active_devices_isSet = false;
    m_active_devices_isValid = false;

    m_active_users_isSet = false;
    m_active_users_isValid = false;

    m_capture_time_isSet = false;
    m_capture_time_isValid = false;

    m_messages_received_isSet = false;
    m_messages_received_isValid = false;

    m_messages_stored_isSet = false;
    m_messages_stored_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_active_devices_isValid = ::OpenAPI::fromJsonValue(m_active_devices, json[QString("activeDevices")]);
    m_active_devices_isSet = !json[QString("activeDevices")].isNull() && m_active_devices_isValid;

    m_active_users_isValid = ::OpenAPI::fromJsonValue(m_active_users, json[QString("activeUsers")]);
    m_active_users_isSet = !json[QString("activeUsers")].isNull() && m_active_users_isValid;

    m_capture_time_isValid = ::OpenAPI::fromJsonValue(m_capture_time, json[QString("captureTime")]);
    m_capture_time_isSet = !json[QString("captureTime")].isNull() && m_capture_time_isValid;

    m_messages_received_isValid = ::OpenAPI::fromJsonValue(m_messages_received, json[QString("messagesReceived")]);
    m_messages_received_isSet = !json[QString("messagesReceived")].isNull() && m_messages_received_isValid;

    m_messages_stored_isValid = ::OpenAPI::fromJsonValue(m_messages_stored, json[QString("messagesStored")]);
    m_messages_stored_isSet = !json[QString("messagesStored")].isNull() && m_messages_stored_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_active_devices_isSet) {
        obj.insert(QString("activeDevices"), ::OpenAPI::toJsonValue(m_active_devices));
    }
    if (m_active_users_isSet) {
        obj.insert(QString("activeUsers"), ::OpenAPI::toJsonValue(m_active_users));
    }
    if (m_capture_time_isSet) {
        obj.insert(QString("captureTime"), ::OpenAPI::toJsonValue(m_capture_time));
    }
    if (m_messages_received_isSet) {
        obj.insert(QString("messagesReceived"), ::OpenAPI::toJsonValue(m_messages_received));
    }
    if (m_messages_stored_isSet) {
        obj.insert(QString("messagesStored"), ::OpenAPI::toJsonValue(m_messages_stored));
    }
    if (m_requests_isSet) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

qint32 OAIStatistics::getActiveDevices() const {
    return m_active_devices;
}
void OAIStatistics::setActiveDevices(const qint32 &active_devices) {
    m_active_devices = active_devices;
    m_active_devices_isSet = true;
}

bool OAIStatistics::is_active_devices_Set() const{
    return m_active_devices_isSet;
}

bool OAIStatistics::is_active_devices_Valid() const{
    return m_active_devices_isValid;
}

qint32 OAIStatistics::getActiveUsers() const {
    return m_active_users;
}
void OAIStatistics::setActiveUsers(const qint32 &active_users) {
    m_active_users = active_users;
    m_active_users_isSet = true;
}

bool OAIStatistics::is_active_users_Set() const{
    return m_active_users_isSet;
}

bool OAIStatistics::is_active_users_Valid() const{
    return m_active_users_isValid;
}

QDateTime OAIStatistics::getCaptureTime() const {
    return m_capture_time;
}
void OAIStatistics::setCaptureTime(const QDateTime &capture_time) {
    m_capture_time = capture_time;
    m_capture_time_isSet = true;
}

bool OAIStatistics::is_capture_time_Set() const{
    return m_capture_time_isSet;
}

bool OAIStatistics::is_capture_time_Valid() const{
    return m_capture_time_isValid;
}

qint32 OAIStatistics::getMessagesReceived() const {
    return m_messages_received;
}
void OAIStatistics::setMessagesReceived(const qint32 &messages_received) {
    m_messages_received = messages_received;
    m_messages_received_isSet = true;
}

bool OAIStatistics::is_messages_received_Set() const{
    return m_messages_received_isSet;
}

bool OAIStatistics::is_messages_received_Valid() const{
    return m_messages_received_isValid;
}

qint32 OAIStatistics::getMessagesStored() const {
    return m_messages_stored;
}
void OAIStatistics::setMessagesStored(const qint32 &messages_stored) {
    m_messages_stored = messages_stored;
    m_messages_stored_isSet = true;
}

bool OAIStatistics::is_messages_stored_Set() const{
    return m_messages_stored_isSet;
}

bool OAIStatistics::is_messages_stored_Valid() const{
    return m_messages_stored_isValid;
}

qint32 OAIStatistics::getRequests() const {
    return m_requests;
}
void OAIStatistics::setRequests(const qint32 &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIStatistics::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIStatistics::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_stored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
