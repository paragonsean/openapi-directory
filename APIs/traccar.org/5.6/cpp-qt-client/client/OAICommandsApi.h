/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommandsApi_H
#define OAI_OAICommandsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommand.h"
#include "OAICommandType.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommandsApi : public QObject {
    Q_OBJECT

public:
    OAICommandsApi(const int timeOut = 0);
    ~OAICommandsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  all bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  device_id qint32 [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  refresh bool [optional]
    */
    virtual void commandsGet(const ::OpenAPI::OptionalParam<bool> &all = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &device_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &refresh = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void commandsIdDelete(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body OAICommand [required]
    */
    virtual void commandsIdPut(const qint32 &id, const OAICommand &body);

    /**
    * @param[in]  body OAICommand [required]
    */
    virtual void commandsPost(const OAICommand &body);

    /**
    * @param[in]  device_id qint32 [optional]
    */
    virtual void commandsSendGet(const ::OpenAPI::OptionalParam<qint32> &device_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  body OAICommand [required]
    */
    virtual void commandsSendPost(const OAICommand &body);

    /**
    * @param[in]  device_id qint32 [optional]
    * @param[in]  protocol QString [optional]
    * @param[in]  text_channel bool [optional]
    */
    virtual void commandsTypesGet(const ::OpenAPI::OptionalParam<qint32> &device_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &text_channel = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commandsGetCallback(OAIHttpRequestWorker *worker);
    void commandsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void commandsIdPutCallback(OAIHttpRequestWorker *worker);
    void commandsPostCallback(OAIHttpRequestWorker *worker);
    void commandsSendGetCallback(OAIHttpRequestWorker *worker);
    void commandsSendPostCallback(OAIHttpRequestWorker *worker);
    void commandsTypesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commandsGetSignal(QList<OAICommand> summary);
    void commandsIdDeleteSignal();
    void commandsIdPutSignal(OAICommand summary);
    void commandsPostSignal(OAICommand summary);
    void commandsSendGetSignal(QList<OAICommand> summary);
    void commandsSendPostSignal(OAICommand summary);
    void commandsTypesGetSignal(QList<OAICommandType> summary);


    void commandsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommand> summary);
    void commandsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void commandsIdPutSignalFull(OAIHttpRequestWorker *worker, OAICommand summary);
    void commandsPostSignalFull(OAIHttpRequestWorker *worker, OAICommand summary);
    void commandsSendGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommand> summary);
    void commandsSendPostSignalFull(OAIHttpRequestWorker *worker, OAICommand summary);
    void commandsTypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICommandType> summary);

    Q_DECL_DEPRECATED_X("Use commandsGetSignalError() instead")
    void commandsGetSignalE(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsGetSignalError(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsIdDeleteSignalError() instead")
    void commandsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commandsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsIdPutSignalError() instead")
    void commandsIdPutSignalE(OAICommand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsIdPutSignalError(OAICommand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsPostSignalError() instead")
    void commandsPostSignalE(OAICommand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsPostSignalError(OAICommand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsSendGetSignalError() instead")
    void commandsSendGetSignalE(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsSendGetSignalError(QList<OAICommand> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsSendPostSignalError() instead")
    void commandsSendPostSignalE(OAICommand summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsSendPostSignalError(OAICommand summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsTypesGetSignalError() instead")
    void commandsTypesGetSignalE(QList<OAICommandType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsTypesGetSignalError(QList<OAICommandType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commandsGetSignalErrorFull() instead")
    void commandsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsIdDeleteSignalErrorFull() instead")
    void commandsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsIdPutSignalErrorFull() instead")
    void commandsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsPostSignalErrorFull() instead")
    void commandsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsSendGetSignalErrorFull() instead")
    void commandsSendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsSendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsSendPostSignalErrorFull() instead")
    void commandsSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commandsTypesGetSignalErrorFull() instead")
    void commandsTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commandsTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
