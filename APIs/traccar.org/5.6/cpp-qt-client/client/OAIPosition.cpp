/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosition::OAIPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosition::OAIPosition() {
    this->initializeModel();
}

OAIPosition::~OAIPosition() {}

void OAIPosition::initializeModel() {

    m_accuracy_isSet = false;
    m_accuracy_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_course_isSet = false;
    m_course_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_time_isSet = false;
    m_device_time_isValid = false;

    m_fix_time_isSet = false;
    m_fix_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_outdated_isSet = false;
    m_outdated_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_server_time_isSet = false;
    m_server_time_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosition::fromJsonObject(QJsonObject json) {

    m_accuracy_isValid = ::OpenAPI::fromJsonValue(m_accuracy, json[QString("accuracy")]);
    m_accuracy_isSet = !json[QString("accuracy")].isNull() && m_accuracy_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_course_isValid = ::OpenAPI::fromJsonValue(m_course, json[QString("course")]);
    m_course_isSet = !json[QString("course")].isNull() && m_course_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_time_isValid = ::OpenAPI::fromJsonValue(m_device_time, json[QString("deviceTime")]);
    m_device_time_isSet = !json[QString("deviceTime")].isNull() && m_device_time_isValid;

    m_fix_time_isValid = ::OpenAPI::fromJsonValue(m_fix_time, json[QString("fixTime")]);
    m_fix_time_isSet = !json[QString("fixTime")].isNull() && m_fix_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_outdated_isValid = ::OpenAPI::fromJsonValue(m_outdated, json[QString("outdated")]);
    m_outdated_isSet = !json[QString("outdated")].isNull() && m_outdated_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_server_time_isValid = ::OpenAPI::fromJsonValue(m_server_time, json[QString("serverTime")]);
    m_server_time_isSet = !json[QString("serverTime")].isNull() && m_server_time_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_accuracy_isSet) {
        obj.insert(QString("accuracy"), ::OpenAPI::toJsonValue(m_accuracy));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_course_isSet) {
        obj.insert(QString("course"), ::OpenAPI::toJsonValue(m_course));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_time_isSet) {
        obj.insert(QString("deviceTime"), ::OpenAPI::toJsonValue(m_device_time));
    }
    if (m_fix_time_isSet) {
        obj.insert(QString("fixTime"), ::OpenAPI::toJsonValue(m_fix_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_outdated_isSet) {
        obj.insert(QString("outdated"), ::OpenAPI::toJsonValue(m_outdated));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_server_time_isSet) {
        obj.insert(QString("serverTime"), ::OpenAPI::toJsonValue(m_server_time));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

double OAIPosition::getAccuracy() const {
    return m_accuracy;
}
void OAIPosition::setAccuracy(const double &accuracy) {
    m_accuracy = accuracy;
    m_accuracy_isSet = true;
}

bool OAIPosition::is_accuracy_Set() const{
    return m_accuracy_isSet;
}

bool OAIPosition::is_accuracy_Valid() const{
    return m_accuracy_isValid;
}

QString OAIPosition::getAddress() const {
    return m_address;
}
void OAIPosition::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPosition::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPosition::is_address_Valid() const{
    return m_address_isValid;
}

double OAIPosition::getAltitude() const {
    return m_altitude;
}
void OAIPosition::setAltitude(const double &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIPosition::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIPosition::is_altitude_Valid() const{
    return m_altitude_isValid;
}

OAIObject OAIPosition::getAttributes() const {
    return m_attributes;
}
void OAIPosition::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIPosition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIPosition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

double OAIPosition::getCourse() const {
    return m_course;
}
void OAIPosition::setCourse(const double &course) {
    m_course = course;
    m_course_isSet = true;
}

bool OAIPosition::is_course_Set() const{
    return m_course_isSet;
}

bool OAIPosition::is_course_Valid() const{
    return m_course_isValid;
}

qint32 OAIPosition::getDeviceId() const {
    return m_device_id;
}
void OAIPosition::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIPosition::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIPosition::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QDateTime OAIPosition::getDeviceTime() const {
    return m_device_time;
}
void OAIPosition::setDeviceTime(const QDateTime &device_time) {
    m_device_time = device_time;
    m_device_time_isSet = true;
}

bool OAIPosition::is_device_time_Set() const{
    return m_device_time_isSet;
}

bool OAIPosition::is_device_time_Valid() const{
    return m_device_time_isValid;
}

QDateTime OAIPosition::getFixTime() const {
    return m_fix_time;
}
void OAIPosition::setFixTime(const QDateTime &fix_time) {
    m_fix_time = fix_time;
    m_fix_time_isSet = true;
}

bool OAIPosition::is_fix_time_Set() const{
    return m_fix_time_isSet;
}

bool OAIPosition::is_fix_time_Valid() const{
    return m_fix_time_isValid;
}

qint32 OAIPosition::getId() const {
    return m_id;
}
void OAIPosition::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPosition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPosition::is_id_Valid() const{
    return m_id_isValid;
}

double OAIPosition::getLatitude() const {
    return m_latitude;
}
void OAIPosition::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPosition::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPosition::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIPosition::getLongitude() const {
    return m_longitude;
}
void OAIPosition::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPosition::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPosition::is_longitude_Valid() const{
    return m_longitude_isValid;
}

OAIObject OAIPosition::getNetwork() const {
    return m_network;
}
void OAIPosition::setNetwork(const OAIObject &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIPosition::is_network_Set() const{
    return m_network_isSet;
}

bool OAIPosition::is_network_Valid() const{
    return m_network_isValid;
}

bool OAIPosition::isOutdated() const {
    return m_outdated;
}
void OAIPosition::setOutdated(const bool &outdated) {
    m_outdated = outdated;
    m_outdated_isSet = true;
}

bool OAIPosition::is_outdated_Set() const{
    return m_outdated_isSet;
}

bool OAIPosition::is_outdated_Valid() const{
    return m_outdated_isValid;
}

QString OAIPosition::getProtocol() const {
    return m_protocol;
}
void OAIPosition::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIPosition::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIPosition::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QDateTime OAIPosition::getServerTime() const {
    return m_server_time;
}
void OAIPosition::setServerTime(const QDateTime &server_time) {
    m_server_time = server_time;
    m_server_time_isSet = true;
}

bool OAIPosition::is_server_time_Set() const{
    return m_server_time_isSet;
}

bool OAIPosition::is_server_time_Valid() const{
    return m_server_time_isValid;
}

double OAIPosition::getSpeed() const {
    return m_speed;
}
void OAIPosition::setSpeed(const double &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIPosition::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIPosition::is_speed_Valid() const{
    return m_speed_isValid;
}

bool OAIPosition::isRValid() const {
    return m_r_valid;
}
void OAIPosition::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIPosition::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIPosition::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accuracy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outdated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
