/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotification::OAINotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotification::OAINotification() {
    this->initializeModel();
}

OAINotification::~OAINotification() {}

void OAINotification::initializeModel() {

    m_always_isSet = false;
    m_always_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_sms_isSet = false;
    m_sms_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAINotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotification::fromJsonObject(QJsonObject json) {

    m_always_isValid = ::OpenAPI::fromJsonValue(m_always, json[QString("always")]);
    m_always_isSet = !json[QString("always")].isNull() && m_always_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_sms_isValid = ::OpenAPI::fromJsonValue(m_sms, json[QString("sms")]);
    m_sms_isSet = !json[QString("sms")].isNull() && m_sms_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAINotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotification::asJsonObject() const {
    QJsonObject obj;
    if (m_always_isSet) {
        obj.insert(QString("always"), ::OpenAPI::toJsonValue(m_always));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_sms_isSet) {
        obj.insert(QString("sms"), ::OpenAPI::toJsonValue(m_sms));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_web_isSet) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

bool OAINotification::isAlways() const {
    return m_always;
}
void OAINotification::setAlways(const bool &always) {
    m_always = always;
    m_always_isSet = true;
}

bool OAINotification::is_always_Set() const{
    return m_always_isSet;
}

bool OAINotification::is_always_Valid() const{
    return m_always_isValid;
}

OAIObject OAINotification::getAttributes() const {
    return m_attributes;
}
void OAINotification::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAINotification::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAINotification::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAINotification::getCalendarId() const {
    return m_calendar_id;
}
void OAINotification::setCalendarId(const qint32 &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAINotification::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAINotification::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

qint32 OAINotification::getId() const {
    return m_id;
}
void OAINotification::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotification::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINotification::isMail() const {
    return m_mail;
}
void OAINotification::setMail(const bool &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAINotification::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAINotification::is_mail_Valid() const{
    return m_mail_isValid;
}

bool OAINotification::isSms() const {
    return m_sms;
}
void OAINotification::setSms(const bool &sms) {
    m_sms = sms;
    m_sms_isSet = true;
}

bool OAINotification::is_sms_Set() const{
    return m_sms_isSet;
}

bool OAINotification::is_sms_Valid() const{
    return m_sms_isValid;
}

QString OAINotification::getType() const {
    return m_type;
}
void OAINotification::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotification::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotification::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINotification::isWeb() const {
    return m_web;
}
void OAINotification::setWeb(const bool &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAINotification::is_web_Set() const{
    return m_web_isSet;
}

bool OAINotification::is_web_Valid() const{
    return m_web_isValid;
}

bool OAINotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
