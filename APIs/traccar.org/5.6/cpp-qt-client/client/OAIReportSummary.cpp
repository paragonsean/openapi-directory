/**
 * Traccar
 * Open Source GPS Tracking Platform
 *
 * The version of the OpenAPI document: 5.6
 * Contact: support@traccar.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportSummary::OAIReportSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportSummary::OAIReportSummary() {
    this->initializeModel();
}

OAIReportSummary::~OAIReportSummary() {}

void OAIReportSummary::initializeModel() {

    m_average_speed_isSet = false;
    m_average_speed_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_engine_hours_isSet = false;
    m_engine_hours_isValid = false;

    m_max_speed_isSet = false;
    m_max_speed_isValid = false;

    m_spent_fuel_isSet = false;
    m_spent_fuel_isValid = false;
}

void OAIReportSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportSummary::fromJsonObject(QJsonObject json) {

    m_average_speed_isValid = ::OpenAPI::fromJsonValue(m_average_speed, json[QString("averageSpeed")]);
    m_average_speed_isSet = !json[QString("averageSpeed")].isNull() && m_average_speed_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_engine_hours_isValid = ::OpenAPI::fromJsonValue(m_engine_hours, json[QString("engineHours")]);
    m_engine_hours_isSet = !json[QString("engineHours")].isNull() && m_engine_hours_isValid;

    m_max_speed_isValid = ::OpenAPI::fromJsonValue(m_max_speed, json[QString("maxSpeed")]);
    m_max_speed_isSet = !json[QString("maxSpeed")].isNull() && m_max_speed_isValid;

    m_spent_fuel_isValid = ::OpenAPI::fromJsonValue(m_spent_fuel, json[QString("spentFuel")]);
    m_spent_fuel_isSet = !json[QString("spentFuel")].isNull() && m_spent_fuel_isValid;
}

QString OAIReportSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_average_speed_isSet) {
        obj.insert(QString("averageSpeed"), ::OpenAPI::toJsonValue(m_average_speed));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_engine_hours_isSet) {
        obj.insert(QString("engineHours"), ::OpenAPI::toJsonValue(m_engine_hours));
    }
    if (m_max_speed_isSet) {
        obj.insert(QString("maxSpeed"), ::OpenAPI::toJsonValue(m_max_speed));
    }
    if (m_spent_fuel_isSet) {
        obj.insert(QString("spentFuel"), ::OpenAPI::toJsonValue(m_spent_fuel));
    }
    return obj;
}

double OAIReportSummary::getAverageSpeed() const {
    return m_average_speed;
}
void OAIReportSummary::setAverageSpeed(const double &average_speed) {
    m_average_speed = average_speed;
    m_average_speed_isSet = true;
}

bool OAIReportSummary::is_average_speed_Set() const{
    return m_average_speed_isSet;
}

bool OAIReportSummary::is_average_speed_Valid() const{
    return m_average_speed_isValid;
}

qint32 OAIReportSummary::getDeviceId() const {
    return m_device_id;
}
void OAIReportSummary::setDeviceId(const qint32 &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIReportSummary::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIReportSummary::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIReportSummary::getDeviceName() const {
    return m_device_name;
}
void OAIReportSummary::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIReportSummary::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIReportSummary::is_device_name_Valid() const{
    return m_device_name_isValid;
}

double OAIReportSummary::getDistance() const {
    return m_distance;
}
void OAIReportSummary::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIReportSummary::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIReportSummary::is_distance_Valid() const{
    return m_distance_isValid;
}

qint32 OAIReportSummary::getEngineHours() const {
    return m_engine_hours;
}
void OAIReportSummary::setEngineHours(const qint32 &engine_hours) {
    m_engine_hours = engine_hours;
    m_engine_hours_isSet = true;
}

bool OAIReportSummary::is_engine_hours_Set() const{
    return m_engine_hours_isSet;
}

bool OAIReportSummary::is_engine_hours_Valid() const{
    return m_engine_hours_isValid;
}

double OAIReportSummary::getMaxSpeed() const {
    return m_max_speed;
}
void OAIReportSummary::setMaxSpeed(const double &max_speed) {
    m_max_speed = max_speed;
    m_max_speed_isSet = true;
}

bool OAIReportSummary::is_max_speed_Set() const{
    return m_max_speed_isSet;
}

bool OAIReportSummary::is_max_speed_Valid() const{
    return m_max_speed_isValid;
}

double OAIReportSummary::getSpentFuel() const {
    return m_spent_fuel;
}
void OAIReportSummary::setSpentFuel(const double &spent_fuel) {
    m_spent_fuel = spent_fuel;
    m_spent_fuel_isSet = true;
}

bool OAIReportSummary::is_spent_fuel_Set() const{
    return m_spent_fuel_isSet;
}

bool OAIReportSummary::is_spent_fuel_Valid() const{
    return m_spent_fuel_isValid;
}

bool OAIReportSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spent_fuel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
