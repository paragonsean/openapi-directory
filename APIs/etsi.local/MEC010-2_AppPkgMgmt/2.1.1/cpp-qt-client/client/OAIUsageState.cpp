/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageState::OAIUsageState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageState::OAIUsageState() {
    this->initializeModel();
}

OAIUsageState::~OAIUsageState() {}

void OAIUsageState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUsageState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUsageState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("IN_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUsageState::IN_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_IN_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUsageState::NOT_IN_USE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUsageState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUsageState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUsageState::IN_USE:
            val = "IN_USE";
            break;
        case eOAIUsageState::NOT_IN_USE:
            val = "NOT_IN_USE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUsageState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUsageState::eOAIUsageState OAIUsageState::getValue() const {
    return m_value;
}

void OAIUsageState::setValue(const OAIUsageState::eOAIUsageState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUsageState::isSet() const {
    
    return m_value_isSet;
}

bool OAIUsageState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
