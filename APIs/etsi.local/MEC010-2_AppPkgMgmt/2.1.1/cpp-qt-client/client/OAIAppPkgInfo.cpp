/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppPkgInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppPkgInfo::OAIAppPkgInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppPkgInfo::OAIAppPkgInfo() {
    this->initializeModel();
}

OAIAppPkgInfo::~OAIAppPkgInfo() {}

void OAIAppPkgInfo::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_additional_artifacts_isSet = false;
    m_additional_artifacts_isValid = false;

    m_app_did_isSet = false;
    m_app_did_isValid = false;

    m_app_d_version_isSet = false;
    m_app_d_version_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_provider_isSet = false;
    m_app_provider_isValid = false;

    m_app_software_version_isSet = false;
    m_app_software_version_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_onboarding_state_isSet = false;
    m_onboarding_state_isValid = false;

    m_operational_state_isSet = false;
    m_operational_state_isValid = false;

    m_software_images_isSet = false;
    m_software_images_isValid = false;

    m_usage_state_isSet = false;
    m_usage_state_isValid = false;

    m_user_defined_data_isSet = false;
    m_user_defined_data_isValid = false;
}

void OAIAppPkgInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppPkgInfo::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_additional_artifacts_isValid = ::OpenAPI::fromJsonValue(m_additional_artifacts, json[QString("additionalArtifacts")]);
    m_additional_artifacts_isSet = !json[QString("additionalArtifacts")].isNull() && m_additional_artifacts_isValid;

    m_app_did_isValid = ::OpenAPI::fromJsonValue(m_app_did, json[QString("appDId")]);
    m_app_did_isSet = !json[QString("appDId")].isNull() && m_app_did_isValid;

    m_app_d_version_isValid = ::OpenAPI::fromJsonValue(m_app_d_version, json[QString("appDVersion")]);
    m_app_d_version_isSet = !json[QString("appDVersion")].isNull() && m_app_d_version_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_app_provider_isValid = ::OpenAPI::fromJsonValue(m_app_provider, json[QString("appProvider")]);
    m_app_provider_isSet = !json[QString("appProvider")].isNull() && m_app_provider_isValid;

    m_app_software_version_isValid = ::OpenAPI::fromJsonValue(m_app_software_version, json[QString("appSoftwareVersion")]);
    m_app_software_version_isSet = !json[QString("appSoftwareVersion")].isNull() && m_app_software_version_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_onboarding_state_isValid = ::OpenAPI::fromJsonValue(m_onboarding_state, json[QString("onboardingState")]);
    m_onboarding_state_isSet = !json[QString("onboardingState")].isNull() && m_onboarding_state_isValid;

    m_operational_state_isValid = ::OpenAPI::fromJsonValue(m_operational_state, json[QString("operationalState")]);
    m_operational_state_isSet = !json[QString("operationalState")].isNull() && m_operational_state_isValid;

    m_software_images_isValid = ::OpenAPI::fromJsonValue(m_software_images, json[QString("softwareImages")]);
    m_software_images_isSet = !json[QString("softwareImages")].isNull() && m_software_images_isValid;

    m_usage_state_isValid = ::OpenAPI::fromJsonValue(m_usage_state, json[QString("usageState")]);
    m_usage_state_isSet = !json[QString("usageState")].isNull() && m_usage_state_isValid;

    m_user_defined_data_isValid = ::OpenAPI::fromJsonValue(m_user_defined_data, json[QString("userDefinedData")]);
    m_user_defined_data_isSet = !json[QString("userDefinedData")].isNull() && m_user_defined_data_isValid;
}

QString OAIAppPkgInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppPkgInfo::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_additional_artifacts_isSet) {
        obj.insert(QString("additionalArtifacts"), ::OpenAPI::toJsonValue(m_additional_artifacts));
    }
    if (m_app_did_isSet) {
        obj.insert(QString("appDId"), ::OpenAPI::toJsonValue(m_app_did));
    }
    if (m_app_d_version_isSet) {
        obj.insert(QString("appDVersion"), ::OpenAPI::toJsonValue(m_app_d_version));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_provider_isSet) {
        obj.insert(QString("appProvider"), ::OpenAPI::toJsonValue(m_app_provider));
    }
    if (m_app_software_version_isSet) {
        obj.insert(QString("appSoftwareVersion"), ::OpenAPI::toJsonValue(m_app_software_version));
    }
    if (m_checksum.isSet()) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_onboarding_state.isSet()) {
        obj.insert(QString("onboardingState"), ::OpenAPI::toJsonValue(m_onboarding_state));
    }
    if (m_operational_state.isSet()) {
        obj.insert(QString("operationalState"), ::OpenAPI::toJsonValue(m_operational_state));
    }
    if (m_software_images_isSet) {
        obj.insert(QString("softwareImages"), ::OpenAPI::toJsonValue(m_software_images));
    }
    if (m_usage_state.isSet()) {
        obj.insert(QString("usageState"), ::OpenAPI::toJsonValue(m_usage_state));
    }
    if (m_user_defined_data.size() > 0) {
        obj.insert(QString("userDefinedData"), ::OpenAPI::toJsonValue(m_user_defined_data));
    }
    return obj;
}

OAIAppPkgInfo_links OAIAppPkgInfo::getLinks() const {
    return m__links;
}
void OAIAppPkgInfo::setLinks(const OAIAppPkgInfo_links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAppPkgInfo::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAppPkgInfo::is__links_Valid() const{
    return m__links_isValid;
}

QJsonValue OAIAppPkgInfo::getAdditionalArtifacts() const {
    return m_additional_artifacts;
}
void OAIAppPkgInfo::setAdditionalArtifacts(const QJsonValue &additional_artifacts) {
    m_additional_artifacts = additional_artifacts;
    m_additional_artifacts_isSet = true;
}

bool OAIAppPkgInfo::is_additional_artifacts_Set() const{
    return m_additional_artifacts_isSet;
}

bool OAIAppPkgInfo::is_additional_artifacts_Valid() const{
    return m_additional_artifacts_isValid;
}

QString OAIAppPkgInfo::getAppDid() const {
    return m_app_did;
}
void OAIAppPkgInfo::setAppDid(const QString &app_did) {
    m_app_did = app_did;
    m_app_did_isSet = true;
}

bool OAIAppPkgInfo::is_app_did_Set() const{
    return m_app_did_isSet;
}

bool OAIAppPkgInfo::is_app_did_Valid() const{
    return m_app_did_isValid;
}

QString OAIAppPkgInfo::getAppDVersion() const {
    return m_app_d_version;
}
void OAIAppPkgInfo::setAppDVersion(const QString &app_d_version) {
    m_app_d_version = app_d_version;
    m_app_d_version_isSet = true;
}

bool OAIAppPkgInfo::is_app_d_version_Set() const{
    return m_app_d_version_isSet;
}

bool OAIAppPkgInfo::is_app_d_version_Valid() const{
    return m_app_d_version_isValid;
}

QString OAIAppPkgInfo::getAppName() const {
    return m_app_name;
}
void OAIAppPkgInfo::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIAppPkgInfo::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIAppPkgInfo::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIAppPkgInfo::getAppProvider() const {
    return m_app_provider;
}
void OAIAppPkgInfo::setAppProvider(const QString &app_provider) {
    m_app_provider = app_provider;
    m_app_provider_isSet = true;
}

bool OAIAppPkgInfo::is_app_provider_Set() const{
    return m_app_provider_isSet;
}

bool OAIAppPkgInfo::is_app_provider_Valid() const{
    return m_app_provider_isValid;
}

QString OAIAppPkgInfo::getAppSoftwareVersion() const {
    return m_app_software_version;
}
void OAIAppPkgInfo::setAppSoftwareVersion(const QString &app_software_version) {
    m_app_software_version = app_software_version;
    m_app_software_version_isSet = true;
}

bool OAIAppPkgInfo::is_app_software_version_Set() const{
    return m_app_software_version_isSet;
}

bool OAIAppPkgInfo::is_app_software_version_Valid() const{
    return m_app_software_version_isValid;
}

OAIChecksum OAIAppPkgInfo::getChecksum() const {
    return m_checksum;
}
void OAIAppPkgInfo::setChecksum(const OAIChecksum &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIAppPkgInfo::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIAppPkgInfo::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAIAppPkgInfo::getId() const {
    return m_id;
}
void OAIAppPkgInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppPkgInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppPkgInfo::is_id_Valid() const{
    return m_id_isValid;
}

OAIOnboardingState OAIAppPkgInfo::getOnboardingState() const {
    return m_onboarding_state;
}
void OAIAppPkgInfo::setOnboardingState(const OAIOnboardingState &onboarding_state) {
    m_onboarding_state = onboarding_state;
    m_onboarding_state_isSet = true;
}

bool OAIAppPkgInfo::is_onboarding_state_Set() const{
    return m_onboarding_state_isSet;
}

bool OAIAppPkgInfo::is_onboarding_state_Valid() const{
    return m_onboarding_state_isValid;
}

OAIAppPkg_OperationalState OAIAppPkgInfo::getOperationalState() const {
    return m_operational_state;
}
void OAIAppPkgInfo::setOperationalState(const OAIAppPkg_OperationalState &operational_state) {
    m_operational_state = operational_state;
    m_operational_state_isSet = true;
}

bool OAIAppPkgInfo::is_operational_state_Set() const{
    return m_operational_state_isSet;
}

bool OAIAppPkgInfo::is_operational_state_Valid() const{
    return m_operational_state_isValid;
}

QJsonValue OAIAppPkgInfo::getSoftwareImages() const {
    return m_software_images;
}
void OAIAppPkgInfo::setSoftwareImages(const QJsonValue &software_images) {
    m_software_images = software_images;
    m_software_images_isSet = true;
}

bool OAIAppPkgInfo::is_software_images_Set() const{
    return m_software_images_isSet;
}

bool OAIAppPkgInfo::is_software_images_Valid() const{
    return m_software_images_isValid;
}

OAIUsageState OAIAppPkgInfo::getUsageState() const {
    return m_usage_state;
}
void OAIAppPkgInfo::setUsageState(const OAIUsageState &usage_state) {
    m_usage_state = usage_state;
    m_usage_state_isSet = true;
}

bool OAIAppPkgInfo::is_usage_state_Set() const{
    return m_usage_state_isSet;
}

bool OAIAppPkgInfo::is_usage_state_Valid() const{
    return m_usage_state_isValid;
}

QMap<QString, QJsonValue> OAIAppPkgInfo::getUserDefinedData() const {
    return m_user_defined_data;
}
void OAIAppPkgInfo::setUserDefinedData(const QMap<QString, QJsonValue> &user_defined_data) {
    m_user_defined_data = user_defined_data;
    m_user_defined_data_isSet = true;
}

bool OAIAppPkgInfo::is_user_defined_data_Set() const{
    return m_user_defined_data_isSet;
}

bool OAIAppPkgInfo::is_user_defined_data_Valid() const{
    return m_user_defined_data_isValid;
}

bool OAIAppPkgInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_artifacts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_did_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_d_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppPkgInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_app_did_isValid && m_app_d_version_isValid && m_app_name_isValid && m_app_software_version_isValid && m_checksum_isValid && m_id_isValid && m_onboarding_state_isValid && m_operational_state_isValid && m_software_images_isValid && m_usage_state_isValid && true;
}

} // namespace OpenAPI
