/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrafficRuleDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrafficRuleDescriptor::OAITrafficRuleDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrafficRuleDescriptor::OAITrafficRuleDescriptor() {
    this->initializeModel();
}

OAITrafficRuleDescriptor::~OAITrafficRuleDescriptor() {}

void OAITrafficRuleDescriptor::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_dst_interface_isSet = false;
    m_dst_interface_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_traffic_filter_isSet = false;
    m_traffic_filter_isValid = false;

    m_traffic_rule_id_isSet = false;
    m_traffic_rule_id_isValid = false;
}

void OAITrafficRuleDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrafficRuleDescriptor::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_dst_interface_isValid = ::OpenAPI::fromJsonValue(m_dst_interface, json[QString("dstInterface")]);
    m_dst_interface_isSet = !json[QString("dstInterface")].isNull() && m_dst_interface_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filterType")]);
    m_filter_type_isSet = !json[QString("filterType")].isNull() && m_filter_type_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_traffic_filter_isValid = ::OpenAPI::fromJsonValue(m_traffic_filter, json[QString("trafficFilter")]);
    m_traffic_filter_isSet = !json[QString("trafficFilter")].isNull() && m_traffic_filter_isValid;

    m_traffic_rule_id_isValid = ::OpenAPI::fromJsonValue(m_traffic_rule_id, json[QString("trafficRuleId")]);
    m_traffic_rule_id_isSet = !json[QString("trafficRuleId")].isNull() && m_traffic_rule_id_isValid;
}

QString OAITrafficRuleDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrafficRuleDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_dst_interface.size() > 0) {
        obj.insert(QString("dstInterface"), ::OpenAPI::toJsonValue(m_dst_interface));
    }
    if (m_filter_type.isSet()) {
        obj.insert(QString("filterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_traffic_filter.size() > 0) {
        obj.insert(QString("trafficFilter"), ::OpenAPI::toJsonValue(m_traffic_filter));
    }
    if (m_traffic_rule_id_isSet) {
        obj.insert(QString("trafficRuleId"), ::OpenAPI::toJsonValue(m_traffic_rule_id));
    }
    return obj;
}

OAIAction OAITrafficRuleDescriptor::getAction() const {
    return m_action;
}
void OAITrafficRuleDescriptor::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITrafficRuleDescriptor::is_action_Set() const{
    return m_action_isSet;
}

bool OAITrafficRuleDescriptor::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIInterfaceDescriptor> OAITrafficRuleDescriptor::getDstInterface() const {
    return m_dst_interface;
}
void OAITrafficRuleDescriptor::setDstInterface(const QList<OAIInterfaceDescriptor> &dst_interface) {
    m_dst_interface = dst_interface;
    m_dst_interface_isSet = true;
}

bool OAITrafficRuleDescriptor::is_dst_interface_Set() const{
    return m_dst_interface_isSet;
}

bool OAITrafficRuleDescriptor::is_dst_interface_Valid() const{
    return m_dst_interface_isValid;
}

OAIFilterType OAITrafficRuleDescriptor::getFilterType() const {
    return m_filter_type;
}
void OAITrafficRuleDescriptor::setFilterType(const OAIFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAITrafficRuleDescriptor::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAITrafficRuleDescriptor::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

qint32 OAITrafficRuleDescriptor::getPriority() const {
    return m_priority;
}
void OAITrafficRuleDescriptor::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITrafficRuleDescriptor::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITrafficRuleDescriptor::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAITrafficFilter> OAITrafficRuleDescriptor::getTrafficFilter() const {
    return m_traffic_filter;
}
void OAITrafficRuleDescriptor::setTrafficFilter(const QList<OAITrafficFilter> &traffic_filter) {
    m_traffic_filter = traffic_filter;
    m_traffic_filter_isSet = true;
}

bool OAITrafficRuleDescriptor::is_traffic_filter_Set() const{
    return m_traffic_filter_isSet;
}

bool OAITrafficRuleDescriptor::is_traffic_filter_Valid() const{
    return m_traffic_filter_isValid;
}

QString OAITrafficRuleDescriptor::getTrafficRuleId() const {
    return m_traffic_rule_id;
}
void OAITrafficRuleDescriptor::setTrafficRuleId(const QString &traffic_rule_id) {
    m_traffic_rule_id = traffic_rule_id;
    m_traffic_rule_id_isSet = true;
}

bool OAITrafficRuleDescriptor::is_traffic_rule_id_Set() const{
    return m_traffic_rule_id_isSet;
}

bool OAITrafficRuleDescriptor::is_traffic_rule_id_Valid() const{
    return m_traffic_rule_id_isValid;
}

bool OAITrafficRuleDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_interface.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrafficRuleDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_filter_type_isValid && m_priority_isValid && m_traffic_filter_isValid && m_traffic_rule_id_isValid && true;
}

} // namespace OpenAPI
