/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppD.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppD::OAIAppD(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppD::OAIAppD() {
    this->initializeModel();
}

OAIAppD::~OAIAppD() {}

void OAIAppD::initializeModel() {

    m_app_did_isSet = false;
    m_app_did_isValid = false;

    m_app_dns_rule_isSet = false;
    m_app_dns_rule_isValid = false;

    m_app_d_version_isSet = false;
    m_app_d_version_isValid = false;

    m_app_description_isSet = false;
    m_app_description_isValid = false;

    m_app_ext_cpd_isSet = false;
    m_app_ext_cpd_isValid = false;

    m_app_feature_optional_isSet = false;
    m_app_feature_optional_isValid = false;

    m_app_feature_required_isSet = false;
    m_app_feature_required_isValid = false;

    m_app_info_name_isSet = false;
    m_app_info_name_isValid = false;

    m_app_latency_isSet = false;
    m_app_latency_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_provider_isSet = false;
    m_app_provider_isValid = false;

    m_app_service_optional_isSet = false;
    m_app_service_optional_isValid = false;

    m_app_service_produced_isSet = false;
    m_app_service_produced_isValid = false;

    m_app_service_required_isSet = false;
    m_app_service_required_isValid = false;

    m_app_soft_version_isSet = false;
    m_app_soft_version_isValid = false;

    m_app_traffic_rule_isSet = false;
    m_app_traffic_rule_isValid = false;

    m_change_app_instance_state_op_config_isSet = false;
    m_change_app_instance_state_op_config_isValid = false;

    m_mec_version_isSet = false;
    m_mec_version_isValid = false;

    m_sw_image_descriptor_isSet = false;
    m_sw_image_descriptor_isValid = false;

    m_terminate_app_instance_op_config_isSet = false;
    m_terminate_app_instance_op_config_isValid = false;

    m_transport_dependencies_isSet = false;
    m_transport_dependencies_isValid = false;

    m_virtual_compute_descriptor_isSet = false;
    m_virtual_compute_descriptor_isValid = false;

    m_virtual_storage_descriptor_isSet = false;
    m_virtual_storage_descriptor_isValid = false;
}

void OAIAppD::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppD::fromJsonObject(QJsonObject json) {

    m_app_did_isValid = ::OpenAPI::fromJsonValue(m_app_did, json[QString("appDId")]);
    m_app_did_isSet = !json[QString("appDId")].isNull() && m_app_did_isValid;

    m_app_dns_rule_isValid = ::OpenAPI::fromJsonValue(m_app_dns_rule, json[QString("appDNSRule")]);
    m_app_dns_rule_isSet = !json[QString("appDNSRule")].isNull() && m_app_dns_rule_isValid;

    m_app_d_version_isValid = ::OpenAPI::fromJsonValue(m_app_d_version, json[QString("appDVersion")]);
    m_app_d_version_isSet = !json[QString("appDVersion")].isNull() && m_app_d_version_isValid;

    m_app_description_isValid = ::OpenAPI::fromJsonValue(m_app_description, json[QString("appDescription")]);
    m_app_description_isSet = !json[QString("appDescription")].isNull() && m_app_description_isValid;

    m_app_ext_cpd_isValid = ::OpenAPI::fromJsonValue(m_app_ext_cpd, json[QString("appExtCpd")]);
    m_app_ext_cpd_isSet = !json[QString("appExtCpd")].isNull() && m_app_ext_cpd_isValid;

    m_app_feature_optional_isValid = ::OpenAPI::fromJsonValue(m_app_feature_optional, json[QString("appFeatureOptional")]);
    m_app_feature_optional_isSet = !json[QString("appFeatureOptional")].isNull() && m_app_feature_optional_isValid;

    m_app_feature_required_isValid = ::OpenAPI::fromJsonValue(m_app_feature_required, json[QString("appFeatureRequired")]);
    m_app_feature_required_isSet = !json[QString("appFeatureRequired")].isNull() && m_app_feature_required_isValid;

    m_app_info_name_isValid = ::OpenAPI::fromJsonValue(m_app_info_name, json[QString("appInfoName")]);
    m_app_info_name_isSet = !json[QString("appInfoName")].isNull() && m_app_info_name_isValid;

    m_app_latency_isValid = ::OpenAPI::fromJsonValue(m_app_latency, json[QString("appLatency")]);
    m_app_latency_isSet = !json[QString("appLatency")].isNull() && m_app_latency_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_app_provider_isValid = ::OpenAPI::fromJsonValue(m_app_provider, json[QString("appProvider")]);
    m_app_provider_isSet = !json[QString("appProvider")].isNull() && m_app_provider_isValid;

    m_app_service_optional_isValid = ::OpenAPI::fromJsonValue(m_app_service_optional, json[QString("appServiceOptional")]);
    m_app_service_optional_isSet = !json[QString("appServiceOptional")].isNull() && m_app_service_optional_isValid;

    m_app_service_produced_isValid = ::OpenAPI::fromJsonValue(m_app_service_produced, json[QString("appServiceProduced")]);
    m_app_service_produced_isSet = !json[QString("appServiceProduced")].isNull() && m_app_service_produced_isValid;

    m_app_service_required_isValid = ::OpenAPI::fromJsonValue(m_app_service_required, json[QString("appServiceRequired")]);
    m_app_service_required_isSet = !json[QString("appServiceRequired")].isNull() && m_app_service_required_isValid;

    m_app_soft_version_isValid = ::OpenAPI::fromJsonValue(m_app_soft_version, json[QString("appSoftVersion")]);
    m_app_soft_version_isSet = !json[QString("appSoftVersion")].isNull() && m_app_soft_version_isValid;

    m_app_traffic_rule_isValid = ::OpenAPI::fromJsonValue(m_app_traffic_rule, json[QString("appTrafficRule")]);
    m_app_traffic_rule_isSet = !json[QString("appTrafficRule")].isNull() && m_app_traffic_rule_isValid;

    m_change_app_instance_state_op_config_isValid = ::OpenAPI::fromJsonValue(m_change_app_instance_state_op_config, json[QString("changeAppInstanceStateOpConfig")]);
    m_change_app_instance_state_op_config_isSet = !json[QString("changeAppInstanceStateOpConfig")].isNull() && m_change_app_instance_state_op_config_isValid;

    m_mec_version_isValid = ::OpenAPI::fromJsonValue(m_mec_version, json[QString("mecVersion")]);
    m_mec_version_isSet = !json[QString("mecVersion")].isNull() && m_mec_version_isValid;

    m_sw_image_descriptor_isValid = ::OpenAPI::fromJsonValue(m_sw_image_descriptor, json[QString("swImageDescriptor")]);
    m_sw_image_descriptor_isSet = !json[QString("swImageDescriptor")].isNull() && m_sw_image_descriptor_isValid;

    m_terminate_app_instance_op_config_isValid = ::OpenAPI::fromJsonValue(m_terminate_app_instance_op_config, json[QString("terminateAppInstanceOpConfig")]);
    m_terminate_app_instance_op_config_isSet = !json[QString("terminateAppInstanceOpConfig")].isNull() && m_terminate_app_instance_op_config_isValid;

    m_transport_dependencies_isValid = ::OpenAPI::fromJsonValue(m_transport_dependencies, json[QString("transportDependencies")]);
    m_transport_dependencies_isSet = !json[QString("transportDependencies")].isNull() && m_transport_dependencies_isValid;

    m_virtual_compute_descriptor_isValid = ::OpenAPI::fromJsonValue(m_virtual_compute_descriptor, json[QString("virtualComputeDescriptor")]);
    m_virtual_compute_descriptor_isSet = !json[QString("virtualComputeDescriptor")].isNull() && m_virtual_compute_descriptor_isValid;

    m_virtual_storage_descriptor_isValid = ::OpenAPI::fromJsonValue(m_virtual_storage_descriptor, json[QString("virtualStorageDescriptor")]);
    m_virtual_storage_descriptor_isSet = !json[QString("virtualStorageDescriptor")].isNull() && m_virtual_storage_descriptor_isValid;
}

QString OAIAppD::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppD::asJsonObject() const {
    QJsonObject obj;
    if (m_app_did_isSet) {
        obj.insert(QString("appDId"), ::OpenAPI::toJsonValue(m_app_did));
    }
    if (m_app_dns_rule.size() > 0) {
        obj.insert(QString("appDNSRule"), ::OpenAPI::toJsonValue(m_app_dns_rule));
    }
    if (m_app_d_version_isSet) {
        obj.insert(QString("appDVersion"), ::OpenAPI::toJsonValue(m_app_d_version));
    }
    if (m_app_description_isSet) {
        obj.insert(QString("appDescription"), ::OpenAPI::toJsonValue(m_app_description));
    }
    if (m_app_ext_cpd.size() > 0) {
        obj.insert(QString("appExtCpd"), ::OpenAPI::toJsonValue(m_app_ext_cpd));
    }
    if (m_app_feature_optional.size() > 0) {
        obj.insert(QString("appFeatureOptional"), ::OpenAPI::toJsonValue(m_app_feature_optional));
    }
    if (m_app_feature_required.size() > 0) {
        obj.insert(QString("appFeatureRequired"), ::OpenAPI::toJsonValue(m_app_feature_required));
    }
    if (m_app_info_name_isSet) {
        obj.insert(QString("appInfoName"), ::OpenAPI::toJsonValue(m_app_info_name));
    }
    if (m_app_latency.isSet()) {
        obj.insert(QString("appLatency"), ::OpenAPI::toJsonValue(m_app_latency));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_provider_isSet) {
        obj.insert(QString("appProvider"), ::OpenAPI::toJsonValue(m_app_provider));
    }
    if (m_app_service_optional.size() > 0) {
        obj.insert(QString("appServiceOptional"), ::OpenAPI::toJsonValue(m_app_service_optional));
    }
    if (m_app_service_produced.size() > 0) {
        obj.insert(QString("appServiceProduced"), ::OpenAPI::toJsonValue(m_app_service_produced));
    }
    if (m_app_service_required.size() > 0) {
        obj.insert(QString("appServiceRequired"), ::OpenAPI::toJsonValue(m_app_service_required));
    }
    if (m_app_soft_version_isSet) {
        obj.insert(QString("appSoftVersion"), ::OpenAPI::toJsonValue(m_app_soft_version));
    }
    if (m_app_traffic_rule.size() > 0) {
        obj.insert(QString("appTrafficRule"), ::OpenAPI::toJsonValue(m_app_traffic_rule));
    }
    if (m_change_app_instance_state_op_config_isSet) {
        obj.insert(QString("changeAppInstanceStateOpConfig"), ::OpenAPI::toJsonValue(m_change_app_instance_state_op_config));
    }
    if (m_mec_version.size() > 0) {
        obj.insert(QString("mecVersion"), ::OpenAPI::toJsonValue(m_mec_version));
    }
    if (m_sw_image_descriptor_isSet) {
        obj.insert(QString("swImageDescriptor"), ::OpenAPI::toJsonValue(m_sw_image_descriptor));
    }
    if (m_terminate_app_instance_op_config_isSet) {
        obj.insert(QString("terminateAppInstanceOpConfig"), ::OpenAPI::toJsonValue(m_terminate_app_instance_op_config));
    }
    if (m_transport_dependencies.size() > 0) {
        obj.insert(QString("transportDependencies"), ::OpenAPI::toJsonValue(m_transport_dependencies));
    }
    if (m_virtual_compute_descriptor_isSet) {
        obj.insert(QString("virtualComputeDescriptor"), ::OpenAPI::toJsonValue(m_virtual_compute_descriptor));
    }
    if (m_virtual_storage_descriptor.size() > 0) {
        obj.insert(QString("virtualStorageDescriptor"), ::OpenAPI::toJsonValue(m_virtual_storage_descriptor));
    }
    return obj;
}

QString OAIAppD::getAppDid() const {
    return m_app_did;
}
void OAIAppD::setAppDid(const QString &app_did) {
    m_app_did = app_did;
    m_app_did_isSet = true;
}

bool OAIAppD::is_app_did_Set() const{
    return m_app_did_isSet;
}

bool OAIAppD::is_app_did_Valid() const{
    return m_app_did_isValid;
}

QList<OAIDNSRuleDescriptor> OAIAppD::getAppDnsRule() const {
    return m_app_dns_rule;
}
void OAIAppD::setAppDnsRule(const QList<OAIDNSRuleDescriptor> &app_dns_rule) {
    m_app_dns_rule = app_dns_rule;
    m_app_dns_rule_isSet = true;
}

bool OAIAppD::is_app_dns_rule_Set() const{
    return m_app_dns_rule_isSet;
}

bool OAIAppD::is_app_dns_rule_Valid() const{
    return m_app_dns_rule_isValid;
}

QString OAIAppD::getAppDVersion() const {
    return m_app_d_version;
}
void OAIAppD::setAppDVersion(const QString &app_d_version) {
    m_app_d_version = app_d_version;
    m_app_d_version_isSet = true;
}

bool OAIAppD::is_app_d_version_Set() const{
    return m_app_d_version_isSet;
}

bool OAIAppD::is_app_d_version_Valid() const{
    return m_app_d_version_isValid;
}

QString OAIAppD::getAppDescription() const {
    return m_app_description;
}
void OAIAppD::setAppDescription(const QString &app_description) {
    m_app_description = app_description;
    m_app_description_isSet = true;
}

bool OAIAppD::is_app_description_Set() const{
    return m_app_description_isSet;
}

bool OAIAppD::is_app_description_Valid() const{
    return m_app_description_isValid;
}

QList<OAIAppExternalCpd> OAIAppD::getAppExtCpd() const {
    return m_app_ext_cpd;
}
void OAIAppD::setAppExtCpd(const QList<OAIAppExternalCpd> &app_ext_cpd) {
    m_app_ext_cpd = app_ext_cpd;
    m_app_ext_cpd_isSet = true;
}

bool OAIAppD::is_app_ext_cpd_Set() const{
    return m_app_ext_cpd_isSet;
}

bool OAIAppD::is_app_ext_cpd_Valid() const{
    return m_app_ext_cpd_isValid;
}

QList<OAIFeatureDependency> OAIAppD::getAppFeatureOptional() const {
    return m_app_feature_optional;
}
void OAIAppD::setAppFeatureOptional(const QList<OAIFeatureDependency> &app_feature_optional) {
    m_app_feature_optional = app_feature_optional;
    m_app_feature_optional_isSet = true;
}

bool OAIAppD::is_app_feature_optional_Set() const{
    return m_app_feature_optional_isSet;
}

bool OAIAppD::is_app_feature_optional_Valid() const{
    return m_app_feature_optional_isValid;
}

QList<OAIFeatureDependency> OAIAppD::getAppFeatureRequired() const {
    return m_app_feature_required;
}
void OAIAppD::setAppFeatureRequired(const QList<OAIFeatureDependency> &app_feature_required) {
    m_app_feature_required = app_feature_required;
    m_app_feature_required_isSet = true;
}

bool OAIAppD::is_app_feature_required_Set() const{
    return m_app_feature_required_isSet;
}

bool OAIAppD::is_app_feature_required_Valid() const{
    return m_app_feature_required_isValid;
}

QString OAIAppD::getAppInfoName() const {
    return m_app_info_name;
}
void OAIAppD::setAppInfoName(const QString &app_info_name) {
    m_app_info_name = app_info_name;
    m_app_info_name_isSet = true;
}

bool OAIAppD::is_app_info_name_Set() const{
    return m_app_info_name_isSet;
}

bool OAIAppD::is_app_info_name_Valid() const{
    return m_app_info_name_isValid;
}

OAILatencyDescriptor OAIAppD::getAppLatency() const {
    return m_app_latency;
}
void OAIAppD::setAppLatency(const OAILatencyDescriptor &app_latency) {
    m_app_latency = app_latency;
    m_app_latency_isSet = true;
}

bool OAIAppD::is_app_latency_Set() const{
    return m_app_latency_isSet;
}

bool OAIAppD::is_app_latency_Valid() const{
    return m_app_latency_isValid;
}

QString OAIAppD::getAppName() const {
    return m_app_name;
}
void OAIAppD::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIAppD::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIAppD::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIAppD::getAppProvider() const {
    return m_app_provider;
}
void OAIAppD::setAppProvider(const QString &app_provider) {
    m_app_provider = app_provider;
    m_app_provider_isSet = true;
}

bool OAIAppD::is_app_provider_Set() const{
    return m_app_provider_isSet;
}

bool OAIAppD::is_app_provider_Valid() const{
    return m_app_provider_isValid;
}

QList<OAIServiceDependency> OAIAppD::getAppServiceOptional() const {
    return m_app_service_optional;
}
void OAIAppD::setAppServiceOptional(const QList<OAIServiceDependency> &app_service_optional) {
    m_app_service_optional = app_service_optional;
    m_app_service_optional_isSet = true;
}

bool OAIAppD::is_app_service_optional_Set() const{
    return m_app_service_optional_isSet;
}

bool OAIAppD::is_app_service_optional_Valid() const{
    return m_app_service_optional_isValid;
}

QList<OAIServiceDescriptor> OAIAppD::getAppServiceProduced() const {
    return m_app_service_produced;
}
void OAIAppD::setAppServiceProduced(const QList<OAIServiceDescriptor> &app_service_produced) {
    m_app_service_produced = app_service_produced;
    m_app_service_produced_isSet = true;
}

bool OAIAppD::is_app_service_produced_Set() const{
    return m_app_service_produced_isSet;
}

bool OAIAppD::is_app_service_produced_Valid() const{
    return m_app_service_produced_isValid;
}

QList<OAIServiceDependency> OAIAppD::getAppServiceRequired() const {
    return m_app_service_required;
}
void OAIAppD::setAppServiceRequired(const QList<OAIServiceDependency> &app_service_required) {
    m_app_service_required = app_service_required;
    m_app_service_required_isSet = true;
}

bool OAIAppD::is_app_service_required_Set() const{
    return m_app_service_required_isSet;
}

bool OAIAppD::is_app_service_required_Valid() const{
    return m_app_service_required_isValid;
}

QString OAIAppD::getAppSoftVersion() const {
    return m_app_soft_version;
}
void OAIAppD::setAppSoftVersion(const QString &app_soft_version) {
    m_app_soft_version = app_soft_version;
    m_app_soft_version_isSet = true;
}

bool OAIAppD::is_app_soft_version_Set() const{
    return m_app_soft_version_isSet;
}

bool OAIAppD::is_app_soft_version_Valid() const{
    return m_app_soft_version_isValid;
}

QList<OAITrafficRuleDescriptor> OAIAppD::getAppTrafficRule() const {
    return m_app_traffic_rule;
}
void OAIAppD::setAppTrafficRule(const QList<OAITrafficRuleDescriptor> &app_traffic_rule) {
    m_app_traffic_rule = app_traffic_rule;
    m_app_traffic_rule_isSet = true;
}

bool OAIAppD::is_app_traffic_rule_Set() const{
    return m_app_traffic_rule_isSet;
}

bool OAIAppD::is_app_traffic_rule_Valid() const{
    return m_app_traffic_rule_isValid;
}

QString OAIAppD::getChangeAppInstanceStateOpConfig() const {
    return m_change_app_instance_state_op_config;
}
void OAIAppD::setChangeAppInstanceStateOpConfig(const QString &change_app_instance_state_op_config) {
    m_change_app_instance_state_op_config = change_app_instance_state_op_config;
    m_change_app_instance_state_op_config_isSet = true;
}

bool OAIAppD::is_change_app_instance_state_op_config_Set() const{
    return m_change_app_instance_state_op_config_isSet;
}

bool OAIAppD::is_change_app_instance_state_op_config_Valid() const{
    return m_change_app_instance_state_op_config_isValid;
}

QList<QString> OAIAppD::getMecVersion() const {
    return m_mec_version;
}
void OAIAppD::setMecVersion(const QList<QString> &mec_version) {
    m_mec_version = mec_version;
    m_mec_version_isSet = true;
}

bool OAIAppD::is_mec_version_Set() const{
    return m_mec_version_isSet;
}

bool OAIAppD::is_mec_version_Valid() const{
    return m_mec_version_isValid;
}

QString OAIAppD::getSwImageDescriptor() const {
    return m_sw_image_descriptor;
}
void OAIAppD::setSwImageDescriptor(const QString &sw_image_descriptor) {
    m_sw_image_descriptor = sw_image_descriptor;
    m_sw_image_descriptor_isSet = true;
}

bool OAIAppD::is_sw_image_descriptor_Set() const{
    return m_sw_image_descriptor_isSet;
}

bool OAIAppD::is_sw_image_descriptor_Valid() const{
    return m_sw_image_descriptor_isValid;
}

QString OAIAppD::getTerminateAppInstanceOpConfig() const {
    return m_terminate_app_instance_op_config;
}
void OAIAppD::setTerminateAppInstanceOpConfig(const QString &terminate_app_instance_op_config) {
    m_terminate_app_instance_op_config = terminate_app_instance_op_config;
    m_terminate_app_instance_op_config_isSet = true;
}

bool OAIAppD::is_terminate_app_instance_op_config_Set() const{
    return m_terminate_app_instance_op_config_isSet;
}

bool OAIAppD::is_terminate_app_instance_op_config_Valid() const{
    return m_terminate_app_instance_op_config_isValid;
}

QList<OAITransportDependency> OAIAppD::getTransportDependencies() const {
    return m_transport_dependencies;
}
void OAIAppD::setTransportDependencies(const QList<OAITransportDependency> &transport_dependencies) {
    m_transport_dependencies = transport_dependencies;
    m_transport_dependencies_isSet = true;
}

bool OAIAppD::is_transport_dependencies_Set() const{
    return m_transport_dependencies_isSet;
}

bool OAIAppD::is_transport_dependencies_Valid() const{
    return m_transport_dependencies_isValid;
}

QString OAIAppD::getVirtualComputeDescriptor() const {
    return m_virtual_compute_descriptor;
}
void OAIAppD::setVirtualComputeDescriptor(const QString &virtual_compute_descriptor) {
    m_virtual_compute_descriptor = virtual_compute_descriptor;
    m_virtual_compute_descriptor_isSet = true;
}

bool OAIAppD::is_virtual_compute_descriptor_Set() const{
    return m_virtual_compute_descriptor_isSet;
}

bool OAIAppD::is_virtual_compute_descriptor_Valid() const{
    return m_virtual_compute_descriptor_isValid;
}

QList<QString> OAIAppD::getVirtualStorageDescriptor() const {
    return m_virtual_storage_descriptor;
}
void OAIAppD::setVirtualStorageDescriptor(const QList<QString> &virtual_storage_descriptor) {
    m_virtual_storage_descriptor = virtual_storage_descriptor;
    m_virtual_storage_descriptor_isSet = true;
}

bool OAIAppD::is_virtual_storage_descriptor_Set() const{
    return m_virtual_storage_descriptor_isSet;
}

bool OAIAppD::is_virtual_storage_descriptor_Valid() const{
    return m_virtual_storage_descriptor_isValid;
}

bool OAIAppD::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_did_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_dns_rule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_d_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_ext_cpd.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_feature_optional.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_feature_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_info_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_latency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_service_optional.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_service_produced.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_service_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_soft_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_traffic_rule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_app_instance_state_op_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mec_version.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sw_image_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminate_app_instance_op_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_compute_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_storage_descriptor.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppD::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_did_isValid && m_app_d_version_isValid && m_app_description_isValid && m_app_name_isValid && m_app_provider_isValid && m_app_soft_version_isValid && m_mec_version_isValid && m_sw_image_descriptor_isValid && m_virtual_compute_descriptor_isValid && true;
}

} // namespace OpenAPI
