/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILatencyDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILatencyDescriptor::OAILatencyDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILatencyDescriptor::OAILatencyDescriptor() {
    this->initializeModel();
}

OAILatencyDescriptor::~OAILatencyDescriptor() {}

void OAILatencyDescriptor::initializeModel() {

    m_max_latency_isSet = false;
    m_max_latency_isValid = false;
}

void OAILatencyDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILatencyDescriptor::fromJsonObject(QJsonObject json) {

    m_max_latency_isValid = ::OpenAPI::fromJsonValue(m_max_latency, json[QString("maxLatency")]);
    m_max_latency_isSet = !json[QString("maxLatency")].isNull() && m_max_latency_isValid;
}

QString OAILatencyDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILatencyDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_max_latency_isSet) {
        obj.insert(QString("maxLatency"), ::OpenAPI::toJsonValue(m_max_latency));
    }
    return obj;
}

qint32 OAILatencyDescriptor::getMaxLatency() const {
    return m_max_latency;
}
void OAILatencyDescriptor::setMaxLatency(const qint32 &max_latency) {
    m_max_latency = max_latency;
    m_max_latency_isSet = true;
}

bool OAILatencyDescriptor::is_max_latency_Set() const{
    return m_max_latency_isSet;
}

bool OAILatencyDescriptor::is_max_latency_Valid() const{
    return m_max_latency_isValid;
}

bool OAILatencyDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_latency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILatencyDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_latency_isValid && true;
}

} // namespace OpenAPI
