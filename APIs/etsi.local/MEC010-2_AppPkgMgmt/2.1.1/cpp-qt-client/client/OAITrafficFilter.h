/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrafficFilter.h
 *
 * 
 */

#ifndef OAITrafficFilter_H
#define OAITrafficFilter_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrafficFilter : public OAIObject {
public:
    OAITrafficFilter();
    OAITrafficFilter(QString json);
    ~OAITrafficFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDScp() const;
    void setDScp(const qint32 &d_scp);
    bool is_d_scp_Set() const;
    bool is_d_scp_Valid() const;

    QList<QString> getDstAddress() const;
    void setDstAddress(const QList<QString> &dst_address);
    bool is_dst_address_Set() const;
    bool is_dst_address_Valid() const;

    QList<QString> getDstPort() const;
    void setDstPort(const QList<QString> &dst_port);
    bool is_dst_port_Set() const;
    bool is_dst_port_Valid() const;

    QList<QString> getDstTunnelPort() const;
    void setDstTunnelPort(const QList<QString> &dst_tunnel_port);
    bool is_dst_tunnel_port_Set() const;
    bool is_dst_tunnel_port_Valid() const;

    QList<QString> getProtocol() const;
    void setProtocol(const QList<QString> &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getQCi() const;
    void setQCi(const qint32 &q_ci);
    bool is_q_ci_Set() const;
    bool is_q_ci_Valid() const;

    QList<QString> getSrcAddress() const;
    void setSrcAddress(const QList<QString> &src_address);
    bool is_src_address_Set() const;
    bool is_src_address_Valid() const;

    QList<QString> getSrcPort() const;
    void setSrcPort(const QList<QString> &src_port);
    bool is_src_port_Set() const;
    bool is_src_port_Valid() const;

    QList<QString> getSrcTunnelAddress() const;
    void setSrcTunnelAddress(const QList<QString> &src_tunnel_address);
    bool is_src_tunnel_address_Set() const;
    bool is_src_tunnel_address_Valid() const;

    QList<QString> getSrcTunnelPort() const;
    void setSrcTunnelPort(const QList<QString> &src_tunnel_port);
    bool is_src_tunnel_port_Set() const;
    bool is_src_tunnel_port_Valid() const;

    qint32 getTC() const;
    void setTC(const qint32 &t_c);
    bool is_t_c_Set() const;
    bool is_t_c_Valid() const;

    QList<QString> getTag() const;
    void setTag(const QList<QString> &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    QList<QString> getTgtTunnelAddress() const;
    void setTgtTunnelAddress(const QList<QString> &tgt_tunnel_address);
    bool is_tgt_tunnel_address_Set() const;
    bool is_tgt_tunnel_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_d_scp;
    bool m_d_scp_isSet;
    bool m_d_scp_isValid;

    QList<QString> m_dst_address;
    bool m_dst_address_isSet;
    bool m_dst_address_isValid;

    QList<QString> m_dst_port;
    bool m_dst_port_isSet;
    bool m_dst_port_isValid;

    QList<QString> m_dst_tunnel_port;
    bool m_dst_tunnel_port_isSet;
    bool m_dst_tunnel_port_isValid;

    QList<QString> m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_q_ci;
    bool m_q_ci_isSet;
    bool m_q_ci_isValid;

    QList<QString> m_src_address;
    bool m_src_address_isSet;
    bool m_src_address_isValid;

    QList<QString> m_src_port;
    bool m_src_port_isSet;
    bool m_src_port_isValid;

    QList<QString> m_src_tunnel_address;
    bool m_src_tunnel_address_isSet;
    bool m_src_tunnel_address_isValid;

    QList<QString> m_src_tunnel_port;
    bool m_src_tunnel_port_isSet;
    bool m_src_tunnel_port_isValid;

    qint32 m_t_c;
    bool m_t_c_isSet;
    bool m_t_c_isValid;

    QList<QString> m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    QList<QString> m_tgt_tunnel_address;
    bool m_tgt_tunnel_address_isSet;
    bool m_tgt_tunnel_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrafficFilter)

#endif // OAITrafficFilter_H
