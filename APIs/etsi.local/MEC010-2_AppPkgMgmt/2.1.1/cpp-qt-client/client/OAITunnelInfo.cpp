/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITunnelInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITunnelInfo::OAITunnelInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITunnelInfo::OAITunnelInfo() {
    this->initializeModel();
}

OAITunnelInfo::~OAITunnelInfo() {}

void OAITunnelInfo::initializeModel() {

    m_tunnel_dst_address_isSet = false;
    m_tunnel_dst_address_isValid = false;

    m_tunnel_specific_data_isSet = false;
    m_tunnel_specific_data_isValid = false;

    m_tunnel_src_address_isSet = false;
    m_tunnel_src_address_isValid = false;

    m_tunnel_type_isSet = false;
    m_tunnel_type_isValid = false;
}

void OAITunnelInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITunnelInfo::fromJsonObject(QJsonObject json) {

    m_tunnel_dst_address_isValid = ::OpenAPI::fromJsonValue(m_tunnel_dst_address, json[QString("tunnelDstAddress")]);
    m_tunnel_dst_address_isSet = !json[QString("tunnelDstAddress")].isNull() && m_tunnel_dst_address_isValid;

    m_tunnel_specific_data_isValid = ::OpenAPI::fromJsonValue(m_tunnel_specific_data, json[QString("tunnelSpecificData")]);
    m_tunnel_specific_data_isSet = !json[QString("tunnelSpecificData")].isNull() && m_tunnel_specific_data_isValid;

    m_tunnel_src_address_isValid = ::OpenAPI::fromJsonValue(m_tunnel_src_address, json[QString("tunnelSrcAddress")]);
    m_tunnel_src_address_isSet = !json[QString("tunnelSrcAddress")].isNull() && m_tunnel_src_address_isValid;

    m_tunnel_type_isValid = ::OpenAPI::fromJsonValue(m_tunnel_type, json[QString("tunnelType")]);
    m_tunnel_type_isSet = !json[QString("tunnelType")].isNull() && m_tunnel_type_isValid;
}

QString OAITunnelInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITunnelInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_tunnel_dst_address_isSet) {
        obj.insert(QString("tunnelDstAddress"), ::OpenAPI::toJsonValue(m_tunnel_dst_address));
    }
    if (m_tunnel_specific_data_isSet) {
        obj.insert(QString("tunnelSpecificData"), ::OpenAPI::toJsonValue(m_tunnel_specific_data));
    }
    if (m_tunnel_src_address_isSet) {
        obj.insert(QString("tunnelSrcAddress"), ::OpenAPI::toJsonValue(m_tunnel_src_address));
    }
    if (m_tunnel_type.isSet()) {
        obj.insert(QString("tunnelType"), ::OpenAPI::toJsonValue(m_tunnel_type));
    }
    return obj;
}

QString OAITunnelInfo::getTunnelDstAddress() const {
    return m_tunnel_dst_address;
}
void OAITunnelInfo::setTunnelDstAddress(const QString &tunnel_dst_address) {
    m_tunnel_dst_address = tunnel_dst_address;
    m_tunnel_dst_address_isSet = true;
}

bool OAITunnelInfo::is_tunnel_dst_address_Set() const{
    return m_tunnel_dst_address_isSet;
}

bool OAITunnelInfo::is_tunnel_dst_address_Valid() const{
    return m_tunnel_dst_address_isValid;
}

QString OAITunnelInfo::getTunnelSpecificData() const {
    return m_tunnel_specific_data;
}
void OAITunnelInfo::setTunnelSpecificData(const QString &tunnel_specific_data) {
    m_tunnel_specific_data = tunnel_specific_data;
    m_tunnel_specific_data_isSet = true;
}

bool OAITunnelInfo::is_tunnel_specific_data_Set() const{
    return m_tunnel_specific_data_isSet;
}

bool OAITunnelInfo::is_tunnel_specific_data_Valid() const{
    return m_tunnel_specific_data_isValid;
}

QString OAITunnelInfo::getTunnelSrcAddress() const {
    return m_tunnel_src_address;
}
void OAITunnelInfo::setTunnelSrcAddress(const QString &tunnel_src_address) {
    m_tunnel_src_address = tunnel_src_address;
    m_tunnel_src_address_isSet = true;
}

bool OAITunnelInfo::is_tunnel_src_address_Set() const{
    return m_tunnel_src_address_isSet;
}

bool OAITunnelInfo::is_tunnel_src_address_Valid() const{
    return m_tunnel_src_address_isValid;
}

OAITunnelType OAITunnelInfo::getTunnelType() const {
    return m_tunnel_type;
}
void OAITunnelInfo::setTunnelType(const OAITunnelType &tunnel_type) {
    m_tunnel_type = tunnel_type;
    m_tunnel_type_isSet = true;
}

bool OAITunnelInfo::is_tunnel_type_Set() const{
    return m_tunnel_type_isSet;
}

bool OAITunnelInfo::is_tunnel_type_Valid() const{
    return m_tunnel_type_isValid;
}

bool OAITunnelInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tunnel_dst_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_specific_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_src_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITunnelInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tunnel_dst_address_isValid && m_tunnel_src_address_isValid && m_tunnel_type_isValid && true;
}

} // namespace OpenAPI
