/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportDependency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportDependency::OAITransportDependency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportDependency::OAITransportDependency() {
    this->initializeModel();
}

OAITransportDependency::~OAITransportDependency() {}

void OAITransportDependency::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_serializers_isSet = false;
    m_serializers_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;
}

void OAITransportDependency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportDependency::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_serializers_isValid = ::OpenAPI::fromJsonValue(m_serializers, json[QString("serializers")]);
    m_serializers_isSet = !json[QString("serializers")].isNull() && m_serializers_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("transport")]);
    m_transport_isSet = !json[QString("transport")].isNull() && m_transport_isValid;
}

QString OAITransportDependency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportDependency::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_serializers.size() > 0) {
        obj.insert(QString("serializers"), ::OpenAPI::toJsonValue(m_serializers));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    return obj;
}

QList<QString> OAITransportDependency::getLabels() const {
    return m_labels;
}
void OAITransportDependency::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAITransportDependency::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAITransportDependency::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAITransportDependency::getSerializers() const {
    return m_serializers;
}
void OAITransportDependency::setSerializers(const QList<QString> &serializers) {
    m_serializers = serializers;
    m_serializers_isSet = true;
}

bool OAITransportDependency::is_serializers_Set() const{
    return m_serializers_isSet;
}

bool OAITransportDependency::is_serializers_Valid() const{
    return m_serializers_isValid;
}

OAITransportDescriptor OAITransportDependency::getTransport() const {
    return m_transport;
}
void OAITransportDependency::setTransport(const OAITransportDescriptor &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAITransportDependency::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAITransportDependency::is_transport_Valid() const{
    return m_transport_isValid;
}

bool OAITransportDependency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_serializers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportDependency::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_labels_isValid && m_serializers_isValid && m_transport_isValid && true;
}

} // namespace OpenAPI
