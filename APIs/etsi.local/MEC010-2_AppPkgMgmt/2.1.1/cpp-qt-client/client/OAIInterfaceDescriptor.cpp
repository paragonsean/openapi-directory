/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInterfaceDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInterfaceDescriptor::OAIInterfaceDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInterfaceDescriptor::OAIInterfaceDescriptor() {
    this->initializeModel();
}

OAIInterfaceDescriptor::~OAIInterfaceDescriptor() {}

void OAIInterfaceDescriptor::initializeModel() {

    m_dst_ip_address_isSet = false;
    m_dst_ip_address_isValid = false;

    m_dst_mac_address_isSet = false;
    m_dst_mac_address_isValid = false;

    m_interface_type_isSet = false;
    m_interface_type_isValid = false;

    m_src_mac_address_isSet = false;
    m_src_mac_address_isValid = false;

    m_tunnel_info_isSet = false;
    m_tunnel_info_isValid = false;
}

void OAIInterfaceDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInterfaceDescriptor::fromJsonObject(QJsonObject json) {

    m_dst_ip_address_isValid = ::OpenAPI::fromJsonValue(m_dst_ip_address, json[QString("dstIPAddress")]);
    m_dst_ip_address_isSet = !json[QString("dstIPAddress")].isNull() && m_dst_ip_address_isValid;

    m_dst_mac_address_isValid = ::OpenAPI::fromJsonValue(m_dst_mac_address, json[QString("dstMACAddress")]);
    m_dst_mac_address_isSet = !json[QString("dstMACAddress")].isNull() && m_dst_mac_address_isValid;

    m_interface_type_isValid = ::OpenAPI::fromJsonValue(m_interface_type, json[QString("interfaceType")]);
    m_interface_type_isSet = !json[QString("interfaceType")].isNull() && m_interface_type_isValid;

    m_src_mac_address_isValid = ::OpenAPI::fromJsonValue(m_src_mac_address, json[QString("srcMACAddress")]);
    m_src_mac_address_isSet = !json[QString("srcMACAddress")].isNull() && m_src_mac_address_isValid;

    m_tunnel_info_isValid = ::OpenAPI::fromJsonValue(m_tunnel_info, json[QString("tunnelInfo")]);
    m_tunnel_info_isSet = !json[QString("tunnelInfo")].isNull() && m_tunnel_info_isValid;
}

QString OAIInterfaceDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInterfaceDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_dst_ip_address_isSet) {
        obj.insert(QString("dstIPAddress"), ::OpenAPI::toJsonValue(m_dst_ip_address));
    }
    if (m_dst_mac_address_isSet) {
        obj.insert(QString("dstMACAddress"), ::OpenAPI::toJsonValue(m_dst_mac_address));
    }
    if (m_interface_type.isSet()) {
        obj.insert(QString("interfaceType"), ::OpenAPI::toJsonValue(m_interface_type));
    }
    if (m_src_mac_address_isSet) {
        obj.insert(QString("srcMACAddress"), ::OpenAPI::toJsonValue(m_src_mac_address));
    }
    if (m_tunnel_info.isSet()) {
        obj.insert(QString("tunnelInfo"), ::OpenAPI::toJsonValue(m_tunnel_info));
    }
    return obj;
}

QString OAIInterfaceDescriptor::getDstIpAddress() const {
    return m_dst_ip_address;
}
void OAIInterfaceDescriptor::setDstIpAddress(const QString &dst_ip_address) {
    m_dst_ip_address = dst_ip_address;
    m_dst_ip_address_isSet = true;
}

bool OAIInterfaceDescriptor::is_dst_ip_address_Set() const{
    return m_dst_ip_address_isSet;
}

bool OAIInterfaceDescriptor::is_dst_ip_address_Valid() const{
    return m_dst_ip_address_isValid;
}

QString OAIInterfaceDescriptor::getDstMacAddress() const {
    return m_dst_mac_address;
}
void OAIInterfaceDescriptor::setDstMacAddress(const QString &dst_mac_address) {
    m_dst_mac_address = dst_mac_address;
    m_dst_mac_address_isSet = true;
}

bool OAIInterfaceDescriptor::is_dst_mac_address_Set() const{
    return m_dst_mac_address_isSet;
}

bool OAIInterfaceDescriptor::is_dst_mac_address_Valid() const{
    return m_dst_mac_address_isValid;
}

OAIInterfaceType OAIInterfaceDescriptor::getInterfaceType() const {
    return m_interface_type;
}
void OAIInterfaceDescriptor::setInterfaceType(const OAIInterfaceType &interface_type) {
    m_interface_type = interface_type;
    m_interface_type_isSet = true;
}

bool OAIInterfaceDescriptor::is_interface_type_Set() const{
    return m_interface_type_isSet;
}

bool OAIInterfaceDescriptor::is_interface_type_Valid() const{
    return m_interface_type_isValid;
}

QString OAIInterfaceDescriptor::getSrcMacAddress() const {
    return m_src_mac_address;
}
void OAIInterfaceDescriptor::setSrcMacAddress(const QString &src_mac_address) {
    m_src_mac_address = src_mac_address;
    m_src_mac_address_isSet = true;
}

bool OAIInterfaceDescriptor::is_src_mac_address_Set() const{
    return m_src_mac_address_isSet;
}

bool OAIInterfaceDescriptor::is_src_mac_address_Valid() const{
    return m_src_mac_address_isValid;
}

OAITunnelInfo OAIInterfaceDescriptor::getTunnelInfo() const {
    return m_tunnel_info;
}
void OAIInterfaceDescriptor::setTunnelInfo(const OAITunnelInfo &tunnel_info) {
    m_tunnel_info = tunnel_info;
    m_tunnel_info_isSet = true;
}

bool OAIInterfaceDescriptor::is_tunnel_info_Set() const{
    return m_tunnel_info_isSet;
}

bool OAIInterfaceDescriptor::is_tunnel_info_Valid() const{
    return m_tunnel_info_isValid;
}

bool OAIInterfaceDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dst_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dst_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tunnel_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInterfaceDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interface_type_isValid && true;
}

} // namespace OpenAPI
