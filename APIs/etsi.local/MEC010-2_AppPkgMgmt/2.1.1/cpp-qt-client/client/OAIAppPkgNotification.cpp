/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppPkgNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppPkgNotification::OAIAppPkgNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppPkgNotification::OAIAppPkgNotification() {
    this->initializeModel();
}

OAIAppPkgNotification::~OAIAppPkgNotification() {}

void OAIAppPkgNotification::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_app_did_isSet = false;
    m_app_did_isValid = false;

    m_app_pkg_id_isSet = false;
    m_app_pkg_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notification_type_isSet = false;
    m_notification_type_isValid = false;

    m_operational_state_isSet = false;
    m_operational_state_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIAppPkgNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppPkgNotification::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_app_did_isValid = ::OpenAPI::fromJsonValue(m_app_did, json[QString("appDId")]);
    m_app_did_isSet = !json[QString("appDId")].isNull() && m_app_did_isValid;

    m_app_pkg_id_isValid = ::OpenAPI::fromJsonValue(m_app_pkg_id, json[QString("appPkgId")]);
    m_app_pkg_id_isSet = !json[QString("appPkgId")].isNull() && m_app_pkg_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notification_type_isValid = ::OpenAPI::fromJsonValue(m_notification_type, json[QString("notificationType")]);
    m_notification_type_isSet = !json[QString("notificationType")].isNull() && m_notification_type_isValid;

    m_operational_state_isValid = ::OpenAPI::fromJsonValue(m_operational_state, json[QString("operationalState")]);
    m_operational_state_isSet = !json[QString("operationalState")].isNull() && m_operational_state_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("timeStamp")]);
    m_time_stamp_isSet = !json[QString("timeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIAppPkgNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppPkgNotification::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_app_did_isSet) {
        obj.insert(QString("appDId"), ::OpenAPI::toJsonValue(m_app_did));
    }
    if (m_app_pkg_id_isSet) {
        obj.insert(QString("appPkgId"), ::OpenAPI::toJsonValue(m_app_pkg_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notification_type.isSet()) {
        obj.insert(QString("notificationType"), ::OpenAPI::toJsonValue(m_notification_type));
    }
    if (m_operational_state_isSet) {
        obj.insert(QString("operationalState"), ::OpenAPI::toJsonValue(m_operational_state));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_time_stamp.isSet()) {
        obj.insert(QString("timeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

OAIAppPkgNotification_links OAIAppPkgNotification::getLinks() const {
    return m__links;
}
void OAIAppPkgNotification::setLinks(const OAIAppPkgNotification_links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAppPkgNotification::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAppPkgNotification::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIAppPkgNotification::getAppDid() const {
    return m_app_did;
}
void OAIAppPkgNotification::setAppDid(const QString &app_did) {
    m_app_did = app_did;
    m_app_did_isSet = true;
}

bool OAIAppPkgNotification::is_app_did_Set() const{
    return m_app_did_isSet;
}

bool OAIAppPkgNotification::is_app_did_Valid() const{
    return m_app_did_isValid;
}

QString OAIAppPkgNotification::getAppPkgId() const {
    return m_app_pkg_id;
}
void OAIAppPkgNotification::setAppPkgId(const QString &app_pkg_id) {
    m_app_pkg_id = app_pkg_id;
    m_app_pkg_id_isSet = true;
}

bool OAIAppPkgNotification::is_app_pkg_id_Set() const{
    return m_app_pkg_id_isSet;
}

bool OAIAppPkgNotification::is_app_pkg_id_Valid() const{
    return m_app_pkg_id_isValid;
}

QString OAIAppPkgNotification::getId() const {
    return m_id;
}
void OAIAppPkgNotification::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppPkgNotification::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppPkgNotification::is_id_Valid() const{
    return m_id_isValid;
}

OAIAppPkg_NotificationType OAIAppPkgNotification::getNotificationType() const {
    return m_notification_type;
}
void OAIAppPkgNotification::setNotificationType(const OAIAppPkg_NotificationType &notification_type) {
    m_notification_type = notification_type;
    m_notification_type_isSet = true;
}

bool OAIAppPkgNotification::is_notification_type_Set() const{
    return m_notification_type_isSet;
}

bool OAIAppPkgNotification::is_notification_type_Valid() const{
    return m_notification_type_isValid;
}

QString OAIAppPkgNotification::getOperationalState() const {
    return m_operational_state;
}
void OAIAppPkgNotification::setOperationalState(const QString &operational_state) {
    m_operational_state = operational_state;
    m_operational_state_isSet = true;
}

bool OAIAppPkgNotification::is_operational_state_Set() const{
    return m_operational_state_isSet;
}

bool OAIAppPkgNotification::is_operational_state_Valid() const{
    return m_operational_state_isValid;
}

QString OAIAppPkgNotification::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIAppPkgNotification::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIAppPkgNotification::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIAppPkgNotification::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

OAITimeStamp OAIAppPkgNotification::getTimeStamp() const {
    return m_time_stamp;
}
void OAIAppPkgNotification::setTimeStamp(const OAITimeStamp &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIAppPkgNotification::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIAppPkgNotification::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIAppPkgNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_did_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_pkg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppPkgNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_app_did_isValid && m_app_pkg_id_isValid && m_id_isValid && m_notification_type_isValid && m_operational_state_isValid && m_subscription_id_isValid && m_time_stamp_isValid && true;
}

} // namespace OpenAPI
