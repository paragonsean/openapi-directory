/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppPkg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppPkg::OAICreateAppPkg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppPkg::OAICreateAppPkg() {
    this->initializeModel();
}

OAICreateAppPkg::~OAICreateAppPkg() {}

void OAICreateAppPkg::initializeModel() {

    m_app_pkg_name_isSet = false;
    m_app_pkg_name_isValid = false;

    m_app_pkg_path_isSet = false;
    m_app_pkg_path_isValid = false;

    m_app_pkg_version_isSet = false;
    m_app_pkg_version_isValid = false;

    m_app_provider_isSet = false;
    m_app_provider_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_user_defined_data_isSet = false;
    m_user_defined_data_isValid = false;
}

void OAICreateAppPkg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppPkg::fromJsonObject(QJsonObject json) {

    m_app_pkg_name_isValid = ::OpenAPI::fromJsonValue(m_app_pkg_name, json[QString("appPkgName")]);
    m_app_pkg_name_isSet = !json[QString("appPkgName")].isNull() && m_app_pkg_name_isValid;

    m_app_pkg_path_isValid = ::OpenAPI::fromJsonValue(m_app_pkg_path, json[QString("appPkgPath")]);
    m_app_pkg_path_isSet = !json[QString("appPkgPath")].isNull() && m_app_pkg_path_isValid;

    m_app_pkg_version_isValid = ::OpenAPI::fromJsonValue(m_app_pkg_version, json[QString("appPkgVersion")]);
    m_app_pkg_version_isSet = !json[QString("appPkgVersion")].isNull() && m_app_pkg_version_isValid;

    m_app_provider_isValid = ::OpenAPI::fromJsonValue(m_app_provider, json[QString("appProvider")]);
    m_app_provider_isSet = !json[QString("appProvider")].isNull() && m_app_provider_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_user_defined_data_isValid = ::OpenAPI::fromJsonValue(m_user_defined_data, json[QString("userDefinedData")]);
    m_user_defined_data_isSet = !json[QString("userDefinedData")].isNull() && m_user_defined_data_isValid;
}

QString OAICreateAppPkg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppPkg::asJsonObject() const {
    QJsonObject obj;
    if (m_app_pkg_name_isSet) {
        obj.insert(QString("appPkgName"), ::OpenAPI::toJsonValue(m_app_pkg_name));
    }
    if (m_app_pkg_path_isSet) {
        obj.insert(QString("appPkgPath"), ::OpenAPI::toJsonValue(m_app_pkg_path));
    }
    if (m_app_pkg_version_isSet) {
        obj.insert(QString("appPkgVersion"), ::OpenAPI::toJsonValue(m_app_pkg_version));
    }
    if (m_app_provider_isSet) {
        obj.insert(QString("appProvider"), ::OpenAPI::toJsonValue(m_app_provider));
    }
    if (m_checksum.isSet()) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_user_defined_data.size() > 0) {
        obj.insert(QString("userDefinedData"), ::OpenAPI::toJsonValue(m_user_defined_data));
    }
    return obj;
}

QString OAICreateAppPkg::getAppPkgName() const {
    return m_app_pkg_name;
}
void OAICreateAppPkg::setAppPkgName(const QString &app_pkg_name) {
    m_app_pkg_name = app_pkg_name;
    m_app_pkg_name_isSet = true;
}

bool OAICreateAppPkg::is_app_pkg_name_Set() const{
    return m_app_pkg_name_isSet;
}

bool OAICreateAppPkg::is_app_pkg_name_Valid() const{
    return m_app_pkg_name_isValid;
}

QString OAICreateAppPkg::getAppPkgPath() const {
    return m_app_pkg_path;
}
void OAICreateAppPkg::setAppPkgPath(const QString &app_pkg_path) {
    m_app_pkg_path = app_pkg_path;
    m_app_pkg_path_isSet = true;
}

bool OAICreateAppPkg::is_app_pkg_path_Set() const{
    return m_app_pkg_path_isSet;
}

bool OAICreateAppPkg::is_app_pkg_path_Valid() const{
    return m_app_pkg_path_isValid;
}

QString OAICreateAppPkg::getAppPkgVersion() const {
    return m_app_pkg_version;
}
void OAICreateAppPkg::setAppPkgVersion(const QString &app_pkg_version) {
    m_app_pkg_version = app_pkg_version;
    m_app_pkg_version_isSet = true;
}

bool OAICreateAppPkg::is_app_pkg_version_Set() const{
    return m_app_pkg_version_isSet;
}

bool OAICreateAppPkg::is_app_pkg_version_Valid() const{
    return m_app_pkg_version_isValid;
}

QString OAICreateAppPkg::getAppProvider() const {
    return m_app_provider;
}
void OAICreateAppPkg::setAppProvider(const QString &app_provider) {
    m_app_provider = app_provider;
    m_app_provider_isSet = true;
}

bool OAICreateAppPkg::is_app_provider_Set() const{
    return m_app_provider_isSet;
}

bool OAICreateAppPkg::is_app_provider_Valid() const{
    return m_app_provider_isValid;
}

OAIChecksum OAICreateAppPkg::getChecksum() const {
    return m_checksum;
}
void OAICreateAppPkg::setChecksum(const OAIChecksum &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAICreateAppPkg::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAICreateAppPkg::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QMap<QString, QJsonValue> OAICreateAppPkg::getUserDefinedData() const {
    return m_user_defined_data;
}
void OAICreateAppPkg::setUserDefinedData(const QMap<QString, QJsonValue> &user_defined_data) {
    m_user_defined_data = user_defined_data;
    m_user_defined_data_isSet = true;
}

bool OAICreateAppPkg::is_user_defined_data_Set() const{
    return m_user_defined_data_isSet;
}

bool OAICreateAppPkg::is_user_defined_data_Valid() const{
    return m_user_defined_data_isValid;
}

bool OAICreateAppPkg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_pkg_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_pkg_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_pkg_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_defined_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppPkg::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_pkg_name_isValid && m_app_pkg_path_isValid && m_app_pkg_version_isValid && m_checksum_isValid && true;
}

} // namespace OpenAPI
