/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDescriptor::OAIServiceDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDescriptor::OAIServiceDescriptor() {
    this->initializeModel();
}

OAIServiceDescriptor::~OAIServiceDescriptor() {}

void OAIServiceDescriptor::initializeModel() {

    m_ser_category_isSet = false;
    m_ser_category_isValid = false;

    m_ser_name_isSet = false;
    m_ser_name_isValid = false;

    m_transports_supported_isSet = false;
    m_transports_supported_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServiceDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDescriptor::fromJsonObject(QJsonObject json) {

    m_ser_category_isValid = ::OpenAPI::fromJsonValue(m_ser_category, json[QString("serCategory")]);
    m_ser_category_isSet = !json[QString("serCategory")].isNull() && m_ser_category_isValid;

    m_ser_name_isValid = ::OpenAPI::fromJsonValue(m_ser_name, json[QString("serName")]);
    m_ser_name_isSet = !json[QString("serName")].isNull() && m_ser_name_isValid;

    m_transports_supported_isValid = ::OpenAPI::fromJsonValue(m_transports_supported, json[QString("transportsSupported")]);
    m_transports_supported_isSet = !json[QString("transportsSupported")].isNull() && m_transports_supported_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServiceDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_ser_category_isSet) {
        obj.insert(QString("serCategory"), ::OpenAPI::toJsonValue(m_ser_category));
    }
    if (m_ser_name_isSet) {
        obj.insert(QString("serName"), ::OpenAPI::toJsonValue(m_ser_name));
    }
    if (m_transports_supported.isSet()) {
        obj.insert(QString("transportsSupported"), ::OpenAPI::toJsonValue(m_transports_supported));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QJsonValue OAIServiceDescriptor::getSerCategory() const {
    return m_ser_category;
}
void OAIServiceDescriptor::setSerCategory(const QJsonValue &ser_category) {
    m_ser_category = ser_category;
    m_ser_category_isSet = true;
}

bool OAIServiceDescriptor::is_ser_category_Set() const{
    return m_ser_category_isSet;
}

bool OAIServiceDescriptor::is_ser_category_Valid() const{
    return m_ser_category_isValid;
}

QString OAIServiceDescriptor::getSerName() const {
    return m_ser_name;
}
void OAIServiceDescriptor::setSerName(const QString &ser_name) {
    m_ser_name = ser_name;
    m_ser_name_isSet = true;
}

bool OAIServiceDescriptor::is_ser_name_Set() const{
    return m_ser_name_isSet;
}

bool OAIServiceDescriptor::is_ser_name_Valid() const{
    return m_ser_name_isValid;
}

OAITransportsSupported OAIServiceDescriptor::getTransportsSupported() const {
    return m_transports_supported;
}
void OAIServiceDescriptor::setTransportsSupported(const OAITransportsSupported &transports_supported) {
    m_transports_supported = transports_supported;
    m_transports_supported_isSet = true;
}

bool OAIServiceDescriptor::is_transports_supported_Set() const{
    return m_transports_supported_isSet;
}

bool OAIServiceDescriptor::is_transports_supported_Valid() const{
    return m_transports_supported_isValid;
}

QString OAIServiceDescriptor::getVersion() const {
    return m_version;
}
void OAIServiceDescriptor::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServiceDescriptor::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServiceDescriptor::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServiceDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ser_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ser_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transports_supported.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ser_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
