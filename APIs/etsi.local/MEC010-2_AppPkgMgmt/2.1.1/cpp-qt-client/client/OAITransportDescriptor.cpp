/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransportDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransportDescriptor::OAITransportDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransportDescriptor::OAITransportDescriptor() {
    this->initializeModel();
}

OAITransportDescriptor::~OAITransportDescriptor() {}

void OAITransportDescriptor::initializeModel() {

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITransportDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransportDescriptor::fromJsonObject(QJsonObject json) {

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITransportDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransportDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_security_isSet) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAITransportDescriptor::getProtocol() const {
    return m_protocol;
}
void OAITransportDescriptor::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAITransportDescriptor::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAITransportDescriptor::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QJsonValue OAITransportDescriptor::getSecurity() const {
    return m_security;
}
void OAITransportDescriptor::setSecurity(const QJsonValue &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAITransportDescriptor::is_security_Set() const{
    return m_security_isSet;
}

bool OAITransportDescriptor::is_security_Valid() const{
    return m_security_isValid;
}

QString OAITransportDescriptor::getType() const {
    return m_type;
}
void OAITransportDescriptor::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransportDescriptor::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransportDescriptor::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransportDescriptor::getVersion() const {
    return m_version;
}
void OAITransportDescriptor::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITransportDescriptor::is_version_Set() const{
    return m_version_isSet;
}

bool OAITransportDescriptor::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITransportDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransportDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_protocol_isValid && m_security_isValid && m_type_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
