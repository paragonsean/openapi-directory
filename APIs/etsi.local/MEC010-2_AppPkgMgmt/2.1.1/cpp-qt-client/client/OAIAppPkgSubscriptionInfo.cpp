/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppPkgSubscriptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppPkgSubscriptionInfo::OAIAppPkgSubscriptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppPkgSubscriptionInfo::OAIAppPkgSubscriptionInfo() {
    this->initializeModel();
}

OAIAppPkgSubscriptionInfo::~OAIAppPkgSubscriptionInfo() {}

void OAIAppPkgSubscriptionInfo::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_callback_uri_isSet = false;
    m_callback_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_subscription_type_isSet = false;
    m_subscription_type_isValid = false;
}

void OAIAppPkgSubscriptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppPkgSubscriptionInfo::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_callback_uri_isValid = ::OpenAPI::fromJsonValue(m_callback_uri, json[QString("callbackUri")]);
    m_callback_uri_isSet = !json[QString("callbackUri")].isNull() && m_callback_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_subscription_type_isValid = ::OpenAPI::fromJsonValue(m_subscription_type, json[QString("subscriptionType")]);
    m_subscription_type_isSet = !json[QString("subscriptionType")].isNull() && m_subscription_type_isValid;
}

QString OAIAppPkgSubscriptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppPkgSubscriptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_callback_uri_isSet) {
        obj.insert(QString("callbackUri"), ::OpenAPI::toJsonValue(m_callback_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_subscription_type.isSet()) {
        obj.insert(QString("subscriptionType"), ::OpenAPI::toJsonValue(m_subscription_type));
    }
    return obj;
}

OAIAppPkgSubscriptionInfo_links OAIAppPkgSubscriptionInfo::getLinks() const {
    return m__links;
}
void OAIAppPkgSubscriptionInfo::setLinks(const OAIAppPkgSubscriptionInfo_links &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAppPkgSubscriptionInfo::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAppPkgSubscriptionInfo::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIAppPkgSubscriptionInfo::getCallbackUri() const {
    return m_callback_uri;
}
void OAIAppPkgSubscriptionInfo::setCallbackUri(const QString &callback_uri) {
    m_callback_uri = callback_uri;
    m_callback_uri_isSet = true;
}

bool OAIAppPkgSubscriptionInfo::is_callback_uri_Set() const{
    return m_callback_uri_isSet;
}

bool OAIAppPkgSubscriptionInfo::is_callback_uri_Valid() const{
    return m_callback_uri_isValid;
}

QString OAIAppPkgSubscriptionInfo::getId() const {
    return m_id;
}
void OAIAppPkgSubscriptionInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppPkgSubscriptionInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppPkgSubscriptionInfo::is_id_Valid() const{
    return m_id_isValid;
}

OAIAppPkg_SubscriptionType OAIAppPkgSubscriptionInfo::getSubscriptionType() const {
    return m_subscription_type;
}
void OAIAppPkgSubscriptionInfo::setSubscriptionType(const OAIAppPkg_SubscriptionType &subscription_type) {
    m_subscription_type = subscription_type;
    m_subscription_type_isSet = true;
}

bool OAIAppPkgSubscriptionInfo::is_subscription_type_Set() const{
    return m_subscription_type_isSet;
}

bool OAIAppPkgSubscriptionInfo::is_subscription_type_Valid() const{
    return m_subscription_type_isValid;
}

bool OAIAppPkgSubscriptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppPkgSubscriptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m__links_isValid && m_callback_uri_isValid && m_id_isValid && m_subscription_type_isValid && true;
}

} // namespace OpenAPI
