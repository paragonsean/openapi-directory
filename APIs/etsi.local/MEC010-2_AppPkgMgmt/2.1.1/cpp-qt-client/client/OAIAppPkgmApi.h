/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppPkgmApi_H
#define OAI_OAIAppPkgmApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppD.h"
#include "OAIAppPkgInfo.h"
#include "OAIAppPkgInfoModifications.h"
#include "OAIAppPkgSubscription.h"
#include "OAIAppPkgSubscriptionInfo.h"
#include "OAIAppPkgSubscriptionLinkList.h"
#include "OAICreateAppPkg.h"
#include "OAIHttpFileElement.h"
#include "OAIProblemDetails.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppPkgmApi : public QObject {
    Q_OBJECT

public:
    OAIAppPkgmApi(const int timeOut = 0);
    ~OAIAppPkgmApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_did QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  all_fields QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  exclude_fields QString [optional]
    * @param[in]  exclude_default QString [optional]
    */
    virtual void appDGET(const QString &app_did, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_default = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_did QString [required]
    */
    virtual void appDIdGET(const QString &app_did);

    /**
    * @param[in]  app_did QString [required]
    * @param[in]  body OAIHttpFileElement [optional]
    */
    virtual void appDIdPUT(const QString &app_did, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &body = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  app_pkg_id QString [required]
    */
    virtual void appPackageDELETE(const QString &app_pkg_id);

    /**
    * @param[in]  app_pkg_id QString [required]
    */
    virtual void appPackageGET(const QString &app_pkg_id);

    /**
    * @param[in]  app_pkg_id QString [required]
    * @param[in]  oai_app_pkg_info_modifications OAIAppPkgInfoModifications [required]
    */
    virtual void appPackagePATCH(const QString &app_pkg_id, const OAIAppPkgInfoModifications &oai_app_pkg_info_modifications);

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  all_fields QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  exclude_fields QString [optional]
    * @param[in]  exclude_default QString [optional]
    */
    virtual void appPackagesGET(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_default = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_pkg OAICreateAppPkg [required]
    */
    virtual void appPackagesPOST(const OAICreateAppPkg &oai_create_app_pkg);

    /**
    * @param[in]  app_pkg_id QString [required]
    */
    virtual void appPkgGET(const QString &app_pkg_id);

    /**
    * @param[in]  app_pkg_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  all_fields QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  exclude_fields QString [optional]
    * @param[in]  exclude_default QString [optional]
    */
    virtual void appPkgIdGET(const QString &app_pkg_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_default = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_pkg_id QString [required]
    * @param[in]  body OAIHttpFileElement [optional]
    */
    virtual void appPkgPUT(const QString &app_pkg_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &body = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void individualSubscriptionDELETE(const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void individualSubscriptionGET(const QString &subscription_id);


    virtual void subscriptionsGET();

    /**
    * @param[in]  oai_app_pkg_subscription OAIAppPkgSubscription [required]
    */
    virtual void subscriptionsPOST(const OAIAppPkgSubscription &oai_app_pkg_subscription);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appDGETCallback(OAIHttpRequestWorker *worker);
    void appDIdGETCallback(OAIHttpRequestWorker *worker);
    void appDIdPUTCallback(OAIHttpRequestWorker *worker);
    void appPackageDELETECallback(OAIHttpRequestWorker *worker);
    void appPackageGETCallback(OAIHttpRequestWorker *worker);
    void appPackagePATCHCallback(OAIHttpRequestWorker *worker);
    void appPackagesGETCallback(OAIHttpRequestWorker *worker);
    void appPackagesPOSTCallback(OAIHttpRequestWorker *worker);
    void appPkgGETCallback(OAIHttpRequestWorker *worker);
    void appPkgIdGETCallback(OAIHttpRequestWorker *worker);
    void appPkgPUTCallback(OAIHttpRequestWorker *worker);
    void individualSubscriptionDELETECallback(OAIHttpRequestWorker *worker);
    void individualSubscriptionGETCallback(OAIHttpRequestWorker *worker);
    void subscriptionsGETCallback(OAIHttpRequestWorker *worker);
    void subscriptionsPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appDGETSignal(OAIAppD summary);
    void appDIdGETSignal();
    void appDIdPUTSignal();
    void appPackageDELETESignal();
    void appPackageGETSignal(OAIAppPkgInfo summary);
    void appPackagePATCHSignal(OAIAppPkgInfoModifications summary);
    void appPackagesGETSignal(QList<OAIAppPkgInfo> summary);
    void appPackagesPOSTSignal(QList<OAIAppPkgInfo> summary);
    void appPkgGETSignal();
    void appPkgIdGETSignal(OAIAppD summary);
    void appPkgPUTSignal();
    void individualSubscriptionDELETESignal();
    void individualSubscriptionGETSignal(OAIAppPkgSubscriptionInfo summary);
    void subscriptionsGETSignal(OAIAppPkgSubscriptionLinkList summary);
    void subscriptionsPOSTSignal(OAIAppPkgSubscriptionInfo summary);


    void appDGETSignalFull(OAIHttpRequestWorker *worker, OAIAppD summary);
    void appDIdGETSignalFull(OAIHttpRequestWorker *worker);
    void appDIdPUTSignalFull(OAIHttpRequestWorker *worker);
    void appPackageDELETESignalFull(OAIHttpRequestWorker *worker);
    void appPackageGETSignalFull(OAIHttpRequestWorker *worker, OAIAppPkgInfo summary);
    void appPackagePATCHSignalFull(OAIHttpRequestWorker *worker, OAIAppPkgInfoModifications summary);
    void appPackagesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppPkgInfo> summary);
    void appPackagesPOSTSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppPkgInfo> summary);
    void appPkgGETSignalFull(OAIHttpRequestWorker *worker);
    void appPkgIdGETSignalFull(OAIHttpRequestWorker *worker, OAIAppD summary);
    void appPkgPUTSignalFull(OAIHttpRequestWorker *worker);
    void individualSubscriptionDELETESignalFull(OAIHttpRequestWorker *worker);
    void individualSubscriptionGETSignalFull(OAIHttpRequestWorker *worker, OAIAppPkgSubscriptionInfo summary);
    void subscriptionsGETSignalFull(OAIHttpRequestWorker *worker, OAIAppPkgSubscriptionLinkList summary);
    void subscriptionsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIAppPkgSubscriptionInfo summary);

    Q_DECL_DEPRECATED_X("Use appDGETSignalError() instead")
    void appDGETSignalE(OAIAppD summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appDGETSignalError(OAIAppD summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appDIdGETSignalError() instead")
    void appDIdGETSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appDIdGETSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appDIdPUTSignalError() instead")
    void appDIdPUTSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appDIdPUTSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackageDELETESignalError() instead")
    void appPackageDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appPackageDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackageGETSignalError() instead")
    void appPackageGETSignalE(OAIAppPkgInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackageGETSignalError(OAIAppPkgInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagePATCHSignalError() instead")
    void appPackagePATCHSignalE(OAIAppPkgInfoModifications summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagePATCHSignalError(OAIAppPkgInfoModifications summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagesGETSignalError() instead")
    void appPackagesGETSignalE(QList<OAIAppPkgInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagesGETSignalError(QList<OAIAppPkgInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagesPOSTSignalError() instead")
    void appPackagesPOSTSignalE(QList<OAIAppPkgInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagesPOSTSignalError(QList<OAIAppPkgInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgGETSignalError() instead")
    void appPkgGETSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgGETSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgIdGETSignalError() instead")
    void appPkgIdGETSignalE(OAIAppD summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgIdGETSignalError(OAIAppD summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgPUTSignalError() instead")
    void appPkgPUTSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgPUTSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualSubscriptionDELETESignalError() instead")
    void individualSubscriptionDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void individualSubscriptionDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualSubscriptionGETSignalError() instead")
    void individualSubscriptionGETSignalE(OAIAppPkgSubscriptionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void individualSubscriptionGETSignalError(OAIAppPkgSubscriptionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGETSignalError() instead")
    void subscriptionsGETSignalE(OAIAppPkgSubscriptionLinkList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGETSignalError(OAIAppPkgSubscriptionLinkList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsPOSTSignalError() instead")
    void subscriptionsPOSTSignalE(OAIAppPkgSubscriptionInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsPOSTSignalError(OAIAppPkgSubscriptionInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appDGETSignalErrorFull() instead")
    void appDGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appDGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appDIdGETSignalErrorFull() instead")
    void appDIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appDIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appDIdPUTSignalErrorFull() instead")
    void appDIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appDIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackageDELETESignalErrorFull() instead")
    void appPackageDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackageDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackageGETSignalErrorFull() instead")
    void appPackageGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackageGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagePATCHSignalErrorFull() instead")
    void appPackagePATCHSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagePATCHSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagesGETSignalErrorFull() instead")
    void appPackagesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPackagesPOSTSignalErrorFull() instead")
    void appPackagesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPackagesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgGETSignalErrorFull() instead")
    void appPkgGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgIdGETSignalErrorFull() instead")
    void appPkgIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appPkgPUTSignalErrorFull() instead")
    void appPkgPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appPkgPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualSubscriptionDELETESignalErrorFull() instead")
    void individualSubscriptionDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualSubscriptionDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use individualSubscriptionGETSignalErrorFull() instead")
    void individualSubscriptionGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void individualSubscriptionGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGETSignalErrorFull() instead")
    void subscriptionsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsPOSTSignalErrorFull() instead")
    void subscriptionsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
