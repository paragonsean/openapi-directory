/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDNSRuleDescriptor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDNSRuleDescriptor::OAIDNSRuleDescriptor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDNSRuleDescriptor::OAIDNSRuleDescriptor() {
    this->initializeModel();
}

OAIDNSRuleDescriptor::~OAIDNSRuleDescriptor() {}

void OAIDNSRuleDescriptor::initializeModel() {

    m_dns_rule_id_isSet = false;
    m_dns_rule_id_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_address_type_isSet = false;
    m_ip_address_type_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIDNSRuleDescriptor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDNSRuleDescriptor::fromJsonObject(QJsonObject json) {

    m_dns_rule_id_isValid = ::OpenAPI::fromJsonValue(m_dns_rule_id, json[QString("dnsRuleId")]);
    m_dns_rule_id_isSet = !json[QString("dnsRuleId")].isNull() && m_dns_rule_id_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_ip_address_type_isValid = ::OpenAPI::fromJsonValue(m_ip_address_type, json[QString("ipAddressType")]);
    m_ip_address_type_isSet = !json[QString("ipAddressType")].isNull() && m_ip_address_type_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;
}

QString OAIDNSRuleDescriptor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDNSRuleDescriptor::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_rule_id_isSet) {
        obj.insert(QString("dnsRuleId"), ::OpenAPI::toJsonValue(m_dns_rule_id));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_address_type.isSet()) {
        obj.insert(QString("ipAddressType"), ::OpenAPI::toJsonValue(m_ip_address_type));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIDNSRuleDescriptor::getDnsRuleId() const {
    return m_dns_rule_id;
}
void OAIDNSRuleDescriptor::setDnsRuleId(const QString &dns_rule_id) {
    m_dns_rule_id = dns_rule_id;
    m_dns_rule_id_isSet = true;
}

bool OAIDNSRuleDescriptor::is_dns_rule_id_Set() const{
    return m_dns_rule_id_isSet;
}

bool OAIDNSRuleDescriptor::is_dns_rule_id_Valid() const{
    return m_dns_rule_id_isValid;
}

QString OAIDNSRuleDescriptor::getDomainName() const {
    return m_domain_name;
}
void OAIDNSRuleDescriptor::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDNSRuleDescriptor::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDNSRuleDescriptor::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDNSRuleDescriptor::getIpAddress() const {
    return m_ip_address;
}
void OAIDNSRuleDescriptor::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIDNSRuleDescriptor::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIDNSRuleDescriptor::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIIpAddressType OAIDNSRuleDescriptor::getIpAddressType() const {
    return m_ip_address_type;
}
void OAIDNSRuleDescriptor::setIpAddressType(const OAIIpAddressType &ip_address_type) {
    m_ip_address_type = ip_address_type;
    m_ip_address_type_isSet = true;
}

bool OAIDNSRuleDescriptor::is_ip_address_type_Set() const{
    return m_ip_address_type_isSet;
}

bool OAIDNSRuleDescriptor::is_ip_address_type_Valid() const{
    return m_ip_address_type_isValid;
}

qint32 OAIDNSRuleDescriptor::getTtl() const {
    return m_ttl;
}
void OAIDNSRuleDescriptor::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDNSRuleDescriptor::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDNSRuleDescriptor::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIDNSRuleDescriptor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDNSRuleDescriptor::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_rule_id_isValid && m_domain_name_isValid && m_ip_address_isValid && m_ip_address_type_isValid && true;
}

} // namespace OpenAPI
