/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrafficRuleDescriptor.h
 *
 * 
 */

#ifndef OAITrafficRuleDescriptor_H
#define OAITrafficRuleDescriptor_H

#include <QJsonObject>

#include "OAIAction.h"
#include "OAIFilterType.h"
#include "OAIInterfaceDescriptor.h"
#include "OAITrafficFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInterfaceDescriptor;
class OAITrafficFilter;

class OAITrafficRuleDescriptor : public OAIObject {
public:
    OAITrafficRuleDescriptor();
    OAITrafficRuleDescriptor(QString json);
    ~OAITrafficRuleDescriptor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAction getAction() const;
    void setAction(const OAIAction &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QList<OAIInterfaceDescriptor> getDstInterface() const;
    void setDstInterface(const QList<OAIInterfaceDescriptor> &dst_interface);
    bool is_dst_interface_Set() const;
    bool is_dst_interface_Valid() const;

    OAIFilterType getFilterType() const;
    void setFilterType(const OAIFilterType &filter_type);
    bool is_filter_type_Set() const;
    bool is_filter_type_Valid() const;

    qint32 getPriority() const;
    void setPriority(const qint32 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QList<OAITrafficFilter> getTrafficFilter() const;
    void setTrafficFilter(const QList<OAITrafficFilter> &traffic_filter);
    bool is_traffic_filter_Set() const;
    bool is_traffic_filter_Valid() const;

    QString getTrafficRuleId() const;
    void setTrafficRuleId(const QString &traffic_rule_id);
    bool is_traffic_rule_id_Set() const;
    bool is_traffic_rule_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAction m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QList<OAIInterfaceDescriptor> m_dst_interface;
    bool m_dst_interface_isSet;
    bool m_dst_interface_isValid;

    OAIFilterType m_filter_type;
    bool m_filter_type_isSet;
    bool m_filter_type_isValid;

    qint32 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QList<OAITrafficFilter> m_traffic_filter;
    bool m_traffic_filter_isSet;
    bool m_traffic_filter_isValid;

    QString m_traffic_rule_id;
    bool m_traffic_rule_id_isSet;
    bool m_traffic_rule_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrafficRuleDescriptor)

#endif // OAITrafficRuleDescriptor_H
