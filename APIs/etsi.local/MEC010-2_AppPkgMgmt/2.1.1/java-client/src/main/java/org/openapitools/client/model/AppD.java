/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppExternalCpd;
import org.openapitools.client.model.DNSRuleDescriptor;
import org.openapitools.client.model.FeatureDependency;
import org.openapitools.client.model.LatencyDescriptor;
import org.openapitools.client.model.ServiceDependency;
import org.openapitools.client.model.ServiceDescriptor;
import org.openapitools.client.model.TrafficRuleDescriptor;
import org.openapitools.client.model.TransportDependency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppD
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppD {
  public static final String SERIALIZED_NAME_APP_D_ID = "appDId";
  @SerializedName(SERIALIZED_NAME_APP_D_ID)
  private String appDId;

  public static final String SERIALIZED_NAME_APP_D_N_S_RULE = "appDNSRule";
  @SerializedName(SERIALIZED_NAME_APP_D_N_S_RULE)
  private List<DNSRuleDescriptor> appDNSRule = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_D_VERSION = "appDVersion";
  @SerializedName(SERIALIZED_NAME_APP_D_VERSION)
  private String appDVersion;

  public static final String SERIALIZED_NAME_APP_DESCRIPTION = "appDescription";
  @SerializedName(SERIALIZED_NAME_APP_DESCRIPTION)
  private String appDescription;

  public static final String SERIALIZED_NAME_APP_EXT_CPD = "appExtCpd";
  @SerializedName(SERIALIZED_NAME_APP_EXT_CPD)
  private List<AppExternalCpd> appExtCpd = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_FEATURE_OPTIONAL = "appFeatureOptional";
  @SerializedName(SERIALIZED_NAME_APP_FEATURE_OPTIONAL)
  private List<FeatureDependency> appFeatureOptional = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_FEATURE_REQUIRED = "appFeatureRequired";
  @SerializedName(SERIALIZED_NAME_APP_FEATURE_REQUIRED)
  private List<FeatureDependency> appFeatureRequired = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_INFO_NAME = "appInfoName";
  @SerializedName(SERIALIZED_NAME_APP_INFO_NAME)
  private String appInfoName;

  public static final String SERIALIZED_NAME_APP_LATENCY = "appLatency";
  @SerializedName(SERIALIZED_NAME_APP_LATENCY)
  private LatencyDescriptor appLatency;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_PROVIDER = "appProvider";
  @SerializedName(SERIALIZED_NAME_APP_PROVIDER)
  private String appProvider;

  public static final String SERIALIZED_NAME_APP_SERVICE_OPTIONAL = "appServiceOptional";
  @SerializedName(SERIALIZED_NAME_APP_SERVICE_OPTIONAL)
  private List<ServiceDependency> appServiceOptional = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_SERVICE_PRODUCED = "appServiceProduced";
  @SerializedName(SERIALIZED_NAME_APP_SERVICE_PRODUCED)
  private List<ServiceDescriptor> appServiceProduced = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_SERVICE_REQUIRED = "appServiceRequired";
  @SerializedName(SERIALIZED_NAME_APP_SERVICE_REQUIRED)
  private List<ServiceDependency> appServiceRequired = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_SOFT_VERSION = "appSoftVersion";
  @SerializedName(SERIALIZED_NAME_APP_SOFT_VERSION)
  private String appSoftVersion;

  public static final String SERIALIZED_NAME_APP_TRAFFIC_RULE = "appTrafficRule";
  @SerializedName(SERIALIZED_NAME_APP_TRAFFIC_RULE)
  private List<TrafficRuleDescriptor> appTrafficRule = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_APP_INSTANCE_STATE_OP_CONFIG = "changeAppInstanceStateOpConfig";
  @SerializedName(SERIALIZED_NAME_CHANGE_APP_INSTANCE_STATE_OP_CONFIG)
  private String changeAppInstanceStateOpConfig;

  public static final String SERIALIZED_NAME_MEC_VERSION = "mecVersion";
  @SerializedName(SERIALIZED_NAME_MEC_VERSION)
  private List<String> mecVersion = new ArrayList<>();

  public static final String SERIALIZED_NAME_SW_IMAGE_DESCRIPTOR = "swImageDescriptor";
  @SerializedName(SERIALIZED_NAME_SW_IMAGE_DESCRIPTOR)
  private String swImageDescriptor;

  public static final String SERIALIZED_NAME_TERMINATE_APP_INSTANCE_OP_CONFIG = "terminateAppInstanceOpConfig";
  @SerializedName(SERIALIZED_NAME_TERMINATE_APP_INSTANCE_OP_CONFIG)
  private String terminateAppInstanceOpConfig;

  public static final String SERIALIZED_NAME_TRANSPORT_DEPENDENCIES = "transportDependencies";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_DEPENDENCIES)
  private List<TransportDependency> transportDependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_COMPUTE_DESCRIPTOR = "virtualComputeDescriptor";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_COMPUTE_DESCRIPTOR)
  private String virtualComputeDescriptor;

  public static final String SERIALIZED_NAME_VIRTUAL_STORAGE_DESCRIPTOR = "virtualStorageDescriptor";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_STORAGE_DESCRIPTOR)
  private List<String> virtualStorageDescriptor = new ArrayList<>();

  public AppD() {
  }

  public AppD appDId(String appDId) {
    this.appDId = appDId;
    return this;
  }

  /**
   * Identifier of this MEC application descriptor. This attribute shall be globally unique. See noteÂ 1.
   * @return appDId
   */
  @javax.annotation.Nonnull
  public String getAppDId() {
    return appDId;
  }

  public void setAppDId(String appDId) {
    this.appDId = appDId;
  }


  public AppD appDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
    return this;
  }

  public AppD addAppDNSRuleItem(DNSRuleDescriptor appDNSRuleItem) {
    if (this.appDNSRule == null) {
      this.appDNSRule = new ArrayList<>();
    }
    this.appDNSRule.add(appDNSRuleItem);
    return this;
  }

  /**
   * Describes DNS rules the MEC application requires.
   * @return appDNSRule
   */
  @javax.annotation.Nullable
  public List<DNSRuleDescriptor> getAppDNSRule() {
    return appDNSRule;
  }

  public void setAppDNSRule(List<DNSRuleDescriptor> appDNSRule) {
    this.appDNSRule = appDNSRule;
  }


  public AppD appDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
    return this;
  }

  /**
   * Identifies the version of the application descriptor.
   * @return appDVersion
   */
  @javax.annotation.Nonnull
  public String getAppDVersion() {
    return appDVersion;
  }

  public void setAppDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
  }


  public AppD appDescription(String appDescription) {
    this.appDescription = appDescription;
    return this;
  }

  /**
   * Human readable description of the MEC application.
   * @return appDescription
   */
  @javax.annotation.Nonnull
  public String getAppDescription() {
    return appDescription;
  }

  public void setAppDescription(String appDescription) {
    this.appDescription = appDescription;
  }


  public AppD appExtCpd(List<AppExternalCpd> appExtCpd) {
    this.appExtCpd = appExtCpd;
    return this;
  }

  public AppD addAppExtCpdItem(AppExternalCpd appExtCpdItem) {
    if (this.appExtCpd == null) {
      this.appExtCpd = new ArrayList<>();
    }
    this.appExtCpd.add(appExtCpdItem);
    return this;
  }

  /**
   * Describes external interface(s) exposed by this MEC application.
   * @return appExtCpd
   */
  @javax.annotation.Nullable
  public List<AppExternalCpd> getAppExtCpd() {
    return appExtCpd;
  }

  public void setAppExtCpd(List<AppExternalCpd> appExtCpd) {
    this.appExtCpd = appExtCpd;
  }


  public AppD appFeatureOptional(List<FeatureDependency> appFeatureOptional) {
    this.appFeatureOptional = appFeatureOptional;
    return this;
  }

  public AppD addAppFeatureOptionalItem(FeatureDependency appFeatureOptionalItem) {
    if (this.appFeatureOptional == null) {
      this.appFeatureOptional = new ArrayList<>();
    }
    this.appFeatureOptional.add(appFeatureOptionalItem);
    return this;
  }

  /**
   * Describes features a MEC application may use if available.
   * @return appFeatureOptional
   */
  @javax.annotation.Nullable
  public List<FeatureDependency> getAppFeatureOptional() {
    return appFeatureOptional;
  }

  public void setAppFeatureOptional(List<FeatureDependency> appFeatureOptional) {
    this.appFeatureOptional = appFeatureOptional;
  }


  public AppD appFeatureRequired(List<FeatureDependency> appFeatureRequired) {
    this.appFeatureRequired = appFeatureRequired;
    return this;
  }

  public AppD addAppFeatureRequiredItem(FeatureDependency appFeatureRequiredItem) {
    if (this.appFeatureRequired == null) {
      this.appFeatureRequired = new ArrayList<>();
    }
    this.appFeatureRequired.add(appFeatureRequiredItem);
    return this;
  }

  /**
   * Describes features a MEC application requires to run.
   * @return appFeatureRequired
   */
  @javax.annotation.Nullable
  public List<FeatureDependency> getAppFeatureRequired() {
    return appFeatureRequired;
  }

  public void setAppFeatureRequired(List<FeatureDependency> appFeatureRequired) {
    this.appFeatureRequired = appFeatureRequired;
  }


  public AppD appInfoName(String appInfoName) {
    this.appInfoName = appInfoName;
    return this;
  }

  /**
   * Human readable name for the MEC application.
   * @return appInfoName
   */
  @javax.annotation.Nullable
  public String getAppInfoName() {
    return appInfoName;
  }

  public void setAppInfoName(String appInfoName) {
    this.appInfoName = appInfoName;
  }


  public AppD appLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
    return this;
  }

  /**
   * Get appLatency
   * @return appLatency
   */
  @javax.annotation.Nullable
  public LatencyDescriptor getAppLatency() {
    return appLatency;
  }

  public void setAppLatency(LatencyDescriptor appLatency) {
    this.appLatency = appLatency;
  }


  public AppD appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Name to identify the MEC application.
   * @return appName
   */
  @javax.annotation.Nonnull
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public AppD appProvider(String appProvider) {
    this.appProvider = appProvider;
    return this;
  }

  /**
   * Provider of the application and of the AppD.
   * @return appProvider
   */
  @javax.annotation.Nonnull
  public String getAppProvider() {
    return appProvider;
  }

  public void setAppProvider(String appProvider) {
    this.appProvider = appProvider;
  }


  public AppD appServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
    return this;
  }

  public AppD addAppServiceOptionalItem(ServiceDependency appServiceOptionalItem) {
    if (this.appServiceOptional == null) {
      this.appServiceOptional = new ArrayList<>();
    }
    this.appServiceOptional.add(appServiceOptionalItem);
    return this;
  }

  /**
   * Describes services a MEC application may use if available.
   * @return appServiceOptional
   */
  @javax.annotation.Nullable
  public List<ServiceDependency> getAppServiceOptional() {
    return appServiceOptional;
  }

  public void setAppServiceOptional(List<ServiceDependency> appServiceOptional) {
    this.appServiceOptional = appServiceOptional;
  }


  public AppD appServiceProduced(List<ServiceDescriptor> appServiceProduced) {
    this.appServiceProduced = appServiceProduced;
    return this;
  }

  public AppD addAppServiceProducedItem(ServiceDescriptor appServiceProducedItem) {
    if (this.appServiceProduced == null) {
      this.appServiceProduced = new ArrayList<>();
    }
    this.appServiceProduced.add(appServiceProducedItem);
    return this;
  }

  /**
   * Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.
   * @return appServiceProduced
   */
  @javax.annotation.Nullable
  public List<ServiceDescriptor> getAppServiceProduced() {
    return appServiceProduced;
  }

  public void setAppServiceProduced(List<ServiceDescriptor> appServiceProduced) {
    this.appServiceProduced = appServiceProduced;
  }


  public AppD appServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
    return this;
  }

  public AppD addAppServiceRequiredItem(ServiceDependency appServiceRequiredItem) {
    if (this.appServiceRequired == null) {
      this.appServiceRequired = new ArrayList<>();
    }
    this.appServiceRequired.add(appServiceRequiredItem);
    return this;
  }

  /**
   * Describes services a MEC application requires to run.
   * @return appServiceRequired
   */
  @javax.annotation.Nullable
  public List<ServiceDependency> getAppServiceRequired() {
    return appServiceRequired;
  }

  public void setAppServiceRequired(List<ServiceDependency> appServiceRequired) {
    this.appServiceRequired = appServiceRequired;
  }


  public AppD appSoftVersion(String appSoftVersion) {
    this.appSoftVersion = appSoftVersion;
    return this;
  }

  /**
   * Identifies the version of software of the MEC application.
   * @return appSoftVersion
   */
  @javax.annotation.Nonnull
  public String getAppSoftVersion() {
    return appSoftVersion;
  }

  public void setAppSoftVersion(String appSoftVersion) {
    this.appSoftVersion = appSoftVersion;
  }


  public AppD appTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
    return this;
  }

  public AppD addAppTrafficRuleItem(TrafficRuleDescriptor appTrafficRuleItem) {
    if (this.appTrafficRule == null) {
      this.appTrafficRule = new ArrayList<>();
    }
    this.appTrafficRule.add(appTrafficRuleItem);
    return this;
  }

  /**
   * Describes traffic rules the MEC application requires.
   * @return appTrafficRule
   */
  @javax.annotation.Nullable
  public List<TrafficRuleDescriptor> getAppTrafficRule() {
    return appTrafficRule;
  }

  public void setAppTrafficRule(List<TrafficRuleDescriptor> appTrafficRule) {
    this.appTrafficRule = appTrafficRule;
  }


  public AppD changeAppInstanceStateOpConfig(String changeAppInstanceStateOpConfig) {
    this.changeAppInstanceStateOpConfig = changeAppInstanceStateOpConfig;
    return this;
  }

  /**
   * NFV
   * @return changeAppInstanceStateOpConfig
   */
  @javax.annotation.Nullable
  public String getChangeAppInstanceStateOpConfig() {
    return changeAppInstanceStateOpConfig;
  }

  public void setChangeAppInstanceStateOpConfig(String changeAppInstanceStateOpConfig) {
    this.changeAppInstanceStateOpConfig = changeAppInstanceStateOpConfig;
  }


  public AppD mecVersion(List<String> mecVersion) {
    this.mecVersion = mecVersion;
    return this;
  }

  public AppD addMecVersionItem(String mecVersionItem) {
    if (this.mecVersion == null) {
      this.mecVersion = new ArrayList<>();
    }
    this.mecVersion.add(mecVersionItem);
    return this;
  }

  /**
   * Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
   * @return mecVersion
   */
  @javax.annotation.Nonnull
  public List<String> getMecVersion() {
    return mecVersion;
  }

  public void setMecVersion(List<String> mecVersion) {
    this.mecVersion = mecVersion;
  }


  public AppD swImageDescriptor(String swImageDescriptor) {
    this.swImageDescriptor = swImageDescriptor;
    return this;
  }

  /**
   * Ref NFV
   * @return swImageDescriptor
   */
  @javax.annotation.Nonnull
  public String getSwImageDescriptor() {
    return swImageDescriptor;
  }

  public void setSwImageDescriptor(String swImageDescriptor) {
    this.swImageDescriptor = swImageDescriptor;
  }


  public AppD terminateAppInstanceOpConfig(String terminateAppInstanceOpConfig) {
    this.terminateAppInstanceOpConfig = terminateAppInstanceOpConfig;
    return this;
  }

  /**
   * NFV
   * @return terminateAppInstanceOpConfig
   */
  @javax.annotation.Nullable
  public String getTerminateAppInstanceOpConfig() {
    return terminateAppInstanceOpConfig;
  }

  public void setTerminateAppInstanceOpConfig(String terminateAppInstanceOpConfig) {
    this.terminateAppInstanceOpConfig = terminateAppInstanceOpConfig;
  }


  public AppD transportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
    return this;
  }

  public AppD addTransportDependenciesItem(TransportDependency transportDependenciesItem) {
    if (this.transportDependencies == null) {
      this.transportDependencies = new ArrayList<>();
    }
    this.transportDependencies.add(transportDependenciesItem);
    return this;
  }

  /**
   * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.
   * @return transportDependencies
   */
  @javax.annotation.Nullable
  public List<TransportDependency> getTransportDependencies() {
    return transportDependencies;
  }

  public void setTransportDependencies(List<TransportDependency> transportDependencies) {
    this.transportDependencies = transportDependencies;
  }


  public AppD virtualComputeDescriptor(String virtualComputeDescriptor) {
    this.virtualComputeDescriptor = virtualComputeDescriptor;
    return this;
  }

  /**
   * Ref NFV
   * @return virtualComputeDescriptor
   */
  @javax.annotation.Nonnull
  public String getVirtualComputeDescriptor() {
    return virtualComputeDescriptor;
  }

  public void setVirtualComputeDescriptor(String virtualComputeDescriptor) {
    this.virtualComputeDescriptor = virtualComputeDescriptor;
  }


  public AppD virtualStorageDescriptor(List<String> virtualStorageDescriptor) {
    this.virtualStorageDescriptor = virtualStorageDescriptor;
    return this;
  }

  public AppD addVirtualStorageDescriptorItem(String virtualStorageDescriptorItem) {
    if (this.virtualStorageDescriptor == null) {
      this.virtualStorageDescriptor = new ArrayList<>();
    }
    this.virtualStorageDescriptor.add(virtualStorageDescriptorItem);
    return this;
  }

  /**
   * Defines descriptors of virtual storage resources to be used by the MEC application.
   * @return virtualStorageDescriptor
   */
  @javax.annotation.Nullable
  public List<String> getVirtualStorageDescriptor() {
    return virtualStorageDescriptor;
  }

  public void setVirtualStorageDescriptor(List<String> virtualStorageDescriptor) {
    this.virtualStorageDescriptor = virtualStorageDescriptor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppD appD = (AppD) o;
    return Objects.equals(this.appDId, appD.appDId) &&
        Objects.equals(this.appDNSRule, appD.appDNSRule) &&
        Objects.equals(this.appDVersion, appD.appDVersion) &&
        Objects.equals(this.appDescription, appD.appDescription) &&
        Objects.equals(this.appExtCpd, appD.appExtCpd) &&
        Objects.equals(this.appFeatureOptional, appD.appFeatureOptional) &&
        Objects.equals(this.appFeatureRequired, appD.appFeatureRequired) &&
        Objects.equals(this.appInfoName, appD.appInfoName) &&
        Objects.equals(this.appLatency, appD.appLatency) &&
        Objects.equals(this.appName, appD.appName) &&
        Objects.equals(this.appProvider, appD.appProvider) &&
        Objects.equals(this.appServiceOptional, appD.appServiceOptional) &&
        Objects.equals(this.appServiceProduced, appD.appServiceProduced) &&
        Objects.equals(this.appServiceRequired, appD.appServiceRequired) &&
        Objects.equals(this.appSoftVersion, appD.appSoftVersion) &&
        Objects.equals(this.appTrafficRule, appD.appTrafficRule) &&
        Objects.equals(this.changeAppInstanceStateOpConfig, appD.changeAppInstanceStateOpConfig) &&
        Objects.equals(this.mecVersion, appD.mecVersion) &&
        Objects.equals(this.swImageDescriptor, appD.swImageDescriptor) &&
        Objects.equals(this.terminateAppInstanceOpConfig, appD.terminateAppInstanceOpConfig) &&
        Objects.equals(this.transportDependencies, appD.transportDependencies) &&
        Objects.equals(this.virtualComputeDescriptor, appD.virtualComputeDescriptor) &&
        Objects.equals(this.virtualStorageDescriptor, appD.virtualStorageDescriptor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appDId, appDNSRule, appDVersion, appDescription, appExtCpd, appFeatureOptional, appFeatureRequired, appInfoName, appLatency, appName, appProvider, appServiceOptional, appServiceProduced, appServiceRequired, appSoftVersion, appTrafficRule, changeAppInstanceStateOpConfig, mecVersion, swImageDescriptor, terminateAppInstanceOpConfig, transportDependencies, virtualComputeDescriptor, virtualStorageDescriptor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppD {\n");
    sb.append("    appDId: ").append(toIndentedString(appDId)).append("\n");
    sb.append("    appDNSRule: ").append(toIndentedString(appDNSRule)).append("\n");
    sb.append("    appDVersion: ").append(toIndentedString(appDVersion)).append("\n");
    sb.append("    appDescription: ").append(toIndentedString(appDescription)).append("\n");
    sb.append("    appExtCpd: ").append(toIndentedString(appExtCpd)).append("\n");
    sb.append("    appFeatureOptional: ").append(toIndentedString(appFeatureOptional)).append("\n");
    sb.append("    appFeatureRequired: ").append(toIndentedString(appFeatureRequired)).append("\n");
    sb.append("    appInfoName: ").append(toIndentedString(appInfoName)).append("\n");
    sb.append("    appLatency: ").append(toIndentedString(appLatency)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appProvider: ").append(toIndentedString(appProvider)).append("\n");
    sb.append("    appServiceOptional: ").append(toIndentedString(appServiceOptional)).append("\n");
    sb.append("    appServiceProduced: ").append(toIndentedString(appServiceProduced)).append("\n");
    sb.append("    appServiceRequired: ").append(toIndentedString(appServiceRequired)).append("\n");
    sb.append("    appSoftVersion: ").append(toIndentedString(appSoftVersion)).append("\n");
    sb.append("    appTrafficRule: ").append(toIndentedString(appTrafficRule)).append("\n");
    sb.append("    changeAppInstanceStateOpConfig: ").append(toIndentedString(changeAppInstanceStateOpConfig)).append("\n");
    sb.append("    mecVersion: ").append(toIndentedString(mecVersion)).append("\n");
    sb.append("    swImageDescriptor: ").append(toIndentedString(swImageDescriptor)).append("\n");
    sb.append("    terminateAppInstanceOpConfig: ").append(toIndentedString(terminateAppInstanceOpConfig)).append("\n");
    sb.append("    transportDependencies: ").append(toIndentedString(transportDependencies)).append("\n");
    sb.append("    virtualComputeDescriptor: ").append(toIndentedString(virtualComputeDescriptor)).append("\n");
    sb.append("    virtualStorageDescriptor: ").append(toIndentedString(virtualStorageDescriptor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appDId");
    openapiFields.add("appDNSRule");
    openapiFields.add("appDVersion");
    openapiFields.add("appDescription");
    openapiFields.add("appExtCpd");
    openapiFields.add("appFeatureOptional");
    openapiFields.add("appFeatureRequired");
    openapiFields.add("appInfoName");
    openapiFields.add("appLatency");
    openapiFields.add("appName");
    openapiFields.add("appProvider");
    openapiFields.add("appServiceOptional");
    openapiFields.add("appServiceProduced");
    openapiFields.add("appServiceRequired");
    openapiFields.add("appSoftVersion");
    openapiFields.add("appTrafficRule");
    openapiFields.add("changeAppInstanceStateOpConfig");
    openapiFields.add("mecVersion");
    openapiFields.add("swImageDescriptor");
    openapiFields.add("terminateAppInstanceOpConfig");
    openapiFields.add("transportDependencies");
    openapiFields.add("virtualComputeDescriptor");
    openapiFields.add("virtualStorageDescriptor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appDId");
    openapiRequiredFields.add("appDVersion");
    openapiRequiredFields.add("appDescription");
    openapiRequiredFields.add("appName");
    openapiRequiredFields.add("appProvider");
    openapiRequiredFields.add("appSoftVersion");
    openapiRequiredFields.add("mecVersion");
    openapiRequiredFields.add("swImageDescriptor");
    openapiRequiredFields.add("virtualComputeDescriptor");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppD
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppD.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppD is not found in the empty JSON string", AppD.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppD.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppD` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppD.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appDId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDId").toString()));
      }
      if (jsonObj.get("appDNSRule") != null && !jsonObj.get("appDNSRule").isJsonNull()) {
        JsonArray jsonArrayappDNSRule = jsonObj.getAsJsonArray("appDNSRule");
        if (jsonArrayappDNSRule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appDNSRule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appDNSRule` to be an array in the JSON string but got `%s`", jsonObj.get("appDNSRule").toString()));
          }

          // validate the optional field `appDNSRule` (array)
          for (int i = 0; i < jsonArrayappDNSRule.size(); i++) {
            DNSRuleDescriptor.validateJsonElement(jsonArrayappDNSRule.get(i));
          };
        }
      }
      if (!jsonObj.get("appDVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDVersion").toString()));
      }
      if (!jsonObj.get("appDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDescription").toString()));
      }
      if (jsonObj.get("appExtCpd") != null && !jsonObj.get("appExtCpd").isJsonNull()) {
        JsonArray jsonArrayappExtCpd = jsonObj.getAsJsonArray("appExtCpd");
        if (jsonArrayappExtCpd != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appExtCpd").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appExtCpd` to be an array in the JSON string but got `%s`", jsonObj.get("appExtCpd").toString()));
          }

          // validate the optional field `appExtCpd` (array)
          for (int i = 0; i < jsonArrayappExtCpd.size(); i++) {
            AppExternalCpd.validateJsonElement(jsonArrayappExtCpd.get(i));
          };
        }
      }
      if (jsonObj.get("appFeatureOptional") != null && !jsonObj.get("appFeatureOptional").isJsonNull()) {
        JsonArray jsonArrayappFeatureOptional = jsonObj.getAsJsonArray("appFeatureOptional");
        if (jsonArrayappFeatureOptional != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appFeatureOptional").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appFeatureOptional` to be an array in the JSON string but got `%s`", jsonObj.get("appFeatureOptional").toString()));
          }

          // validate the optional field `appFeatureOptional` (array)
          for (int i = 0; i < jsonArrayappFeatureOptional.size(); i++) {
            FeatureDependency.validateJsonElement(jsonArrayappFeatureOptional.get(i));
          };
        }
      }
      if (jsonObj.get("appFeatureRequired") != null && !jsonObj.get("appFeatureRequired").isJsonNull()) {
        JsonArray jsonArrayappFeatureRequired = jsonObj.getAsJsonArray("appFeatureRequired");
        if (jsonArrayappFeatureRequired != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appFeatureRequired").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appFeatureRequired` to be an array in the JSON string but got `%s`", jsonObj.get("appFeatureRequired").toString()));
          }

          // validate the optional field `appFeatureRequired` (array)
          for (int i = 0; i < jsonArrayappFeatureRequired.size(); i++) {
            FeatureDependency.validateJsonElement(jsonArrayappFeatureRequired.get(i));
          };
        }
      }
      if ((jsonObj.get("appInfoName") != null && !jsonObj.get("appInfoName").isJsonNull()) && !jsonObj.get("appInfoName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appInfoName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appInfoName").toString()));
      }
      // validate the optional field `appLatency`
      if (jsonObj.get("appLatency") != null && !jsonObj.get("appLatency").isJsonNull()) {
        LatencyDescriptor.validateJsonElement(jsonObj.get("appLatency"));
      }
      if (!jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if (!jsonObj.get("appProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appProvider").toString()));
      }
      if (jsonObj.get("appServiceOptional") != null && !jsonObj.get("appServiceOptional").isJsonNull()) {
        JsonArray jsonArrayappServiceOptional = jsonObj.getAsJsonArray("appServiceOptional");
        if (jsonArrayappServiceOptional != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appServiceOptional").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appServiceOptional` to be an array in the JSON string but got `%s`", jsonObj.get("appServiceOptional").toString()));
          }

          // validate the optional field `appServiceOptional` (array)
          for (int i = 0; i < jsonArrayappServiceOptional.size(); i++) {
            ServiceDependency.validateJsonElement(jsonArrayappServiceOptional.get(i));
          };
        }
      }
      if (jsonObj.get("appServiceProduced") != null && !jsonObj.get("appServiceProduced").isJsonNull()) {
        JsonArray jsonArrayappServiceProduced = jsonObj.getAsJsonArray("appServiceProduced");
        if (jsonArrayappServiceProduced != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appServiceProduced").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appServiceProduced` to be an array in the JSON string but got `%s`", jsonObj.get("appServiceProduced").toString()));
          }

          // validate the optional field `appServiceProduced` (array)
          for (int i = 0; i < jsonArrayappServiceProduced.size(); i++) {
            ServiceDescriptor.validateJsonElement(jsonArrayappServiceProduced.get(i));
          };
        }
      }
      if (jsonObj.get("appServiceRequired") != null && !jsonObj.get("appServiceRequired").isJsonNull()) {
        JsonArray jsonArrayappServiceRequired = jsonObj.getAsJsonArray("appServiceRequired");
        if (jsonArrayappServiceRequired != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appServiceRequired").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appServiceRequired` to be an array in the JSON string but got `%s`", jsonObj.get("appServiceRequired").toString()));
          }

          // validate the optional field `appServiceRequired` (array)
          for (int i = 0; i < jsonArrayappServiceRequired.size(); i++) {
            ServiceDependency.validateJsonElement(jsonArrayappServiceRequired.get(i));
          };
        }
      }
      if (!jsonObj.get("appSoftVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSoftVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSoftVersion").toString()));
      }
      if (jsonObj.get("appTrafficRule") != null && !jsonObj.get("appTrafficRule").isJsonNull()) {
        JsonArray jsonArrayappTrafficRule = jsonObj.getAsJsonArray("appTrafficRule");
        if (jsonArrayappTrafficRule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appTrafficRule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appTrafficRule` to be an array in the JSON string but got `%s`", jsonObj.get("appTrafficRule").toString()));
          }

          // validate the optional field `appTrafficRule` (array)
          for (int i = 0; i < jsonArrayappTrafficRule.size(); i++) {
            TrafficRuleDescriptor.validateJsonElement(jsonArrayappTrafficRule.get(i));
          };
        }
      }
      if ((jsonObj.get("changeAppInstanceStateOpConfig") != null && !jsonObj.get("changeAppInstanceStateOpConfig").isJsonNull()) && !jsonObj.get("changeAppInstanceStateOpConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeAppInstanceStateOpConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeAppInstanceStateOpConfig").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("mecVersion") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mecVersion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mecVersion` to be an array in the JSON string but got `%s`", jsonObj.get("mecVersion").toString()));
      }
      if (!jsonObj.get("swImageDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swImageDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swImageDescriptor").toString()));
      }
      if ((jsonObj.get("terminateAppInstanceOpConfig") != null && !jsonObj.get("terminateAppInstanceOpConfig").isJsonNull()) && !jsonObj.get("terminateAppInstanceOpConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminateAppInstanceOpConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminateAppInstanceOpConfig").toString()));
      }
      if (jsonObj.get("transportDependencies") != null && !jsonObj.get("transportDependencies").isJsonNull()) {
        JsonArray jsonArraytransportDependencies = jsonObj.getAsJsonArray("transportDependencies");
        if (jsonArraytransportDependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transportDependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transportDependencies` to be an array in the JSON string but got `%s`", jsonObj.get("transportDependencies").toString()));
          }

          // validate the optional field `transportDependencies` (array)
          for (int i = 0; i < jsonArraytransportDependencies.size(); i++) {
            TransportDependency.validateJsonElement(jsonArraytransportDependencies.get(i));
          };
        }
      }
      if (!jsonObj.get("virtualComputeDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualComputeDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualComputeDescriptor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("virtualStorageDescriptor") != null && !jsonObj.get("virtualStorageDescriptor").isJsonNull() && !jsonObj.get("virtualStorageDescriptor").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualStorageDescriptor` to be an array in the JSON string but got `%s`", jsonObj.get("virtualStorageDescriptor").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppD.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppD' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppD> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppD.class));

       return (TypeAdapter<T>) new TypeAdapter<AppD>() {
           @Override
           public void write(JsonWriter out, AppD value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppD read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppD given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppD
   * @throws IOException if the JSON string is invalid with respect to AppD
   */
  public static AppD fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppD.class);
  }

  /**
   * Convert an instance of AppD to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

