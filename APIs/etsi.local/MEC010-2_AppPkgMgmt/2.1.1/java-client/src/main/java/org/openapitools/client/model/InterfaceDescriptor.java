/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InterfaceType;
import org.openapitools.client.model.TunnelInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InterfaceDescriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InterfaceDescriptor {
  public static final String SERIALIZED_NAME_DST_I_P_ADDRESS = "dstIPAddress";
  @SerializedName(SERIALIZED_NAME_DST_I_P_ADDRESS)
  private String dstIPAddress;

  public static final String SERIALIZED_NAME_DST_M_A_C_ADDRESS = "dstMACAddress";
  @SerializedName(SERIALIZED_NAME_DST_M_A_C_ADDRESS)
  private String dstMACAddress;

  public static final String SERIALIZED_NAME_INTERFACE_TYPE = "interfaceType";
  @SerializedName(SERIALIZED_NAME_INTERFACE_TYPE)
  private InterfaceType interfaceType;

  public static final String SERIALIZED_NAME_SRC_M_A_C_ADDRESS = "srcMACAddress";
  @SerializedName(SERIALIZED_NAME_SRC_M_A_C_ADDRESS)
  private String srcMACAddress;

  public static final String SERIALIZED_NAME_TUNNEL_INFO = "tunnelInfo";
  @SerializedName(SERIALIZED_NAME_TUNNEL_INFO)
  private TunnelInfo tunnelInfo;

  public InterfaceDescriptor() {
  }

  public InterfaceDescriptor dstIPAddress(String dstIPAddress) {
    this.dstIPAddress = dstIPAddress;
    return this;
  }

  /**
   * If the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.
   * @return dstIPAddress
   */
  @javax.annotation.Nullable
  public String getDstIPAddress() {
    return dstIPAddress;
  }

  public void setDstIPAddress(String dstIPAddress) {
    this.dstIPAddress = dstIPAddress;
  }


  public InterfaceDescriptor dstMACAddress(String dstMACAddress) {
    this.dstMACAddress = dstMACAddress;
    return this;
  }

  /**
   * If the interface type is MAC, the destination address identifies the MAC address of the destination. Only used for dstInterface.
   * @return dstMACAddress
   */
  @javax.annotation.Nullable
  public String getDstMACAddress() {
    return dstMACAddress;
  }

  public void setDstMACAddress(String dstMACAddress) {
    this.dstMACAddress = dstMACAddress;
  }


  public InterfaceDescriptor interfaceType(InterfaceType interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

  /**
   * Get interfaceType
   * @return interfaceType
   */
  @javax.annotation.Nonnull
  public InterfaceType getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(InterfaceType interfaceType) {
    this.interfaceType = interfaceType;
  }


  public InterfaceDescriptor srcMACAddress(String srcMACAddress) {
    this.srcMACAddress = srcMACAddress;
    return this;
  }

  /**
   * If the interface type is MAC, the source address identifies the MAC address of the interface.
   * @return srcMACAddress
   */
  @javax.annotation.Nullable
  public String getSrcMACAddress() {
    return srcMACAddress;
  }

  public void setSrcMACAddress(String srcMACAddress) {
    this.srcMACAddress = srcMACAddress;
  }


  public InterfaceDescriptor tunnelInfo(TunnelInfo tunnelInfo) {
    this.tunnelInfo = tunnelInfo;
    return this;
  }

  /**
   * Get tunnelInfo
   * @return tunnelInfo
   */
  @javax.annotation.Nullable
  public TunnelInfo getTunnelInfo() {
    return tunnelInfo;
  }

  public void setTunnelInfo(TunnelInfo tunnelInfo) {
    this.tunnelInfo = tunnelInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterfaceDescriptor interfaceDescriptor = (InterfaceDescriptor) o;
    return Objects.equals(this.dstIPAddress, interfaceDescriptor.dstIPAddress) &&
        Objects.equals(this.dstMACAddress, interfaceDescriptor.dstMACAddress) &&
        Objects.equals(this.interfaceType, interfaceDescriptor.interfaceType) &&
        Objects.equals(this.srcMACAddress, interfaceDescriptor.srcMACAddress) &&
        Objects.equals(this.tunnelInfo, interfaceDescriptor.tunnelInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dstIPAddress, dstMACAddress, interfaceType, srcMACAddress, tunnelInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterfaceDescriptor {\n");
    sb.append("    dstIPAddress: ").append(toIndentedString(dstIPAddress)).append("\n");
    sb.append("    dstMACAddress: ").append(toIndentedString(dstMACAddress)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    srcMACAddress: ").append(toIndentedString(srcMACAddress)).append("\n");
    sb.append("    tunnelInfo: ").append(toIndentedString(tunnelInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dstIPAddress");
    openapiFields.add("dstMACAddress");
    openapiFields.add("interfaceType");
    openapiFields.add("srcMACAddress");
    openapiFields.add("tunnelInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("interfaceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InterfaceDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InterfaceDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InterfaceDescriptor is not found in the empty JSON string", InterfaceDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InterfaceDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InterfaceDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InterfaceDescriptor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dstIPAddress") != null && !jsonObj.get("dstIPAddress").isJsonNull()) && !jsonObj.get("dstIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dstIPAddress").toString()));
      }
      if ((jsonObj.get("dstMACAddress") != null && !jsonObj.get("dstMACAddress").isJsonNull()) && !jsonObj.get("dstMACAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstMACAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dstMACAddress").toString()));
      }
      // validate the required field `interfaceType`
      InterfaceType.validateJsonElement(jsonObj.get("interfaceType"));
      if ((jsonObj.get("srcMACAddress") != null && !jsonObj.get("srcMACAddress").isJsonNull()) && !jsonObj.get("srcMACAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcMACAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcMACAddress").toString()));
      }
      // validate the optional field `tunnelInfo`
      if (jsonObj.get("tunnelInfo") != null && !jsonObj.get("tunnelInfo").isJsonNull()) {
        TunnelInfo.validateJsonElement(jsonObj.get("tunnelInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InterfaceDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InterfaceDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InterfaceDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InterfaceDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<InterfaceDescriptor>() {
           @Override
           public void write(JsonWriter out, InterfaceDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InterfaceDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InterfaceDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InterfaceDescriptor
   * @throws IOException if the JSON string is invalid with respect to InterfaceDescriptor
   */
  public static InterfaceDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InterfaceDescriptor.class);
  }

  /**
   * Convert an instance of InterfaceDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

