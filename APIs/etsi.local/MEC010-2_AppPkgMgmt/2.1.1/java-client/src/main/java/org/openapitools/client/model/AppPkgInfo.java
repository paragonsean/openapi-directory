/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AppPkgInfoLinks;
import org.openapitools.client.model.AppPkgOperationalState;
import org.openapitools.client.model.Checksum;
import org.openapitools.client.model.OnboardingState;
import org.openapitools.client.model.UsageState;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#39;The data type AppPkgInfo represents the parameters for an application package resource&#39;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppPkgInfo {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private AppPkgInfoLinks links;

  public static final String SERIALIZED_NAME_ADDITIONAL_ARTIFACTS = "additionalArtifacts";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_ARTIFACTS)
  private Object additionalArtifacts = null;

  public static final String SERIALIZED_NAME_APP_D_ID = "appDId";
  @SerializedName(SERIALIZED_NAME_APP_D_ID)
  private String appDId;

  public static final String SERIALIZED_NAME_APP_D_VERSION = "appDVersion";
  @SerializedName(SERIALIZED_NAME_APP_D_VERSION)
  private String appDVersion;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_APP_PROVIDER = "appProvider";
  @SerializedName(SERIALIZED_NAME_APP_PROVIDER)
  private String appProvider;

  public static final String SERIALIZED_NAME_APP_SOFTWARE_VERSION = "appSoftwareVersion";
  @SerializedName(SERIALIZED_NAME_APP_SOFTWARE_VERSION)
  private String appSoftwareVersion;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private Checksum checksum;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ONBOARDING_STATE = "onboardingState";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_STATE)
  private OnboardingState onboardingState;

  public static final String SERIALIZED_NAME_OPERATIONAL_STATE = "operationalState";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATE)
  private AppPkgOperationalState operationalState;

  public static final String SERIALIZED_NAME_SOFTWARE_IMAGES = "softwareImages";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_IMAGES)
  private Object softwareImages = null;

  public static final String SERIALIZED_NAME_USAGE_STATE = "usageState";
  @SerializedName(SERIALIZED_NAME_USAGE_STATE)
  private UsageState usageState;

  public static final String SERIALIZED_NAME_USER_DEFINED_DATA = "userDefinedData";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_DATA)
  private Map<String, Object> userDefinedData = new HashMap<>();

  public AppPkgInfo() {
  }

  public AppPkgInfo links(AppPkgInfoLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public AppPkgInfoLinks getLinks() {
    return links;
  }

  public void setLinks(AppPkgInfoLinks links) {
    this.links = links;
  }


  public AppPkgInfo additionalArtifacts(Object additionalArtifacts) {
    this.additionalArtifacts = additionalArtifacts;
    return this;
  }

  /**
   * Additional information of application package artifacts that are not application software images. Type is TBD
   * @return additionalArtifacts
   */
  @javax.annotation.Nullable
  public Object getAdditionalArtifacts() {
    return additionalArtifacts;
  }

  public void setAdditionalArtifacts(Object additionalArtifacts) {
    this.additionalArtifacts = additionalArtifacts;
  }


  public AppPkgInfo appDId(String appDId) {
    this.appDId = appDId;
    return this;
  }

  /**
   * Identifier of this MEC application descriptor. This attribute shall be globally unique.
   * @return appDId
   */
  @javax.annotation.Nonnull
  public String getAppDId() {
    return appDId;
  }

  public void setAppDId(String appDId) {
    this.appDId = appDId;
  }


  public AppPkgInfo appDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
    return this;
  }

  /**
   * Identifies the version of the application descriptor.
   * @return appDVersion
   */
  @javax.annotation.Nonnull
  public String getAppDVersion() {
    return appDVersion;
  }

  public void setAppDVersion(String appDVersion) {
    this.appDVersion = appDVersion;
  }


  public AppPkgInfo appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Name to identify the MEC application.
   * @return appName
   */
  @javax.annotation.Nonnull
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public AppPkgInfo appProvider(String appProvider) {
    this.appProvider = appProvider;
    return this;
  }

  /**
   * Provider of the application and of the AppD.
   * @return appProvider
   */
  @javax.annotation.Nullable
  public String getAppProvider() {
    return appProvider;
  }

  public void setAppProvider(String appProvider) {
    this.appProvider = appProvider;
  }


  public AppPkgInfo appSoftwareVersion(String appSoftwareVersion) {
    this.appSoftwareVersion = appSoftwareVersion;
    return this;
  }

  /**
   * Software version of the application. This is updated when there is any change to the software in the onboarded application package.
   * @return appSoftwareVersion
   */
  @javax.annotation.Nonnull
  public String getAppSoftwareVersion() {
    return appSoftwareVersion;
  }

  public void setAppSoftwareVersion(String appSoftwareVersion) {
    this.appSoftwareVersion = appSoftwareVersion;
  }


  public AppPkgInfo checksum(Checksum checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nonnull
  public Checksum getChecksum() {
    return checksum;
  }

  public void setChecksum(Checksum checksum) {
    this.checksum = checksum;
  }


  public AppPkgInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the onboarded application package.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppPkgInfo onboardingState(OnboardingState onboardingState) {
    this.onboardingState = onboardingState;
    return this;
  }

  /**
   * Get onboardingState
   * @return onboardingState
   */
  @javax.annotation.Nonnull
  public OnboardingState getOnboardingState() {
    return onboardingState;
  }

  public void setOnboardingState(OnboardingState onboardingState) {
    this.onboardingState = onboardingState;
  }


  public AppPkgInfo operationalState(AppPkgOperationalState operationalState) {
    this.operationalState = operationalState;
    return this;
  }

  /**
   * Get operationalState
   * @return operationalState
   */
  @javax.annotation.Nonnull
  public AppPkgOperationalState getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(AppPkgOperationalState operationalState) {
    this.operationalState = operationalState;
  }


  public AppPkgInfo softwareImages(Object softwareImages) {
    this.softwareImages = softwareImages;
    return this;
  }

  /**
   * Information of application software image in application package. Type is TBD
   * @return softwareImages
   */
  @javax.annotation.Nullable
  public Object getSoftwareImages() {
    return softwareImages;
  }

  public void setSoftwareImages(Object softwareImages) {
    this.softwareImages = softwareImages;
  }


  public AppPkgInfo usageState(UsageState usageState) {
    this.usageState = usageState;
    return this;
  }

  /**
   * Get usageState
   * @return usageState
   */
  @javax.annotation.Nonnull
  public UsageState getUsageState() {
    return usageState;
  }

  public void setUsageState(UsageState usageState) {
    this.usageState = usageState;
  }


  public AppPkgInfo userDefinedData(Map<String, Object> userDefinedData) {
    this.userDefinedData = userDefinedData;
    return this;
  }

  public AppPkgInfo putUserDefinedDataItem(String key, Object userDefinedDataItem) {
    if (this.userDefinedData == null) {
      this.userDefinedData = new HashMap<>();
    }
    this.userDefinedData.put(key, userDefinedDataItem);
    return this;
  }

  /**
   * &#39;This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259&#39;
   * @return userDefinedData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUserDefinedData() {
    return userDefinedData;
  }

  public void setUserDefinedData(Map<String, Object> userDefinedData) {
    this.userDefinedData = userDefinedData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPkgInfo appPkgInfo = (AppPkgInfo) o;
    return Objects.equals(this.links, appPkgInfo.links) &&
        Objects.equals(this.additionalArtifacts, appPkgInfo.additionalArtifacts) &&
        Objects.equals(this.appDId, appPkgInfo.appDId) &&
        Objects.equals(this.appDVersion, appPkgInfo.appDVersion) &&
        Objects.equals(this.appName, appPkgInfo.appName) &&
        Objects.equals(this.appProvider, appPkgInfo.appProvider) &&
        Objects.equals(this.appSoftwareVersion, appPkgInfo.appSoftwareVersion) &&
        Objects.equals(this.checksum, appPkgInfo.checksum) &&
        Objects.equals(this.id, appPkgInfo.id) &&
        Objects.equals(this.onboardingState, appPkgInfo.onboardingState) &&
        Objects.equals(this.operationalState, appPkgInfo.operationalState) &&
        Objects.equals(this.softwareImages, appPkgInfo.softwareImages) &&
        Objects.equals(this.usageState, appPkgInfo.usageState) &&
        Objects.equals(this.userDefinedData, appPkgInfo.userDefinedData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, additionalArtifacts, appDId, appDVersion, appName, appProvider, appSoftwareVersion, checksum, id, onboardingState, operationalState, softwareImages, usageState, userDefinedData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPkgInfo {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalArtifacts: ").append(toIndentedString(additionalArtifacts)).append("\n");
    sb.append("    appDId: ").append(toIndentedString(appDId)).append("\n");
    sb.append("    appDVersion: ").append(toIndentedString(appDVersion)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    appProvider: ").append(toIndentedString(appProvider)).append("\n");
    sb.append("    appSoftwareVersion: ").append(toIndentedString(appSoftwareVersion)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    onboardingState: ").append(toIndentedString(onboardingState)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    softwareImages: ").append(toIndentedString(softwareImages)).append("\n");
    sb.append("    usageState: ").append(toIndentedString(usageState)).append("\n");
    sb.append("    userDefinedData: ").append(toIndentedString(userDefinedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("additionalArtifacts");
    openapiFields.add("appDId");
    openapiFields.add("appDVersion");
    openapiFields.add("appName");
    openapiFields.add("appProvider");
    openapiFields.add("appSoftwareVersion");
    openapiFields.add("checksum");
    openapiFields.add("id");
    openapiFields.add("onboardingState");
    openapiFields.add("operationalState");
    openapiFields.add("softwareImages");
    openapiFields.add("usageState");
    openapiFields.add("userDefinedData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("appDId");
    openapiRequiredFields.add("appDVersion");
    openapiRequiredFields.add("appName");
    openapiRequiredFields.add("appSoftwareVersion");
    openapiRequiredFields.add("checksum");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("onboardingState");
    openapiRequiredFields.add("operationalState");
    openapiRequiredFields.add("softwareImages");
    openapiRequiredFields.add("usageState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppPkgInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppPkgInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPkgInfo is not found in the empty JSON string", AppPkgInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppPkgInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPkgInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppPkgInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `_links`
      AppPkgInfoLinks.validateJsonElement(jsonObj.get("_links"));
      if (!jsonObj.get("appDId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDId").toString()));
      }
      if (!jsonObj.get("appDVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDVersion").toString()));
      }
      if (!jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("appProvider") != null && !jsonObj.get("appProvider").isJsonNull()) && !jsonObj.get("appProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appProvider").toString()));
      }
      if (!jsonObj.get("appSoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appSoftwareVersion").toString()));
      }
      // validate the required field `checksum`
      Checksum.validateJsonElement(jsonObj.get("checksum"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `onboardingState`
      OnboardingState.validateJsonElement(jsonObj.get("onboardingState"));
      // validate the required field `operationalState`
      AppPkgOperationalState.validateJsonElement(jsonObj.get("operationalState"));
      // validate the required field `usageState`
      UsageState.validateJsonElement(jsonObj.get("usageState"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPkgInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPkgInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPkgInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPkgInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPkgInfo>() {
           @Override
           public void write(JsonWriter out, AppPkgInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPkgInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppPkgInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppPkgInfo
   * @throws IOException if the JSON string is invalid with respect to AppPkgInfo
   */
  public static AppPkgInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPkgInfo.class);
  }

  /**
   * Convert an instance of AppPkgInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

