/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppD;
import org.openapitools.client.model.AppPkgInfo;
import org.openapitools.client.model.AppPkgInfoModifications;
import org.openapitools.client.model.AppPkgSubscription;
import org.openapitools.client.model.AppPkgSubscriptionInfo;
import org.openapitools.client.model.AppPkgSubscriptionLinkList;
import org.openapitools.client.model.CreateAppPkg;
import java.io.File;
import org.openapitools.client.model.ProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppPkgmApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppPkgmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppPkgmApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appDGET
     * @param appDId Identifier of an application descriptor (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDGETCall(String appDId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarded_app_packages/{appDId}/appd"
            .replace("{" + "appDId" + "}", localVarApiClient.escapeString(appDId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (allFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_fields", allFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (excludeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_fields", excludeFields));
        }

        if (excludeDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_default", excludeDefault));
        }

        final String[] localVarAccepts = {
            "application/zip",
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appDGETValidateBeforeCall(String appDId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appDId' is set
        if (appDId == null) {
            throw new ApiException("Missing the required parameter 'appDId' when calling appDGET(Async)");
        }

        return appDGETCall(appDId, filter, allFields, fields, excludeFields, excludeDefault, _callback);

    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appDId Identifier of an application descriptor (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return AppD
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppD appDGET(String appDId, String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        ApiResponse<AppD> localVarResp = appDGETWithHttpInfo(appDId, filter, allFields, fields, excludeFields, excludeDefault);
        return localVarResp.getData();
    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appDId Identifier of an application descriptor (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return ApiResponse&lt;AppD&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppD> appDGETWithHttpInfo(String appDId, String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        okhttp3.Call localVarCall = appDGETValidateBeforeCall(appDId, filter, allFields, fields, excludeFields, excludeDefault, null);
        Type localVarReturnType = new TypeToken<AppD>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources. (asynchronously)
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appDId Identifier of an application descriptor (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDGETAsync(String appDId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback<AppD> _callback) throws ApiException {

        okhttp3.Call localVarCall = appDGETValidateBeforeCall(appDId, filter, allFields, fields, excludeFields, excludeDefault, _callback);
        Type localVarReturnType = new TypeToken<AppD>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appDIdGET
     * @param appDId Identifier of an application descriptor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDIdGETCall(String appDId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/onboarded_app_packages/{appDId}/package_content"
            .replace("{" + "appDId" + "}", localVarApiClient.escapeString(appDId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appDIdGETValidateBeforeCall(String appDId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appDId' is set
        if (appDId == null) {
            throw new ApiException("Missing the required parameter 'appDId' when calling appDIdGET(Async)");
        }

        return appDIdGETCall(appDId, _callback);

    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appDId Identifier of an application descriptor (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void appDIdGET(String appDId) throws ApiException {
        appDIdGETWithHttpInfo(appDId);
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appDId Identifier of an application descriptor (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appDIdGETWithHttpInfo(String appDId) throws ApiException {
        okhttp3.Call localVarCall = appDIdGETValidateBeforeCall(appDId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId. (asynchronously)
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appDId Identifier of an application descriptor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDIdGETAsync(String appDId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appDIdGETValidateBeforeCall(appDId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appDIdPUT
     * @param appDId Identifier of an application descriptor (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDIdPUTCall(String appDId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/onboarded_app_packages/{appDId}/package_content"
            .replace("{" + "appDId" + "}", localVarApiClient.escapeString(appDId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/zip"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appDIdPUTValidateBeforeCall(String appDId, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appDId' is set
        if (appDId == null) {
            throw new ApiException("Missing the required parameter 'appDId' when calling appDIdPUT(Async)");
        }

        return appDIdPUTCall(appDId, body, _callback);

    }

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param appDId Identifier of an application descriptor (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void appDIdPUT(String appDId, File body) throws ApiException {
        appDIdPUTWithHttpInfo(appDId, body);
    }

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param appDId Identifier of an application descriptor (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appDIdPUTWithHttpInfo(String appDId, File body) throws ApiException {
        okhttp3.Call localVarCall = appDIdPUTValidateBeforeCall(appDId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Uploads the content of application package. (asynchronously)
     * Uploads the content of application package.
     * @param appDId Identifier of an application descriptor (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDIdPUTAsync(String appDId, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appDIdPUTValidateBeforeCall(appDId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPackageDELETE
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackageDELETECall(String appPkgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPackageDELETEValidateBeforeCall(String appPkgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPackageDELETE(Async)");
        }

        return appPackageDELETECall(appPkgId, _callback);

    }

    /**
     * Deletes an individual application package resources
     * Deletes an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void appPackageDELETE(String appPkgId) throws ApiException {
        appPackageDELETEWithHttpInfo(appPkgId);
    }

    /**
     * Deletes an individual application package resources
     * Deletes an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appPackageDELETEWithHttpInfo(String appPkgId) throws ApiException {
        okhttp3.Call localVarCall = appPackageDELETEValidateBeforeCall(appPkgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an individual application package resources (asynchronously)
     * Deletes an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackageDELETEAsync(String appPkgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPackageDELETEValidateBeforeCall(appPkgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPackageGET
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackageGETCall(String appPkgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPackageGETValidateBeforeCall(String appPkgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPackageGET(Async)");
        }

        return appPackageGETCall(appPkgId, _callback);

    }

    /**
     * Queries the information related to individual application package resources
     * Queries the information related to individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @return AppPkgInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppPkgInfo appPackageGET(String appPkgId) throws ApiException {
        ApiResponse<AppPkgInfo> localVarResp = appPackageGETWithHttpInfo(appPkgId);
        return localVarResp.getData();
    }

    /**
     * Queries the information related to individual application package resources
     * Queries the information related to individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @return ApiResponse&lt;AppPkgInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPkgInfo> appPackageGETWithHttpInfo(String appPkgId) throws ApiException {
        okhttp3.Call localVarCall = appPackageGETValidateBeforeCall(appPkgId, null);
        Type localVarReturnType = new TypeToken<AppPkgInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queries the information related to individual application package resources (asynchronously)
     * Queries the information related to individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackageGETAsync(String appPkgId, final ApiCallback<AppPkgInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPackageGETValidateBeforeCall(appPkgId, _callback);
        Type localVarReturnType = new TypeToken<AppPkgInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPackagePATCH
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param appPkgInfoModifications Operational state to be set (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows that the operation has been completed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagePATCHCall(String appPkgId, AppPkgInfoModifications appPkgInfoModifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPkgInfoModifications;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPackagePATCHValidateBeforeCall(String appPkgId, AppPkgInfoModifications appPkgInfoModifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPackagePATCH(Async)");
        }

        // verify the required parameter 'appPkgInfoModifications' is set
        if (appPkgInfoModifications == null) {
            throw new ApiException("Missing the required parameter 'appPkgInfoModifications' when calling appPackagePATCH(Async)");
        }

        return appPackagePATCHCall(appPkgId, appPkgInfoModifications, _callback);

    }

    /**
     * Updates the operational state of an individual application package resource
     * Updates the operational state of an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param appPkgInfoModifications Operational state to be set (required)
     * @return AppPkgInfoModifications
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows that the operation has been completed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppPkgInfoModifications appPackagePATCH(String appPkgId, AppPkgInfoModifications appPkgInfoModifications) throws ApiException {
        ApiResponse<AppPkgInfoModifications> localVarResp = appPackagePATCHWithHttpInfo(appPkgId, appPkgInfoModifications);
        return localVarResp.getData();
    }

    /**
     * Updates the operational state of an individual application package resource
     * Updates the operational state of an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param appPkgInfoModifications Operational state to be set (required)
     * @return ApiResponse&lt;AppPkgInfoModifications&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows that the operation has been completed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPkgInfoModifications> appPackagePATCHWithHttpInfo(String appPkgId, AppPkgInfoModifications appPkgInfoModifications) throws ApiException {
        okhttp3.Call localVarCall = appPackagePATCHValidateBeforeCall(appPkgId, appPkgInfoModifications, null);
        Type localVarReturnType = new TypeToken<AppPkgInfoModifications>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the operational state of an individual application package resource (asynchronously)
     * Updates the operational state of an individual application package resources
     * @param appPkgId Identifier of an individual application package resource (required)
     * @param appPkgInfoModifications Operational state to be set (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Shows that the operation has been completed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagePATCHAsync(String appPkgId, AppPkgInfoModifications appPkgInfoModifications, final ApiCallback<AppPkgInfoModifications> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPackagePATCHValidateBeforeCall(appPkgId, appPkgInfoModifications, _callback);
        Type localVarReturnType = new TypeToken<AppPkgInfoModifications>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPackagesGET
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagesGETCall(String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app_packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (allFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_fields", allFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (excludeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_fields", excludeFields));
        }

        if (excludeDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_default", excludeDefault));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPackagesGETValidateBeforeCall(String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        return appPackagesGETCall(filter, allFields, fields, excludeFields, excludeDefault, _callback);

    }

    /**
     * Queries information relating to on-boarded application packages in the MEO
     * queries information relating to on-boarded application packages in the MEO
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return List&lt;AppPkgInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppPkgInfo> appPackagesGET(String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        ApiResponse<List<AppPkgInfo>> localVarResp = appPackagesGETWithHttpInfo(filter, allFields, fields, excludeFields, excludeDefault);
        return localVarResp.getData();
    }

    /**
     * Queries information relating to on-boarded application packages in the MEO
     * queries information relating to on-boarded application packages in the MEO
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return ApiResponse&lt;List&lt;AppPkgInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppPkgInfo>> appPackagesGETWithHttpInfo(String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        okhttp3.Call localVarCall = appPackagesGETValidateBeforeCall(filter, allFields, fields, excludeFields, excludeDefault, null);
        Type localVarReturnType = new TypeToken<List<AppPkgInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queries information relating to on-boarded application packages in the MEO (asynchronously)
     * queries information relating to on-boarded application packages in the MEO
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Contains a representation of the application package resource </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagesGETAsync(String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback<List<AppPkgInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPackagesGETValidateBeforeCall(filter, allFields, fields, excludeFields, excludeDefault, _callback);
        Type localVarReturnType = new TypeToken<List<AppPkgInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPackagesPOST
     * @param createAppPkg Resource to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for resource creation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagesPOSTCall(CreateAppPkg createAppPkg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppPkg;

        // create path and map variables
        String localVarPath = "/app_packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPackagesPOSTValidateBeforeCall(CreateAppPkg createAppPkg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAppPkg' is set
        if (createAppPkg == null) {
            throw new ApiException("Missing the required parameter 'createAppPkg' when calling appPackagesPOST(Async)");
        }

        return appPackagesPOSTCall(createAppPkg, _callback);

    }

    /**
     * Create a resource for on-boarding an application package to a MEO
     * Create a resource for on-boarding an application package to a MEO
     * @param createAppPkg Resource to be created (required)
     * @return List&lt;AppPkgInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for resource creation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppPkgInfo> appPackagesPOST(CreateAppPkg createAppPkg) throws ApiException {
        ApiResponse<List<AppPkgInfo>> localVarResp = appPackagesPOSTWithHttpInfo(createAppPkg);
        return localVarResp.getData();
    }

    /**
     * Create a resource for on-boarding an application package to a MEO
     * Create a resource for on-boarding an application package to a MEO
     * @param createAppPkg Resource to be created (required)
     * @return ApiResponse&lt;List&lt;AppPkgInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for resource creation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppPkgInfo>> appPackagesPOSTWithHttpInfo(CreateAppPkg createAppPkg) throws ApiException {
        okhttp3.Call localVarCall = appPackagesPOSTValidateBeforeCall(createAppPkg, null);
        Type localVarReturnType = new TypeToken<List<AppPkgInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a resource for on-boarding an application package to a MEO (asynchronously)
     * Create a resource for on-boarding an application package to a MEO
     * @param createAppPkg Resource to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for resource creation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPackagesPOSTAsync(CreateAppPkg createAppPkg, final ApiCallback<List<AppPkgInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPackagesPOSTValidateBeforeCall(createAppPkg, _callback);
        Type localVarReturnType = new TypeToken<List<AppPkgInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPkgGET
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgGETCall(String appPkgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}/package_content"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPkgGETValidateBeforeCall(String appPkgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPkgGET(Async)");
        }

        return appPkgGETCall(appPkgId, _callback);

    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void appPkgGET(String appPkgId) throws ApiException {
        appPkgGETWithHttpInfo(appPkgId);
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appPkgGETWithHttpInfo(String appPkgId) throws ApiException {
        okhttp3.Call localVarCall = appPkgGETValidateBeforeCall(appPkgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId. (asynchronously)
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD. </td><td>  -  </td></tr>
        <tr><td> 206 </td><td> Partial content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Range Not Satisfiable . </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgGETAsync(String appPkgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPkgGETValidateBeforeCall(appPkgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPkgIdGET
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgIdGETCall(String appPkgId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}/appd"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (allFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_fields", allFields));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (excludeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_fields", excludeFields));
        }

        if (excludeDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_default", excludeDefault));
        }

        final String[] localVarAccepts = {
            "application/zip",
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPkgIdGETValidateBeforeCall(String appPkgId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPkgIdGET(Async)");
        }

        return appPkgIdGETCall(appPkgId, filter, allFields, fields, excludeFields, excludeDefault, _callback);

    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return AppD
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppD appPkgIdGET(String appPkgId, String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        ApiResponse<AppD> localVarResp = appPkgIdGETWithHttpInfo(appPkgId, filter, allFields, fields, excludeFields, excludeDefault);
        return localVarResp.getData();
    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @return ApiResponse&lt;AppD&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppD> appPkgIdGETWithHttpInfo(String appPkgId, String filter, String allFields, String fields, String excludeFields, String excludeDefault) throws ApiException {
        okhttp3.Call localVarCall = appPkgIdGETValidateBeforeCall(appPkgId, filter, allFields, fields, excludeFields, excludeDefault, null);
        Type localVarReturnType = new TypeToken<AppD>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources. (asynchronously)
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param filter Attribute-based filtering parameters according to ETSI GS MEC 009 (optional)
     * @param allFields Include all complex attributes in the response. (optional)
     * @param fields Complex attributes of AppPkgInfo to be included into the response (optional)
     * @param excludeFields Complex attributes of AppPkgInfo to be excluded from the response. (optional)
     * @param excludeDefault Indicates to exclude the following complex attributes of AppPkgInfo from the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Content of the AppD is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgIdGETAsync(String appPkgId, String filter, String allFields, String fields, String excludeFields, String excludeDefault, final ApiCallback<AppD> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPkgIdGETValidateBeforeCall(appPkgId, filter, allFields, fields, excludeFields, excludeDefault, _callback);
        Type localVarReturnType = new TypeToken<AppD>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appPkgPUT
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgPUTCall(String appPkgId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/app_packages/{appPkgId}/package_content"
            .replace("{" + "appPkgId" + "}", localVarApiClient.escapeString(appPkgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/zip"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appPkgPUTValidateBeforeCall(String appPkgId, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgId' is set
        if (appPkgId == null) {
            throw new ApiException("Missing the required parameter 'appPkgId' when calling appPkgPUT(Async)");
        }

        return appPkgPUTCall(appPkgId, body, _callback);

    }

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void appPkgPUT(String appPkgId, File body) throws ApiException {
        appPkgPUTWithHttpInfo(appPkgId, body);
    }

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appPkgPUTWithHttpInfo(String appPkgId, File body) throws ApiException {
        okhttp3.Call localVarCall = appPkgPUTValidateBeforeCall(appPkgId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Uploads the content of application package. (asynchronously)
     * Uploads the content of application package.
     * @param appPkgId Identifier of an on-boarded individual application package (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The application package has been accepted for uploading, but the processing has not been completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appPkgPUTAsync(String appPkgId, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appPkgPUTValidateBeforeCall(appPkgId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for individualSubscriptionDELETE
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call individualSubscriptionDELETECall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call individualSubscriptionDELETEValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling individualSubscriptionDELETE(Async)");
        }

        return individualSubscriptionDELETECall(subscriptionId, _callback);

    }

    /**
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public void individualSubscriptionDELETE(String subscriptionId) throws ApiException {
        individualSubscriptionDELETEWithHttpInfo(subscriptionId);
    }

    /**
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> individualSubscriptionDELETEWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = individualSubscriptionDELETEValidateBeforeCall(subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the individual subscription to notifications about application package changes in MEO. (asynchronously)
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call individualSubscriptionDELETEAsync(String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = individualSubscriptionDELETEValidateBeforeCall(subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for individualSubscriptionGET
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Representation of the resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call individualSubscriptionGETCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call individualSubscriptionGETValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling individualSubscriptionGET(Async)");
        }

        return individualSubscriptionGETCall(subscriptionId, _callback);

    }

    /**
     * Used to represent an individual subscription to notifications about application package changes.
     * Used to represent an individual subscription to notifications about application package changes.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @return AppPkgSubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Representation of the resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppPkgSubscriptionInfo individualSubscriptionGET(String subscriptionId) throws ApiException {
        ApiResponse<AppPkgSubscriptionInfo> localVarResp = individualSubscriptionGETWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Used to represent an individual subscription to notifications about application package changes.
     * Used to represent an individual subscription to notifications about application package changes.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @return ApiResponse&lt;AppPkgSubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Representation of the resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPkgSubscriptionInfo> individualSubscriptionGETWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = individualSubscriptionGETValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Used to represent an individual subscription to notifications about application package changes. (asynchronously)
     * Used to represent an individual subscription to notifications about application package changes.
     * @param subscriptionId Identifier of an individual subscription to notifications about application package changes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Representation of the resource. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call individualSubscriptionGETAsync(String subscriptionId, final ApiCallback<AppPkgSubscriptionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = individualSubscriptionGETValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsGET
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of zero or more subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGETCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsGETValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return subscriptionsGETCall(_callback);

    }

    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     * @return AppPkgSubscriptionLinkList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of zero or more subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppPkgSubscriptionLinkList subscriptionsGET() throws ApiException {
        ApiResponse<AppPkgSubscriptionLinkList> localVarResp = subscriptionsGETWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     * @return ApiResponse&lt;AppPkgSubscriptionLinkList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of zero or more subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPkgSubscriptionLinkList> subscriptionsGETWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = subscriptionsGETValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionLinkList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO (asynchronously)
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of zero or more subscriptions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGETAsync(final ApiCallback<AppPkgSubscriptionLinkList> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsGETValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionLinkList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsPOST
     * @param appPkgSubscription The input parameters of subscribe operation to notifications (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for created subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsPOSTCall(AppPkgSubscription appPkgSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPkgSubscription;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsPOSTValidateBeforeCall(AppPkgSubscription appPkgSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appPkgSubscription' is set
        if (appPkgSubscription == null) {
            throw new ApiException("Missing the required parameter 'appPkgSubscription' when calling subscriptionsPOST(Async)");
        }

        return subscriptionsPOSTCall(appPkgSubscription, _callback);

    }

    /**
     * Subscribe to notifications about on-boarding an application package
     * Subscribe to notifications about on-boarding an application package
     * @param appPkgSubscription The input parameters of subscribe operation to notifications (required)
     * @return AppPkgSubscriptionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for created subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public AppPkgSubscriptionInfo subscriptionsPOST(AppPkgSubscription appPkgSubscription) throws ApiException {
        ApiResponse<AppPkgSubscriptionInfo> localVarResp = subscriptionsPOSTWithHttpInfo(appPkgSubscription);
        return localVarResp.getData();
    }

    /**
     * Subscribe to notifications about on-boarding an application package
     * Subscribe to notifications about on-boarding an application package
     * @param appPkgSubscription The input parameters of subscribe operation to notifications (required)
     * @return ApiResponse&lt;AppPkgSubscriptionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for created subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPkgSubscriptionInfo> subscriptionsPOSTWithHttpInfo(AppPkgSubscription appPkgSubscription) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsPOSTValidateBeforeCall(appPkgSubscription, null);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to notifications about on-boarding an application package (asynchronously)
     * Subscribe to notifications about on-boarding an application package
     * @param appPkgSubscription The input parameters of subscribe operation to notifications (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response for created subscription </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request : used to indicate that incorrect parameters were passed to the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized :  used when the client did not submit credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden :  operation is not allowed given the current status of the resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests : used when a rate limiter has triggered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsPOSTAsync(AppPkgSubscription appPkgSubscription, final ApiCallback<AppPkgSubscriptionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsPOSTValidateBeforeCall(appPkgSubscription, _callback);
        Type localVarReturnType = new TypeToken<AppPkgSubscriptionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
