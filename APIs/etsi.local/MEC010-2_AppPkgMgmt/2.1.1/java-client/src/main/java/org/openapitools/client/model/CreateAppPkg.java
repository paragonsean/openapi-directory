/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Checksum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAppPkg
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAppPkg {
  public static final String SERIALIZED_NAME_APP_PKG_NAME = "appPkgName";
  @SerializedName(SERIALIZED_NAME_APP_PKG_NAME)
  private String appPkgName;

  public static final String SERIALIZED_NAME_APP_PKG_PATH = "appPkgPath";
  @SerializedName(SERIALIZED_NAME_APP_PKG_PATH)
  private String appPkgPath;

  public static final String SERIALIZED_NAME_APP_PKG_VERSION = "appPkgVersion";
  @SerializedName(SERIALIZED_NAME_APP_PKG_VERSION)
  private String appPkgVersion;

  public static final String SERIALIZED_NAME_APP_PROVIDER = "appProvider";
  @SerializedName(SERIALIZED_NAME_APP_PROVIDER)
  private String appProvider;

  public static final String SERIALIZED_NAME_CHECKSUM = "checksum";
  @SerializedName(SERIALIZED_NAME_CHECKSUM)
  private Checksum checksum;

  public static final String SERIALIZED_NAME_USER_DEFINED_DATA = "userDefinedData";
  @SerializedName(SERIALIZED_NAME_USER_DEFINED_DATA)
  private Map<String, Object> userDefinedData = new HashMap<>();

  public CreateAppPkg() {
  }

  public CreateAppPkg appPkgName(String appPkgName) {
    this.appPkgName = appPkgName;
    return this;
  }

  /**
   * Name of the application package to be onboarded.
   * @return appPkgName
   */
  @javax.annotation.Nonnull
  public String getAppPkgName() {
    return appPkgName;
  }

  public void setAppPkgName(String appPkgName) {
    this.appPkgName = appPkgName;
  }


  public CreateAppPkg appPkgPath(String appPkgPath) {
    this.appPkgPath = appPkgPath;
    return this;
  }

  /**
   * Get appPkgPath
   * @return appPkgPath
   */
  @javax.annotation.Nonnull
  public String getAppPkgPath() {
    return appPkgPath;
  }

  public void setAppPkgPath(String appPkgPath) {
    this.appPkgPath = appPkgPath;
  }


  public CreateAppPkg appPkgVersion(String appPkgVersion) {
    this.appPkgVersion = appPkgVersion;
    return this;
  }

  /**
   * Version of the application package to be onboarded. The appPkgName with appPkgVersion can be used to uniquely identify the application package.
   * @return appPkgVersion
   */
  @javax.annotation.Nonnull
  public String getAppPkgVersion() {
    return appPkgVersion;
  }

  public void setAppPkgVersion(String appPkgVersion) {
    this.appPkgVersion = appPkgVersion;
  }


  public CreateAppPkg appProvider(String appProvider) {
    this.appProvider = appProvider;
    return this;
  }

  /**
   * The provider&#39;s name of the application package to be onboarded.
   * @return appProvider
   */
  @javax.annotation.Nullable
  public String getAppProvider() {
    return appProvider;
  }

  public void setAppProvider(String appProvider) {
    this.appProvider = appProvider;
  }


  public CreateAppPkg checksum(Checksum checksum) {
    this.checksum = checksum;
    return this;
  }

  /**
   * Get checksum
   * @return checksum
   */
  @javax.annotation.Nonnull
  public Checksum getChecksum() {
    return checksum;
  }

  public void setChecksum(Checksum checksum) {
    this.checksum = checksum;
  }


  public CreateAppPkg userDefinedData(Map<String, Object> userDefinedData) {
    this.userDefinedData = userDefinedData;
    return this;
  }

  public CreateAppPkg putUserDefinedDataItem(String key, Object userDefinedDataItem) {
    if (this.userDefinedData == null) {
      this.userDefinedData = new HashMap<>();
    }
    this.userDefinedData.put(key, userDefinedDataItem);
    return this;
  }

  /**
   * &#39;This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259&#39;
   * @return userDefinedData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getUserDefinedData() {
    return userDefinedData;
  }

  public void setUserDefinedData(Map<String, Object> userDefinedData) {
    this.userDefinedData = userDefinedData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAppPkg createAppPkg = (CreateAppPkg) o;
    return Objects.equals(this.appPkgName, createAppPkg.appPkgName) &&
        Objects.equals(this.appPkgPath, createAppPkg.appPkgPath) &&
        Objects.equals(this.appPkgVersion, createAppPkg.appPkgVersion) &&
        Objects.equals(this.appProvider, createAppPkg.appProvider) &&
        Objects.equals(this.checksum, createAppPkg.checksum) &&
        Objects.equals(this.userDefinedData, createAppPkg.userDefinedData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPkgName, appPkgPath, appPkgVersion, appProvider, checksum, userDefinedData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAppPkg {\n");
    sb.append("    appPkgName: ").append(toIndentedString(appPkgName)).append("\n");
    sb.append("    appPkgPath: ").append(toIndentedString(appPkgPath)).append("\n");
    sb.append("    appPkgVersion: ").append(toIndentedString(appPkgVersion)).append("\n");
    sb.append("    appProvider: ").append(toIndentedString(appProvider)).append("\n");
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    userDefinedData: ").append(toIndentedString(userDefinedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appPkgName");
    openapiFields.add("appPkgPath");
    openapiFields.add("appPkgVersion");
    openapiFields.add("appProvider");
    openapiFields.add("checksum");
    openapiFields.add("userDefinedData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appPkgName");
    openapiRequiredFields.add("appPkgPath");
    openapiRequiredFields.add("appPkgVersion");
    openapiRequiredFields.add("checksum");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAppPkg
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAppPkg.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAppPkg is not found in the empty JSON string", CreateAppPkg.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAppPkg.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAppPkg` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAppPkg.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appPkgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPkgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPkgName").toString()));
      }
      if (!jsonObj.get("appPkgPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPkgPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPkgPath").toString()));
      }
      if (!jsonObj.get("appPkgVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPkgVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPkgVersion").toString()));
      }
      if ((jsonObj.get("appProvider") != null && !jsonObj.get("appProvider").isJsonNull()) && !jsonObj.get("appProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appProvider").toString()));
      }
      // validate the required field `checksum`
      Checksum.validateJsonElement(jsonObj.get("checksum"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAppPkg.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAppPkg' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAppPkg> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAppPkg.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAppPkg>() {
           @Override
           public void write(JsonWriter out, CreateAppPkg value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAppPkg read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAppPkg given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAppPkg
   * @throws IOException if the JSON string is invalid with respect to CreateAppPkg
   */
  public static CreateAppPkg fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAppPkg.class);
  }

  /**
   * Convert an instance of CreateAppPkg to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

