/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppPkgNotificationLinks;
import org.openapitools.client.model.AppPkgNotificationType;
import org.openapitools.client.model.TimeStamp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#39;This data type represents an application package management notification for informing the subscribers about onboarding application package resources. The notification is triggered when a new application package is onboarded&#39;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppPkgNotification {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private AppPkgNotificationLinks links;

  public static final String SERIALIZED_NAME_APP_D_ID = "appDId";
  @SerializedName(SERIALIZED_NAME_APP_D_ID)
  private String appDId;

  public static final String SERIALIZED_NAME_APP_PKG_ID = "appPkgId";
  @SerializedName(SERIALIZED_NAME_APP_PKG_ID)
  private String appPkgId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private AppPkgNotificationType notificationType;

  /**
   * Gets or Sets operationalState
   */
  @JsonAdapter(OperationalStateEnum.Adapter.class)
  public enum OperationalStateEnum {
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED");

    private String value;

    OperationalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationalStateEnum fromValue(String value) {
      for (OperationalStateEnum b : OperationalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATIONAL_STATE = "operationalState";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATE)
  private OperationalStateEnum operationalState;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private TimeStamp timeStamp;

  public AppPkgNotification() {
  }

  public AppPkgNotification links(AppPkgNotificationLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nonnull
  public AppPkgNotificationLinks getLinks() {
    return links;
  }

  public void setLinks(AppPkgNotificationLinks links) {
    this.links = links;
  }


  public AppPkgNotification appDId(String appDId) {
    this.appDId = appDId;
    return this;
  }

  /**
   * Identifier of this MEC application descriptor. This attribute shall be globally unique.
   * @return appDId
   */
  @javax.annotation.Nonnull
  public String getAppDId() {
    return appDId;
  }

  public void setAppDId(String appDId) {
    this.appDId = appDId;
  }


  public AppPkgNotification appPkgId(String appPkgId) {
    this.appPkgId = appPkgId;
    return this;
  }

  /**
   * Identifier of the onboarded application package.
   * @return appPkgId
   */
  @javax.annotation.Nonnull
  public String getAppPkgId() {
    return appPkgId;
  }

  public void setAppPkgId(String appPkgId) {
    this.appPkgId = appPkgId;
  }


  public AppPkgNotification id(String id) {
    this.id = id;
    return this;
  }

  /**
   * &#39;&#39;
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppPkgNotification notificationType(AppPkgNotificationType notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nonnull
  public AppPkgNotificationType getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(AppPkgNotificationType notificationType) {
    this.notificationType = notificationType;
  }


  public AppPkgNotification operationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
    return this;
  }

  /**
   * Get operationalState
   * @return operationalState
   */
  @javax.annotation.Nonnull
  public OperationalStateEnum getOperationalState() {
    return operationalState;
  }

  public void setOperationalState(OperationalStateEnum operationalState) {
    this.operationalState = operationalState;
  }


  public AppPkgNotification subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Identifier of the subscription related to this notification.
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public AppPkgNotification timeStamp(TimeStamp timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Get timeStamp
   * @return timeStamp
   */
  @javax.annotation.Nonnull
  public TimeStamp getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(TimeStamp timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPkgNotification appPkgNotification = (AppPkgNotification) o;
    return Objects.equals(this.links, appPkgNotification.links) &&
        Objects.equals(this.appDId, appPkgNotification.appDId) &&
        Objects.equals(this.appPkgId, appPkgNotification.appPkgId) &&
        Objects.equals(this.id, appPkgNotification.id) &&
        Objects.equals(this.notificationType, appPkgNotification.notificationType) &&
        Objects.equals(this.operationalState, appPkgNotification.operationalState) &&
        Objects.equals(this.subscriptionId, appPkgNotification.subscriptionId) &&
        Objects.equals(this.timeStamp, appPkgNotification.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, appDId, appPkgId, id, notificationType, operationalState, subscriptionId, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPkgNotification {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    appDId: ").append(toIndentedString(appDId)).append("\n");
    sb.append("    appPkgId: ").append(toIndentedString(appPkgId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("appDId");
    openapiFields.add("appPkgId");
    openapiFields.add("id");
    openapiFields.add("notificationType");
    openapiFields.add("operationalState");
    openapiFields.add("subscriptionId");
    openapiFields.add("timeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("_links");
    openapiRequiredFields.add("appDId");
    openapiRequiredFields.add("appPkgId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("notificationType");
    openapiRequiredFields.add("operationalState");
    openapiRequiredFields.add("subscriptionId");
    openapiRequiredFields.add("timeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppPkgNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppPkgNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPkgNotification is not found in the empty JSON string", AppPkgNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppPkgNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPkgNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppPkgNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `_links`
      AppPkgNotificationLinks.validateJsonElement(jsonObj.get("_links"));
      if (!jsonObj.get("appDId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appDId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appDId").toString()));
      }
      if (!jsonObj.get("appPkgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPkgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPkgId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `notificationType`
      AppPkgNotificationType.validateJsonElement(jsonObj.get("notificationType"));
      if (!jsonObj.get("operationalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationalState").toString()));
      }
      // validate the required field `operationalState`
      OperationalStateEnum.validateJsonElement(jsonObj.get("operationalState"));
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      // validate the required field `timeStamp`
      TimeStamp.validateJsonElement(jsonObj.get("timeStamp"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPkgNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPkgNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPkgNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPkgNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPkgNotification>() {
           @Override
           public void write(JsonWriter out, AppPkgNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPkgNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppPkgNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppPkgNotification
   * @throws IOException if the JSON string is invalid with respect to AppPkgNotification
   */
  public static AppPkgNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPkgNotification.class);
  }

  /**
   * Convert an instance of AppPkgNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

