/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubsctiptionTypeAppPkg;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#39;The data type represents the input parameters of \&quot;subscription operation\&quot; to notification of application package management for the onboarding, or operational state change of application package.&#39;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppPkgSubscription {
  public static final String SERIALIZED_NAME_APP_PKG_FILTER = "appPkgFilter";
  @SerializedName(SERIALIZED_NAME_APP_PKG_FILTER)
  private List<String> appPkgFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALLBACK_URI = "callbackUri";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URI)
  private String callbackUri;

  public static final String SERIALIZED_NAME_SUBSCTIPTION_TYPE = "subsctiptionType";
  @SerializedName(SERIALIZED_NAME_SUBSCTIPTION_TYPE)
  private SubsctiptionTypeAppPkg subsctiptionType;

  public AppPkgSubscription() {
  }

  public AppPkgSubscription appPkgFilter(List<String> appPkgFilter) {
    this.appPkgFilter = appPkgFilter;
    return this;
  }

  public AppPkgSubscription addAppPkgFilterItem(String appPkgFilterItem) {
    if (this.appPkgFilter == null) {
      this.appPkgFilter = new ArrayList<>();
    }
    this.appPkgFilter.add(appPkgFilterItem);
    return this;
  }

  /**
   * Get appPkgFilter
   * @return appPkgFilter
   */
  @javax.annotation.Nullable
  public List<String> getAppPkgFilter() {
    return appPkgFilter;
  }

  public void setAppPkgFilter(List<String> appPkgFilter) {
    this.appPkgFilter = appPkgFilter;
  }


  public AppPkgSubscription callbackUri(String callbackUri) {
    this.callbackUri = callbackUri;
    return this;
  }

  /**
   * The URI of the endpoint for the notification to be sent to.
   * @return callbackUri
   */
  @javax.annotation.Nonnull
  public String getCallbackUri() {
    return callbackUri;
  }

  public void setCallbackUri(String callbackUri) {
    this.callbackUri = callbackUri;
  }


  public AppPkgSubscription subsctiptionType(SubsctiptionTypeAppPkg subsctiptionType) {
    this.subsctiptionType = subsctiptionType;
    return this;
  }

  /**
   * Get subsctiptionType
   * @return subsctiptionType
   */
  @javax.annotation.Nonnull
  public SubsctiptionTypeAppPkg getSubsctiptionType() {
    return subsctiptionType;
  }

  public void setSubsctiptionType(SubsctiptionTypeAppPkg subsctiptionType) {
    this.subsctiptionType = subsctiptionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppPkgSubscription appPkgSubscription = (AppPkgSubscription) o;
    return Objects.equals(this.appPkgFilter, appPkgSubscription.appPkgFilter) &&
        Objects.equals(this.callbackUri, appPkgSubscription.callbackUri) &&
        Objects.equals(this.subsctiptionType, appPkgSubscription.subsctiptionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPkgFilter, callbackUri, subsctiptionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppPkgSubscription {\n");
    sb.append("    appPkgFilter: ").append(toIndentedString(appPkgFilter)).append("\n");
    sb.append("    callbackUri: ").append(toIndentedString(callbackUri)).append("\n");
    sb.append("    subsctiptionType: ").append(toIndentedString(subsctiptionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appPkgFilter");
    openapiFields.add("callbackUri");
    openapiFields.add("subsctiptionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("callbackUri");
    openapiRequiredFields.add("subsctiptionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppPkgSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppPkgSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppPkgSubscription is not found in the empty JSON string", AppPkgSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppPkgSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppPkgSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppPkgSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("appPkgFilter") != null && !jsonObj.get("appPkgFilter").isJsonNull() && !jsonObj.get("appPkgFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPkgFilter` to be an array in the JSON string but got `%s`", jsonObj.get("appPkgFilter").toString()));
      }
      if (!jsonObj.get("callbackUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUri").toString()));
      }
      // validate the required field `subsctiptionType`
      SubsctiptionTypeAppPkg.validateJsonElement(jsonObj.get("subsctiptionType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppPkgSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppPkgSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppPkgSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppPkgSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<AppPkgSubscription>() {
           @Override
           public void write(JsonWriter out, AppPkgSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppPkgSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppPkgSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppPkgSubscription
   * @throws IOException if the JSON string is invalid with respect to AppPkgSubscription
   */
  public static AppPkgSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppPkgSubscription.class);
  }

  /**
   * Convert an instance of AppPkgSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

