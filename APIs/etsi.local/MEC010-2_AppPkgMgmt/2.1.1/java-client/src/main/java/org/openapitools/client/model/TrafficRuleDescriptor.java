/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Action;
import org.openapitools.client.model.FilterType;
import org.openapitools.client.model.InterfaceDescriptor;
import org.openapitools.client.model.TrafficFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrafficRuleDescriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficRuleDescriptor {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Action action;

  public static final String SERIALIZED_NAME_DST_INTERFACE = "dstInterface";
  @SerializedName(SERIALIZED_NAME_DST_INTERFACE)
  private List<InterfaceDescriptor> dstInterface = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private FilterType filterType;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_TRAFFIC_FILTER = "trafficFilter";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_FILTER)
  private List<TrafficFilter> trafficFilter = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAFFIC_RULE_ID = "trafficRuleId";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_RULE_ID)
  private String trafficRuleId;

  public TrafficRuleDescriptor() {
  }

  public TrafficRuleDescriptor action(Action action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public Action getAction() {
    return action;
  }

  public void setAction(Action action) {
    this.action = action;
  }


  public TrafficRuleDescriptor dstInterface(List<InterfaceDescriptor> dstInterface) {
    this.dstInterface = dstInterface;
    return this;
  }

  public TrafficRuleDescriptor addDstInterfaceItem(InterfaceDescriptor dstInterfaceItem) {
    if (this.dstInterface == null) {
      this.dstInterface = new ArrayList<>();
    }
    this.dstInterface.add(dstInterfaceItem);
    return this;
  }

  /**
   * Get dstInterface
   * @return dstInterface
   */
  @javax.annotation.Nullable
  public List<InterfaceDescriptor> getDstInterface() {
    return dstInterface;
  }

  public void setDstInterface(List<InterfaceDescriptor> dstInterface) {
    this.dstInterface = dstInterface;
  }


  public TrafficRuleDescriptor filterType(FilterType filterType) {
    this.filterType = filterType;
    return this;
  }

  /**
   * Get filterType
   * @return filterType
   */
  @javax.annotation.Nonnull
  public FilterType getFilterType() {
    return filterType;
  }

  public void setFilterType(FilterType filterType) {
    this.filterType = filterType;
  }


  public TrafficRuleDescriptor priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public TrafficRuleDescriptor trafficFilter(List<TrafficFilter> trafficFilter) {
    this.trafficFilter = trafficFilter;
    return this;
  }

  public TrafficRuleDescriptor addTrafficFilterItem(TrafficFilter trafficFilterItem) {
    if (this.trafficFilter == null) {
      this.trafficFilter = new ArrayList<>();
    }
    this.trafficFilter.add(trafficFilterItem);
    return this;
  }

  /**
   * The filter used to identify specific flow/packets that need to be handled by the MEC host.
   * @return trafficFilter
   */
  @javax.annotation.Nonnull
  public List<TrafficFilter> getTrafficFilter() {
    return trafficFilter;
  }

  public void setTrafficFilter(List<TrafficFilter> trafficFilter) {
    this.trafficFilter = trafficFilter;
  }


  public TrafficRuleDescriptor trafficRuleId(String trafficRuleId) {
    this.trafficRuleId = trafficRuleId;
    return this;
  }

  /**
   * Identifies the traffic rule.
   * @return trafficRuleId
   */
  @javax.annotation.Nonnull
  public String getTrafficRuleId() {
    return trafficRuleId;
  }

  public void setTrafficRuleId(String trafficRuleId) {
    this.trafficRuleId = trafficRuleId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficRuleDescriptor trafficRuleDescriptor = (TrafficRuleDescriptor) o;
    return Objects.equals(this.action, trafficRuleDescriptor.action) &&
        Objects.equals(this.dstInterface, trafficRuleDescriptor.dstInterface) &&
        Objects.equals(this.filterType, trafficRuleDescriptor.filterType) &&
        Objects.equals(this.priority, trafficRuleDescriptor.priority) &&
        Objects.equals(this.trafficFilter, trafficRuleDescriptor.trafficFilter) &&
        Objects.equals(this.trafficRuleId, trafficRuleDescriptor.trafficRuleId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, dstInterface, filterType, priority, trafficFilter, trafficRuleId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficRuleDescriptor {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    dstInterface: ").append(toIndentedString(dstInterface)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    trafficFilter: ").append(toIndentedString(trafficFilter)).append("\n");
    sb.append("    trafficRuleId: ").append(toIndentedString(trafficRuleId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("dstInterface");
    openapiFields.add("filterType");
    openapiFields.add("priority");
    openapiFields.add("trafficFilter");
    openapiFields.add("trafficRuleId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("filterType");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("trafficFilter");
    openapiRequiredFields.add("trafficRuleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficRuleDescriptor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficRuleDescriptor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficRuleDescriptor is not found in the empty JSON string", TrafficRuleDescriptor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficRuleDescriptor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficRuleDescriptor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrafficRuleDescriptor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      Action.validateJsonElement(jsonObj.get("action"));
      if (jsonObj.get("dstInterface") != null && !jsonObj.get("dstInterface").isJsonNull()) {
        JsonArray jsonArraydstInterface = jsonObj.getAsJsonArray("dstInterface");
        if (jsonArraydstInterface != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dstInterface").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dstInterface` to be an array in the JSON string but got `%s`", jsonObj.get("dstInterface").toString()));
          }

          // validate the optional field `dstInterface` (array)
          for (int i = 0; i < jsonArraydstInterface.size(); i++) {
            InterfaceDescriptor.validateJsonElement(jsonArraydstInterface.get(i));
          };
        }
      }
      // validate the required field `filterType`
      FilterType.validateJsonElement(jsonObj.get("filterType"));
      // ensure the json data is an array
      if (!jsonObj.get("trafficFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficFilter` to be an array in the JSON string but got `%s`", jsonObj.get("trafficFilter").toString()));
      }

      JsonArray jsonArraytrafficFilter = jsonObj.getAsJsonArray("trafficFilter");
      // validate the required field `trafficFilter` (array)
      for (int i = 0; i < jsonArraytrafficFilter.size(); i++) {
        TrafficFilter.validateJsonElement(jsonArraytrafficFilter.get(i));
      };
      if (!jsonObj.get("trafficRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficRuleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficRuleDescriptor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficRuleDescriptor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficRuleDescriptor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficRuleDescriptor.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficRuleDescriptor>() {
           @Override
           public void write(JsonWriter out, TrafficRuleDescriptor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficRuleDescriptor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficRuleDescriptor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficRuleDescriptor
   * @throws IOException if the JSON string is invalid with respect to TrafficRuleDescriptor
   */
  public static TrafficRuleDescriptor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficRuleDescriptor.class);
  }

  /**
   * Convert an instance of TrafficRuleDescriptor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

