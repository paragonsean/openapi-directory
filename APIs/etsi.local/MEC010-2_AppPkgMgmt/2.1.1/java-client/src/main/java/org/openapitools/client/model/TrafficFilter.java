/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TrafficFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:53.085416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficFilter {
  public static final String SERIALIZED_NAME_D_S_C_P = "dSCP";
  @SerializedName(SERIALIZED_NAME_D_S_C_P)
  private Integer dSCP;

  public static final String SERIALIZED_NAME_DST_ADDRESS = "dstAddress";
  @SerializedName(SERIALIZED_NAME_DST_ADDRESS)
  private List<String> dstAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_DST_PORT = "dstPort";
  @SerializedName(SERIALIZED_NAME_DST_PORT)
  private List<String> dstPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_DST_TUNNEL_PORT = "dstTunnelPort";
  @SerializedName(SERIALIZED_NAME_DST_TUNNEL_PORT)
  private List<String> dstTunnelPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private List<String> protocol = new ArrayList<>();

  public static final String SERIALIZED_NAME_Q_C_I = "qCI";
  @SerializedName(SERIALIZED_NAME_Q_C_I)
  private Integer qCI;

  public static final String SERIALIZED_NAME_SRC_ADDRESS = "srcAddress";
  @SerializedName(SERIALIZED_NAME_SRC_ADDRESS)
  private List<String> srcAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_SRC_PORT = "srcPort";
  @SerializedName(SERIALIZED_NAME_SRC_PORT)
  private List<String> srcPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_SRC_TUNNEL_ADDRESS = "srcTunnelAddress";
  @SerializedName(SERIALIZED_NAME_SRC_TUNNEL_ADDRESS)
  private List<String> srcTunnelAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_SRC_TUNNEL_PORT = "srcTunnelPort";
  @SerializedName(SERIALIZED_NAME_SRC_TUNNEL_PORT)
  private List<String> srcTunnelPort = new ArrayList<>();

  public static final String SERIALIZED_NAME_T_C = "tC";
  @SerializedName(SERIALIZED_NAME_T_C)
  private Integer tC;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private List<String> tag = new ArrayList<>();

  public static final String SERIALIZED_NAME_TGT_TUNNEL_ADDRESS = "tgtTunnelAddress";
  @SerializedName(SERIALIZED_NAME_TGT_TUNNEL_ADDRESS)
  private List<String> tgtTunnelAddress = new ArrayList<>();

  public TrafficFilter() {
  }

  public TrafficFilter dSCP(Integer dSCP) {
    this.dSCP = dSCP;
    return this;
  }

  /**
   * Used to match all IPv4 packets that have the same DSCP.
   * @return dSCP
   */
  @javax.annotation.Nullable
  public Integer getdSCP() {
    return dSCP;
  }

  public void setdSCP(Integer dSCP) {
    this.dSCP = dSCP;
  }


  public TrafficFilter dstAddress(List<String> dstAddress) {
    this.dstAddress = dstAddress;
    return this;
  }

  public TrafficFilter addDstAddressItem(String dstAddressItem) {
    if (this.dstAddress == null) {
      this.dstAddress = new ArrayList<>();
    }
    this.dstAddress.add(dstAddressItem);
    return this;
  }

  /**
   * A IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @return dstAddress
   */
  @javax.annotation.Nullable
  public List<String> getDstAddress() {
    return dstAddress;
  }

  public void setDstAddress(List<String> dstAddress) {
    this.dstAddress = dstAddress;
  }


  public TrafficFilter dstPort(List<String> dstPort) {
    this.dstPort = dstPort;
    return this;
  }

  public TrafficFilter addDstPortItem(String dstPortItem) {
    if (this.dstPort == null) {
      this.dstPort = new ArrayList<>();
    }
    this.dstPort.add(dstPortItem);
    return this;
  }

  /**
   * A port or a range of ports.
   * @return dstPort
   */
  @javax.annotation.Nullable
  public List<String> getDstPort() {
    return dstPort;
  }

  public void setDstPort(List<String> dstPort) {
    this.dstPort = dstPort;
  }


  public TrafficFilter dstTunnelPort(List<String> dstTunnelPort) {
    this.dstTunnelPort = dstTunnelPort;
    return this;
  }

  public TrafficFilter addDstTunnelPortItem(String dstTunnelPortItem) {
    if (this.dstTunnelPort == null) {
      this.dstTunnelPort = new ArrayList<>();
    }
    this.dstTunnelPort.add(dstTunnelPortItem);
    return this;
  }

  /**
   * Used for GTP tunnel based traffic rule.
   * @return dstTunnelPort
   */
  @javax.annotation.Nullable
  public List<String> getDstTunnelPort() {
    return dstTunnelPort;
  }

  public void setDstTunnelPort(List<String> dstTunnelPort) {
    this.dstTunnelPort = dstTunnelPort;
  }


  public TrafficFilter protocol(List<String> protocol) {
    this.protocol = protocol;
    return this;
  }

  public TrafficFilter addProtocolItem(String protocolItem) {
    if (this.protocol == null) {
      this.protocol = new ArrayList<>();
    }
    this.protocol.add(protocolItem);
    return this;
  }

  /**
   * Specify the protocol of the traffic filter.
   * @return protocol
   */
  @javax.annotation.Nullable
  public List<String> getProtocol() {
    return protocol;
  }

  public void setProtocol(List<String> protocol) {
    this.protocol = protocol;
  }


  public TrafficFilter qCI(Integer qCI) {
    this.qCI = qCI;
    return this;
  }

  /**
   * Used to match all packets that have the same QCI.
   * @return qCI
   */
  @javax.annotation.Nullable
  public Integer getqCI() {
    return qCI;
  }

  public void setqCI(Integer qCI) {
    this.qCI = qCI;
  }


  public TrafficFilter srcAddress(List<String> srcAddress) {
    this.srcAddress = srcAddress;
    return this;
  }

  public TrafficFilter addSrcAddressItem(String srcAddressItem) {
    if (this.srcAddress == null) {
      this.srcAddress = new ArrayList<>();
    }
    this.srcAddress.add(srcAddressItem);
    return this;
  }

  /**
   * An IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
   * @return srcAddress
   */
  @javax.annotation.Nullable
  public List<String> getSrcAddress() {
    return srcAddress;
  }

  public void setSrcAddress(List<String> srcAddress) {
    this.srcAddress = srcAddress;
  }


  public TrafficFilter srcPort(List<String> srcPort) {
    this.srcPort = srcPort;
    return this;
  }

  public TrafficFilter addSrcPortItem(String srcPortItem) {
    if (this.srcPort == null) {
      this.srcPort = new ArrayList<>();
    }
    this.srcPort.add(srcPortItem);
    return this;
  }

  /**
   * A port or a range of ports.
   * @return srcPort
   */
  @javax.annotation.Nullable
  public List<String> getSrcPort() {
    return srcPort;
  }

  public void setSrcPort(List<String> srcPort) {
    this.srcPort = srcPort;
  }


  public TrafficFilter srcTunnelAddress(List<String> srcTunnelAddress) {
    this.srcTunnelAddress = srcTunnelAddress;
    return this;
  }

  public TrafficFilter addSrcTunnelAddressItem(String srcTunnelAddressItem) {
    if (this.srcTunnelAddress == null) {
      this.srcTunnelAddress = new ArrayList<>();
    }
    this.srcTunnelAddress.add(srcTunnelAddressItem);
    return this;
  }

  /**
   * Used for GTP tunnel based traffic rule.
   * @return srcTunnelAddress
   */
  @javax.annotation.Nullable
  public List<String> getSrcTunnelAddress() {
    return srcTunnelAddress;
  }

  public void setSrcTunnelAddress(List<String> srcTunnelAddress) {
    this.srcTunnelAddress = srcTunnelAddress;
  }


  public TrafficFilter srcTunnelPort(List<String> srcTunnelPort) {
    this.srcTunnelPort = srcTunnelPort;
    return this;
  }

  public TrafficFilter addSrcTunnelPortItem(String srcTunnelPortItem) {
    if (this.srcTunnelPort == null) {
      this.srcTunnelPort = new ArrayList<>();
    }
    this.srcTunnelPort.add(srcTunnelPortItem);
    return this;
  }

  /**
   * Used for GTP tunnel based traffic rule.
   * @return srcTunnelPort
   */
  @javax.annotation.Nullable
  public List<String> getSrcTunnelPort() {
    return srcTunnelPort;
  }

  public void setSrcTunnelPort(List<String> srcTunnelPort) {
    this.srcTunnelPort = srcTunnelPort;
  }


  public TrafficFilter tC(Integer tC) {
    this.tC = tC;
    return this;
  }

  /**
   * Used to match all IPv6 packets that have the same TC.
   * @return tC
   */
  @javax.annotation.Nullable
  public Integer gettC() {
    return tC;
  }

  public void settC(Integer tC) {
    this.tC = tC;
  }


  public TrafficFilter tag(List<String> tag) {
    this.tag = tag;
    return this;
  }

  public TrafficFilter addTagItem(String tagItem) {
    if (this.tag == null) {
      this.tag = new ArrayList<>();
    }
    this.tag.add(tagItem);
    return this;
  }

  /**
   * Used for tag based traffic rule.
   * @return tag
   */
  @javax.annotation.Nullable
  public List<String> getTag() {
    return tag;
  }

  public void setTag(List<String> tag) {
    this.tag = tag;
  }


  public TrafficFilter tgtTunnelAddress(List<String> tgtTunnelAddress) {
    this.tgtTunnelAddress = tgtTunnelAddress;
    return this;
  }

  public TrafficFilter addTgtTunnelAddressItem(String tgtTunnelAddressItem) {
    if (this.tgtTunnelAddress == null) {
      this.tgtTunnelAddress = new ArrayList<>();
    }
    this.tgtTunnelAddress.add(tgtTunnelAddressItem);
    return this;
  }

  /**
   * Used for GTP tunnel based traffic rule.
   * @return tgtTunnelAddress
   */
  @javax.annotation.Nullable
  public List<String> getTgtTunnelAddress() {
    return tgtTunnelAddress;
  }

  public void setTgtTunnelAddress(List<String> tgtTunnelAddress) {
    this.tgtTunnelAddress = tgtTunnelAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficFilter trafficFilter = (TrafficFilter) o;
    return Objects.equals(this.dSCP, trafficFilter.dSCP) &&
        Objects.equals(this.dstAddress, trafficFilter.dstAddress) &&
        Objects.equals(this.dstPort, trafficFilter.dstPort) &&
        Objects.equals(this.dstTunnelPort, trafficFilter.dstTunnelPort) &&
        Objects.equals(this.protocol, trafficFilter.protocol) &&
        Objects.equals(this.qCI, trafficFilter.qCI) &&
        Objects.equals(this.srcAddress, trafficFilter.srcAddress) &&
        Objects.equals(this.srcPort, trafficFilter.srcPort) &&
        Objects.equals(this.srcTunnelAddress, trafficFilter.srcTunnelAddress) &&
        Objects.equals(this.srcTunnelPort, trafficFilter.srcTunnelPort) &&
        Objects.equals(this.tC, trafficFilter.tC) &&
        Objects.equals(this.tag, trafficFilter.tag) &&
        Objects.equals(this.tgtTunnelAddress, trafficFilter.tgtTunnelAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dSCP, dstAddress, dstPort, dstTunnelPort, protocol, qCI, srcAddress, srcPort, srcTunnelAddress, srcTunnelPort, tC, tag, tgtTunnelAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficFilter {\n");
    sb.append("    dSCP: ").append(toIndentedString(dSCP)).append("\n");
    sb.append("    dstAddress: ").append(toIndentedString(dstAddress)).append("\n");
    sb.append("    dstPort: ").append(toIndentedString(dstPort)).append("\n");
    sb.append("    dstTunnelPort: ").append(toIndentedString(dstTunnelPort)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    qCI: ").append(toIndentedString(qCI)).append("\n");
    sb.append("    srcAddress: ").append(toIndentedString(srcAddress)).append("\n");
    sb.append("    srcPort: ").append(toIndentedString(srcPort)).append("\n");
    sb.append("    srcTunnelAddress: ").append(toIndentedString(srcTunnelAddress)).append("\n");
    sb.append("    srcTunnelPort: ").append(toIndentedString(srcTunnelPort)).append("\n");
    sb.append("    tC: ").append(toIndentedString(tC)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    tgtTunnelAddress: ").append(toIndentedString(tgtTunnelAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dSCP");
    openapiFields.add("dstAddress");
    openapiFields.add("dstPort");
    openapiFields.add("dstTunnelPort");
    openapiFields.add("protocol");
    openapiFields.add("qCI");
    openapiFields.add("srcAddress");
    openapiFields.add("srcPort");
    openapiFields.add("srcTunnelAddress");
    openapiFields.add("srcTunnelPort");
    openapiFields.add("tC");
    openapiFields.add("tag");
    openapiFields.add("tgtTunnelAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficFilter is not found in the empty JSON string", TrafficFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dstAddress") != null && !jsonObj.get("dstAddress").isJsonNull() && !jsonObj.get("dstAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstAddress` to be an array in the JSON string but got `%s`", jsonObj.get("dstAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dstPort") != null && !jsonObj.get("dstPort").isJsonNull() && !jsonObj.get("dstPort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstPort` to be an array in the JSON string but got `%s`", jsonObj.get("dstPort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dstTunnelPort") != null && !jsonObj.get("dstTunnelPort").isJsonNull() && !jsonObj.get("dstTunnelPort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dstTunnelPort` to be an array in the JSON string but got `%s`", jsonObj.get("dstTunnelPort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull() && !jsonObj.get("protocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be an array in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("srcAddress") != null && !jsonObj.get("srcAddress").isJsonNull() && !jsonObj.get("srcAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcAddress` to be an array in the JSON string but got `%s`", jsonObj.get("srcAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("srcPort") != null && !jsonObj.get("srcPort").isJsonNull() && !jsonObj.get("srcPort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcPort` to be an array in the JSON string but got `%s`", jsonObj.get("srcPort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("srcTunnelAddress") != null && !jsonObj.get("srcTunnelAddress").isJsonNull() && !jsonObj.get("srcTunnelAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcTunnelAddress` to be an array in the JSON string but got `%s`", jsonObj.get("srcTunnelAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("srcTunnelPort") != null && !jsonObj.get("srcTunnelPort").isJsonNull() && !jsonObj.get("srcTunnelPort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcTunnelPort` to be an array in the JSON string but got `%s`", jsonObj.get("srcTunnelPort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull() && !jsonObj.get("tag").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be an array in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tgtTunnelAddress") != null && !jsonObj.get("tgtTunnelAddress").isJsonNull() && !jsonObj.get("tgtTunnelAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tgtTunnelAddress` to be an array in the JSON string but got `%s`", jsonObj.get("tgtTunnelAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficFilter>() {
           @Override
           public void write(JsonWriter out, TrafficFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficFilter
   * @throws IOException if the JSON string is invalid with respect to TrafficFilter
   */
  public static TrafficFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficFilter.class);
  }

  /**
   * Convert an instance of TrafficFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

