/*
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppD;
import org.openapitools.client.model.AppPkgInfo;
import org.openapitools.client.model.AppPkgInfoModifications;
import org.openapitools.client.model.AppPkgSubscription;
import org.openapitools.client.model.AppPkgSubscriptionInfo;
import org.openapitools.client.model.AppPkgSubscriptionLinkList;
import org.openapitools.client.model.CreateAppPkg;
import java.io.File;
import org.openapitools.client.model.ProblemDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppPkgmApi
 */
@Disabled
public class AppPkgmApiTest {

    private final AppPkgmApi api = new AppPkgmApi();

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     *
     * Reads the content of the AppD of on-boarded individual application package resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appDGETTest() throws ApiException {
        String appDId = null;
        String filter = null;
        String allFields = null;
        String fields = null;
        String excludeFields = null;
        String excludeDefault = null;
        AppD response = api.appDGET(appDId, filter, allFields, fields, excludeFields, excludeDefault);
        // TODO: test validations
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     *
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appDIdGETTest() throws ApiException {
        String appDId = null;
        api.appDIdGET(appDId);
        // TODO: test validations
    }

    /**
     * Uploads the content of application package.
     *
     * Uploads the content of application package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appDIdPUTTest() throws ApiException {
        String appDId = null;
        File body = null;
        api.appDIdPUT(appDId, body);
        // TODO: test validations
    }

    /**
     * Deletes an individual application package resources
     *
     * Deletes an individual application package resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPackageDELETETest() throws ApiException {
        String appPkgId = null;
        api.appPackageDELETE(appPkgId);
        // TODO: test validations
    }

    /**
     * Queries the information related to individual application package resources
     *
     * Queries the information related to individual application package resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPackageGETTest() throws ApiException {
        String appPkgId = null;
        AppPkgInfo response = api.appPackageGET(appPkgId);
        // TODO: test validations
    }

    /**
     * Updates the operational state of an individual application package resource
     *
     * Updates the operational state of an individual application package resources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPackagePATCHTest() throws ApiException {
        String appPkgId = null;
        AppPkgInfoModifications appPkgInfoModifications = null;
        AppPkgInfoModifications response = api.appPackagePATCH(appPkgId, appPkgInfoModifications);
        // TODO: test validations
    }

    /**
     * Queries information relating to on-boarded application packages in the MEO
     *
     * queries information relating to on-boarded application packages in the MEO
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPackagesGETTest() throws ApiException {
        String filter = null;
        String allFields = null;
        String fields = null;
        String excludeFields = null;
        String excludeDefault = null;
        List<AppPkgInfo> response = api.appPackagesGET(filter, allFields, fields, excludeFields, excludeDefault);
        // TODO: test validations
    }

    /**
     * Create a resource for on-boarding an application package to a MEO
     *
     * Create a resource for on-boarding an application package to a MEO
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPackagesPOSTTest() throws ApiException {
        CreateAppPkg createAppPkg = null;
        List<AppPkgInfo> response = api.appPackagesPOST(createAppPkg);
        // TODO: test validations
    }

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     *
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPkgGETTest() throws ApiException {
        String appPkgId = null;
        api.appPkgGET(appPkgId);
        // TODO: test validations
    }

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     *
     * Reads the content of the AppD of on-boarded individual application package resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPkgIdGETTest() throws ApiException {
        String appPkgId = null;
        String filter = null;
        String allFields = null;
        String fields = null;
        String excludeFields = null;
        String excludeDefault = null;
        AppD response = api.appPkgIdGET(appPkgId, filter, allFields, fields, excludeFields, excludeDefault);
        // TODO: test validations
    }

    /**
     * Uploads the content of application package.
     *
     * Uploads the content of application package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appPkgPUTTest() throws ApiException {
        String appPkgId = null;
        File body = null;
        api.appPkgPUT(appPkgId, body);
        // TODO: test validations
    }

    /**
     * Deletes the individual subscription to notifications about application package changes in MEO.
     *
     * Deletes the individual subscription to notifications about application package changes in MEO.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void individualSubscriptionDELETETest() throws ApiException {
        String subscriptionId = null;
        api.individualSubscriptionDELETE(subscriptionId);
        // TODO: test validations
    }

    /**
     * Used to represent an individual subscription to notifications about application package changes.
     *
     * Used to represent an individual subscription to notifications about application package changes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void individualSubscriptionGETTest() throws ApiException {
        String subscriptionId = null;
        AppPkgSubscriptionInfo response = api.individualSubscriptionGET(subscriptionId);
        // TODO: test validations
    }

    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO
     *
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsGETTest() throws ApiException {
        AppPkgSubscriptionLinkList response = api.subscriptionsGET();
        // TODO: test validations
    }

    /**
     * Subscribe to notifications about on-boarding an application package
     *
     * Subscribe to notifications about on-boarding an application package
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsPOSTTest() throws ApiException {
        AppPkgSubscription appPkgSubscription = null;
        AppPkgSubscriptionInfo response = api.subscriptionsPOST(appPkgSubscription);
        // TODO: test validations
    }

}
