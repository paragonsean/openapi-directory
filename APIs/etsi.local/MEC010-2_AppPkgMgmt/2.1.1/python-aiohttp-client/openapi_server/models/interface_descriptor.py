# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interface_type import InterfaceType
from openapi_server.models.tunnel_info import TunnelInfo
from openapi_server import util


class InterfaceDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dst_ip_address: str=None, dst_mac_address: str=None, interface_type: InterfaceType=None, src_mac_address: str=None, tunnel_info: TunnelInfo=None):
        """InterfaceDescriptor - a model defined in OpenAPI

        :param dst_ip_address: The dst_ip_address of this InterfaceDescriptor.
        :param dst_mac_address: The dst_mac_address of this InterfaceDescriptor.
        :param interface_type: The interface_type of this InterfaceDescriptor.
        :param src_mac_address: The src_mac_address of this InterfaceDescriptor.
        :param tunnel_info: The tunnel_info of this InterfaceDescriptor.
        """
        self.openapi_types = {
            'dst_ip_address': str,
            'dst_mac_address': str,
            'interface_type': InterfaceType,
            'src_mac_address': str,
            'tunnel_info': TunnelInfo
        }

        self.attribute_map = {
            'dst_ip_address': 'dstIPAddress',
            'dst_mac_address': 'dstMACAddress',
            'interface_type': 'interfaceType',
            'src_mac_address': 'srcMACAddress',
            'tunnel_info': 'tunnelInfo'
        }

        self._dst_ip_address = dst_ip_address
        self._dst_mac_address = dst_mac_address
        self._interface_type = interface_type
        self._src_mac_address = src_mac_address
        self._tunnel_info = tunnel_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InterfaceDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InterfaceDescriptor of this InterfaceDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dst_ip_address(self):
        """Gets the dst_ip_address of this InterfaceDescriptor.

        If the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.

        :return: The dst_ip_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._dst_ip_address

    @dst_ip_address.setter
    def dst_ip_address(self, dst_ip_address):
        """Sets the dst_ip_address of this InterfaceDescriptor.

        If the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.

        :param dst_ip_address: The dst_ip_address of this InterfaceDescriptor.
        :type dst_ip_address: str
        """

        self._dst_ip_address = dst_ip_address

    @property
    def dst_mac_address(self):
        """Gets the dst_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the destination address identifies the MAC address of the destination. Only used for dstInterface.

        :return: The dst_mac_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._dst_mac_address

    @dst_mac_address.setter
    def dst_mac_address(self, dst_mac_address):
        """Sets the dst_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the destination address identifies the MAC address of the destination. Only used for dstInterface.

        :param dst_mac_address: The dst_mac_address of this InterfaceDescriptor.
        :type dst_mac_address: str
        """

        self._dst_mac_address = dst_mac_address

    @property
    def interface_type(self):
        """Gets the interface_type of this InterfaceDescriptor.


        :return: The interface_type of this InterfaceDescriptor.
        :rtype: InterfaceType
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this InterfaceDescriptor.


        :param interface_type: The interface_type of this InterfaceDescriptor.
        :type interface_type: InterfaceType
        """
        if interface_type is None:
            raise ValueError("Invalid value for `interface_type`, must not be `None`")

        self._interface_type = interface_type

    @property
    def src_mac_address(self):
        """Gets the src_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the source address identifies the MAC address of the interface.

        :return: The src_mac_address of this InterfaceDescriptor.
        :rtype: str
        """
        return self._src_mac_address

    @src_mac_address.setter
    def src_mac_address(self, src_mac_address):
        """Sets the src_mac_address of this InterfaceDescriptor.

        If the interface type is MAC, the source address identifies the MAC address of the interface.

        :param src_mac_address: The src_mac_address of this InterfaceDescriptor.
        :type src_mac_address: str
        """

        self._src_mac_address = src_mac_address

    @property
    def tunnel_info(self):
        """Gets the tunnel_info of this InterfaceDescriptor.


        :return: The tunnel_info of this InterfaceDescriptor.
        :rtype: TunnelInfo
        """
        return self._tunnel_info

    @tunnel_info.setter
    def tunnel_info(self, tunnel_info):
        """Sets the tunnel_info of this InterfaceDescriptor.


        :param tunnel_info: The tunnel_info of this InterfaceDescriptor.
        :type tunnel_info: TunnelInfo
        """

        self._tunnel_info = tunnel_info
