# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransportDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol: str=None, security: object=None, type: str=None, version: str=None):
        """TransportDescriptor - a model defined in OpenAPI

        :param protocol: The protocol of this TransportDescriptor.
        :param security: The security of this TransportDescriptor.
        :param type: The type of this TransportDescriptor.
        :param version: The version of this TransportDescriptor.
        """
        self.openapi_types = {
            'protocol': str,
            'security': object,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'protocol': 'protocol',
            'security': 'security',
            'type': 'type',
            'version': 'version'
        }

        self._protocol = protocol
        self._security = security
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportDescriptor of this TransportDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol(self):
        """Gets the protocol of this TransportDescriptor.

        The name of the protocol used. Shall be set to HTTP for a REST API.

        :return: The protocol of this TransportDescriptor.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TransportDescriptor.

        The name of the protocol used. Shall be set to HTTP for a REST API.

        :param protocol: The protocol of this TransportDescriptor.
        :type protocol: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def security(self):
        """Gets the security of this TransportDescriptor.

        See MEC011

        :return: The security of this TransportDescriptor.
        :rtype: object
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this TransportDescriptor.

        See MEC011

        :param security: The security of this TransportDescriptor.
        :type security: object
        """
        if security is None:
            raise ValueError("Invalid value for `security`, must not be `None`")

        self._security = security

    @property
    def type(self):
        """Gets the type of this TransportDescriptor.


        :return: The type of this TransportDescriptor.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransportDescriptor.


        :param type: The type of this TransportDescriptor.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version(self):
        """Gets the version of this TransportDescriptor.

        The version of the protocol used.

        :return: The version of this TransportDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransportDescriptor.

        The version of the protocol used.

        :param version: The version of this TransportDescriptor.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
