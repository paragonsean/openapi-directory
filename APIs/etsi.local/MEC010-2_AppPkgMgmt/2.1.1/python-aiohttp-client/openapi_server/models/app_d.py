# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_external_cpd import AppExternalCpd
from openapi_server.models.dns_rule_descriptor import DNSRuleDescriptor
from openapi_server.models.feature_dependency import FeatureDependency
from openapi_server.models.latency_descriptor import LatencyDescriptor
from openapi_server.models.service_dependency import ServiceDependency
from openapi_server.models.service_descriptor import ServiceDescriptor
from openapi_server.models.traffic_rule_descriptor import TrafficRuleDescriptor
from openapi_server.models.transport_dependency import TransportDependency
from openapi_server import util


class AppD(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_did: str=None, app_dns_rule: List[DNSRuleDescriptor]=None, app_d_version: str=None, app_description: str=None, app_ext_cpd: List[AppExternalCpd]=None, app_feature_optional: List[FeatureDependency]=None, app_feature_required: List[FeatureDependency]=None, app_info_name: str=None, app_latency: LatencyDescriptor=None, app_name: str=None, app_provider: str=None, app_service_optional: List[ServiceDependency]=None, app_service_produced: List[ServiceDescriptor]=None, app_service_required: List[ServiceDependency]=None, app_soft_version: str=None, app_traffic_rule: List[TrafficRuleDescriptor]=None, change_app_instance_state_op_config: str=None, mec_version: List[str]=None, sw_image_descriptor: str=None, terminate_app_instance_op_config: str=None, transport_dependencies: List[TransportDependency]=None, virtual_compute_descriptor: str=None, virtual_storage_descriptor: List[str]=None):
        """AppD - a model defined in OpenAPI

        :param app_did: The app_did of this AppD.
        :param app_dns_rule: The app_dns_rule of this AppD.
        :param app_d_version: The app_d_version of this AppD.
        :param app_description: The app_description of this AppD.
        :param app_ext_cpd: The app_ext_cpd of this AppD.
        :param app_feature_optional: The app_feature_optional of this AppD.
        :param app_feature_required: The app_feature_required of this AppD.
        :param app_info_name: The app_info_name of this AppD.
        :param app_latency: The app_latency of this AppD.
        :param app_name: The app_name of this AppD.
        :param app_provider: The app_provider of this AppD.
        :param app_service_optional: The app_service_optional of this AppD.
        :param app_service_produced: The app_service_produced of this AppD.
        :param app_service_required: The app_service_required of this AppD.
        :param app_soft_version: The app_soft_version of this AppD.
        :param app_traffic_rule: The app_traffic_rule of this AppD.
        :param change_app_instance_state_op_config: The change_app_instance_state_op_config of this AppD.
        :param mec_version: The mec_version of this AppD.
        :param sw_image_descriptor: The sw_image_descriptor of this AppD.
        :param terminate_app_instance_op_config: The terminate_app_instance_op_config of this AppD.
        :param transport_dependencies: The transport_dependencies of this AppD.
        :param virtual_compute_descriptor: The virtual_compute_descriptor of this AppD.
        :param virtual_storage_descriptor: The virtual_storage_descriptor of this AppD.
        """
        self.openapi_types = {
            'app_did': str,
            'app_dns_rule': List[DNSRuleDescriptor],
            'app_d_version': str,
            'app_description': str,
            'app_ext_cpd': List[AppExternalCpd],
            'app_feature_optional': List[FeatureDependency],
            'app_feature_required': List[FeatureDependency],
            'app_info_name': str,
            'app_latency': LatencyDescriptor,
            'app_name': str,
            'app_provider': str,
            'app_service_optional': List[ServiceDependency],
            'app_service_produced': List[ServiceDescriptor],
            'app_service_required': List[ServiceDependency],
            'app_soft_version': str,
            'app_traffic_rule': List[TrafficRuleDescriptor],
            'change_app_instance_state_op_config': str,
            'mec_version': List[str],
            'sw_image_descriptor': str,
            'terminate_app_instance_op_config': str,
            'transport_dependencies': List[TransportDependency],
            'virtual_compute_descriptor': str,
            'virtual_storage_descriptor': List[str]
        }

        self.attribute_map = {
            'app_did': 'appDId',
            'app_dns_rule': 'appDNSRule',
            'app_d_version': 'appDVersion',
            'app_description': 'appDescription',
            'app_ext_cpd': 'appExtCpd',
            'app_feature_optional': 'appFeatureOptional',
            'app_feature_required': 'appFeatureRequired',
            'app_info_name': 'appInfoName',
            'app_latency': 'appLatency',
            'app_name': 'appName',
            'app_provider': 'appProvider',
            'app_service_optional': 'appServiceOptional',
            'app_service_produced': 'appServiceProduced',
            'app_service_required': 'appServiceRequired',
            'app_soft_version': 'appSoftVersion',
            'app_traffic_rule': 'appTrafficRule',
            'change_app_instance_state_op_config': 'changeAppInstanceStateOpConfig',
            'mec_version': 'mecVersion',
            'sw_image_descriptor': 'swImageDescriptor',
            'terminate_app_instance_op_config': 'terminateAppInstanceOpConfig',
            'transport_dependencies': 'transportDependencies',
            'virtual_compute_descriptor': 'virtualComputeDescriptor',
            'virtual_storage_descriptor': 'virtualStorageDescriptor'
        }

        self._app_did = app_did
        self._app_dns_rule = app_dns_rule
        self._app_d_version = app_d_version
        self._app_description = app_description
        self._app_ext_cpd = app_ext_cpd
        self._app_feature_optional = app_feature_optional
        self._app_feature_required = app_feature_required
        self._app_info_name = app_info_name
        self._app_latency = app_latency
        self._app_name = app_name
        self._app_provider = app_provider
        self._app_service_optional = app_service_optional
        self._app_service_produced = app_service_produced
        self._app_service_required = app_service_required
        self._app_soft_version = app_soft_version
        self._app_traffic_rule = app_traffic_rule
        self._change_app_instance_state_op_config = change_app_instance_state_op_config
        self._mec_version = mec_version
        self._sw_image_descriptor = sw_image_descriptor
        self._terminate_app_instance_op_config = terminate_app_instance_op_config
        self._transport_dependencies = transport_dependencies
        self._virtual_compute_descriptor = virtual_compute_descriptor
        self._virtual_storage_descriptor = virtual_storage_descriptor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppD':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppD of this AppD.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_did(self):
        """Gets the app_did of this AppD.

        Identifier of this MEC application descriptor. This attribute shall be globally unique. See note 1.

        :return: The app_did of this AppD.
        :rtype: str
        """
        return self._app_did

    @app_did.setter
    def app_did(self, app_did):
        """Sets the app_did of this AppD.

        Identifier of this MEC application descriptor. This attribute shall be globally unique. See note 1.

        :param app_did: The app_did of this AppD.
        :type app_did: str
        """
        if app_did is None:
            raise ValueError("Invalid value for `app_did`, must not be `None`")

        self._app_did = app_did

    @property
    def app_dns_rule(self):
        """Gets the app_dns_rule of this AppD.

        Describes DNS rules the MEC application requires.

        :return: The app_dns_rule of this AppD.
        :rtype: List[DNSRuleDescriptor]
        """
        return self._app_dns_rule

    @app_dns_rule.setter
    def app_dns_rule(self, app_dns_rule):
        """Sets the app_dns_rule of this AppD.

        Describes DNS rules the MEC application requires.

        :param app_dns_rule: The app_dns_rule of this AppD.
        :type app_dns_rule: List[DNSRuleDescriptor]
        """
        if app_dns_rule is not None and len(app_dns_rule) < 0:
            raise ValueError("Invalid value for `app_dns_rule`, number of items must be greater than or equal to `0`")

        self._app_dns_rule = app_dns_rule

    @property
    def app_d_version(self):
        """Gets the app_d_version of this AppD.

        Identifies the version of the application descriptor.

        :return: The app_d_version of this AppD.
        :rtype: str
        """
        return self._app_d_version

    @app_d_version.setter
    def app_d_version(self, app_d_version):
        """Sets the app_d_version of this AppD.

        Identifies the version of the application descriptor.

        :param app_d_version: The app_d_version of this AppD.
        :type app_d_version: str
        """
        if app_d_version is None:
            raise ValueError("Invalid value for `app_d_version`, must not be `None`")

        self._app_d_version = app_d_version

    @property
    def app_description(self):
        """Gets the app_description of this AppD.

        Human readable description of the MEC application.

        :return: The app_description of this AppD.
        :rtype: str
        """
        return self._app_description

    @app_description.setter
    def app_description(self, app_description):
        """Sets the app_description of this AppD.

        Human readable description of the MEC application.

        :param app_description: The app_description of this AppD.
        :type app_description: str
        """
        if app_description is None:
            raise ValueError("Invalid value for `app_description`, must not be `None`")

        self._app_description = app_description

    @property
    def app_ext_cpd(self):
        """Gets the app_ext_cpd of this AppD.

        Describes external interface(s) exposed by this MEC application.

        :return: The app_ext_cpd of this AppD.
        :rtype: List[AppExternalCpd]
        """
        return self._app_ext_cpd

    @app_ext_cpd.setter
    def app_ext_cpd(self, app_ext_cpd):
        """Sets the app_ext_cpd of this AppD.

        Describes external interface(s) exposed by this MEC application.

        :param app_ext_cpd: The app_ext_cpd of this AppD.
        :type app_ext_cpd: List[AppExternalCpd]
        """
        if app_ext_cpd is not None and len(app_ext_cpd) < 0:
            raise ValueError("Invalid value for `app_ext_cpd`, number of items must be greater than or equal to `0`")

        self._app_ext_cpd = app_ext_cpd

    @property
    def app_feature_optional(self):
        """Gets the app_feature_optional of this AppD.

        Describes features a MEC application may use if available.

        :return: The app_feature_optional of this AppD.
        :rtype: List[FeatureDependency]
        """
        return self._app_feature_optional

    @app_feature_optional.setter
    def app_feature_optional(self, app_feature_optional):
        """Sets the app_feature_optional of this AppD.

        Describes features a MEC application may use if available.

        :param app_feature_optional: The app_feature_optional of this AppD.
        :type app_feature_optional: List[FeatureDependency]
        """
        if app_feature_optional is not None and len(app_feature_optional) < 0:
            raise ValueError("Invalid value for `app_feature_optional`, number of items must be greater than or equal to `0`")

        self._app_feature_optional = app_feature_optional

    @property
    def app_feature_required(self):
        """Gets the app_feature_required of this AppD.

        Describes features a MEC application requires to run.

        :return: The app_feature_required of this AppD.
        :rtype: List[FeatureDependency]
        """
        return self._app_feature_required

    @app_feature_required.setter
    def app_feature_required(self, app_feature_required):
        """Sets the app_feature_required of this AppD.

        Describes features a MEC application requires to run.

        :param app_feature_required: The app_feature_required of this AppD.
        :type app_feature_required: List[FeatureDependency]
        """
        if app_feature_required is not None and len(app_feature_required) < 0:
            raise ValueError("Invalid value for `app_feature_required`, number of items must be greater than or equal to `0`")

        self._app_feature_required = app_feature_required

    @property
    def app_info_name(self):
        """Gets the app_info_name of this AppD.

        Human readable name for the MEC application.

        :return: The app_info_name of this AppD.
        :rtype: str
        """
        return self._app_info_name

    @app_info_name.setter
    def app_info_name(self, app_info_name):
        """Sets the app_info_name of this AppD.

        Human readable name for the MEC application.

        :param app_info_name: The app_info_name of this AppD.
        :type app_info_name: str
        """

        self._app_info_name = app_info_name

    @property
    def app_latency(self):
        """Gets the app_latency of this AppD.


        :return: The app_latency of this AppD.
        :rtype: LatencyDescriptor
        """
        return self._app_latency

    @app_latency.setter
    def app_latency(self, app_latency):
        """Sets the app_latency of this AppD.


        :param app_latency: The app_latency of this AppD.
        :type app_latency: LatencyDescriptor
        """

        self._app_latency = app_latency

    @property
    def app_name(self):
        """Gets the app_name of this AppD.

        Name to identify the MEC application.

        :return: The app_name of this AppD.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AppD.

        Name to identify the MEC application.

        :param app_name: The app_name of this AppD.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def app_provider(self):
        """Gets the app_provider of this AppD.

        Provider of the application and of the AppD.

        :return: The app_provider of this AppD.
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider):
        """Sets the app_provider of this AppD.

        Provider of the application and of the AppD.

        :param app_provider: The app_provider of this AppD.
        :type app_provider: str
        """
        if app_provider is None:
            raise ValueError("Invalid value for `app_provider`, must not be `None`")

        self._app_provider = app_provider

    @property
    def app_service_optional(self):
        """Gets the app_service_optional of this AppD.

        Describes services a MEC application may use if available.

        :return: The app_service_optional of this AppD.
        :rtype: List[ServiceDependency]
        """
        return self._app_service_optional

    @app_service_optional.setter
    def app_service_optional(self, app_service_optional):
        """Sets the app_service_optional of this AppD.

        Describes services a MEC application may use if available.

        :param app_service_optional: The app_service_optional of this AppD.
        :type app_service_optional: List[ServiceDependency]
        """
        if app_service_optional is not None and len(app_service_optional) < 0:
            raise ValueError("Invalid value for `app_service_optional`, number of items must be greater than or equal to `0`")

        self._app_service_optional = app_service_optional

    @property
    def app_service_produced(self):
        """Gets the app_service_produced of this AppD.

        Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.

        :return: The app_service_produced of this AppD.
        :rtype: List[ServiceDescriptor]
        """
        return self._app_service_produced

    @app_service_produced.setter
    def app_service_produced(self, app_service_produced):
        """Sets the app_service_produced of this AppD.

        Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.

        :param app_service_produced: The app_service_produced of this AppD.
        :type app_service_produced: List[ServiceDescriptor]
        """
        if app_service_produced is not None and len(app_service_produced) < 0:
            raise ValueError("Invalid value for `app_service_produced`, number of items must be greater than or equal to `0`")

        self._app_service_produced = app_service_produced

    @property
    def app_service_required(self):
        """Gets the app_service_required of this AppD.

        Describes services a MEC application requires to run.

        :return: The app_service_required of this AppD.
        :rtype: List[ServiceDependency]
        """
        return self._app_service_required

    @app_service_required.setter
    def app_service_required(self, app_service_required):
        """Sets the app_service_required of this AppD.

        Describes services a MEC application requires to run.

        :param app_service_required: The app_service_required of this AppD.
        :type app_service_required: List[ServiceDependency]
        """
        if app_service_required is not None and len(app_service_required) < 0:
            raise ValueError("Invalid value for `app_service_required`, number of items must be greater than or equal to `0`")

        self._app_service_required = app_service_required

    @property
    def app_soft_version(self):
        """Gets the app_soft_version of this AppD.

        Identifies the version of software of the MEC application.

        :return: The app_soft_version of this AppD.
        :rtype: str
        """
        return self._app_soft_version

    @app_soft_version.setter
    def app_soft_version(self, app_soft_version):
        """Sets the app_soft_version of this AppD.

        Identifies the version of software of the MEC application.

        :param app_soft_version: The app_soft_version of this AppD.
        :type app_soft_version: str
        """
        if app_soft_version is None:
            raise ValueError("Invalid value for `app_soft_version`, must not be `None`")

        self._app_soft_version = app_soft_version

    @property
    def app_traffic_rule(self):
        """Gets the app_traffic_rule of this AppD.

        Describes traffic rules the MEC application requires.

        :return: The app_traffic_rule of this AppD.
        :rtype: List[TrafficRuleDescriptor]
        """
        return self._app_traffic_rule

    @app_traffic_rule.setter
    def app_traffic_rule(self, app_traffic_rule):
        """Sets the app_traffic_rule of this AppD.

        Describes traffic rules the MEC application requires.

        :param app_traffic_rule: The app_traffic_rule of this AppD.
        :type app_traffic_rule: List[TrafficRuleDescriptor]
        """
        if app_traffic_rule is not None and len(app_traffic_rule) < 0:
            raise ValueError("Invalid value for `app_traffic_rule`, number of items must be greater than or equal to `0`")

        self._app_traffic_rule = app_traffic_rule

    @property
    def change_app_instance_state_op_config(self):
        """Gets the change_app_instance_state_op_config of this AppD.

        NFV

        :return: The change_app_instance_state_op_config of this AppD.
        :rtype: str
        """
        return self._change_app_instance_state_op_config

    @change_app_instance_state_op_config.setter
    def change_app_instance_state_op_config(self, change_app_instance_state_op_config):
        """Sets the change_app_instance_state_op_config of this AppD.

        NFV

        :param change_app_instance_state_op_config: The change_app_instance_state_op_config of this AppD.
        :type change_app_instance_state_op_config: str
        """

        self._change_app_instance_state_op_config = change_app_instance_state_op_config

    @property
    def mec_version(self):
        """Gets the mec_version of this AppD.

        Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.

        :return: The mec_version of this AppD.
        :rtype: List[str]
        """
        return self._mec_version

    @mec_version.setter
    def mec_version(self, mec_version):
        """Sets the mec_version of this AppD.

        Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.

        :param mec_version: The mec_version of this AppD.
        :type mec_version: List[str]
        """
        if mec_version is None:
            raise ValueError("Invalid value for `mec_version`, must not be `None`")
        if mec_version is not None and len(mec_version) < 1:
            raise ValueError("Invalid value for `mec_version`, number of items must be greater than or equal to `1`")

        self._mec_version = mec_version

    @property
    def sw_image_descriptor(self):
        """Gets the sw_image_descriptor of this AppD.

        Ref NFV

        :return: The sw_image_descriptor of this AppD.
        :rtype: str
        """
        return self._sw_image_descriptor

    @sw_image_descriptor.setter
    def sw_image_descriptor(self, sw_image_descriptor):
        """Sets the sw_image_descriptor of this AppD.

        Ref NFV

        :param sw_image_descriptor: The sw_image_descriptor of this AppD.
        :type sw_image_descriptor: str
        """
        if sw_image_descriptor is None:
            raise ValueError("Invalid value for `sw_image_descriptor`, must not be `None`")

        self._sw_image_descriptor = sw_image_descriptor

    @property
    def terminate_app_instance_op_config(self):
        """Gets the terminate_app_instance_op_config of this AppD.

        NFV

        :return: The terminate_app_instance_op_config of this AppD.
        :rtype: str
        """
        return self._terminate_app_instance_op_config

    @terminate_app_instance_op_config.setter
    def terminate_app_instance_op_config(self, terminate_app_instance_op_config):
        """Sets the terminate_app_instance_op_config of this AppD.

        NFV

        :param terminate_app_instance_op_config: The terminate_app_instance_op_config of this AppD.
        :type terminate_app_instance_op_config: str
        """

        self._terminate_app_instance_op_config = terminate_app_instance_op_config

    @property
    def transport_dependencies(self):
        """Gets the transport_dependencies of this AppD.

        Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.

        :return: The transport_dependencies of this AppD.
        :rtype: List[TransportDependency]
        """
        return self._transport_dependencies

    @transport_dependencies.setter
    def transport_dependencies(self, transport_dependencies):
        """Sets the transport_dependencies of this AppD.

        Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.

        :param transport_dependencies: The transport_dependencies of this AppD.
        :type transport_dependencies: List[TransportDependency]
        """
        if transport_dependencies is not None and len(transport_dependencies) < 0:
            raise ValueError("Invalid value for `transport_dependencies`, number of items must be greater than or equal to `0`")

        self._transport_dependencies = transport_dependencies

    @property
    def virtual_compute_descriptor(self):
        """Gets the virtual_compute_descriptor of this AppD.

        Ref NFV

        :return: The virtual_compute_descriptor of this AppD.
        :rtype: str
        """
        return self._virtual_compute_descriptor

    @virtual_compute_descriptor.setter
    def virtual_compute_descriptor(self, virtual_compute_descriptor):
        """Sets the virtual_compute_descriptor of this AppD.

        Ref NFV

        :param virtual_compute_descriptor: The virtual_compute_descriptor of this AppD.
        :type virtual_compute_descriptor: str
        """
        if virtual_compute_descriptor is None:
            raise ValueError("Invalid value for `virtual_compute_descriptor`, must not be `None`")

        self._virtual_compute_descriptor = virtual_compute_descriptor

    @property
    def virtual_storage_descriptor(self):
        """Gets the virtual_storage_descriptor of this AppD.

        Defines descriptors of virtual storage resources to be used by the MEC application.

        :return: The virtual_storage_descriptor of this AppD.
        :rtype: List[str]
        """
        return self._virtual_storage_descriptor

    @virtual_storage_descriptor.setter
    def virtual_storage_descriptor(self, virtual_storage_descriptor):
        """Sets the virtual_storage_descriptor of this AppD.

        Defines descriptors of virtual storage resources to be used by the MEC application.

        :param virtual_storage_descriptor: The virtual_storage_descriptor of this AppD.
        :type virtual_storage_descriptor: List[str]
        """
        if virtual_storage_descriptor is not None and len(virtual_storage_descriptor) < 0:
            raise ValueError("Invalid value for `virtual_storage_descriptor`, number of items must be greater than or equal to `0`")

        self._virtual_storage_descriptor = virtual_storage_descriptor
