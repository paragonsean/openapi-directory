# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address_type import IpAddressType
from openapi_server import util


class DNSRuleDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_rule_id: str=None, domain_name: str=None, ip_address: str=None, ip_address_type: IpAddressType=None, ttl: int=None):
        """DNSRuleDescriptor - a model defined in OpenAPI

        :param dns_rule_id: The dns_rule_id of this DNSRuleDescriptor.
        :param domain_name: The domain_name of this DNSRuleDescriptor.
        :param ip_address: The ip_address of this DNSRuleDescriptor.
        :param ip_address_type: The ip_address_type of this DNSRuleDescriptor.
        :param ttl: The ttl of this DNSRuleDescriptor.
        """
        self.openapi_types = {
            'dns_rule_id': str,
            'domain_name': str,
            'ip_address': str,
            'ip_address_type': IpAddressType,
            'ttl': int
        }

        self.attribute_map = {
            'dns_rule_id': 'dnsRuleId',
            'domain_name': 'domainName',
            'ip_address': 'ipAddress',
            'ip_address_type': 'ipAddressType',
            'ttl': 'ttl'
        }

        self._dns_rule_id = dns_rule_id
        self._domain_name = domain_name
        self._ip_address = ip_address
        self._ip_address_type = ip_address_type
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DNSRuleDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DNSRuleDescriptor of this DNSRuleDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_rule_id(self):
        """Gets the dns_rule_id of this DNSRuleDescriptor.

        Identifies the DNS Rule

        :return: The dns_rule_id of this DNSRuleDescriptor.
        :rtype: str
        """
        return self._dns_rule_id

    @dns_rule_id.setter
    def dns_rule_id(self, dns_rule_id):
        """Sets the dns_rule_id of this DNSRuleDescriptor.

        Identifies the DNS Rule

        :param dns_rule_id: The dns_rule_id of this DNSRuleDescriptor.
        :type dns_rule_id: str
        """
        if dns_rule_id is None:
            raise ValueError("Invalid value for `dns_rule_id`, must not be `None`")

        self._dns_rule_id = dns_rule_id

    @property
    def domain_name(self):
        """Gets the domain_name of this DNSRuleDescriptor.

        FQDN of the DNS rule

        :return: The domain_name of this DNSRuleDescriptor.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DNSRuleDescriptor.

        FQDN of the DNS rule

        :param domain_name: The domain_name of this DNSRuleDescriptor.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def ip_address(self):
        """Gets the ip_address of this DNSRuleDescriptor.

        IP address given by the DNS rule

        :return: The ip_address of this DNSRuleDescriptor.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this DNSRuleDescriptor.

        IP address given by the DNS rule

        :param ip_address: The ip_address of this DNSRuleDescriptor.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this DNSRuleDescriptor.


        :return: The ip_address_type of this DNSRuleDescriptor.
        :rtype: IpAddressType
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this DNSRuleDescriptor.


        :param ip_address_type: The ip_address_type of this DNSRuleDescriptor.
        :type ip_address_type: IpAddressType
        """
        if ip_address_type is None:
            raise ValueError("Invalid value for `ip_address_type`, must not be `None`")

        self._ip_address_type = ip_address_type

    @property
    def ttl(self):
        """Gets the ttl of this DNSRuleDescriptor.

        Time-to-live value

        :return: The ttl of this DNSRuleDescriptor.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DNSRuleDescriptor.

        Time-to-live value

        :param ttl: The ttl of this DNSRuleDescriptor.
        :type ttl: int
        """

        self._ttl = ttl
