# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrafficFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, d_scp: int=None, dst_address: List[str]=None, dst_port: List[str]=None, dst_tunnel_port: List[str]=None, protocol: List[str]=None, q_ci: int=None, src_address: List[str]=None, src_port: List[str]=None, src_tunnel_address: List[str]=None, src_tunnel_port: List[str]=None, t_c: int=None, tag: List[str]=None, tgt_tunnel_address: List[str]=None):
        """TrafficFilter - a model defined in OpenAPI

        :param d_scp: The d_scp of this TrafficFilter.
        :param dst_address: The dst_address of this TrafficFilter.
        :param dst_port: The dst_port of this TrafficFilter.
        :param dst_tunnel_port: The dst_tunnel_port of this TrafficFilter.
        :param protocol: The protocol of this TrafficFilter.
        :param q_ci: The q_ci of this TrafficFilter.
        :param src_address: The src_address of this TrafficFilter.
        :param src_port: The src_port of this TrafficFilter.
        :param src_tunnel_address: The src_tunnel_address of this TrafficFilter.
        :param src_tunnel_port: The src_tunnel_port of this TrafficFilter.
        :param t_c: The t_c of this TrafficFilter.
        :param tag: The tag of this TrafficFilter.
        :param tgt_tunnel_address: The tgt_tunnel_address of this TrafficFilter.
        """
        self.openapi_types = {
            'd_scp': int,
            'dst_address': List[str],
            'dst_port': List[str],
            'dst_tunnel_port': List[str],
            'protocol': List[str],
            'q_ci': int,
            'src_address': List[str],
            'src_port': List[str],
            'src_tunnel_address': List[str],
            'src_tunnel_port': List[str],
            't_c': int,
            'tag': List[str],
            'tgt_tunnel_address': List[str]
        }

        self.attribute_map = {
            'd_scp': 'dSCP',
            'dst_address': 'dstAddress',
            'dst_port': 'dstPort',
            'dst_tunnel_port': 'dstTunnelPort',
            'protocol': 'protocol',
            'q_ci': 'qCI',
            'src_address': 'srcAddress',
            'src_port': 'srcPort',
            'src_tunnel_address': 'srcTunnelAddress',
            'src_tunnel_port': 'srcTunnelPort',
            't_c': 'tC',
            'tag': 'tag',
            'tgt_tunnel_address': 'tgtTunnelAddress'
        }

        self._d_scp = d_scp
        self._dst_address = dst_address
        self._dst_port = dst_port
        self._dst_tunnel_port = dst_tunnel_port
        self._protocol = protocol
        self._q_ci = q_ci
        self._src_address = src_address
        self._src_port = src_port
        self._src_tunnel_address = src_tunnel_address
        self._src_tunnel_port = src_tunnel_port
        self._t_c = t_c
        self._tag = tag
        self._tgt_tunnel_address = tgt_tunnel_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficFilter of this TrafficFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def d_scp(self):
        """Gets the d_scp of this TrafficFilter.

        Used to match all IPv4 packets that have the same DSCP.

        :return: The d_scp of this TrafficFilter.
        :rtype: int
        """
        return self._d_scp

    @d_scp.setter
    def d_scp(self, d_scp):
        """Sets the d_scp of this TrafficFilter.

        Used to match all IPv4 packets that have the same DSCP.

        :param d_scp: The d_scp of this TrafficFilter.
        :type d_scp: int
        """

        self._d_scp = d_scp

    @property
    def dst_address(self):
        """Gets the dst_address of this TrafficFilter.

        A IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.

        :return: The dst_address of this TrafficFilter.
        :rtype: List[str]
        """
        return self._dst_address

    @dst_address.setter
    def dst_address(self, dst_address):
        """Sets the dst_address of this TrafficFilter.

        A IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.

        :param dst_address: The dst_address of this TrafficFilter.
        :type dst_address: List[str]
        """
        if dst_address is not None and len(dst_address) < 0:
            raise ValueError("Invalid value for `dst_address`, number of items must be greater than or equal to `0`")

        self._dst_address = dst_address

    @property
    def dst_port(self):
        """Gets the dst_port of this TrafficFilter.

        A port or a range of ports.

        :return: The dst_port of this TrafficFilter.
        :rtype: List[str]
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this TrafficFilter.

        A port or a range of ports.

        :param dst_port: The dst_port of this TrafficFilter.
        :type dst_port: List[str]
        """
        if dst_port is not None and len(dst_port) < 0:
            raise ValueError("Invalid value for `dst_port`, number of items must be greater than or equal to `0`")

        self._dst_port = dst_port

    @property
    def dst_tunnel_port(self):
        """Gets the dst_tunnel_port of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :return: The dst_tunnel_port of this TrafficFilter.
        :rtype: List[str]
        """
        return self._dst_tunnel_port

    @dst_tunnel_port.setter
    def dst_tunnel_port(self, dst_tunnel_port):
        """Sets the dst_tunnel_port of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :param dst_tunnel_port: The dst_tunnel_port of this TrafficFilter.
        :type dst_tunnel_port: List[str]
        """
        if dst_tunnel_port is not None and len(dst_tunnel_port) < 0:
            raise ValueError("Invalid value for `dst_tunnel_port`, number of items must be greater than or equal to `0`")

        self._dst_tunnel_port = dst_tunnel_port

    @property
    def protocol(self):
        """Gets the protocol of this TrafficFilter.

        Specify the protocol of the traffic filter.

        :return: The protocol of this TrafficFilter.
        :rtype: List[str]
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this TrafficFilter.

        Specify the protocol of the traffic filter.

        :param protocol: The protocol of this TrafficFilter.
        :type protocol: List[str]
        """
        if protocol is not None and len(protocol) < 0:
            raise ValueError("Invalid value for `protocol`, number of items must be greater than or equal to `0`")

        self._protocol = protocol

    @property
    def q_ci(self):
        """Gets the q_ci of this TrafficFilter.

        Used to match all packets that have the same QCI.

        :return: The q_ci of this TrafficFilter.
        :rtype: int
        """
        return self._q_ci

    @q_ci.setter
    def q_ci(self, q_ci):
        """Sets the q_ci of this TrafficFilter.

        Used to match all packets that have the same QCI.

        :param q_ci: The q_ci of this TrafficFilter.
        :type q_ci: int
        """

        self._q_ci = q_ci

    @property
    def src_address(self):
        """Gets the src_address of this TrafficFilter.

        An IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.

        :return: The src_address of this TrafficFilter.
        :rtype: List[str]
        """
        return self._src_address

    @src_address.setter
    def src_address(self, src_address):
        """Sets the src_address of this TrafficFilter.

        An IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.

        :param src_address: The src_address of this TrafficFilter.
        :type src_address: List[str]
        """
        if src_address is not None and len(src_address) < 0:
            raise ValueError("Invalid value for `src_address`, number of items must be greater than or equal to `0`")

        self._src_address = src_address

    @property
    def src_port(self):
        """Gets the src_port of this TrafficFilter.

        A port or a range of ports.

        :return: The src_port of this TrafficFilter.
        :rtype: List[str]
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this TrafficFilter.

        A port or a range of ports.

        :param src_port: The src_port of this TrafficFilter.
        :type src_port: List[str]
        """
        if src_port is not None and len(src_port) < 0:
            raise ValueError("Invalid value for `src_port`, number of items must be greater than or equal to `0`")

        self._src_port = src_port

    @property
    def src_tunnel_address(self):
        """Gets the src_tunnel_address of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :return: The src_tunnel_address of this TrafficFilter.
        :rtype: List[str]
        """
        return self._src_tunnel_address

    @src_tunnel_address.setter
    def src_tunnel_address(self, src_tunnel_address):
        """Sets the src_tunnel_address of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :param src_tunnel_address: The src_tunnel_address of this TrafficFilter.
        :type src_tunnel_address: List[str]
        """
        if src_tunnel_address is not None and len(src_tunnel_address) < 0:
            raise ValueError("Invalid value for `src_tunnel_address`, number of items must be greater than or equal to `0`")

        self._src_tunnel_address = src_tunnel_address

    @property
    def src_tunnel_port(self):
        """Gets the src_tunnel_port of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :return: The src_tunnel_port of this TrafficFilter.
        :rtype: List[str]
        """
        return self._src_tunnel_port

    @src_tunnel_port.setter
    def src_tunnel_port(self, src_tunnel_port):
        """Sets the src_tunnel_port of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :param src_tunnel_port: The src_tunnel_port of this TrafficFilter.
        :type src_tunnel_port: List[str]
        """
        if src_tunnel_port is not None and len(src_tunnel_port) < 0:
            raise ValueError("Invalid value for `src_tunnel_port`, number of items must be greater than or equal to `0`")

        self._src_tunnel_port = src_tunnel_port

    @property
    def t_c(self):
        """Gets the t_c of this TrafficFilter.

        Used to match all IPv6 packets that have the same TC.

        :return: The t_c of this TrafficFilter.
        :rtype: int
        """
        return self._t_c

    @t_c.setter
    def t_c(self, t_c):
        """Sets the t_c of this TrafficFilter.

        Used to match all IPv6 packets that have the same TC.

        :param t_c: The t_c of this TrafficFilter.
        :type t_c: int
        """

        self._t_c = t_c

    @property
    def tag(self):
        """Gets the tag of this TrafficFilter.

        Used for tag based traffic rule.

        :return: The tag of this TrafficFilter.
        :rtype: List[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this TrafficFilter.

        Used for tag based traffic rule.

        :param tag: The tag of this TrafficFilter.
        :type tag: List[str]
        """
        if tag is not None and len(tag) < 0:
            raise ValueError("Invalid value for `tag`, number of items must be greater than or equal to `0`")

        self._tag = tag

    @property
    def tgt_tunnel_address(self):
        """Gets the tgt_tunnel_address of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :return: The tgt_tunnel_address of this TrafficFilter.
        :rtype: List[str]
        """
        return self._tgt_tunnel_address

    @tgt_tunnel_address.setter
    def tgt_tunnel_address(self, tgt_tunnel_address):
        """Sets the tgt_tunnel_address of this TrafficFilter.

        Used for GTP tunnel based traffic rule.

        :param tgt_tunnel_address: The tgt_tunnel_address of this TrafficFilter.
        :type tgt_tunnel_address: List[str]
        """
        if tgt_tunnel_address is not None and len(tgt_tunnel_address) < 0:
            raise ValueError("Invalid value for `tgt_tunnel_address`, number of items must be greater than or equal to `0`")

        self._tgt_tunnel_address = tgt_tunnel_address
