# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_pkg_notification_links import AppPkgNotificationLinks
from openapi_server.models.app_pkg_notification_type import AppPkgNotificationType
from openapi_server.models.time_stamp import TimeStamp
from openapi_server import util


class AppPkgNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AppPkgNotificationLinks=None, app_did: str=None, app_pkg_id: str=None, id: str=None, notification_type: AppPkgNotificationType=None, operational_state: str=None, subscription_id: str=None, time_stamp: TimeStamp=None):
        """AppPkgNotification - a model defined in OpenAPI

        :param links: The links of this AppPkgNotification.
        :param app_did: The app_did of this AppPkgNotification.
        :param app_pkg_id: The app_pkg_id of this AppPkgNotification.
        :param id: The id of this AppPkgNotification.
        :param notification_type: The notification_type of this AppPkgNotification.
        :param operational_state: The operational_state of this AppPkgNotification.
        :param subscription_id: The subscription_id of this AppPkgNotification.
        :param time_stamp: The time_stamp of this AppPkgNotification.
        """
        self.openapi_types = {
            'links': AppPkgNotificationLinks,
            'app_did': str,
            'app_pkg_id': str,
            'id': str,
            'notification_type': AppPkgNotificationType,
            'operational_state': str,
            'subscription_id': str,
            'time_stamp': TimeStamp
        }

        self.attribute_map = {
            'links': '_links',
            'app_did': 'appDId',
            'app_pkg_id': 'appPkgId',
            'id': 'id',
            'notification_type': 'notificationType',
            'operational_state': 'operationalState',
            'subscription_id': 'subscriptionId',
            'time_stamp': 'timeStamp'
        }

        self._links = links
        self._app_did = app_did
        self._app_pkg_id = app_pkg_id
        self._id = id
        self._notification_type = notification_type
        self._operational_state = operational_state
        self._subscription_id = subscription_id
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPkgNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppPkgNotification of this AppPkgNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AppPkgNotification.


        :return: The links of this AppPkgNotification.
        :rtype: AppPkgNotificationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AppPkgNotification.


        :param links: The links of this AppPkgNotification.
        :type links: AppPkgNotificationLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def app_did(self):
        """Gets the app_did of this AppPkgNotification.

        Identifier of this MEC application descriptor. This attribute shall be globally unique.

        :return: The app_did of this AppPkgNotification.
        :rtype: str
        """
        return self._app_did

    @app_did.setter
    def app_did(self, app_did):
        """Sets the app_did of this AppPkgNotification.

        Identifier of this MEC application descriptor. This attribute shall be globally unique.

        :param app_did: The app_did of this AppPkgNotification.
        :type app_did: str
        """
        if app_did is None:
            raise ValueError("Invalid value for `app_did`, must not be `None`")

        self._app_did = app_did

    @property
    def app_pkg_id(self):
        """Gets the app_pkg_id of this AppPkgNotification.

        Identifier of the onboarded application package.

        :return: The app_pkg_id of this AppPkgNotification.
        :rtype: str
        """
        return self._app_pkg_id

    @app_pkg_id.setter
    def app_pkg_id(self, app_pkg_id):
        """Sets the app_pkg_id of this AppPkgNotification.

        Identifier of the onboarded application package.

        :param app_pkg_id: The app_pkg_id of this AppPkgNotification.
        :type app_pkg_id: str
        """
        if app_pkg_id is None:
            raise ValueError("Invalid value for `app_pkg_id`, must not be `None`")

        self._app_pkg_id = app_pkg_id

    @property
    def id(self):
        """Gets the id of this AppPkgNotification.

        ''

        :return: The id of this AppPkgNotification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppPkgNotification.

        ''

        :param id: The id of this AppPkgNotification.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def notification_type(self):
        """Gets the notification_type of this AppPkgNotification.


        :return: The notification_type of this AppPkgNotification.
        :rtype: AppPkgNotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this AppPkgNotification.


        :param notification_type: The notification_type of this AppPkgNotification.
        :type notification_type: AppPkgNotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")

        self._notification_type = notification_type

    @property
    def operational_state(self):
        """Gets the operational_state of this AppPkgNotification.


        :return: The operational_state of this AppPkgNotification.
        :rtype: str
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this AppPkgNotification.


        :param operational_state: The operational_state of this AppPkgNotification.
        :type operational_state: str
        """
        allowed_values = ["DISABLED", "ENABLED"]  # noqa: E501
        if operational_state not in allowed_values:
            raise ValueError(
                "Invalid value for `operational_state` ({0}), must be one of {1}"
                .format(operational_state, allowed_values)
            )

        self._operational_state = operational_state

    @property
    def subscription_id(self):
        """Gets the subscription_id of this AppPkgNotification.

        Identifier of the subscription related to this notification.

        :return: The subscription_id of this AppPkgNotification.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this AppPkgNotification.

        Identifier of the subscription related to this notification.

        :param subscription_id: The subscription_id of this AppPkgNotification.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id

    @property
    def time_stamp(self):
        """Gets the time_stamp of this AppPkgNotification.


        :return: The time_stamp of this AppPkgNotification.
        :rtype: TimeStamp
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this AppPkgNotification.


        :param time_stamp: The time_stamp of this AppPkgNotification.
        :type time_stamp: TimeStamp
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
