# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link_type import LinkType
from openapi_server import util


class AppPkgInfoLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_d: LinkType=None, app_pkg_content: LinkType=None, _self: LinkType=None):
        """AppPkgInfoLinks - a model defined in OpenAPI

        :param app_d: The app_d of this AppPkgInfoLinks.
        :param app_pkg_content: The app_pkg_content of this AppPkgInfoLinks.
        :param _self: The _self of this AppPkgInfoLinks.
        """
        self.openapi_types = {
            'app_d': LinkType,
            'app_pkg_content': LinkType,
            '_self': LinkType
        }

        self.attribute_map = {
            'app_d': 'appD',
            'app_pkg_content': 'appPkgContent',
            '_self': 'self'
        }

        self._app_d = app_d
        self._app_pkg_content = app_pkg_content
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPkgInfoLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppPkgInfo.links of this AppPkgInfoLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_d(self):
        """Gets the app_d of this AppPkgInfoLinks.


        :return: The app_d of this AppPkgInfoLinks.
        :rtype: LinkType
        """
        return self._app_d

    @app_d.setter
    def app_d(self, app_d):
        """Sets the app_d of this AppPkgInfoLinks.


        :param app_d: The app_d of this AppPkgInfoLinks.
        :type app_d: LinkType
        """
        if app_d is None:
            raise ValueError("Invalid value for `app_d`, must not be `None`")

        self._app_d = app_d

    @property
    def app_pkg_content(self):
        """Gets the app_pkg_content of this AppPkgInfoLinks.


        :return: The app_pkg_content of this AppPkgInfoLinks.
        :rtype: LinkType
        """
        return self._app_pkg_content

    @app_pkg_content.setter
    def app_pkg_content(self, app_pkg_content):
        """Sets the app_pkg_content of this AppPkgInfoLinks.


        :param app_pkg_content: The app_pkg_content of this AppPkgInfoLinks.
        :type app_pkg_content: LinkType
        """
        if app_pkg_content is None:
            raise ValueError("Invalid value for `app_pkg_content`, must not be `None`")

        self._app_pkg_content = app_pkg_content

    @property
    def _self(self):
        """Gets the _self of this AppPkgInfoLinks.


        :return: The _self of this AppPkgInfoLinks.
        :rtype: LinkType
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AppPkgInfoLinks.


        :param _self: The _self of this AppPkgInfoLinks.
        :type _self: LinkType
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
