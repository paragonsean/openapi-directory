# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_name: str=None, version: str=None):
        """FeatureDependency - a model defined in OpenAPI

        :param feature_name: The feature_name of this FeatureDependency.
        :param version: The version of this FeatureDependency.
        """
        self.openapi_types = {
            'feature_name': str,
            'version': str
        }

        self.attribute_map = {
            'feature_name': 'featureName',
            'version': 'version'
        }

        self._feature_name = feature_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureDependency of this FeatureDependency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_name(self):
        """Gets the feature_name of this FeatureDependency.

        The name of the feature, for example, UserApps, UEIdentity, etc.

        :return: The feature_name of this FeatureDependency.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this FeatureDependency.

        The name of the feature, for example, UserApps, UEIdentity, etc.

        :param feature_name: The feature_name of this FeatureDependency.
        :type feature_name: str
        """
        if feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")

        self._feature_name = feature_name

    @property
    def version(self):
        """Gets the version of this FeatureDependency.

        The version of the feature.

        :return: The version of this FeatureDependency.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FeatureDependency.

        The version of the feature.

        :param version: The version of this FeatureDependency.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
