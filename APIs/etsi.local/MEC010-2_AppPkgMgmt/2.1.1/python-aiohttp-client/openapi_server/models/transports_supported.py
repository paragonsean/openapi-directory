# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transport_descriptor import TransportDescriptor
from openapi_server import util


class TransportsSupported(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, serializers: List[str]=None, transport: TransportDescriptor=None):
        """TransportsSupported - a model defined in OpenAPI

        :param serializers: The serializers of this TransportsSupported.
        :param transport: The transport of this TransportsSupported.
        """
        self.openapi_types = {
            'serializers': List[str],
            'transport': TransportDescriptor
        }

        self.attribute_map = {
            'serializers': 'serializers',
            'transport': 'transport'
        }

        self._serializers = serializers
        self._transport = transport

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransportsSupported':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransportsSupported of this TransportsSupported.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serializers(self):
        """Gets the serializers of this TransportsSupported.

        'Information about the serializers in this binding, as defined in the SerializerTypes type in ETSI GS MEC 011 '

        :return: The serializers of this TransportsSupported.
        :rtype: List[str]
        """
        return self._serializers

    @serializers.setter
    def serializers(self, serializers):
        """Sets the serializers of this TransportsSupported.

        'Information about the serializers in this binding, as defined in the SerializerTypes type in ETSI GS MEC 011 '

        :param serializers: The serializers of this TransportsSupported.
        :type serializers: List[str]
        """
        if serializers is not None and len(serializers) < 1:
            raise ValueError("Invalid value for `serializers`, number of items must be greater than or equal to `1`")

        self._serializers = serializers

    @property
    def transport(self):
        """Gets the transport of this TransportsSupported.


        :return: The transport of this TransportsSupported.
        :rtype: TransportDescriptor
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this TransportsSupported.


        :param transport: The transport of this TransportsSupported.
        :type transport: TransportDescriptor
        """

        self._transport = transport
