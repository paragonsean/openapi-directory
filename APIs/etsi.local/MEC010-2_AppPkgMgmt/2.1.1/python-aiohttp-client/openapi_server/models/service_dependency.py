# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transport_dependency import TransportDependency
from openapi_server import util


class ServiceDependency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, requested_permissions: List[str]=None, ser_category: object=None, ser_name: str=None, ser_transport_dependencies: List[TransportDependency]=None, version: str=None):
        """ServiceDependency - a model defined in OpenAPI

        :param requested_permissions: The requested_permissions of this ServiceDependency.
        :param ser_category: The ser_category of this ServiceDependency.
        :param ser_name: The ser_name of this ServiceDependency.
        :param ser_transport_dependencies: The ser_transport_dependencies of this ServiceDependency.
        :param version: The version of this ServiceDependency.
        """
        self.openapi_types = {
            'requested_permissions': List[str],
            'ser_category': object,
            'ser_name': str,
            'ser_transport_dependencies': List[TransportDependency],
            'version': str
        }

        self.attribute_map = {
            'requested_permissions': 'requestedPermissions',
            'ser_category': 'serCategory',
            'ser_name': 'serName',
            'ser_transport_dependencies': 'serTransportDependencies',
            'version': 'version'
        }

        self._requested_permissions = requested_permissions
        self._ser_category = ser_category
        self._ser_name = ser_name
        self._ser_transport_dependencies = ser_transport_dependencies
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDependency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDependency of this ServiceDependency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def requested_permissions(self):
        """Gets the requested_permissions of this ServiceDependency.

        Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009 [4]. The format of this attribute is left for the data model design stage.

        :return: The requested_permissions of this ServiceDependency.
        :rtype: List[str]
        """
        return self._requested_permissions

    @requested_permissions.setter
    def requested_permissions(self, requested_permissions):
        """Sets the requested_permissions of this ServiceDependency.

        Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009 [4]. The format of this attribute is left for the data model design stage.

        :param requested_permissions: The requested_permissions of this ServiceDependency.
        :type requested_permissions: List[str]
        """
        if requested_permissions is not None and len(requested_permissions) < 0:
            raise ValueError("Invalid value for `requested_permissions`, number of items must be greater than or equal to `0`")

        self._requested_permissions = requested_permissions

    @property
    def ser_category(self):
        """Gets the ser_category of this ServiceDependency.

        See MEC011

        :return: The ser_category of this ServiceDependency.
        :rtype: object
        """
        return self._ser_category

    @ser_category.setter
    def ser_category(self, ser_category):
        """Sets the ser_category of this ServiceDependency.

        See MEC011

        :param ser_category: The ser_category of this ServiceDependency.
        :type ser_category: object
        """

        self._ser_category = ser_category

    @property
    def ser_name(self):
        """Gets the ser_name of this ServiceDependency.

        The name of the service, for example, RNIS, LocationService, etc.

        :return: The ser_name of this ServiceDependency.
        :rtype: str
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name):
        """Sets the ser_name of this ServiceDependency.

        The name of the service, for example, RNIS, LocationService, etc.

        :param ser_name: The ser_name of this ServiceDependency.
        :type ser_name: str
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")

        self._ser_name = ser_name

    @property
    def ser_transport_dependencies(self):
        """Gets the ser_transport_dependencies of this ServiceDependency.

        Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. See note.

        :return: The ser_transport_dependencies of this ServiceDependency.
        :rtype: List[TransportDependency]
        """
        return self._ser_transport_dependencies

    @ser_transport_dependencies.setter
    def ser_transport_dependencies(self, ser_transport_dependencies):
        """Sets the ser_transport_dependencies of this ServiceDependency.

        Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. See note.

        :param ser_transport_dependencies: The ser_transport_dependencies of this ServiceDependency.
        :type ser_transport_dependencies: List[TransportDependency]
        """
        if ser_transport_dependencies is not None and len(ser_transport_dependencies) < 0:
            raise ValueError("Invalid value for `ser_transport_dependencies`, number of items must be greater than or equal to `0`")

        self._ser_transport_dependencies = ser_transport_dependencies

    @property
    def version(self):
        """Gets the version of this ServiceDependency.

        The version of the service.

        :return: The version of this ServiceDependency.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceDependency.

        The version of the service.

        :param version: The version of this ServiceDependency.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
