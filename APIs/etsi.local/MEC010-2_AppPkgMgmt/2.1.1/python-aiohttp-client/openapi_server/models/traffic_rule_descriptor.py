# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.filter_type import FilterType
from openapi_server.models.interface_descriptor import InterfaceDescriptor
from openapi_server.models.traffic_filter import TrafficFilter
from openapi_server import util


class TrafficRuleDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, dst_interface: List[InterfaceDescriptor]=None, filter_type: FilterType=None, priority: int=None, traffic_filter: List[TrafficFilter]=None, traffic_rule_id: str=None):
        """TrafficRuleDescriptor - a model defined in OpenAPI

        :param action: The action of this TrafficRuleDescriptor.
        :param dst_interface: The dst_interface of this TrafficRuleDescriptor.
        :param filter_type: The filter_type of this TrafficRuleDescriptor.
        :param priority: The priority of this TrafficRuleDescriptor.
        :param traffic_filter: The traffic_filter of this TrafficRuleDescriptor.
        :param traffic_rule_id: The traffic_rule_id of this TrafficRuleDescriptor.
        """
        self.openapi_types = {
            'action': Action,
            'dst_interface': List[InterfaceDescriptor],
            'filter_type': FilterType,
            'priority': int,
            'traffic_filter': List[TrafficFilter],
            'traffic_rule_id': str
        }

        self.attribute_map = {
            'action': 'action',
            'dst_interface': 'dstInterface',
            'filter_type': 'filterType',
            'priority': 'priority',
            'traffic_filter': 'trafficFilter',
            'traffic_rule_id': 'trafficRuleId'
        }

        self._action = action
        self._dst_interface = dst_interface
        self._filter_type = filter_type
        self._priority = priority
        self._traffic_filter = traffic_filter
        self._traffic_rule_id = traffic_rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrafficRuleDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrafficRuleDescriptor of this TrafficRuleDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this TrafficRuleDescriptor.


        :return: The action of this TrafficRuleDescriptor.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TrafficRuleDescriptor.


        :param action: The action of this TrafficRuleDescriptor.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def dst_interface(self):
        """Gets the dst_interface of this TrafficRuleDescriptor.


        :return: The dst_interface of this TrafficRuleDescriptor.
        :rtype: List[InterfaceDescriptor]
        """
        return self._dst_interface

    @dst_interface.setter
    def dst_interface(self, dst_interface):
        """Sets the dst_interface of this TrafficRuleDescriptor.


        :param dst_interface: The dst_interface of this TrafficRuleDescriptor.
        :type dst_interface: List[InterfaceDescriptor]
        """
        if dst_interface is not None and len(dst_interface) > 2:
            raise ValueError("Invalid value for `dst_interface`, number of items must be less than or equal to `2`")
        if dst_interface is not None and len(dst_interface) < 0:
            raise ValueError("Invalid value for `dst_interface`, number of items must be greater than or equal to `0`")

        self._dst_interface = dst_interface

    @property
    def filter_type(self):
        """Gets the filter_type of this TrafficRuleDescriptor.


        :return: The filter_type of this TrafficRuleDescriptor.
        :rtype: FilterType
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this TrafficRuleDescriptor.


        :param filter_type: The filter_type of this TrafficRuleDescriptor.
        :type filter_type: FilterType
        """
        if filter_type is None:
            raise ValueError("Invalid value for `filter_type`, must not be `None`")

        self._filter_type = filter_type

    @property
    def priority(self):
        """Gets the priority of this TrafficRuleDescriptor.

        Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.

        :return: The priority of this TrafficRuleDescriptor.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TrafficRuleDescriptor.

        Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.

        :param priority: The priority of this TrafficRuleDescriptor.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def traffic_filter(self):
        """Gets the traffic_filter of this TrafficRuleDescriptor.

        The filter used to identify specific flow/packets that need to be handled by the MEC host.

        :return: The traffic_filter of this TrafficRuleDescriptor.
        :rtype: List[TrafficFilter]
        """
        return self._traffic_filter

    @traffic_filter.setter
    def traffic_filter(self, traffic_filter):
        """Sets the traffic_filter of this TrafficRuleDescriptor.

        The filter used to identify specific flow/packets that need to be handled by the MEC host.

        :param traffic_filter: The traffic_filter of this TrafficRuleDescriptor.
        :type traffic_filter: List[TrafficFilter]
        """
        if traffic_filter is None:
            raise ValueError("Invalid value for `traffic_filter`, must not be `None`")
        if traffic_filter is not None and len(traffic_filter) < 1:
            raise ValueError("Invalid value for `traffic_filter`, number of items must be greater than or equal to `1`")

        self._traffic_filter = traffic_filter

    @property
    def traffic_rule_id(self):
        """Gets the traffic_rule_id of this TrafficRuleDescriptor.

        Identifies the traffic rule.

        :return: The traffic_rule_id of this TrafficRuleDescriptor.
        :rtype: str
        """
        return self._traffic_rule_id

    @traffic_rule_id.setter
    def traffic_rule_id(self, traffic_rule_id):
        """Sets the traffic_rule_id of this TrafficRuleDescriptor.

        Identifies the traffic rule.

        :param traffic_rule_id: The traffic_rule_id of this TrafficRuleDescriptor.
        :type traffic_rule_id: str
        """
        if traffic_rule_id is None:
            raise ValueError("Invalid value for `traffic_rule_id`, must not be `None`")

        self._traffic_rule_id = traffic_rule_id
