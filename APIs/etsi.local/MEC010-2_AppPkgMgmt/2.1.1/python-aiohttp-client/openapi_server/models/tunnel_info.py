# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tunnel_type import TunnelType
from openapi_server import util


class TunnelInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tunnel_dst_address: str=None, tunnel_specific_data: str=None, tunnel_src_address: str=None, tunnel_type: TunnelType=None):
        """TunnelInfo - a model defined in OpenAPI

        :param tunnel_dst_address: The tunnel_dst_address of this TunnelInfo.
        :param tunnel_specific_data: The tunnel_specific_data of this TunnelInfo.
        :param tunnel_src_address: The tunnel_src_address of this TunnelInfo.
        :param tunnel_type: The tunnel_type of this TunnelInfo.
        """
        self.openapi_types = {
            'tunnel_dst_address': str,
            'tunnel_specific_data': str,
            'tunnel_src_address': str,
            'tunnel_type': TunnelType
        }

        self.attribute_map = {
            'tunnel_dst_address': 'tunnelDstAddress',
            'tunnel_specific_data': 'tunnelSpecificData',
            'tunnel_src_address': 'tunnelSrcAddress',
            'tunnel_type': 'tunnelType'
        }

        self._tunnel_dst_address = tunnel_dst_address
        self._tunnel_specific_data = tunnel_specific_data
        self._tunnel_src_address = tunnel_src_address
        self._tunnel_type = tunnel_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TunnelInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TunnelInfo of this TunnelInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tunnel_dst_address(self):
        """Gets the tunnel_dst_address of this TunnelInfo.

        Destination address of the tunnel.

        :return: The tunnel_dst_address of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_dst_address

    @tunnel_dst_address.setter
    def tunnel_dst_address(self, tunnel_dst_address):
        """Sets the tunnel_dst_address of this TunnelInfo.

        Destination address of the tunnel.

        :param tunnel_dst_address: The tunnel_dst_address of this TunnelInfo.
        :type tunnel_dst_address: str
        """
        if tunnel_dst_address is None:
            raise ValueError("Invalid value for `tunnel_dst_address`, must not be `None`")

        self._tunnel_dst_address = tunnel_dst_address

    @property
    def tunnel_specific_data(self):
        """Gets the tunnel_specific_data of this TunnelInfo.


        :return: The tunnel_specific_data of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_specific_data

    @tunnel_specific_data.setter
    def tunnel_specific_data(self, tunnel_specific_data):
        """Sets the tunnel_specific_data of this TunnelInfo.


        :param tunnel_specific_data: The tunnel_specific_data of this TunnelInfo.
        :type tunnel_specific_data: str
        """

        self._tunnel_specific_data = tunnel_specific_data

    @property
    def tunnel_src_address(self):
        """Gets the tunnel_src_address of this TunnelInfo.

        Source address of the tunnel.

        :return: The tunnel_src_address of this TunnelInfo.
        :rtype: str
        """
        return self._tunnel_src_address

    @tunnel_src_address.setter
    def tunnel_src_address(self, tunnel_src_address):
        """Sets the tunnel_src_address of this TunnelInfo.

        Source address of the tunnel.

        :param tunnel_src_address: The tunnel_src_address of this TunnelInfo.
        :type tunnel_src_address: str
        """
        if tunnel_src_address is None:
            raise ValueError("Invalid value for `tunnel_src_address`, must not be `None`")

        self._tunnel_src_address = tunnel_src_address

    @property
    def tunnel_type(self):
        """Gets the tunnel_type of this TunnelInfo.


        :return: The tunnel_type of this TunnelInfo.
        :rtype: TunnelType
        """
        return self._tunnel_type

    @tunnel_type.setter
    def tunnel_type(self, tunnel_type):
        """Sets the tunnel_type of this TunnelInfo.


        :param tunnel_type: The tunnel_type of this TunnelInfo.
        :type tunnel_type: TunnelType
        """
        if tunnel_type is None:
            raise ValueError("Invalid value for `tunnel_type`, must not be `None`")

        self._tunnel_type = tunnel_type
