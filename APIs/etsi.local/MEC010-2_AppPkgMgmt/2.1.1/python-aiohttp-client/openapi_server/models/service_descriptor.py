# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transports_supported import TransportsSupported
from openapi_server import util


class ServiceDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ser_category: object=None, ser_name: str=None, transports_supported: TransportsSupported=None, version: str=None):
        """ServiceDescriptor - a model defined in OpenAPI

        :param ser_category: The ser_category of this ServiceDescriptor.
        :param ser_name: The ser_name of this ServiceDescriptor.
        :param transports_supported: The transports_supported of this ServiceDescriptor.
        :param version: The version of this ServiceDescriptor.
        """
        self.openapi_types = {
            'ser_category': object,
            'ser_name': str,
            'transports_supported': TransportsSupported,
            'version': str
        }

        self.attribute_map = {
            'ser_category': 'serCategory',
            'ser_name': 'serName',
            'transports_supported': 'transportsSupported',
            'version': 'version'
        }

        self._ser_category = ser_category
        self._ser_name = ser_name
        self._transports_supported = transports_supported
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDescriptor of this ServiceDescriptor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ser_category(self):
        """Gets the ser_category of this ServiceDescriptor.

        See MEC011

        :return: The ser_category of this ServiceDescriptor.
        :rtype: object
        """
        return self._ser_category

    @ser_category.setter
    def ser_category(self, ser_category):
        """Sets the ser_category of this ServiceDescriptor.

        See MEC011

        :param ser_category: The ser_category of this ServiceDescriptor.
        :type ser_category: object
        """

        self._ser_category = ser_category

    @property
    def ser_name(self):
        """Gets the ser_name of this ServiceDescriptor.

        The name of the service, for example, RNIS, LocationService, etc.

        :return: The ser_name of this ServiceDescriptor.
        :rtype: str
        """
        return self._ser_name

    @ser_name.setter
    def ser_name(self, ser_name):
        """Sets the ser_name of this ServiceDescriptor.

        The name of the service, for example, RNIS, LocationService, etc.

        :param ser_name: The ser_name of this ServiceDescriptor.
        :type ser_name: str
        """
        if ser_name is None:
            raise ValueError("Invalid value for `ser_name`, must not be `None`")

        self._ser_name = ser_name

    @property
    def transports_supported(self):
        """Gets the transports_supported of this ServiceDescriptor.


        :return: The transports_supported of this ServiceDescriptor.
        :rtype: TransportsSupported
        """
        return self._transports_supported

    @transports_supported.setter
    def transports_supported(self, transports_supported):
        """Sets the transports_supported of this ServiceDescriptor.


        :param transports_supported: The transports_supported of this ServiceDescriptor.
        :type transports_supported: TransportsSupported
        """

        self._transports_supported = transports_supported

    @property
    def version(self):
        """Gets the version of this ServiceDescriptor.

        The version of the service.

        :return: The version of this ServiceDescriptor.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceDescriptor.

        The version of the service.

        :param version: The version of this ServiceDescriptor.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
