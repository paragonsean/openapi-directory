# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checksum import Checksum
from openapi_server import util


class CreateAppPkg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_pkg_name: str=None, app_pkg_path: str=None, app_pkg_version: str=None, app_provider: str=None, checksum: Checksum=None, user_defined_data: Dict[str, object]=None):
        """CreateAppPkg - a model defined in OpenAPI

        :param app_pkg_name: The app_pkg_name of this CreateAppPkg.
        :param app_pkg_path: The app_pkg_path of this CreateAppPkg.
        :param app_pkg_version: The app_pkg_version of this CreateAppPkg.
        :param app_provider: The app_provider of this CreateAppPkg.
        :param checksum: The checksum of this CreateAppPkg.
        :param user_defined_data: The user_defined_data of this CreateAppPkg.
        """
        self.openapi_types = {
            'app_pkg_name': str,
            'app_pkg_path': str,
            'app_pkg_version': str,
            'app_provider': str,
            'checksum': Checksum,
            'user_defined_data': Dict[str, object]
        }

        self.attribute_map = {
            'app_pkg_name': 'appPkgName',
            'app_pkg_path': 'appPkgPath',
            'app_pkg_version': 'appPkgVersion',
            'app_provider': 'appProvider',
            'checksum': 'checksum',
            'user_defined_data': 'userDefinedData'
        }

        self._app_pkg_name = app_pkg_name
        self._app_pkg_path = app_pkg_path
        self._app_pkg_version = app_pkg_version
        self._app_provider = app_provider
        self._checksum = checksum
        self._user_defined_data = user_defined_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAppPkg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAppPkg of this CreateAppPkg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_pkg_name(self):
        """Gets the app_pkg_name of this CreateAppPkg.

        Name of the application package to be onboarded.

        :return: The app_pkg_name of this CreateAppPkg.
        :rtype: str
        """
        return self._app_pkg_name

    @app_pkg_name.setter
    def app_pkg_name(self, app_pkg_name):
        """Sets the app_pkg_name of this CreateAppPkg.

        Name of the application package to be onboarded.

        :param app_pkg_name: The app_pkg_name of this CreateAppPkg.
        :type app_pkg_name: str
        """
        if app_pkg_name is None:
            raise ValueError("Invalid value for `app_pkg_name`, must not be `None`")

        self._app_pkg_name = app_pkg_name

    @property
    def app_pkg_path(self):
        """Gets the app_pkg_path of this CreateAppPkg.


        :return: The app_pkg_path of this CreateAppPkg.
        :rtype: str
        """
        return self._app_pkg_path

    @app_pkg_path.setter
    def app_pkg_path(self, app_pkg_path):
        """Sets the app_pkg_path of this CreateAppPkg.


        :param app_pkg_path: The app_pkg_path of this CreateAppPkg.
        :type app_pkg_path: str
        """
        if app_pkg_path is None:
            raise ValueError("Invalid value for `app_pkg_path`, must not be `None`")

        self._app_pkg_path = app_pkg_path

    @property
    def app_pkg_version(self):
        """Gets the app_pkg_version of this CreateAppPkg.

        Version of the application package to be onboarded. The appPkgName with appPkgVersion can be used to uniquely identify the application package.

        :return: The app_pkg_version of this CreateAppPkg.
        :rtype: str
        """
        return self._app_pkg_version

    @app_pkg_version.setter
    def app_pkg_version(self, app_pkg_version):
        """Sets the app_pkg_version of this CreateAppPkg.

        Version of the application package to be onboarded. The appPkgName with appPkgVersion can be used to uniquely identify the application package.

        :param app_pkg_version: The app_pkg_version of this CreateAppPkg.
        :type app_pkg_version: str
        """
        if app_pkg_version is None:
            raise ValueError("Invalid value for `app_pkg_version`, must not be `None`")

        self._app_pkg_version = app_pkg_version

    @property
    def app_provider(self):
        """Gets the app_provider of this CreateAppPkg.

        The provider's name of the application package to be onboarded.

        :return: The app_provider of this CreateAppPkg.
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider):
        """Sets the app_provider of this CreateAppPkg.

        The provider's name of the application package to be onboarded.

        :param app_provider: The app_provider of this CreateAppPkg.
        :type app_provider: str
        """

        self._app_provider = app_provider

    @property
    def checksum(self):
        """Gets the checksum of this CreateAppPkg.


        :return: The checksum of this CreateAppPkg.
        :rtype: Checksum
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this CreateAppPkg.


        :param checksum: The checksum of this CreateAppPkg.
        :type checksum: Checksum
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def user_defined_data(self):
        """Gets the user_defined_data of this CreateAppPkg.

        'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'

        :return: The user_defined_data of this CreateAppPkg.
        :rtype: Dict[str, object]
        """
        return self._user_defined_data

    @user_defined_data.setter
    def user_defined_data(self, user_defined_data):
        """Sets the user_defined_data of this CreateAppPkg.

        'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'

        :param user_defined_data: The user_defined_data of this CreateAppPkg.
        :type user_defined_data: Dict[str, object]
        """

        self._user_defined_data = user_defined_data
