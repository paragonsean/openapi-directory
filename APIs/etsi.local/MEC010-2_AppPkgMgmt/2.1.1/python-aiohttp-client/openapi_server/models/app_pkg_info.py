# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_pkg_info_links import AppPkgInfoLinks
from openapi_server.models.app_pkg_operational_state import AppPkgOperationalState
from openapi_server.models.checksum import Checksum
from openapi_server.models.onboarding_state import OnboardingState
from openapi_server.models.usage_state import UsageState
from openapi_server import util


class AppPkgInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AppPkgInfoLinks=None, additional_artifacts: object=None, app_did: str=None, app_d_version: str=None, app_name: str=None, app_provider: str=None, app_software_version: str=None, checksum: Checksum=None, id: str=None, onboarding_state: OnboardingState=None, operational_state: AppPkgOperationalState=None, software_images: object=None, usage_state: UsageState=None, user_defined_data: Dict[str, object]=None):
        """AppPkgInfo - a model defined in OpenAPI

        :param links: The links of this AppPkgInfo.
        :param additional_artifacts: The additional_artifacts of this AppPkgInfo.
        :param app_did: The app_did of this AppPkgInfo.
        :param app_d_version: The app_d_version of this AppPkgInfo.
        :param app_name: The app_name of this AppPkgInfo.
        :param app_provider: The app_provider of this AppPkgInfo.
        :param app_software_version: The app_software_version of this AppPkgInfo.
        :param checksum: The checksum of this AppPkgInfo.
        :param id: The id of this AppPkgInfo.
        :param onboarding_state: The onboarding_state of this AppPkgInfo.
        :param operational_state: The operational_state of this AppPkgInfo.
        :param software_images: The software_images of this AppPkgInfo.
        :param usage_state: The usage_state of this AppPkgInfo.
        :param user_defined_data: The user_defined_data of this AppPkgInfo.
        """
        self.openapi_types = {
            'links': AppPkgInfoLinks,
            'additional_artifacts': object,
            'app_did': str,
            'app_d_version': str,
            'app_name': str,
            'app_provider': str,
            'app_software_version': str,
            'checksum': Checksum,
            'id': str,
            'onboarding_state': OnboardingState,
            'operational_state': AppPkgOperationalState,
            'software_images': object,
            'usage_state': UsageState,
            'user_defined_data': Dict[str, object]
        }

        self.attribute_map = {
            'links': '_links',
            'additional_artifacts': 'additionalArtifacts',
            'app_did': 'appDId',
            'app_d_version': 'appDVersion',
            'app_name': 'appName',
            'app_provider': 'appProvider',
            'app_software_version': 'appSoftwareVersion',
            'checksum': 'checksum',
            'id': 'id',
            'onboarding_state': 'onboardingState',
            'operational_state': 'operationalState',
            'software_images': 'softwareImages',
            'usage_state': 'usageState',
            'user_defined_data': 'userDefinedData'
        }

        self._links = links
        self._additional_artifacts = additional_artifacts
        self._app_did = app_did
        self._app_d_version = app_d_version
        self._app_name = app_name
        self._app_provider = app_provider
        self._app_software_version = app_software_version
        self._checksum = checksum
        self._id = id
        self._onboarding_state = onboarding_state
        self._operational_state = operational_state
        self._software_images = software_images
        self._usage_state = usage_state
        self._user_defined_data = user_defined_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPkgInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppPkgInfo of this AppPkgInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AppPkgInfo.


        :return: The links of this AppPkgInfo.
        :rtype: AppPkgInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AppPkgInfo.


        :param links: The links of this AppPkgInfo.
        :type links: AppPkgInfoLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def additional_artifacts(self):
        """Gets the additional_artifacts of this AppPkgInfo.

        Additional information of application package artifacts that are not application software images. Type is TBD

        :return: The additional_artifacts of this AppPkgInfo.
        :rtype: object
        """
        return self._additional_artifacts

    @additional_artifacts.setter
    def additional_artifacts(self, additional_artifacts):
        """Sets the additional_artifacts of this AppPkgInfo.

        Additional information of application package artifacts that are not application software images. Type is TBD

        :param additional_artifacts: The additional_artifacts of this AppPkgInfo.
        :type additional_artifacts: object
        """

        self._additional_artifacts = additional_artifacts

    @property
    def app_did(self):
        """Gets the app_did of this AppPkgInfo.

        Identifier of this MEC application descriptor. This attribute shall be globally unique.

        :return: The app_did of this AppPkgInfo.
        :rtype: str
        """
        return self._app_did

    @app_did.setter
    def app_did(self, app_did):
        """Sets the app_did of this AppPkgInfo.

        Identifier of this MEC application descriptor. This attribute shall be globally unique.

        :param app_did: The app_did of this AppPkgInfo.
        :type app_did: str
        """
        if app_did is None:
            raise ValueError("Invalid value for `app_did`, must not be `None`")

        self._app_did = app_did

    @property
    def app_d_version(self):
        """Gets the app_d_version of this AppPkgInfo.

        Identifies the version of the application descriptor.

        :return: The app_d_version of this AppPkgInfo.
        :rtype: str
        """
        return self._app_d_version

    @app_d_version.setter
    def app_d_version(self, app_d_version):
        """Sets the app_d_version of this AppPkgInfo.

        Identifies the version of the application descriptor.

        :param app_d_version: The app_d_version of this AppPkgInfo.
        :type app_d_version: str
        """
        if app_d_version is None:
            raise ValueError("Invalid value for `app_d_version`, must not be `None`")

        self._app_d_version = app_d_version

    @property
    def app_name(self):
        """Gets the app_name of this AppPkgInfo.

        Name to identify the MEC application.

        :return: The app_name of this AppPkgInfo.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AppPkgInfo.

        Name to identify the MEC application.

        :param app_name: The app_name of this AppPkgInfo.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name

    @property
    def app_provider(self):
        """Gets the app_provider of this AppPkgInfo.

        Provider of the application and of the AppD.

        :return: The app_provider of this AppPkgInfo.
        :rtype: str
        """
        return self._app_provider

    @app_provider.setter
    def app_provider(self, app_provider):
        """Sets the app_provider of this AppPkgInfo.

        Provider of the application and of the AppD.

        :param app_provider: The app_provider of this AppPkgInfo.
        :type app_provider: str
        """

        self._app_provider = app_provider

    @property
    def app_software_version(self):
        """Gets the app_software_version of this AppPkgInfo.

        Software version of the application. This is updated when there is any change to the software in the onboarded application package.

        :return: The app_software_version of this AppPkgInfo.
        :rtype: str
        """
        return self._app_software_version

    @app_software_version.setter
    def app_software_version(self, app_software_version):
        """Sets the app_software_version of this AppPkgInfo.

        Software version of the application. This is updated when there is any change to the software in the onboarded application package.

        :param app_software_version: The app_software_version of this AppPkgInfo.
        :type app_software_version: str
        """
        if app_software_version is None:
            raise ValueError("Invalid value for `app_software_version`, must not be `None`")

        self._app_software_version = app_software_version

    @property
    def checksum(self):
        """Gets the checksum of this AppPkgInfo.


        :return: The checksum of this AppPkgInfo.
        :rtype: Checksum
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this AppPkgInfo.


        :param checksum: The checksum of this AppPkgInfo.
        :type checksum: Checksum
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def id(self):
        """Gets the id of this AppPkgInfo.

        Identifier of the onboarded application package.

        :return: The id of this AppPkgInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppPkgInfo.

        Identifier of the onboarded application package.

        :param id: The id of this AppPkgInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def onboarding_state(self):
        """Gets the onboarding_state of this AppPkgInfo.


        :return: The onboarding_state of this AppPkgInfo.
        :rtype: OnboardingState
        """
        return self._onboarding_state

    @onboarding_state.setter
    def onboarding_state(self, onboarding_state):
        """Sets the onboarding_state of this AppPkgInfo.


        :param onboarding_state: The onboarding_state of this AppPkgInfo.
        :type onboarding_state: OnboardingState
        """
        if onboarding_state is None:
            raise ValueError("Invalid value for `onboarding_state`, must not be `None`")

        self._onboarding_state = onboarding_state

    @property
    def operational_state(self):
        """Gets the operational_state of this AppPkgInfo.


        :return: The operational_state of this AppPkgInfo.
        :rtype: AppPkgOperationalState
        """
        return self._operational_state

    @operational_state.setter
    def operational_state(self, operational_state):
        """Sets the operational_state of this AppPkgInfo.


        :param operational_state: The operational_state of this AppPkgInfo.
        :type operational_state: AppPkgOperationalState
        """
        if operational_state is None:
            raise ValueError("Invalid value for `operational_state`, must not be `None`")

        self._operational_state = operational_state

    @property
    def software_images(self):
        """Gets the software_images of this AppPkgInfo.

        Information of application software image in application package. Type is TBD

        :return: The software_images of this AppPkgInfo.
        :rtype: object
        """
        return self._software_images

    @software_images.setter
    def software_images(self, software_images):
        """Sets the software_images of this AppPkgInfo.

        Information of application software image in application package. Type is TBD

        :param software_images: The software_images of this AppPkgInfo.
        :type software_images: object
        """
        if software_images is None:
            raise ValueError("Invalid value for `software_images`, must not be `None`")

        self._software_images = software_images

    @property
    def usage_state(self):
        """Gets the usage_state of this AppPkgInfo.


        :return: The usage_state of this AppPkgInfo.
        :rtype: UsageState
        """
        return self._usage_state

    @usage_state.setter
    def usage_state(self, usage_state):
        """Sets the usage_state of this AppPkgInfo.


        :param usage_state: The usage_state of this AppPkgInfo.
        :type usage_state: UsageState
        """
        if usage_state is None:
            raise ValueError("Invalid value for `usage_state`, must not be `None`")

        self._usage_state = usage_state

    @property
    def user_defined_data(self):
        """Gets the user_defined_data of this AppPkgInfo.

        'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'

        :return: The user_defined_data of this AppPkgInfo.
        :rtype: Dict[str, object]
        """
        return self._user_defined_data

    @user_defined_data.setter
    def user_defined_data(self, user_defined_data):
        """Sets the user_defined_data of this AppPkgInfo.

        'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'

        :param user_defined_data: The user_defined_data of this AppPkgInfo.
        :type user_defined_data: Dict[str, object]
        """

        self._user_defined_data = user_defined_data
