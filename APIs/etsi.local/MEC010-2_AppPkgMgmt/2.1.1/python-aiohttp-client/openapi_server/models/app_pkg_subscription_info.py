# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_pkg_subscription_info_links import AppPkgSubscriptionInfoLinks
from openapi_server.models.app_pkg_subscription_type import AppPkgSubscriptionType
from openapi_server import util


class AppPkgSubscriptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: AppPkgSubscriptionInfoLinks=None, callback_uri: str=None, id: str=None, subscription_type: AppPkgSubscriptionType=None):
        """AppPkgSubscriptionInfo - a model defined in OpenAPI

        :param links: The links of this AppPkgSubscriptionInfo.
        :param callback_uri: The callback_uri of this AppPkgSubscriptionInfo.
        :param id: The id of this AppPkgSubscriptionInfo.
        :param subscription_type: The subscription_type of this AppPkgSubscriptionInfo.
        """
        self.openapi_types = {
            'links': AppPkgSubscriptionInfoLinks,
            'callback_uri': str,
            'id': str,
            'subscription_type': AppPkgSubscriptionType
        }

        self.attribute_map = {
            'links': '_links',
            'callback_uri': 'callbackUri',
            'id': 'id',
            'subscription_type': 'subscriptionType'
        }

        self._links = links
        self._callback_uri = callback_uri
        self._id = id
        self._subscription_type = subscription_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppPkgSubscriptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppPkgSubscriptionInfo of this AppPkgSubscriptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AppPkgSubscriptionInfo.


        :return: The links of this AppPkgSubscriptionInfo.
        :rtype: AppPkgSubscriptionInfoLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AppPkgSubscriptionInfo.


        :param links: The links of this AppPkgSubscriptionInfo.
        :type links: AppPkgSubscriptionInfoLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def callback_uri(self):
        """Gets the callback_uri of this AppPkgSubscriptionInfo.

        The URI of the endpoint for the notification to be sent to.

        :return: The callback_uri of this AppPkgSubscriptionInfo.
        :rtype: str
        """
        return self._callback_uri

    @callback_uri.setter
    def callback_uri(self, callback_uri):
        """Sets the callback_uri of this AppPkgSubscriptionInfo.

        The URI of the endpoint for the notification to be sent to.

        :param callback_uri: The callback_uri of this AppPkgSubscriptionInfo.
        :type callback_uri: str
        """
        if callback_uri is None:
            raise ValueError("Invalid value for `callback_uri`, must not be `None`")

        self._callback_uri = callback_uri

    @property
    def id(self):
        """Gets the id of this AppPkgSubscriptionInfo.

        ''

        :return: The id of this AppPkgSubscriptionInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppPkgSubscriptionInfo.

        ''

        :param id: The id of this AppPkgSubscriptionInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def subscription_type(self):
        """Gets the subscription_type of this AppPkgSubscriptionInfo.


        :return: The subscription_type of this AppPkgSubscriptionInfo.
        :rtype: AppPkgSubscriptionType
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this AppPkgSubscriptionInfo.


        :param subscription_type: The subscription_type of this AppPkgSubscriptionInfo.
        :type subscription_type: AppPkgSubscriptionType
        """
        if subscription_type is None:
            raise ValueError("Invalid value for `subscription_type`, must not be `None`")

        self._subscription_type = subscription_type
