/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IpAddressType from './IpAddressType';

/**
 * The DNSRuleDescriptor model module.
 * @module model/DNSRuleDescriptor
 * @version 2.1.1
 */
class DNSRuleDescriptor {
    /**
     * Constructs a new <code>DNSRuleDescriptor</code>.
     * @alias module:model/DNSRuleDescriptor
     * @param dnsRuleId {String} Identifies the DNS Rule
     * @param domainName {String} FQDN of the DNS rule
     * @param ipAddress {String} IP address given by the DNS rule
     * @param ipAddressType {module:model/IpAddressType} 
     */
    constructor(dnsRuleId, domainName, ipAddress, ipAddressType) { 
        
        DNSRuleDescriptor.initialize(this, dnsRuleId, domainName, ipAddress, ipAddressType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dnsRuleId, domainName, ipAddress, ipAddressType) { 
        obj['dnsRuleId'] = dnsRuleId;
        obj['domainName'] = domainName;
        obj['ipAddress'] = ipAddress;
        obj['ipAddressType'] = ipAddressType;
    }

    /**
     * Constructs a <code>DNSRuleDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DNSRuleDescriptor} obj Optional instance to populate.
     * @return {module:model/DNSRuleDescriptor} The populated <code>DNSRuleDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DNSRuleDescriptor();

            if (data.hasOwnProperty('dnsRuleId')) {
                obj['dnsRuleId'] = ApiClient.convertToType(data['dnsRuleId'], 'String');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('ipAddressType')) {
                obj['ipAddressType'] = IpAddressType.constructFromObject(data['ipAddressType']);
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DNSRuleDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DNSRuleDescriptor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DNSRuleDescriptor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dnsRuleId'] && !(typeof data['dnsRuleId'] === 'string' || data['dnsRuleId'] instanceof String)) {
            throw new Error("Expected the field `dnsRuleId` to be a primitive type in the JSON string but got " + data['dnsRuleId']);
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }

        return true;
    }


}

DNSRuleDescriptor.RequiredProperties = ["dnsRuleId", "domainName", "ipAddress", "ipAddressType"];

/**
 * Identifies the DNS Rule
 * @member {String} dnsRuleId
 */
DNSRuleDescriptor.prototype['dnsRuleId'] = undefined;

/**
 * FQDN of the DNS rule
 * @member {String} domainName
 */
DNSRuleDescriptor.prototype['domainName'] = undefined;

/**
 * IP address given by the DNS rule
 * @member {String} ipAddress
 */
DNSRuleDescriptor.prototype['ipAddress'] = undefined;

/**
 * @member {module:model/IpAddressType} ipAddressType
 */
DNSRuleDescriptor.prototype['ipAddressType'] = undefined;

/**
 * Time-to-live value
 * @member {Number} ttl
 */
DNSRuleDescriptor.prototype['ttl'] = undefined;






export default DNSRuleDescriptor;

