/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransportDependency from './TransportDependency';

/**
 * The ServiceDependency model module.
 * @module model/ServiceDependency
 * @version 2.1.1
 */
class ServiceDependency {
    /**
     * Constructs a new <code>ServiceDependency</code>.
     * @alias module:model/ServiceDependency
     * @param serName {String} The name of the service, for example, RNIS, LocationService, etc.
     * @param version {String} The version of the service.
     */
    constructor(serName, version) { 
        
        ServiceDependency.initialize(this, serName, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serName, version) { 
        obj['serName'] = serName;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>ServiceDependency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceDependency} obj Optional instance to populate.
     * @return {module:model/ServiceDependency} The populated <code>ServiceDependency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceDependency();

            if (data.hasOwnProperty('requestedPermissions')) {
                obj['requestedPermissions'] = ApiClient.convertToType(data['requestedPermissions'], ['String']);
            }
            if (data.hasOwnProperty('serCategory')) {
                obj['serCategory'] = ApiClient.convertToType(data['serCategory'], Object);
            }
            if (data.hasOwnProperty('serName')) {
                obj['serName'] = ApiClient.convertToType(data['serName'], 'String');
            }
            if (data.hasOwnProperty('serTransportDependencies')) {
                obj['serTransportDependencies'] = ApiClient.convertToType(data['serTransportDependencies'], [TransportDependency]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceDependency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceDependency</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceDependency.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requestedPermissions'])) {
            throw new Error("Expected the field `requestedPermissions` to be an array in the JSON data but got " + data['requestedPermissions']);
        }
        // ensure the json data is a string
        if (data['serName'] && !(typeof data['serName'] === 'string' || data['serName'] instanceof String)) {
            throw new Error("Expected the field `serName` to be a primitive type in the JSON string but got " + data['serName']);
        }
        if (data['serTransportDependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serTransportDependencies'])) {
                throw new Error("Expected the field `serTransportDependencies` to be an array in the JSON data but got " + data['serTransportDependencies']);
            }
            // validate the optional field `serTransportDependencies` (array)
            for (const item of data['serTransportDependencies']) {
                TransportDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

ServiceDependency.RequiredProperties = ["serName", "version"];

/**
 * Requested permissions regarding the access of the application to the service. See clause 8.2 of ETSI GS MEC 009 [4]. The format of this attribute is left for the data model design stage.
 * @member {Array.<String>} requestedPermissions
 */
ServiceDependency.prototype['requestedPermissions'] = undefined;

/**
 * See MEC011
 * @member {Object} serCategory
 */
ServiceDependency.prototype['serCategory'] = undefined;

/**
 * The name of the service, for example, RNIS, LocationService, etc.
 * @member {String} serName
 */
ServiceDependency.prototype['serName'] = undefined;

/**
 * Indicates transport and serialization format dependencies of consuming the service. Defaults to REST + JSON if absent. See note.
 * @member {Array.<module:model/TransportDependency>} serTransportDependencies
 */
ServiceDependency.prototype['serTransportDependencies'] = undefined;

/**
 * The version of the service.
 * @member {String} version
 */
ServiceDependency.prototype['version'] = undefined;






export default ServiceDependency;

