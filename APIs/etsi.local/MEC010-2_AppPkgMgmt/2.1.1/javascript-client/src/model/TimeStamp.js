/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeStamp model module.
 * @module model/TimeStamp
 * @version 2.1.1
 */
class TimeStamp {
    /**
     * Constructs a new <code>TimeStamp</code>.
     * @alias module:model/TimeStamp
     * @param nanoSeconds {Number} The nanoseconds part of the Time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.
     * @param seconds {Number} The seconds part of the Time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.
     */
    constructor(nanoSeconds, seconds) { 
        
        TimeStamp.initialize(this, nanoSeconds, seconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nanoSeconds, seconds) { 
        obj['nanoSeconds'] = nanoSeconds;
        obj['seconds'] = seconds;
    }

    /**
     * Constructs a <code>TimeStamp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeStamp} obj Optional instance to populate.
     * @return {module:model/TimeStamp} The populated <code>TimeStamp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeStamp();

            if (data.hasOwnProperty('nanoSeconds')) {
                obj['nanoSeconds'] = ApiClient.convertToType(data['nanoSeconds'], 'Number');
            }
            if (data.hasOwnProperty('seconds')) {
                obj['seconds'] = ApiClient.convertToType(data['seconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeStamp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeStamp</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeStamp.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

TimeStamp.RequiredProperties = ["nanoSeconds", "seconds"];

/**
 * The nanoseconds part of the Time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.
 * @member {Number} nanoSeconds
 */
TimeStamp.prototype['nanoSeconds'] = undefined;

/**
 * The seconds part of the Time. Time is defined as Unix-time since January 1, 1970, 00:00:00 UTC.
 * @member {Number} seconds
 */
TimeStamp.prototype['seconds'] = undefined;






export default TimeStamp;

