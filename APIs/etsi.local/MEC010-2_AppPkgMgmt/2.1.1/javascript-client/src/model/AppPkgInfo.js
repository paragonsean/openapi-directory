/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppPkgInfoLinks from './AppPkgInfoLinks';
import AppPkgOperationalState from './AppPkgOperationalState';
import Checksum from './Checksum';
import OnboardingState from './OnboardingState';
import UsageState from './UsageState';

/**
 * The AppPkgInfo model module.
 * @module model/AppPkgInfo
 * @version 2.1.1
 */
class AppPkgInfo {
    /**
     * Constructs a new <code>AppPkgInfo</code>.
     * &#39;The data type AppPkgInfo represents the parameters for an application package resource&#39;
     * @alias module:model/AppPkgInfo
     * @param links {module:model/AppPkgInfoLinks} 
     * @param appDId {String} Identifier of this MEC application descriptor. This attribute shall be globally unique.
     * @param appDVersion {String} Identifies the version of the application descriptor.
     * @param appName {String} Name to identify the MEC application.
     * @param appSoftwareVersion {String} Software version of the application. This is updated when there is any change to the software in the onboarded application package.
     * @param checksum {module:model/Checksum} 
     * @param id {String} Identifier of the onboarded application package.
     * @param onboardingState {module:model/OnboardingState} 
     * @param operationalState {module:model/AppPkgOperationalState} 
     * @param softwareImages {Object} Information of application software image in application package. Type is TBD
     * @param usageState {module:model/UsageState} 
     */
    constructor(links, appDId, appDVersion, appName, appSoftwareVersion, checksum, id, onboardingState, operationalState, softwareImages, usageState) { 
        
        AppPkgInfo.initialize(this, links, appDId, appDVersion, appName, appSoftwareVersion, checksum, id, onboardingState, operationalState, softwareImages, usageState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, appDId, appDVersion, appName, appSoftwareVersion, checksum, id, onboardingState, operationalState, softwareImages, usageState) { 
        obj['_links'] = links;
        obj['appDId'] = appDId;
        obj['appDVersion'] = appDVersion;
        obj['appName'] = appName;
        obj['appSoftwareVersion'] = appSoftwareVersion;
        obj['checksum'] = checksum;
        obj['id'] = id;
        obj['onboardingState'] = onboardingState;
        obj['operationalState'] = operationalState;
        obj['softwareImages'] = softwareImages;
        obj['usageState'] = usageState;
    }

    /**
     * Constructs a <code>AppPkgInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppPkgInfo} obj Optional instance to populate.
     * @return {module:model/AppPkgInfo} The populated <code>AppPkgInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppPkgInfo();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = AppPkgInfoLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('additionalArtifacts')) {
                obj['additionalArtifacts'] = ApiClient.convertToType(data['additionalArtifacts'], Object);
            }
            if (data.hasOwnProperty('appDId')) {
                obj['appDId'] = ApiClient.convertToType(data['appDId'], 'String');
            }
            if (data.hasOwnProperty('appDVersion')) {
                obj['appDVersion'] = ApiClient.convertToType(data['appDVersion'], 'String');
            }
            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('appProvider')) {
                obj['appProvider'] = ApiClient.convertToType(data['appProvider'], 'String');
            }
            if (data.hasOwnProperty('appSoftwareVersion')) {
                obj['appSoftwareVersion'] = ApiClient.convertToType(data['appSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('checksum')) {
                obj['checksum'] = Checksum.constructFromObject(data['checksum']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('onboardingState')) {
                obj['onboardingState'] = OnboardingState.constructFromObject(data['onboardingState']);
            }
            if (data.hasOwnProperty('operationalState')) {
                obj['operationalState'] = AppPkgOperationalState.constructFromObject(data['operationalState']);
            }
            if (data.hasOwnProperty('softwareImages')) {
                obj['softwareImages'] = ApiClient.convertToType(data['softwareImages'], Object);
            }
            if (data.hasOwnProperty('usageState')) {
                obj['usageState'] = UsageState.constructFromObject(data['usageState']);
            }
            if (data.hasOwnProperty('userDefinedData')) {
                obj['userDefinedData'] = ApiClient.convertToType(data['userDefinedData'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppPkgInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppPkgInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppPkgInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          AppPkgInfoLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['appDId'] && !(typeof data['appDId'] === 'string' || data['appDId'] instanceof String)) {
            throw new Error("Expected the field `appDId` to be a primitive type in the JSON string but got " + data['appDId']);
        }
        // ensure the json data is a string
        if (data['appDVersion'] && !(typeof data['appDVersion'] === 'string' || data['appDVersion'] instanceof String)) {
            throw new Error("Expected the field `appDVersion` to be a primitive type in the JSON string but got " + data['appDVersion']);
        }
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['appProvider'] && !(typeof data['appProvider'] === 'string' || data['appProvider'] instanceof String)) {
            throw new Error("Expected the field `appProvider` to be a primitive type in the JSON string but got " + data['appProvider']);
        }
        // ensure the json data is a string
        if (data['appSoftwareVersion'] && !(typeof data['appSoftwareVersion'] === 'string' || data['appSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `appSoftwareVersion` to be a primitive type in the JSON string but got " + data['appSoftwareVersion']);
        }
        // validate the optional field `checksum`
        if (data['checksum']) { // data not null
          Checksum.validateJSON(data['checksum']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

AppPkgInfo.RequiredProperties = ["_links", "appDId", "appDVersion", "appName", "appSoftwareVersion", "checksum", "id", "onboardingState", "operationalState", "softwareImages", "usageState"];

/**
 * @member {module:model/AppPkgInfoLinks} _links
 */
AppPkgInfo.prototype['_links'] = undefined;

/**
 * Additional information of application package artifacts that are not application software images. Type is TBD
 * @member {Object} additionalArtifacts
 */
AppPkgInfo.prototype['additionalArtifacts'] = undefined;

/**
 * Identifier of this MEC application descriptor. This attribute shall be globally unique.
 * @member {String} appDId
 */
AppPkgInfo.prototype['appDId'] = undefined;

/**
 * Identifies the version of the application descriptor.
 * @member {String} appDVersion
 */
AppPkgInfo.prototype['appDVersion'] = undefined;

/**
 * Name to identify the MEC application.
 * @member {String} appName
 */
AppPkgInfo.prototype['appName'] = undefined;

/**
 * Provider of the application and of the AppD.
 * @member {String} appProvider
 */
AppPkgInfo.prototype['appProvider'] = undefined;

/**
 * Software version of the application. This is updated when there is any change to the software in the onboarded application package.
 * @member {String} appSoftwareVersion
 */
AppPkgInfo.prototype['appSoftwareVersion'] = undefined;

/**
 * @member {module:model/Checksum} checksum
 */
AppPkgInfo.prototype['checksum'] = undefined;

/**
 * Identifier of the onboarded application package.
 * @member {String} id
 */
AppPkgInfo.prototype['id'] = undefined;

/**
 * @member {module:model/OnboardingState} onboardingState
 */
AppPkgInfo.prototype['onboardingState'] = undefined;

/**
 * @member {module:model/AppPkgOperationalState} operationalState
 */
AppPkgInfo.prototype['operationalState'] = undefined;

/**
 * Information of application software image in application package. Type is TBD
 * @member {Object} softwareImages
 */
AppPkgInfo.prototype['softwareImages'] = undefined;

/**
 * @member {module:model/UsageState} usageState
 */
AppPkgInfo.prototype['usageState'] = undefined;

/**
 * 'This data type represents a list of key-value pairs. The order of the pairs in the list is not significant. In JSON, a set of key-value pairs is represented as an object. It shall comply with the provisions defined in clause 4 of IETF RFC 8259'
 * @member {Object.<String, Object>} userDefinedData
 */
AppPkgInfo.prototype['userDefinedData'] = undefined;






export default AppPkgInfo;

