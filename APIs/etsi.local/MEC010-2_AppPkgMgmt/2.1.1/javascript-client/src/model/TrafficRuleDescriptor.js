/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Action from './Action';
import FilterType from './FilterType';
import InterfaceDescriptor from './InterfaceDescriptor';
import TrafficFilter from './TrafficFilter';

/**
 * The TrafficRuleDescriptor model module.
 * @module model/TrafficRuleDescriptor
 * @version 2.1.1
 */
class TrafficRuleDescriptor {
    /**
     * Constructs a new <code>TrafficRuleDescriptor</code>.
     * @alias module:model/TrafficRuleDescriptor
     * @param action {module:model/Action} 
     * @param filterType {module:model/FilterType} 
     * @param priority {Number} Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.
     * @param trafficFilter {Array.<module:model/TrafficFilter>} The filter used to identify specific flow/packets that need to be handled by the MEC host.
     * @param trafficRuleId {String} Identifies the traffic rule.
     */
    constructor(action, filterType, priority, trafficFilter, trafficRuleId) { 
        
        TrafficRuleDescriptor.initialize(this, action, filterType, priority, trafficFilter, trafficRuleId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, filterType, priority, trafficFilter, trafficRuleId) { 
        obj['action'] = action;
        obj['filterType'] = filterType;
        obj['priority'] = priority;
        obj['trafficFilter'] = trafficFilter;
        obj['trafficRuleId'] = trafficRuleId;
    }

    /**
     * Constructs a <code>TrafficRuleDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrafficRuleDescriptor} obj Optional instance to populate.
     * @return {module:model/TrafficRuleDescriptor} The populated <code>TrafficRuleDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrafficRuleDescriptor();

            if (data.hasOwnProperty('action')) {
                obj['action'] = Action.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('dstInterface')) {
                obj['dstInterface'] = ApiClient.convertToType(data['dstInterface'], [InterfaceDescriptor]);
            }
            if (data.hasOwnProperty('filterType')) {
                obj['filterType'] = FilterType.constructFromObject(data['filterType']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('trafficFilter')) {
                obj['trafficFilter'] = ApiClient.convertToType(data['trafficFilter'], [TrafficFilter]);
            }
            if (data.hasOwnProperty('trafficRuleId')) {
                obj['trafficRuleId'] = ApiClient.convertToType(data['trafficRuleId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrafficRuleDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrafficRuleDescriptor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrafficRuleDescriptor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['dstInterface']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dstInterface'])) {
                throw new Error("Expected the field `dstInterface` to be an array in the JSON data but got " + data['dstInterface']);
            }
            // validate the optional field `dstInterface` (array)
            for (const item of data['dstInterface']) {
                InterfaceDescriptor.validateJSON(item);
            };
        }
        if (data['trafficFilter']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trafficFilter'])) {
                throw new Error("Expected the field `trafficFilter` to be an array in the JSON data but got " + data['trafficFilter']);
            }
            // validate the optional field `trafficFilter` (array)
            for (const item of data['trafficFilter']) {
                TrafficFilter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trafficRuleId'] && !(typeof data['trafficRuleId'] === 'string' || data['trafficRuleId'] instanceof String)) {
            throw new Error("Expected the field `trafficRuleId` to be a primitive type in the JSON string but got " + data['trafficRuleId']);
        }

        return true;
    }


}

TrafficRuleDescriptor.RequiredProperties = ["action", "filterType", "priority", "trafficFilter", "trafficRuleId"];

/**
 * @member {module:model/Action} action
 */
TrafficRuleDescriptor.prototype['action'] = undefined;

/**
 * @member {Array.<module:model/InterfaceDescriptor>} dstInterface
 */
TrafficRuleDescriptor.prototype['dstInterface'] = undefined;

/**
 * @member {module:model/FilterType} filterType
 */
TrafficRuleDescriptor.prototype['filterType'] = undefined;

/**
 * Priority of this traffic rule. If traffic rule conflicts, the one with higher priority take precedence.
 * @member {Number} priority
 */
TrafficRuleDescriptor.prototype['priority'] = undefined;

/**
 * The filter used to identify specific flow/packets that need to be handled by the MEC host.
 * @member {Array.<module:model/TrafficFilter>} trafficFilter
 */
TrafficRuleDescriptor.prototype['trafficFilter'] = undefined;

/**
 * Identifies the traffic rule.
 * @member {String} trafficRuleId
 */
TrafficRuleDescriptor.prototype['trafficRuleId'] = undefined;






export default TrafficRuleDescriptor;

