/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrafficFilter model module.
 * @module model/TrafficFilter
 * @version 2.1.1
 */
class TrafficFilter {
    /**
     * Constructs a new <code>TrafficFilter</code>.
     * @alias module:model/TrafficFilter
     */
    constructor() { 
        
        TrafficFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrafficFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrafficFilter} obj Optional instance to populate.
     * @return {module:model/TrafficFilter} The populated <code>TrafficFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrafficFilter();

            if (data.hasOwnProperty('dSCP')) {
                obj['dSCP'] = ApiClient.convertToType(data['dSCP'], 'Number');
            }
            if (data.hasOwnProperty('dstAddress')) {
                obj['dstAddress'] = ApiClient.convertToType(data['dstAddress'], ['String']);
            }
            if (data.hasOwnProperty('dstPort')) {
                obj['dstPort'] = ApiClient.convertToType(data['dstPort'], ['String']);
            }
            if (data.hasOwnProperty('dstTunnelPort')) {
                obj['dstTunnelPort'] = ApiClient.convertToType(data['dstTunnelPort'], ['String']);
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], ['String']);
            }
            if (data.hasOwnProperty('qCI')) {
                obj['qCI'] = ApiClient.convertToType(data['qCI'], 'Number');
            }
            if (data.hasOwnProperty('srcAddress')) {
                obj['srcAddress'] = ApiClient.convertToType(data['srcAddress'], ['String']);
            }
            if (data.hasOwnProperty('srcPort')) {
                obj['srcPort'] = ApiClient.convertToType(data['srcPort'], ['String']);
            }
            if (data.hasOwnProperty('srcTunnelAddress')) {
                obj['srcTunnelAddress'] = ApiClient.convertToType(data['srcTunnelAddress'], ['String']);
            }
            if (data.hasOwnProperty('srcTunnelPort')) {
                obj['srcTunnelPort'] = ApiClient.convertToType(data['srcTunnelPort'], ['String']);
            }
            if (data.hasOwnProperty('tC')) {
                obj['tC'] = ApiClient.convertToType(data['tC'], 'Number');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], ['String']);
            }
            if (data.hasOwnProperty('tgtTunnelAddress')) {
                obj['tgtTunnelAddress'] = ApiClient.convertToType(data['tgtTunnelAddress'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrafficFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrafficFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dstAddress'])) {
            throw new Error("Expected the field `dstAddress` to be an array in the JSON data but got " + data['dstAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dstPort'])) {
            throw new Error("Expected the field `dstPort` to be an array in the JSON data but got " + data['dstPort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dstTunnelPort'])) {
            throw new Error("Expected the field `dstTunnelPort` to be an array in the JSON data but got " + data['dstTunnelPort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocol'])) {
            throw new Error("Expected the field `protocol` to be an array in the JSON data but got " + data['protocol']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['srcAddress'])) {
            throw new Error("Expected the field `srcAddress` to be an array in the JSON data but got " + data['srcAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['srcPort'])) {
            throw new Error("Expected the field `srcPort` to be an array in the JSON data but got " + data['srcPort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['srcTunnelAddress'])) {
            throw new Error("Expected the field `srcTunnelAddress` to be an array in the JSON data but got " + data['srcTunnelAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['srcTunnelPort'])) {
            throw new Error("Expected the field `srcTunnelPort` to be an array in the JSON data but got " + data['srcTunnelPort']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tag'])) {
            throw new Error("Expected the field `tag` to be an array in the JSON data but got " + data['tag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tgtTunnelAddress'])) {
            throw new Error("Expected the field `tgtTunnelAddress` to be an array in the JSON data but got " + data['tgtTunnelAddress']);
        }

        return true;
    }


}



/**
 * Used to match all IPv4 packets that have the same DSCP.
 * @member {Number} dSCP
 */
TrafficFilter.prototype['dSCP'] = undefined;

/**
 * A IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
 * @member {Array.<String>} dstAddress
 */
TrafficFilter.prototype['dstAddress'] = undefined;

/**
 * A port or a range of ports.
 * @member {Array.<String>} dstPort
 */
TrafficFilter.prototype['dstPort'] = undefined;

/**
 * Used for GTP tunnel based traffic rule.
 * @member {Array.<String>} dstTunnelPort
 */
TrafficFilter.prototype['dstTunnelPort'] = undefined;

/**
 * Specify the protocol of the traffic filter.
 * @member {Array.<String>} protocol
 */
TrafficFilter.prototype['protocol'] = undefined;

/**
 * Used to match all packets that have the same QCI.
 * @member {Number} qCI
 */
TrafficFilter.prototype['qCI'] = undefined;

/**
 * An IP address or a range of IP addresses.For IPv4, the IP address could be an IP address plus mask, or an individual IP address, or a range of IP addresses.For IPv6, the IP address could be an IP prefix, or a range of IP prefixes.
 * @member {Array.<String>} srcAddress
 */
TrafficFilter.prototype['srcAddress'] = undefined;

/**
 * A port or a range of ports.
 * @member {Array.<String>} srcPort
 */
TrafficFilter.prototype['srcPort'] = undefined;

/**
 * Used for GTP tunnel based traffic rule.
 * @member {Array.<String>} srcTunnelAddress
 */
TrafficFilter.prototype['srcTunnelAddress'] = undefined;

/**
 * Used for GTP tunnel based traffic rule.
 * @member {Array.<String>} srcTunnelPort
 */
TrafficFilter.prototype['srcTunnelPort'] = undefined;

/**
 * Used to match all IPv6 packets that have the same TC.
 * @member {Number} tC
 */
TrafficFilter.prototype['tC'] = undefined;

/**
 * Used for tag based traffic rule.
 * @member {Array.<String>} tag
 */
TrafficFilter.prototype['tag'] = undefined;

/**
 * Used for GTP tunnel based traffic rule.
 * @member {Array.<String>} tgtTunnelAddress
 */
TrafficFilter.prototype['tgtTunnelAddress'] = undefined;






export default TrafficFilter;

