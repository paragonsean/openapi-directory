/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransportDescriptor model module.
 * @module model/TransportDescriptor
 * @version 2.1.1
 */
class TransportDescriptor {
    /**
     * Constructs a new <code>TransportDescriptor</code>.
     * @alias module:model/TransportDescriptor
     * @param protocol {String} The name of the protocol used. Shall be set to HTTP for a REST API.
     * @param security {Object} See MEC011
     * @param type {String} 
     * @param version {String} The version of the protocol used.
     */
    constructor(protocol, security, type, version) { 
        
        TransportDescriptor.initialize(this, protocol, security, type, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, protocol, security, type, version) { 
        obj['protocol'] = protocol;
        obj['security'] = security;
        obj['type'] = type;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>TransportDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransportDescriptor} obj Optional instance to populate.
     * @return {module:model/TransportDescriptor} The populated <code>TransportDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransportDescriptor();

            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('security')) {
                obj['security'] = ApiClient.convertToType(data['security'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransportDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransportDescriptor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransportDescriptor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

TransportDescriptor.RequiredProperties = ["protocol", "security", "type", "version"];

/**
 * The name of the protocol used. Shall be set to HTTP for a REST API.
 * @member {String} protocol
 */
TransportDescriptor.prototype['protocol'] = undefined;

/**
 * See MEC011
 * @member {Object} security
 */
TransportDescriptor.prototype['security'] = undefined;

/**
 * @member {String} type
 */
TransportDescriptor.prototype['type'] = undefined;

/**
 * The version of the protocol used.
 * @member {String} version
 */
TransportDescriptor.prototype['version'] = undefined;






export default TransportDescriptor;

