/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TunnelType from './TunnelType';

/**
 * The TunnelInfo model module.
 * @module model/TunnelInfo
 * @version 2.1.1
 */
class TunnelInfo {
    /**
     * Constructs a new <code>TunnelInfo</code>.
     * @alias module:model/TunnelInfo
     * @param tunnelDstAddress {String} Destination address of the tunnel.
     * @param tunnelSrcAddress {String} Source address of the tunnel.
     * @param tunnelType {module:model/TunnelType} 
     */
    constructor(tunnelDstAddress, tunnelSrcAddress, tunnelType) { 
        
        TunnelInfo.initialize(this, tunnelDstAddress, tunnelSrcAddress, tunnelType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tunnelDstAddress, tunnelSrcAddress, tunnelType) { 
        obj['tunnelDstAddress'] = tunnelDstAddress;
        obj['tunnelSrcAddress'] = tunnelSrcAddress;
        obj['tunnelType'] = tunnelType;
    }

    /**
     * Constructs a <code>TunnelInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TunnelInfo} obj Optional instance to populate.
     * @return {module:model/TunnelInfo} The populated <code>TunnelInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TunnelInfo();

            if (data.hasOwnProperty('tunnelDstAddress')) {
                obj['tunnelDstAddress'] = ApiClient.convertToType(data['tunnelDstAddress'], 'String');
            }
            if (data.hasOwnProperty('tunnelSpecificData')) {
                obj['tunnelSpecificData'] = ApiClient.convertToType(data['tunnelSpecificData'], 'String');
            }
            if (data.hasOwnProperty('tunnelSrcAddress')) {
                obj['tunnelSrcAddress'] = ApiClient.convertToType(data['tunnelSrcAddress'], 'String');
            }
            if (data.hasOwnProperty('tunnelType')) {
                obj['tunnelType'] = TunnelType.constructFromObject(data['tunnelType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TunnelInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TunnelInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TunnelInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['tunnelDstAddress'] && !(typeof data['tunnelDstAddress'] === 'string' || data['tunnelDstAddress'] instanceof String)) {
            throw new Error("Expected the field `tunnelDstAddress` to be a primitive type in the JSON string but got " + data['tunnelDstAddress']);
        }
        // ensure the json data is a string
        if (data['tunnelSpecificData'] && !(typeof data['tunnelSpecificData'] === 'string' || data['tunnelSpecificData'] instanceof String)) {
            throw new Error("Expected the field `tunnelSpecificData` to be a primitive type in the JSON string but got " + data['tunnelSpecificData']);
        }
        // ensure the json data is a string
        if (data['tunnelSrcAddress'] && !(typeof data['tunnelSrcAddress'] === 'string' || data['tunnelSrcAddress'] instanceof String)) {
            throw new Error("Expected the field `tunnelSrcAddress` to be a primitive type in the JSON string but got " + data['tunnelSrcAddress']);
        }

        return true;
    }


}

TunnelInfo.RequiredProperties = ["tunnelDstAddress", "tunnelSrcAddress", "tunnelType"];

/**
 * Destination address of the tunnel.
 * @member {String} tunnelDstAddress
 */
TunnelInfo.prototype['tunnelDstAddress'] = undefined;

/**
 * @member {String} tunnelSpecificData
 */
TunnelInfo.prototype['tunnelSpecificData'] = undefined;

/**
 * Source address of the tunnel.
 * @member {String} tunnelSrcAddress
 */
TunnelInfo.prototype['tunnelSrcAddress'] = undefined;

/**
 * @member {module:model/TunnelType} tunnelType
 */
TunnelInfo.prototype['tunnelType'] = undefined;






export default TunnelInfo;

