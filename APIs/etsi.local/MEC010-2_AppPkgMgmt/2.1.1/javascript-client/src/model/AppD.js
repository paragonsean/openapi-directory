/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppExternalCpd from './AppExternalCpd';
import DNSRuleDescriptor from './DNSRuleDescriptor';
import FeatureDependency from './FeatureDependency';
import LatencyDescriptor from './LatencyDescriptor';
import ServiceDependency from './ServiceDependency';
import ServiceDescriptor from './ServiceDescriptor';
import TrafficRuleDescriptor from './TrafficRuleDescriptor';
import TransportDependency from './TransportDependency';

/**
 * The AppD model module.
 * @module model/AppD
 * @version 2.1.1
 */
class AppD {
    /**
     * Constructs a new <code>AppD</code>.
     * @alias module:model/AppD
     * @param appDId {String} Identifier of this MEC application descriptor. This attribute shall be globally unique. See noteÂ 1.
     * @param appDVersion {String} Identifies the version of the application descriptor.
     * @param appDescription {String} Human readable description of the MEC application.
     * @param appName {String} Name to identify the MEC application.
     * @param appProvider {String} Provider of the application and of the AppD.
     * @param appSoftVersion {String} Identifies the version of software of the MEC application.
     * @param mecVersion {Array.<String>} Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
     * @param swImageDescriptor {String} Ref NFV
     * @param virtualComputeDescriptor {String} Ref NFV
     */
    constructor(appDId, appDVersion, appDescription, appName, appProvider, appSoftVersion, mecVersion, swImageDescriptor, virtualComputeDescriptor) { 
        
        AppD.initialize(this, appDId, appDVersion, appDescription, appName, appProvider, appSoftVersion, mecVersion, swImageDescriptor, virtualComputeDescriptor);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appDId, appDVersion, appDescription, appName, appProvider, appSoftVersion, mecVersion, swImageDescriptor, virtualComputeDescriptor) { 
        obj['appDId'] = appDId;
        obj['appDVersion'] = appDVersion;
        obj['appDescription'] = appDescription;
        obj['appName'] = appName;
        obj['appProvider'] = appProvider;
        obj['appSoftVersion'] = appSoftVersion;
        obj['mecVersion'] = mecVersion;
        obj['swImageDescriptor'] = swImageDescriptor;
        obj['virtualComputeDescriptor'] = virtualComputeDescriptor;
    }

    /**
     * Constructs a <code>AppD</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppD} obj Optional instance to populate.
     * @return {module:model/AppD} The populated <code>AppD</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppD();

            if (data.hasOwnProperty('appDId')) {
                obj['appDId'] = ApiClient.convertToType(data['appDId'], 'String');
            }
            if (data.hasOwnProperty('appDNSRule')) {
                obj['appDNSRule'] = ApiClient.convertToType(data['appDNSRule'], [DNSRuleDescriptor]);
            }
            if (data.hasOwnProperty('appDVersion')) {
                obj['appDVersion'] = ApiClient.convertToType(data['appDVersion'], 'String');
            }
            if (data.hasOwnProperty('appDescription')) {
                obj['appDescription'] = ApiClient.convertToType(data['appDescription'], 'String');
            }
            if (data.hasOwnProperty('appExtCpd')) {
                obj['appExtCpd'] = ApiClient.convertToType(data['appExtCpd'], [AppExternalCpd]);
            }
            if (data.hasOwnProperty('appFeatureOptional')) {
                obj['appFeatureOptional'] = ApiClient.convertToType(data['appFeatureOptional'], [FeatureDependency]);
            }
            if (data.hasOwnProperty('appFeatureRequired')) {
                obj['appFeatureRequired'] = ApiClient.convertToType(data['appFeatureRequired'], [FeatureDependency]);
            }
            if (data.hasOwnProperty('appInfoName')) {
                obj['appInfoName'] = ApiClient.convertToType(data['appInfoName'], 'String');
            }
            if (data.hasOwnProperty('appLatency')) {
                obj['appLatency'] = LatencyDescriptor.constructFromObject(data['appLatency']);
            }
            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('appProvider')) {
                obj['appProvider'] = ApiClient.convertToType(data['appProvider'], 'String');
            }
            if (data.hasOwnProperty('appServiceOptional')) {
                obj['appServiceOptional'] = ApiClient.convertToType(data['appServiceOptional'], [ServiceDependency]);
            }
            if (data.hasOwnProperty('appServiceProduced')) {
                obj['appServiceProduced'] = ApiClient.convertToType(data['appServiceProduced'], [ServiceDescriptor]);
            }
            if (data.hasOwnProperty('appServiceRequired')) {
                obj['appServiceRequired'] = ApiClient.convertToType(data['appServiceRequired'], [ServiceDependency]);
            }
            if (data.hasOwnProperty('appSoftVersion')) {
                obj['appSoftVersion'] = ApiClient.convertToType(data['appSoftVersion'], 'String');
            }
            if (data.hasOwnProperty('appTrafficRule')) {
                obj['appTrafficRule'] = ApiClient.convertToType(data['appTrafficRule'], [TrafficRuleDescriptor]);
            }
            if (data.hasOwnProperty('changeAppInstanceStateOpConfig')) {
                obj['changeAppInstanceStateOpConfig'] = ApiClient.convertToType(data['changeAppInstanceStateOpConfig'], 'String');
            }
            if (data.hasOwnProperty('mecVersion')) {
                obj['mecVersion'] = ApiClient.convertToType(data['mecVersion'], ['String']);
            }
            if (data.hasOwnProperty('swImageDescriptor')) {
                obj['swImageDescriptor'] = ApiClient.convertToType(data['swImageDescriptor'], 'String');
            }
            if (data.hasOwnProperty('terminateAppInstanceOpConfig')) {
                obj['terminateAppInstanceOpConfig'] = ApiClient.convertToType(data['terminateAppInstanceOpConfig'], 'String');
            }
            if (data.hasOwnProperty('transportDependencies')) {
                obj['transportDependencies'] = ApiClient.convertToType(data['transportDependencies'], [TransportDependency]);
            }
            if (data.hasOwnProperty('virtualComputeDescriptor')) {
                obj['virtualComputeDescriptor'] = ApiClient.convertToType(data['virtualComputeDescriptor'], 'String');
            }
            if (data.hasOwnProperty('virtualStorageDescriptor')) {
                obj['virtualStorageDescriptor'] = ApiClient.convertToType(data['virtualStorageDescriptor'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppD</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppD</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppD.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appDId'] && !(typeof data['appDId'] === 'string' || data['appDId'] instanceof String)) {
            throw new Error("Expected the field `appDId` to be a primitive type in the JSON string but got " + data['appDId']);
        }
        if (data['appDNSRule']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appDNSRule'])) {
                throw new Error("Expected the field `appDNSRule` to be an array in the JSON data but got " + data['appDNSRule']);
            }
            // validate the optional field `appDNSRule` (array)
            for (const item of data['appDNSRule']) {
                DNSRuleDescriptor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['appDVersion'] && !(typeof data['appDVersion'] === 'string' || data['appDVersion'] instanceof String)) {
            throw new Error("Expected the field `appDVersion` to be a primitive type in the JSON string but got " + data['appDVersion']);
        }
        // ensure the json data is a string
        if (data['appDescription'] && !(typeof data['appDescription'] === 'string' || data['appDescription'] instanceof String)) {
            throw new Error("Expected the field `appDescription` to be a primitive type in the JSON string but got " + data['appDescription']);
        }
        if (data['appExtCpd']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appExtCpd'])) {
                throw new Error("Expected the field `appExtCpd` to be an array in the JSON data but got " + data['appExtCpd']);
            }
            // validate the optional field `appExtCpd` (array)
            for (const item of data['appExtCpd']) {
                AppExternalCpd.validateJSON(item);
            };
        }
        if (data['appFeatureOptional']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appFeatureOptional'])) {
                throw new Error("Expected the field `appFeatureOptional` to be an array in the JSON data but got " + data['appFeatureOptional']);
            }
            // validate the optional field `appFeatureOptional` (array)
            for (const item of data['appFeatureOptional']) {
                FeatureDependency.validateJSON(item);
            };
        }
        if (data['appFeatureRequired']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appFeatureRequired'])) {
                throw new Error("Expected the field `appFeatureRequired` to be an array in the JSON data but got " + data['appFeatureRequired']);
            }
            // validate the optional field `appFeatureRequired` (array)
            for (const item of data['appFeatureRequired']) {
                FeatureDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['appInfoName'] && !(typeof data['appInfoName'] === 'string' || data['appInfoName'] instanceof String)) {
            throw new Error("Expected the field `appInfoName` to be a primitive type in the JSON string but got " + data['appInfoName']);
        }
        // validate the optional field `appLatency`
        if (data['appLatency']) { // data not null
          LatencyDescriptor.validateJSON(data['appLatency']);
        }
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['appProvider'] && !(typeof data['appProvider'] === 'string' || data['appProvider'] instanceof String)) {
            throw new Error("Expected the field `appProvider` to be a primitive type in the JSON string but got " + data['appProvider']);
        }
        if (data['appServiceOptional']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appServiceOptional'])) {
                throw new Error("Expected the field `appServiceOptional` to be an array in the JSON data but got " + data['appServiceOptional']);
            }
            // validate the optional field `appServiceOptional` (array)
            for (const item of data['appServiceOptional']) {
                ServiceDependency.validateJSON(item);
            };
        }
        if (data['appServiceProduced']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appServiceProduced'])) {
                throw new Error("Expected the field `appServiceProduced` to be an array in the JSON data but got " + data['appServiceProduced']);
            }
            // validate the optional field `appServiceProduced` (array)
            for (const item of data['appServiceProduced']) {
                ServiceDescriptor.validateJSON(item);
            };
        }
        if (data['appServiceRequired']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appServiceRequired'])) {
                throw new Error("Expected the field `appServiceRequired` to be an array in the JSON data but got " + data['appServiceRequired']);
            }
            // validate the optional field `appServiceRequired` (array)
            for (const item of data['appServiceRequired']) {
                ServiceDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['appSoftVersion'] && !(typeof data['appSoftVersion'] === 'string' || data['appSoftVersion'] instanceof String)) {
            throw new Error("Expected the field `appSoftVersion` to be a primitive type in the JSON string but got " + data['appSoftVersion']);
        }
        if (data['appTrafficRule']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appTrafficRule'])) {
                throw new Error("Expected the field `appTrafficRule` to be an array in the JSON data but got " + data['appTrafficRule']);
            }
            // validate the optional field `appTrafficRule` (array)
            for (const item of data['appTrafficRule']) {
                TrafficRuleDescriptor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['changeAppInstanceStateOpConfig'] && !(typeof data['changeAppInstanceStateOpConfig'] === 'string' || data['changeAppInstanceStateOpConfig'] instanceof String)) {
            throw new Error("Expected the field `changeAppInstanceStateOpConfig` to be a primitive type in the JSON string but got " + data['changeAppInstanceStateOpConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mecVersion'])) {
            throw new Error("Expected the field `mecVersion` to be an array in the JSON data but got " + data['mecVersion']);
        }
        // ensure the json data is a string
        if (data['swImageDescriptor'] && !(typeof data['swImageDescriptor'] === 'string' || data['swImageDescriptor'] instanceof String)) {
            throw new Error("Expected the field `swImageDescriptor` to be a primitive type in the JSON string but got " + data['swImageDescriptor']);
        }
        // ensure the json data is a string
        if (data['terminateAppInstanceOpConfig'] && !(typeof data['terminateAppInstanceOpConfig'] === 'string' || data['terminateAppInstanceOpConfig'] instanceof String)) {
            throw new Error("Expected the field `terminateAppInstanceOpConfig` to be a primitive type in the JSON string but got " + data['terminateAppInstanceOpConfig']);
        }
        if (data['transportDependencies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transportDependencies'])) {
                throw new Error("Expected the field `transportDependencies` to be an array in the JSON data but got " + data['transportDependencies']);
            }
            // validate the optional field `transportDependencies` (array)
            for (const item of data['transportDependencies']) {
                TransportDependency.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['virtualComputeDescriptor'] && !(typeof data['virtualComputeDescriptor'] === 'string' || data['virtualComputeDescriptor'] instanceof String)) {
            throw new Error("Expected the field `virtualComputeDescriptor` to be a primitive type in the JSON string but got " + data['virtualComputeDescriptor']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['virtualStorageDescriptor'])) {
            throw new Error("Expected the field `virtualStorageDescriptor` to be an array in the JSON data but got " + data['virtualStorageDescriptor']);
        }

        return true;
    }


}

AppD.RequiredProperties = ["appDId", "appDVersion", "appDescription", "appName", "appProvider", "appSoftVersion", "mecVersion", "swImageDescriptor", "virtualComputeDescriptor"];

/**
 * Identifier of this MEC application descriptor. This attribute shall be globally unique. See noteÂ 1.
 * @member {String} appDId
 */
AppD.prototype['appDId'] = undefined;

/**
 * Describes DNS rules the MEC application requires.
 * @member {Array.<module:model/DNSRuleDescriptor>} appDNSRule
 */
AppD.prototype['appDNSRule'] = undefined;

/**
 * Identifies the version of the application descriptor.
 * @member {String} appDVersion
 */
AppD.prototype['appDVersion'] = undefined;

/**
 * Human readable description of the MEC application.
 * @member {String} appDescription
 */
AppD.prototype['appDescription'] = undefined;

/**
 * Describes external interface(s) exposed by this MEC application.
 * @member {Array.<module:model/AppExternalCpd>} appExtCpd
 */
AppD.prototype['appExtCpd'] = undefined;

/**
 * Describes features a MEC application may use if available.
 * @member {Array.<module:model/FeatureDependency>} appFeatureOptional
 */
AppD.prototype['appFeatureOptional'] = undefined;

/**
 * Describes features a MEC application requires to run.
 * @member {Array.<module:model/FeatureDependency>} appFeatureRequired
 */
AppD.prototype['appFeatureRequired'] = undefined;

/**
 * Human readable name for the MEC application.
 * @member {String} appInfoName
 */
AppD.prototype['appInfoName'] = undefined;

/**
 * @member {module:model/LatencyDescriptor} appLatency
 */
AppD.prototype['appLatency'] = undefined;

/**
 * Name to identify the MEC application.
 * @member {String} appName
 */
AppD.prototype['appName'] = undefined;

/**
 * Provider of the application and of the AppD.
 * @member {String} appProvider
 */
AppD.prototype['appProvider'] = undefined;

/**
 * Describes services a MEC application may use if available.
 * @member {Array.<module:model/ServiceDependency>} appServiceOptional
 */
AppD.prototype['appServiceOptional'] = undefined;

/**
 * Describes services a MEC application is able to produce to the platform or other MEC applications. Only relevant for service-producing apps.
 * @member {Array.<module:model/ServiceDescriptor>} appServiceProduced
 */
AppD.prototype['appServiceProduced'] = undefined;

/**
 * Describes services a MEC application requires to run.
 * @member {Array.<module:model/ServiceDependency>} appServiceRequired
 */
AppD.prototype['appServiceRequired'] = undefined;

/**
 * Identifies the version of software of the MEC application.
 * @member {String} appSoftVersion
 */
AppD.prototype['appSoftVersion'] = undefined;

/**
 * Describes traffic rules the MEC application requires.
 * @member {Array.<module:model/TrafficRuleDescriptor>} appTrafficRule
 */
AppD.prototype['appTrafficRule'] = undefined;

/**
 * NFV
 * @member {String} changeAppInstanceStateOpConfig
 */
AppD.prototype['changeAppInstanceStateOpConfig'] = undefined;

/**
 * Identifies version(s) of MEC system compatible with the MEC application described in this version of the AppD.
 * @member {Array.<String>} mecVersion
 */
AppD.prototype['mecVersion'] = undefined;

/**
 * Ref NFV
 * @member {String} swImageDescriptor
 */
AppD.prototype['swImageDescriptor'] = undefined;

/**
 * NFV
 * @member {String} terminateAppInstanceOpConfig
 */
AppD.prototype['terminateAppInstanceOpConfig'] = undefined;

/**
 * Transports, if any, that this application requires to be provided by the platform. These transports will be used by the application to deliver services provided by this application. Only relevant for service-producing apps. See note 2.
 * @member {Array.<module:model/TransportDependency>} transportDependencies
 */
AppD.prototype['transportDependencies'] = undefined;

/**
 * Ref NFV
 * @member {String} virtualComputeDescriptor
 */
AppD.prototype['virtualComputeDescriptor'] = undefined;

/**
 * Defines descriptors of virtual storage resources to be used by the MEC application.
 * @member {Array.<String>} virtualStorageDescriptor
 */
AppD.prototype['virtualStorageDescriptor'] = undefined;






export default AppD;

