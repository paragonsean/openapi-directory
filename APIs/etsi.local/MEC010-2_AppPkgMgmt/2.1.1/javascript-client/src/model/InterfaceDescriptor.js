/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InterfaceType from './InterfaceType';
import TunnelInfo from './TunnelInfo';

/**
 * The InterfaceDescriptor model module.
 * @module model/InterfaceDescriptor
 * @version 2.1.1
 */
class InterfaceDescriptor {
    /**
     * Constructs a new <code>InterfaceDescriptor</code>.
     * @alias module:model/InterfaceDescriptor
     * @param interfaceType {module:model/InterfaceType} 
     */
    constructor(interfaceType) { 
        
        InterfaceDescriptor.initialize(this, interfaceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interfaceType) { 
        obj['interfaceType'] = interfaceType;
    }

    /**
     * Constructs a <code>InterfaceDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterfaceDescriptor} obj Optional instance to populate.
     * @return {module:model/InterfaceDescriptor} The populated <code>InterfaceDescriptor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterfaceDescriptor();

            if (data.hasOwnProperty('dstIPAddress')) {
                obj['dstIPAddress'] = ApiClient.convertToType(data['dstIPAddress'], 'String');
            }
            if (data.hasOwnProperty('dstMACAddress')) {
                obj['dstMACAddress'] = ApiClient.convertToType(data['dstMACAddress'], 'String');
            }
            if (data.hasOwnProperty('interfaceType')) {
                obj['interfaceType'] = InterfaceType.constructFromObject(data['interfaceType']);
            }
            if (data.hasOwnProperty('srcMACAddress')) {
                obj['srcMACAddress'] = ApiClient.convertToType(data['srcMACAddress'], 'String');
            }
            if (data.hasOwnProperty('tunnelInfo')) {
                obj['tunnelInfo'] = TunnelInfo.constructFromObject(data['tunnelInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterfaceDescriptor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterfaceDescriptor</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InterfaceDescriptor.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dstIPAddress'] && !(typeof data['dstIPAddress'] === 'string' || data['dstIPAddress'] instanceof String)) {
            throw new Error("Expected the field `dstIPAddress` to be a primitive type in the JSON string but got " + data['dstIPAddress']);
        }
        // ensure the json data is a string
        if (data['dstMACAddress'] && !(typeof data['dstMACAddress'] === 'string' || data['dstMACAddress'] instanceof String)) {
            throw new Error("Expected the field `dstMACAddress` to be a primitive type in the JSON string but got " + data['dstMACAddress']);
        }
        // ensure the json data is a string
        if (data['srcMACAddress'] && !(typeof data['srcMACAddress'] === 'string' || data['srcMACAddress'] instanceof String)) {
            throw new Error("Expected the field `srcMACAddress` to be a primitive type in the JSON string but got " + data['srcMACAddress']);
        }
        // validate the optional field `tunnelInfo`
        if (data['tunnelInfo']) { // data not null
          TunnelInfo.validateJSON(data['tunnelInfo']);
        }

        return true;
    }


}

InterfaceDescriptor.RequiredProperties = ["interfaceType"];

/**
 * If the interface type is IP, the destination address identifies the IP address of the destination. Only used for dstInterface.
 * @member {String} dstIPAddress
 */
InterfaceDescriptor.prototype['dstIPAddress'] = undefined;

/**
 * If the interface type is MAC, the destination address identifies the MAC address of the destination. Only used for dstInterface.
 * @member {String} dstMACAddress
 */
InterfaceDescriptor.prototype['dstMACAddress'] = undefined;

/**
 * @member {module:model/InterfaceType} interfaceType
 */
InterfaceDescriptor.prototype['interfaceType'] = undefined;

/**
 * If the interface type is MAC, the source address identifies the MAC address of the interface.
 * @member {String} srcMACAddress
 */
InterfaceDescriptor.prototype['srcMACAddress'] = undefined;

/**
 * @member {module:model/TunnelInfo} tunnelInfo
 */
InterfaceDescriptor.prototype['tunnelInfo'] = undefined;






export default InterfaceDescriptor;

