/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppPkgNotificationLinks from './AppPkgNotificationLinks';
import AppPkgNotificationType from './AppPkgNotificationType';
import TimeStamp from './TimeStamp';

/**
 * The AppPkgNotification model module.
 * @module model/AppPkgNotification
 * @version 2.1.1
 */
class AppPkgNotification {
    /**
     * Constructs a new <code>AppPkgNotification</code>.
     * &#39;This data type represents an application package management notification for informing the subscribers about onboarding application package resources. The notification is triggered when a new application package is onboarded&#39;
     * @alias module:model/AppPkgNotification
     * @param links {module:model/AppPkgNotificationLinks} 
     * @param appDId {String} Identifier of this MEC application descriptor. This attribute shall be globally unique.
     * @param appPkgId {String} Identifier of the onboarded application package.
     * @param id {String} ''
     * @param notificationType {module:model/AppPkgNotificationType} 
     * @param operationalState {module:model/AppPkgNotification.OperationalStateEnum} 
     * @param subscriptionId {String} Identifier of the subscription related to this notification.
     * @param timeStamp {module:model/TimeStamp} 
     */
    constructor(links, appDId, appPkgId, id, notificationType, operationalState, subscriptionId, timeStamp) { 
        
        AppPkgNotification.initialize(this, links, appDId, appPkgId, id, notificationType, operationalState, subscriptionId, timeStamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, appDId, appPkgId, id, notificationType, operationalState, subscriptionId, timeStamp) { 
        obj['_links'] = links;
        obj['appDId'] = appDId;
        obj['appPkgId'] = appPkgId;
        obj['id'] = id;
        obj['notificationType'] = notificationType;
        obj['operationalState'] = operationalState;
        obj['subscriptionId'] = subscriptionId;
        obj['timeStamp'] = timeStamp;
    }

    /**
     * Constructs a <code>AppPkgNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppPkgNotification} obj Optional instance to populate.
     * @return {module:model/AppPkgNotification} The populated <code>AppPkgNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppPkgNotification();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = AppPkgNotificationLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('appDId')) {
                obj['appDId'] = ApiClient.convertToType(data['appDId'], 'String');
            }
            if (data.hasOwnProperty('appPkgId')) {
                obj['appPkgId'] = ApiClient.convertToType(data['appPkgId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('notificationType')) {
                obj['notificationType'] = AppPkgNotificationType.constructFromObject(data['notificationType']);
            }
            if (data.hasOwnProperty('operationalState')) {
                obj['operationalState'] = ApiClient.convertToType(data['operationalState'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('timeStamp')) {
                obj['timeStamp'] = TimeStamp.constructFromObject(data['timeStamp']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppPkgNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppPkgNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppPkgNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          AppPkgNotificationLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['appDId'] && !(typeof data['appDId'] === 'string' || data['appDId'] instanceof String)) {
            throw new Error("Expected the field `appDId` to be a primitive type in the JSON string but got " + data['appDId']);
        }
        // ensure the json data is a string
        if (data['appPkgId'] && !(typeof data['appPkgId'] === 'string' || data['appPkgId'] instanceof String)) {
            throw new Error("Expected the field `appPkgId` to be a primitive type in the JSON string but got " + data['appPkgId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['operationalState'] && !(typeof data['operationalState'] === 'string' || data['operationalState'] instanceof String)) {
            throw new Error("Expected the field `operationalState` to be a primitive type in the JSON string but got " + data['operationalState']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // validate the optional field `timeStamp`
        if (data['timeStamp']) { // data not null
          TimeStamp.validateJSON(data['timeStamp']);
        }

        return true;
    }


}

AppPkgNotification.RequiredProperties = ["_links", "appDId", "appPkgId", "id", "notificationType", "operationalState", "subscriptionId", "timeStamp"];

/**
 * @member {module:model/AppPkgNotificationLinks} _links
 */
AppPkgNotification.prototype['_links'] = undefined;

/**
 * Identifier of this MEC application descriptor. This attribute shall be globally unique.
 * @member {String} appDId
 */
AppPkgNotification.prototype['appDId'] = undefined;

/**
 * Identifier of the onboarded application package.
 * @member {String} appPkgId
 */
AppPkgNotification.prototype['appPkgId'] = undefined;

/**
 * ''
 * @member {String} id
 */
AppPkgNotification.prototype['id'] = undefined;

/**
 * @member {module:model/AppPkgNotificationType} notificationType
 */
AppPkgNotification.prototype['notificationType'] = undefined;

/**
 * @member {module:model/AppPkgNotification.OperationalStateEnum} operationalState
 */
AppPkgNotification.prototype['operationalState'] = undefined;

/**
 * Identifier of the subscription related to this notification.
 * @member {String} subscriptionId
 */
AppPkgNotification.prototype['subscriptionId'] = undefined;

/**
 * @member {module:model/TimeStamp} timeStamp
 */
AppPkgNotification.prototype['timeStamp'] = undefined;





/**
 * Allowed values for the <code>operationalState</code> property.
 * @enum {String}
 * @readonly
 */
AppPkgNotification['OperationalStateEnum'] = {

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};



export default AppPkgNotification;

