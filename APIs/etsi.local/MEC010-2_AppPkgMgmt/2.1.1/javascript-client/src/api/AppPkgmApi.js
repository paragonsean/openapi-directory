/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppD from '../model/AppD';
import AppPkgInfo from '../model/AppPkgInfo';
import AppPkgInfoModifications from '../model/AppPkgInfoModifications';
import AppPkgSubscription from '../model/AppPkgSubscription';
import AppPkgSubscriptionInfo from '../model/AppPkgSubscriptionInfo';
import AppPkgSubscriptionLinkList from '../model/AppPkgSubscriptionLinkList';
import CreateAppPkg from '../model/CreateAppPkg';
import ProblemDetails from '../model/ProblemDetails';

/**
* AppPkgm service.
* @module api/AppPkgmApi
* @version 2.1.1
*/
export default class AppPkgmApi {

    /**
    * Constructs a new AppPkgmApi. 
    * @alias module:api/AppPkgmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appDGET operation.
     * @callback module:api/AppPkgmApi~appDGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppD} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param {String} appDId Identifier of an application descriptor
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Attribute-based filtering parameters according to ETSI GS MEC 009
     * @param {String} [allFields] Include all complex attributes in the response.
     * @param {String} [fields] Complex attributes of AppPkgInfo to be included into the response
     * @param {String} [excludeFields] Complex attributes of AppPkgInfo to be excluded from the response.
     * @param {String} [excludeDefault] Indicates to exclude the following complex attributes of AppPkgInfo from the response.
     * @param {module:api/AppPkgmApi~appDGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppD}
     */
    appDGET(appDId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appDId' is set
      if (appDId === undefined || appDId === null) {
        throw new Error("Missing the required parameter 'appDId' when calling appDGET");
      }

      let pathParams = {
        'appDId': appDId
      };
      let queryParams = {
        'filter': opts['filter'],
        'all_fields': opts['allFields'],
        'fields': opts['fields'],
        'exclude_fields': opts['excludeFields'],
        'exclude_default': opts['excludeDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zip', 'text/plain', 'application/json'];
      let returnType = AppD;
      return this.apiClient.callApi(
        '/onboarded_app_packages/{appDId}/appd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appDIdGET operation.
     * @callback module:api/AppPkgmApi~appDIdGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param {String} appDId Identifier of an application descriptor
     * @param {module:api/AppPkgmApi~appDIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appDIdGET(appDId, callback) {
      let postBody = null;
      // verify the required parameter 'appDId' is set
      if (appDId === undefined || appDId === null) {
        throw new Error("Missing the required parameter 'appDId' when calling appDIdGET");
      }

      let pathParams = {
        'appDId': appDId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/onboarded_app_packages/{appDId}/package_content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appDIdPUT operation.
     * @callback module:api/AppPkgmApi~appDIdPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param {String} appDId Identifier of an application descriptor
     * @param {Object} opts Optional parameters
     * @param {File} [body] 
     * @param {module:api/AppPkgmApi~appDIdPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appDIdPUT(appDId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'appDId' is set
      if (appDId === undefined || appDId === null) {
        throw new Error("Missing the required parameter 'appDId' when calling appDIdPUT");
      }

      let pathParams = {
        'appDId': appDId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/zip'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/onboarded_app_packages/{appDId}/package_content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPackageDELETE operation.
     * @callback module:api/AppPkgmApi~appPackageDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an individual application package resources
     * Deletes an individual application package resources
     * @param {String} appPkgId Identifier of an individual application package resource
     * @param {module:api/AppPkgmApi~appPackageDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    appPackageDELETE(appPkgId, callback) {
      let postBody = null;
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPackageDELETE");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPackageGET operation.
     * @callback module:api/AppPkgmApi~appPackageGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPkgInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries the information related to individual application package resources
     * Queries the information related to individual application package resources
     * @param {String} appPkgId Identifier of an individual application package resource
     * @param {module:api/AppPkgmApi~appPackageGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPkgInfo}
     */
    appPackageGET(appPkgId, callback) {
      let postBody = null;
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPackageGET");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPkgInfo;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPackagePATCH operation.
     * @callback module:api/AppPkgmApi~appPackagePATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPkgInfoModifications} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the operational state of an individual application package resource
     * Updates the operational state of an individual application package resources
     * @param {String} appPkgId Identifier of an individual application package resource
     * @param {module:model/AppPkgInfoModifications} appPkgInfoModifications Operational state to be set
     * @param {module:api/AppPkgmApi~appPackagePATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPkgInfoModifications}
     */
    appPackagePATCH(appPkgId, appPkgInfoModifications, callback) {
      let postBody = appPkgInfoModifications;
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPackagePATCH");
      }
      // verify the required parameter 'appPkgInfoModifications' is set
      if (appPkgInfoModifications === undefined || appPkgInfoModifications === null) {
        throw new Error("Missing the required parameter 'appPkgInfoModifications' when calling appPackagePATCH");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppPkgInfoModifications;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPackagesGET operation.
     * @callback module:api/AppPkgmApi~appPackagesGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppPkgInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries information relating to on-boarded application packages in the MEO
     * queries information relating to on-boarded application packages in the MEO
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Attribute-based filtering parameters according to ETSI GS MEC 009
     * @param {String} [allFields] Include all complex attributes in the response.
     * @param {String} [fields] Complex attributes of AppPkgInfo to be included into the response
     * @param {String} [excludeFields] Complex attributes of AppPkgInfo to be excluded from the response.
     * @param {String} [excludeDefault] Indicates to exclude the following complex attributes of AppPkgInfo from the response.
     * @param {module:api/AppPkgmApi~appPackagesGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppPkgInfo>}
     */
    appPackagesGET(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'all_fields': opts['allFields'],
        'fields': opts['fields'],
        'exclude_fields': opts['excludeFields'],
        'exclude_default': opts['excludeDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppPkgInfo];
      return this.apiClient.callApi(
        '/app_packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPackagesPOST operation.
     * @callback module:api/AppPkgmApi~appPackagesPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppPkgInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a resource for on-boarding an application package to a MEO
     * Create a resource for on-boarding an application package to a MEO
     * @param {module:model/CreateAppPkg} createAppPkg Resource to be created
     * @param {module:api/AppPkgmApi~appPackagesPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppPkgInfo>}
     */
    appPackagesPOST(createAppPkg, callback) {
      let postBody = createAppPkg;
      // verify the required parameter 'createAppPkg' is set
      if (createAppPkg === undefined || createAppPkg === null) {
        throw new Error("Missing the required parameter 'createAppPkg' when calling appPackagesPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [AppPkgInfo];
      return this.apiClient.callApi(
        '/app_packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPkgGET operation.
     * @callback module:api/AppPkgmApi~appPkgGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * Fetch the onboarded application package content identified by appPkgId or appDId.
     * @param {String} appPkgId Identifier of an on-boarded individual application package
     * @param {module:api/AppPkgmApi~appPkgGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appPkgGET(appPkgId, callback) {
      let postBody = null;
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPkgGET");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}/package_content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPkgIdGET operation.
     * @callback module:api/AppPkgmApi~appPkgIdGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppD} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the content of the AppD of on-boarded individual application package resources.
     * Reads the content of the AppD of on-boarded individual application package resources.
     * @param {String} appPkgId Identifier of an on-boarded individual application package
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Attribute-based filtering parameters according to ETSI GS MEC 009
     * @param {String} [allFields] Include all complex attributes in the response.
     * @param {String} [fields] Complex attributes of AppPkgInfo to be included into the response
     * @param {String} [excludeFields] Complex attributes of AppPkgInfo to be excluded from the response.
     * @param {String} [excludeDefault] Indicates to exclude the following complex attributes of AppPkgInfo from the response.
     * @param {module:api/AppPkgmApi~appPkgIdGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppD}
     */
    appPkgIdGET(appPkgId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPkgIdGET");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
        'filter': opts['filter'],
        'all_fields': opts['allFields'],
        'fields': opts['fields'],
        'exclude_fields': opts['excludeFields'],
        'exclude_default': opts['excludeDefault']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/zip', 'text/plain', 'application/json'];
      let returnType = AppD;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}/appd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appPkgPUT operation.
     * @callback module:api/AppPkgmApi~appPkgPUTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads the content of application package.
     * Uploads the content of application package.
     * @param {String} appPkgId Identifier of an on-boarded individual application package
     * @param {Object} opts Optional parameters
     * @param {File} [body] 
     * @param {module:api/AppPkgmApi~appPkgPUTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appPkgPUT(appPkgId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'appPkgId' is set
      if (appPkgId === undefined || appPkgId === null) {
        throw new Error("Missing the required parameter 'appPkgId' when calling appPkgPUT");
      }

      let pathParams = {
        'appPkgId': appPkgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/zip'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app_packages/{appPkgId}/package_content', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the individualSubscriptionDELETE operation.
     * @callback module:api/AppPkgmApi~individualSubscriptionDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * Deletes the individual subscription to notifications about application package changes in MEO.
     * @param {String} subscriptionId Identifier of an individual subscription to notifications about application package changes
     * @param {module:api/AppPkgmApi~individualSubscriptionDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    individualSubscriptionDELETE(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling individualSubscriptionDELETE");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the individualSubscriptionGET operation.
     * @callback module:api/AppPkgmApi~individualSubscriptionGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPkgSubscriptionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to represent an individual subscription to notifications about application package changes.
     * Used to represent an individual subscription to notifications about application package changes.
     * @param {String} subscriptionId Identifier of an individual subscription to notifications about application package changes
     * @param {module:api/AppPkgmApi~individualSubscriptionGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPkgSubscriptionInfo}
     */
    individualSubscriptionGET(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling individualSubscriptionGET");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPkgSubscriptionInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsGET operation.
     * @callback module:api/AppPkgmApi~subscriptionsGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPkgSubscriptionLinkList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * used to retrieve the information of subscriptions to individual application package resource in MEO
     * used to retrieve the information of subscriptions to individual application package resource in MEO package
     * @param {module:api/AppPkgmApi~subscriptionsGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPkgSubscriptionLinkList}
     */
    subscriptionsGET(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppPkgSubscriptionLinkList;
      return this.apiClient.callApi(
        '/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsPOST operation.
     * @callback module:api/AppPkgmApi~subscriptionsPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppPkgSubscriptionInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to notifications about on-boarding an application package
     * Subscribe to notifications about on-boarding an application package
     * @param {module:model/AppPkgSubscription} appPkgSubscription The input parameters of subscribe operation to notifications
     * @param {module:api/AppPkgmApi~subscriptionsPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppPkgSubscriptionInfo}
     */
    subscriptionsPOST(appPkgSubscription, callback) {
      let postBody = appPkgSubscription;
      // verify the required parameter 'appPkgSubscription' is set
      if (appPkgSubscription === undefined || appPkgSubscription === null) {
        throw new Error("Missing the required parameter 'appPkgSubscription' when calling subscriptionsPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppPkgSubscriptionInfo;
      return this.apiClient.callApi(
        '/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
