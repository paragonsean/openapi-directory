/**
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management
 * ETSI GS MEC 010-2 - Part 2: Application lifecycle, rules and requirements management described using OpenAPI.
 *
 * The version of the OpenAPI document: 2.1.1
 * Contact: cti_support@etsi.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EtsiGsMec0102Part2ApplicationLifecycleRulesAndRequirementsManagement);
  }
}(this, function(expect, EtsiGsMec0102Part2ApplicationLifecycleRulesAndRequirementsManagement) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EtsiGsMec0102Part2ApplicationLifecycleRulesAndRequirementsManagement.AppPkgmApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AppPkgmApi', function() {
    describe('appDGET', function() {
      it('should call appDGET successfully', function(done) {
        //uncomment below and update the code to test appDGET
        //instance.appDGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appDIdGET', function() {
      it('should call appDIdGET successfully', function(done) {
        //uncomment below and update the code to test appDIdGET
        //instance.appDIdGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appDIdPUT', function() {
      it('should call appDIdPUT successfully', function(done) {
        //uncomment below and update the code to test appDIdPUT
        //instance.appDIdPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPackageDELETE', function() {
      it('should call appPackageDELETE successfully', function(done) {
        //uncomment below and update the code to test appPackageDELETE
        //instance.appPackageDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPackageGET', function() {
      it('should call appPackageGET successfully', function(done) {
        //uncomment below and update the code to test appPackageGET
        //instance.appPackageGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPackagePATCH', function() {
      it('should call appPackagePATCH successfully', function(done) {
        //uncomment below and update the code to test appPackagePATCH
        //instance.appPackagePATCH(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPackagesGET', function() {
      it('should call appPackagesGET successfully', function(done) {
        //uncomment below and update the code to test appPackagesGET
        //instance.appPackagesGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPackagesPOST', function() {
      it('should call appPackagesPOST successfully', function(done) {
        //uncomment below and update the code to test appPackagesPOST
        //instance.appPackagesPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPkgGET', function() {
      it('should call appPkgGET successfully', function(done) {
        //uncomment below and update the code to test appPkgGET
        //instance.appPkgGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPkgIdGET', function() {
      it('should call appPkgIdGET successfully', function(done) {
        //uncomment below and update the code to test appPkgIdGET
        //instance.appPkgIdGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appPkgPUT', function() {
      it('should call appPkgPUT successfully', function(done) {
        //uncomment below and update the code to test appPkgPUT
        //instance.appPkgPUT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('individualSubscriptionDELETE', function() {
      it('should call individualSubscriptionDELETE successfully', function(done) {
        //uncomment below and update the code to test individualSubscriptionDELETE
        //instance.individualSubscriptionDELETE(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('individualSubscriptionGET', function() {
      it('should call individualSubscriptionGET successfully', function(done) {
        //uncomment below and update the code to test individualSubscriptionGET
        //instance.individualSubscriptionGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsGET', function() {
      it('should call subscriptionsGET successfully', function(done) {
        //uncomment below and update the code to test subscriptionsGET
        //instance.subscriptionsGET(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionsPOST', function() {
      it('should call subscriptionsPOST successfully', function(done) {
        //uncomment below and update the code to test subscriptionsPOST
        //instance.subscriptionsPOST(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
