/**
 * Jaypee University Of Information Technology, Waknaghat (H. P.)
 * Jaypee University Of Information Technology, Waknaghat (H. P.) (http://www.juit.ac.in/) is issuing Degree certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently, data for the year 2019 is made available by Jaypee University Of Information Technology.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcademicCertificateSchemaIssuedToPersonAddress from './AcademicCertificateSchemaIssuedToPersonAddress';
import AcademicCertificateSchemaIssuedToPersonPhoto from './AcademicCertificateSchemaIssuedToPersonPhoto';

/**
 * The AcademicCertificateSchemaIssuedToPerson model module.
 * @module model/AcademicCertificateSchemaIssuedToPerson
 * @version 3.0.0
 */
class AcademicCertificateSchemaIssuedToPerson {
    /**
     * Constructs a new <code>AcademicCertificateSchemaIssuedToPerson</code>.
     * @alias module:model/AcademicCertificateSchemaIssuedToPerson
     * @param address {module:model/AcademicCertificateSchemaIssuedToPersonAddress} 
     * @param photo {module:model/AcademicCertificateSchemaIssuedToPersonPhoto} 
     * @param category {String} 
     * @param disabilityStatus {String} 
     * @param dob {String} 
     * @param email {String} 
     * @param gender {String} 
     * @param maritalStatus {String} 
     * @param motherName {String} 
     * @param name {String} 
     * @param phone {String} 
     * @param religion {String} 
     * @param swd {String} 
     * @param swdIndicator {String} 
     * @param title {String} 
     * @param uid {String} 
     */
    constructor(address, photo, category, disabilityStatus, dob, email, gender, maritalStatus, motherName, name, phone, religion, swd, swdIndicator, title, uid) { 
        
        AcademicCertificateSchemaIssuedToPerson.initialize(this, address, photo, category, disabilityStatus, dob, email, gender, maritalStatus, motherName, name, phone, religion, swd, swdIndicator, title, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, photo, category, disabilityStatus, dob, email, gender, maritalStatus, motherName, name, phone, religion, swd, swdIndicator, title, uid) { 
        obj['Address'] = address;
        obj['Photo'] = photo;
        obj['category'] = category;
        obj['disabilityStatus'] = disabilityStatus;
        obj['dob'] = dob;
        obj['email'] = email;
        obj['gender'] = gender;
        obj['maritalStatus'] = maritalStatus;
        obj['motherName'] = motherName;
        obj['name'] = name;
        obj['phone'] = phone;
        obj['religion'] = religion;
        obj['swd'] = swd;
        obj['swdIndicator'] = swdIndicator;
        obj['title'] = title;
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaIssuedToPerson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaIssuedToPerson} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaIssuedToPerson} The populated <code>AcademicCertificateSchemaIssuedToPerson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaIssuedToPerson();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = AcademicCertificateSchemaIssuedToPersonAddress.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('Photo')) {
                obj['Photo'] = AcademicCertificateSchemaIssuedToPersonPhoto.constructFromObject(data['Photo']);
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('disabilityStatus')) {
                obj['disabilityStatus'] = ApiClient.convertToType(data['disabilityStatus'], 'String');
            }
            if (data.hasOwnProperty('dob')) {
                obj['dob'] = ApiClient.convertToType(data['dob'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('maritalStatus')) {
                obj['maritalStatus'] = ApiClient.convertToType(data['maritalStatus'], 'String');
            }
            if (data.hasOwnProperty('motherName')) {
                obj['motherName'] = ApiClient.convertToType(data['motherName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('religion')) {
                obj['religion'] = ApiClient.convertToType(data['religion'], 'String');
            }
            if (data.hasOwnProperty('swd')) {
                obj['swd'] = ApiClient.convertToType(data['swd'], 'String');
            }
            if (data.hasOwnProperty('swdIndicator')) {
                obj['swdIndicator'] = ApiClient.convertToType(data['swdIndicator'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaIssuedToPerson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaIssuedToPerson</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaIssuedToPerson.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          AcademicCertificateSchemaIssuedToPersonAddress.validateJSON(data['Address']);
        }
        // validate the optional field `Photo`
        if (data['Photo']) { // data not null
          AcademicCertificateSchemaIssuedToPersonPhoto.validateJSON(data['Photo']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['disabilityStatus'] && !(typeof data['disabilityStatus'] === 'string' || data['disabilityStatus'] instanceof String)) {
            throw new Error("Expected the field `disabilityStatus` to be a primitive type in the JSON string but got " + data['disabilityStatus']);
        }
        // ensure the json data is a string
        if (data['dob'] && !(typeof data['dob'] === 'string' || data['dob'] instanceof String)) {
            throw new Error("Expected the field `dob` to be a primitive type in the JSON string but got " + data['dob']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['maritalStatus'] && !(typeof data['maritalStatus'] === 'string' || data['maritalStatus'] instanceof String)) {
            throw new Error("Expected the field `maritalStatus` to be a primitive type in the JSON string but got " + data['maritalStatus']);
        }
        // ensure the json data is a string
        if (data['motherName'] && !(typeof data['motherName'] === 'string' || data['motherName'] instanceof String)) {
            throw new Error("Expected the field `motherName` to be a primitive type in the JSON string but got " + data['motherName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['religion'] && !(typeof data['religion'] === 'string' || data['religion'] instanceof String)) {
            throw new Error("Expected the field `religion` to be a primitive type in the JSON string but got " + data['religion']);
        }
        // ensure the json data is a string
        if (data['swd'] && !(typeof data['swd'] === 'string' || data['swd'] instanceof String)) {
            throw new Error("Expected the field `swd` to be a primitive type in the JSON string but got " + data['swd']);
        }
        // ensure the json data is a string
        if (data['swdIndicator'] && !(typeof data['swdIndicator'] === 'string' || data['swdIndicator'] instanceof String)) {
            throw new Error("Expected the field `swdIndicator` to be a primitive type in the JSON string but got " + data['swdIndicator']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

AcademicCertificateSchemaIssuedToPerson.RequiredProperties = ["Address", "Photo", "category", "disabilityStatus", "dob", "email", "gender", "maritalStatus", "motherName", "name", "phone", "religion", "swd", "swdIndicator", "title", "uid"];

/**
 * @member {module:model/AcademicCertificateSchemaIssuedToPersonAddress} Address
 */
AcademicCertificateSchemaIssuedToPerson.prototype['Address'] = undefined;

/**
 * @member {module:model/AcademicCertificateSchemaIssuedToPersonPhoto} Photo
 */
AcademicCertificateSchemaIssuedToPerson.prototype['Photo'] = undefined;

/**
 * @member {String} category
 */
AcademicCertificateSchemaIssuedToPerson.prototype['category'] = undefined;

/**
 * @member {String} disabilityStatus
 */
AcademicCertificateSchemaIssuedToPerson.prototype['disabilityStatus'] = undefined;

/**
 * @member {String} dob
 */
AcademicCertificateSchemaIssuedToPerson.prototype['dob'] = undefined;

/**
 * @member {String} email
 */
AcademicCertificateSchemaIssuedToPerson.prototype['email'] = undefined;

/**
 * @member {String} gender
 */
AcademicCertificateSchemaIssuedToPerson.prototype['gender'] = undefined;

/**
 * @member {String} maritalStatus
 */
AcademicCertificateSchemaIssuedToPerson.prototype['maritalStatus'] = undefined;

/**
 * @member {String} motherName
 */
AcademicCertificateSchemaIssuedToPerson.prototype['motherName'] = undefined;

/**
 * @member {String} name
 */
AcademicCertificateSchemaIssuedToPerson.prototype['name'] = undefined;

/**
 * @member {String} phone
 */
AcademicCertificateSchemaIssuedToPerson.prototype['phone'] = undefined;

/**
 * @member {String} religion
 */
AcademicCertificateSchemaIssuedToPerson.prototype['religion'] = undefined;

/**
 * @member {String} swd
 */
AcademicCertificateSchemaIssuedToPerson.prototype['swd'] = undefined;

/**
 * @member {String} swdIndicator
 */
AcademicCertificateSchemaIssuedToPerson.prototype['swdIndicator'] = undefined;

/**
 * @member {String} title
 */
AcademicCertificateSchemaIssuedToPerson.prototype['title'] = undefined;

/**
 * @member {String} uid
 */
AcademicCertificateSchemaIssuedToPerson.prototype['uid'] = undefined;






export default AcademicCertificateSchemaIssuedToPerson;

