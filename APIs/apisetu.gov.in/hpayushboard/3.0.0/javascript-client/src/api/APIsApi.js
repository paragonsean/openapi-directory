/**
 * Board of Ayurvedic and Unani Systems of Medicine, Himachal Pradesh, Himachal Pradesh
 * Board of Ayurvedic and Unani Systems of Medicine, Himachal Pradesh (http://hpayushboard.org/) is the online service portal by Govt. of Himachal Pradesh. Registration Certificate issued online, can be pulled into citizens DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Phcer400Response from '../model/Phcer400Response';
import Phcer401Response from '../model/Phcer401Response';
import Phcer404Response from '../model/Phcer404Response';
import Phcer500Response from '../model/Phcer500Response';
import Phcer502Response from '../model/Phcer502Response';
import Phcer503Response from '../model/Phcer503Response';
import Phcer504Response from '../model/Phcer504Response';
import PhcerRequest from '../model/PhcerRequest';
import RpcerRequest from '../model/RpcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the phcer operation.
     * @callback module:api/APIsApi~phcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pharmacist Registration Certificate
     * API to verify Pharmacist Registration Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/PhcerRequest} [phcerRequest] Request format
     * @param {module:api/APIsApi~phcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    phcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['phcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/phcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rpcer operation.
     * @callback module:api/APIsApi~rpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pharmacist Renewal certificate
     * API to verify Pharmacist Renewal certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/RpcerRequest} [rpcerRequest] Request format
     * @param {module:api/APIsApi~rpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['rpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
