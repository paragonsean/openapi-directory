/*
 * National Institute of Technology, Patna
 * National Institute of Technology, Patna (http://www.nitp.ac.in/) is issuing Degree certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently, data for the year 2019 and 2020 is made available by National Institute of Technology.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DgcerRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:38:04.808806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DgcerRequestCertificateParameters {
  public static final String SERIALIZED_NAME_C_N_A_M_E = "CNAME";
  @SerializedName(SERIALIZED_NAME_C_N_A_M_E)
  private String CNAME;

  public static final String SERIALIZED_NAME_R_E_G_N_O = "REGNO";
  @SerializedName(SERIALIZED_NAME_R_E_G_N_O)
  private String REGNO;

  public static final String SERIALIZED_NAME_R_R_O_L_L = "RROLL";
  @SerializedName(SERIALIZED_NAME_R_R_O_L_L)
  private String RROLL;

  public static final String SERIALIZED_NAME_Y_E_A_R = "YEAR";
  @SerializedName(SERIALIZED_NAME_Y_E_A_R)
  private String YEAR;

  public DgcerRequestCertificateParameters() {
  }

  public DgcerRequestCertificateParameters CNAME(String CNAME) {
    this.CNAME = CNAME;
    return this;
  }

  /**
   * CANDIDATE NAME
   * @return CNAME
   */
  @javax.annotation.Nonnull
  public String getCNAME() {
    return CNAME;
  }

  public void setCNAME(String CNAME) {
    this.CNAME = CNAME;
  }


  public DgcerRequestCertificateParameters REGNO(String REGNO) {
    this.REGNO = REGNO;
    return this;
  }

  /**
   * REGN NO
   * @return REGNO
   */
  @javax.annotation.Nonnull
  public String getREGNO() {
    return REGNO;
  }

  public void setREGNO(String REGNO) {
    this.REGNO = REGNO;
  }


  public DgcerRequestCertificateParameters RROLL(String RROLL) {
    this.RROLL = RROLL;
    return this;
  }

  /**
   * ROLL NO
   * @return RROLL
   */
  @javax.annotation.Nonnull
  public String getRROLL() {
    return RROLL;
  }

  public void setRROLL(String RROLL) {
    this.RROLL = RROLL;
  }


  public DgcerRequestCertificateParameters YEAR(String YEAR) {
    this.YEAR = YEAR;
    return this;
  }

  /**
   * YEAR
   * @return YEAR
   */
  @javax.annotation.Nonnull
  public String getYEAR() {
    return YEAR;
  }

  public void setYEAR(String YEAR) {
    this.YEAR = YEAR;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DgcerRequestCertificateParameters dgcerRequestCertificateParameters = (DgcerRequestCertificateParameters) o;
    return Objects.equals(this.CNAME, dgcerRequestCertificateParameters.CNAME) &&
        Objects.equals(this.REGNO, dgcerRequestCertificateParameters.REGNO) &&
        Objects.equals(this.RROLL, dgcerRequestCertificateParameters.RROLL) &&
        Objects.equals(this.YEAR, dgcerRequestCertificateParameters.YEAR);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CNAME, REGNO, RROLL, YEAR);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DgcerRequestCertificateParameters {\n");
    sb.append("    CNAME: ").append(toIndentedString(CNAME)).append("\n");
    sb.append("    REGNO: ").append(toIndentedString(REGNO)).append("\n");
    sb.append("    RROLL: ").append(toIndentedString(RROLL)).append("\n");
    sb.append("    YEAR: ").append(toIndentedString(YEAR)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CNAME");
    openapiFields.add("REGNO");
    openapiFields.add("RROLL");
    openapiFields.add("YEAR");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CNAME");
    openapiRequiredFields.add("REGNO");
    openapiRequiredFields.add("RROLL");
    openapiRequiredFields.add("YEAR");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DgcerRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DgcerRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DgcerRequestCertificateParameters is not found in the empty JSON string", DgcerRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DgcerRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DgcerRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DgcerRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CNAME").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CNAME` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CNAME").toString()));
      }
      if (!jsonObj.get("REGNO").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `REGNO` to be a primitive type in the JSON string but got `%s`", jsonObj.get("REGNO").toString()));
      }
      if (!jsonObj.get("RROLL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RROLL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RROLL").toString()));
      }
      if (!jsonObj.get("YEAR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YEAR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YEAR").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DgcerRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DgcerRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DgcerRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DgcerRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<DgcerRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, DgcerRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DgcerRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DgcerRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DgcerRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to DgcerRequestCertificateParameters
   */
  public static DgcerRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DgcerRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of DgcerRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

