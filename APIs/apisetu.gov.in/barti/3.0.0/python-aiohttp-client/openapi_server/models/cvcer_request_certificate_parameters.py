# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CvcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, vcno: str=None):
        """CvcerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this CvcerRequestCertificateParameters.
        :param vcno: The vcno of this CvcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'vcno': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'vcno': 'VCNo'
        }

        self._dob = dob
        self._vcno = vcno

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CvcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cvcer_request_certificateParameters of this CvcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this CvcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this CvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this CvcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this CvcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def vcno(self):
        """Gets the vcno of this CvcerRequestCertificateParameters.

        VC No

        :return: The vcno of this CvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._vcno

    @vcno.setter
    def vcno(self, vcno):
        """Sets the vcno of this CvcerRequestCertificateParameters.

        VC No

        :param vcno: The vcno of this CvcerRequestCertificateParameters.
        :type vcno: str
        """
        if vcno is None:
            raise ValueError("Invalid value for `vcno`, must not be `None`")

        self._vcno = vcno
