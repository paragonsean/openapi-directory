# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CripcRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: str=None, policy_number: str=None, policy_start_date: str=None):
        """CripcRequestCertificateParameters - a model defined in OpenAPI

        :param customer_id: The customer_id of this CripcRequestCertificateParameters.
        :param policy_number: The policy_number of this CripcRequestCertificateParameters.
        :param policy_start_date: The policy_start_date of this CripcRequestCertificateParameters.
        """
        self.openapi_types = {
            'customer_id': str,
            'policy_number': str,
            'policy_start_date': str
        }

        self.attribute_map = {
            'customer_id': 'customer_Id',
            'policy_number': 'policy_Number',
            'policy_start_date': 'policy_StartDate'
        }

        self._customer_id = customer_id
        self._policy_number = policy_number
        self._policy_start_date = policy_start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CripcRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cripc_request_certificateParameters of this CripcRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this CripcRequestCertificateParameters.

        Customer No

        :return: The customer_id of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CripcRequestCertificateParameters.

        Customer No

        :param customer_id: The customer_id of this CripcRequestCertificateParameters.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def policy_number(self):
        """Gets the policy_number of this CripcRequestCertificateParameters.

        Policy Number

        :return: The policy_number of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this CripcRequestCertificateParameters.

        Policy Number

        :param policy_number: The policy_number of this CripcRequestCertificateParameters.
        :type policy_number: str
        """
        if policy_number is None:
            raise ValueError("Invalid value for `policy_number`, must not be `None`")

        self._policy_number = policy_number

    @property
    def policy_start_date(self):
        """Gets the policy_start_date of this CripcRequestCertificateParameters.

        Policy Start Date

        :return: The policy_start_date of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_start_date

    @policy_start_date.setter
    def policy_start_date(self, policy_start_date):
        """Sets the policy_start_date of this CripcRequestCertificateParameters.

        Policy Start Date

        :param policy_start_date: The policy_start_date of this CripcRequestCertificateParameters.
        :type policy_start_date: str
        """
        if policy_start_date is None:
            raise ValueError("Invalid value for `policy_start_date`, must not be `None`")

        self._policy_start_date = policy_start_date
