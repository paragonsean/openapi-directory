# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentArtifactSchemaConsentUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, id_number: str=None, id_type: str=None, mobile: str=None):
        """ConsentArtifactSchemaConsentUser - a model defined in OpenAPI

        :param email: The email of this ConsentArtifactSchemaConsentUser.
        :param id_number: The id_number of this ConsentArtifactSchemaConsentUser.
        :param id_type: The id_type of this ConsentArtifactSchemaConsentUser.
        :param mobile: The mobile of this ConsentArtifactSchemaConsentUser.
        """
        self.openapi_types = {
            'email': str,
            'id_number': str,
            'id_type': str,
            'mobile': str
        }

        self.attribute_map = {
            'email': 'email',
            'id_number': 'idNumber',
            'id_type': 'idType',
            'mobile': 'mobile'
        }

        self._email = email
        self._id_number = id_number
        self._id_type = id_type
        self._mobile = mobile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentArtifactSchemaConsentUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentArtifactSchema_consent_user of this ConsentArtifactSchemaConsentUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ConsentArtifactSchemaConsentUser.


        :return: The email of this ConsentArtifactSchemaConsentUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConsentArtifactSchemaConsentUser.


        :param email: The email of this ConsentArtifactSchemaConsentUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")

        self._email = email

    @property
    def id_number(self):
        """Gets the id_number of this ConsentArtifactSchemaConsentUser.


        :return: The id_number of this ConsentArtifactSchemaConsentUser.
        :rtype: str
        """
        return self._id_number

    @id_number.setter
    def id_number(self, id_number):
        """Sets the id_number of this ConsentArtifactSchemaConsentUser.


        :param id_number: The id_number of this ConsentArtifactSchemaConsentUser.
        :type id_number: str
        """
        if id_number is None:
            raise ValueError("Invalid value for `id_number`, must not be `None`")
        if id_number is not None and len(id_number) < 1:
            raise ValueError("Invalid value for `id_number`, length must be greater than or equal to `1`")

        self._id_number = id_number

    @property
    def id_type(self):
        """Gets the id_type of this ConsentArtifactSchemaConsentUser.


        :return: The id_type of this ConsentArtifactSchemaConsentUser.
        :rtype: str
        """
        return self._id_type

    @id_type.setter
    def id_type(self, id_type):
        """Sets the id_type of this ConsentArtifactSchemaConsentUser.


        :param id_type: The id_type of this ConsentArtifactSchemaConsentUser.
        :type id_type: str
        """
        if id_type is None:
            raise ValueError("Invalid value for `id_type`, must not be `None`")
        if id_type is not None and len(id_type) < 1:
            raise ValueError("Invalid value for `id_type`, length must be greater than or equal to `1`")

        self._id_type = id_type

    @property
    def mobile(self):
        """Gets the mobile of this ConsentArtifactSchemaConsentUser.


        :return: The mobile of this ConsentArtifactSchemaConsentUser.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this ConsentArtifactSchemaConsentUser.


        :param mobile: The mobile of this ConsentArtifactSchemaConsentUser.
        :type mobile: str
        """
        if mobile is None:
            raise ValueError("Invalid value for `mobile`, must not be `None`")
        if mobile is not None and len(mobile) < 1:
            raise ValueError("Invalid value for `mobile`, length must be greater than or equal to `1`")

        self._mobile = mobile
