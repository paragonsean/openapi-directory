/**
 * eDistrict Chandigarh, Chandigarh
 * eDistrict Chandigarh(http://chdservices.gov.in/) is the online service delivery portal for Chandigarh Administration. Certain documents issued by it (e.g. Senior Citizen Identity Card) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIncer_400_response.h"
#include "OAIIncer_401_response.h"
#include "OAIIncer_404_response.h"
#include "OAIIncer_500_response.h"
#include "OAIIncer_502_response.h"
#include "OAIIncer_503_response.h"
#include "OAIIncer_504_response.h"
#include "OAIIncer_request.h"
#include "OAISicrd_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_incer_request OAIIncer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIIncer_request> &oai_incer_request = ::OpenAPI::OptionalParam<OAIIncer_request>());

    /**
    * @param[in]  oai_incer_request OAIIncer_request [optional]
    */
    virtual void rmcer(const ::OpenAPI::OptionalParam<OAIIncer_request> &oai_incer_request = ::OpenAPI::OptionalParam<OAIIncer_request>());

    /**
    * @param[in]  oai_incer_request OAIIncer_request [optional]
    */
    virtual void rscer(const ::OpenAPI::OptionalParam<OAIIncer_request> &oai_incer_request = ::OpenAPI::OptionalParam<OAIIncer_request>());

    /**
    * @param[in]  oai_sicrd_request OAISicrd_request [optional]
    */
    virtual void sicrd(const ::OpenAPI::OptionalParam<OAISicrd_request> &oai_sicrd_request = ::OpenAPI::OptionalParam<OAISicrd_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void incerCallback(OAIHttpRequestWorker *worker);
    void rmcerCallback(OAIHttpRequestWorker *worker);
    void rscerCallback(OAIHttpRequestWorker *worker);
    void sicrdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void incerSignal();
    void rmcerSignal();
    void rscerSignal();
    void sicrdSignal();


    void incerSignalFull(OAIHttpRequestWorker *worker);
    void rmcerSignalFull(OAIHttpRequestWorker *worker);
    void rscerSignalFull(OAIHttpRequestWorker *worker);
    void sicrdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalError() instead")
    void rmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalError() instead")
    void rscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sicrdSignalError() instead")
    void sicrdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sicrdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalErrorFull() instead")
    void rmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalErrorFull() instead")
    void rscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sicrdSignalErrorFull() instead")
    void sicrdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sicrdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
