/*
 * Himachal Pradesh Department of Revenue, Himachal Pradesh
 * Lok Praman Patra (http://admis.hp.nic.in/epraman/) is the online service delivery portal by Himachal Pradesh Govt. Certain documents issued by it (e.g.  Bonafide, Dogra Class, Income, Character Certificates etc.) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Agcer400Response;
import org.openapitools.client.model.Agcer401Response;
import org.openapitools.client.model.Agcer404Response;
import org.openapitools.client.model.Agcer500Response;
import org.openapitools.client.model.Agcer502Response;
import org.openapitools.client.model.Agcer503Response;
import org.openapitools.client.model.Agcer504Response;
import org.openapitools.client.model.AgcerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApisApi
 */
@Disabled
public class ApisApiTest {

    private final ApisApi api = new ApisApi();

    /**
     * Agriculture/ Agriculturist Certificate
     *
     * API to verify Agriculture/ Agriculturist Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void agcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.agcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Backward Area Certificate
     *
     * API to verify Backward Area Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bacerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.bacer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Bonafide Certificate
     *
     * API to verify Bonafide Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bhcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.bhcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Character Certificate
     *
     * API to verify Character Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.chcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Dogra Class Certificate
     *
     * API to verify Dogra Class Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dccerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.dccer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Freedom Fighter Certificate
     *
     * API to verify Freedom Fighter Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ffcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.ffcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Income Certificate
     *
     * API to verify Income Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.incer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Legal Heir Certificate
     *
     * API to verify Legal Heir Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lhcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.lhcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Minority Certificate
     *
     * API to verify Minority Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mncerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.mncer(agcerRequest);
        // TODO: test validations
    }

    /**
     * OBC Certificate
     *
     * API to verify OBC Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void obcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.obcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Passport/ Passport Verification
     *
     * API to verify Passport/ Passport Verification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void psprtTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.psprt(agcerRequest);
        // TODO: test validations
    }

    /**
     * Rural Area Certificate
     *
     * API to verify Rural Area Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void racerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.racer(agcerRequest);
        // TODO: test validations
    }

    /**
     * Marriage Certificate
     *
     * API to verify Marriage Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rmcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.rmcer(agcerRequest);
        // TODO: test validations
    }

    /**
     * SC/ST  Certificate
     *
     * API to verify SC/ST  Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shcerTest() throws ApiException {
        AgcerRequest agcerRequest = null;
        api.shcer(agcerRequest);
        // TODO: test validations
    }

}
