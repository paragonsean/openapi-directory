/**
 * Himachal Pradesh Department of Revenue, Himachal Pradesh
 * Lok Praman Patra (http://admis.hp.nic.in/epraman/) is the online service delivery portal by Himachal Pradesh Govt. Certain documents issued by it (e.g.  Bonafide, Dogra Class, Income, Character Certificates etc.) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAgcer_400_response.h"
#include "OAIAgcer_401_response.h"
#include "OAIAgcer_404_response.h"
#include "OAIAgcer_500_response.h"
#include "OAIAgcer_502_response.h"
#include "OAIAgcer_503_response.h"
#include "OAIAgcer_504_response.h"
#include "OAIAgcer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void agcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void bacer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void bhcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void chcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void dccer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void ffcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void lhcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void mncer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void obcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void psprt(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void racer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void rmcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());

    /**
    * @param[in]  oai_agcer_request OAIAgcer_request [optional]
    */
    virtual void shcer(const ::OpenAPI::OptionalParam<OAIAgcer_request> &oai_agcer_request = ::OpenAPI::OptionalParam<OAIAgcer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void agcerCallback(OAIHttpRequestWorker *worker);
    void bacerCallback(OAIHttpRequestWorker *worker);
    void bhcerCallback(OAIHttpRequestWorker *worker);
    void chcerCallback(OAIHttpRequestWorker *worker);
    void dccerCallback(OAIHttpRequestWorker *worker);
    void ffcerCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);
    void lhcerCallback(OAIHttpRequestWorker *worker);
    void mncerCallback(OAIHttpRequestWorker *worker);
    void obcerCallback(OAIHttpRequestWorker *worker);
    void psprtCallback(OAIHttpRequestWorker *worker);
    void racerCallback(OAIHttpRequestWorker *worker);
    void rmcerCallback(OAIHttpRequestWorker *worker);
    void shcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void agcerSignal();
    void bacerSignal();
    void bhcerSignal();
    void chcerSignal();
    void dccerSignal();
    void ffcerSignal();
    void incerSignal();
    void lhcerSignal();
    void mncerSignal();
    void obcerSignal();
    void psprtSignal();
    void racerSignal();
    void rmcerSignal();
    void shcerSignal();


    void agcerSignalFull(OAIHttpRequestWorker *worker);
    void bacerSignalFull(OAIHttpRequestWorker *worker);
    void bhcerSignalFull(OAIHttpRequestWorker *worker);
    void chcerSignalFull(OAIHttpRequestWorker *worker);
    void dccerSignalFull(OAIHttpRequestWorker *worker);
    void ffcerSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);
    void lhcerSignalFull(OAIHttpRequestWorker *worker);
    void mncerSignalFull(OAIHttpRequestWorker *worker);
    void obcerSignalFull(OAIHttpRequestWorker *worker);
    void psprtSignalFull(OAIHttpRequestWorker *worker);
    void racerSignalFull(OAIHttpRequestWorker *worker);
    void rmcerSignalFull(OAIHttpRequestWorker *worker);
    void shcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use agcerSignalError() instead")
    void agcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void agcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bacerSignalError() instead")
    void bacerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bacerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bhcerSignalError() instead")
    void bhcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bhcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chcerSignalError() instead")
    void chcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dccerSignalError() instead")
    void dccerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dccerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ffcerSignalError() instead")
    void ffcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ffcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalError() instead")
    void lhcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalError() instead")
    void mncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalError() instead")
    void obcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use psprtSignalError() instead")
    void psprtSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void psprtSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalError() instead")
    void racerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalError() instead")
    void rmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalError() instead")
    void shcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use agcerSignalErrorFull() instead")
    void agcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bacerSignalErrorFull() instead")
    void bacerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bacerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bhcerSignalErrorFull() instead")
    void bhcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bhcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chcerSignalErrorFull() instead")
    void chcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dccerSignalErrorFull() instead")
    void dccerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dccerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ffcerSignalErrorFull() instead")
    void ffcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ffcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalErrorFull() instead")
    void lhcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalErrorFull() instead")
    void mncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalErrorFull() instead")
    void obcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use psprtSignalErrorFull() instead")
    void psprtSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void psprtSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalErrorFull() instead")
    void racerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalErrorFull() instead")
    void rmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalErrorFull() instead")
    void shcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
