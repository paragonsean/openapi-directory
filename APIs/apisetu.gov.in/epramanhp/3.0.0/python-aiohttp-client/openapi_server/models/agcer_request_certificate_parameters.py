# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ref_no: str=None):
        """AgcerRequestCertificateParameters - a model defined in OpenAPI

        :param name: The name of this AgcerRequestCertificateParameters.
        :param ref_no: The ref_no of this AgcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'name': str,
            'ref_no': str
        }

        self.attribute_map = {
            'name': 'Name',
            'ref_no': 'RefNo'
        }

        self._name = name
        self._ref_no = ref_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The agcer_request_certificateParameters of this AgcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AgcerRequestCertificateParameters.

        Applicant Name

        :return: The name of this AgcerRequestCertificateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgcerRequestCertificateParameters.

        Applicant Name

        :param name: The name of this AgcerRequestCertificateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ref_no(self):
        """Gets the ref_no of this AgcerRequestCertificateParameters.

        Certificate Id

        :return: The ref_no of this AgcerRequestCertificateParameters.
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this AgcerRequestCertificateParameters.

        Certificate Id

        :param ref_no: The ref_no of this AgcerRequestCertificateParameters.
        :type ref_no: str
        """
        if ref_no is None:
            raise ValueError("Invalid value for `ref_no`, must not be `None`")

        self._ref_no = ref_no
