/**
 * Himachal Pradesh Department of Revenue, Himachal Pradesh
 * Lok Praman Patra (http://admis.hp.nic.in/epraman/) is the online service delivery portal by Himachal Pradesh Govt. Certain documents issued by it (e.g.  Bonafide, Dogra Class, Income, Character Certificates etc.) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Agcer400Response from '../model/Agcer400Response';
import Agcer401Response from '../model/Agcer401Response';
import Agcer404Response from '../model/Agcer404Response';
import Agcer500Response from '../model/Agcer500Response';
import Agcer502Response from '../model/Agcer502Response';
import Agcer503Response from '../model/Agcer503Response';
import Agcer504Response from '../model/Agcer504Response';
import AgcerRequest from '../model/AgcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the agcer operation.
     * @callback module:api/APIsApi~agcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agriculture/ Agriculturist Certificate
     * API to verify Agriculture/ Agriculturist Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~agcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/agcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bacer operation.
     * @callback module:api/APIsApi~bacerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backward Area Certificate
     * API to verify Backward Area Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~bacerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bacer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bacer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bhcer operation.
     * @callback module:api/APIsApi~bhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bonafide Certificate
     * API to verify Bonafide Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~bhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chcer operation.
     * @callback module:api/APIsApi~chcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Character Certificate
     * API to verify Character Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~chcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    chcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/chcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dccer operation.
     * @callback module:api/APIsApi~dccerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dogra Class Certificate
     * API to verify Dogra Class Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~dccerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dccer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dccer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ffcer operation.
     * @callback module:api/APIsApi~ffcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freedom Fighter Certificate
     * API to verify Freedom Fighter Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~ffcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ffcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ffcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lhcer operation.
     * @callback module:api/APIsApi~lhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legal Heir Certificate
     * API to verify Legal Heir Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~lhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mncer operation.
     * @callback module:api/APIsApi~mncerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Minority Certificate
     * API to verify Minority Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~mncerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mncer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mncer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obcer operation.
     * @callback module:api/APIsApi~obcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OBC Certificate
     * API to verify OBC Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~obcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/obcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the psprt operation.
     * @callback module:api/APIsApi~psprtCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Passport/ Passport Verification
     * API to verify Passport/ Passport Verification.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~psprtCallback} callback The callback function, accepting three arguments: error, data, response
     */
    psprt(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/psprt/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the racer operation.
     * @callback module:api/APIsApi~racerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rural Area Certificate
     * API to verify Rural Area Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~racerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    racer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/racer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rmcer operation.
     * @callback module:api/APIsApi~rmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marriage Certificate
     * API to verify Marriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~rmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shcer operation.
     * @callback module:api/APIsApi~shcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SC/ST  Certificate
     * API to verify SC/ST  Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AgcerRequest} [agcerRequest] Request format
     * @param {module:api/APIsApi~shcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['agcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
