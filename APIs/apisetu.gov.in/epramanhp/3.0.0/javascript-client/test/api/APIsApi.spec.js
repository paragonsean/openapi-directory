/**
 * Himachal Pradesh Department of Revenue, Himachal Pradesh
 * Lok Praman Patra (http://admis.hp.nic.in/epraman/) is the online service delivery portal by Himachal Pradesh Govt. Certain documents issued by it (e.g.  Bonafide, Dogra Class, Income, Character Certificates etc.) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HimachalPradeshDepartmentOfRevenueHimachalPradesh);
  }
}(this, function(expect, HimachalPradeshDepartmentOfRevenueHimachalPradesh) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HimachalPradeshDepartmentOfRevenueHimachalPradesh.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('agcer', function() {
      it('should call agcer successfully', function(done) {
        //uncomment below and update the code to test agcer
        //instance.agcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bacer', function() {
      it('should call bacer successfully', function(done) {
        //uncomment below and update the code to test bacer
        //instance.bacer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bhcer', function() {
      it('should call bhcer successfully', function(done) {
        //uncomment below and update the code to test bhcer
        //instance.bhcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chcer', function() {
      it('should call chcer successfully', function(done) {
        //uncomment below and update the code to test chcer
        //instance.chcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dccer', function() {
      it('should call dccer successfully', function(done) {
        //uncomment below and update the code to test dccer
        //instance.dccer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ffcer', function() {
      it('should call ffcer successfully', function(done) {
        //uncomment below and update the code to test ffcer
        //instance.ffcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incer', function() {
      it('should call incer successfully', function(done) {
        //uncomment below and update the code to test incer
        //instance.incer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lhcer', function() {
      it('should call lhcer successfully', function(done) {
        //uncomment below and update the code to test lhcer
        //instance.lhcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mncer', function() {
      it('should call mncer successfully', function(done) {
        //uncomment below and update the code to test mncer
        //instance.mncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('obcer', function() {
      it('should call obcer successfully', function(done) {
        //uncomment below and update the code to test obcer
        //instance.obcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('psprt', function() {
      it('should call psprt successfully', function(done) {
        //uncomment below and update the code to test psprt
        //instance.psprt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('racer', function() {
      it('should call racer successfully', function(done) {
        //uncomment below and update the code to test racer
        //instance.racer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rmcer', function() {
      it('should call rmcer successfully', function(done) {
        //uncomment below and update the code to test rmcer
        //instance.rmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shcer', function() {
      it('should call shcer successfully', function(done) {
        //uncomment below and update the code to test shcer
        //instance.shcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
