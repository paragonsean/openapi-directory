/**
 * CISCE
 * CISCE (http://www.cisce.org/) is issuing marksheets, passing certificates, migration certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently available - 2014-2019 (marksheets, passing certificates of ICSE & ISC and migration certificates of ISC).
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Hpcer400Response from '../model/Hpcer400Response';
import Hpcer401Response from '../model/Hpcer401Response';
import Hpcer404Response from '../model/Hpcer404Response';
import Hpcer500Response from '../model/Hpcer500Response';
import Hpcer502Response from '../model/Hpcer502Response';
import Hpcer503Response from '../model/Hpcer503Response';
import Hpcer504Response from '../model/Hpcer504Response';
import HpcerRequest from '../model/HpcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hpcer operation.
     * @callback module:api/APIsApi~hpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Passing Certificate
     * API to verify Class XII Passing Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~hpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hscer operation.
     * @callback module:api/APIsApi~hscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Marksheet
     * API to verify Class XII Marksheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~hscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hsmgr operation.
     * @callback module:api/APIsApi~hsmgrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Migration Certificate
     * API to verify Class XII Migration Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~hsmgrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hsmgr(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hsmgr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spcer operation.
     * @callback module:api/APIsApi~spcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class X Passing Certificate
     * API to verify Class X Passing Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~spcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    spcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sscer operation.
     * @callback module:api/APIsApi~sscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class X Marksheet
     * API to verify Class X Marksheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~sscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
