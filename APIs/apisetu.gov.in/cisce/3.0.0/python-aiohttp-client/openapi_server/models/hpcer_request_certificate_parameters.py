# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HpcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cuid: str=None, dob: str=None, full_name: str=None, idxn: str=None, uid: str=None, yoe: str=None):
        """HpcerRequestCertificateParameters - a model defined in OpenAPI

        :param cuid: The cuid of this HpcerRequestCertificateParameters.
        :param dob: The dob of this HpcerRequestCertificateParameters.
        :param full_name: The full_name of this HpcerRequestCertificateParameters.
        :param idxn: The idxn of this HpcerRequestCertificateParameters.
        :param uid: The uid of this HpcerRequestCertificateParameters.
        :param yoe: The yoe of this HpcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cuid': str,
            'dob': str,
            'full_name': str,
            'idxn': str,
            'uid': str,
            'yoe': str
        }

        self.attribute_map = {
            'cuid': 'CUID',
            'dob': 'DOB',
            'full_name': 'FullName',
            'idxn': 'IDXN',
            'uid': 'UID',
            'yoe': 'YOE'
        }

        self._cuid = cuid
        self._dob = dob
        self._full_name = full_name
        self._idxn = idxn
        self._uid = uid
        self._yoe = yoe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HpcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hpcer_request_certificateParameters of this HpcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cuid(self):
        """Gets the cuid of this HpcerRequestCertificateParameters.

        Candidate ID

        :return: The cuid of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._cuid

    @cuid.setter
    def cuid(self, cuid):
        """Sets the cuid of this HpcerRequestCertificateParameters.

        Candidate ID

        :param cuid: The cuid of this HpcerRequestCertificateParameters.
        :type cuid: str
        """
        if cuid is None:
            raise ValueError("Invalid value for `cuid`, must not be `None`")

        self._cuid = cuid

    @property
    def dob(self):
        """Gets the dob of this HpcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this HpcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this HpcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this HpcerRequestCertificateParameters.

        Full name

        :return: The full_name of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this HpcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this HpcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def idxn(self):
        """Gets the idxn of this HpcerRequestCertificateParameters.

        Index Number

        :return: The idxn of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._idxn

    @idxn.setter
    def idxn(self, idxn):
        """Sets the idxn of this HpcerRequestCertificateParameters.

        Index Number

        :param idxn: The idxn of this HpcerRequestCertificateParameters.
        :type idxn: str
        """
        if idxn is None:
            raise ValueError("Invalid value for `idxn`, must not be `None`")

        self._idxn = idxn

    @property
    def uid(self):
        """Gets the uid of this HpcerRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this HpcerRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this HpcerRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def yoe(self):
        """Gets the yoe of this HpcerRequestCertificateParameters.

        Year Of Examination -YYYY

        :return: The yoe of this HpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._yoe

    @yoe.setter
    def yoe(self, yoe):
        """Sets the yoe of this HpcerRequestCertificateParameters.

        Year Of Examination -YYYY

        :param yoe: The yoe of this HpcerRequestCertificateParameters.
        :type yoe: str
        """
        if yoe is None:
            raise ValueError("Invalid value for `yoe`, must not be `None`")

        self._yoe = yoe
