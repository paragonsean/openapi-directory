/**
 * CISCE
 * CISCE (http://www.cisce.org/) is issuing marksheets, passing certificates, migration certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently available - 2014-2019 (marksheets, passing certificates of ICSE & ISC and migration certificates of ISC).
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHpcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHpcer_request_certificateParameters::OAIHpcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHpcer_request_certificateParameters::OAIHpcer_request_certificateParameters() {
    this->initializeModel();
}

OAIHpcer_request_certificateParameters::~OAIHpcer_request_certificateParameters() {}

void OAIHpcer_request_certificateParameters::initializeModel() {

    m_cuid_isSet = false;
    m_cuid_isValid = false;

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_idxn_isSet = false;
    m_idxn_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_yoe_isSet = false;
    m_yoe_isValid = false;
}

void OAIHpcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHpcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cuid_isValid = ::OpenAPI::fromJsonValue(m_cuid, json[QString("CUID")]);
    m_cuid_isSet = !json[QString("CUID")].isNull() && m_cuid_isValid;

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_idxn_isValid = ::OpenAPI::fromJsonValue(m_idxn, json[QString("IDXN")]);
    m_idxn_isSet = !json[QString("IDXN")].isNull() && m_idxn_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;

    m_yoe_isValid = ::OpenAPI::fromJsonValue(m_yoe, json[QString("YOE")]);
    m_yoe_isSet = !json[QString("YOE")].isNull() && m_yoe_isValid;
}

QString OAIHpcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHpcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cuid_isSet) {
        obj.insert(QString("CUID"), ::OpenAPI::toJsonValue(m_cuid));
    }
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_idxn_isSet) {
        obj.insert(QString("IDXN"), ::OpenAPI::toJsonValue(m_idxn));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_yoe_isSet) {
        obj.insert(QString("YOE"), ::OpenAPI::toJsonValue(m_yoe));
    }
    return obj;
}

QString OAIHpcer_request_certificateParameters::getCuid() const {
    return m_cuid;
}
void OAIHpcer_request_certificateParameters::setCuid(const QString &cuid) {
    m_cuid = cuid;
    m_cuid_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_cuid_Set() const{
    return m_cuid_isSet;
}

bool OAIHpcer_request_certificateParameters::is_cuid_Valid() const{
    return m_cuid_isValid;
}

QString OAIHpcer_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAIHpcer_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIHpcer_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIHpcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIHpcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIHpcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIHpcer_request_certificateParameters::getIdxn() const {
    return m_idxn;
}
void OAIHpcer_request_certificateParameters::setIdxn(const QString &idxn) {
    m_idxn = idxn;
    m_idxn_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_idxn_Set() const{
    return m_idxn_isSet;
}

bool OAIHpcer_request_certificateParameters::is_idxn_Valid() const{
    return m_idxn_isValid;
}

QString OAIHpcer_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAIHpcer_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIHpcer_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIHpcer_request_certificateParameters::getYoe() const {
    return m_yoe;
}
void OAIHpcer_request_certificateParameters::setYoe(const QString &yoe) {
    m_yoe = yoe;
    m_yoe_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_yoe_Set() const{
    return m_yoe_isSet;
}

bool OAIHpcer_request_certificateParameters::is_yoe_Valid() const{
    return m_yoe_isValid;
}

bool OAIHpcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idxn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yoe_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHpcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cuid_isValid && m_dob_isValid && m_full_name_isValid && m_idxn_isValid && m_uid_isValid && m_yoe_isValid && true;
}

} // namespace OpenAPI
