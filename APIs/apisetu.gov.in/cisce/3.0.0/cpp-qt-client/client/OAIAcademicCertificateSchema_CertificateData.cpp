/**
 * CISCE
 * CISCE (http://www.cisce.org/) is issuing marksheets, passing certificates, migration certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently available - 2014-2019 (marksheets, passing certificates of ICSE & ISC and migration certificates of ISC).
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcademicCertificateSchema_CertificateData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcademicCertificateSchema_CertificateData::OAIAcademicCertificateSchema_CertificateData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcademicCertificateSchema_CertificateData::OAIAcademicCertificateSchema_CertificateData() {
    this->initializeModel();
}

OAIAcademicCertificateSchema_CertificateData::~OAIAcademicCertificateSchema_CertificateData() {}

void OAIAcademicCertificateSchema_CertificateData::initializeModel() {

    m_examination_isSet = false;
    m_examination_isValid = false;

    m_performance_isSet = false;
    m_performance_isValid = false;

    m_school_isSet = false;
    m_school_isValid = false;
}

void OAIAcademicCertificateSchema_CertificateData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcademicCertificateSchema_CertificateData::fromJsonObject(QJsonObject json) {

    m_examination_isValid = ::OpenAPI::fromJsonValue(m_examination, json[QString("Examination")]);
    m_examination_isSet = !json[QString("Examination")].isNull() && m_examination_isValid;

    m_performance_isValid = ::OpenAPI::fromJsonValue(m_performance, json[QString("Performance")]);
    m_performance_isSet = !json[QString("Performance")].isNull() && m_performance_isValid;

    m_school_isValid = ::OpenAPI::fromJsonValue(m_school, json[QString("School")]);
    m_school_isSet = !json[QString("School")].isNull() && m_school_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcademicCertificateSchema_CertificateData::asJsonObject() const {
    QJsonObject obj;
    if (m_examination.isSet()) {
        obj.insert(QString("Examination"), ::OpenAPI::toJsonValue(m_examination));
    }
    if (m_performance.isSet()) {
        obj.insert(QString("Performance"), ::OpenAPI::toJsonValue(m_performance));
    }
    if (m_school.isSet()) {
        obj.insert(QString("School"), ::OpenAPI::toJsonValue(m_school));
    }
    return obj;
}

OAIAcademicCertificateSchema_CertificateData_Examination OAIAcademicCertificateSchema_CertificateData::getExamination() const {
    return m_examination;
}
void OAIAcademicCertificateSchema_CertificateData::setExamination(const OAIAcademicCertificateSchema_CertificateData_Examination &examination) {
    m_examination = examination;
    m_examination_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData::is_examination_Set() const{
    return m_examination_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData::is_examination_Valid() const{
    return m_examination_isValid;
}

OAIAcademicCertificateSchema_CertificateData_Performance OAIAcademicCertificateSchema_CertificateData::getPerformance() const {
    return m_performance;
}
void OAIAcademicCertificateSchema_CertificateData::setPerformance(const OAIAcademicCertificateSchema_CertificateData_Performance &performance) {
    m_performance = performance;
    m_performance_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData::is_performance_Set() const{
    return m_performance_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData::is_performance_Valid() const{
    return m_performance_isValid;
}

OAIAcademicCertificateSchema_CertificateData_School OAIAcademicCertificateSchema_CertificateData::getSchool() const {
    return m_school;
}
void OAIAcademicCertificateSchema_CertificateData::setSchool(const OAIAcademicCertificateSchema_CertificateData_School &school) {
    m_school = school;
    m_school_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData::is_school_Set() const{
    return m_school_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData::is_school_Valid() const{
    return m_school_isValid;
}

bool OAIAcademicCertificateSchema_CertificateData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_examination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_school.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcademicCertificateSchema_CertificateData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_examination_isValid && m_performance_isValid && m_school_isValid && true;
}

} // namespace OpenAPI
