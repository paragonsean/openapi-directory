# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artifact_schema_consent_data import ConsentArtifactSchemaConsentData
from openapi_server.models.consent_artifact_schema_consent_permission import ConsentArtifactSchemaConsentPermission
from openapi_server.models.consent_artifact_schema_consent_purpose import ConsentArtifactSchemaConsentPurpose
from openapi_server.models.consent_artifact_schema_consent_user import ConsentArtifactSchemaConsentUser
from openapi_server import util


class ConsentArtifactSchemaConsent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent_id: str=None, data: ConsentArtifactSchemaConsentData=None, data_consumer: ConsentArtifactSchemaConsentData=None, data_provider: ConsentArtifactSchemaConsentData=None, permission: ConsentArtifactSchemaConsentPermission=None, purpose: ConsentArtifactSchemaConsentPurpose=None, timestamp: datetime=None, user: ConsentArtifactSchemaConsentUser=None):
        """ConsentArtifactSchemaConsent - a model defined in OpenAPI

        :param consent_id: The consent_id of this ConsentArtifactSchemaConsent.
        :param data: The data of this ConsentArtifactSchemaConsent.
        :param data_consumer: The data_consumer of this ConsentArtifactSchemaConsent.
        :param data_provider: The data_provider of this ConsentArtifactSchemaConsent.
        :param permission: The permission of this ConsentArtifactSchemaConsent.
        :param purpose: The purpose of this ConsentArtifactSchemaConsent.
        :param timestamp: The timestamp of this ConsentArtifactSchemaConsent.
        :param user: The user of this ConsentArtifactSchemaConsent.
        """
        self.openapi_types = {
            'consent_id': str,
            'data': ConsentArtifactSchemaConsentData,
            'data_consumer': ConsentArtifactSchemaConsentData,
            'data_provider': ConsentArtifactSchemaConsentData,
            'permission': ConsentArtifactSchemaConsentPermission,
            'purpose': ConsentArtifactSchemaConsentPurpose,
            'timestamp': datetime,
            'user': ConsentArtifactSchemaConsentUser
        }

        self.attribute_map = {
            'consent_id': 'consentId',
            'data': 'data',
            'data_consumer': 'dataConsumer',
            'data_provider': 'dataProvider',
            'permission': 'permission',
            'purpose': 'purpose',
            'timestamp': 'timestamp',
            'user': 'user'
        }

        self._consent_id = consent_id
        self._data = data
        self._data_consumer = data_consumer
        self._data_provider = data_provider
        self._permission = permission
        self._purpose = purpose
        self._timestamp = timestamp
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentArtifactSchemaConsent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentArtifactSchema_consent of this ConsentArtifactSchemaConsent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent_id(self):
        """Gets the consent_id of this ConsentArtifactSchemaConsent.

        A unique consent id in UUID format.

        :return: The consent_id of this ConsentArtifactSchemaConsent.
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ConsentArtifactSchemaConsent.

        A unique consent id in UUID format.

        :param consent_id: The consent_id of this ConsentArtifactSchemaConsent.
        :type consent_id: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")
        if consent_id is not None and len(consent_id) < 1:
            raise ValueError("Invalid value for `consent_id`, length must be greater than or equal to `1`")

        self._consent_id = consent_id

    @property
    def data(self):
        """Gets the data of this ConsentArtifactSchemaConsent.


        :return: The data of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ConsentArtifactSchemaConsent.


        :param data: The data of this ConsentArtifactSchemaConsent.
        :type data: ConsentArtifactSchemaConsentData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def data_consumer(self):
        """Gets the data_consumer of this ConsentArtifactSchemaConsent.


        :return: The data_consumer of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentData
        """
        return self._data_consumer

    @data_consumer.setter
    def data_consumer(self, data_consumer):
        """Sets the data_consumer of this ConsentArtifactSchemaConsent.


        :param data_consumer: The data_consumer of this ConsentArtifactSchemaConsent.
        :type data_consumer: ConsentArtifactSchemaConsentData
        """
        if data_consumer is None:
            raise ValueError("Invalid value for `data_consumer`, must not be `None`")

        self._data_consumer = data_consumer

    @property
    def data_provider(self):
        """Gets the data_provider of this ConsentArtifactSchemaConsent.


        :return: The data_provider of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentData
        """
        return self._data_provider

    @data_provider.setter
    def data_provider(self, data_provider):
        """Sets the data_provider of this ConsentArtifactSchemaConsent.


        :param data_provider: The data_provider of this ConsentArtifactSchemaConsent.
        :type data_provider: ConsentArtifactSchemaConsentData
        """
        if data_provider is None:
            raise ValueError("Invalid value for `data_provider`, must not be `None`")

        self._data_provider = data_provider

    @property
    def permission(self):
        """Gets the permission of this ConsentArtifactSchemaConsent.


        :return: The permission of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ConsentArtifactSchemaConsent.


        :param permission: The permission of this ConsentArtifactSchemaConsent.
        :type permission: ConsentArtifactSchemaConsentPermission
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")

        self._permission = permission

    @property
    def purpose(self):
        """Gets the purpose of this ConsentArtifactSchemaConsent.


        :return: The purpose of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentPurpose
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ConsentArtifactSchemaConsent.


        :param purpose: The purpose of this ConsentArtifactSchemaConsent.
        :type purpose: ConsentArtifactSchemaConsentPurpose
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def timestamp(self):
        """Gets the timestamp of this ConsentArtifactSchemaConsent.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :return: The timestamp of this ConsentArtifactSchemaConsent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ConsentArtifactSchemaConsent.

        Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ

        :param timestamp: The timestamp of this ConsentArtifactSchemaConsent.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")
        if timestamp is not None and len(timestamp) < 1:
            raise ValueError("Invalid value for `timestamp`, length must be greater than or equal to `1`")

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this ConsentArtifactSchemaConsent.


        :return: The user of this ConsentArtifactSchemaConsent.
        :rtype: ConsentArtifactSchemaConsentUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ConsentArtifactSchemaConsent.


        :param user: The user of this ConsentArtifactSchemaConsent.
        :type user: ConsentArtifactSchemaConsentUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
