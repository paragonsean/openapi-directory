# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DpicrRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_no: str=None, full_name: str=None):
        """DpicrRequestCertificateParameters - a model defined in OpenAPI

        :param cert_no: The cert_no of this DpicrRequestCertificateParameters.
        :param full_name: The full_name of this DpicrRequestCertificateParameters.
        """
        self.openapi_types = {
            'cert_no': str,
            'full_name': str
        }

        self.attribute_map = {
            'cert_no': 'CERT_NO',
            'full_name': 'FullName'
        }

        self._cert_no = cert_no
        self._full_name = full_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DpicrRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dpicr_request_certificateParameters of this DpicrRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_no(self):
        """Gets the cert_no of this DpicrRequestCertificateParameters.

        CERTIFICATE NO

        :return: The cert_no of this DpicrRequestCertificateParameters.
        :rtype: str
        """
        return self._cert_no

    @cert_no.setter
    def cert_no(self, cert_no):
        """Sets the cert_no of this DpicrRequestCertificateParameters.

        CERTIFICATE NO

        :param cert_no: The cert_no of this DpicrRequestCertificateParameters.
        :type cert_no: str
        """
        if cert_no is None:
            raise ValueError("Invalid value for `cert_no`, must not be `None`")

        self._cert_no = cert_no

    @property
    def full_name(self):
        """Gets the full_name of this DpicrRequestCertificateParameters.

        Full name

        :return: The full_name of this DpicrRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DpicrRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this DpicrRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name
