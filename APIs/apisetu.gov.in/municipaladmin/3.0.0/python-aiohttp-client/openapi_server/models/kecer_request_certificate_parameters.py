# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KecerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_number: str=None):
        """KecerRequestCertificateParameters - a model defined in OpenAPI

        :param document_number: The document_number of this KecerRequestCertificateParameters.
        """
        self.openapi_types = {
            'document_number': str
        }

        self.attribute_map = {
            'document_number': 'DocumentNumber'
        }

        self._document_number = document_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KecerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The kecer_request_certificateParameters of this KecerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_number(self):
        """Gets the document_number of this KecerRequestCertificateParameters.

        Document Number

        :return: The document_number of this KecerRequestCertificateParameters.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this KecerRequestCertificateParameters.

        Document Number

        :param document_number: The document_number of this KecerRequestCertificateParameters.
        :type document_number: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")

        self._document_number = document_number
