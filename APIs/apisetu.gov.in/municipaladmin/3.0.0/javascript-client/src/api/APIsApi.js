/**
 * Directorate of Municipal Administration, Karnataka
 * APIs provided by Directorate of Municipal Administration, Karnataka.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Kecer400Response from '../model/Kecer400Response';
import Kecer401Response from '../model/Kecer401Response';
import Kecer404Response from '../model/Kecer404Response';
import Kecer500Response from '../model/Kecer500Response';
import Kecer502Response from '../model/Kecer502Response';
import Kecer503Response from '../model/Kecer503Response';
import Kecer504Response from '../model/Kecer504Response';
import KecerRequest from '../model/KecerRequest';
import TapcnRequest from '../model/TapcnRequest';
import TdlcsRequest from '../model/TdlcsRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the kecer operation.
     * @callback module:api/APIsApi~kecerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Khatha Extract / Certificate
     * API to verify Khatha Extract / Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/KecerRequest} [kecerRequest] Request format
     * @param {module:api/APIsApi~kecerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    kecer(opts, callback) {
      opts = opts || {};
      let postBody = opts['kecerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/kecer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tapcn operation.
     * @callback module:api/APIsApi~tapcnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * New Tap Connection
     * API to verify New Tap Connection.
     * @param {Object} opts Optional parameters
     * @param {module:model/TapcnRequest} [tapcnRequest] Request format
     * @param {module:api/APIsApi~tapcnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tapcn(opts, callback) {
      opts = opts || {};
      let postBody = opts['tapcnRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tapcn/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tdlcs operation.
     * @callback module:api/APIsApi~tdlcsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trade License/ Certificate
     * API to verify Trade License/ Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/TdlcsRequest} [tdlcsRequest] Request format
     * @param {module:api/APIsApi~tdlcsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tdlcs(opts, callback) {
      opts = opts || {};
      let postBody = opts['tdlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tdlcs/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ugdcn operation.
     * @callback module:api/APIsApi~ugdcnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Jalanidhi - New UGD Connection
     * API to verify Jalanidhi - New UGD Connection.
     * @param {Object} opts Optional parameters
     * @param {module:model/TapcnRequest} [tapcnRequest] Request format
     * @param {module:api/APIsApi~ugdcnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ugdcn(opts, callback) {
      opts = opts || {};
      let postBody = opts['tapcnRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ugdcn/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
