/**
 * Directorate of Municipal Administration, Karnataka
 * APIs provided by Directorate of Municipal Administration, Karnataka.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIKecer_400_response.h"
#include "OAIKecer_401_response.h"
#include "OAIKecer_404_response.h"
#include "OAIKecer_500_response.h"
#include "OAIKecer_502_response.h"
#include "OAIKecer_503_response.h"
#include "OAIKecer_504_response.h"
#include "OAIKecer_request.h"
#include "OAITapcn_request.h"
#include "OAITdlcs_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_kecer_request OAIKecer_request [optional]
    */
    virtual void kecer(const ::OpenAPI::OptionalParam<OAIKecer_request> &oai_kecer_request = ::OpenAPI::OptionalParam<OAIKecer_request>());

    /**
    * @param[in]  oai_tapcn_request OAITapcn_request [optional]
    */
    virtual void tapcn(const ::OpenAPI::OptionalParam<OAITapcn_request> &oai_tapcn_request = ::OpenAPI::OptionalParam<OAITapcn_request>());

    /**
    * @param[in]  oai_tdlcs_request OAITdlcs_request [optional]
    */
    virtual void tdlcs(const ::OpenAPI::OptionalParam<OAITdlcs_request> &oai_tdlcs_request = ::OpenAPI::OptionalParam<OAITdlcs_request>());

    /**
    * @param[in]  oai_tapcn_request OAITapcn_request [optional]
    */
    virtual void ugdcn(const ::OpenAPI::OptionalParam<OAITapcn_request> &oai_tapcn_request = ::OpenAPI::OptionalParam<OAITapcn_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void kecerCallback(OAIHttpRequestWorker *worker);
    void tapcnCallback(OAIHttpRequestWorker *worker);
    void tdlcsCallback(OAIHttpRequestWorker *worker);
    void ugdcnCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void kecerSignal();
    void tapcnSignal();
    void tdlcsSignal();
    void ugdcnSignal();


    void kecerSignalFull(OAIHttpRequestWorker *worker);
    void tapcnSignalFull(OAIHttpRequestWorker *worker);
    void tdlcsSignalFull(OAIHttpRequestWorker *worker);
    void ugdcnSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use kecerSignalError() instead")
    void kecerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void kecerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tapcnSignalError() instead")
    void tapcnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tapcnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tdlcsSignalError() instead")
    void tdlcsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tdlcsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ugdcnSignalError() instead")
    void ugdcnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ugdcnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use kecerSignalErrorFull() instead")
    void kecerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void kecerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tapcnSignalErrorFull() instead")
    void tapcnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tapcnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tdlcsSignalErrorFull() instead")
    void tdlcsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tdlcsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ugdcnSignalErrorFull() instead")
    void ugdcnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ugdcnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
