/**
 * Dr. B.R. Ambedkar Institute of Technology,Andaman & Nicobar Islands
 * APIs provided by Dr. B.R. Ambedkar Institute of Technology,Andaman & Nicobar Islands.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrcer_request_certificateParameters::OAITrcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrcer_request_certificateParameters::OAITrcer_request_certificateParameters() {
    this->initializeModel();
}

OAITrcer_request_certificateParameters::~OAITrcer_request_certificateParameters() {}

void OAITrcer_request_certificateParameters::initializeModel() {

    m_cert_no_isSet = false;
    m_cert_no_isValid = false;

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAITrcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cert_no_isValid = ::OpenAPI::fromJsonValue(m_cert_no, json[QString("CERT_NO")]);
    m_cert_no_isSet = !json[QString("CERT_NO")].isNull() && m_cert_no_isValid;

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("Session")]);
    m_session_isSet = !json[QString("Session")].isNull() && m_session_isValid;
}

QString OAITrcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_no_isSet) {
        obj.insert(QString("CERT_NO"), ::OpenAPI::toJsonValue(m_cert_no));
    }
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_session_isSet) {
        obj.insert(QString("Session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

QString OAITrcer_request_certificateParameters::getCertNo() const {
    return m_cert_no;
}
void OAITrcer_request_certificateParameters::setCertNo(const QString &cert_no) {
    m_cert_no = cert_no;
    m_cert_no_isSet = true;
}

bool OAITrcer_request_certificateParameters::is_cert_no_Set() const{
    return m_cert_no_isSet;
}

bool OAITrcer_request_certificateParameters::is_cert_no_Valid() const{
    return m_cert_no_isValid;
}

QString OAITrcer_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAITrcer_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAITrcer_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAITrcer_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAITrcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAITrcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAITrcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAITrcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAITrcer_request_certificateParameters::getSession() const {
    return m_session;
}
void OAITrcer_request_certificateParameters::setSession(const QString &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAITrcer_request_certificateParameters::is_session_Set() const{
    return m_session_isSet;
}

bool OAITrcer_request_certificateParameters::is_session_Valid() const{
    return m_session_isValid;
}

bool OAITrcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cert_no_isValid && m_dob_isValid && m_full_name_isValid && m_session_isValid && true;
}

} // namespace OpenAPI
