/**
 * eDistrict Andaman & Nicobar Islands, Andaman & Nicobar
 * eDistrict Andaman (https://edistrict.andaman.gov.in/) is the online service delivery portal for Andaman & Nicobar Islands. Certain documents issued by it (e.g. Local Certificate,Income Certificate,OBC Certificate,Resident Certificate  etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Brlcs400Response from '../model/Brlcs400Response';
import Brlcs401Response from '../model/Brlcs401Response';
import Brlcs404Response from '../model/Brlcs404Response';
import Brlcs500Response from '../model/Brlcs500Response';
import Brlcs502Response from '../model/Brlcs502Response';
import Brlcs503Response from '../model/Brlcs503Response';
import Brlcs504Response from '../model/Brlcs504Response';
import BrlcsRequest from '../model/BrlcsRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the brlcs operation.
     * @callback module:api/APIsApi~brlcsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bar License
     * API to verify Bar License.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~brlcsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    brlcs(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/brlcs/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpcer operation.
     * @callback module:api/APIsApi~dpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dependency Certificate
     * API to verify Dependency Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~dpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fmcer operation.
     * @callback module:api/APIsApi~fmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Family Membership Certificate
     * API to verify Family Membership Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~fmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lccep operation.
     * @callback module:api/APIsApi~lccepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Local Candidate/ Status Certificate
     * API to verify Local Candidate/ Status Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~lccepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lccep(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lccep/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ndcer operation.
     * @callback module:api/APIsApi~ndcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * No Dues/ Objection Certificate
     * API to verify No Dues/ Objection Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~ndcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ndcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ndcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obcer operation.
     * @callback module:api/APIsApi~obcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OBC Certificate
     * API to verify OBC Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~obcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/obcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rmcer operation.
     * @callback module:api/APIsApi~rmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marriage Certificate
     * API to verify Marriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~rmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rscer operation.
     * @callback module:api/APIsApi~rscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Residence Certificate
     * API to verify Residence Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~rscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rucer operation.
     * @callback module:api/APIsApi~rucerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regional Language(s) Certificate
     * API to verify Regional Language(s) Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~rucerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rucer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rucer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sicrd operation.
     * @callback module:api/APIsApi~sicrdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Senior Citizen Identity Card/ Certificate
     * API to verify Senior Citizen Identity Card/ Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~sicrdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sicrd(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sicrd/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vlcer operation.
     * @callback module:api/APIsApi~vlcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Valuation Certificate
     * API to verify Valuation Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BrlcsRequest} [brlcsRequest] Request format
     * @param {module:api/APIsApi~vlcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vlcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['brlcsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vlcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
