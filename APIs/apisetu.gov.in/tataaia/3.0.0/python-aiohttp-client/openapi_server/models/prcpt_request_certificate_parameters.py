# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrcptRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, pi_dob: str=None, pi_fin_year: str=None, pi_policynbr: str=None):
        """PrcptRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this PrcptRequestCertificateParameters.
        :param pi_dob: The pi_dob of this PrcptRequestCertificateParameters.
        :param pi_fin_year: The pi_fin_year of this PrcptRequestCertificateParameters.
        :param pi_policynbr: The pi_policynbr of this PrcptRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'pi_dob': str,
            'pi_fin_year': str,
            'pi_policynbr': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'pi_dob': 'PI_DOB',
            'pi_fin_year': 'PI_FIN_YEAR',
            'pi_policynbr': 'PI_POLICYNBR'
        }

        self._full_name = full_name
        self._pi_dob = pi_dob
        self._pi_fin_year = pi_fin_year
        self._pi_policynbr = pi_policynbr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrcptRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The prcpt_request_certificateParameters of this PrcptRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this PrcptRequestCertificateParameters.

        Full name

        :return: The full_name of this PrcptRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PrcptRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this PrcptRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def pi_dob(self):
        """Gets the pi_dob of this PrcptRequestCertificateParameters.

        Date of Birth

        :return: The pi_dob of this PrcptRequestCertificateParameters.
        :rtype: str
        """
        return self._pi_dob

    @pi_dob.setter
    def pi_dob(self, pi_dob):
        """Sets the pi_dob of this PrcptRequestCertificateParameters.

        Date of Birth

        :param pi_dob: The pi_dob of this PrcptRequestCertificateParameters.
        :type pi_dob: str
        """
        if pi_dob is None:
            raise ValueError("Invalid value for `pi_dob`, must not be `None`")

        self._pi_dob = pi_dob

    @property
    def pi_fin_year(self):
        """Gets the pi_fin_year of this PrcptRequestCertificateParameters.

        Financial Year

        :return: The pi_fin_year of this PrcptRequestCertificateParameters.
        :rtype: str
        """
        return self._pi_fin_year

    @pi_fin_year.setter
    def pi_fin_year(self, pi_fin_year):
        """Sets the pi_fin_year of this PrcptRequestCertificateParameters.

        Financial Year

        :param pi_fin_year: The pi_fin_year of this PrcptRequestCertificateParameters.
        :type pi_fin_year: str
        """
        if pi_fin_year is None:
            raise ValueError("Invalid value for `pi_fin_year`, must not be `None`")

        self._pi_fin_year = pi_fin_year

    @property
    def pi_policynbr(self):
        """Gets the pi_policynbr of this PrcptRequestCertificateParameters.

        Policy No

        :return: The pi_policynbr of this PrcptRequestCertificateParameters.
        :rtype: str
        """
        return self._pi_policynbr

    @pi_policynbr.setter
    def pi_policynbr(self, pi_policynbr):
        """Sets the pi_policynbr of this PrcptRequestCertificateParameters.

        Policy No

        :param pi_policynbr: The pi_policynbr of this PrcptRequestCertificateParameters.
        :type pi_policynbr: str
        """
        if pi_policynbr is None:
            raise ValueError("Invalid value for `pi_policynbr`, must not be `None`")

        self._pi_policynbr = pi_policynbr
