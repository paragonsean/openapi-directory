# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, udf1: str=None, udf2: str=None):
        """LicerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this LicerRequestCertificateParameters.
        :param udf1: The udf1 of this LicerRequestCertificateParameters.
        :param udf2: The udf2 of this LicerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'udf1': str,
            'udf2': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'udf1': 'UDF1',
            'udf2': 'UDF2'
        }

        self._full_name = full_name
        self._udf1 = udf1
        self._udf2 = udf2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The licer_request_certificateParameters of this LicerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this LicerRequestCertificateParameters.

        Full name

        :return: The full_name of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this LicerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this LicerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def udf1(self):
        """Gets the udf1 of this LicerRequestCertificateParameters.

        Policy Number

        :return: The udf1 of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._udf1

    @udf1.setter
    def udf1(self, udf1):
        """Sets the udf1 of this LicerRequestCertificateParameters.

        Policy Number

        :param udf1: The udf1 of this LicerRequestCertificateParameters.
        :type udf1: str
        """
        if udf1 is None:
            raise ValueError("Invalid value for `udf1`, must not be `None`")

        self._udf1 = udf1

    @property
    def udf2(self):
        """Gets the udf2 of this LicerRequestCertificateParameters.

        Insured DOB

        :return: The udf2 of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._udf2

    @udf2.setter
    def udf2(self, udf2):
        """Sets the udf2 of this LicerRequestCertificateParameters.

        Insured DOB

        :param udf2: The udf2 of this LicerRequestCertificateParameters.
        :type udf2: str
        """
        if udf2 is None:
            raise ValueError("Invalid value for `udf2`, must not be `None`")

        self._udf2 = udf2
