/**
 * Tata AIA Life Insurance Co. Ltd.
 * Tata AIA Life Insurance Company Limited provides life insurance solutions to its consumers. Customers can access their policy details [Insurance Policy ï¿½ Life] and premium receipts [Premium Receipt] that are available to be pulled by the policy holders into their DigiLocker account (only documents issued on or after 28-June-2019 are currently available)
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrcpt_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrcpt_request_certificateParameters::OAIPrcpt_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrcpt_request_certificateParameters::OAIPrcpt_request_certificateParameters() {
    this->initializeModel();
}

OAIPrcpt_request_certificateParameters::~OAIPrcpt_request_certificateParameters() {}

void OAIPrcpt_request_certificateParameters::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_pi_dob_isSet = false;
    m_pi_dob_isValid = false;

    m_pi_fin_year_isSet = false;
    m_pi_fin_year_isValid = false;

    m_pi_policynbr_isSet = false;
    m_pi_policynbr_isValid = false;
}

void OAIPrcpt_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrcpt_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_pi_dob_isValid = ::OpenAPI::fromJsonValue(m_pi_dob, json[QString("PI_DOB")]);
    m_pi_dob_isSet = !json[QString("PI_DOB")].isNull() && m_pi_dob_isValid;

    m_pi_fin_year_isValid = ::OpenAPI::fromJsonValue(m_pi_fin_year, json[QString("PI_FIN_YEAR")]);
    m_pi_fin_year_isSet = !json[QString("PI_FIN_YEAR")].isNull() && m_pi_fin_year_isValid;

    m_pi_policynbr_isValid = ::OpenAPI::fromJsonValue(m_pi_policynbr, json[QString("PI_POLICYNBR")]);
    m_pi_policynbr_isSet = !json[QString("PI_POLICYNBR")].isNull() && m_pi_policynbr_isValid;
}

QString OAIPrcpt_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrcpt_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_pi_dob_isSet) {
        obj.insert(QString("PI_DOB"), ::OpenAPI::toJsonValue(m_pi_dob));
    }
    if (m_pi_fin_year_isSet) {
        obj.insert(QString("PI_FIN_YEAR"), ::OpenAPI::toJsonValue(m_pi_fin_year));
    }
    if (m_pi_policynbr_isSet) {
        obj.insert(QString("PI_POLICYNBR"), ::OpenAPI::toJsonValue(m_pi_policynbr));
    }
    return obj;
}

QString OAIPrcpt_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIPrcpt_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPrcpt_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPrcpt_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIPrcpt_request_certificateParameters::getPiDob() const {
    return m_pi_dob;
}
void OAIPrcpt_request_certificateParameters::setPiDob(const QString &pi_dob) {
    m_pi_dob = pi_dob;
    m_pi_dob_isSet = true;
}

bool OAIPrcpt_request_certificateParameters::is_pi_dob_Set() const{
    return m_pi_dob_isSet;
}

bool OAIPrcpt_request_certificateParameters::is_pi_dob_Valid() const{
    return m_pi_dob_isValid;
}

QString OAIPrcpt_request_certificateParameters::getPiFinYear() const {
    return m_pi_fin_year;
}
void OAIPrcpt_request_certificateParameters::setPiFinYear(const QString &pi_fin_year) {
    m_pi_fin_year = pi_fin_year;
    m_pi_fin_year_isSet = true;
}

bool OAIPrcpt_request_certificateParameters::is_pi_fin_year_Set() const{
    return m_pi_fin_year_isSet;
}

bool OAIPrcpt_request_certificateParameters::is_pi_fin_year_Valid() const{
    return m_pi_fin_year_isValid;
}

QString OAIPrcpt_request_certificateParameters::getPiPolicynbr() const {
    return m_pi_policynbr;
}
void OAIPrcpt_request_certificateParameters::setPiPolicynbr(const QString &pi_policynbr) {
    m_pi_policynbr = pi_policynbr;
    m_pi_policynbr_isSet = true;
}

bool OAIPrcpt_request_certificateParameters::is_pi_policynbr_Set() const{
    return m_pi_policynbr_isSet;
}

bool OAIPrcpt_request_certificateParameters::is_pi_policynbr_Valid() const{
    return m_pi_policynbr_isValid;
}

bool OAIPrcpt_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pi_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pi_fin_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pi_policynbr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrcpt_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_pi_dob_isValid && m_pi_fin_year_isValid && m_pi_policynbr_isValid && true;
}

} // namespace OpenAPI
