/**
 * BOARD OF HIGHER SECONDARY EXAMINATION, KERALA, Kerala
 * Board of Higher Secondary Examinations, Directorate of General Education, Government of Kerala has made available HSE Certificate cum Marklist of  MARCH 2020, which can be pulled by students into their Digilocker account
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHpcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHpcer_request_certificateParameters::OAIHpcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHpcer_request_certificateParameters::OAIHpcer_request_certificateParameters() {
    this->initializeModel();
}

OAIHpcer_request_certificateParameters::~OAIHpcer_request_certificateParameters() {}

void OAIHpcer_request_certificateParameters::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_regno_isSet = false;
    m_regno_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIHpcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHpcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_regno_isValid = ::OpenAPI::fromJsonValue(m_regno, json[QString("regno")]);
    m_regno_isSet = !json[QString("regno")].isNull() && m_regno_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAIHpcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHpcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_regno_isSet) {
        obj.insert(QString("regno"), ::OpenAPI::toJsonValue(m_regno));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIHpcer_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAIHpcer_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIHpcer_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIHpcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIHpcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIHpcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIHpcer_request_certificateParameters::getRegno() const {
    return m_regno;
}
void OAIHpcer_request_certificateParameters::setRegno(const QString &regno) {
    m_regno = regno;
    m_regno_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_regno_Set() const{
    return m_regno_isSet;
}

bool OAIHpcer_request_certificateParameters::is_regno_Valid() const{
    return m_regno_isValid;
}

QString OAIHpcer_request_certificateParameters::getType() const {
    return m_type;
}
void OAIHpcer_request_certificateParameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHpcer_request_certificateParameters::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIHpcer_request_certificateParameters::getYear() const {
    return m_year;
}
void OAIHpcer_request_certificateParameters::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIHpcer_request_certificateParameters::is_year_Set() const{
    return m_year_isSet;
}

bool OAIHpcer_request_certificateParameters::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIHpcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regno_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHpcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_full_name_isValid && m_regno_isValid && m_type_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
