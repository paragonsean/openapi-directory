/**
 * Transport Department, Rajasthan
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConsentArtifactSchema_consent.h
 *
 * 
 */

#ifndef OAIConsentArtifactSchema_consent_H
#define OAIConsentArtifactSchema_consent_H

#include <QJsonObject>

#include "OAIConsentArtifactSchema_consent_data.h"
#include "OAIConsentArtifactSchema_consent_permission.h"
#include "OAIConsentArtifactSchema_consent_purpose.h"
#include "OAIConsentArtifactSchema_consent_user.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConsentArtifactSchema_consent_data;
class OAIConsentArtifactSchema_consent_permission;
class OAIConsentArtifactSchema_consent_purpose;
class OAIConsentArtifactSchema_consent_user;

class OAIConsentArtifactSchema_consent : public OAIObject {
public:
    OAIConsentArtifactSchema_consent();
    OAIConsentArtifactSchema_consent(QString json);
    ~OAIConsentArtifactSchema_consent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConsentId() const;
    void setConsentId(const QString &consent_id);
    bool is_consent_id_Set() const;
    bool is_consent_id_Valid() const;

    OAIConsentArtifactSchema_consent_data getData() const;
    void setData(const OAIConsentArtifactSchema_consent_data &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    OAIConsentArtifactSchema_consent_data getDataConsumer() const;
    void setDataConsumer(const OAIConsentArtifactSchema_consent_data &data_consumer);
    bool is_data_consumer_Set() const;
    bool is_data_consumer_Valid() const;

    OAIConsentArtifactSchema_consent_data getDataProvider() const;
    void setDataProvider(const OAIConsentArtifactSchema_consent_data &data_provider);
    bool is_data_provider_Set() const;
    bool is_data_provider_Valid() const;

    OAIConsentArtifactSchema_consent_permission getPermission() const;
    void setPermission(const OAIConsentArtifactSchema_consent_permission &permission);
    bool is_permission_Set() const;
    bool is_permission_Valid() const;

    OAIConsentArtifactSchema_consent_purpose getPurpose() const;
    void setPurpose(const OAIConsentArtifactSchema_consent_purpose &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIConsentArtifactSchema_consent_user getUser() const;
    void setUser(const OAIConsentArtifactSchema_consent_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_consent_id;
    bool m_consent_id_isSet;
    bool m_consent_id_isValid;

    OAIConsentArtifactSchema_consent_data m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    OAIConsentArtifactSchema_consent_data m_data_consumer;
    bool m_data_consumer_isSet;
    bool m_data_consumer_isValid;

    OAIConsentArtifactSchema_consent_data m_data_provider;
    bool m_data_provider_isSet;
    bool m_data_provider_isValid;

    OAIConsentArtifactSchema_consent_permission m_permission;
    bool m_permission_isSet;
    bool m_permission_isValid;

    OAIConsentArtifactSchema_consent_purpose m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIConsentArtifactSchema_consent_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConsentArtifactSchema_consent)

#endif // OAIConsentArtifactSchema_consent_H
