/**
 * Himachal Pradesh Takniki Shiksha Board Dharamshala, Himachal Pradesh
 * Himachal Pradesh Takniki Shiksha Board, Dharamshala (http://www.hptechboard.com/) has made available Diploma Certificate in DigiLocker, which can be pulled by students into their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dipcr400Response model module.
 * @module model/Dipcr400Response
 * @version 3.0.0
 */
class Dipcr400Response {
    /**
     * Constructs a new <code>Dipcr400Response</code>.
     * @alias module:model/Dipcr400Response
     */
    constructor() { 
        
        Dipcr400Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dipcr400Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dipcr400Response} obj Optional instance to populate.
     * @return {module:model/Dipcr400Response} The populated <code>Dipcr400Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dipcr400Response();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('errorDescription')) {
                obj['errorDescription'] = ApiClient.convertToType(data['errorDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dipcr400Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dipcr400Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['errorDescription'] && !(typeof data['errorDescription'] === 'string' || data['errorDescription'] instanceof String)) {
            throw new Error("Expected the field `errorDescription` to be a primitive type in the JSON string but got " + data['errorDescription']);
        }

        return true;
    }


}



/**
 * @member {module:model/Dipcr400Response.ErrorEnum} error
 */
Dipcr400Response.prototype['error'] = undefined;

/**
 * @member {module:model/Dipcr400Response.ErrorDescriptionEnum} errorDescription
 */
Dipcr400Response.prototype['errorDescription'] = undefined;





/**
 * Allowed values for the <code>error</code> property.
 * @enum {String}
 * @readonly
 */
Dipcr400Response['ErrorEnum'] = {

    /**
     * value: "missing_parameter"
     * @const
     */
    "missing_parameter": "missing_parameter",

    /**
     * value: "invalid_parameter"
     * @const
     */
    "invalid_parameter": "invalid_parameter",

    /**
     * value: "invalid_format"
     * @const
     */
    "invalid_format": "invalid_format",

    /**
     * value: "invalid_txnid"
     * @const
     */
    "invalid_txnid": "invalid_txnid",

    /**
     * value: "invalid_consentid"
     * @const
     */
    "invalid_consentid": "invalid_consentid"
};


/**
 * Allowed values for the <code>errorDescription</code> property.
 * @enum {String}
 * @readonly
 */
Dipcr400Response['ErrorDescriptionEnum'] = {

    /**
     * value: "Please provide all mandatory parameters"
     * @const
     */
    "Please provide all mandatory parameters": "Please provide all mandatory parameters",

    /**
     * value: "Bad request"
     * @const
     */
    "Bad request": "Bad request",

    /**
     * value: "The format parameter is invalid"
     * @const
     */
    "The format parameter is invalid": "The format parameter is invalid",

    /**
     * value: "The txnId parameter must be in UUID format"
     * @const
     */
    "The txnId parameter must be in UUID format": "The txnId parameter must be in UUID format",

    /**
     * value: "The consentId parameter must be in UUID format"
     * @const
     */
    "The consentId parameter must be in UUID format": "The consentId parameter must be in UUID format"
};



export default Dipcr400Response;

