/**
 * Department of Registration & Stamps, Maharashtra
 * Dept of Registration & Stamps, Maharashtra (https://esearchigr.maharashtra.gov.in) is issuing digital Leave & License Certificates into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILlcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILlcer_request_certificateParameters::OAILlcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILlcer_request_certificateParameters::OAILlcer_request_certificateParameters() {
    this->initializeModel();
}

OAILlcer_request_certificateParameters::~OAILlcer_request_certificateParameters() {}

void OAILlcer_request_certificateParameters::initializeModel() {

    m_udf1_isSet = false;
    m_udf1_isValid = false;

    m_udf2_isSet = false;
    m_udf2_isValid = false;

    m_udf3_isSet = false;
    m_udf3_isValid = false;
}

void OAILlcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILlcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_udf1_isValid = ::OpenAPI::fromJsonValue(m_udf1, json[QString("UDF1")]);
    m_udf1_isSet = !json[QString("UDF1")].isNull() && m_udf1_isValid;

    m_udf2_isValid = ::OpenAPI::fromJsonValue(m_udf2, json[QString("UDF2")]);
    m_udf2_isSet = !json[QString("UDF2")].isNull() && m_udf2_isValid;

    m_udf3_isValid = ::OpenAPI::fromJsonValue(m_udf3, json[QString("UDF3")]);
    m_udf3_isSet = !json[QString("UDF3")].isNull() && m_udf3_isValid;
}

QString OAILlcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILlcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_udf1_isSet) {
        obj.insert(QString("UDF1"), ::OpenAPI::toJsonValue(m_udf1));
    }
    if (m_udf2_isSet) {
        obj.insert(QString("UDF2"), ::OpenAPI::toJsonValue(m_udf2));
    }
    if (m_udf3_isSet) {
        obj.insert(QString("UDF3"), ::OpenAPI::toJsonValue(m_udf3));
    }
    return obj;
}

QString OAILlcer_request_certificateParameters::getUdf1() const {
    return m_udf1;
}
void OAILlcer_request_certificateParameters::setUdf1(const QString &udf1) {
    m_udf1 = udf1;
    m_udf1_isSet = true;
}

bool OAILlcer_request_certificateParameters::is_udf1_Set() const{
    return m_udf1_isSet;
}

bool OAILlcer_request_certificateParameters::is_udf1_Valid() const{
    return m_udf1_isValid;
}

QString OAILlcer_request_certificateParameters::getUdf2() const {
    return m_udf2;
}
void OAILlcer_request_certificateParameters::setUdf2(const QString &udf2) {
    m_udf2 = udf2;
    m_udf2_isSet = true;
}

bool OAILlcer_request_certificateParameters::is_udf2_Set() const{
    return m_udf2_isSet;
}

bool OAILlcer_request_certificateParameters::is_udf2_Valid() const{
    return m_udf2_isValid;
}

QString OAILlcer_request_certificateParameters::getUdf3() const {
    return m_udf3;
}
void OAILlcer_request_certificateParameters::setUdf3(const QString &udf3) {
    m_udf3 = udf3;
    m_udf3_isSet = true;
}

bool OAILlcer_request_certificateParameters::is_udf3_Set() const{
    return m_udf3_isSet;
}

bool OAILlcer_request_certificateParameters::is_udf3_Valid() const{
    return m_udf3_isValid;
}

bool OAILlcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_udf1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf3_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILlcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_udf1_isValid && m_udf2_isValid && m_udf3_isValid && true;
}

} // namespace OpenAPI
