# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DpicrRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_no: str=None, certificate_id: str=None):
        """DpicrRequestCertificateParameters - a model defined in OpenAPI

        :param application_no: The application_no of this DpicrRequestCertificateParameters.
        :param certificate_id: The certificate_id of this DpicrRequestCertificateParameters.
        """
        self.openapi_types = {
            'application_no': str,
            'certificate_id': str
        }

        self.attribute_map = {
            'application_no': 'ApplicationNo',
            'certificate_id': 'CertificateID'
        }

        self._application_no = application_no
        self._certificate_id = certificate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DpicrRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dpicr_request_certificateParameters of this DpicrRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_no(self):
        """Gets the application_no of this DpicrRequestCertificateParameters.

        Application No

        :return: The application_no of this DpicrRequestCertificateParameters.
        :rtype: str
        """
        return self._application_no

    @application_no.setter
    def application_no(self, application_no):
        """Sets the application_no of this DpicrRequestCertificateParameters.

        Application No

        :param application_no: The application_no of this DpicrRequestCertificateParameters.
        :type application_no: str
        """
        if application_no is None:
            raise ValueError("Invalid value for `application_no`, must not be `None`")

        self._application_no = application_no

    @property
    def certificate_id(self):
        """Gets the certificate_id of this DpicrRequestCertificateParameters.

        Certificate ID

        :return: The certificate_id of this DpicrRequestCertificateParameters.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this DpicrRequestCertificateParameters.

        Certificate ID

        :param certificate_id: The certificate_id of this DpicrRequestCertificateParameters.
        :type certificate_id: str
        """
        if certificate_id is None:
            raise ValueError("Invalid value for `certificate_id`, must not be `None`")

        self._certificate_id = certificate_id
