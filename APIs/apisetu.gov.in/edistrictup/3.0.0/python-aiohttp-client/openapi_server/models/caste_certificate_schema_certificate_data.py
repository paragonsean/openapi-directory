# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CasteCertificateSchemaCertificateData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, description: str=None, name: str=None, sub_category: str=None):
        """CasteCertificateSchemaCertificateData - a model defined in OpenAPI

        :param category: The category of this CasteCertificateSchemaCertificateData.
        :param description: The description of this CasteCertificateSchemaCertificateData.
        :param name: The name of this CasteCertificateSchemaCertificateData.
        :param sub_category: The sub_category of this CasteCertificateSchemaCertificateData.
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'name': str,
            'sub_category': str
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'name': 'name',
            'sub_category': 'subCategory'
        }

        self._category = category
        self._description = description
        self._name = name
        self._sub_category = sub_category

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CasteCertificateSchemaCertificateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CasteCertificateSchema_CertificateData of this CasteCertificateSchemaCertificateData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CasteCertificateSchemaCertificateData.


        :return: The category of this CasteCertificateSchemaCertificateData.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CasteCertificateSchemaCertificateData.


        :param category: The category of this CasteCertificateSchemaCertificateData.
        :type category: str
        """
        allowed_values = ["SC", "ST", "OBC", "GC"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def description(self):
        """Gets the description of this CasteCertificateSchemaCertificateData.


        :return: The description of this CasteCertificateSchemaCertificateData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CasteCertificateSchemaCertificateData.


        :param description: The description of this CasteCertificateSchemaCertificateData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CasteCertificateSchemaCertificateData.


        :return: The name of this CasteCertificateSchemaCertificateData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CasteCertificateSchemaCertificateData.


        :param name: The name of this CasteCertificateSchemaCertificateData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def sub_category(self):
        """Gets the sub_category of this CasteCertificateSchemaCertificateData.


        :return: The sub_category of this CasteCertificateSchemaCertificateData.
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this CasteCertificateSchemaCertificateData.


        :param sub_category: The sub_category of this CasteCertificateSchemaCertificateData.
        :type sub_category: str
        """
        if sub_category is None:
            raise ValueError("Invalid value for `sub_category`, must not be `None`")

        self._sub_category = sub_category
