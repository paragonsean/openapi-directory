/**
 * eDistrict Uttar Pradesh, Uttar Pradesh
 * eDistrict UP (http://edistrict.up.nic.in/) is the online service delivery portal for UP State Govt. Certain documents issued by it (e.g. Birth, Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcademicCertificateSchema from '../model/AcademicCertificateSchema';
import Btcer400Response from '../model/Btcer400Response';
import Btcer401Response from '../model/Btcer401Response';
import Btcer404Response from '../model/Btcer404Response';
import Btcer500Response from '../model/Btcer500Response';
import Btcer502Response from '../model/Btcer502Response';
import Btcer503Response from '../model/Btcer503Response';
import Btcer504Response from '../model/Btcer504Response';
import BtcerRequest from '../model/BtcerRequest';
import CtcerRequest from '../model/CtcerRequest';
import DmcerRequest from '../model/DmcerRequest';
import DpicrRequest from '../model/DpicrRequest';
import DtcerRequest from '../model/DtcerRequest';
import IncerRequest from '../model/IncerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the btcer operation.
     * @callback module:api/APIsApi~btcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Birth Certificate
     * API to verify Birth Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~btcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    btcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/btcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ctcer operation.
     * @callback module:api/APIsApi~ctcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Caste Certificate
     * API to verify Caste Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~ctcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ctcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ctcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dmcer operation.
     * @callback module:api/APIsApi~dmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domicile Certificate
     * API to verify Domicile Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/DmcerRequest} [dmcerRequest] Request format
     * @param {module:api/APIsApi~dmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['dmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpicr operation.
     * @callback module:api/APIsApi~dpicrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disabled Person Identity Card/ Certificate
     * API to verify Disabled Person Identity Card/ Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/DpicrRequest} [dpicrRequest] Request format
     * @param {module:api/APIsApi~dpicrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dpicr(opts, callback) {
      opts = opts || {};
      let postBody = opts['dpicrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dpicr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dtcer operation.
     * @callback module:api/APIsApi~dtcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Death Certificate
     * API to verify Death Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/DtcerRequest} [dtcerRequest] Request format
     * @param {module:api/APIsApi~dtcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dtcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['dtcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dtcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/IncerRequest} [incerRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['incerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
