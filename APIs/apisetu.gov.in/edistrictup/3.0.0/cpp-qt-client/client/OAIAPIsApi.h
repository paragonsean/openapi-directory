/**
 * eDistrict Uttar Pradesh, Uttar Pradesh
 * eDistrict UP (http://edistrict.up.nic.in/) is the online service delivery portal for UP State Govt. Certain documents issued by it (e.g. Birth, Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcademicCertificateSchema.h"
#include "OAIBtcer_400_response.h"
#include "OAIBtcer_401_response.h"
#include "OAIBtcer_404_response.h"
#include "OAIBtcer_500_response.h"
#include "OAIBtcer_502_response.h"
#include "OAIBtcer_503_response.h"
#include "OAIBtcer_504_response.h"
#include "OAIBtcer_request.h"
#include "OAICtcer_request.h"
#include "OAIDmcer_request.h"
#include "OAIDpicr_request.h"
#include "OAIDtcer_request.h"
#include "OAIIncer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_btcer_request OAIBtcer_request [optional]
    */
    virtual void btcer(const ::OpenAPI::OptionalParam<OAIBtcer_request> &oai_btcer_request = ::OpenAPI::OptionalParam<OAIBtcer_request>());

    /**
    * @param[in]  oai_ctcer_request OAICtcer_request [optional]
    */
    virtual void ctcer(const ::OpenAPI::OptionalParam<OAICtcer_request> &oai_ctcer_request = ::OpenAPI::OptionalParam<OAICtcer_request>());

    /**
    * @param[in]  oai_dmcer_request OAIDmcer_request [optional]
    */
    virtual void dmcer(const ::OpenAPI::OptionalParam<OAIDmcer_request> &oai_dmcer_request = ::OpenAPI::OptionalParam<OAIDmcer_request>());

    /**
    * @param[in]  oai_dpicr_request OAIDpicr_request [optional]
    */
    virtual void dpicr(const ::OpenAPI::OptionalParam<OAIDpicr_request> &oai_dpicr_request = ::OpenAPI::OptionalParam<OAIDpicr_request>());

    /**
    * @param[in]  oai_dtcer_request OAIDtcer_request [optional]
    */
    virtual void dtcer(const ::OpenAPI::OptionalParam<OAIDtcer_request> &oai_dtcer_request = ::OpenAPI::OptionalParam<OAIDtcer_request>());

    /**
    * @param[in]  oai_incer_request OAIIncer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIIncer_request> &oai_incer_request = ::OpenAPI::OptionalParam<OAIIncer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void btcerCallback(OAIHttpRequestWorker *worker);
    void ctcerCallback(OAIHttpRequestWorker *worker);
    void dmcerCallback(OAIHttpRequestWorker *worker);
    void dpicrCallback(OAIHttpRequestWorker *worker);
    void dtcerCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void btcerSignal();
    void ctcerSignal();
    void dmcerSignal();
    void dpicrSignal();
    void dtcerSignal();
    void incerSignal();


    void btcerSignalFull(OAIHttpRequestWorker *worker);
    void ctcerSignalFull(OAIHttpRequestWorker *worker);
    void dmcerSignalFull(OAIHttpRequestWorker *worker);
    void dpicrSignalFull(OAIHttpRequestWorker *worker);
    void dtcerSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use btcerSignalError() instead")
    void btcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ctcerSignalError() instead")
    void ctcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ctcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalError() instead")
    void dmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpicrSignalError() instead")
    void dpicrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dpicrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalError() instead")
    void dtcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use btcerSignalErrorFull() instead")
    void btcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ctcerSignalErrorFull() instead")
    void ctcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ctcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalErrorFull() instead")
    void dmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpicrSignalErrorFull() instead")
    void dpicrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpicrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalErrorFull() instead")
    void dtcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
