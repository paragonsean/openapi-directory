# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, full_name: str=None, policy_no: str=None):
        """LicerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this LicerRequestCertificateParameters.
        :param full_name: The full_name of this LicerRequestCertificateParameters.
        :param policy_no: The policy_no of this LicerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'full_name': str,
            'policy_no': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'full_name': 'FullName',
            'policy_no': 'policyNo'
        }

        self._dob = dob
        self._full_name = full_name
        self._policy_no = policy_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The licer_request_certificateParameters of this LicerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this LicerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this LicerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this LicerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this LicerRequestCertificateParameters.

        Full name

        :return: The full_name of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this LicerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this LicerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def policy_no(self):
        """Gets the policy_no of this LicerRequestCertificateParameters.

        Policy Number

        :return: The policy_no of this LicerRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_no

    @policy_no.setter
    def policy_no(self, policy_no):
        """Sets the policy_no of this LicerRequestCertificateParameters.

        Policy Number

        :param policy_no: The policy_no of this LicerRequestCertificateParameters.
        :type policy_no: str
        """
        if policy_no is None:
            raise ValueError("Invalid value for `policy_no`, must not be `None`")

        self._policy_no = policy_no
