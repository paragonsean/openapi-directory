# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, gp: str=None, gp_max: str=None, grade: str=None, marks_max: int=None, marks_max_practical: int=None, marks_max_theory: int=None, marks_practical: int=None, marks_theory: int=None, marks_total: int=None, name: str=None):
        """AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner - a model defined in OpenAPI

        :param code: The code of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param gp: The gp of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param gp_max: The gp_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param grade: The grade of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_max: The marks_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_max_practical: The marks_max_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_max_theory: The marks_max_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_practical: The marks_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_theory: The marks_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param marks_total: The marks_total of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :param name: The name of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        """
        self.openapi_types = {
            'code': str,
            'gp': str,
            'gp_max': str,
            'grade': str,
            'marks_max': int,
            'marks_max_practical': int,
            'marks_max_theory': int,
            'marks_practical': int,
            'marks_theory': int,
            'marks_total': int,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'gp': 'gp',
            'gp_max': 'gpMax',
            'grade': 'grade',
            'marks_max': 'marksMax',
            'marks_max_practical': 'marksMaxPractical',
            'marks_max_theory': 'marksMaxTheory',
            'marks_practical': 'marksPractical',
            'marks_theory': 'marksTheory',
            'marks_total': 'marksTotal',
            'name': 'name'
        }

        self._code = code
        self._gp = gp
        self._gp_max = gp_max
        self._grade = grade
        self._marks_max = marks_max
        self._marks_max_practical = marks_max_practical
        self._marks_max_theory = marks_max_theory
        self._marks_practical = marks_practical
        self._marks_theory = marks_theory
        self._marks_total = marks_total
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcademicCertificateSchema_CertificateData_Performance_Subjects_inner of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The code of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param code: The code of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def gp(self):
        """Gets the gp of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The gp of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: str
        """
        return self._gp

    @gp.setter
    def gp(self, gp):
        """Sets the gp of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param gp: The gp of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type gp: str
        """
        if gp is None:
            raise ValueError("Invalid value for `gp`, must not be `None`")

        self._gp = gp

    @property
    def gp_max(self):
        """Gets the gp_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The gp_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: str
        """
        return self._gp_max

    @gp_max.setter
    def gp_max(self, gp_max):
        """Sets the gp_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param gp_max: The gp_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type gp_max: str
        """
        if gp_max is None:
            raise ValueError("Invalid value for `gp_max`, must not be `None`")

        self._gp_max = gp_max

    @property
    def grade(self):
        """Gets the grade of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The grade of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param grade: The grade of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type grade: str
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")
        if grade is not None and len(grade) < 1:
            raise ValueError("Invalid value for `grade`, length must be greater than or equal to `1`")

        self._grade = grade

    @property
    def marks_max(self):
        """Gets the marks_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_max

    @marks_max.setter
    def marks_max(self, marks_max):
        """Sets the marks_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_max: The marks_max of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_max: int
        """
        if marks_max is None:
            raise ValueError("Invalid value for `marks_max`, must not be `None`")

        self._marks_max = marks_max

    @property
    def marks_max_practical(self):
        """Gets the marks_max_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_max_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_max_practical

    @marks_max_practical.setter
    def marks_max_practical(self, marks_max_practical):
        """Sets the marks_max_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_max_practical: The marks_max_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_max_practical: int
        """
        if marks_max_practical is None:
            raise ValueError("Invalid value for `marks_max_practical`, must not be `None`")

        self._marks_max_practical = marks_max_practical

    @property
    def marks_max_theory(self):
        """Gets the marks_max_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_max_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_max_theory

    @marks_max_theory.setter
    def marks_max_theory(self, marks_max_theory):
        """Sets the marks_max_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_max_theory: The marks_max_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_max_theory: int
        """
        if marks_max_theory is None:
            raise ValueError("Invalid value for `marks_max_theory`, must not be `None`")

        self._marks_max_theory = marks_max_theory

    @property
    def marks_practical(self):
        """Gets the marks_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_practical

    @marks_practical.setter
    def marks_practical(self, marks_practical):
        """Sets the marks_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_practical: The marks_practical of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_practical: int
        """
        if marks_practical is None:
            raise ValueError("Invalid value for `marks_practical`, must not be `None`")

        self._marks_practical = marks_practical

    @property
    def marks_theory(self):
        """Gets the marks_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_theory

    @marks_theory.setter
    def marks_theory(self, marks_theory):
        """Sets the marks_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_theory: The marks_theory of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_theory: int
        """
        if marks_theory is None:
            raise ValueError("Invalid value for `marks_theory`, must not be `None`")

        self._marks_theory = marks_theory

    @property
    def marks_total(self):
        """Gets the marks_total of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The marks_total of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: int
        """
        return self._marks_total

    @marks_total.setter
    def marks_total(self, marks_total):
        """Sets the marks_total of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param marks_total: The marks_total of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type marks_total: int
        """
        if marks_total is None:
            raise ValueError("Invalid value for `marks_total`, must not be `None`")

        self._marks_total = marks_total

    @property
    def name(self):
        """Gets the name of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :return: The name of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.


        :param name: The name of this AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
