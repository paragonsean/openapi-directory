/**
 * Department of Labour, Govt of Punjab, Punjab
 * APIs provided by Department of Labour, Govt of Punjab, Punjab.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner model module.
 * @module model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner
 * @version 3.0.0
 */
class AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner {
    /**
     * Constructs a new <code>AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner</code>.
     * @alias module:model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner
     * @param code {String} 
     * @param gp {String} 
     * @param gpMax {String} 
     * @param grade {String} 
     * @param marksMax {Number} 
     * @param marksMaxPractical {Number} 
     * @param marksMaxTheory {Number} 
     * @param marksPractical {Number} 
     * @param marksTheory {Number} 
     * @param marksTotal {Number} 
     * @param name {String} 
     */
    constructor(code, gp, gpMax, grade, marksMax, marksMaxPractical, marksMaxTheory, marksPractical, marksTheory, marksTotal, name) { 
        
        AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.initialize(this, code, gp, gpMax, grade, marksMax, marksMaxPractical, marksMaxTheory, marksPractical, marksTheory, marksTotal, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, gp, gpMax, grade, marksMax, marksMaxPractical, marksMaxTheory, marksPractical, marksTheory, marksTotal, name) { 
        obj['code'] = code;
        obj['gp'] = gp;
        obj['gpMax'] = gpMax;
        obj['grade'] = grade;
        obj['marksMax'] = marksMax;
        obj['marksMaxPractical'] = marksMaxPractical;
        obj['marksMaxTheory'] = marksMaxTheory;
        obj['marksPractical'] = marksPractical;
        obj['marksTheory'] = marksTheory;
        obj['marksTotal'] = marksTotal;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner} The populated <code>AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('gp')) {
                obj['gp'] = ApiClient.convertToType(data['gp'], 'String');
            }
            if (data.hasOwnProperty('gpMax')) {
                obj['gpMax'] = ApiClient.convertToType(data['gpMax'], 'String');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('marksMax')) {
                obj['marksMax'] = ApiClient.convertToType(data['marksMax'], 'Number');
            }
            if (data.hasOwnProperty('marksMaxPractical')) {
                obj['marksMaxPractical'] = ApiClient.convertToType(data['marksMaxPractical'], 'Number');
            }
            if (data.hasOwnProperty('marksMaxTheory')) {
                obj['marksMaxTheory'] = ApiClient.convertToType(data['marksMaxTheory'], 'Number');
            }
            if (data.hasOwnProperty('marksPractical')) {
                obj['marksPractical'] = ApiClient.convertToType(data['marksPractical'], 'Number');
            }
            if (data.hasOwnProperty('marksTheory')) {
                obj['marksTheory'] = ApiClient.convertToType(data['marksTheory'], 'Number');
            }
            if (data.hasOwnProperty('marksTotal')) {
                obj['marksTotal'] = ApiClient.convertToType(data['marksTotal'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['gp'] && !(typeof data['gp'] === 'string' || data['gp'] instanceof String)) {
            throw new Error("Expected the field `gp` to be a primitive type in the JSON string but got " + data['gp']);
        }
        // ensure the json data is a string
        if (data['gpMax'] && !(typeof data['gpMax'] === 'string' || data['gpMax'] instanceof String)) {
            throw new Error("Expected the field `gpMax` to be a primitive type in the JSON string but got " + data['gpMax']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.RequiredProperties = ["code", "gp", "gpMax", "grade", "marksMax", "marksMaxPractical", "marksMaxTheory", "marksPractical", "marksTheory", "marksTotal", "name"];

/**
 * @member {String} code
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['code'] = undefined;

/**
 * @member {String} gp
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['gp'] = undefined;

/**
 * @member {String} gpMax
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['gpMax'] = undefined;

/**
 * @member {String} grade
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['grade'] = undefined;

/**
 * @member {Number} marksMax
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksMax'] = undefined;

/**
 * @member {Number} marksMaxPractical
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksMaxPractical'] = undefined;

/**
 * @member {Number} marksMaxTheory
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksMaxTheory'] = undefined;

/**
 * @member {Number} marksPractical
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksPractical'] = undefined;

/**
 * @member {Number} marksTheory
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksTheory'] = undefined;

/**
 * @member {Number} marksTotal
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['marksTotal'] = undefined;

/**
 * @member {String} name
 */
AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.prototype['name'] = undefined;






export default AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner;

