# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SicerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, consumer_id: str=None):
        """SicerRequestCertificateParameters - a model defined in OpenAPI

        :param name: The name of this SicerRequestCertificateParameters.
        :param consumer_id: The consumer_id of this SicerRequestCertificateParameters.
        """
        self.openapi_types = {
            'name': str,
            'consumer_id': str
        }

        self.attribute_map = {
            'name': '_name',
            'consumer_id': 'consumer_id'
        }

        self._name = name
        self._consumer_id = consumer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SicerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sicer_request_certificateParameters of this SicerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SicerRequestCertificateParameters.

        Name

        :return: The name of this SicerRequestCertificateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SicerRequestCertificateParameters.

        Name

        :param name: The name of this SicerRequestCertificateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def consumer_id(self):
        """Gets the consumer_id of this SicerRequestCertificateParameters.

        Consumer ID

        :return: The consumer_id of this SicerRequestCertificateParameters.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this SicerRequestCertificateParameters.

        Consumer ID

        :param consumer_id: The consumer_id of this SicerRequestCertificateParameters.
        :type consumer_id: str
        """
        if consumer_id is None:
            raise ValueError("Invalid value for `consumer_id`, must not be `None`")

        self._consumer_id = consumer_id
