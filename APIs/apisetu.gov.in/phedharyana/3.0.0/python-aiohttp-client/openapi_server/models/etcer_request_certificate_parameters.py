# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EtcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unique_code: str=None):
        """EtcerRequestCertificateParameters - a model defined in OpenAPI

        :param unique_code: The unique_code of this EtcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'unique_code': str
        }

        self.attribute_map = {
            'unique_code': '_unique_code'
        }

        self._unique_code = unique_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EtcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The etcer_request_certificateParameters of this EtcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unique_code(self):
        """Gets the unique_code of this EtcerRequestCertificateParameters.

        Unique Code

        :return: The unique_code of this EtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._unique_code

    @unique_code.setter
    def unique_code(self, unique_code):
        """Sets the unique_code of this EtcerRequestCertificateParameters.

        Unique Code

        :param unique_code: The unique_code of this EtcerRequestCertificateParameters.
        :type unique_code: str
        """
        if unique_code is None:
            raise ValueError("Invalid value for `unique_code`, must not be `None`")

        self._unique_code = unique_code
