/**
 * Transport Department, Haryana
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DrivingLicenseSchemaCertificateDataDrivingLicense model module.
 * @module model/DrivingLicenseSchemaCertificateDataDrivingLicense
 * @version 3.0.0
 */
class DrivingLicenseSchemaCertificateDataDrivingLicense {
    /**
     * Constructs a new <code>DrivingLicenseSchemaCertificateDataDrivingLicense</code>.
     * @alias module:model/DrivingLicenseSchemaCertificateDataDrivingLicense
     * @param abbreviation {String} 
     * @param code {String} 
     * @param description {String} 
     * @param endorseDate {String} 
     * @param issueDate {String} 
     */
    constructor(abbreviation, code, description, endorseDate, issueDate) { 
        
        DrivingLicenseSchemaCertificateDataDrivingLicense.initialize(this, abbreviation, code, description, endorseDate, issueDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, abbreviation, code, description, endorseDate, issueDate) { 
        obj['abbreviation'] = abbreviation;
        obj['code'] = code;
        obj['description'] = description;
        obj['endorseDate'] = endorseDate;
        obj['issueDate'] = issueDate;
    }

    /**
     * Constructs a <code>DrivingLicenseSchemaCertificateDataDrivingLicense</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DrivingLicenseSchemaCertificateDataDrivingLicense} obj Optional instance to populate.
     * @return {module:model/DrivingLicenseSchemaCertificateDataDrivingLicense} The populated <code>DrivingLicenseSchemaCertificateDataDrivingLicense</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DrivingLicenseSchemaCertificateDataDrivingLicense();

            if (data.hasOwnProperty('abbreviation')) {
                obj['abbreviation'] = ApiClient.convertToType(data['abbreviation'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endorseDate')) {
                obj['endorseDate'] = ApiClient.convertToType(data['endorseDate'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DrivingLicenseSchemaCertificateDataDrivingLicense</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DrivingLicenseSchemaCertificateDataDrivingLicense</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DrivingLicenseSchemaCertificateDataDrivingLicense.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['abbreviation'] && !(typeof data['abbreviation'] === 'string' || data['abbreviation'] instanceof String)) {
            throw new Error("Expected the field `abbreviation` to be a primitive type in the JSON string but got " + data['abbreviation']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endorseDate'] && !(typeof data['endorseDate'] === 'string' || data['endorseDate'] instanceof String)) {
            throw new Error("Expected the field `endorseDate` to be a primitive type in the JSON string but got " + data['endorseDate']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }

        return true;
    }


}

DrivingLicenseSchemaCertificateDataDrivingLicense.RequiredProperties = ["abbreviation", "code", "description", "endorseDate", "issueDate"];

/**
 * @member {String} abbreviation
 */
DrivingLicenseSchemaCertificateDataDrivingLicense.prototype['abbreviation'] = undefined;

/**
 * @member {String} code
 */
DrivingLicenseSchemaCertificateDataDrivingLicense.prototype['code'] = undefined;

/**
 * @member {String} description
 */
DrivingLicenseSchemaCertificateDataDrivingLicense.prototype['description'] = undefined;

/**
 * @member {String} endorseDate
 */
DrivingLicenseSchemaCertificateDataDrivingLicense.prototype['endorseDate'] = undefined;

/**
 * @member {String} issueDate
 */
DrivingLicenseSchemaCertificateDataDrivingLicense.prototype['issueDate'] = undefined;






export default DrivingLicenseSchemaCertificateDataDrivingLicense;

