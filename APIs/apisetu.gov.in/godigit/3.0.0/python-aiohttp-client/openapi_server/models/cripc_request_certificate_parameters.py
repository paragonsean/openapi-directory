# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CripcRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, document_number: str=None, full_name: str=None, gender: str=None, policy_number: str=None, search_document: str=None):
        """CripcRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this CripcRequestCertificateParameters.
        :param document_number: The document_number of this CripcRequestCertificateParameters.
        :param full_name: The full_name of this CripcRequestCertificateParameters.
        :param gender: The gender of this CripcRequestCertificateParameters.
        :param policy_number: The policy_number of this CripcRequestCertificateParameters.
        :param search_document: The search_document of this CripcRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'document_number': str,
            'full_name': str,
            'gender': str,
            'policy_number': str,
            'search_document': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'document_number': 'DocumentNumber',
            'full_name': 'FullName',
            'gender': 'GENDER',
            'policy_number': 'PolicyNumber',
            'search_document': 'SearchDocument'
        }

        self._dob = dob
        self._document_number = document_number
        self._full_name = full_name
        self._gender = gender
        self._policy_number = policy_number
        self._search_document = search_document

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CripcRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cripc_request_certificateParameters of this CripcRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this CripcRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this CripcRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this CripcRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def document_number(self):
        """Gets the document_number of this CripcRequestCertificateParameters.

        Enter Value

        :return: The document_number of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """Sets the document_number of this CripcRequestCertificateParameters.

        Enter Value

        :param document_number: The document_number of this CripcRequestCertificateParameters.
        :type document_number: str
        """
        if document_number is None:
            raise ValueError("Invalid value for `document_number`, must not be `None`")

        self._document_number = document_number

    @property
    def full_name(self):
        """Gets the full_name of this CripcRequestCertificateParameters.

        Full name

        :return: The full_name of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CripcRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this CripcRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this CripcRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :return: The gender of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CripcRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :param gender: The gender of this CripcRequestCertificateParameters.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def policy_number(self):
        """Gets the policy_number of this CripcRequestCertificateParameters.

        PolicyNumber

        :return: The policy_number of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this CripcRequestCertificateParameters.

        PolicyNumber

        :param policy_number: The policy_number of this CripcRequestCertificateParameters.
        :type policy_number: str
        """
        if policy_number is None:
            raise ValueError("Invalid value for `policy_number`, must not be `None`")

        self._policy_number = policy_number

    @property
    def search_document(self):
        """Gets the search_document of this CripcRequestCertificateParameters.

        Select Any one form the list

        :return: The search_document of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._search_document

    @search_document.setter
    def search_document(self, search_document):
        """Sets the search_document of this CripcRequestCertificateParameters.

        Select Any one form the list

        :param search_document: The search_document of this CripcRequestCertificateParameters.
        :type search_document: str
        """
        if search_document is None:
            raise ValueError("Invalid value for `search_document`, must not be `None`")

        self._search_document = search_document
