/*
 * Go Digit General Insurance Ltd.
 * Car, Two wheeler and Commercial Vehicle insurance policies issued by GoDigit (https://www.godigit.com), a General Insurance company, can be fetched by Citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CripcRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:39:12.465916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CripcRequestCertificateParameters {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private String DOB;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "DocumentNumber";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  private String documentNumber;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_G_E_N_D_E_R = "GENDER";
  @SerializedName(SERIALIZED_NAME_G_E_N_D_E_R)
  private String GENDER;

  public static final String SERIALIZED_NAME_POLICY_NUMBER = "PolicyNumber";
  @SerializedName(SERIALIZED_NAME_POLICY_NUMBER)
  private String policyNumber;

  public static final String SERIALIZED_NAME_SEARCH_DOCUMENT = "SearchDocument";
  @SerializedName(SERIALIZED_NAME_SEARCH_DOCUMENT)
  private String searchDocument;

  public CripcRequestCertificateParameters() {
  }

  public CripcRequestCertificateParameters DOB(String DOB) {
    this.DOB = DOB;
    return this;
  }

  /**
   * Date of birth in DD-MM-YYYY format
   * @return DOB
   */
  @javax.annotation.Nonnull
  public String getDOB() {
    return DOB;
  }

  public void setDOB(String DOB) {
    this.DOB = DOB;
  }


  public CripcRequestCertificateParameters documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Enter Value
   * @return documentNumber
   */
  @javax.annotation.Nonnull
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }


  public CripcRequestCertificateParameters fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public CripcRequestCertificateParameters GENDER(String GENDER) {
    this.GENDER = GENDER;
    return this;
  }

  /**
   * Gender - M for male, F for female and O for other
   * @return GENDER
   */
  @javax.annotation.Nonnull
  public String getGENDER() {
    return GENDER;
  }

  public void setGENDER(String GENDER) {
    this.GENDER = GENDER;
  }


  public CripcRequestCertificateParameters policyNumber(String policyNumber) {
    this.policyNumber = policyNumber;
    return this;
  }

  /**
   * PolicyNumber
   * @return policyNumber
   */
  @javax.annotation.Nonnull
  public String getPolicyNumber() {
    return policyNumber;
  }

  public void setPolicyNumber(String policyNumber) {
    this.policyNumber = policyNumber;
  }


  public CripcRequestCertificateParameters searchDocument(String searchDocument) {
    this.searchDocument = searchDocument;
    return this;
  }

  /**
   * Select Any one form the list
   * @return searchDocument
   */
  @javax.annotation.Nonnull
  public String getSearchDocument() {
    return searchDocument;
  }

  public void setSearchDocument(String searchDocument) {
    this.searchDocument = searchDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CripcRequestCertificateParameters cripcRequestCertificateParameters = (CripcRequestCertificateParameters) o;
    return Objects.equals(this.DOB, cripcRequestCertificateParameters.DOB) &&
        Objects.equals(this.documentNumber, cripcRequestCertificateParameters.documentNumber) &&
        Objects.equals(this.fullName, cripcRequestCertificateParameters.fullName) &&
        Objects.equals(this.GENDER, cripcRequestCertificateParameters.GENDER) &&
        Objects.equals(this.policyNumber, cripcRequestCertificateParameters.policyNumber) &&
        Objects.equals(this.searchDocument, cripcRequestCertificateParameters.searchDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, documentNumber, fullName, GENDER, policyNumber, searchDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CripcRequestCertificateParameters {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    GENDER: ").append(toIndentedString(GENDER)).append("\n");
    sb.append("    policyNumber: ").append(toIndentedString(policyNumber)).append("\n");
    sb.append("    searchDocument: ").append(toIndentedString(searchDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("DocumentNumber");
    openapiFields.add("FullName");
    openapiFields.add("GENDER");
    openapiFields.add("PolicyNumber");
    openapiFields.add("SearchDocument");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("DocumentNumber");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("GENDER");
    openapiRequiredFields.add("PolicyNumber");
    openapiRequiredFields.add("SearchDocument");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CripcRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CripcRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CripcRequestCertificateParameters is not found in the empty JSON string", CripcRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CripcRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CripcRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CripcRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DOB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      if (!jsonObj.get("DocumentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocumentNumber").toString()));
      }
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("GENDER").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GENDER` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GENDER").toString()));
      }
      if (!jsonObj.get("PolicyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyNumber").toString()));
      }
      if (!jsonObj.get("SearchDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SearchDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SearchDocument").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CripcRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CripcRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CripcRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CripcRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CripcRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, CripcRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CripcRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CripcRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CripcRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to CripcRequestCertificateParameters
   */
  public static CripcRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CripcRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of CripcRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

