/**
 * Go Digit General Insurance Ltd.
 * Car, Two wheeler and Commercial Vehicle insurance policies issued by GoDigit (https://www.godigit.com), a General Insurance company, can be fetched by Citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CripcRequestCertificateParameters model module.
 * @module model/CripcRequestCertificateParameters
 * @version 3.0.0
 */
class CripcRequestCertificateParameters {
    /**
     * Constructs a new <code>CripcRequestCertificateParameters</code>.
     * @alias module:model/CripcRequestCertificateParameters
     * @param DOB {String} Date of birth in DD-MM-YYYY format
     * @param documentNumber {String} Enter Value
     * @param fullName {String} Full name
     * @param GENDER {String} Gender - M for male, F for female and O for other
     * @param policyNumber {String} PolicyNumber
     * @param searchDocument {String} Select Any one form the list
     */
    constructor(DOB, documentNumber, fullName, GENDER, policyNumber, searchDocument) { 
        
        CripcRequestCertificateParameters.initialize(this, DOB, documentNumber, fullName, GENDER, policyNumber, searchDocument);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, DOB, documentNumber, fullName, GENDER, policyNumber, searchDocument) { 
        obj['DOB'] = DOB;
        obj['DocumentNumber'] = documentNumber;
        obj['FullName'] = fullName;
        obj['GENDER'] = GENDER;
        obj['PolicyNumber'] = policyNumber;
        obj['SearchDocument'] = searchDocument;
    }

    /**
     * Constructs a <code>CripcRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CripcRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/CripcRequestCertificateParameters} The populated <code>CripcRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CripcRequestCertificateParameters();

            if (data.hasOwnProperty('DOB')) {
                obj['DOB'] = ApiClient.convertToType(data['DOB'], 'String');
            }
            if (data.hasOwnProperty('DocumentNumber')) {
                obj['DocumentNumber'] = ApiClient.convertToType(data['DocumentNumber'], 'String');
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], 'String');
            }
            if (data.hasOwnProperty('GENDER')) {
                obj['GENDER'] = ApiClient.convertToType(data['GENDER'], 'String');
            }
            if (data.hasOwnProperty('PolicyNumber')) {
                obj['PolicyNumber'] = ApiClient.convertToType(data['PolicyNumber'], 'String');
            }
            if (data.hasOwnProperty('SearchDocument')) {
                obj['SearchDocument'] = ApiClient.convertToType(data['SearchDocument'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CripcRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CripcRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CripcRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DOB'] && !(typeof data['DOB'] === 'string' || data['DOB'] instanceof String)) {
            throw new Error("Expected the field `DOB` to be a primitive type in the JSON string but got " + data['DOB']);
        }
        // ensure the json data is a string
        if (data['DocumentNumber'] && !(typeof data['DocumentNumber'] === 'string' || data['DocumentNumber'] instanceof String)) {
            throw new Error("Expected the field `DocumentNumber` to be a primitive type in the JSON string but got " + data['DocumentNumber']);
        }
        // ensure the json data is a string
        if (data['FullName'] && !(typeof data['FullName'] === 'string' || data['FullName'] instanceof String)) {
            throw new Error("Expected the field `FullName` to be a primitive type in the JSON string but got " + data['FullName']);
        }
        // ensure the json data is a string
        if (data['GENDER'] && !(typeof data['GENDER'] === 'string' || data['GENDER'] instanceof String)) {
            throw new Error("Expected the field `GENDER` to be a primitive type in the JSON string but got " + data['GENDER']);
        }
        // ensure the json data is a string
        if (data['PolicyNumber'] && !(typeof data['PolicyNumber'] === 'string' || data['PolicyNumber'] instanceof String)) {
            throw new Error("Expected the field `PolicyNumber` to be a primitive type in the JSON string but got " + data['PolicyNumber']);
        }
        // ensure the json data is a string
        if (data['SearchDocument'] && !(typeof data['SearchDocument'] === 'string' || data['SearchDocument'] instanceof String)) {
            throw new Error("Expected the field `SearchDocument` to be a primitive type in the JSON string but got " + data['SearchDocument']);
        }

        return true;
    }


}

CripcRequestCertificateParameters.RequiredProperties = ["DOB", "DocumentNumber", "FullName", "GENDER", "PolicyNumber", "SearchDocument"];

/**
 * Date of birth in DD-MM-YYYY format
 * @member {String} DOB
 */
CripcRequestCertificateParameters.prototype['DOB'] = undefined;

/**
 * Enter Value
 * @member {String} DocumentNumber
 */
CripcRequestCertificateParameters.prototype['DocumentNumber'] = undefined;

/**
 * Full name
 * @member {String} FullName
 */
CripcRequestCertificateParameters.prototype['FullName'] = undefined;

/**
 * Gender - M for male, F for female and O for other
 * @member {String} GENDER
 */
CripcRequestCertificateParameters.prototype['GENDER'] = undefined;

/**
 * PolicyNumber
 * @member {String} PolicyNumber
 */
CripcRequestCertificateParameters.prototype['PolicyNumber'] = undefined;

/**
 * Select Any one form the list
 * @member {String} SearchDocument
 */
CripcRequestCertificateParameters.prototype['SearchDocument'] = undefined;






export default CripcRequestCertificateParameters;

