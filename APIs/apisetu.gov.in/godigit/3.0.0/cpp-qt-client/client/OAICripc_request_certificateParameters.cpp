/**
 * Go Digit General Insurance Ltd.
 * Car, Two wheeler and Commercial Vehicle insurance policies issued by GoDigit (https://www.godigit.com), a General Insurance company, can be fetched by Citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICripc_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICripc_request_certificateParameters::OAICripc_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICripc_request_certificateParameters::OAICripc_request_certificateParameters() {
    this->initializeModel();
}

OAICripc_request_certificateParameters::~OAICripc_request_certificateParameters() {}

void OAICripc_request_certificateParameters::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_policy_number_isSet = false;
    m_policy_number_isValid = false;

    m_search_document_isSet = false;
    m_search_document_isValid = false;
}

void OAICripc_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICripc_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("DocumentNumber")]);
    m_document_number_isSet = !json[QString("DocumentNumber")].isNull() && m_document_number_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("GENDER")]);
    m_gender_isSet = !json[QString("GENDER")].isNull() && m_gender_isValid;

    m_policy_number_isValid = ::OpenAPI::fromJsonValue(m_policy_number, json[QString("PolicyNumber")]);
    m_policy_number_isSet = !json[QString("PolicyNumber")].isNull() && m_policy_number_isValid;

    m_search_document_isValid = ::OpenAPI::fromJsonValue(m_search_document, json[QString("SearchDocument")]);
    m_search_document_isSet = !json[QString("SearchDocument")].isNull() && m_search_document_isValid;
}

QString OAICripc_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICripc_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_document_number_isSet) {
        obj.insert(QString("DocumentNumber"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("GENDER"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_policy_number_isSet) {
        obj.insert(QString("PolicyNumber"), ::OpenAPI::toJsonValue(m_policy_number));
    }
    if (m_search_document_isSet) {
        obj.insert(QString("SearchDocument"), ::OpenAPI::toJsonValue(m_search_document));
    }
    return obj;
}

QString OAICripc_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAICripc_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAICripc_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAICripc_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAICripc_request_certificateParameters::getDocumentNumber() const {
    return m_document_number;
}
void OAICripc_request_certificateParameters::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAICripc_request_certificateParameters::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAICripc_request_certificateParameters::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAICripc_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAICripc_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAICripc_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAICripc_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAICripc_request_certificateParameters::getGender() const {
    return m_gender;
}
void OAICripc_request_certificateParameters::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAICripc_request_certificateParameters::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAICripc_request_certificateParameters::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAICripc_request_certificateParameters::getPolicyNumber() const {
    return m_policy_number;
}
void OAICripc_request_certificateParameters::setPolicyNumber(const QString &policy_number) {
    m_policy_number = policy_number;
    m_policy_number_isSet = true;
}

bool OAICripc_request_certificateParameters::is_policy_number_Set() const{
    return m_policy_number_isSet;
}

bool OAICripc_request_certificateParameters::is_policy_number_Valid() const{
    return m_policy_number_isValid;
}

QString OAICripc_request_certificateParameters::getSearchDocument() const {
    return m_search_document;
}
void OAICripc_request_certificateParameters::setSearchDocument(const QString &search_document) {
    m_search_document = search_document;
    m_search_document_isSet = true;
}

bool OAICripc_request_certificateParameters::is_search_document_Set() const{
    return m_search_document_isSet;
}

bool OAICripc_request_certificateParameters::is_search_document_Valid() const{
    return m_search_document_isValid;
}

bool OAICripc_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_document_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICripc_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_document_number_isValid && m_full_name_isValid && m_gender_isValid && m_policy_number_isValid && m_search_document_isValid && true;
}

} // namespace OpenAPI
