/**
 * The Oriental Insurance Co. Ltd.
 * General Insurance policies such as Motor, Health, Travel, Property, Engineering  e.t.c issued by The Oriental  Insurance are available to be pulled for citizens of India.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cripc400Response from '../model/Cripc400Response';
import Cripc401Response from '../model/Cripc401Response';
import Cripc404Response from '../model/Cripc404Response';
import Cripc500Response from '../model/Cripc500Response';
import Cripc502Response from '../model/Cripc502Response';
import Cripc503Response from '../model/Cripc503Response';
import Cripc504Response from '../model/Cripc504Response';
import CripcRequest from '../model/CripcRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cripc operation.
     * @callback module:api/APIsApi~cripcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Car
     * API to verify Insurance Policy - Car.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~cripcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cripc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cripc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cvipc operation.
     * @callback module:api/APIsApi~cvipcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Commercial Vehicle
     * API to verify Insurance Policy - Commercial Vehicle.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~cvipcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cvipc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cvipc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the egipc operation.
     * @callback module:api/APIsApi~egipcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Engineering
     * API to verify Insurance Policy - Engineering.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~egipcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    egipc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/egipc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hlipc operation.
     * @callback module:api/APIsApi~hlipcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Health
     * API to verify Insurance Policy - Health.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~hlipcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hlipc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hlipc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hmipc operation.
     * @callback module:api/APIsApi~hmipcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Home
     * API to verify Insurance Policy - Home.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~hmipcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hmipc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hmipc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mripc operation.
     * @callback module:api/APIsApi~mripcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Marine
     * API to verify Insurance Policy - Marine.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~mripcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mripc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mripc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the podoc operation.
     * @callback module:api/APIsApi~podocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Policy Document
     * API to verify Policy Document.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~podocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    podoc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/podoc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pripc operation.
     * @callback module:api/APIsApi~pripcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Property
     * API to verify Insurance Policy - Property.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~pripcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pripc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pripc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tripc operation.
     * @callback module:api/APIsApi~tripcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Travel
     * API to verify Insurance Policy - Travel.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~tripcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tripc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tripc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the twipc operation.
     * @callback module:api/APIsApi~twipcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insurance Policy - Two Wheeler
     * API to verify Insurance Policy - Two Wheeler.
     * @param {Object} opts Optional parameters
     * @param {module:model/CripcRequest} [cripcRequest] Request format
     * @param {module:api/APIsApi~twipcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    twipc(opts, callback) {
      opts = opts || {};
      let postBody = opts['cripcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/twipc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
