/**
 * Madhya Pradesh Medical Science University, Jabalpur M.P., Madhya Pradesh
 * Migration certificate issued from 2018 onward can now be fetched by Citizens in their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner from './AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner';

/**
 * The AcademicCertificateSchemaCertificateDataPerformance model module.
 * @module model/AcademicCertificateSchemaCertificateDataPerformance
 * @version 3.0.0
 */
class AcademicCertificateSchemaCertificateDataPerformance {
    /**
     * Constructs a new <code>AcademicCertificateSchemaCertificateDataPerformance</code>.
     * @alias module:model/AcademicCertificateSchemaCertificateDataPerformance
     * @param subjects {Array.<module:model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner>} 
     * @param cgpa {String} 
     * @param cgpaMax {String} 
     * @param grade {String} 
     * @param marksMax {String} 
     * @param marksTotal {String} 
     * @param percentage {String} 
     * @param result {String} 
     * @param resultDate {String} 
     * @param updateDate {String} 
     */
    constructor(subjects, cgpa, cgpaMax, grade, marksMax, marksTotal, percentage, result, resultDate, updateDate) { 
        
        AcademicCertificateSchemaCertificateDataPerformance.initialize(this, subjects, cgpa, cgpaMax, grade, marksMax, marksTotal, percentage, result, resultDate, updateDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, subjects, cgpa, cgpaMax, grade, marksMax, marksTotal, percentage, result, resultDate, updateDate) { 
        obj['Subjects'] = subjects;
        obj['cgpa'] = cgpa;
        obj['cgpaMax'] = cgpaMax;
        obj['grade'] = grade;
        obj['marksMax'] = marksMax;
        obj['marksTotal'] = marksTotal;
        obj['percentage'] = percentage;
        obj['result'] = result;
        obj['resultDate'] = resultDate;
        obj['updateDate'] = updateDate;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaCertificateDataPerformance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaCertificateDataPerformance} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaCertificateDataPerformance} The populated <code>AcademicCertificateSchemaCertificateDataPerformance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaCertificateDataPerformance();

            if (data.hasOwnProperty('Subjects')) {
                obj['Subjects'] = ApiClient.convertToType(data['Subjects'], [AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner]);
            }
            if (data.hasOwnProperty('cgpa')) {
                obj['cgpa'] = ApiClient.convertToType(data['cgpa'], 'String');
            }
            if (data.hasOwnProperty('cgpaMax')) {
                obj['cgpaMax'] = ApiClient.convertToType(data['cgpaMax'], 'String');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('marksMax')) {
                obj['marksMax'] = ApiClient.convertToType(data['marksMax'], 'String');
            }
            if (data.hasOwnProperty('marksTotal')) {
                obj['marksTotal'] = ApiClient.convertToType(data['marksTotal'], 'String');
            }
            if (data.hasOwnProperty('percentage')) {
                obj['percentage'] = ApiClient.convertToType(data['percentage'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('resultDate')) {
                obj['resultDate'] = ApiClient.convertToType(data['resultDate'], 'String');
            }
            if (data.hasOwnProperty('updateDate')) {
                obj['updateDate'] = ApiClient.convertToType(data['updateDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaCertificateDataPerformance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaCertificateDataPerformance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaCertificateDataPerformance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Subjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Subjects'])) {
                throw new Error("Expected the field `Subjects` to be an array in the JSON data but got " + data['Subjects']);
            }
            // validate the optional field `Subjects` (array)
            for (const item of data['Subjects']) {
                AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['cgpa'] && !(typeof data['cgpa'] === 'string' || data['cgpa'] instanceof String)) {
            throw new Error("Expected the field `cgpa` to be a primitive type in the JSON string but got " + data['cgpa']);
        }
        // ensure the json data is a string
        if (data['cgpaMax'] && !(typeof data['cgpaMax'] === 'string' || data['cgpaMax'] instanceof String)) {
            throw new Error("Expected the field `cgpaMax` to be a primitive type in the JSON string but got " + data['cgpaMax']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // ensure the json data is a string
        if (data['marksMax'] && !(typeof data['marksMax'] === 'string' || data['marksMax'] instanceof String)) {
            throw new Error("Expected the field `marksMax` to be a primitive type in the JSON string but got " + data['marksMax']);
        }
        // ensure the json data is a string
        if (data['marksTotal'] && !(typeof data['marksTotal'] === 'string' || data['marksTotal'] instanceof String)) {
            throw new Error("Expected the field `marksTotal` to be a primitive type in the JSON string but got " + data['marksTotal']);
        }
        // ensure the json data is a string
        if (data['percentage'] && !(typeof data['percentage'] === 'string' || data['percentage'] instanceof String)) {
            throw new Error("Expected the field `percentage` to be a primitive type in the JSON string but got " + data['percentage']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['resultDate'] && !(typeof data['resultDate'] === 'string' || data['resultDate'] instanceof String)) {
            throw new Error("Expected the field `resultDate` to be a primitive type in the JSON string but got " + data['resultDate']);
        }
        // ensure the json data is a string
        if (data['updateDate'] && !(typeof data['updateDate'] === 'string' || data['updateDate'] instanceof String)) {
            throw new Error("Expected the field `updateDate` to be a primitive type in the JSON string but got " + data['updateDate']);
        }

        return true;
    }


}

AcademicCertificateSchemaCertificateDataPerformance.RequiredProperties = ["Subjects", "cgpa", "cgpaMax", "grade", "marksMax", "marksTotal", "percentage", "result", "resultDate", "updateDate"];

/**
 * @member {Array.<module:model/AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner>} Subjects
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['Subjects'] = undefined;

/**
 * @member {String} cgpa
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['cgpa'] = undefined;

/**
 * @member {String} cgpaMax
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['cgpaMax'] = undefined;

/**
 * @member {String} grade
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['grade'] = undefined;

/**
 * @member {String} marksMax
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['marksMax'] = undefined;

/**
 * @member {String} marksTotal
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['marksTotal'] = undefined;

/**
 * @member {String} percentage
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['percentage'] = undefined;

/**
 * @member {String} result
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['result'] = undefined;

/**
 * @member {String} resultDate
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['resultDate'] = undefined;

/**
 * @member {String} updateDate
 */
AcademicCertificateSchemaCertificateDataPerformance.prototype['updateDate'] = undefined;






export default AcademicCertificateSchemaCertificateDataPerformance;

