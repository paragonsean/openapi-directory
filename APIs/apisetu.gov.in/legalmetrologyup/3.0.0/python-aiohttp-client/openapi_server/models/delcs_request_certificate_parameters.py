# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DelcsRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_no: str=None, license_no: str=None):
        """DelcsRequestCertificateParameters - a model defined in OpenAPI

        :param application_no: The application_no of this DelcsRequestCertificateParameters.
        :param license_no: The license_no of this DelcsRequestCertificateParameters.
        """
        self.openapi_types = {
            'application_no': str,
            'license_no': str
        }

        self.attribute_map = {
            'application_no': 'applicationNo',
            'license_no': 'licenseNo'
        }

        self._application_no = application_no
        self._license_no = license_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DelcsRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The delcs_request_certificateParameters of this DelcsRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_no(self):
        """Gets the application_no of this DelcsRequestCertificateParameters.

        Application No.

        :return: The application_no of this DelcsRequestCertificateParameters.
        :rtype: str
        """
        return self._application_no

    @application_no.setter
    def application_no(self, application_no):
        """Sets the application_no of this DelcsRequestCertificateParameters.

        Application No.

        :param application_no: The application_no of this DelcsRequestCertificateParameters.
        :type application_no: str
        """
        if application_no is None:
            raise ValueError("Invalid value for `application_no`, must not be `None`")

        self._application_no = application_no

    @property
    def license_no(self):
        """Gets the license_no of this DelcsRequestCertificateParameters.

        License No.

        :return: The license_no of this DelcsRequestCertificateParameters.
        :rtype: str
        """
        return self._license_no

    @license_no.setter
    def license_no(self, license_no):
        """Sets the license_no of this DelcsRequestCertificateParameters.

        License No.

        :param license_no: The license_no of this DelcsRequestCertificateParameters.
        :type license_no: str
        """
        if license_no is None:
            raise ValueError("Invalid value for `license_no`, must not be `None`")

        self._license_no = license_no
