/**
 * Transport Department, Andaman & Nicobar
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VehicleRegistrationSchemaIssuedToPerson from './VehicleRegistrationSchemaIssuedToPerson';

/**
 * The VehicleRegistrationSchemaIssuedTo model module.
 * @module model/VehicleRegistrationSchemaIssuedTo
 * @version 3.0.0
 */
class VehicleRegistrationSchemaIssuedTo {
    /**
     * Constructs a new <code>VehicleRegistrationSchemaIssuedTo</code>.
     * @alias module:model/VehicleRegistrationSchemaIssuedTo
     * @param person {module:model/VehicleRegistrationSchemaIssuedToPerson} 
     */
    constructor(person) { 
        
        VehicleRegistrationSchemaIssuedTo.initialize(this, person);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, person) { 
        obj['Person'] = person;
    }

    /**
     * Constructs a <code>VehicleRegistrationSchemaIssuedTo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleRegistrationSchemaIssuedTo} obj Optional instance to populate.
     * @return {module:model/VehicleRegistrationSchemaIssuedTo} The populated <code>VehicleRegistrationSchemaIssuedTo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleRegistrationSchemaIssuedTo();

            if (data.hasOwnProperty('Person')) {
                obj['Person'] = VehicleRegistrationSchemaIssuedToPerson.constructFromObject(data['Person']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleRegistrationSchemaIssuedTo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleRegistrationSchemaIssuedTo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VehicleRegistrationSchemaIssuedTo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Person`
        if (data['Person']) { // data not null
          VehicleRegistrationSchemaIssuedToPerson.validateJSON(data['Person']);
        }

        return true;
    }


}

VehicleRegistrationSchemaIssuedTo.RequiredProperties = ["Person"];

/**
 * @member {module:model/VehicleRegistrationSchemaIssuedToPerson} Person
 */
VehicleRegistrationSchemaIssuedTo.prototype['Person'] = undefined;






export default VehicleRegistrationSchemaIssuedTo;

