# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, policy_no: str=None, valid_till: str=None):
        """VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance - a model defined in OpenAPI

        :param company_name: The company_name of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :param policy_no: The policy_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :param valid_till: The valid_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        """
        self.openapi_types = {
            'company_name': str,
            'policy_no': str,
            'valid_till': str
        }

        self.attribute_map = {
            'company_name': 'companyName',
            'policy_no': 'policyNo',
            'valid_till': 'validTill'
        }

        self._company_name = company_name
        self._policy_no = policy_no
        self._valid_till = valid_till

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleRegistrationSchema_CertificateData_VehicleRegistration_Insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :return: The company_name of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :param company_name: The company_name of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def policy_no(self):
        """Gets the policy_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :return: The policy_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :rtype: str
        """
        return self._policy_no

    @policy_no.setter
    def policy_no(self, policy_no):
        """Sets the policy_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :param policy_no: The policy_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :type policy_no: str
        """
        if policy_no is not None and len(policy_no) < 1:
            raise ValueError("Invalid value for `policy_no`, length must be greater than or equal to `1`")

        self._policy_no = policy_no

    @property
    def valid_till(self):
        """Gets the valid_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :return: The valid_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :rtype: str
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.


        :param valid_till: The valid_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.
        :type valid_till: str
        """

        self._valid_till = valid_till
