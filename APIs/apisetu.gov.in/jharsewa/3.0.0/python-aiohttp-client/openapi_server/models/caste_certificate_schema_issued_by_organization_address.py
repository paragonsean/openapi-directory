# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CasteCertificateSchemaIssuedByOrganizationAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, district: str=None, house: str=None, landmark: str=None, line1: str=None, line2: str=None, locality: str=None, pin: str=None, state: str=None, type: str=None, vtc: str=None):
        """CasteCertificateSchemaIssuedByOrganizationAddress - a model defined in OpenAPI

        :param country: The country of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param district: The district of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param house: The house of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param landmark: The landmark of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param line1: The line1 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param line2: The line2 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param locality: The locality of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param pin: The pin of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param state: The state of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param type: The type of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :param vtc: The vtc of this CasteCertificateSchemaIssuedByOrganizationAddress.
        """
        self.openapi_types = {
            'country': str,
            'district': str,
            'house': str,
            'landmark': str,
            'line1': str,
            'line2': str,
            'locality': str,
            'pin': str,
            'state': str,
            'type': str,
            'vtc': str
        }

        self.attribute_map = {
            'country': 'country',
            'district': 'district',
            'house': 'house',
            'landmark': 'landmark',
            'line1': 'line1',
            'line2': 'line2',
            'locality': 'locality',
            'pin': 'pin',
            'state': 'state',
            'type': 'type',
            'vtc': 'vtc'
        }

        self._country = country
        self._district = district
        self._house = house
        self._landmark = landmark
        self._line1 = line1
        self._line2 = line2
        self._locality = locality
        self._pin = pin
        self._state = state
        self._type = type
        self._vtc = vtc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CasteCertificateSchemaIssuedByOrganizationAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CasteCertificateSchema_IssuedBy_Organization_Address of this CasteCertificateSchemaIssuedByOrganizationAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The country of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param country: The country of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) < 1:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")

        self._country = country

    @property
    def district(self):
        """Gets the district of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The district of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param district: The district of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type district: str
        """
        if district is None:
            raise ValueError("Invalid value for `district`, must not be `None`")

        self._district = district

    @property
    def house(self):
        """Gets the house of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The house of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param house: The house of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type house: str
        """
        if house is None:
            raise ValueError("Invalid value for `house`, must not be `None`")

        self._house = house

    @property
    def landmark(self):
        """Gets the landmark of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The landmark of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._landmark

    @landmark.setter
    def landmark(self, landmark):
        """Sets the landmark of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param landmark: The landmark of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type landmark: str
        """
        if landmark is None:
            raise ValueError("Invalid value for `landmark`, must not be `None`")

        self._landmark = landmark

    @property
    def line1(self):
        """Gets the line1 of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The line1 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param line1: The line1 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type line1: str
        """
        if line1 is None:
            raise ValueError("Invalid value for `line1`, must not be `None`")

        self._line1 = line1

    @property
    def line2(self):
        """Gets the line2 of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The line2 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._line2

    @line2.setter
    def line2(self, line2):
        """Sets the line2 of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param line2: The line2 of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type line2: str
        """
        if line2 is None:
            raise ValueError("Invalid value for `line2`, must not be `None`")

        self._line2 = line2

    @property
    def locality(self):
        """Gets the locality of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The locality of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param locality: The locality of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type locality: str
        """
        if locality is None:
            raise ValueError("Invalid value for `locality`, must not be `None`")

        self._locality = locality

    @property
    def pin(self):
        """Gets the pin of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The pin of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param pin: The pin of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type pin: str
        """
        if pin is None:
            raise ValueError("Invalid value for `pin`, must not be `None`")

        self._pin = pin

    @property
    def state(self):
        """Gets the state of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The state of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param state: The state of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def type(self):
        """Gets the type of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The type of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param type: The type of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vtc(self):
        """Gets the vtc of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :return: The vtc of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :rtype: str
        """
        return self._vtc

    @vtc.setter
    def vtc(self, vtc):
        """Sets the vtc of this CasteCertificateSchemaIssuedByOrganizationAddress.


        :param vtc: The vtc of this CasteCertificateSchemaIssuedByOrganizationAddress.
        :type vtc: str
        """
        if vtc is None:
            raise ValueError("Invalid value for `vtc`, must not be `None`")

        self._vtc = vtc
