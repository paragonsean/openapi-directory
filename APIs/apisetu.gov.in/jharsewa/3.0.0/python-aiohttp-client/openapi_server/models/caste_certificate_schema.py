# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.caste_certificate_schema_certificate_data import CasteCertificateSchemaCertificateData
from openapi_server.models.caste_certificate_schema_issued_by import CasteCertificateSchemaIssuedBy
from openapi_server.models.caste_certificate_schema_issued_to import CasteCertificateSchemaIssuedTo
from openapi_server import util


class CasteCertificateSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_data: CasteCertificateSchemaCertificateData=None, issued_by: CasteCertificateSchemaIssuedBy=None, issued_to: CasteCertificateSchemaIssuedTo=None, expiry_date: str=None, issue_date: str=None, issued_at: str=None, language: str=None, name: str=None, number: int=None, status: str=None, type: str=None, valid_from_date: str=None):
        """CasteCertificateSchema - a model defined in OpenAPI

        :param certificate_data: The certificate_data of this CasteCertificateSchema.
        :param issued_by: The issued_by of this CasteCertificateSchema.
        :param issued_to: The issued_to of this CasteCertificateSchema.
        :param expiry_date: The expiry_date of this CasteCertificateSchema.
        :param issue_date: The issue_date of this CasteCertificateSchema.
        :param issued_at: The issued_at of this CasteCertificateSchema.
        :param language: The language of this CasteCertificateSchema.
        :param name: The name of this CasteCertificateSchema.
        :param number: The number of this CasteCertificateSchema.
        :param status: The status of this CasteCertificateSchema.
        :param type: The type of this CasteCertificateSchema.
        :param valid_from_date: The valid_from_date of this CasteCertificateSchema.
        """
        self.openapi_types = {
            'certificate_data': CasteCertificateSchemaCertificateData,
            'issued_by': CasteCertificateSchemaIssuedBy,
            'issued_to': CasteCertificateSchemaIssuedTo,
            'expiry_date': str,
            'issue_date': str,
            'issued_at': str,
            'language': str,
            'name': str,
            'number': int,
            'status': str,
            'type': str,
            'valid_from_date': str
        }

        self.attribute_map = {
            'certificate_data': 'CertificateData',
            'issued_by': 'IssuedBy',
            'issued_to': 'IssuedTo',
            'expiry_date': 'expiryDate',
            'issue_date': 'issueDate',
            'issued_at': 'issuedAt',
            'language': 'language',
            'name': 'name',
            'number': 'number',
            'status': 'status',
            'type': 'type',
            'valid_from_date': 'validFromDate'
        }

        self._certificate_data = certificate_data
        self._issued_by = issued_by
        self._issued_to = issued_to
        self._expiry_date = expiry_date
        self._issue_date = issue_date
        self._issued_at = issued_at
        self._language = language
        self._name = name
        self._number = number
        self._status = status
        self._type = type
        self._valid_from_date = valid_from_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CasteCertificateSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CasteCertificateSchema of this CasteCertificateSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_data(self):
        """Gets the certificate_data of this CasteCertificateSchema.


        :return: The certificate_data of this CasteCertificateSchema.
        :rtype: CasteCertificateSchemaCertificateData
        """
        return self._certificate_data

    @certificate_data.setter
    def certificate_data(self, certificate_data):
        """Sets the certificate_data of this CasteCertificateSchema.


        :param certificate_data: The certificate_data of this CasteCertificateSchema.
        :type certificate_data: CasteCertificateSchemaCertificateData
        """
        if certificate_data is None:
            raise ValueError("Invalid value for `certificate_data`, must not be `None`")

        self._certificate_data = certificate_data

    @property
    def issued_by(self):
        """Gets the issued_by of this CasteCertificateSchema.


        :return: The issued_by of this CasteCertificateSchema.
        :rtype: CasteCertificateSchemaIssuedBy
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this CasteCertificateSchema.


        :param issued_by: The issued_by of this CasteCertificateSchema.
        :type issued_by: CasteCertificateSchemaIssuedBy
        """
        if issued_by is None:
            raise ValueError("Invalid value for `issued_by`, must not be `None`")

        self._issued_by = issued_by

    @property
    def issued_to(self):
        """Gets the issued_to of this CasteCertificateSchema.


        :return: The issued_to of this CasteCertificateSchema.
        :rtype: CasteCertificateSchemaIssuedTo
        """
        return self._issued_to

    @issued_to.setter
    def issued_to(self, issued_to):
        """Sets the issued_to of this CasteCertificateSchema.


        :param issued_to: The issued_to of this CasteCertificateSchema.
        :type issued_to: CasteCertificateSchemaIssuedTo
        """
        if issued_to is None:
            raise ValueError("Invalid value for `issued_to`, must not be `None`")

        self._issued_to = issued_to

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CasteCertificateSchema.


        :return: The expiry_date of this CasteCertificateSchema.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CasteCertificateSchema.


        :param expiry_date: The expiry_date of this CasteCertificateSchema.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def issue_date(self):
        """Gets the issue_date of this CasteCertificateSchema.


        :return: The issue_date of this CasteCertificateSchema.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this CasteCertificateSchema.


        :param issue_date: The issue_date of this CasteCertificateSchema.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")

        self._issue_date = issue_date

    @property
    def issued_at(self):
        """Gets the issued_at of this CasteCertificateSchema.


        :return: The issued_at of this CasteCertificateSchema.
        :rtype: str
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at):
        """Sets the issued_at of this CasteCertificateSchema.


        :param issued_at: The issued_at of this CasteCertificateSchema.
        :type issued_at: str
        """
        if issued_at is None:
            raise ValueError("Invalid value for `issued_at`, must not be `None`")

        self._issued_at = issued_at

    @property
    def language(self):
        """Gets the language of this CasteCertificateSchema.


        :return: The language of this CasteCertificateSchema.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CasteCertificateSchema.


        :param language: The language of this CasteCertificateSchema.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        if language is not None and len(language) < 1:
            raise ValueError("Invalid value for `language`, length must be greater than or equal to `1`")

        self._language = language

    @property
    def name(self):
        """Gets the name of this CasteCertificateSchema.


        :return: The name of this CasteCertificateSchema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CasteCertificateSchema.


        :param name: The name of this CasteCertificateSchema.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def number(self):
        """Gets the number of this CasteCertificateSchema.


        :return: The number of this CasteCertificateSchema.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CasteCertificateSchema.


        :param number: The number of this CasteCertificateSchema.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def status(self):
        """Gets the status of this CasteCertificateSchema.


        :return: The status of this CasteCertificateSchema.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CasteCertificateSchema.


        :param status: The status of this CasteCertificateSchema.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this CasteCertificateSchema.


        :return: The type of this CasteCertificateSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CasteCertificateSchema.


        :param type: The type of this CasteCertificateSchema.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def valid_from_date(self):
        """Gets the valid_from_date of this CasteCertificateSchema.


        :return: The valid_from_date of this CasteCertificateSchema.
        :rtype: str
        """
        return self._valid_from_date

    @valid_from_date.setter
    def valid_from_date(self, valid_from_date):
        """Sets the valid_from_date of this CasteCertificateSchema.


        :param valid_from_date: The valid_from_date of this CasteCertificateSchema.
        :type valid_from_date: str
        """
        if valid_from_date is None:
            raise ValueError("Invalid value for `valid_from_date`, must not be `None`")

        self._valid_from_date = valid_from_date
