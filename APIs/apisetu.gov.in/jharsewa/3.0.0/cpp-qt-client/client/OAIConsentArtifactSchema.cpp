/**
 * Jharsewa (eDistrict), Jharkhand
 * Jharkhand e-District is a comprehensive and web enabled service portal that acts as an electronic gateway into the Government's portfolio of services. Jharsewa provides Certificates  like Birth, Death, Income, Caste and Residence Certificates in Digilocker.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentArtifactSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentArtifactSchema::OAIConsentArtifactSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentArtifactSchema::OAIConsentArtifactSchema() {
    this->initializeModel();
}

OAIConsentArtifactSchema::~OAIConsentArtifactSchema() {}

void OAIConsentArtifactSchema::initializeModel() {

    m_consent_isSet = false;
    m_consent_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;
}

void OAIConsentArtifactSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentArtifactSchema::fromJsonObject(QJsonObject json) {

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("consent")]);
    m_consent_isSet = !json[QString("consent")].isNull() && m_consent_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;
}

QString OAIConsentArtifactSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentArtifactSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_consent.isSet()) {
        obj.insert(QString("consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    if (m_signature.isSet()) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    return obj;
}

OAIConsentArtifactSchema_consent OAIConsentArtifactSchema::getConsent() const {
    return m_consent;
}
void OAIConsentArtifactSchema::setConsent(const OAIConsentArtifactSchema_consent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIConsentArtifactSchema::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIConsentArtifactSchema::is_consent_Valid() const{
    return m_consent_isValid;
}

OAIConsentArtifactSchema_signature OAIConsentArtifactSchema::getSignature() const {
    return m_signature;
}
void OAIConsentArtifactSchema::setSignature(const OAIConsentArtifactSchema_signature &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIConsentArtifactSchema::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIConsentArtifactSchema::is_signature_Valid() const{
    return m_signature_isValid;
}

bool OAIConsentArtifactSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentArtifactSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_isValid && m_signature_isValid && true;
}

} // namespace OpenAPI
