/**
 * Jharsewa (eDistrict), Jharkhand
 * Jharkhand e-District is a comprehensive and web enabled service portal that acts as an electronic gateway into the Government's portfolio of services. Jharsewa provides Certificates  like Birth, Death, Income, Caste and Residence Certificates in Digilocker.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBtcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBtcer_request_certificateParameters::OAIBtcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBtcer_request_certificateParameters::OAIBtcer_request_certificateParameters() {
    this->initializeModel();
}

OAIBtcer_request_certificateParameters::~OAIBtcer_request_certificateParameters() {}

void OAIBtcer_request_certificateParameters::initializeModel() {

    m_ref_no_isSet = false;
    m_ref_no_isValid = false;

    m_token_no_isSet = false;
    m_token_no_isValid = false;
}

void OAIBtcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBtcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_ref_no_isValid = ::OpenAPI::fromJsonValue(m_ref_no, json[QString("RefNo")]);
    m_ref_no_isSet = !json[QString("RefNo")].isNull() && m_ref_no_isValid;

    m_token_no_isValid = ::OpenAPI::fromJsonValue(m_token_no, json[QString("TokenNo")]);
    m_token_no_isSet = !json[QString("TokenNo")].isNull() && m_token_no_isValid;
}

QString OAIBtcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBtcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_no_isSet) {
        obj.insert(QString("RefNo"), ::OpenAPI::toJsonValue(m_ref_no));
    }
    if (m_token_no_isSet) {
        obj.insert(QString("TokenNo"), ::OpenAPI::toJsonValue(m_token_no));
    }
    return obj;
}

QString OAIBtcer_request_certificateParameters::getRefNo() const {
    return m_ref_no;
}
void OAIBtcer_request_certificateParameters::setRefNo(const QString &ref_no) {
    m_ref_no = ref_no;
    m_ref_no_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_ref_no_Set() const{
    return m_ref_no_isSet;
}

bool OAIBtcer_request_certificateParameters::is_ref_no_Valid() const{
    return m_ref_no_isValid;
}

QString OAIBtcer_request_certificateParameters::getTokenNo() const {
    return m_token_no;
}
void OAIBtcer_request_certificateParameters::setTokenNo(const QString &token_no) {
    m_token_no = token_no;
    m_token_no_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_token_no_Set() const{
    return m_token_no_isSet;
}

bool OAIBtcer_request_certificateParameters::is_token_no_Valid() const{
    return m_token_no_isValid;
}

bool OAIBtcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBtcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ref_no_isValid && m_token_no_isValid && true;
}

} // namespace OpenAPI
