/**
 * Jharsewa (eDistrict), Jharkhand
 * Jharkhand e-District is a comprehensive and web enabled service portal that acts as an electronic gateway into the Government's portfolio of services. Jharsewa provides Certificates  like Birth, Death, Income, Caste and Residence Certificates in Digilocker.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Btcer400Response from '../model/Btcer400Response';
import Btcer401Response from '../model/Btcer401Response';
import Btcer404Response from '../model/Btcer404Response';
import Btcer500Response from '../model/Btcer500Response';
import Btcer502Response from '../model/Btcer502Response';
import Btcer503Response from '../model/Btcer503Response';
import Btcer504Response from '../model/Btcer504Response';
import BtcerRequest from '../model/BtcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the btcer operation.
     * @callback module:api/APIsApi~btcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Birth Certificate
     * API to verify Birth Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~btcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    btcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/btcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ctcer operation.
     * @callback module:api/APIsApi~ctcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Caste Certificate
     * API to verify Caste Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~ctcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ctcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ctcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dtcer operation.
     * @callback module:api/APIsApi~dtcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Death Certificate
     * API to verify Death Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~dtcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dtcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dtcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ewcer operation.
     * @callback module:api/APIsApi~ewcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Economically Weaker Section Certificate
     * API to verify Economically Weaker Section Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~ewcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ewcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ewcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rmcer operation.
     * @callback module:api/APIsApi~rmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marriage Certificate
     * API to verify Marriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~rmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rscer operation.
     * @callback module:api/APIsApi~rscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Residence Certificate
     * API to verify Residence Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~rscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
