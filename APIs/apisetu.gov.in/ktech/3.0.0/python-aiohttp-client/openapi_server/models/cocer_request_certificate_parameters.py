# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CocerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_type: str=None, company_name: str=None, reg_no: str=None, sector: str=None):
        """CocerRequestCertificateParameters - a model defined in OpenAPI

        :param cert_type: The cert_type of this CocerRequestCertificateParameters.
        :param company_name: The company_name of this CocerRequestCertificateParameters.
        :param reg_no: The reg_no of this CocerRequestCertificateParameters.
        :param sector: The sector of this CocerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cert_type': str,
            'company_name': str,
            'reg_no': str,
            'sector': str
        }

        self.attribute_map = {
            'cert_type': 'cert_type',
            'company_name': 'company_name',
            'reg_no': 'reg_no',
            'sector': 'sector'
        }

        self._cert_type = cert_type
        self._company_name = company_name
        self._reg_no = reg_no
        self._sector = sector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CocerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cocer_request_certificateParameters of this CocerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_type(self):
        """Gets the cert_type of this CocerRequestCertificateParameters.

        cert_type

        :return: The cert_type of this CocerRequestCertificateParameters.
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this CocerRequestCertificateParameters.

        cert_type

        :param cert_type: The cert_type of this CocerRequestCertificateParameters.
        :type cert_type: str
        """
        if cert_type is None:
            raise ValueError("Invalid value for `cert_type`, must not be `None`")

        self._cert_type = cert_type

    @property
    def company_name(self):
        """Gets the company_name of this CocerRequestCertificateParameters.

        company_name

        :return: The company_name of this CocerRequestCertificateParameters.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CocerRequestCertificateParameters.

        company_name

        :param company_name: The company_name of this CocerRequestCertificateParameters.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def reg_no(self):
        """Gets the reg_no of this CocerRequestCertificateParameters.

        reg_no

        :return: The reg_no of this CocerRequestCertificateParameters.
        :rtype: str
        """
        return self._reg_no

    @reg_no.setter
    def reg_no(self, reg_no):
        """Sets the reg_no of this CocerRequestCertificateParameters.

        reg_no

        :param reg_no: The reg_no of this CocerRequestCertificateParameters.
        :type reg_no: str
        """
        if reg_no is None:
            raise ValueError("Invalid value for `reg_no`, must not be `None`")

        self._reg_no = reg_no

    @property
    def sector(self):
        """Gets the sector of this CocerRequestCertificateParameters.

        sector

        :return: The sector of this CocerRequestCertificateParameters.
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this CocerRequestCertificateParameters.

        sector

        :param sector: The sector of this CocerRequestCertificateParameters.
        :type sector: str
        """
        if sector is None:
            raise ValueError("Invalid value for `sector`, must not be `None`")

        self._sector = sector
