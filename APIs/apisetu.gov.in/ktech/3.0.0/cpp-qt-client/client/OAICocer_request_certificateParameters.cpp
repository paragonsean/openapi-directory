/**
 * Department of IT and BT, Karnataka
 * eSigned certificates issued by Department of Information Technology, Biotechnology and Science &Technology (http://itbt.karnataka.gov.in/pages/home.aspx) can be downloaded through DigiLocker.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICocer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICocer_request_certificateParameters::OAICocer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICocer_request_certificateParameters::OAICocer_request_certificateParameters() {
    this->initializeModel();
}

OAICocer_request_certificateParameters::~OAICocer_request_certificateParameters() {}

void OAICocer_request_certificateParameters::initializeModel() {

    m_cert_type_isSet = false;
    m_cert_type_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_reg_no_isSet = false;
    m_reg_no_isValid = false;

    m_sector_isSet = false;
    m_sector_isValid = false;
}

void OAICocer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICocer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cert_type_isValid = ::OpenAPI::fromJsonValue(m_cert_type, json[QString("cert_type")]);
    m_cert_type_isSet = !json[QString("cert_type")].isNull() && m_cert_type_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_reg_no_isValid = ::OpenAPI::fromJsonValue(m_reg_no, json[QString("reg_no")]);
    m_reg_no_isSet = !json[QString("reg_no")].isNull() && m_reg_no_isValid;

    m_sector_isValid = ::OpenAPI::fromJsonValue(m_sector, json[QString("sector")]);
    m_sector_isSet = !json[QString("sector")].isNull() && m_sector_isValid;
}

QString OAICocer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICocer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_type_isSet) {
        obj.insert(QString("cert_type"), ::OpenAPI::toJsonValue(m_cert_type));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_reg_no_isSet) {
        obj.insert(QString("reg_no"), ::OpenAPI::toJsonValue(m_reg_no));
    }
    if (m_sector_isSet) {
        obj.insert(QString("sector"), ::OpenAPI::toJsonValue(m_sector));
    }
    return obj;
}

QString OAICocer_request_certificateParameters::getCertType() const {
    return m_cert_type;
}
void OAICocer_request_certificateParameters::setCertType(const QString &cert_type) {
    m_cert_type = cert_type;
    m_cert_type_isSet = true;
}

bool OAICocer_request_certificateParameters::is_cert_type_Set() const{
    return m_cert_type_isSet;
}

bool OAICocer_request_certificateParameters::is_cert_type_Valid() const{
    return m_cert_type_isValid;
}

QString OAICocer_request_certificateParameters::getCompanyName() const {
    return m_company_name;
}
void OAICocer_request_certificateParameters::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAICocer_request_certificateParameters::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAICocer_request_certificateParameters::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAICocer_request_certificateParameters::getRegNo() const {
    return m_reg_no;
}
void OAICocer_request_certificateParameters::setRegNo(const QString &reg_no) {
    m_reg_no = reg_no;
    m_reg_no_isSet = true;
}

bool OAICocer_request_certificateParameters::is_reg_no_Set() const{
    return m_reg_no_isSet;
}

bool OAICocer_request_certificateParameters::is_reg_no_Valid() const{
    return m_reg_no_isValid;
}

QString OAICocer_request_certificateParameters::getSector() const {
    return m_sector;
}
void OAICocer_request_certificateParameters::setSector(const QString &sector) {
    m_sector = sector;
    m_sector_isSet = true;
}

bool OAICocer_request_certificateParameters::is_sector_Set() const{
    return m_sector_isSet;
}

bool OAICocer_request_certificateParameters::is_sector_Valid() const{
    return m_sector_isValid;
}

bool OAICocer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICocer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cert_type_isValid && m_company_name_isValid && m_reg_no_isValid && m_sector_isValid && true;
}

} // namespace OpenAPI
