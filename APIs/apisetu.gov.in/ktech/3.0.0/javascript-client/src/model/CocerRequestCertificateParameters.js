/**
 * Department of IT and BT, Karnataka
 * eSigned certificates issued by Department of Information Technology, Biotechnology and Science &Technology (http://itbt.karnataka.gov.in/pages/home.aspx) can be downloaded through DigiLocker.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CocerRequestCertificateParameters model module.
 * @module model/CocerRequestCertificateParameters
 * @version 3.0.0
 */
class CocerRequestCertificateParameters {
    /**
     * Constructs a new <code>CocerRequestCertificateParameters</code>.
     * @alias module:model/CocerRequestCertificateParameters
     * @param certType {String} cert_type
     * @param companyName {String} company_name
     * @param regNo {String} reg_no
     * @param sector {String} sector
     */
    constructor(certType, companyName, regNo, sector) { 
        
        CocerRequestCertificateParameters.initialize(this, certType, companyName, regNo, sector);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certType, companyName, regNo, sector) { 
        obj['cert_type'] = certType;
        obj['company_name'] = companyName;
        obj['reg_no'] = regNo;
        obj['sector'] = sector;
    }

    /**
     * Constructs a <code>CocerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CocerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/CocerRequestCertificateParameters} The populated <code>CocerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CocerRequestCertificateParameters();

            if (data.hasOwnProperty('cert_type')) {
                obj['cert_type'] = ApiClient.convertToType(data['cert_type'], 'String');
            }
            if (data.hasOwnProperty('company_name')) {
                obj['company_name'] = ApiClient.convertToType(data['company_name'], 'String');
            }
            if (data.hasOwnProperty('reg_no')) {
                obj['reg_no'] = ApiClient.convertToType(data['reg_no'], 'String');
            }
            if (data.hasOwnProperty('sector')) {
                obj['sector'] = ApiClient.convertToType(data['sector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CocerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CocerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CocerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cert_type'] && !(typeof data['cert_type'] === 'string' || data['cert_type'] instanceof String)) {
            throw new Error("Expected the field `cert_type` to be a primitive type in the JSON string but got " + data['cert_type']);
        }
        // ensure the json data is a string
        if (data['company_name'] && !(typeof data['company_name'] === 'string' || data['company_name'] instanceof String)) {
            throw new Error("Expected the field `company_name` to be a primitive type in the JSON string but got " + data['company_name']);
        }
        // ensure the json data is a string
        if (data['reg_no'] && !(typeof data['reg_no'] === 'string' || data['reg_no'] instanceof String)) {
            throw new Error("Expected the field `reg_no` to be a primitive type in the JSON string but got " + data['reg_no']);
        }
        // ensure the json data is a string
        if (data['sector'] && !(typeof data['sector'] === 'string' || data['sector'] instanceof String)) {
            throw new Error("Expected the field `sector` to be a primitive type in the JSON string but got " + data['sector']);
        }

        return true;
    }


}

CocerRequestCertificateParameters.RequiredProperties = ["cert_type", "company_name", "reg_no", "sector"];

/**
 * cert_type
 * @member {String} cert_type
 */
CocerRequestCertificateParameters.prototype['cert_type'] = undefined;

/**
 * company_name
 * @member {String} company_name
 */
CocerRequestCertificateParameters.prototype['company_name'] = undefined;

/**
 * reg_no
 * @member {String} reg_no
 */
CocerRequestCertificateParameters.prototype['reg_no'] = undefined;

/**
 * sector
 * @member {String} sector
 */
CocerRequestCertificateParameters.prototype['sector'] = undefined;






export default CocerRequestCertificateParameters;

