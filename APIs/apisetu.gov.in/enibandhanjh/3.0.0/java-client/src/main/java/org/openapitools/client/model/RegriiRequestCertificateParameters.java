/*
 * Revenue, Registration & Land Reforms Department, Jharkhand
 * Department of Revenue, Registration & Land Reforms, Jharkhand (http://www.jharkhand.gov.in/revenue) is issuing Registration Certificate of Deeds into citizens' DigiLocker accounts from 5th May 2017 onwards.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegriiRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:36:38.894096-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegriiRequestCertificateParameters {
  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_REGNO = "regno";
  @SerializedName(SERIALIZED_NAME_REGNO)
  private String regno;

  public static final String SERIALIZED_NAME_SRO_ID = "sro_id";
  @SerializedName(SERIALIZED_NAME_SRO_ID)
  private String sroId;

  public static final String SERIALIZED_NAME_YR = "yr";
  @SerializedName(SERIALIZED_NAME_YR)
  private String yr;

  public RegriiRequestCertificateParameters() {
  }

  public RegriiRequestCertificateParameters fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public RegriiRequestCertificateParameters regno(String regno) {
    this.regno = regno;
    return this;
  }

  /**
   * Regitration No
   * @return regno
   */
  @javax.annotation.Nonnull
  public String getRegno() {
    return regno;
  }

  public void setRegno(String regno) {
    this.regno = regno;
  }


  public RegriiRequestCertificateParameters sroId(String sroId) {
    this.sroId = sroId;
    return this;
  }

  /**
   * SRO Name
   * @return sroId
   */
  @javax.annotation.Nonnull
  public String getSroId() {
    return sroId;
  }

  public void setSroId(String sroId) {
    this.sroId = sroId;
  }


  public RegriiRequestCertificateParameters yr(String yr) {
    this.yr = yr;
    return this;
  }

  /**
   * Year
   * @return yr
   */
  @javax.annotation.Nonnull
  public String getYr() {
    return yr;
  }

  public void setYr(String yr) {
    this.yr = yr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegriiRequestCertificateParameters regriiRequestCertificateParameters = (RegriiRequestCertificateParameters) o;
    return Objects.equals(this.fullName, regriiRequestCertificateParameters.fullName) &&
        Objects.equals(this.regno, regriiRequestCertificateParameters.regno) &&
        Objects.equals(this.sroId, regriiRequestCertificateParameters.sroId) &&
        Objects.equals(this.yr, regriiRequestCertificateParameters.yr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullName, regno, sroId, yr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegriiRequestCertificateParameters {\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    regno: ").append(toIndentedString(regno)).append("\n");
    sb.append("    sroId: ").append(toIndentedString(sroId)).append("\n");
    sb.append("    yr: ").append(toIndentedString(yr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FullName");
    openapiFields.add("regno");
    openapiFields.add("sro_id");
    openapiFields.add("yr");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("regno");
    openapiRequiredFields.add("sro_id");
    openapiRequiredFields.add("yr");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegriiRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegriiRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegriiRequestCertificateParameters is not found in the empty JSON string", RegriiRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegriiRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegriiRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegriiRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("regno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regno").toString()));
      }
      if (!jsonObj.get("sro_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sro_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sro_id").toString()));
      }
      if (!jsonObj.get("yr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yr").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegriiRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegriiRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegriiRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegriiRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<RegriiRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, RegriiRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegriiRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegriiRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegriiRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to RegriiRequestCertificateParameters
   */
  public static RegriiRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegriiRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of RegriiRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

