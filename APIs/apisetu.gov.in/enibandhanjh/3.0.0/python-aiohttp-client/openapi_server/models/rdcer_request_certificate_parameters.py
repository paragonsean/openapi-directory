# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RdcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, uid: str=None, final_doc_reg_no: str=None):
        """RdcerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this RdcerRequestCertificateParameters.
        :param uid: The uid of this RdcerRequestCertificateParameters.
        :param final_doc_reg_no: The final_doc_reg_no of this RdcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'uid': str,
            'final_doc_reg_no': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'uid': 'UID',
            'final_doc_reg_no': 'final_doc_reg_no'
        }

        self._full_name = full_name
        self._uid = uid
        self._final_doc_reg_no = final_doc_reg_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RdcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rdcer_request_certificateParameters of this RdcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this RdcerRequestCertificateParameters.

        Full name

        :return: The full_name of this RdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this RdcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this RdcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def uid(self):
        """Gets the uid of this RdcerRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this RdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this RdcerRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this RdcerRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def final_doc_reg_no(self):
        """Gets the final_doc_reg_no of this RdcerRequestCertificateParameters.

        Registration No.

        :return: The final_doc_reg_no of this RdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._final_doc_reg_no

    @final_doc_reg_no.setter
    def final_doc_reg_no(self, final_doc_reg_no):
        """Sets the final_doc_reg_no of this RdcerRequestCertificateParameters.

        Registration No.

        :param final_doc_reg_no: The final_doc_reg_no of this RdcerRequestCertificateParameters.
        :type final_doc_reg_no: str
        """
        if final_doc_reg_no is None:
            raise ValueError("Invalid value for `final_doc_reg_no`, must not be `None`")

        self._final_doc_reg_no = final_doc_reg_no
