# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegriiRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, regno: str=None, sro_id: str=None, yr: str=None):
        """RegriiRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this RegriiRequestCertificateParameters.
        :param regno: The regno of this RegriiRequestCertificateParameters.
        :param sro_id: The sro_id of this RegriiRequestCertificateParameters.
        :param yr: The yr of this RegriiRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'regno': str,
            'sro_id': str,
            'yr': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'regno': 'regno',
            'sro_id': 'sro_id',
            'yr': 'yr'
        }

        self._full_name = full_name
        self._regno = regno
        self._sro_id = sro_id
        self._yr = yr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegriiRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The regrii_request_certificateParameters of this RegriiRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this RegriiRequestCertificateParameters.

        Full name

        :return: The full_name of this RegriiRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this RegriiRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this RegriiRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def regno(self):
        """Gets the regno of this RegriiRequestCertificateParameters.

        Regitration No

        :return: The regno of this RegriiRequestCertificateParameters.
        :rtype: str
        """
        return self._regno

    @regno.setter
    def regno(self, regno):
        """Sets the regno of this RegriiRequestCertificateParameters.

        Regitration No

        :param regno: The regno of this RegriiRequestCertificateParameters.
        :type regno: str
        """
        if regno is None:
            raise ValueError("Invalid value for `regno`, must not be `None`")

        self._regno = regno

    @property
    def sro_id(self):
        """Gets the sro_id of this RegriiRequestCertificateParameters.

        SRO Name

        :return: The sro_id of this RegriiRequestCertificateParameters.
        :rtype: str
        """
        return self._sro_id

    @sro_id.setter
    def sro_id(self, sro_id):
        """Sets the sro_id of this RegriiRequestCertificateParameters.

        SRO Name

        :param sro_id: The sro_id of this RegriiRequestCertificateParameters.
        :type sro_id: str
        """
        if sro_id is None:
            raise ValueError("Invalid value for `sro_id`, must not be `None`")

        self._sro_id = sro_id

    @property
    def yr(self):
        """Gets the yr of this RegriiRequestCertificateParameters.

        Year

        :return: The yr of this RegriiRequestCertificateParameters.
        :rtype: str
        """
        return self._yr

    @yr.setter
    def yr(self, yr):
        """Sets the yr of this RegriiRequestCertificateParameters.

        Year

        :param yr: The yr of this RegriiRequestCertificateParameters.
        :type yr: str
        """
        if yr is None:
            raise ValueError("Invalid value for `yr`, must not be `None`")

        self._yr = yr
