# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabrpRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, reportdate: str=None, uhid: str=None):
        """LabrpRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this LabrpRequestCertificateParameters.
        :param reportdate: The reportdate of this LabrpRequestCertificateParameters.
        :param uhid: The uhid of this LabrpRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'reportdate': str,
            'uhid': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'reportdate': 'reportdate',
            'uhid': 'uhid'
        }

        self._full_name = full_name
        self._reportdate = reportdate
        self._uhid = uhid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabrpRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The labrp_request_certificateParameters of this LabrpRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this LabrpRequestCertificateParameters.

        Full name

        :return: The full_name of this LabrpRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this LabrpRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this LabrpRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def reportdate(self):
        """Gets the reportdate of this LabrpRequestCertificateParameters.

        Report Date in DDMMYYYY format

        :return: The reportdate of this LabrpRequestCertificateParameters.
        :rtype: str
        """
        return self._reportdate

    @reportdate.setter
    def reportdate(self, reportdate):
        """Sets the reportdate of this LabrpRequestCertificateParameters.

        Report Date in DDMMYYYY format

        :param reportdate: The reportdate of this LabrpRequestCertificateParameters.
        :type reportdate: str
        """
        if reportdate is None:
            raise ValueError("Invalid value for `reportdate`, must not be `None`")

        self._reportdate = reportdate

    @property
    def uhid(self):
        """Gets the uhid of this LabrpRequestCertificateParameters.

        UHID/Health ID

        :return: The uhid of this LabrpRequestCertificateParameters.
        :rtype: str
        """
        return self._uhid

    @uhid.setter
    def uhid(self, uhid):
        """Sets the uhid of this LabrpRequestCertificateParameters.

        UHID/Health ID

        :param uhid: The uhid of this LabrpRequestCertificateParameters.
        :type uhid: str
        """
        if uhid is None:
            raise ValueError("Invalid value for `uhid`, must not be `None`")

        self._uhid = uhid
