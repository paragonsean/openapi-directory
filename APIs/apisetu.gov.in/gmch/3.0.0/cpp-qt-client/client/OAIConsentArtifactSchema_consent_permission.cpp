/**
 * GMCH, Chandigarh
 * Government Medical College and Hospital (GMCH), Chandigarh provides patient's clinical laboratory reports to DigiLocker.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentArtifactSchema_consent_permission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentArtifactSchema_consent_permission::OAIConsentArtifactSchema_consent_permission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentArtifactSchema_consent_permission::OAIConsentArtifactSchema_consent_permission() {
    this->initializeModel();
}

OAIConsentArtifactSchema_consent_permission::~OAIConsentArtifactSchema_consent_permission() {}

void OAIConsentArtifactSchema_consent_permission::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;
}

void OAIConsentArtifactSchema_consent_permission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentArtifactSchema_consent_permission::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;
}

QString OAIConsentArtifactSchema_consent_permission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentArtifactSchema_consent_permission::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    return obj;
}

QString OAIConsentArtifactSchema_consent_permission::getAccess() const {
    return m_access;
}
void OAIConsentArtifactSchema_consent_permission::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIConsentArtifactSchema_consent_permission::is_access_Set() const{
    return m_access_isSet;
}

bool OAIConsentArtifactSchema_consent_permission::is_access_Valid() const{
    return m_access_isValid;
}

OAIConsentArtifactSchema_consent_permission_dateRange OAIConsentArtifactSchema_consent_permission::getDateRange() const {
    return m_date_range;
}
void OAIConsentArtifactSchema_consent_permission::setDateRange(const OAIConsentArtifactSchema_consent_permission_dateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIConsentArtifactSchema_consent_permission::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIConsentArtifactSchema_consent_permission::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAIConsentArtifactSchema_consent_permission_frequency OAIConsentArtifactSchema_consent_permission::getFrequency() const {
    return m_frequency;
}
void OAIConsentArtifactSchema_consent_permission::setFrequency(const OAIConsentArtifactSchema_consent_permission_frequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIConsentArtifactSchema_consent_permission::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIConsentArtifactSchema_consent_permission::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAIConsentArtifactSchema_consent_permission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentArtifactSchema_consent_permission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_isValid && m_date_range_isValid && m_frequency_isValid && true;
}

} // namespace OpenAPI
