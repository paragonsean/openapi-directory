# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DgmstRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, rroll: str=None, sem: str=None):
        """DgmstRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this DgmstRequestCertificateParameters.
        :param rroll: The rroll of this DgmstRequestCertificateParameters.
        :param sem: The sem of this DgmstRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'rroll': str,
            'sem': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'rroll': 'RROLL',
            'sem': 'SEM'
        }

        self._full_name = full_name
        self._rroll = rroll
        self._sem = sem

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DgmstRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dgmst_request_certificateParameters of this DgmstRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this DgmstRequestCertificateParameters.

        Full name

        :return: The full_name of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DgmstRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this DgmstRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def rroll(self):
        """Gets the rroll of this DgmstRequestCertificateParameters.

        Student Roll Number

        :return: The rroll of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._rroll

    @rroll.setter
    def rroll(self, rroll):
        """Sets the rroll of this DgmstRequestCertificateParameters.

        Student Roll Number

        :param rroll: The rroll of this DgmstRequestCertificateParameters.
        :type rroll: str
        """
        if rroll is None:
            raise ValueError("Invalid value for `rroll`, must not be `None`")

        self._rroll = rroll

    @property
    def sem(self):
        """Gets the sem of this DgmstRequestCertificateParameters.

        Semester / Year

        :return: The sem of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._sem

    @sem.setter
    def sem(self, sem):
        """Sets the sem of this DgmstRequestCertificateParameters.

        Semester / Year

        :param sem: The sem of this DgmstRequestCertificateParameters.
        :type sem: str
        """
        if sem is None:
            raise ValueError("Invalid value for `sem`, must not be `None`")

        self._sem = sem
