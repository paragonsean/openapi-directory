/**
 * Transport Department, Arunachal Pradesh
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle() {
    this->initializeModel();
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::~OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle() {}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::initializeModel() {

    m_chasis_no_isSet = false;
    m_chasis_no_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_cubic_capacity_isSet = false;
    m_cubic_capacity_isValid = false;

    m_cylinder_isSet = false;
    m_cylinder_isValid = false;

    m_engine_no_isSet = false;
    m_engine_no_isValid = false;

    m_fit_till_isSet = false;
    m_fit_till_isValid = false;

    m_fuel_desc_isSet = false;
    m_fuel_desc_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_mfg_date_isSet = false;
    m_mfg_date_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_seat_capacity_isSet = false;
    m_seat_capacity_isValid = false;

    m_sleeper_capacity_isSet = false;
    m_sleeper_capacity_isValid = false;

    m_standing_capacity_isSet = false;
    m_standing_capacity_isValid = false;

    m_unladen_weight_isSet = false;
    m_unladen_weight_isValid = false;

    m_wheelbase_isSet = false;
    m_wheelbase_isValid = false;
}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::fromJsonObject(QJsonObject json) {

    m_chasis_no_isValid = ::OpenAPI::fromJsonValue(m_chasis_no, json[QString("chasisNo")]);
    m_chasis_no_isSet = !json[QString("chasisNo")].isNull() && m_chasis_no_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_cubic_capacity_isValid = ::OpenAPI::fromJsonValue(m_cubic_capacity, json[QString("cubicCapacity")]);
    m_cubic_capacity_isSet = !json[QString("cubicCapacity")].isNull() && m_cubic_capacity_isValid;

    m_cylinder_isValid = ::OpenAPI::fromJsonValue(m_cylinder, json[QString("cylinder")]);
    m_cylinder_isSet = !json[QString("cylinder")].isNull() && m_cylinder_isValid;

    m_engine_no_isValid = ::OpenAPI::fromJsonValue(m_engine_no, json[QString("engineNo")]);
    m_engine_no_isSet = !json[QString("engineNo")].isNull() && m_engine_no_isValid;

    m_fit_till_isValid = ::OpenAPI::fromJsonValue(m_fit_till, json[QString("fitTill")]);
    m_fit_till_isSet = !json[QString("fitTill")].isNull() && m_fit_till_isValid;

    m_fuel_desc_isValid = ::OpenAPI::fromJsonValue(m_fuel_desc, json[QString("fuelDesc")]);
    m_fuel_desc_isSet = !json[QString("fuelDesc")].isNull() && m_fuel_desc_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_mfg_date_isValid = ::OpenAPI::fromJsonValue(m_mfg_date, json[QString("mfgDate")]);
    m_mfg_date_isSet = !json[QString("mfgDate")].isNull() && m_mfg_date_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_seat_capacity_isValid = ::OpenAPI::fromJsonValue(m_seat_capacity, json[QString("seatCapacity")]);
    m_seat_capacity_isSet = !json[QString("seatCapacity")].isNull() && m_seat_capacity_isValid;

    m_sleeper_capacity_isValid = ::OpenAPI::fromJsonValue(m_sleeper_capacity, json[QString("sleeperCapacity")]);
    m_sleeper_capacity_isSet = !json[QString("sleeperCapacity")].isNull() && m_sleeper_capacity_isValid;

    m_standing_capacity_isValid = ::OpenAPI::fromJsonValue(m_standing_capacity, json[QString("standingCapacity")]);
    m_standing_capacity_isSet = !json[QString("standingCapacity")].isNull() && m_standing_capacity_isValid;

    m_unladen_weight_isValid = ::OpenAPI::fromJsonValue(m_unladen_weight, json[QString("unladenWeight")]);
    m_unladen_weight_isSet = !json[QString("unladenWeight")].isNull() && m_unladen_weight_isValid;

    m_wheelbase_isValid = ::OpenAPI::fromJsonValue(m_wheelbase, json[QString("wheelbase")]);
    m_wheelbase_isSet = !json[QString("wheelbase")].isNull() && m_wheelbase_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::asJsonObject() const {
    QJsonObject obj;
    if (m_chasis_no_isSet) {
        obj.insert(QString("chasisNo"), ::OpenAPI::toJsonValue(m_chasis_no));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_cubic_capacity_isSet) {
        obj.insert(QString("cubicCapacity"), ::OpenAPI::toJsonValue(m_cubic_capacity));
    }
    if (m_cylinder_isSet) {
        obj.insert(QString("cylinder"), ::OpenAPI::toJsonValue(m_cylinder));
    }
    if (m_engine_no_isSet) {
        obj.insert(QString("engineNo"), ::OpenAPI::toJsonValue(m_engine_no));
    }
    if (m_fit_till_isSet) {
        obj.insert(QString("fitTill"), ::OpenAPI::toJsonValue(m_fit_till));
    }
    if (m_fuel_desc_isSet) {
        obj.insert(QString("fuelDesc"), ::OpenAPI::toJsonValue(m_fuel_desc));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_mfg_date_isSet) {
        obj.insert(QString("mfgDate"), ::OpenAPI::toJsonValue(m_mfg_date));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_seat_capacity_isSet) {
        obj.insert(QString("seatCapacity"), ::OpenAPI::toJsonValue(m_seat_capacity));
    }
    if (m_sleeper_capacity_isSet) {
        obj.insert(QString("sleeperCapacity"), ::OpenAPI::toJsonValue(m_sleeper_capacity));
    }
    if (m_standing_capacity_isSet) {
        obj.insert(QString("standingCapacity"), ::OpenAPI::toJsonValue(m_standing_capacity));
    }
    if (m_unladen_weight_isSet) {
        obj.insert(QString("unladenWeight"), ::OpenAPI::toJsonValue(m_unladen_weight));
    }
    if (m_wheelbase_isSet) {
        obj.insert(QString("wheelbase"), ::OpenAPI::toJsonValue(m_wheelbase));
    }
    return obj;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getChasisNo() const {
    return m_chasis_no;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setChasisNo(const QString &chasis_no) {
    m_chasis_no = chasis_no;
    m_chasis_no_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_chasis_no_Set() const{
    return m_chasis_no_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_chasis_no_Valid() const{
    return m_chasis_no_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getRClass() const {
    return m_r_class;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setRClass(const OAIObject &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getColor() const {
    return m_color;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_color_Set() const{
    return m_color_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_color_Valid() const{
    return m_color_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getCubicCapacity() const {
    return m_cubic_capacity;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setCubicCapacity(const OAIObject &cubic_capacity) {
    m_cubic_capacity = cubic_capacity;
    m_cubic_capacity_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_cubic_capacity_Set() const{
    return m_cubic_capacity_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_cubic_capacity_Valid() const{
    return m_cubic_capacity_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getCylinder() const {
    return m_cylinder;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setCylinder(const OAIObject &cylinder) {
    m_cylinder = cylinder;
    m_cylinder_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_cylinder_Set() const{
    return m_cylinder_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_cylinder_Valid() const{
    return m_cylinder_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getEngineNo() const {
    return m_engine_no;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setEngineNo(const QString &engine_no) {
    m_engine_no = engine_no;
    m_engine_no_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_engine_no_Set() const{
    return m_engine_no_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_engine_no_Valid() const{
    return m_engine_no_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getFitTill() const {
    return m_fit_till;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setFitTill(const OAIObject &fit_till) {
    m_fit_till = fit_till;
    m_fit_till_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_fit_till_Set() const{
    return m_fit_till_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_fit_till_Valid() const{
    return m_fit_till_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getFuelDesc() const {
    return m_fuel_desc;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setFuelDesc(const OAIObject &fuel_desc) {
    m_fuel_desc = fuel_desc;
    m_fuel_desc_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_fuel_desc_Set() const{
    return m_fuel_desc_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_fuel_desc_Valid() const{
    return m_fuel_desc_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getMake() const {
    return m_make;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setMake(const OAIObject &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_make_Set() const{
    return m_make_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_make_Valid() const{
    return m_make_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getMfgDate() const {
    return m_mfg_date;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setMfgDate(const OAIObject &mfg_date) {
    m_mfg_date = mfg_date;
    m_mfg_date_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_mfg_date_Set() const{
    return m_mfg_date_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_mfg_date_Valid() const{
    return m_mfg_date_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getModel() const {
    return m_model;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_model_Set() const{
    return m_model_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getSeatCapacity() const {
    return m_seat_capacity;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setSeatCapacity(const QString &seat_capacity) {
    m_seat_capacity = seat_capacity;
    m_seat_capacity_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_seat_capacity_Set() const{
    return m_seat_capacity_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_seat_capacity_Valid() const{
    return m_seat_capacity_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getSleeperCapacity() const {
    return m_sleeper_capacity;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setSleeperCapacity(const QString &sleeper_capacity) {
    m_sleeper_capacity = sleeper_capacity;
    m_sleeper_capacity_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_sleeper_capacity_Set() const{
    return m_sleeper_capacity_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_sleeper_capacity_Valid() const{
    return m_sleeper_capacity_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getStandingCapacity() const {
    return m_standing_capacity;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setStandingCapacity(const OAIObject &standing_capacity) {
    m_standing_capacity = standing_capacity;
    m_standing_capacity_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_standing_capacity_Set() const{
    return m_standing_capacity_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_standing_capacity_Valid() const{
    return m_standing_capacity_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getUnladenWeight() const {
    return m_unladen_weight;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setUnladenWeight(const QString &unladen_weight) {
    m_unladen_weight = unladen_weight;
    m_unladen_weight_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_unladen_weight_Set() const{
    return m_unladen_weight_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_unladen_weight_Valid() const{
    return m_unladen_weight_isValid;
}

OAIObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::getWheelbase() const {
    return m_wheelbase;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::setWheelbase(const OAIObject &wheelbase) {
    m_wheelbase = wheelbase;
    m_wheelbase_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_wheelbase_Set() const{
    return m_wheelbase_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::is_wheelbase_Valid() const{
    return m_wheelbase_isValid;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chasis_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cubic_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cylinder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fit_till_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuel_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfg_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seat_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sleeper_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standing_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unladen_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wheelbase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
