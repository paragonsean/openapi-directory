/**
 * Transport Department, Arunachal Pradesh
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentArtifactSchemaConsent from './ConsentArtifactSchemaConsent';
import ConsentArtifactSchemaSignature from './ConsentArtifactSchemaSignature';

/**
 * The ConsentArtifactSchema model module.
 * @module model/ConsentArtifactSchema
 * @version 3.0.0
 */
class ConsentArtifactSchema {
    /**
     * Constructs a new <code>ConsentArtifactSchema</code>.
     * @alias module:model/ConsentArtifactSchema
     * @param consent {module:model/ConsentArtifactSchemaConsent} 
     * @param signature {module:model/ConsentArtifactSchemaSignature} 
     */
    constructor(consent, signature) { 
        
        ConsentArtifactSchema.initialize(this, consent, signature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consent, signature) { 
        obj['consent'] = consent;
        obj['signature'] = signature;
    }

    /**
     * Constructs a <code>ConsentArtifactSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentArtifactSchema} obj Optional instance to populate.
     * @return {module:model/ConsentArtifactSchema} The populated <code>ConsentArtifactSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentArtifactSchema();

            if (data.hasOwnProperty('consent')) {
                obj['consent'] = ConsentArtifactSchemaConsent.constructFromObject(data['consent']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ConsentArtifactSchemaSignature.constructFromObject(data['signature']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentArtifactSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentArtifactSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConsentArtifactSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `consent`
        if (data['consent']) { // data not null
          ConsentArtifactSchemaConsent.validateJSON(data['consent']);
        }
        // validate the optional field `signature`
        if (data['signature']) { // data not null
          ConsentArtifactSchemaSignature.validateJSON(data['signature']);
        }

        return true;
    }


}

ConsentArtifactSchema.RequiredProperties = ["consent", "signature"];

/**
 * @member {module:model/ConsentArtifactSchemaConsent} consent
 */
ConsentArtifactSchema.prototype['consent'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaSignature} signature
 */
ConsentArtifactSchema.prototype['signature'] = undefined;






export default ConsentArtifactSchema;

