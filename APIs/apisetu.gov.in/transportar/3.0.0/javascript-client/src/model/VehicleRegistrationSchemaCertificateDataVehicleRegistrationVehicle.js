/**
 * Transport Department, Arunachal Pradesh
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle model module.
 * @module model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle
 * @version 3.0.0
 */
class VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle {
    /**
     * Constructs a new <code>VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle</code>.
     * @alias module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle
     */
    constructor() { 
        
        VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle} obj Optional instance to populate.
     * @return {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle} The populated <code>VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle();

            if (data.hasOwnProperty('chasisNo')) {
                obj['chasisNo'] = ApiClient.convertToType(data['chasisNo'], 'String');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], Object);
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('cubicCapacity')) {
                obj['cubicCapacity'] = ApiClient.convertToType(data['cubicCapacity'], Object);
            }
            if (data.hasOwnProperty('cylinder')) {
                obj['cylinder'] = ApiClient.convertToType(data['cylinder'], Object);
            }
            if (data.hasOwnProperty('engineNo')) {
                obj['engineNo'] = ApiClient.convertToType(data['engineNo'], 'String');
            }
            if (data.hasOwnProperty('fitTill')) {
                obj['fitTill'] = ApiClient.convertToType(data['fitTill'], Object);
            }
            if (data.hasOwnProperty('fuelDesc')) {
                obj['fuelDesc'] = ApiClient.convertToType(data['fuelDesc'], Object);
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], Object);
            }
            if (data.hasOwnProperty('mfgDate')) {
                obj['mfgDate'] = ApiClient.convertToType(data['mfgDate'], Object);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('seatCapacity')) {
                obj['seatCapacity'] = ApiClient.convertToType(data['seatCapacity'], 'String');
            }
            if (data.hasOwnProperty('sleeperCapacity')) {
                obj['sleeperCapacity'] = ApiClient.convertToType(data['sleeperCapacity'], 'String');
            }
            if (data.hasOwnProperty('standingCapacity')) {
                obj['standingCapacity'] = ApiClient.convertToType(data['standingCapacity'], Object);
            }
            if (data.hasOwnProperty('unladenWeight')) {
                obj['unladenWeight'] = ApiClient.convertToType(data['unladenWeight'], 'String');
            }
            if (data.hasOwnProperty('wheelbase')) {
                obj['wheelbase'] = ApiClient.convertToType(data['wheelbase'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['chasisNo'] && !(typeof data['chasisNo'] === 'string' || data['chasisNo'] instanceof String)) {
            throw new Error("Expected the field `chasisNo` to be a primitive type in the JSON string but got " + data['chasisNo']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['engineNo'] && !(typeof data['engineNo'] === 'string' || data['engineNo'] instanceof String)) {
            throw new Error("Expected the field `engineNo` to be a primitive type in the JSON string but got " + data['engineNo']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['seatCapacity'] && !(typeof data['seatCapacity'] === 'string' || data['seatCapacity'] instanceof String)) {
            throw new Error("Expected the field `seatCapacity` to be a primitive type in the JSON string but got " + data['seatCapacity']);
        }
        // ensure the json data is a string
        if (data['sleeperCapacity'] && !(typeof data['sleeperCapacity'] === 'string' || data['sleeperCapacity'] instanceof String)) {
            throw new Error("Expected the field `sleeperCapacity` to be a primitive type in the JSON string but got " + data['sleeperCapacity']);
        }
        // ensure the json data is a string
        if (data['unladenWeight'] && !(typeof data['unladenWeight'] === 'string' || data['unladenWeight'] instanceof String)) {
            throw new Error("Expected the field `unladenWeight` to be a primitive type in the JSON string but got " + data['unladenWeight']);
        }

        return true;
    }


}



/**
 * @member {String} chasisNo
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['chasisNo'] = undefined;

/**
 * @member {Object} class
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['class'] = undefined;

/**
 * @member {String} color
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['color'] = undefined;

/**
 * @member {Object} cubicCapacity
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['cubicCapacity'] = undefined;

/**
 * @member {Object} cylinder
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['cylinder'] = undefined;

/**
 * @member {String} engineNo
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['engineNo'] = undefined;

/**
 * @member {Object} fitTill
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['fitTill'] = undefined;

/**
 * @member {Object} fuelDesc
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['fuelDesc'] = undefined;

/**
 * @member {Object} make
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['make'] = undefined;

/**
 * @member {Object} mfgDate
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['mfgDate'] = undefined;

/**
 * @member {String} model
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['model'] = undefined;

/**
 * @member {String} seatCapacity
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['seatCapacity'] = undefined;

/**
 * @member {String} sleeperCapacity
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['sleeperCapacity'] = undefined;

/**
 * @member {Object} standingCapacity
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['standingCapacity'] = undefined;

/**
 * @member {String} unladenWeight
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['unladenWeight'] = undefined;

/**
 * @member {Object} wheelbase
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.prototype['wheelbase'] = undefined;






export default VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle;

