/**
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImporter_Exporter_Code_Verification_API_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImporter_Exporter_Code_Verification_API_200_response::OAIImporter_Exporter_Code_Verification_API_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImporter_Exporter_Code_Verification_API_200_response::OAIImporter_Exporter_Code_Verification_API_200_response() {
    this->initializeModel();
}

OAIImporter_Exporter_Code_Verification_API_200_response::~OAIImporter_Exporter_Code_Verification_API_200_response() {}

void OAIImporter_Exporter_Code_Verification_API_200_response::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_data_as_on_isSet = false;
    m_data_as_on_isValid = false;

    m_directors_isSet = false;
    m_directors_isValid = false;

    m_entity_name_isSet = false;
    m_entity_name_isValid = false;

    m_exporter_type_isSet = false;
    m_exporter_type_isValid = false;

    m_iec_isSet = false;
    m_iec_isValid = false;

    m_iec_issue_date_isSet = false;
    m_iec_issue_date_isValid = false;

    m_iec_modification_date_isSet = false;
    m_iec_modification_date_isValid = false;

    m_iec_status_isSet = false;
    m_iec_status_isValid = false;

    m_nature_of_concern_isSet = false;
    m_nature_of_concern_isValid = false;

    m_pan_isSet = false;
    m_pan_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIImporter_Exporter_Code_Verification_API_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImporter_Exporter_Code_Verification_API_200_response::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("addressLine1")]);
    m_address_line1_isSet = !json[QString("addressLine1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("addressLine2")]);
    m_address_line2_isSet = !json[QString("addressLine2")].isNull() && m_address_line2_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_data_as_on_isValid = ::OpenAPI::fromJsonValue(m_data_as_on, json[QString("dataAsOn")]);
    m_data_as_on_isSet = !json[QString("dataAsOn")].isNull() && m_data_as_on_isValid;

    m_directors_isValid = ::OpenAPI::fromJsonValue(m_directors, json[QString("directors")]);
    m_directors_isSet = !json[QString("directors")].isNull() && m_directors_isValid;

    m_entity_name_isValid = ::OpenAPI::fromJsonValue(m_entity_name, json[QString("entityName")]);
    m_entity_name_isSet = !json[QString("entityName")].isNull() && m_entity_name_isValid;

    m_exporter_type_isValid = ::OpenAPI::fromJsonValue(m_exporter_type, json[QString("exporterType")]);
    m_exporter_type_isSet = !json[QString("exporterType")].isNull() && m_exporter_type_isValid;

    m_iec_isValid = ::OpenAPI::fromJsonValue(m_iec, json[QString("iec")]);
    m_iec_isSet = !json[QString("iec")].isNull() && m_iec_isValid;

    m_iec_issue_date_isValid = ::OpenAPI::fromJsonValue(m_iec_issue_date, json[QString("iecIssueDate")]);
    m_iec_issue_date_isSet = !json[QString("iecIssueDate")].isNull() && m_iec_issue_date_isValid;

    m_iec_modification_date_isValid = ::OpenAPI::fromJsonValue(m_iec_modification_date, json[QString("iecModificationDate")]);
    m_iec_modification_date_isSet = !json[QString("iecModificationDate")].isNull() && m_iec_modification_date_isValid;

    m_iec_status_isValid = ::OpenAPI::fromJsonValue(m_iec_status, json[QString("iecStatus")]);
    m_iec_status_isSet = !json[QString("iecStatus")].isNull() && m_iec_status_isValid;

    m_nature_of_concern_isValid = ::OpenAPI::fromJsonValue(m_nature_of_concern, json[QString("natureOfConcern")]);
    m_nature_of_concern_isSet = !json[QString("natureOfConcern")].isNull() && m_nature_of_concern_isValid;

    m_pan_isValid = ::OpenAPI::fromJsonValue(m_pan, json[QString("pan")]);
    m_pan_isSet = !json[QString("pan")].isNull() && m_pan_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImporter_Exporter_Code_Verification_API_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("addressLine1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("addressLine2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_branch.size() > 0) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_data_as_on_isSet) {
        obj.insert(QString("dataAsOn"), ::OpenAPI::toJsonValue(m_data_as_on));
    }
    if (m_directors.size() > 0) {
        obj.insert(QString("directors"), ::OpenAPI::toJsonValue(m_directors));
    }
    if (m_entity_name_isSet) {
        obj.insert(QString("entityName"), ::OpenAPI::toJsonValue(m_entity_name));
    }
    if (m_exporter_type_isSet) {
        obj.insert(QString("exporterType"), ::OpenAPI::toJsonValue(m_exporter_type));
    }
    if (m_iec_isSet) {
        obj.insert(QString("iec"), ::OpenAPI::toJsonValue(m_iec));
    }
    if (m_iec_issue_date_isSet) {
        obj.insert(QString("iecIssueDate"), ::OpenAPI::toJsonValue(m_iec_issue_date));
    }
    if (m_iec_modification_date_isSet) {
        obj.insert(QString("iecModificationDate"), ::OpenAPI::toJsonValue(m_iec_modification_date));
    }
    if (m_iec_status_isSet) {
        obj.insert(QString("iecStatus"), ::OpenAPI::toJsonValue(m_iec_status));
    }
    if (m_nature_of_concern_isSet) {
        obj.insert(QString("natureOfConcern"), ::OpenAPI::toJsonValue(m_nature_of_concern));
    }
    if (m_pan_isSet) {
        obj.insert(QString("pan"), ::OpenAPI::toJsonValue(m_pan));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getAddressLine1() const {
    return m_address_line1;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getAddressLine2() const {
    return m_address_line2;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QSet<OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner> OAIImporter_Exporter_Code_Verification_API_200_response::getBranch() const {
    return m_branch;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setBranch(const QSet<OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner> &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getCity() const {
    return m_city;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_city_Set() const{
    return m_city_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_city_Valid() const{
    return m_city_isValid;
}

QDateTime OAIImporter_Exporter_Code_Verification_API_200_response::getDataAsOn() const {
    return m_data_as_on;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setDataAsOn(const QDateTime &data_as_on) {
    m_data_as_on = data_as_on;
    m_data_as_on_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_data_as_on_Set() const{
    return m_data_as_on_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_data_as_on_Valid() const{
    return m_data_as_on_isValid;
}

QSet<OAIImporter_Exporter_Code_Verification_API_200_response_directors_inner> OAIImporter_Exporter_Code_Verification_API_200_response::getDirectors() const {
    return m_directors;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setDirectors(const QSet<OAIImporter_Exporter_Code_Verification_API_200_response_directors_inner> &directors) {
    m_directors = directors;
    m_directors_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_directors_Set() const{
    return m_directors_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_directors_Valid() const{
    return m_directors_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getEntityName() const {
    return m_entity_name;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setEntityName(const QString &entity_name) {
    m_entity_name = entity_name;
    m_entity_name_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_entity_name_Set() const{
    return m_entity_name_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_entity_name_Valid() const{
    return m_entity_name_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getExporterType() const {
    return m_exporter_type;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setExporterType(const QString &exporter_type) {
    m_exporter_type = exporter_type;
    m_exporter_type_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_exporter_type_Set() const{
    return m_exporter_type_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_exporter_type_Valid() const{
    return m_exporter_type_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getIec() const {
    return m_iec;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setIec(const QString &iec) {
    m_iec = iec;
    m_iec_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_Set() const{
    return m_iec_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_Valid() const{
    return m_iec_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getIecIssueDate() const {
    return m_iec_issue_date;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setIecIssueDate(const QString &iec_issue_date) {
    m_iec_issue_date = iec_issue_date;
    m_iec_issue_date_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_issue_date_Set() const{
    return m_iec_issue_date_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_issue_date_Valid() const{
    return m_iec_issue_date_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getIecModificationDate() const {
    return m_iec_modification_date;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setIecModificationDate(const QString &iec_modification_date) {
    m_iec_modification_date = iec_modification_date;
    m_iec_modification_date_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_modification_date_Set() const{
    return m_iec_modification_date_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_modification_date_Valid() const{
    return m_iec_modification_date_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getIecStatus() const {
    return m_iec_status;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setIecStatus(const QString &iec_status) {
    m_iec_status = iec_status;
    m_iec_status_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_status_Set() const{
    return m_iec_status_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_iec_status_Valid() const{
    return m_iec_status_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getNatureOfConcern() const {
    return m_nature_of_concern;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setNatureOfConcern(const QString &nature_of_concern) {
    m_nature_of_concern = nature_of_concern;
    m_nature_of_concern_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_nature_of_concern_Set() const{
    return m_nature_of_concern_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_nature_of_concern_Valid() const{
    return m_nature_of_concern_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getPan() const {
    return m_pan;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setPan(const QString &pan) {
    m_pan = pan;
    m_pan_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_pan_Set() const{
    return m_pan_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_pan_Valid() const{
    return m_pan_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getPin() const {
    return m_pin;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response::getState() const {
    return m_state;
}
void OAIImporter_Exporter_Code_Verification_API_200_response::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_as_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exporter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iec_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iec_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iec_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nature_of_concern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_line1_isValid && m_address_line2_isValid && m_branch_isValid && m_city_isValid && m_data_as_on_isValid && m_directors_isValid && m_entity_name_isValid && m_exporter_type_isValid && m_iec_isValid && m_iec_issue_date_isValid && m_iec_modification_date_isValid && m_iec_status_isValid && m_nature_of_concern_isValid && m_pan_isValid && m_pin_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
