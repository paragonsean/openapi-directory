/**
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner() {
    this->initializeModel();
}

OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::~OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner() {}

void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::initializeModel() {

    m_badd1_isSet = false;
    m_badd1_isValid = false;

    m_badd2_isSet = false;
    m_badd2_isValid = false;

    m_branch_code_isSet = false;
    m_branch_code_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::fromJsonObject(QJsonObject json) {

    m_badd1_isValid = ::OpenAPI::fromJsonValue(m_badd1, json[QString("badd1")]);
    m_badd1_isSet = !json[QString("badd1")].isNull() && m_badd1_isValid;

    m_badd2_isValid = ::OpenAPI::fromJsonValue(m_badd2, json[QString("badd2")]);
    m_badd2_isSet = !json[QString("badd2")].isNull() && m_badd2_isValid;

    m_branch_code_isValid = ::OpenAPI::fromJsonValue(m_branch_code, json[QString("branchCode")]);
    m_branch_code_isSet = !json[QString("branchCode")].isNull() && m_branch_code_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_badd1_isSet) {
        obj.insert(QString("badd1"), ::OpenAPI::toJsonValue(m_badd1));
    }
    if (m_badd2_isSet) {
        obj.insert(QString("badd2"), ::OpenAPI::toJsonValue(m_badd2));
    }
    if (m_branch_code_isSet) {
        obj.insert(QString("branchCode"), ::OpenAPI::toJsonValue(m_branch_code));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getBadd1() const {
    return m_badd1;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setBadd1(const QString &badd1) {
    m_badd1 = badd1;
    m_badd1_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_badd1_Set() const{
    return m_badd1_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_badd1_Valid() const{
    return m_badd1_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getBadd2() const {
    return m_badd2;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setBadd2(const QString &badd2) {
    m_badd2 = badd2;
    m_badd2_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_badd2_Set() const{
    return m_badd2_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_badd2_Valid() const{
    return m_badd2_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getBranchCode() const {
    return m_branch_code;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setBranchCode(const QString &branch_code) {
    m_branch_code = branch_code;
    m_branch_code_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_branch_code_Set() const{
    return m_branch_code_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_branch_code_Valid() const{
    return m_branch_code_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getCity() const {
    return m_city;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_city_Set() const{
    return m_city_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getPin() const {
    return m_pin;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_pin_Valid() const{
    return m_pin_isValid;
}

QString OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::getState() const {
    return m_state;
}
void OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badd1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badd2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImporter_Exporter_Code_Verification_API_200_response_branch_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_badd1_isValid && m_badd2_isValid && m_branch_code_isValid && m_city_isValid && m_pin_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
