# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.importer_exporter_code_verification_api200_response_branch_inner import ImporterExporterCodeVerificationAPI200ResponseBranchInner
from openapi_server.models.importer_exporter_code_verification_api200_response_directors_inner import ImporterExporterCodeVerificationAPI200ResponseDirectorsInner
from openapi_server import util


class ImporterExporterCodeVerificationAPI200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, branch: list[ImporterExporterCodeVerificationAPI200ResponseBranchInner]=None, city: str=None, data_as_on: datetime=None, directors: list[ImporterExporterCodeVerificationAPI200ResponseDirectorsInner]=None, entity_name: str=None, exporter_type: str=None, iec: str=None, iec_issue_date: str=None, iec_modification_date: str=None, iec_status: str=None, nature_of_concern: str=None, pan: str=None, pin: str=None, state: str=None):
        """ImporterExporterCodeVerificationAPI200Response - a model defined in OpenAPI

        :param address_line1: The address_line1 of this ImporterExporterCodeVerificationAPI200Response.
        :param address_line2: The address_line2 of this ImporterExporterCodeVerificationAPI200Response.
        :param branch: The branch of this ImporterExporterCodeVerificationAPI200Response.
        :param city: The city of this ImporterExporterCodeVerificationAPI200Response.
        :param data_as_on: The data_as_on of this ImporterExporterCodeVerificationAPI200Response.
        :param directors: The directors of this ImporterExporterCodeVerificationAPI200Response.
        :param entity_name: The entity_name of this ImporterExporterCodeVerificationAPI200Response.
        :param exporter_type: The exporter_type of this ImporterExporterCodeVerificationAPI200Response.
        :param iec: The iec of this ImporterExporterCodeVerificationAPI200Response.
        :param iec_issue_date: The iec_issue_date of this ImporterExporterCodeVerificationAPI200Response.
        :param iec_modification_date: The iec_modification_date of this ImporterExporterCodeVerificationAPI200Response.
        :param iec_status: The iec_status of this ImporterExporterCodeVerificationAPI200Response.
        :param nature_of_concern: The nature_of_concern of this ImporterExporterCodeVerificationAPI200Response.
        :param pan: The pan of this ImporterExporterCodeVerificationAPI200Response.
        :param pin: The pin of this ImporterExporterCodeVerificationAPI200Response.
        :param state: The state of this ImporterExporterCodeVerificationAPI200Response.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'branch': list[ImporterExporterCodeVerificationAPI200ResponseBranchInner],
            'city': str,
            'data_as_on': datetime,
            'directors': list[ImporterExporterCodeVerificationAPI200ResponseDirectorsInner],
            'entity_name': str,
            'exporter_type': str,
            'iec': str,
            'iec_issue_date': str,
            'iec_modification_date': str,
            'iec_status': str,
            'nature_of_concern': str,
            'pan': str,
            'pin': str,
            'state': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'branch': 'branch',
            'city': 'city',
            'data_as_on': 'dataAsOn',
            'directors': 'directors',
            'entity_name': 'entityName',
            'exporter_type': 'exporterType',
            'iec': 'iec',
            'iec_issue_date': 'iecIssueDate',
            'iec_modification_date': 'iecModificationDate',
            'iec_status': 'iecStatus',
            'nature_of_concern': 'natureOfConcern',
            'pan': 'pan',
            'pin': 'pin',
            'state': 'state'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._branch = branch
        self._city = city
        self._data_as_on = data_as_on
        self._directors = directors
        self._entity_name = entity_name
        self._exporter_type = exporter_type
        self._iec = iec
        self._iec_issue_date = iec_issue_date
        self._iec_modification_date = iec_modification_date
        self._iec_status = iec_status
        self._nature_of_concern = nature_of_concern
        self._pan = pan
        self._pin = pin
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImporterExporterCodeVerificationAPI200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Importer_Exporter_Code_Verification_API_200_response of this ImporterExporterCodeVerificationAPI200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this ImporterExporterCodeVerificationAPI200Response.


        :return: The address_line1 of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this ImporterExporterCodeVerificationAPI200Response.


        :param address_line1: The address_line1 of this ImporterExporterCodeVerificationAPI200Response.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")
        if address_line1 is not None and len(address_line1) < 1:
            raise ValueError("Invalid value for `address_line1`, length must be greater than or equal to `1`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this ImporterExporterCodeVerificationAPI200Response.


        :return: The address_line2 of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this ImporterExporterCodeVerificationAPI200Response.


        :param address_line2: The address_line2 of this ImporterExporterCodeVerificationAPI200Response.
        :type address_line2: str
        """
        if address_line2 is None:
            raise ValueError("Invalid value for `address_line2`, must not be `None`")

        self._address_line2 = address_line2

    @property
    def branch(self):
        """Gets the branch of this ImporterExporterCodeVerificationAPI200Response.


        :return: The branch of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: list[ImporterExporterCodeVerificationAPI200ResponseBranchInner]
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this ImporterExporterCodeVerificationAPI200Response.


        :param branch: The branch of this ImporterExporterCodeVerificationAPI200Response.
        :type branch: list[ImporterExporterCodeVerificationAPI200ResponseBranchInner]
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")
        if branch is not None and len(branch) < 1:
            raise ValueError("Invalid value for `branch`, number of items must be greater than or equal to `1`")

        self._branch = branch

    @property
    def city(self):
        """Gets the city of this ImporterExporterCodeVerificationAPI200Response.


        :return: The city of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ImporterExporterCodeVerificationAPI200Response.


        :param city: The city of this ImporterExporterCodeVerificationAPI200Response.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def data_as_on(self):
        """Gets the data_as_on of this ImporterExporterCodeVerificationAPI200Response.


        :return: The data_as_on of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: datetime
        """
        return self._data_as_on

    @data_as_on.setter
    def data_as_on(self, data_as_on):
        """Sets the data_as_on of this ImporterExporterCodeVerificationAPI200Response.


        :param data_as_on: The data_as_on of this ImporterExporterCodeVerificationAPI200Response.
        :type data_as_on: datetime
        """
        if data_as_on is None:
            raise ValueError("Invalid value for `data_as_on`, must not be `None`")

        self._data_as_on = data_as_on

    @property
    def directors(self):
        """Gets the directors of this ImporterExporterCodeVerificationAPI200Response.


        :return: The directors of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: list[ImporterExporterCodeVerificationAPI200ResponseDirectorsInner]
        """
        return self._directors

    @directors.setter
    def directors(self, directors):
        """Sets the directors of this ImporterExporterCodeVerificationAPI200Response.


        :param directors: The directors of this ImporterExporterCodeVerificationAPI200Response.
        :type directors: list[ImporterExporterCodeVerificationAPI200ResponseDirectorsInner]
        """
        if directors is None:
            raise ValueError("Invalid value for `directors`, must not be `None`")
        if directors is not None and len(directors) < 1:
            raise ValueError("Invalid value for `directors`, number of items must be greater than or equal to `1`")

        self._directors = directors

    @property
    def entity_name(self):
        """Gets the entity_name of this ImporterExporterCodeVerificationAPI200Response.


        :return: The entity_name of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this ImporterExporterCodeVerificationAPI200Response.


        :param entity_name: The entity_name of this ImporterExporterCodeVerificationAPI200Response.
        :type entity_name: str
        """
        if entity_name is None:
            raise ValueError("Invalid value for `entity_name`, must not be `None`")
        if entity_name is not None and len(entity_name) < 1:
            raise ValueError("Invalid value for `entity_name`, length must be greater than or equal to `1`")

        self._entity_name = entity_name

    @property
    def exporter_type(self):
        """Gets the exporter_type of this ImporterExporterCodeVerificationAPI200Response.


        :return: The exporter_type of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._exporter_type

    @exporter_type.setter
    def exporter_type(self, exporter_type):
        """Sets the exporter_type of this ImporterExporterCodeVerificationAPI200Response.


        :param exporter_type: The exporter_type of this ImporterExporterCodeVerificationAPI200Response.
        :type exporter_type: str
        """
        if exporter_type is None:
            raise ValueError("Invalid value for `exporter_type`, must not be `None`")
        if exporter_type is not None and len(exporter_type) < 1:
            raise ValueError("Invalid value for `exporter_type`, length must be greater than or equal to `1`")

        self._exporter_type = exporter_type

    @property
    def iec(self):
        """Gets the iec of this ImporterExporterCodeVerificationAPI200Response.


        :return: The iec of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._iec

    @iec.setter
    def iec(self, iec):
        """Sets the iec of this ImporterExporterCodeVerificationAPI200Response.


        :param iec: The iec of this ImporterExporterCodeVerificationAPI200Response.
        :type iec: str
        """
        if iec is None:
            raise ValueError("Invalid value for `iec`, must not be `None`")
        if iec is not None and len(iec) < 1:
            raise ValueError("Invalid value for `iec`, length must be greater than or equal to `1`")

        self._iec = iec

    @property
    def iec_issue_date(self):
        """Gets the iec_issue_date of this ImporterExporterCodeVerificationAPI200Response.


        :return: The iec_issue_date of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._iec_issue_date

    @iec_issue_date.setter
    def iec_issue_date(self, iec_issue_date):
        """Sets the iec_issue_date of this ImporterExporterCodeVerificationAPI200Response.


        :param iec_issue_date: The iec_issue_date of this ImporterExporterCodeVerificationAPI200Response.
        :type iec_issue_date: str
        """
        if iec_issue_date is None:
            raise ValueError("Invalid value for `iec_issue_date`, must not be `None`")
        if iec_issue_date is not None and len(iec_issue_date) < 1:
            raise ValueError("Invalid value for `iec_issue_date`, length must be greater than or equal to `1`")

        self._iec_issue_date = iec_issue_date

    @property
    def iec_modification_date(self):
        """Gets the iec_modification_date of this ImporterExporterCodeVerificationAPI200Response.


        :return: The iec_modification_date of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._iec_modification_date

    @iec_modification_date.setter
    def iec_modification_date(self, iec_modification_date):
        """Sets the iec_modification_date of this ImporterExporterCodeVerificationAPI200Response.


        :param iec_modification_date: The iec_modification_date of this ImporterExporterCodeVerificationAPI200Response.
        :type iec_modification_date: str
        """
        if iec_modification_date is None:
            raise ValueError("Invalid value for `iec_modification_date`, must not be `None`")

        self._iec_modification_date = iec_modification_date

    @property
    def iec_status(self):
        """Gets the iec_status of this ImporterExporterCodeVerificationAPI200Response.


        :return: The iec_status of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._iec_status

    @iec_status.setter
    def iec_status(self, iec_status):
        """Sets the iec_status of this ImporterExporterCodeVerificationAPI200Response.


        :param iec_status: The iec_status of this ImporterExporterCodeVerificationAPI200Response.
        :type iec_status: str
        """
        if iec_status is None:
            raise ValueError("Invalid value for `iec_status`, must not be `None`")
        if iec_status is not None and len(iec_status) < 0:
            raise ValueError("Invalid value for `iec_status`, length must be greater than or equal to `0`")

        self._iec_status = iec_status

    @property
    def nature_of_concern(self):
        """Gets the nature_of_concern of this ImporterExporterCodeVerificationAPI200Response.


        :return: The nature_of_concern of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._nature_of_concern

    @nature_of_concern.setter
    def nature_of_concern(self, nature_of_concern):
        """Sets the nature_of_concern of this ImporterExporterCodeVerificationAPI200Response.


        :param nature_of_concern: The nature_of_concern of this ImporterExporterCodeVerificationAPI200Response.
        :type nature_of_concern: str
        """
        if nature_of_concern is None:
            raise ValueError("Invalid value for `nature_of_concern`, must not be `None`")
        if nature_of_concern is not None and len(nature_of_concern) < 1:
            raise ValueError("Invalid value for `nature_of_concern`, length must be greater than or equal to `1`")

        self._nature_of_concern = nature_of_concern

    @property
    def pan(self):
        """Gets the pan of this ImporterExporterCodeVerificationAPI200Response.


        :return: The pan of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this ImporterExporterCodeVerificationAPI200Response.


        :param pan: The pan of this ImporterExporterCodeVerificationAPI200Response.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")
        if pan is not None and len(pan) < 1:
            raise ValueError("Invalid value for `pan`, length must be greater than or equal to `1`")

        self._pan = pan

    @property
    def pin(self):
        """Gets the pin of this ImporterExporterCodeVerificationAPI200Response.


        :return: The pin of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this ImporterExporterCodeVerificationAPI200Response.


        :param pin: The pin of this ImporterExporterCodeVerificationAPI200Response.
        :type pin: str
        """
        if pin is None:
            raise ValueError("Invalid value for `pin`, must not be `None`")
        if pin is not None and len(pin) < 1:
            raise ValueError("Invalid value for `pin`, length must be greater than or equal to `1`")

        self._pin = pin

    @property
    def state(self):
        """Gets the state of this ImporterExporterCodeVerificationAPI200Response.


        :return: The state of this ImporterExporterCodeVerificationAPI200Response.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImporterExporterCodeVerificationAPI200Response.


        :param state: The state of this ImporterExporterCodeVerificationAPI200Response.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state
