# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImporterExporterCodeVerificationAPI200ResponseBranchInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, badd1: str=None, badd2: str=None, branch_code: str=None, city: str=None, pin: str=None, state: str=None):
        """ImporterExporterCodeVerificationAPI200ResponseBranchInner - a model defined in OpenAPI

        :param badd1: The badd1 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :param badd2: The badd2 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :param branch_code: The branch_code of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :param city: The city of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :param pin: The pin of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :param state: The state of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        """
        self.openapi_types = {
            'badd1': str,
            'badd2': str,
            'branch_code': str,
            'city': str,
            'pin': str,
            'state': str
        }

        self.attribute_map = {
            'badd1': 'badd1',
            'badd2': 'badd2',
            'branch_code': 'branchCode',
            'city': 'city',
            'pin': 'pin',
            'state': 'state'
        }

        self._badd1 = badd1
        self._badd2 = badd2
        self._branch_code = branch_code
        self._city = city
        self._pin = pin
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImporterExporterCodeVerificationAPI200ResponseBranchInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Importer_Exporter_Code_Verification_API_200_response_branch_inner of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def badd1(self):
        """Gets the badd1 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The badd1 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._badd1

    @badd1.setter
    def badd1(self, badd1):
        """Sets the badd1 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param badd1: The badd1 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type badd1: str
        """
        if badd1 is None:
            raise ValueError("Invalid value for `badd1`, must not be `None`")
        if badd1 is not None and len(badd1) < 1:
            raise ValueError("Invalid value for `badd1`, length must be greater than or equal to `1`")

        self._badd1 = badd1

    @property
    def badd2(self):
        """Gets the badd2 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The badd2 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._badd2

    @badd2.setter
    def badd2(self, badd2):
        """Sets the badd2 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param badd2: The badd2 of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type badd2: str
        """
        if badd2 is None:
            raise ValueError("Invalid value for `badd2`, must not be `None`")

        self._badd2 = badd2

    @property
    def branch_code(self):
        """Gets the branch_code of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The branch_code of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param branch_code: The branch_code of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type branch_code: str
        """
        if branch_code is None:
            raise ValueError("Invalid value for `branch_code`, must not be `None`")
        if branch_code is not None and len(branch_code) < 1:
            raise ValueError("Invalid value for `branch_code`, length must be greater than or equal to `1`")

        self._branch_code = branch_code

    @property
    def city(self):
        """Gets the city of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The city of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param city: The city of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) < 1:
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")

        self._city = city

    @property
    def pin(self):
        """Gets the pin of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The pin of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param pin: The pin of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type pin: str
        """
        if pin is None:
            raise ValueError("Invalid value for `pin`, must not be `None`")
        if pin is not None and len(pin) < 1:
            raise ValueError("Invalid value for `pin`, length must be greater than or equal to `1`")

        self._pin = pin

    @property
    def state(self):
        """Gets the state of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :return: The state of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.


        :param state: The state of this ImporterExporterCodeVerificationAPI200ResponseBranchInner.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and len(state) < 1:
            raise ValueError("Invalid value for `state`, length must be greater than or equal to `1`")

        self._state = state
