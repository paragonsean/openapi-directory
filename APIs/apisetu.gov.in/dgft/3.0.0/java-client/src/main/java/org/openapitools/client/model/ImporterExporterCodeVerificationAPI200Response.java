/*
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.ImporterExporterCodeVerificationAPI200ResponseBranchInner;
import org.openapitools.client.model.ImporterExporterCodeVerificationAPI200ResponseDirectorsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImporterExporterCodeVerificationAPI200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:36:24.822521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImporterExporterCodeVerificationAPI200Response {
  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private Set<ImporterExporterCodeVerificationAPI200ResponseBranchInner> branch = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_DATA_AS_ON = "dataAsOn";
  @SerializedName(SERIALIZED_NAME_DATA_AS_ON)
  private OffsetDateTime dataAsOn;

  public static final String SERIALIZED_NAME_DIRECTORS = "directors";
  @SerializedName(SERIALIZED_NAME_DIRECTORS)
  private Set<ImporterExporterCodeVerificationAPI200ResponseDirectorsInner> directors = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_ENTITY_NAME = "entityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  private String entityName;

  public static final String SERIALIZED_NAME_EXPORTER_TYPE = "exporterType";
  @SerializedName(SERIALIZED_NAME_EXPORTER_TYPE)
  private String exporterType;

  public static final String SERIALIZED_NAME_IEC = "iec";
  @SerializedName(SERIALIZED_NAME_IEC)
  private String iec;

  public static final String SERIALIZED_NAME_IEC_ISSUE_DATE = "iecIssueDate";
  @SerializedName(SERIALIZED_NAME_IEC_ISSUE_DATE)
  private String iecIssueDate;

  public static final String SERIALIZED_NAME_IEC_MODIFICATION_DATE = "iecModificationDate";
  @SerializedName(SERIALIZED_NAME_IEC_MODIFICATION_DATE)
  private String iecModificationDate;

  public static final String SERIALIZED_NAME_IEC_STATUS = "iecStatus";
  @SerializedName(SERIALIZED_NAME_IEC_STATUS)
  private String iecStatus;

  public static final String SERIALIZED_NAME_NATURE_OF_CONCERN = "natureOfConcern";
  @SerializedName(SERIALIZED_NAME_NATURE_OF_CONCERN)
  private String natureOfConcern;

  public static final String SERIALIZED_NAME_PAN = "pan";
  @SerializedName(SERIALIZED_NAME_PAN)
  private String pan;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private String pin;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ImporterExporterCodeVerificationAPI200Response() {
  }

  public ImporterExporterCodeVerificationAPI200Response addressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
    return this;
  }

  /**
   * Get addressLine1
   * @return addressLine1
   */
  @javax.annotation.Nonnull
  public String getAddressLine1() {
    return addressLine1;
  }

  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public ImporterExporterCodeVerificationAPI200Response addressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
    return this;
  }

  /**
   * Get addressLine2
   * @return addressLine2
   */
  @javax.annotation.Nonnull
  public String getAddressLine2() {
    return addressLine2;
  }

  public void setAddressLine2(String addressLine2) {
    this.addressLine2 = addressLine2;
  }


  public ImporterExporterCodeVerificationAPI200Response branch(Set<ImporterExporterCodeVerificationAPI200ResponseBranchInner> branch) {
    this.branch = branch;
    return this;
  }

  public ImporterExporterCodeVerificationAPI200Response addBranchItem(ImporterExporterCodeVerificationAPI200ResponseBranchInner branchItem) {
    if (this.branch == null) {
      this.branch = new LinkedHashSet<>();
    }
    this.branch.add(branchItem);
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nonnull
  public Set<ImporterExporterCodeVerificationAPI200ResponseBranchInner> getBranch() {
    return branch;
  }

  public void setBranch(Set<ImporterExporterCodeVerificationAPI200ResponseBranchInner> branch) {
    this.branch = branch;
  }


  public ImporterExporterCodeVerificationAPI200Response city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ImporterExporterCodeVerificationAPI200Response dataAsOn(OffsetDateTime dataAsOn) {
    this.dataAsOn = dataAsOn;
    return this;
  }

  /**
   * Get dataAsOn
   * @return dataAsOn
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDataAsOn() {
    return dataAsOn;
  }

  public void setDataAsOn(OffsetDateTime dataAsOn) {
    this.dataAsOn = dataAsOn;
  }


  public ImporterExporterCodeVerificationAPI200Response directors(Set<ImporterExporterCodeVerificationAPI200ResponseDirectorsInner> directors) {
    this.directors = directors;
    return this;
  }

  public ImporterExporterCodeVerificationAPI200Response addDirectorsItem(ImporterExporterCodeVerificationAPI200ResponseDirectorsInner directorsItem) {
    if (this.directors == null) {
      this.directors = new LinkedHashSet<>();
    }
    this.directors.add(directorsItem);
    return this;
  }

  /**
   * Get directors
   * @return directors
   */
  @javax.annotation.Nonnull
  public Set<ImporterExporterCodeVerificationAPI200ResponseDirectorsInner> getDirectors() {
    return directors;
  }

  public void setDirectors(Set<ImporterExporterCodeVerificationAPI200ResponseDirectorsInner> directors) {
    this.directors = directors;
  }


  public ImporterExporterCodeVerificationAPI200Response entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

  /**
   * Get entityName
   * @return entityName
   */
  @javax.annotation.Nonnull
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }


  public ImporterExporterCodeVerificationAPI200Response exporterType(String exporterType) {
    this.exporterType = exporterType;
    return this;
  }

  /**
   * Get exporterType
   * @return exporterType
   */
  @javax.annotation.Nonnull
  public String getExporterType() {
    return exporterType;
  }

  public void setExporterType(String exporterType) {
    this.exporterType = exporterType;
  }


  public ImporterExporterCodeVerificationAPI200Response iec(String iec) {
    this.iec = iec;
    return this;
  }

  /**
   * Get iec
   * @return iec
   */
  @javax.annotation.Nonnull
  public String getIec() {
    return iec;
  }

  public void setIec(String iec) {
    this.iec = iec;
  }


  public ImporterExporterCodeVerificationAPI200Response iecIssueDate(String iecIssueDate) {
    this.iecIssueDate = iecIssueDate;
    return this;
  }

  /**
   * Get iecIssueDate
   * @return iecIssueDate
   */
  @javax.annotation.Nonnull
  public String getIecIssueDate() {
    return iecIssueDate;
  }

  public void setIecIssueDate(String iecIssueDate) {
    this.iecIssueDate = iecIssueDate;
  }


  public ImporterExporterCodeVerificationAPI200Response iecModificationDate(String iecModificationDate) {
    this.iecModificationDate = iecModificationDate;
    return this;
  }

  /**
   * Get iecModificationDate
   * @return iecModificationDate
   */
  @javax.annotation.Nonnull
  public String getIecModificationDate() {
    return iecModificationDate;
  }

  public void setIecModificationDate(String iecModificationDate) {
    this.iecModificationDate = iecModificationDate;
  }


  public ImporterExporterCodeVerificationAPI200Response iecStatus(String iecStatus) {
    this.iecStatus = iecStatus;
    return this;
  }

  /**
   * Get iecStatus
   * @return iecStatus
   */
  @javax.annotation.Nonnull
  public String getIecStatus() {
    return iecStatus;
  }

  public void setIecStatus(String iecStatus) {
    this.iecStatus = iecStatus;
  }


  public ImporterExporterCodeVerificationAPI200Response natureOfConcern(String natureOfConcern) {
    this.natureOfConcern = natureOfConcern;
    return this;
  }

  /**
   * Get natureOfConcern
   * @return natureOfConcern
   */
  @javax.annotation.Nonnull
  public String getNatureOfConcern() {
    return natureOfConcern;
  }

  public void setNatureOfConcern(String natureOfConcern) {
    this.natureOfConcern = natureOfConcern;
  }


  public ImporterExporterCodeVerificationAPI200Response pan(String pan) {
    this.pan = pan;
    return this;
  }

  /**
   * Get pan
   * @return pan
   */
  @javax.annotation.Nonnull
  public String getPan() {
    return pan;
  }

  public void setPan(String pan) {
    this.pan = pan;
  }


  public ImporterExporterCodeVerificationAPI200Response pin(String pin) {
    this.pin = pin;
    return this;
  }

  /**
   * Get pin
   * @return pin
   */
  @javax.annotation.Nonnull
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }


  public ImporterExporterCodeVerificationAPI200Response state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImporterExporterCodeVerificationAPI200Response importerExporterCodeVerificationAPI200Response = (ImporterExporterCodeVerificationAPI200Response) o;
    return Objects.equals(this.addressLine1, importerExporterCodeVerificationAPI200Response.addressLine1) &&
        Objects.equals(this.addressLine2, importerExporterCodeVerificationAPI200Response.addressLine2) &&
        Objects.equals(this.branch, importerExporterCodeVerificationAPI200Response.branch) &&
        Objects.equals(this.city, importerExporterCodeVerificationAPI200Response.city) &&
        Objects.equals(this.dataAsOn, importerExporterCodeVerificationAPI200Response.dataAsOn) &&
        Objects.equals(this.directors, importerExporterCodeVerificationAPI200Response.directors) &&
        Objects.equals(this.entityName, importerExporterCodeVerificationAPI200Response.entityName) &&
        Objects.equals(this.exporterType, importerExporterCodeVerificationAPI200Response.exporterType) &&
        Objects.equals(this.iec, importerExporterCodeVerificationAPI200Response.iec) &&
        Objects.equals(this.iecIssueDate, importerExporterCodeVerificationAPI200Response.iecIssueDate) &&
        Objects.equals(this.iecModificationDate, importerExporterCodeVerificationAPI200Response.iecModificationDate) &&
        Objects.equals(this.iecStatus, importerExporterCodeVerificationAPI200Response.iecStatus) &&
        Objects.equals(this.natureOfConcern, importerExporterCodeVerificationAPI200Response.natureOfConcern) &&
        Objects.equals(this.pan, importerExporterCodeVerificationAPI200Response.pan) &&
        Objects.equals(this.pin, importerExporterCodeVerificationAPI200Response.pin) &&
        Objects.equals(this.state, importerExporterCodeVerificationAPI200Response.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine1, addressLine2, branch, city, dataAsOn, directors, entityName, exporterType, iec, iecIssueDate, iecModificationDate, iecStatus, natureOfConcern, pan, pin, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImporterExporterCodeVerificationAPI200Response {\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    dataAsOn: ").append(toIndentedString(dataAsOn)).append("\n");
    sb.append("    directors: ").append(toIndentedString(directors)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    exporterType: ").append(toIndentedString(exporterType)).append("\n");
    sb.append("    iec: ").append(toIndentedString(iec)).append("\n");
    sb.append("    iecIssueDate: ").append(toIndentedString(iecIssueDate)).append("\n");
    sb.append("    iecModificationDate: ").append(toIndentedString(iecModificationDate)).append("\n");
    sb.append("    iecStatus: ").append(toIndentedString(iecStatus)).append("\n");
    sb.append("    natureOfConcern: ").append(toIndentedString(natureOfConcern)).append("\n");
    sb.append("    pan: ").append(toIndentedString(pan)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("branch");
    openapiFields.add("city");
    openapiFields.add("dataAsOn");
    openapiFields.add("directors");
    openapiFields.add("entityName");
    openapiFields.add("exporterType");
    openapiFields.add("iec");
    openapiFields.add("iecIssueDate");
    openapiFields.add("iecModificationDate");
    openapiFields.add("iecStatus");
    openapiFields.add("natureOfConcern");
    openapiFields.add("pan");
    openapiFields.add("pin");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressLine1");
    openapiRequiredFields.add("addressLine2");
    openapiRequiredFields.add("branch");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("dataAsOn");
    openapiRequiredFields.add("directors");
    openapiRequiredFields.add("entityName");
    openapiRequiredFields.add("exporterType");
    openapiRequiredFields.add("iec");
    openapiRequiredFields.add("iecIssueDate");
    openapiRequiredFields.add("iecModificationDate");
    openapiRequiredFields.add("iecStatus");
    openapiRequiredFields.add("natureOfConcern");
    openapiRequiredFields.add("pan");
    openapiRequiredFields.add("pin");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImporterExporterCodeVerificationAPI200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImporterExporterCodeVerificationAPI200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImporterExporterCodeVerificationAPI200Response is not found in the empty JSON string", ImporterExporterCodeVerificationAPI200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImporterExporterCodeVerificationAPI200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImporterExporterCodeVerificationAPI200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImporterExporterCodeVerificationAPI200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if (!jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("branch").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be an array in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }

      JsonArray jsonArraybranch = jsonObj.getAsJsonArray("branch");
      // validate the required field `branch` (array)
      for (int i = 0; i < jsonArraybranch.size(); i++) {
        ImporterExporterCodeVerificationAPI200ResponseBranchInner.validateJsonElement(jsonArraybranch.get(i));
      };
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("directors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `directors` to be an array in the JSON string but got `%s`", jsonObj.get("directors").toString()));
      }

      JsonArray jsonArraydirectors = jsonObj.getAsJsonArray("directors");
      // validate the required field `directors` (array)
      for (int i = 0; i < jsonArraydirectors.size(); i++) {
        ImporterExporterCodeVerificationAPI200ResponseDirectorsInner.validateJsonElement(jsonArraydirectors.get(i));
      };
      if (!jsonObj.get("entityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityName").toString()));
      }
      if (!jsonObj.get("exporterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exporterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exporterType").toString()));
      }
      if (!jsonObj.get("iec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iec").toString()));
      }
      if (!jsonObj.get("iecIssueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iecIssueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iecIssueDate").toString()));
      }
      if (!jsonObj.get("iecModificationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iecModificationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iecModificationDate").toString()));
      }
      if (!jsonObj.get("iecStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iecStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iecStatus").toString()));
      }
      if (!jsonObj.get("natureOfConcern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `natureOfConcern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("natureOfConcern").toString()));
      }
      if (!jsonObj.get("pan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pan").toString()));
      }
      if (!jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImporterExporterCodeVerificationAPI200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImporterExporterCodeVerificationAPI200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImporterExporterCodeVerificationAPI200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImporterExporterCodeVerificationAPI200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ImporterExporterCodeVerificationAPI200Response>() {
           @Override
           public void write(JsonWriter out, ImporterExporterCodeVerificationAPI200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImporterExporterCodeVerificationAPI200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImporterExporterCodeVerificationAPI200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImporterExporterCodeVerificationAPI200Response
   * @throws IOException if the JSON string is invalid with respect to ImporterExporterCodeVerificationAPI200Response
   */
  public static ImporterExporterCodeVerificationAPI200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImporterExporterCodeVerificationAPI200Response.class);
  }

  /**
   * Convert an instance of ImporterExporterCodeVerificationAPI200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

