/*
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImporterExporterCodeVerificationAPI200ResponseBranchInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:36:24.822521-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImporterExporterCodeVerificationAPI200ResponseBranchInner {
  public static final String SERIALIZED_NAME_BADD1 = "badd1";
  @SerializedName(SERIALIZED_NAME_BADD1)
  private String badd1;

  public static final String SERIALIZED_NAME_BADD2 = "badd2";
  @SerializedName(SERIALIZED_NAME_BADD2)
  private String badd2;

  public static final String SERIALIZED_NAME_BRANCH_CODE = "branchCode";
  @SerializedName(SERIALIZED_NAME_BRANCH_CODE)
  private String branchCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private String pin;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ImporterExporterCodeVerificationAPI200ResponseBranchInner() {
  }

  public ImporterExporterCodeVerificationAPI200ResponseBranchInner badd1(String badd1) {
    this.badd1 = badd1;
    return this;
  }

  /**
   * Get badd1
   * @return badd1
   */
  @javax.annotation.Nonnull
  public String getBadd1() {
    return badd1;
  }

  public void setBadd1(String badd1) {
    this.badd1 = badd1;
  }


  public ImporterExporterCodeVerificationAPI200ResponseBranchInner badd2(String badd2) {
    this.badd2 = badd2;
    return this;
  }

  /**
   * Get badd2
   * @return badd2
   */
  @javax.annotation.Nonnull
  public String getBadd2() {
    return badd2;
  }

  public void setBadd2(String badd2) {
    this.badd2 = badd2;
  }


  public ImporterExporterCodeVerificationAPI200ResponseBranchInner branchCode(String branchCode) {
    this.branchCode = branchCode;
    return this;
  }

  /**
   * Get branchCode
   * @return branchCode
   */
  @javax.annotation.Nonnull
  public String getBranchCode() {
    return branchCode;
  }

  public void setBranchCode(String branchCode) {
    this.branchCode = branchCode;
  }


  public ImporterExporterCodeVerificationAPI200ResponseBranchInner city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ImporterExporterCodeVerificationAPI200ResponseBranchInner pin(String pin) {
    this.pin = pin;
    return this;
  }

  /**
   * Get pin
   * @return pin
   */
  @javax.annotation.Nonnull
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }


  public ImporterExporterCodeVerificationAPI200ResponseBranchInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImporterExporterCodeVerificationAPI200ResponseBranchInner importerExporterCodeVerificationAPI200ResponseBranchInner = (ImporterExporterCodeVerificationAPI200ResponseBranchInner) o;
    return Objects.equals(this.badd1, importerExporterCodeVerificationAPI200ResponseBranchInner.badd1) &&
        Objects.equals(this.badd2, importerExporterCodeVerificationAPI200ResponseBranchInner.badd2) &&
        Objects.equals(this.branchCode, importerExporterCodeVerificationAPI200ResponseBranchInner.branchCode) &&
        Objects.equals(this.city, importerExporterCodeVerificationAPI200ResponseBranchInner.city) &&
        Objects.equals(this.pin, importerExporterCodeVerificationAPI200ResponseBranchInner.pin) &&
        Objects.equals(this.state, importerExporterCodeVerificationAPI200ResponseBranchInner.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badd1, badd2, branchCode, city, pin, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImporterExporterCodeVerificationAPI200ResponseBranchInner {\n");
    sb.append("    badd1: ").append(toIndentedString(badd1)).append("\n");
    sb.append("    badd2: ").append(toIndentedString(badd2)).append("\n");
    sb.append("    branchCode: ").append(toIndentedString(branchCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badd1");
    openapiFields.add("badd2");
    openapiFields.add("branchCode");
    openapiFields.add("city");
    openapiFields.add("pin");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("badd1");
    openapiRequiredFields.add("badd2");
    openapiRequiredFields.add("branchCode");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("pin");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImporterExporterCodeVerificationAPI200ResponseBranchInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImporterExporterCodeVerificationAPI200ResponseBranchInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImporterExporterCodeVerificationAPI200ResponseBranchInner is not found in the empty JSON string", ImporterExporterCodeVerificationAPI200ResponseBranchInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImporterExporterCodeVerificationAPI200ResponseBranchInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImporterExporterCodeVerificationAPI200ResponseBranchInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImporterExporterCodeVerificationAPI200ResponseBranchInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("badd1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badd1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badd1").toString()));
      }
      if (!jsonObj.get("badd2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badd2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badd2").toString()));
      }
      if (!jsonObj.get("branchCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchCode").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImporterExporterCodeVerificationAPI200ResponseBranchInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImporterExporterCodeVerificationAPI200ResponseBranchInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImporterExporterCodeVerificationAPI200ResponseBranchInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImporterExporterCodeVerificationAPI200ResponseBranchInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ImporterExporterCodeVerificationAPI200ResponseBranchInner>() {
           @Override
           public void write(JsonWriter out, ImporterExporterCodeVerificationAPI200ResponseBranchInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImporterExporterCodeVerificationAPI200ResponseBranchInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImporterExporterCodeVerificationAPI200ResponseBranchInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImporterExporterCodeVerificationAPI200ResponseBranchInner
   * @throws IOException if the JSON string is invalid with respect to ImporterExporterCodeVerificationAPI200ResponseBranchInner
   */
  public static ImporterExporterCodeVerificationAPI200ResponseBranchInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImporterExporterCodeVerificationAPI200ResponseBranchInner.class);
  }

  /**
   * Convert an instance of ImporterExporterCodeVerificationAPI200ResponseBranchInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

