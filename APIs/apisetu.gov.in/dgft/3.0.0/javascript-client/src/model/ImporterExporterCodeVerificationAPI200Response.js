/**
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImporterExporterCodeVerificationAPI200ResponseBranchInner from './ImporterExporterCodeVerificationAPI200ResponseBranchInner';
import ImporterExporterCodeVerificationAPI200ResponseDirectorsInner from './ImporterExporterCodeVerificationAPI200ResponseDirectorsInner';

/**
 * The ImporterExporterCodeVerificationAPI200Response model module.
 * @module model/ImporterExporterCodeVerificationAPI200Response
 * @version 3.0.0
 */
class ImporterExporterCodeVerificationAPI200Response {
    /**
     * Constructs a new <code>ImporterExporterCodeVerificationAPI200Response</code>.
     * @alias module:model/ImporterExporterCodeVerificationAPI200Response
     * @param addressLine1 {String} 
     * @param addressLine2 {String} 
     * @param branch {Array.<module:model/ImporterExporterCodeVerificationAPI200ResponseBranchInner>} 
     * @param city {String} 
     * @param dataAsOn {Date} 
     * @param directors {Array.<module:model/ImporterExporterCodeVerificationAPI200ResponseDirectorsInner>} 
     * @param entityName {String} 
     * @param exporterType {String} 
     * @param iec {String} 
     * @param iecIssueDate {String} 
     * @param iecModificationDate {String} 
     * @param iecStatus {String} 
     * @param natureOfConcern {String} 
     * @param pan {String} 
     * @param pin {String} 
     * @param state {String} 
     */
    constructor(addressLine1, addressLine2, branch, city, dataAsOn, directors, entityName, exporterType, iec, iecIssueDate, iecModificationDate, iecStatus, natureOfConcern, pan, pin, state) { 
        
        ImporterExporterCodeVerificationAPI200Response.initialize(this, addressLine1, addressLine2, branch, city, dataAsOn, directors, entityName, exporterType, iec, iecIssueDate, iecModificationDate, iecStatus, natureOfConcern, pan, pin, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressLine1, addressLine2, branch, city, dataAsOn, directors, entityName, exporterType, iec, iecIssueDate, iecModificationDate, iecStatus, natureOfConcern, pan, pin, state) { 
        obj['addressLine1'] = addressLine1;
        obj['addressLine2'] = addressLine2;
        obj['branch'] = branch;
        obj['city'] = city;
        obj['dataAsOn'] = dataAsOn;
        obj['directors'] = directors;
        obj['entityName'] = entityName;
        obj['exporterType'] = exporterType;
        obj['iec'] = iec;
        obj['iecIssueDate'] = iecIssueDate;
        obj['iecModificationDate'] = iecModificationDate;
        obj['iecStatus'] = iecStatus;
        obj['natureOfConcern'] = natureOfConcern;
        obj['pan'] = pan;
        obj['pin'] = pin;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>ImporterExporterCodeVerificationAPI200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImporterExporterCodeVerificationAPI200Response} obj Optional instance to populate.
     * @return {module:model/ImporterExporterCodeVerificationAPI200Response} The populated <code>ImporterExporterCodeVerificationAPI200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImporterExporterCodeVerificationAPI200Response();

            if (data.hasOwnProperty('addressLine1')) {
                obj['addressLine1'] = ApiClient.convertToType(data['addressLine1'], 'String');
            }
            if (data.hasOwnProperty('addressLine2')) {
                obj['addressLine2'] = ApiClient.convertToType(data['addressLine2'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], [ImporterExporterCodeVerificationAPI200ResponseBranchInner]);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('dataAsOn')) {
                obj['dataAsOn'] = ApiClient.convertToType(data['dataAsOn'], 'Date');
            }
            if (data.hasOwnProperty('directors')) {
                obj['directors'] = ApiClient.convertToType(data['directors'], [ImporterExporterCodeVerificationAPI200ResponseDirectorsInner]);
            }
            if (data.hasOwnProperty('entityName')) {
                obj['entityName'] = ApiClient.convertToType(data['entityName'], 'String');
            }
            if (data.hasOwnProperty('exporterType')) {
                obj['exporterType'] = ApiClient.convertToType(data['exporterType'], 'String');
            }
            if (data.hasOwnProperty('iec')) {
                obj['iec'] = ApiClient.convertToType(data['iec'], 'String');
            }
            if (data.hasOwnProperty('iecIssueDate')) {
                obj['iecIssueDate'] = ApiClient.convertToType(data['iecIssueDate'], 'String');
            }
            if (data.hasOwnProperty('iecModificationDate')) {
                obj['iecModificationDate'] = ApiClient.convertToType(data['iecModificationDate'], 'String');
            }
            if (data.hasOwnProperty('iecStatus')) {
                obj['iecStatus'] = ApiClient.convertToType(data['iecStatus'], 'String');
            }
            if (data.hasOwnProperty('natureOfConcern')) {
                obj['natureOfConcern'] = ApiClient.convertToType(data['natureOfConcern'], 'String');
            }
            if (data.hasOwnProperty('pan')) {
                obj['pan'] = ApiClient.convertToType(data['pan'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImporterExporterCodeVerificationAPI200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImporterExporterCodeVerificationAPI200Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImporterExporterCodeVerificationAPI200Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressLine1'] && !(typeof data['addressLine1'] === 'string' || data['addressLine1'] instanceof String)) {
            throw new Error("Expected the field `addressLine1` to be a primitive type in the JSON string but got " + data['addressLine1']);
        }
        // ensure the json data is a string
        if (data['addressLine2'] && !(typeof data['addressLine2'] === 'string' || data['addressLine2'] instanceof String)) {
            throw new Error("Expected the field `addressLine2` to be a primitive type in the JSON string but got " + data['addressLine2']);
        }
        if (data['branch']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['branch'])) {
                throw new Error("Expected the field `branch` to be an array in the JSON data but got " + data['branch']);
            }
            // validate the optional field `branch` (array)
            for (const item of data['branch']) {
                ImporterExporterCodeVerificationAPI200ResponseBranchInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        if (data['directors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['directors'])) {
                throw new Error("Expected the field `directors` to be an array in the JSON data but got " + data['directors']);
            }
            // validate the optional field `directors` (array)
            for (const item of data['directors']) {
                ImporterExporterCodeVerificationAPI200ResponseDirectorsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entityName'] && !(typeof data['entityName'] === 'string' || data['entityName'] instanceof String)) {
            throw new Error("Expected the field `entityName` to be a primitive type in the JSON string but got " + data['entityName']);
        }
        // ensure the json data is a string
        if (data['exporterType'] && !(typeof data['exporterType'] === 'string' || data['exporterType'] instanceof String)) {
            throw new Error("Expected the field `exporterType` to be a primitive type in the JSON string but got " + data['exporterType']);
        }
        // ensure the json data is a string
        if (data['iec'] && !(typeof data['iec'] === 'string' || data['iec'] instanceof String)) {
            throw new Error("Expected the field `iec` to be a primitive type in the JSON string but got " + data['iec']);
        }
        // ensure the json data is a string
        if (data['iecIssueDate'] && !(typeof data['iecIssueDate'] === 'string' || data['iecIssueDate'] instanceof String)) {
            throw new Error("Expected the field `iecIssueDate` to be a primitive type in the JSON string but got " + data['iecIssueDate']);
        }
        // ensure the json data is a string
        if (data['iecModificationDate'] && !(typeof data['iecModificationDate'] === 'string' || data['iecModificationDate'] instanceof String)) {
            throw new Error("Expected the field `iecModificationDate` to be a primitive type in the JSON string but got " + data['iecModificationDate']);
        }
        // ensure the json data is a string
        if (data['iecStatus'] && !(typeof data['iecStatus'] === 'string' || data['iecStatus'] instanceof String)) {
            throw new Error("Expected the field `iecStatus` to be a primitive type in the JSON string but got " + data['iecStatus']);
        }
        // ensure the json data is a string
        if (data['natureOfConcern'] && !(typeof data['natureOfConcern'] === 'string' || data['natureOfConcern'] instanceof String)) {
            throw new Error("Expected the field `natureOfConcern` to be a primitive type in the JSON string but got " + data['natureOfConcern']);
        }
        // ensure the json data is a string
        if (data['pan'] && !(typeof data['pan'] === 'string' || data['pan'] instanceof String)) {
            throw new Error("Expected the field `pan` to be a primitive type in the JSON string but got " + data['pan']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

ImporterExporterCodeVerificationAPI200Response.RequiredProperties = ["addressLine1", "addressLine2", "branch", "city", "dataAsOn", "directors", "entityName", "exporterType", "iec", "iecIssueDate", "iecModificationDate", "iecStatus", "natureOfConcern", "pan", "pin", "state"];

/**
 * @member {String} addressLine1
 */
ImporterExporterCodeVerificationAPI200Response.prototype['addressLine1'] = undefined;

/**
 * @member {String} addressLine2
 */
ImporterExporterCodeVerificationAPI200Response.prototype['addressLine2'] = undefined;

/**
 * @member {Array.<module:model/ImporterExporterCodeVerificationAPI200ResponseBranchInner>} branch
 */
ImporterExporterCodeVerificationAPI200Response.prototype['branch'] = undefined;

/**
 * @member {String} city
 */
ImporterExporterCodeVerificationAPI200Response.prototype['city'] = undefined;

/**
 * @member {Date} dataAsOn
 */
ImporterExporterCodeVerificationAPI200Response.prototype['dataAsOn'] = undefined;

/**
 * @member {Array.<module:model/ImporterExporterCodeVerificationAPI200ResponseDirectorsInner>} directors
 */
ImporterExporterCodeVerificationAPI200Response.prototype['directors'] = undefined;

/**
 * @member {String} entityName
 */
ImporterExporterCodeVerificationAPI200Response.prototype['entityName'] = undefined;

/**
 * @member {String} exporterType
 */
ImporterExporterCodeVerificationAPI200Response.prototype['exporterType'] = undefined;

/**
 * @member {String} iec
 */
ImporterExporterCodeVerificationAPI200Response.prototype['iec'] = undefined;

/**
 * @member {String} iecIssueDate
 */
ImporterExporterCodeVerificationAPI200Response.prototype['iecIssueDate'] = undefined;

/**
 * @member {String} iecModificationDate
 */
ImporterExporterCodeVerificationAPI200Response.prototype['iecModificationDate'] = undefined;

/**
 * @member {String} iecStatus
 */
ImporterExporterCodeVerificationAPI200Response.prototype['iecStatus'] = undefined;

/**
 * @member {String} natureOfConcern
 */
ImporterExporterCodeVerificationAPI200Response.prototype['natureOfConcern'] = undefined;

/**
 * @member {String} pan
 */
ImporterExporterCodeVerificationAPI200Response.prototype['pan'] = undefined;

/**
 * @member {String} pin
 */
ImporterExporterCodeVerificationAPI200Response.prototype['pin'] = undefined;

/**
 * @member {String} state
 */
ImporterExporterCodeVerificationAPI200Response.prototype['state'] = undefined;






export default ImporterExporterCodeVerificationAPI200Response;

