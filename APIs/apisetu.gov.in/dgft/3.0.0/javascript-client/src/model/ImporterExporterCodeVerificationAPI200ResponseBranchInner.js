/**
 * Importer-Exporter Details API
 * The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImporterExporterCodeVerificationAPI200ResponseBranchInner model module.
 * @module model/ImporterExporterCodeVerificationAPI200ResponseBranchInner
 * @version 3.0.0
 */
class ImporterExporterCodeVerificationAPI200ResponseBranchInner {
    /**
     * Constructs a new <code>ImporterExporterCodeVerificationAPI200ResponseBranchInner</code>.
     * @alias module:model/ImporterExporterCodeVerificationAPI200ResponseBranchInner
     * @param badd1 {String} 
     * @param badd2 {String} 
     * @param branchCode {String} 
     * @param city {String} 
     * @param pin {String} 
     * @param state {String} 
     */
    constructor(badd1, badd2, branchCode, city, pin, state) { 
        
        ImporterExporterCodeVerificationAPI200ResponseBranchInner.initialize(this, badd1, badd2, branchCode, city, pin, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, badd1, badd2, branchCode, city, pin, state) { 
        obj['badd1'] = badd1;
        obj['badd2'] = badd2;
        obj['branchCode'] = branchCode;
        obj['city'] = city;
        obj['pin'] = pin;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>ImporterExporterCodeVerificationAPI200ResponseBranchInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImporterExporterCodeVerificationAPI200ResponseBranchInner} obj Optional instance to populate.
     * @return {module:model/ImporterExporterCodeVerificationAPI200ResponseBranchInner} The populated <code>ImporterExporterCodeVerificationAPI200ResponseBranchInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImporterExporterCodeVerificationAPI200ResponseBranchInner();

            if (data.hasOwnProperty('badd1')) {
                obj['badd1'] = ApiClient.convertToType(data['badd1'], 'String');
            }
            if (data.hasOwnProperty('badd2')) {
                obj['badd2'] = ApiClient.convertToType(data['badd2'], 'String');
            }
            if (data.hasOwnProperty('branchCode')) {
                obj['branchCode'] = ApiClient.convertToType(data['branchCode'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImporterExporterCodeVerificationAPI200ResponseBranchInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImporterExporterCodeVerificationAPI200ResponseBranchInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImporterExporterCodeVerificationAPI200ResponseBranchInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['badd1'] && !(typeof data['badd1'] === 'string' || data['badd1'] instanceof String)) {
            throw new Error("Expected the field `badd1` to be a primitive type in the JSON string but got " + data['badd1']);
        }
        // ensure the json data is a string
        if (data['badd2'] && !(typeof data['badd2'] === 'string' || data['badd2'] instanceof String)) {
            throw new Error("Expected the field `badd2` to be a primitive type in the JSON string but got " + data['badd2']);
        }
        // ensure the json data is a string
        if (data['branchCode'] && !(typeof data['branchCode'] === 'string' || data['branchCode'] instanceof String)) {
            throw new Error("Expected the field `branchCode` to be a primitive type in the JSON string but got " + data['branchCode']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

ImporterExporterCodeVerificationAPI200ResponseBranchInner.RequiredProperties = ["badd1", "badd2", "branchCode", "city", "pin", "state"];

/**
 * @member {String} badd1
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['badd1'] = undefined;

/**
 * @member {String} badd2
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['badd2'] = undefined;

/**
 * @member {String} branchCode
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['branchCode'] = undefined;

/**
 * @member {String} city
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['city'] = undefined;

/**
 * @member {String} pin
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['pin'] = undefined;

/**
 * @member {String} state
 */
ImporterExporterCodeVerificationAPI200ResponseBranchInner.prototype['state'] = undefined;






export default ImporterExporterCodeVerificationAPI200ResponseBranchInner;

