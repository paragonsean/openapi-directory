# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artifact_schema_consent_permission_date_range import ConsentArtifactSchemaConsentPermissionDateRange
from openapi_server.models.consent_artifact_schema_consent_permission_frequency import ConsentArtifactSchemaConsentPermissionFrequency
from openapi_server import util


class ConsentArtifactSchemaConsentPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, date_range: ConsentArtifactSchemaConsentPermissionDateRange=None, frequency: ConsentArtifactSchemaConsentPermissionFrequency=None):
        """ConsentArtifactSchemaConsentPermission - a model defined in OpenAPI

        :param access: The access of this ConsentArtifactSchemaConsentPermission.
        :param date_range: The date_range of this ConsentArtifactSchemaConsentPermission.
        :param frequency: The frequency of this ConsentArtifactSchemaConsentPermission.
        """
        self.openapi_types = {
            'access': str,
            'date_range': ConsentArtifactSchemaConsentPermissionDateRange,
            'frequency': ConsentArtifactSchemaConsentPermissionFrequency
        }

        self.attribute_map = {
            'access': 'access',
            'date_range': 'dateRange',
            'frequency': 'frequency'
        }

        self._access = access
        self._date_range = date_range
        self._frequency = frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentArtifactSchemaConsentPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentArtifactSchema_consent_permission of this ConsentArtifactSchemaConsentPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this ConsentArtifactSchemaConsentPermission.


        :return: The access of this ConsentArtifactSchemaConsentPermission.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this ConsentArtifactSchemaConsentPermission.


        :param access: The access of this ConsentArtifactSchemaConsentPermission.
        :type access: str
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")
        if access is not None and len(access) < 1:
            raise ValueError("Invalid value for `access`, length must be greater than or equal to `1`")

        self._access = access

    @property
    def date_range(self):
        """Gets the date_range of this ConsentArtifactSchemaConsentPermission.


        :return: The date_range of this ConsentArtifactSchemaConsentPermission.
        :rtype: ConsentArtifactSchemaConsentPermissionDateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this ConsentArtifactSchemaConsentPermission.


        :param date_range: The date_range of this ConsentArtifactSchemaConsentPermission.
        :type date_range: ConsentArtifactSchemaConsentPermissionDateRange
        """
        if date_range is None:
            raise ValueError("Invalid value for `date_range`, must not be `None`")

        self._date_range = date_range

    @property
    def frequency(self):
        """Gets the frequency of this ConsentArtifactSchemaConsentPermission.


        :return: The frequency of this ConsentArtifactSchemaConsentPermission.
        :rtype: ConsentArtifactSchemaConsentPermissionFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ConsentArtifactSchemaConsentPermission.


        :param frequency: The frequency of this ConsentArtifactSchemaConsentPermission.
        :type frequency: ConsentArtifactSchemaConsentPermissionFrequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency
