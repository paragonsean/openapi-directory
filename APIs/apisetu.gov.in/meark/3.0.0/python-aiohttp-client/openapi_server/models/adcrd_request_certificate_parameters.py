# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdcrdRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, prn_no: str=None, request_id: str=None):
        """AdcrdRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this AdcrdRequestCertificateParameters.
        :param prn_no: The prn_no of this AdcrdRequestCertificateParameters.
        :param request_id: The request_id of this AdcrdRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'prn_no': str,
            'request_id': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'prn_no': 'PrnNo',
            'request_id': 'RequestId'
        }

        self._dob = dob
        self._prn_no = prn_no
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdcrdRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The adcrd_request_certificateParameters of this AdcrdRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this AdcrdRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this AdcrdRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this AdcrdRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this AdcrdRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def prn_no(self):
        """Gets the prn_no of this AdcrdRequestCertificateParameters.

        PRN No.

        :return: The prn_no of this AdcrdRequestCertificateParameters.
        :rtype: str
        """
        return self._prn_no

    @prn_no.setter
    def prn_no(self, prn_no):
        """Sets the prn_no of this AdcrdRequestCertificateParameters.

        PRN No.

        :param prn_no: The prn_no of this AdcrdRequestCertificateParameters.
        :type prn_no: str
        """
        if prn_no is None:
            raise ValueError("Invalid value for `prn_no`, must not be `None`")

        self._prn_no = prn_no

    @property
    def request_id(self):
        """Gets the request_id of this AdcrdRequestCertificateParameters.

        Request ID

        :return: The request_id of this AdcrdRequestCertificateParameters.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AdcrdRequestCertificateParameters.

        Request ID

        :param request_id: The request_id of this AdcrdRequestCertificateParameters.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
