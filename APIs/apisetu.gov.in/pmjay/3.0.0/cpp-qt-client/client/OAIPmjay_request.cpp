/**
 * National Health Authority
 * More than 8 Crore PM-JAY e-cards are now available on DigiLocker.Beneficiaries can access PMJAY e-cards on their respective Digilocker account under issued document section.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPmjay_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPmjay_request::OAIPmjay_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPmjay_request::OAIPmjay_request() {
    this->initializeModel();
}

OAIPmjay_request::~OAIPmjay_request() {}

void OAIPmjay_request::initializeModel() {

    m_certificate_parameters_isSet = false;
    m_certificate_parameters_isValid = false;

    m_consent_artifact_isSet = false;
    m_consent_artifact_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_txn_id_isSet = false;
    m_txn_id_isValid = false;
}

void OAIPmjay_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPmjay_request::fromJsonObject(QJsonObject json) {

    m_certificate_parameters_isValid = ::OpenAPI::fromJsonValue(m_certificate_parameters, json[QString("certificateParameters")]);
    m_certificate_parameters_isSet = !json[QString("certificateParameters")].isNull() && m_certificate_parameters_isValid;

    m_consent_artifact_isValid = ::OpenAPI::fromJsonValue(m_consent_artifact, json[QString("consentArtifact")]);
    m_consent_artifact_isSet = !json[QString("consentArtifact")].isNull() && m_consent_artifact_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_txn_id_isValid = ::OpenAPI::fromJsonValue(m_txn_id, json[QString("txnId")]);
    m_txn_id_isSet = !json[QString("txnId")].isNull() && m_txn_id_isValid;
}

QString OAIPmjay_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPmjay_request::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_parameters.isSet()) {
        obj.insert(QString("certificateParameters"), ::OpenAPI::toJsonValue(m_certificate_parameters));
    }
    if (m_consent_artifact.isSet()) {
        obj.insert(QString("consentArtifact"), ::OpenAPI::toJsonValue(m_consent_artifact));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_txn_id_isSet) {
        obj.insert(QString("txnId"), ::OpenAPI::toJsonValue(m_txn_id));
    }
    return obj;
}

OAIPmjay_request_certificateParameters OAIPmjay_request::getCertificateParameters() const {
    return m_certificate_parameters;
}
void OAIPmjay_request::setCertificateParameters(const OAIPmjay_request_certificateParameters &certificate_parameters) {
    m_certificate_parameters = certificate_parameters;
    m_certificate_parameters_isSet = true;
}

bool OAIPmjay_request::is_certificate_parameters_Set() const{
    return m_certificate_parameters_isSet;
}

bool OAIPmjay_request::is_certificate_parameters_Valid() const{
    return m_certificate_parameters_isValid;
}

OAIConsentArtifactSchema OAIPmjay_request::getConsentArtifact() const {
    return m_consent_artifact;
}
void OAIPmjay_request::setConsentArtifact(const OAIConsentArtifactSchema &consent_artifact) {
    m_consent_artifact = consent_artifact;
    m_consent_artifact_isSet = true;
}

bool OAIPmjay_request::is_consent_artifact_Set() const{
    return m_consent_artifact_isSet;
}

bool OAIPmjay_request::is_consent_artifact_Valid() const{
    return m_consent_artifact_isValid;
}

QString OAIPmjay_request::getFormat() const {
    return m_format;
}
void OAIPmjay_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPmjay_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPmjay_request::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIPmjay_request::getTxnId() const {
    return m_txn_id;
}
void OAIPmjay_request::setTxnId(const QString &txn_id) {
    m_txn_id = txn_id;
    m_txn_id_isSet = true;
}

bool OAIPmjay_request::is_txn_id_Set() const{
    return m_txn_id_isSet;
}

bool OAIPmjay_request::is_txn_id_Valid() const{
    return m_txn_id_isValid;
}

bool OAIPmjay_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPmjay_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_txn_id_isValid && true;
}

} // namespace OpenAPI
