# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcademicCertificateSchemaCertificateDataExamination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, month: str=None, name: str=None, year: str=None):
        """AcademicCertificateSchemaCertificateDataExamination - a model defined in OpenAPI

        :param month: The month of this AcademicCertificateSchemaCertificateDataExamination.
        :param name: The name of this AcademicCertificateSchemaCertificateDataExamination.
        :param year: The year of this AcademicCertificateSchemaCertificateDataExamination.
        """
        self.openapi_types = {
            'month': str,
            'name': str,
            'year': str
        }

        self.attribute_map = {
            'month': 'month',
            'name': 'name',
            'year': 'year'
        }

        self._month = month
        self._name = name
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcademicCertificateSchemaCertificateDataExamination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcademicCertificateSchema_CertificateData_Examination of this AcademicCertificateSchemaCertificateDataExamination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def month(self):
        """Gets the month of this AcademicCertificateSchemaCertificateDataExamination.


        :return: The month of this AcademicCertificateSchemaCertificateDataExamination.
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this AcademicCertificateSchemaCertificateDataExamination.


        :param month: The month of this AcademicCertificateSchemaCertificateDataExamination.
        :type month: str
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")
        if month is not None and len(month) < 1:
            raise ValueError("Invalid value for `month`, length must be greater than or equal to `1`")

        self._month = month

    @property
    def name(self):
        """Gets the name of this AcademicCertificateSchemaCertificateDataExamination.


        :return: The name of this AcademicCertificateSchemaCertificateDataExamination.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcademicCertificateSchemaCertificateDataExamination.


        :param name: The name of this AcademicCertificateSchemaCertificateDataExamination.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def year(self):
        """Gets the year of this AcademicCertificateSchemaCertificateDataExamination.


        :return: The year of this AcademicCertificateSchemaCertificateDataExamination.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AcademicCertificateSchemaCertificateDataExamination.


        :param year: The year of this AcademicCertificateSchemaCertificateDataExamination.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")
        if year is not None and len(year) < 1:
            raise ValueError("Invalid value for `year`, length must be greater than or equal to `1`")

        self._year = year
