/**
 * Rajasthan Board of Secondary Education
 * Board of High School and Intermediate Education, Rajasthan (http://rajeduboard.rajasthan.gov.in/) has made available Class X (2018-2019)& Class XII (2019) mark sheet available on DigiLocker, which can be pulled by students into their respective accounts
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISscer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISscer_request_certificateParameters::OAISscer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISscer_request_certificateParameters::OAISscer_request_certificateParameters() {
    this->initializeModel();
}

OAISscer_request_certificateParameters::~OAISscer_request_certificateParameters() {}

void OAISscer_request_certificateParameters::initializeModel() {

    m_cname_isSet = false;
    m_cname_isValid = false;

    m_roll_isSet = false;
    m_roll_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAISscer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISscer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cname_isValid = ::OpenAPI::fromJsonValue(m_cname, json[QString("CNAME")]);
    m_cname_isSet = !json[QString("CNAME")].isNull() && m_cname_isValid;

    m_roll_isValid = ::OpenAPI::fromJsonValue(m_roll, json[QString("ROLL")]);
    m_roll_isSet = !json[QString("ROLL")].isNull() && m_roll_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("YEAR")]);
    m_year_isSet = !json[QString("YEAR")].isNull() && m_year_isValid;
}

QString OAISscer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISscer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cname_isSet) {
        obj.insert(QString("CNAME"), ::OpenAPI::toJsonValue(m_cname));
    }
    if (m_roll_isSet) {
        obj.insert(QString("ROLL"), ::OpenAPI::toJsonValue(m_roll));
    }
    if (m_year_isSet) {
        obj.insert(QString("YEAR"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAISscer_request_certificateParameters::getCname() const {
    return m_cname;
}
void OAISscer_request_certificateParameters::setCname(const QString &cname) {
    m_cname = cname;
    m_cname_isSet = true;
}

bool OAISscer_request_certificateParameters::is_cname_Set() const{
    return m_cname_isSet;
}

bool OAISscer_request_certificateParameters::is_cname_Valid() const{
    return m_cname_isValid;
}

QString OAISscer_request_certificateParameters::getRoll() const {
    return m_roll;
}
void OAISscer_request_certificateParameters::setRoll(const QString &roll) {
    m_roll = roll;
    m_roll_isSet = true;
}

bool OAISscer_request_certificateParameters::is_roll_Set() const{
    return m_roll_isSet;
}

bool OAISscer_request_certificateParameters::is_roll_Valid() const{
    return m_roll_isValid;
}

QString OAISscer_request_certificateParameters::getYear() const {
    return m_year;
}
void OAISscer_request_certificateParameters::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAISscer_request_certificateParameters::is_year_Set() const{
    return m_year_isSet;
}

bool OAISscer_request_certificateParameters::is_year_Valid() const{
    return m_year_isValid;
}

bool OAISscer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISscer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cname_isValid && m_roll_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
