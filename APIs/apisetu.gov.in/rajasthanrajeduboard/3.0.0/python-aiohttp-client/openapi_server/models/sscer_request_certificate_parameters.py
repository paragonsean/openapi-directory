# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cname: str=None, roll: str=None, year: str=None):
        """SscerRequestCertificateParameters - a model defined in OpenAPI

        :param cname: The cname of this SscerRequestCertificateParameters.
        :param roll: The roll of this SscerRequestCertificateParameters.
        :param year: The year of this SscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cname': str,
            'roll': str,
            'year': str
        }

        self.attribute_map = {
            'cname': 'CNAME',
            'roll': 'ROLL',
            'year': 'YEAR'
        }

        self._cname = cname
        self._roll = roll
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sscer_request_certificateParameters of this SscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cname(self):
        """Gets the cname of this SscerRequestCertificateParameters.

        Candidate Name

        :return: The cname of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this SscerRequestCertificateParameters.

        Candidate Name

        :param cname: The cname of this SscerRequestCertificateParameters.
        :type cname: str
        """
        if cname is None:
            raise ValueError("Invalid value for `cname`, must not be `None`")

        self._cname = cname

    @property
    def roll(self):
        """Gets the roll of this SscerRequestCertificateParameters.

        ROLL Number

        :return: The roll of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this SscerRequestCertificateParameters.

        ROLL Number

        :param roll: The roll of this SscerRequestCertificateParameters.
        :type roll: str
        """
        if roll is None:
            raise ValueError("Invalid value for `roll`, must not be `None`")

        self._roll = roll

    @property
    def year(self):
        """Gets the year of this SscerRequestCertificateParameters.

        YEAR

        :return: The year of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SscerRequestCertificateParameters.

        YEAR

        :param year: The year of this SscerRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
