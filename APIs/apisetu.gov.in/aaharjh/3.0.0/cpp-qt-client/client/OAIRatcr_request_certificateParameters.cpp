/**
 * Department of Food, Public Distribution & Consumer Affairs (PDS), Jharkhand
 * Public distribution system (PDS) is an Indian food security system. Established by the Government of India under Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. Jharkhand PDS Ration Card Certificates is available in Digilocker for Citizen.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatcr_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatcr_request_certificateParameters::OAIRatcr_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatcr_request_certificateParameters::OAIRatcr_request_certificateParameters() {
    this->initializeModel();
}

OAIRatcr_request_certificateParameters::~OAIRatcr_request_certificateParameters() {}

void OAIRatcr_request_certificateParameters::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIRatcr_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatcr_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("GENDER")]);
    m_gender_isSet = !json[QString("GENDER")].isNull() && m_gender_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;
}

QString OAIRatcr_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatcr_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("GENDER"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIRatcr_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAIRatcr_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIRatcr_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIRatcr_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIRatcr_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIRatcr_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIRatcr_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIRatcr_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIRatcr_request_certificateParameters::getGender() const {
    return m_gender;
}
void OAIRatcr_request_certificateParameters::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIRatcr_request_certificateParameters::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIRatcr_request_certificateParameters::is_gender_Valid() const{
    return m_gender_isValid;
}

QString OAIRatcr_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAIRatcr_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRatcr_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRatcr_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIRatcr_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatcr_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_full_name_isValid && m_gender_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
