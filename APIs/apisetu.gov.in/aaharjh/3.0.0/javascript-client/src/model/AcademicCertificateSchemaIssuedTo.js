/**
 * Department of Food, Public Distribution & Consumer Affairs (PDS), Jharkhand
 * Public distribution system (PDS) is an Indian food security system. Established by the Government of India under Ministry of Consumer Affairs, Food, and Public Distribution and managed jointly with state governments in India. Jharkhand PDS Ration Card Certificates is available in Digilocker for Citizen.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcademicCertificateSchemaIssuedToPerson from './AcademicCertificateSchemaIssuedToPerson';

/**
 * The AcademicCertificateSchemaIssuedTo model module.
 * @module model/AcademicCertificateSchemaIssuedTo
 * @version 3.0.0
 */
class AcademicCertificateSchemaIssuedTo {
    /**
     * Constructs a new <code>AcademicCertificateSchemaIssuedTo</code>.
     * @alias module:model/AcademicCertificateSchemaIssuedTo
     * @param person {module:model/AcademicCertificateSchemaIssuedToPerson} 
     */
    constructor(person) { 
        
        AcademicCertificateSchemaIssuedTo.initialize(this, person);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, person) { 
        obj['Person'] = person;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaIssuedTo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaIssuedTo} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaIssuedTo} The populated <code>AcademicCertificateSchemaIssuedTo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaIssuedTo();

            if (data.hasOwnProperty('Person')) {
                obj['Person'] = AcademicCertificateSchemaIssuedToPerson.constructFromObject(data['Person']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaIssuedTo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaIssuedTo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaIssuedTo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Person`
        if (data['Person']) { // data not null
          AcademicCertificateSchemaIssuedToPerson.validateJSON(data['Person']);
        }

        return true;
    }


}

AcademicCertificateSchemaIssuedTo.RequiredProperties = ["Person"];

/**
 * @member {module:model/AcademicCertificateSchemaIssuedToPerson} Person
 */
AcademicCertificateSchemaIssuedTo.prototype['Person'] = undefined;






export default AcademicCertificateSchemaIssuedTo;

