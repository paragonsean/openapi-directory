# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vehicle_registration_schema_certificate_data_vehicle_registration_insurance import VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance
from openapi_server.models.vehicle_registration_schema_certificate_data_vehicle_registration_vehicle import VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle
from openapi_server import util


class VehicleRegistrationSchemaCertificateDataVehicleRegistration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insurance: VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance=None, vehicle: VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle=None, financer: str=None, norms_desc: str=None, status_date: str=None):
        """VehicleRegistrationSchemaCertificateDataVehicleRegistration - a model defined in OpenAPI

        :param insurance: The insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :param vehicle: The vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :param financer: The financer of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :param norms_desc: The norms_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :param status_date: The status_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        """
        self.openapi_types = {
            'insurance': VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance,
            'vehicle': VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle,
            'financer': str,
            'norms_desc': str,
            'status_date': str
        }

        self.attribute_map = {
            'insurance': 'Insurance',
            'vehicle': 'Vehicle',
            'financer': 'financer',
            'norms_desc': 'normsDesc',
            'status_date': 'statusDate'
        }

        self._insurance = insurance
        self._vehicle = vehicle
        self._financer = financer
        self._norms_desc = norms_desc
        self._status_date = status_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleRegistrationSchemaCertificateDataVehicleRegistration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleRegistrationSchema_CertificateData_VehicleRegistration of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insurance(self):
        """Gets the insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :return: The insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :rtype: VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :param insurance: The insurance of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :type insurance: VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance
        """

        self._insurance = insurance

    @property
    def vehicle(self):
        """Gets the vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :return: The vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :rtype: VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :param vehicle: The vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :type vehicle: VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle
        """

        self._vehicle = vehicle

    @property
    def financer(self):
        """Gets the financer of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :return: The financer of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :rtype: str
        """
        return self._financer

    @financer.setter
    def financer(self, financer):
        """Sets the financer of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :param financer: The financer of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :type financer: str
        """
        if financer is None:
            raise ValueError("Invalid value for `financer`, must not be `None`")
        if financer is not None and len(financer) < 1:
            raise ValueError("Invalid value for `financer`, length must be greater than or equal to `1`")

        self._financer = financer

    @property
    def norms_desc(self):
        """Gets the norms_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :return: The norms_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :rtype: str
        """
        return self._norms_desc

    @norms_desc.setter
    def norms_desc(self, norms_desc):
        """Sets the norms_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :param norms_desc: The norms_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :type norms_desc: str
        """
        if norms_desc is None:
            raise ValueError("Invalid value for `norms_desc`, must not be `None`")

        self._norms_desc = norms_desc

    @property
    def status_date(self):
        """Gets the status_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :return: The status_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :rtype: str
        """
        return self._status_date

    @status_date.setter
    def status_date(self, status_date):
        """Sets the status_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.


        :param status_date: The status_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistration.
        :type status_date: str
        """
        if status_date is None:
            raise ValueError("Invalid value for `status_date`, must not be `None`")
        if status_date is not None and len(status_date) < 1:
            raise ValueError("Invalid value for `status_date`, length must be greater than or equal to `1`")

        self._status_date = status_date
