# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chasis_no: str=None, _class: object=None, color: str=None, cubic_capacity: object=None, cylinder: object=None, engine_no: str=None, fit_till: object=None, fuel_desc: object=None, make: object=None, mfg_date: object=None, model: str=None, seat_capacity: str=None, sleeper_capacity: str=None, standing_capacity: object=None, unladen_weight: str=None, wheelbase: object=None):
        """VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle - a model defined in OpenAPI

        :param chasis_no: The chasis_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param _class: The _class of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param color: The color of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param cubic_capacity: The cubic_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param cylinder: The cylinder of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param engine_no: The engine_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param fit_till: The fit_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param fuel_desc: The fuel_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param make: The make of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param mfg_date: The mfg_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param model: The model of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param seat_capacity: The seat_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param sleeper_capacity: The sleeper_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param standing_capacity: The standing_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param unladen_weight: The unladen_weight of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :param wheelbase: The wheelbase of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        """
        self.openapi_types = {
            'chasis_no': str,
            '_class': object,
            'color': str,
            'cubic_capacity': object,
            'cylinder': object,
            'engine_no': str,
            'fit_till': object,
            'fuel_desc': object,
            'make': object,
            'mfg_date': object,
            'model': str,
            'seat_capacity': str,
            'sleeper_capacity': str,
            'standing_capacity': object,
            'unladen_weight': str,
            'wheelbase': object
        }

        self.attribute_map = {
            'chasis_no': 'chasisNo',
            '_class': 'class',
            'color': 'color',
            'cubic_capacity': 'cubicCapacity',
            'cylinder': 'cylinder',
            'engine_no': 'engineNo',
            'fit_till': 'fitTill',
            'fuel_desc': 'fuelDesc',
            'make': 'make',
            'mfg_date': 'mfgDate',
            'model': 'model',
            'seat_capacity': 'seatCapacity',
            'sleeper_capacity': 'sleeperCapacity',
            'standing_capacity': 'standingCapacity',
            'unladen_weight': 'unladenWeight',
            'wheelbase': 'wheelbase'
        }

        self._chasis_no = chasis_no
        self.__class = _class
        self._color = color
        self._cubic_capacity = cubic_capacity
        self._cylinder = cylinder
        self._engine_no = engine_no
        self._fit_till = fit_till
        self._fuel_desc = fuel_desc
        self._make = make
        self._mfg_date = mfg_date
        self._model = model
        self._seat_capacity = seat_capacity
        self._sleeper_capacity = sleeper_capacity
        self._standing_capacity = standing_capacity
        self._unladen_weight = unladen_weight
        self._wheelbase = wheelbase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chasis_no(self):
        """Gets the chasis_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The chasis_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._chasis_no

    @chasis_no.setter
    def chasis_no(self, chasis_no):
        """Sets the chasis_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param chasis_no: The chasis_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type chasis_no: str
        """
        if chasis_no is not None and len(chasis_no) < 1:
            raise ValueError("Invalid value for `chasis_no`, length must be greater than or equal to `1`")

        self._chasis_no = chasis_no

    @property
    def _class(self):
        """Gets the _class of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The _class of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param _class: The _class of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type _class: object
        """

        self.__class = _class

    @property
    def color(self):
        """Gets the color of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The color of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param color: The color of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type color: str
        """

        self._color = color

    @property
    def cubic_capacity(self):
        """Gets the cubic_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The cubic_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._cubic_capacity

    @cubic_capacity.setter
    def cubic_capacity(self, cubic_capacity):
        """Sets the cubic_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param cubic_capacity: The cubic_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type cubic_capacity: object
        """

        self._cubic_capacity = cubic_capacity

    @property
    def cylinder(self):
        """Gets the cylinder of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The cylinder of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._cylinder

    @cylinder.setter
    def cylinder(self, cylinder):
        """Sets the cylinder of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param cylinder: The cylinder of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type cylinder: object
        """

        self._cylinder = cylinder

    @property
    def engine_no(self):
        """Gets the engine_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The engine_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._engine_no

    @engine_no.setter
    def engine_no(self, engine_no):
        """Sets the engine_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param engine_no: The engine_no of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type engine_no: str
        """

        self._engine_no = engine_no

    @property
    def fit_till(self):
        """Gets the fit_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The fit_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._fit_till

    @fit_till.setter
    def fit_till(self, fit_till):
        """Sets the fit_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param fit_till: The fit_till of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type fit_till: object
        """

        self._fit_till = fit_till

    @property
    def fuel_desc(self):
        """Gets the fuel_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The fuel_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._fuel_desc

    @fuel_desc.setter
    def fuel_desc(self, fuel_desc):
        """Sets the fuel_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param fuel_desc: The fuel_desc of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type fuel_desc: object
        """

        self._fuel_desc = fuel_desc

    @property
    def make(self):
        """Gets the make of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The make of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param make: The make of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type make: object
        """

        self._make = make

    @property
    def mfg_date(self):
        """Gets the mfg_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The mfg_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._mfg_date

    @mfg_date.setter
    def mfg_date(self, mfg_date):
        """Sets the mfg_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param mfg_date: The mfg_date of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type mfg_date: object
        """

        self._mfg_date = mfg_date

    @property
    def model(self):
        """Gets the model of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The model of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param model: The model of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type model: str
        """
        if model is not None and len(model) < 1:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `1`")

        self._model = model

    @property
    def seat_capacity(self):
        """Gets the seat_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The seat_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._seat_capacity

    @seat_capacity.setter
    def seat_capacity(self, seat_capacity):
        """Sets the seat_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param seat_capacity: The seat_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type seat_capacity: str
        """
        if seat_capacity is not None and len(seat_capacity) < 1:
            raise ValueError("Invalid value for `seat_capacity`, length must be greater than or equal to `1`")

        self._seat_capacity = seat_capacity

    @property
    def sleeper_capacity(self):
        """Gets the sleeper_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The sleeper_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._sleeper_capacity

    @sleeper_capacity.setter
    def sleeper_capacity(self, sleeper_capacity):
        """Sets the sleeper_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param sleeper_capacity: The sleeper_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type sleeper_capacity: str
        """
        if sleeper_capacity is not None and len(sleeper_capacity) < 1:
            raise ValueError("Invalid value for `sleeper_capacity`, length must be greater than or equal to `1`")

        self._sleeper_capacity = sleeper_capacity

    @property
    def standing_capacity(self):
        """Gets the standing_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The standing_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._standing_capacity

    @standing_capacity.setter
    def standing_capacity(self, standing_capacity):
        """Sets the standing_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param standing_capacity: The standing_capacity of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type standing_capacity: object
        """

        self._standing_capacity = standing_capacity

    @property
    def unladen_weight(self):
        """Gets the unladen_weight of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The unladen_weight of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: str
        """
        return self._unladen_weight

    @unladen_weight.setter
    def unladen_weight(self, unladen_weight):
        """Sets the unladen_weight of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param unladen_weight: The unladen_weight of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type unladen_weight: str
        """
        if unladen_weight is not None and len(unladen_weight) < 1:
            raise ValueError("Invalid value for `unladen_weight`, length must be greater than or equal to `1`")

        self._unladen_weight = unladen_weight

    @property
    def wheelbase(self):
        """Gets the wheelbase of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :return: The wheelbase of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :rtype: object
        """
        return self._wheelbase

    @wheelbase.setter
    def wheelbase(self, wheelbase):
        """Sets the wheelbase of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.


        :param wheelbase: The wheelbase of this VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.
        :type wheelbase: object
        """

        self._wheelbase = wheelbase
