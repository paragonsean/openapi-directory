# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LpgsvRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, full_name: str=None, gender: str=None, lpgid: str=None, svno: str=None, uid: str=None):
        """LpgsvRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this LpgsvRequestCertificateParameters.
        :param full_name: The full_name of this LpgsvRequestCertificateParameters.
        :param gender: The gender of this LpgsvRequestCertificateParameters.
        :param lpgid: The lpgid of this LpgsvRequestCertificateParameters.
        :param svno: The svno of this LpgsvRequestCertificateParameters.
        :param uid: The uid of this LpgsvRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'full_name': str,
            'gender': str,
            'lpgid': str,
            'svno': str,
            'uid': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'full_name': 'FullName',
            'gender': 'GENDER',
            'lpgid': 'LPGId',
            'svno': 'SVNo',
            'uid': 'UID'
        }

        self._dob = dob
        self._full_name = full_name
        self._gender = gender
        self._lpgid = lpgid
        self._svno = svno
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LpgsvRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The lpgsv_request_certificateParameters of this LpgsvRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this LpgsvRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this LpgsvRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this LpgsvRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this LpgsvRequestCertificateParameters.

        Full name

        :return: The full_name of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this LpgsvRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this LpgsvRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this LpgsvRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :return: The gender of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this LpgsvRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :param gender: The gender of this LpgsvRequestCertificateParameters.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def lpgid(self):
        """Gets the lpgid of this LpgsvRequestCertificateParameters.

        LPG ID

        :return: The lpgid of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._lpgid

    @lpgid.setter
    def lpgid(self, lpgid):
        """Sets the lpgid of this LpgsvRequestCertificateParameters.

        LPG ID

        :param lpgid: The lpgid of this LpgsvRequestCertificateParameters.
        :type lpgid: str
        """
        if lpgid is None:
            raise ValueError("Invalid value for `lpgid`, must not be `None`")

        self._lpgid = lpgid

    @property
    def svno(self):
        """Gets the svno of this LpgsvRequestCertificateParameters.

        SV No

        :return: The svno of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._svno

    @svno.setter
    def svno(self, svno):
        """Sets the svno of this LpgsvRequestCertificateParameters.

        SV No

        :param svno: The svno of this LpgsvRequestCertificateParameters.
        :type svno: str
        """
        if svno is None:
            raise ValueError("Invalid value for `svno`, must not be `None`")

        self._svno = svno

    @property
    def uid(self):
        """Gets the uid of this LpgsvRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LpgsvRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this LpgsvRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
