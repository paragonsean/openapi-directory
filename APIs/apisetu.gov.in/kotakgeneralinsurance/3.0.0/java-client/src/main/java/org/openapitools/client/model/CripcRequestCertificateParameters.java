/*
 * Kotak Mahindra General Insurance Company Ltd.
 * Insurance Policies such as Health, Car, Two Wheeler, Group, Home etc. issued by KOTAK MAHINDRA GENERAL INSURANCE are available to be pulled by citizens.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CripcRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:34:54.054475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CripcRequestCertificateParameters {
  public static final String SERIALIZED_NAME_POLICY_NO = "PolicyNo";
  @SerializedName(SERIALIZED_NAME_POLICY_NO)
  private String policyNo;

  public static final String SERIALIZED_NAME_VAL = "Val";
  @SerializedName(SERIALIZED_NAME_VAL)
  private String val;

  public static final String SERIALIZED_NAME_VERIFICATION = "Verification";
  @SerializedName(SERIALIZED_NAME_VERIFICATION)
  private String verification;

  public CripcRequestCertificateParameters() {
  }

  public CripcRequestCertificateParameters policyNo(String policyNo) {
    this.policyNo = policyNo;
    return this;
  }

  /**
   * PolicyNo
   * @return policyNo
   */
  @javax.annotation.Nonnull
  public String getPolicyNo() {
    return policyNo;
  }

  public void setPolicyNo(String policyNo) {
    this.policyNo = policyNo;
  }


  public CripcRequestCertificateParameters val(String val) {
    this.val = val;
    return this;
  }

  /**
   * Enter Value
   * @return val
   */
  @javax.annotation.Nonnull
  public String getVal() {
    return val;
  }

  public void setVal(String val) {
    this.val = val;
  }


  public CripcRequestCertificateParameters verification(String verification) {
    this.verification = verification;
    return this;
  }

  /**
   * Verification Field
   * @return verification
   */
  @javax.annotation.Nonnull
  public String getVerification() {
    return verification;
  }

  public void setVerification(String verification) {
    this.verification = verification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CripcRequestCertificateParameters cripcRequestCertificateParameters = (CripcRequestCertificateParameters) o;
    return Objects.equals(this.policyNo, cripcRequestCertificateParameters.policyNo) &&
        Objects.equals(this.val, cripcRequestCertificateParameters.val) &&
        Objects.equals(this.verification, cripcRequestCertificateParameters.verification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyNo, val, verification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CripcRequestCertificateParameters {\n");
    sb.append("    policyNo: ").append(toIndentedString(policyNo)).append("\n");
    sb.append("    val: ").append(toIndentedString(val)).append("\n");
    sb.append("    verification: ").append(toIndentedString(verification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PolicyNo");
    openapiFields.add("Val");
    openapiFields.add("Verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PolicyNo");
    openapiRequiredFields.add("Val");
    openapiRequiredFields.add("Verification");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CripcRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CripcRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CripcRequestCertificateParameters is not found in the empty JSON string", CripcRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CripcRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CripcRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CripcRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PolicyNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyNo").toString()));
      }
      if (!jsonObj.get("Val").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Val` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Val").toString()));
      }
      if (!jsonObj.get("Verification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Verification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Verification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CripcRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CripcRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CripcRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CripcRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CripcRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, CripcRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CripcRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CripcRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CripcRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to CripcRequestCertificateParameters
   */
  public static CripcRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CripcRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of CripcRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

