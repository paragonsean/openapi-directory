/**
 * Kotak Mahindra General Insurance Company Ltd.
 * Insurance Policies such as Health, Car, Two Wheeler, Group, Home etc. issued by KOTAK MAHINDRA GENERAL INSURANCE are available to be pulled by citizens.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICripc_400_response.h"
#include "OAICripc_401_response.h"
#include "OAICripc_404_response.h"
#include "OAICripc_500_response.h"
#include "OAICripc_502_response.h"
#include "OAICripc_503_response.h"
#include "OAICripc_504_response.h"
#include "OAICripc_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void cripc(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void cvipc(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void gicer(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void hlipc(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void hmipc(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());

    /**
    * @param[in]  oai_cripc_request OAICripc_request [optional]
    */
    virtual void twipc(const ::OpenAPI::OptionalParam<OAICripc_request> &oai_cripc_request = ::OpenAPI::OptionalParam<OAICripc_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cripcCallback(OAIHttpRequestWorker *worker);
    void cvipcCallback(OAIHttpRequestWorker *worker);
    void gicerCallback(OAIHttpRequestWorker *worker);
    void hlipcCallback(OAIHttpRequestWorker *worker);
    void hmipcCallback(OAIHttpRequestWorker *worker);
    void twipcCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cripcSignal();
    void cvipcSignal();
    void gicerSignal();
    void hlipcSignal();
    void hmipcSignal();
    void twipcSignal();


    void cripcSignalFull(OAIHttpRequestWorker *worker);
    void cvipcSignalFull(OAIHttpRequestWorker *worker);
    void gicerSignalFull(OAIHttpRequestWorker *worker);
    void hlipcSignalFull(OAIHttpRequestWorker *worker);
    void hmipcSignalFull(OAIHttpRequestWorker *worker);
    void twipcSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cripcSignalError() instead")
    void cripcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cripcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cvipcSignalError() instead")
    void cvipcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cvipcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gicerSignalError() instead")
    void gicerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gicerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hlipcSignalError() instead")
    void hlipcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hlipcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hmipcSignalError() instead")
    void hmipcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hmipcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use twipcSignalError() instead")
    void twipcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void twipcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cripcSignalErrorFull() instead")
    void cripcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cripcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cvipcSignalErrorFull() instead")
    void cvipcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cvipcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gicerSignalErrorFull() instead")
    void gicerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gicerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hlipcSignalErrorFull() instead")
    void hlipcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hlipcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hmipcSignalErrorFull() instead")
    void hmipcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hmipcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use twipcSignalErrorFull() instead")
    void twipcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void twipcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
