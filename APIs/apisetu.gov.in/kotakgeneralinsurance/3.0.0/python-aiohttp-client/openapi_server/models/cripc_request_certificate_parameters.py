# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CripcRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_no: str=None, val: str=None, verification: str=None):
        """CripcRequestCertificateParameters - a model defined in OpenAPI

        :param policy_no: The policy_no of this CripcRequestCertificateParameters.
        :param val: The val of this CripcRequestCertificateParameters.
        :param verification: The verification of this CripcRequestCertificateParameters.
        """
        self.openapi_types = {
            'policy_no': str,
            'val': str,
            'verification': str
        }

        self.attribute_map = {
            'policy_no': 'PolicyNo',
            'val': 'Val',
            'verification': 'Verification'
        }

        self._policy_no = policy_no
        self._val = val
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CripcRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cripc_request_certificateParameters of this CripcRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_no(self):
        """Gets the policy_no of this CripcRequestCertificateParameters.

        PolicyNo

        :return: The policy_no of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_no

    @policy_no.setter
    def policy_no(self, policy_no):
        """Sets the policy_no of this CripcRequestCertificateParameters.

        PolicyNo

        :param policy_no: The policy_no of this CripcRequestCertificateParameters.
        :type policy_no: str
        """
        if policy_no is None:
            raise ValueError("Invalid value for `policy_no`, must not be `None`")

        self._policy_no = policy_no

    @property
    def val(self):
        """Gets the val of this CripcRequestCertificateParameters.

        Enter Value

        :return: The val of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this CripcRequestCertificateParameters.

        Enter Value

        :param val: The val of this CripcRequestCertificateParameters.
        :type val: str
        """
        if val is None:
            raise ValueError("Invalid value for `val`, must not be `None`")

        self._val = val

    @property
    def verification(self):
        """Gets the verification of this CripcRequestCertificateParameters.

        Verification Field

        :return: The verification of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this CripcRequestCertificateParameters.

        Verification Field

        :param verification: The verification of this CripcRequestCertificateParameters.
        :type verification: str
        """
        if verification is None:
            raise ValueError("Invalid value for `verification`, must not be `None`")

        self._verification = verification
