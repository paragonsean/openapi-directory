/**
 * Central Board of Secondary Education
 * CBSE (http://www.cbse.nic.in/) is issuing marksheets, passing certificates, migration certificates etc. through DigiLocker. These are either pushed, or can be pulled by students into their DigiLocker accounts. Currently available - 2004 - 2020 [Class XII], 2004 - 2020 [Class X], 2017 (NEET Rank Letter & Marksheet), 2016 (NEET Rank Letter), 2018 December (CTET Eligibility Certificate & Marksheet).
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcademicCertificateSchema.h"
#include "OAIHpcer_400_response.h"
#include "OAIHpcer_401_response.h"
#include "OAIHpcer_404_response.h"
#include "OAIHpcer_500_response.h"
#include "OAIHpcer_502_response.h"
#include "OAIHpcer_503_response.h"
#include "OAIHpcer_504_response.h"
#include "OAIHpcer_request.h"
#include "OAIHscer_request.h"
#include "OAITetcr_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void hpcer(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hscer_request OAIHscer_request [optional]
    */
    virtual void hscer(const ::OpenAPI::OptionalParam<OAIHscer_request> &oai_hscer_request = ::OpenAPI::OptionalParam<OAIHscer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void hsmgr(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void nchsc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void nctsc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void nsesc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void nstsc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void ntltr(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void ntmks(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void skhsc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void sktsc(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void spcer(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_hscer_request OAIHscer_request [optional]
    */
    virtual void sscer(const ::OpenAPI::OptionalParam<OAIHscer_request> &oai_hscer_request = ::OpenAPI::OptionalParam<OAIHscer_request>());

    /**
    * @param[in]  oai_hpcer_request OAIHpcer_request [optional]
    */
    virtual void ssmgr(const ::OpenAPI::OptionalParam<OAIHpcer_request> &oai_hpcer_request = ::OpenAPI::OptionalParam<OAIHpcer_request>());

    /**
    * @param[in]  oai_tetcr_request OAITetcr_request [optional]
    */
    virtual void tetcr(const ::OpenAPI::OptionalParam<OAITetcr_request> &oai_tetcr_request = ::OpenAPI::OptionalParam<OAITetcr_request>());

    /**
    * @param[in]  oai_tetcr_request OAITetcr_request [optional]
    */
    virtual void tetms(const ::OpenAPI::OptionalParam<OAITetcr_request> &oai_tetcr_request = ::OpenAPI::OptionalParam<OAITetcr_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hpcerCallback(OAIHttpRequestWorker *worker);
    void hscerCallback(OAIHttpRequestWorker *worker);
    void hsmgrCallback(OAIHttpRequestWorker *worker);
    void nchscCallback(OAIHttpRequestWorker *worker);
    void nctscCallback(OAIHttpRequestWorker *worker);
    void nsescCallback(OAIHttpRequestWorker *worker);
    void nstscCallback(OAIHttpRequestWorker *worker);
    void ntltrCallback(OAIHttpRequestWorker *worker);
    void ntmksCallback(OAIHttpRequestWorker *worker);
    void skhscCallback(OAIHttpRequestWorker *worker);
    void sktscCallback(OAIHttpRequestWorker *worker);
    void spcerCallback(OAIHttpRequestWorker *worker);
    void sscerCallback(OAIHttpRequestWorker *worker);
    void ssmgrCallback(OAIHttpRequestWorker *worker);
    void tetcrCallback(OAIHttpRequestWorker *worker);
    void tetmsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hpcerSignal();
    void hscerSignal();
    void hsmgrSignal();
    void nchscSignal();
    void nctscSignal();
    void nsescSignal();
    void nstscSignal();
    void ntltrSignal();
    void ntmksSignal();
    void skhscSignal();
    void sktscSignal();
    void spcerSignal();
    void sscerSignal();
    void ssmgrSignal();
    void tetcrSignal();
    void tetmsSignal();


    void hpcerSignalFull(OAIHttpRequestWorker *worker);
    void hscerSignalFull(OAIHttpRequestWorker *worker);
    void hsmgrSignalFull(OAIHttpRequestWorker *worker);
    void nchscSignalFull(OAIHttpRequestWorker *worker);
    void nctscSignalFull(OAIHttpRequestWorker *worker);
    void nsescSignalFull(OAIHttpRequestWorker *worker);
    void nstscSignalFull(OAIHttpRequestWorker *worker);
    void ntltrSignalFull(OAIHttpRequestWorker *worker);
    void ntmksSignalFull(OAIHttpRequestWorker *worker);
    void skhscSignalFull(OAIHttpRequestWorker *worker);
    void sktscSignalFull(OAIHttpRequestWorker *worker);
    void spcerSignalFull(OAIHttpRequestWorker *worker);
    void sscerSignalFull(OAIHttpRequestWorker *worker);
    void ssmgrSignalFull(OAIHttpRequestWorker *worker);
    void tetcrSignalFull(OAIHttpRequestWorker *worker);
    void tetmsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use hpcerSignalError() instead")
    void hpcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hpcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hscerSignalError() instead")
    void hscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hsmgrSignalError() instead")
    void hsmgrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hsmgrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nchscSignalError() instead")
    void nchscSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nchscSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nctscSignalError() instead")
    void nctscSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nctscSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nsescSignalError() instead")
    void nsescSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nsescSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nstscSignalError() instead")
    void nstscSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nstscSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntltrSignalError() instead")
    void ntltrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ntltrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntmksSignalError() instead")
    void ntmksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ntmksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skhscSignalError() instead")
    void skhscSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void skhscSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sktscSignalError() instead")
    void sktscSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sktscSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spcerSignalError() instead")
    void spcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void spcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sscerSignalError() instead")
    void sscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssmgrSignalError() instead")
    void ssmgrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ssmgrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tetcrSignalError() instead")
    void tetcrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tetcrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tetmsSignalError() instead")
    void tetmsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tetmsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hpcerSignalErrorFull() instead")
    void hpcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hpcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hscerSignalErrorFull() instead")
    void hscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hsmgrSignalErrorFull() instead")
    void hsmgrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hsmgrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nchscSignalErrorFull() instead")
    void nchscSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nchscSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nctscSignalErrorFull() instead")
    void nctscSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nctscSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nsescSignalErrorFull() instead")
    void nsescSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nsescSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nstscSignalErrorFull() instead")
    void nstscSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nstscSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntltrSignalErrorFull() instead")
    void ntltrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ntltrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntmksSignalErrorFull() instead")
    void ntmksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ntmksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skhscSignalErrorFull() instead")
    void skhscSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skhscSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sktscSignalErrorFull() instead")
    void sktscSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sktscSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use spcerSignalErrorFull() instead")
    void spcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void spcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sscerSignalErrorFull() instead")
    void sscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ssmgrSignalErrorFull() instead")
    void ssmgrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ssmgrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tetcrSignalErrorFull() instead")
    void tetcrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tetcrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tetmsSignalErrorFull() instead")
    void tetmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tetmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
