/**
 * Central Board of Secondary Education
 * CBSE (http://www.cbse.nic.in/) is issuing marksheets, passing certificates, migration certificates etc. through DigiLocker. These are either pushed, or can be pulled by students into their DigiLocker accounts. Currently available - 2004 - 2020 [Class XII], 2004 - 2020 [Class X], 2017 (NEET Rank Letter & Marksheet), 2016 (NEET Rank Letter), 2018 December (CTET Eligibility Certificate & Marksheet).
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcademicCertificateSchema from '../model/AcademicCertificateSchema';
import Hpcer400Response from '../model/Hpcer400Response';
import Hpcer401Response from '../model/Hpcer401Response';
import Hpcer404Response from '../model/Hpcer404Response';
import Hpcer500Response from '../model/Hpcer500Response';
import Hpcer502Response from '../model/Hpcer502Response';
import Hpcer503Response from '../model/Hpcer503Response';
import Hpcer504Response from '../model/Hpcer504Response';
import HpcerRequest from '../model/HpcerRequest';
import HscerRequest from '../model/HscerRequest';
import TetcrRequest from '../model/TetcrRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hpcer operation.
     * @callback module:api/APIsApi~hpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Passing Certificate
     * API to verify Class XII Passing Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~hpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hscer operation.
     * @callback module:api/APIsApi~hscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Marksheet
     * API to verify Class XII Marksheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/HscerRequest} [hscerRequest] Request format
     * @param {module:api/APIsApi~hscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hscerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hsmgr operation.
     * @callback module:api/APIsApi~hsmgrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class XII Migration Certificate
     * API to verify Class XII Migration Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~hsmgrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hsmgr(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/hsmgr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nchsc operation.
     * @callback module:api/APIsApi~nchscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NCHMCT Skill Certificate (X)
     * API to verify NCHMCT Skill Certificate (X).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~nchscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nchsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/nchsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nctsc operation.
     * @callback module:api/APIsApi~nctscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NCHMCT Skill Certificate (XII)
     * API to verify NCHMCT Skill Certificate (XII).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~nctscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nctsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/nctsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nsesc operation.
     * @callback module:api/APIsApi~nsescCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NSE Skill Certificate (X)
     * API to verify NSE Skill Certificate (X).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~nsescCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nsesc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/nsesc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nstsc operation.
     * @callback module:api/APIsApi~nstscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NSE Skill Certificate (XII)
     * API to verify NSE Skill Certificate (XII).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~nstscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nstsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/nstsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ntltr operation.
     * @callback module:api/APIsApi~ntltrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NEET Rank Letter
     * API to verify NEET Rank Letter.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~ntltrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ntltr(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ntltr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ntmks operation.
     * @callback module:api/APIsApi~ntmksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NEET Marksheet
     * API to verify NEET Marksheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~ntmksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ntmks(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ntmks/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skhsc operation.
     * @callback module:api/APIsApi~skhscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Certificate (X)
     * API to verify Skill Certificate (X).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~skhscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skhsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/skhsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sktsc operation.
     * @callback module:api/APIsApi~sktscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Skill Certificate (XII)
     * API to verify Skill Certificate (XII).
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~sktscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sktsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sktsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the spcer operation.
     * @callback module:api/APIsApi~spcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class X Passing Certificate
     * API to verify Class X Passing Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~spcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    spcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/spcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sscer operation.
     * @callback module:api/APIsApi~sscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class X Marksheet
     * API to verify Class X Marksheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/HscerRequest} [hscerRequest] Request format
     * @param {module:api/APIsApi~sscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['hscerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ssmgr operation.
     * @callback module:api/APIsApi~ssmgrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Class X Migration Certificate
     * API to verify Class X Migration Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/HpcerRequest} [hpcerRequest] Request format
     * @param {module:api/APIsApi~ssmgrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ssmgr(opts, callback) {
      opts = opts || {};
      let postBody = opts['hpcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ssmgr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tetcr operation.
     * @callback module:api/APIsApi~tetcrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teachers Eligibility Test Certificate
     * API to verify Teachers Eligibility Test Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/TetcrRequest} [tetcrRequest] Request format
     * @param {module:api/APIsApi~tetcrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tetcr(opts, callback) {
      opts = opts || {};
      let postBody = opts['tetcrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tetcr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tetms operation.
     * @callback module:api/APIsApi~tetmsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Teachers Eligibility Test Mark Sheet
     * API to verify Teachers Eligibility Test Mark Sheet.
     * @param {Object} opts Optional parameters
     * @param {module:model/TetcrRequest} [tetcrRequest] Request format
     * @param {module:api/APIsApi~tetmsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tetms(opts, callback) {
      opts = opts || {};
      let postBody = opts['tetcrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tetms/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
