/**
 * Central Board of Secondary Education
 * CBSE (http://www.cbse.nic.in/) is issuing marksheets, passing certificates, migration certificates etc. through DigiLocker. These are either pushed, or can be pulled by students into their DigiLocker accounts. Currently available - 2004 - 2020 [Class XII], 2004 - 2020 [Class X], 2017 (NEET Rank Letter & Marksheet), 2016 (NEET Rank Letter), 2018 December (CTET Eligibility Certificate & Marksheet).
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CentralBoardOfSecondaryEducation);
  }
}(this, function(expect, CentralBoardOfSecondaryEducation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CentralBoardOfSecondaryEducation.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('hpcer', function() {
      it('should call hpcer successfully', function(done) {
        //uncomment below and update the code to test hpcer
        //instance.hpcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hscer', function() {
      it('should call hscer successfully', function(done) {
        //uncomment below and update the code to test hscer
        //instance.hscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hsmgr', function() {
      it('should call hsmgr successfully', function(done) {
        //uncomment below and update the code to test hsmgr
        //instance.hsmgr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('nchsc', function() {
      it('should call nchsc successfully', function(done) {
        //uncomment below and update the code to test nchsc
        //instance.nchsc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('nctsc', function() {
      it('should call nctsc successfully', function(done) {
        //uncomment below and update the code to test nctsc
        //instance.nctsc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('nsesc', function() {
      it('should call nsesc successfully', function(done) {
        //uncomment below and update the code to test nsesc
        //instance.nsesc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('nstsc', function() {
      it('should call nstsc successfully', function(done) {
        //uncomment below and update the code to test nstsc
        //instance.nstsc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ntltr', function() {
      it('should call ntltr successfully', function(done) {
        //uncomment below and update the code to test ntltr
        //instance.ntltr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ntmks', function() {
      it('should call ntmks successfully', function(done) {
        //uncomment below and update the code to test ntmks
        //instance.ntmks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('skhsc', function() {
      it('should call skhsc successfully', function(done) {
        //uncomment below and update the code to test skhsc
        //instance.skhsc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sktsc', function() {
      it('should call sktsc successfully', function(done) {
        //uncomment below and update the code to test sktsc
        //instance.sktsc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('spcer', function() {
      it('should call spcer successfully', function(done) {
        //uncomment below and update the code to test spcer
        //instance.spcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sscer', function() {
      it('should call sscer successfully', function(done) {
        //uncomment below and update the code to test sscer
        //instance.sscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ssmgr', function() {
      it('should call ssmgr successfully', function(done) {
        //uncomment below and update the code to test ssmgr
        //instance.ssmgr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tetcr', function() {
      it('should call tetcr successfully', function(done) {
        //uncomment below and update the code to test tetcr
        //instance.tetcr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tetms', function() {
      it('should call tetms successfully', function(done) {
        //uncomment below and update the code to test tetms
        //instance.tetms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
