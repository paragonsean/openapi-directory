/**
 * Transport Department, Punjab
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration() {
    this->initializeModel();
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::~OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration() {}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::initializeModel() {

    m_insurance_isSet = false;
    m_insurance_isValid = false;

    m_vehicle_isSet = false;
    m_vehicle_isValid = false;

    m_financer_isSet = false;
    m_financer_isValid = false;

    m_norms_desc_isSet = false;
    m_norms_desc_isValid = false;

    m_status_date_isSet = false;
    m_status_date_isValid = false;
}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::fromJsonObject(QJsonObject json) {

    m_insurance_isValid = ::OpenAPI::fromJsonValue(m_insurance, json[QString("Insurance")]);
    m_insurance_isSet = !json[QString("Insurance")].isNull() && m_insurance_isValid;

    m_vehicle_isValid = ::OpenAPI::fromJsonValue(m_vehicle, json[QString("Vehicle")]);
    m_vehicle_isSet = !json[QString("Vehicle")].isNull() && m_vehicle_isValid;

    m_financer_isValid = ::OpenAPI::fromJsonValue(m_financer, json[QString("financer")]);
    m_financer_isSet = !json[QString("financer")].isNull() && m_financer_isValid;

    m_norms_desc_isValid = ::OpenAPI::fromJsonValue(m_norms_desc, json[QString("normsDesc")]);
    m_norms_desc_isSet = !json[QString("normsDesc")].isNull() && m_norms_desc_isValid;

    m_status_date_isValid = ::OpenAPI::fromJsonValue(m_status_date, json[QString("statusDate")]);
    m_status_date_isSet = !json[QString("statusDate")].isNull() && m_status_date_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_insurance.isSet()) {
        obj.insert(QString("Insurance"), ::OpenAPI::toJsonValue(m_insurance));
    }
    if (m_vehicle.isSet()) {
        obj.insert(QString("Vehicle"), ::OpenAPI::toJsonValue(m_vehicle));
    }
    if (m_financer_isSet) {
        obj.insert(QString("financer"), ::OpenAPI::toJsonValue(m_financer));
    }
    if (m_norms_desc_isSet) {
        obj.insert(QString("normsDesc"), ::OpenAPI::toJsonValue(m_norms_desc));
    }
    if (m_status_date_isSet) {
        obj.insert(QString("statusDate"), ::OpenAPI::toJsonValue(m_status_date));
    }
    return obj;
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Insurance OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::getInsurance() const {
    return m_insurance;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::setInsurance(const OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Insurance &insurance) {
    m_insurance = insurance;
    m_insurance_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_insurance_Set() const{
    return m_insurance_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_insurance_Valid() const{
    return m_insurance_isValid;
}

OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::getVehicle() const {
    return m_vehicle;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::setVehicle(const OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration_Vehicle &vehicle) {
    m_vehicle = vehicle;
    m_vehicle_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_vehicle_Set() const{
    return m_vehicle_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_vehicle_Valid() const{
    return m_vehicle_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::getFinancer() const {
    return m_financer;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::setFinancer(const QString &financer) {
    m_financer = financer;
    m_financer_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_financer_Set() const{
    return m_financer_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_financer_Valid() const{
    return m_financer_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::getNormsDesc() const {
    return m_norms_desc;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::setNormsDesc(const QString &norms_desc) {
    m_norms_desc = norms_desc;
    m_norms_desc_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_norms_desc_Set() const{
    return m_norms_desc_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_norms_desc_Valid() const{
    return m_norms_desc_isValid;
}

QString OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::getStatusDate() const {
    return m_status_date;
}
void OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::setStatusDate(const QString &status_date) {
    m_status_date = status_date;
    m_status_date_isSet = true;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_status_date_Set() const{
    return m_status_date_isSet;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::is_status_date_Valid() const{
    return m_status_date_isValid;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_insurance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vehicle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_financer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_norms_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVehicleRegistrationSchema_CertificateData_VehicleRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_financer_isValid && m_norms_desc_isValid && m_status_date_isValid && true;
}

} // namespace OpenAPI
