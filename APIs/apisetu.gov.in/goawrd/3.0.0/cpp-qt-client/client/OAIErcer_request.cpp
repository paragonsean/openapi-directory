/**
 * Goa Water Resources Department, Goa
 * Goa WRD (https://goawrd.gov.in/) is the official departmental portal of the Water Resources Department, Govt. of Goa, through which citizens can avail time bound service being offered by the department. Certificates issued by it (e.g. Contractor Enlistment, Well Registration etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErcer_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErcer_request::OAIErcer_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErcer_request::OAIErcer_request() {
    this->initializeModel();
}

OAIErcer_request::~OAIErcer_request() {}

void OAIErcer_request::initializeModel() {

    m_certificate_parameters_isSet = false;
    m_certificate_parameters_isValid = false;

    m_consent_artifact_isSet = false;
    m_consent_artifact_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_txn_id_isSet = false;
    m_txn_id_isValid = false;
}

void OAIErcer_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErcer_request::fromJsonObject(QJsonObject json) {

    m_certificate_parameters_isValid = ::OpenAPI::fromJsonValue(m_certificate_parameters, json[QString("certificateParameters")]);
    m_certificate_parameters_isSet = !json[QString("certificateParameters")].isNull() && m_certificate_parameters_isValid;

    m_consent_artifact_isValid = ::OpenAPI::fromJsonValue(m_consent_artifact, json[QString("consentArtifact")]);
    m_consent_artifact_isSet = !json[QString("consentArtifact")].isNull() && m_consent_artifact_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_txn_id_isValid = ::OpenAPI::fromJsonValue(m_txn_id, json[QString("txnId")]);
    m_txn_id_isSet = !json[QString("txnId")].isNull() && m_txn_id_isValid;
}

QString OAIErcer_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErcer_request::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_parameters.isSet()) {
        obj.insert(QString("certificateParameters"), ::OpenAPI::toJsonValue(m_certificate_parameters));
    }
    if (m_consent_artifact.isSet()) {
        obj.insert(QString("consentArtifact"), ::OpenAPI::toJsonValue(m_consent_artifact));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_txn_id_isSet) {
        obj.insert(QString("txnId"), ::OpenAPI::toJsonValue(m_txn_id));
    }
    return obj;
}

OAIErcer_request_certificateParameters OAIErcer_request::getCertificateParameters() const {
    return m_certificate_parameters;
}
void OAIErcer_request::setCertificateParameters(const OAIErcer_request_certificateParameters &certificate_parameters) {
    m_certificate_parameters = certificate_parameters;
    m_certificate_parameters_isSet = true;
}

bool OAIErcer_request::is_certificate_parameters_Set() const{
    return m_certificate_parameters_isSet;
}

bool OAIErcer_request::is_certificate_parameters_Valid() const{
    return m_certificate_parameters_isValid;
}

OAIConsentArtifactSchema OAIErcer_request::getConsentArtifact() const {
    return m_consent_artifact;
}
void OAIErcer_request::setConsentArtifact(const OAIConsentArtifactSchema &consent_artifact) {
    m_consent_artifact = consent_artifact;
    m_consent_artifact_isSet = true;
}

bool OAIErcer_request::is_consent_artifact_Set() const{
    return m_consent_artifact_isSet;
}

bool OAIErcer_request::is_consent_artifact_Valid() const{
    return m_consent_artifact_isValid;
}

QString OAIErcer_request::getFormat() const {
    return m_format;
}
void OAIErcer_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIErcer_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAIErcer_request::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIErcer_request::getTxnId() const {
    return m_txn_id;
}
void OAIErcer_request::setTxnId(const QString &txn_id) {
    m_txn_id = txn_id;
    m_txn_id_isSet = true;
}

bool OAIErcer_request::is_txn_id_Set() const{
    return m_txn_id_isSet;
}

bool OAIErcer_request::is_txn_id_Valid() const{
    return m_txn_id_isValid;
}

bool OAIErcer_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent_artifact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErcer_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_txn_id_isValid && true;
}

} // namespace OpenAPI
