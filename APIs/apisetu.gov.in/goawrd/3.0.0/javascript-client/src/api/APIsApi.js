/**
 * Goa Water Resources Department, Goa
 * Goa WRD (https://goawrd.gov.in/) is the official departmental portal of the Water Resources Department, Govt. of Goa, through which citizens can avail time bound service being offered by the department. Certificates issued by it (e.g. Contractor Enlistment, Well Registration etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Ercer400Response from '../model/Ercer400Response';
import Ercer401Response from '../model/Ercer401Response';
import Ercer404Response from '../model/Ercer404Response';
import Ercer500Response from '../model/Ercer500Response';
import Ercer502Response from '../model/Ercer502Response';
import Ercer503Response from '../model/Ercer503Response';
import Ercer504Response from '../model/Ercer504Response';
import ErcerRequest from '../model/ErcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ercer operation.
     * @callback module:api/APIsApi~ercerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate of Establishment Employing Contract Labour
     * API to verify Registration Certificate of Establishment Employing Contract Labour.
     * @param {Object} opts Optional parameters
     * @param {module:model/ErcerRequest} [ercerRequest] Request format
     * @param {module:api/APIsApi~ercerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ercer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ercerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ercer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pfdaw operation.
     * @callback module:api/APIsApi~pfdawCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permission/ Certificate for Well
     * API to verify Permission/ Certificate for Well.
     * @param {Object} opts Optional parameters
     * @param {module:model/ErcerRequest} [ercerRequest] Request format
     * @param {module:api/APIsApi~pfdawCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pfdaw(opts, callback) {
      opts = opts || {};
      let postBody = opts['ercerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pfdaw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tpcer operation.
     * @callback module:api/APIsApi~tpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permission/ Certificate for Transportation (Petroleum Products, Water etc.)
     * API to verify Permission/ Certificate for Transportation (Petroleum Products, Water etc.).
     * @param {Object} opts Optional parameters
     * @param {module:model/ErcerRequest} [ercerRequest] Request format
     * @param {module:api/APIsApi~tpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ercerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
