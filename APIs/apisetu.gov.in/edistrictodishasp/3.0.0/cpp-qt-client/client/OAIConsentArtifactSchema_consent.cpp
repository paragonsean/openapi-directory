/**
 * eDistrict Odisha ServicePlus, Odisha
 * APIs provided by eDistrict Odisha ServicePlus, Odisha.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentArtifactSchema_consent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentArtifactSchema_consent::OAIConsentArtifactSchema_consent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentArtifactSchema_consent::OAIConsentArtifactSchema_consent() {
    this->initializeModel();
}

OAIConsentArtifactSchema_consent::~OAIConsentArtifactSchema_consent() {}

void OAIConsentArtifactSchema_consent::initializeModel() {

    m_consent_id_isSet = false;
    m_consent_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_consumer_isSet = false;
    m_data_consumer_isValid = false;

    m_data_provider_isSet = false;
    m_data_provider_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIConsentArtifactSchema_consent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentArtifactSchema_consent::fromJsonObject(QJsonObject json) {

    m_consent_id_isValid = ::OpenAPI::fromJsonValue(m_consent_id, json[QString("consentId")]);
    m_consent_id_isSet = !json[QString("consentId")].isNull() && m_consent_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_consumer_isValid = ::OpenAPI::fromJsonValue(m_data_consumer, json[QString("dataConsumer")]);
    m_data_consumer_isSet = !json[QString("dataConsumer")].isNull() && m_data_consumer_isValid;

    m_data_provider_isValid = ::OpenAPI::fromJsonValue(m_data_provider, json[QString("dataProvider")]);
    m_data_provider_isSet = !json[QString("dataProvider")].isNull() && m_data_provider_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIConsentArtifactSchema_consent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentArtifactSchema_consent::asJsonObject() const {
    QJsonObject obj;
    if (m_consent_id_isSet) {
        obj.insert(QString("consentId"), ::OpenAPI::toJsonValue(m_consent_id));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_consumer.isSet()) {
        obj.insert(QString("dataConsumer"), ::OpenAPI::toJsonValue(m_data_consumer));
    }
    if (m_data_provider.isSet()) {
        obj.insert(QString("dataProvider"), ::OpenAPI::toJsonValue(m_data_provider));
    }
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIConsentArtifactSchema_consent::getConsentId() const {
    return m_consent_id;
}
void OAIConsentArtifactSchema_consent::setConsentId(const QString &consent_id) {
    m_consent_id = consent_id;
    m_consent_id_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_consent_id_Set() const{
    return m_consent_id_isSet;
}

bool OAIConsentArtifactSchema_consent::is_consent_id_Valid() const{
    return m_consent_id_isValid;
}

OAIConsentArtifactSchema_consent_data OAIConsentArtifactSchema_consent::getData() const {
    return m_data;
}
void OAIConsentArtifactSchema_consent::setData(const OAIConsentArtifactSchema_consent_data &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_data_Set() const{
    return m_data_isSet;
}

bool OAIConsentArtifactSchema_consent::is_data_Valid() const{
    return m_data_isValid;
}

OAIConsentArtifactSchema_consent_data OAIConsentArtifactSchema_consent::getDataConsumer() const {
    return m_data_consumer;
}
void OAIConsentArtifactSchema_consent::setDataConsumer(const OAIConsentArtifactSchema_consent_data &data_consumer) {
    m_data_consumer = data_consumer;
    m_data_consumer_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_data_consumer_Set() const{
    return m_data_consumer_isSet;
}

bool OAIConsentArtifactSchema_consent::is_data_consumer_Valid() const{
    return m_data_consumer_isValid;
}

OAIConsentArtifactSchema_consent_data OAIConsentArtifactSchema_consent::getDataProvider() const {
    return m_data_provider;
}
void OAIConsentArtifactSchema_consent::setDataProvider(const OAIConsentArtifactSchema_consent_data &data_provider) {
    m_data_provider = data_provider;
    m_data_provider_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_data_provider_Set() const{
    return m_data_provider_isSet;
}

bool OAIConsentArtifactSchema_consent::is_data_provider_Valid() const{
    return m_data_provider_isValid;
}

OAIConsentArtifactSchema_consent_permission OAIConsentArtifactSchema_consent::getPermission() const {
    return m_permission;
}
void OAIConsentArtifactSchema_consent::setPermission(const OAIConsentArtifactSchema_consent_permission &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIConsentArtifactSchema_consent::is_permission_Valid() const{
    return m_permission_isValid;
}

OAIConsentArtifactSchema_consent_purpose OAIConsentArtifactSchema_consent::getPurpose() const {
    return m_purpose;
}
void OAIConsentArtifactSchema_consent::setPurpose(const OAIConsentArtifactSchema_consent_purpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIConsentArtifactSchema_consent::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QDateTime OAIConsentArtifactSchema_consent::getTimestamp() const {
    return m_timestamp;
}
void OAIConsentArtifactSchema_consent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIConsentArtifactSchema_consent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIConsentArtifactSchema_consent_user OAIConsentArtifactSchema_consent::getUser() const {
    return m_user;
}
void OAIConsentArtifactSchema_consent::setUser(const OAIConsentArtifactSchema_consent_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIConsentArtifactSchema_consent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIConsentArtifactSchema_consent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIConsentArtifactSchema_consent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_consumer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentArtifactSchema_consent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consent_id_isValid && m_data_isValid && m_data_consumer_isValid && m_data_provider_isValid && m_permission_isValid && m_purpose_isValid && m_timestamp_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
