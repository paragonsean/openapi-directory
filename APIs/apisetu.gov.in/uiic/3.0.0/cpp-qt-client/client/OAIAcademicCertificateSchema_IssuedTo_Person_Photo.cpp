/**
 * United India Insurance Company Limited
 * United India Insurance Co. Ltd. is a Public Sector General Insurance Company incorporated in 1938, having its presence all over India providing risk cover to 1.74 Crore policyholders. General Insurance Policies such as Motor, Health, Personal Accident, Travel, e.t.c issued by United India Insurance Co. Ltd. (https://uiic.co.in/) are available to be downloaded by citizens of India to their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcademicCertificateSchema_IssuedTo_Person_Photo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcademicCertificateSchema_IssuedTo_Person_Photo::OAIAcademicCertificateSchema_IssuedTo_Person_Photo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcademicCertificateSchema_IssuedTo_Person_Photo::OAIAcademicCertificateSchema_IssuedTo_Person_Photo() {
    this->initializeModel();
}

OAIAcademicCertificateSchema_IssuedTo_Person_Photo::~OAIAcademicCertificateSchema_IssuedTo_Person_Photo() {}

void OAIAcademicCertificateSchema_IssuedTo_Person_Photo::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAIAcademicCertificateSchema_IssuedTo_Person_Photo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcademicCertificateSchema_IssuedTo_Person_Photo::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;
}

QString OAIAcademicCertificateSchema_IssuedTo_Person_Photo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcademicCertificateSchema_IssuedTo_Person_Photo::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

QString OAIAcademicCertificateSchema_IssuedTo_Person_Photo::getFormat() const {
    return m_format;
}
void OAIAcademicCertificateSchema_IssuedTo_Person_Photo::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIAcademicCertificateSchema_IssuedTo_Person_Photo::is_format_Set() const{
    return m_format_isSet;
}

bool OAIAcademicCertificateSchema_IssuedTo_Person_Photo::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIAcademicCertificateSchema_IssuedTo_Person_Photo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcademicCertificateSchema_IssuedTo_Person_Photo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && true;
}

} // namespace OpenAPI
