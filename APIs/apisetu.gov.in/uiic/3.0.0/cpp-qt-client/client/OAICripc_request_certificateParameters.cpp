/**
 * United India Insurance Company Limited
 * United India Insurance Co. Ltd. is a Public Sector General Insurance Company incorporated in 1938, having its presence all over India providing risk cover to 1.74 Crore policyholders. General Insurance Policies such as Motor, Health, Personal Accident, Travel, e.t.c issued by United India Insurance Co. Ltd. (https://uiic.co.in/) are available to be downloaded by citizens of India to their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICripc_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICripc_request_certificateParameters::OAICripc_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICripc_request_certificateParameters::OAICripc_request_certificateParameters() {
    this->initializeModel();
}

OAICripc_request_certificateParameters::~OAICripc_request_certificateParameters() {}

void OAICripc_request_certificateParameters::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_udf1_isSet = false;
    m_udf1_isValid = false;

    m_udf2_isSet = false;
    m_udf2_isValid = false;

    m_udf3_isSet = false;
    m_udf3_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAICripc_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICripc_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_udf1_isValid = ::OpenAPI::fromJsonValue(m_udf1, json[QString("UDF1")]);
    m_udf1_isSet = !json[QString("UDF1")].isNull() && m_udf1_isValid;

    m_udf2_isValid = ::OpenAPI::fromJsonValue(m_udf2, json[QString("UDF2")]);
    m_udf2_isSet = !json[QString("UDF2")].isNull() && m_udf2_isValid;

    m_udf3_isValid = ::OpenAPI::fromJsonValue(m_udf3, json[QString("UDF3")]);
    m_udf3_isSet = !json[QString("UDF3")].isNull() && m_udf3_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;
}

QString OAICripc_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICripc_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_udf1_isSet) {
        obj.insert(QString("UDF1"), ::OpenAPI::toJsonValue(m_udf1));
    }
    if (m_udf2_isSet) {
        obj.insert(QString("UDF2"), ::OpenAPI::toJsonValue(m_udf2));
    }
    if (m_udf3_isSet) {
        obj.insert(QString("UDF3"), ::OpenAPI::toJsonValue(m_udf3));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAICripc_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAICripc_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAICripc_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAICripc_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAICripc_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAICripc_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAICripc_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAICripc_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAICripc_request_certificateParameters::getUdf1() const {
    return m_udf1;
}
void OAICripc_request_certificateParameters::setUdf1(const QString &udf1) {
    m_udf1 = udf1;
    m_udf1_isSet = true;
}

bool OAICripc_request_certificateParameters::is_udf1_Set() const{
    return m_udf1_isSet;
}

bool OAICripc_request_certificateParameters::is_udf1_Valid() const{
    return m_udf1_isValid;
}

QString OAICripc_request_certificateParameters::getUdf2() const {
    return m_udf2;
}
void OAICripc_request_certificateParameters::setUdf2(const QString &udf2) {
    m_udf2 = udf2;
    m_udf2_isSet = true;
}

bool OAICripc_request_certificateParameters::is_udf2_Set() const{
    return m_udf2_isSet;
}

bool OAICripc_request_certificateParameters::is_udf2_Valid() const{
    return m_udf2_isValid;
}

QString OAICripc_request_certificateParameters::getUdf3() const {
    return m_udf3;
}
void OAICripc_request_certificateParameters::setUdf3(const QString &udf3) {
    m_udf3 = udf3;
    m_udf3_isSet = true;
}

bool OAICripc_request_certificateParameters::is_udf3_Set() const{
    return m_udf3_isSet;
}

bool OAICripc_request_certificateParameters::is_udf3_Valid() const{
    return m_udf3_isValid;
}

QString OAICripc_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAICripc_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICripc_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICripc_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAICripc_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICripc_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_full_name_isValid && m_udf1_isValid && m_udf2_isValid && m_udf3_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
