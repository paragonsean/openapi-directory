/**
 * United India Insurance Company Limited
 * United India Insurance Co. Ltd. is a Public Sector General Insurance Company incorporated in 1938, having its presence all over India providing risk cover to 1.74 Crore policyholders. General Insurance Policies such as Motor, Health, Personal Accident, Travel, e.t.c issued by United India Insurance Co. Ltd. (https://uiic.co.in/) are available to be downloaded by citizens of India to their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentArtifactSchema_consent_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentArtifactSchema_consent_data::OAIConsentArtifactSchema_consent_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentArtifactSchema_consent_data::OAIConsentArtifactSchema_consent_data() {
    this->initializeModel();
}

OAIConsentArtifactSchema_consent_data::~OAIConsentArtifactSchema_consent_data() {}

void OAIConsentArtifactSchema_consent_data::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIConsentArtifactSchema_consent_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentArtifactSchema_consent_data::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIConsentArtifactSchema_consent_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentArtifactSchema_consent_data::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIConsentArtifactSchema_consent_data::getId() const {
    return m_id;
}
void OAIConsentArtifactSchema_consent_data::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConsentArtifactSchema_consent_data::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConsentArtifactSchema_consent_data::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConsentArtifactSchema_consent_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentArtifactSchema_consent_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
