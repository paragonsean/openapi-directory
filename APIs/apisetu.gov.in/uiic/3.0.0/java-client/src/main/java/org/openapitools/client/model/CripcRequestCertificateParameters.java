/*
 * United India Insurance Company Limited
 * United India Insurance Co. Ltd. is a Public Sector General Insurance Company incorporated in 1938, having its presence all over India providing risk cover to 1.74 Crore policyholders. General Insurance Policies such as Motor, Health, Personal Accident, Travel, e.t.c issued by United India Insurance Co. Ltd. (https://uiic.co.in/) are available to be downloaded by citizens of India to their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CripcRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:34.208928-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CripcRequestCertificateParameters {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private String DOB;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_U_D_F1 = "UDF1";
  @SerializedName(SERIALIZED_NAME_U_D_F1)
  private String UDF1;

  public static final String SERIALIZED_NAME_U_D_F2 = "UDF2";
  @SerializedName(SERIALIZED_NAME_U_D_F2)
  private String UDF2;

  public static final String SERIALIZED_NAME_U_D_F3 = "UDF3";
  @SerializedName(SERIALIZED_NAME_U_D_F3)
  private String UDF3;

  public static final String SERIALIZED_NAME_U_I_D = "UID";
  @SerializedName(SERIALIZED_NAME_U_I_D)
  private String UID;

  public CripcRequestCertificateParameters() {
  }

  public CripcRequestCertificateParameters DOB(String DOB) {
    this.DOB = DOB;
    return this;
  }

  /**
   * Date of birth in DD-MM-YYYY format
   * @return DOB
   */
  @javax.annotation.Nonnull
  public String getDOB() {
    return DOB;
  }

  public void setDOB(String DOB) {
    this.DOB = DOB;
  }


  public CripcRequestCertificateParameters fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public CripcRequestCertificateParameters UDF1(String UDF1) {
    this.UDF1 = UDF1;
    return this;
  }

  /**
   * Policy Number
   * @return UDF1
   */
  @javax.annotation.Nonnull
  public String getUDF1() {
    return UDF1;
  }

  public void setUDF1(String UDF1) {
    this.UDF1 = UDF1;
  }


  public CripcRequestCertificateParameters UDF2(String UDF2) {
    this.UDF2 = UDF2;
    return this;
  }

  /**
   * Policy Effective Date
   * @return UDF2
   */
  @javax.annotation.Nonnull
  public String getUDF2() {
    return UDF2;
  }

  public void setUDF2(String UDF2) {
    this.UDF2 = UDF2;
  }


  public CripcRequestCertificateParameters UDF3(String UDF3) {
    this.UDF3 = UDF3;
    return this;
  }

  /**
   * Customer ID
   * @return UDF3
   */
  @javax.annotation.Nonnull
  public String getUDF3() {
    return UDF3;
  }

  public void setUDF3(String UDF3) {
    this.UDF3 = UDF3;
  }


  public CripcRequestCertificateParameters UID(String UID) {
    this.UID = UID;
    return this;
  }

  /**
   * Aadhaar number
   * @return UID
   */
  @javax.annotation.Nonnull
  public String getUID() {
    return UID;
  }

  public void setUID(String UID) {
    this.UID = UID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CripcRequestCertificateParameters cripcRequestCertificateParameters = (CripcRequestCertificateParameters) o;
    return Objects.equals(this.DOB, cripcRequestCertificateParameters.DOB) &&
        Objects.equals(this.fullName, cripcRequestCertificateParameters.fullName) &&
        Objects.equals(this.UDF1, cripcRequestCertificateParameters.UDF1) &&
        Objects.equals(this.UDF2, cripcRequestCertificateParameters.UDF2) &&
        Objects.equals(this.UDF3, cripcRequestCertificateParameters.UDF3) &&
        Objects.equals(this.UID, cripcRequestCertificateParameters.UID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, fullName, UDF1, UDF2, UDF3, UID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CripcRequestCertificateParameters {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    UDF1: ").append(toIndentedString(UDF1)).append("\n");
    sb.append("    UDF2: ").append(toIndentedString(UDF2)).append("\n");
    sb.append("    UDF3: ").append(toIndentedString(UDF3)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("FullName");
    openapiFields.add("UDF1");
    openapiFields.add("UDF2");
    openapiFields.add("UDF3");
    openapiFields.add("UID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("UDF1");
    openapiRequiredFields.add("UDF2");
    openapiRequiredFields.add("UDF3");
    openapiRequiredFields.add("UID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CripcRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CripcRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CripcRequestCertificateParameters is not found in the empty JSON string", CripcRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CripcRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CripcRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CripcRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DOB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("UDF1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDF1").toString()));
      }
      if (!jsonObj.get("UDF2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDF2").toString()));
      }
      if (!jsonObj.get("UDF3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDF3").toString()));
      }
      if (!jsonObj.get("UID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CripcRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CripcRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CripcRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CripcRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CripcRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, CripcRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CripcRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CripcRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CripcRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to CripcRequestCertificateParameters
   */
  public static CripcRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CripcRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of CripcRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

