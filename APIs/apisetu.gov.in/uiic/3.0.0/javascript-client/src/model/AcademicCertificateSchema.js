/**
 * United India Insurance Company Limited
 * United India Insurance Co. Ltd. is a Public Sector General Insurance Company incorporated in 1938, having its presence all over India providing risk cover to 1.74 Crore policyholders. General Insurance Policies such as Motor, Health, Personal Accident, Travel, e.t.c issued by United India Insurance Co. Ltd. (https://uiic.co.in/) are available to be downloaded by citizens of India to their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcademicCertificateSchemaCertificateData from './AcademicCertificateSchemaCertificateData';
import AcademicCertificateSchemaIssuedBy from './AcademicCertificateSchemaIssuedBy';
import AcademicCertificateSchemaIssuedTo from './AcademicCertificateSchemaIssuedTo';

/**
 * The AcademicCertificateSchema model module.
 * @module model/AcademicCertificateSchema
 * @version 3.0.0
 */
class AcademicCertificateSchema {
    /**
     * Constructs a new <code>AcademicCertificateSchema</code>.
     * @alias module:model/AcademicCertificateSchema
     * @param certificateData {module:model/AcademicCertificateSchemaCertificateData} 
     * @param issuedBy {module:model/AcademicCertificateSchemaIssuedBy} 
     * @param issuedTo {module:model/AcademicCertificateSchemaIssuedTo} 
     * @param issueDate {String} 
     * @param issuedAt {String} 
     * @param language {String} 
     * @param name {String} 
     * @param number {Number} 
     * @param status {String} 
     * @param type {String} 
     * @param validFromDate {String} 
     */
    constructor(certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate) { 
        
        AcademicCertificateSchema.initialize(this, certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate) { 
        obj['CertificateData'] = certificateData;
        obj['IssuedBy'] = issuedBy;
        obj['IssuedTo'] = issuedTo;
        obj['issueDate'] = issueDate;
        obj['issuedAt'] = issuedAt;
        obj['language'] = language;
        obj['name'] = name;
        obj['number'] = number;
        obj['status'] = status;
        obj['type'] = type;
        obj['validFromDate'] = validFromDate;
    }

    /**
     * Constructs a <code>AcademicCertificateSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchema} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchema} The populated <code>AcademicCertificateSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchema();

            if (data.hasOwnProperty('CertificateData')) {
                obj['CertificateData'] = AcademicCertificateSchemaCertificateData.constructFromObject(data['CertificateData']);
            }
            if (data.hasOwnProperty('IssuedBy')) {
                obj['IssuedBy'] = AcademicCertificateSchemaIssuedBy.constructFromObject(data['IssuedBy']);
            }
            if (data.hasOwnProperty('IssuedTo')) {
                obj['IssuedTo'] = AcademicCertificateSchemaIssuedTo.constructFromObject(data['IssuedTo']);
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
            if (data.hasOwnProperty('issuedAt')) {
                obj['issuedAt'] = ApiClient.convertToType(data['issuedAt'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validFromDate')) {
                obj['validFromDate'] = ApiClient.convertToType(data['validFromDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CertificateData`
        if (data['CertificateData']) { // data not null
          AcademicCertificateSchemaCertificateData.validateJSON(data['CertificateData']);
        }
        // validate the optional field `IssuedBy`
        if (data['IssuedBy']) { // data not null
          AcademicCertificateSchemaIssuedBy.validateJSON(data['IssuedBy']);
        }
        // validate the optional field `IssuedTo`
        if (data['IssuedTo']) { // data not null
          AcademicCertificateSchemaIssuedTo.validateJSON(data['IssuedTo']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }
        // ensure the json data is a string
        if (data['issuedAt'] && !(typeof data['issuedAt'] === 'string' || data['issuedAt'] instanceof String)) {
            throw new Error("Expected the field `issuedAt` to be a primitive type in the JSON string but got " + data['issuedAt']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validFromDate'] && !(typeof data['validFromDate'] === 'string' || data['validFromDate'] instanceof String)) {
            throw new Error("Expected the field `validFromDate` to be a primitive type in the JSON string but got " + data['validFromDate']);
        }

        return true;
    }


}

AcademicCertificateSchema.RequiredProperties = ["CertificateData", "IssuedBy", "IssuedTo", "issueDate", "issuedAt", "language", "name", "number", "status", "type", "validFromDate"];

/**
 * @member {module:model/AcademicCertificateSchemaCertificateData} CertificateData
 */
AcademicCertificateSchema.prototype['CertificateData'] = undefined;

/**
 * @member {module:model/AcademicCertificateSchemaIssuedBy} IssuedBy
 */
AcademicCertificateSchema.prototype['IssuedBy'] = undefined;

/**
 * @member {module:model/AcademicCertificateSchemaIssuedTo} IssuedTo
 */
AcademicCertificateSchema.prototype['IssuedTo'] = undefined;

/**
 * @member {String} issueDate
 */
AcademicCertificateSchema.prototype['issueDate'] = undefined;

/**
 * @member {String} issuedAt
 */
AcademicCertificateSchema.prototype['issuedAt'] = undefined;

/**
 * @member {String} language
 */
AcademicCertificateSchema.prototype['language'] = undefined;

/**
 * @member {String} name
 */
AcademicCertificateSchema.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
AcademicCertificateSchema.prototype['number'] = undefined;

/**
 * @member {String} status
 */
AcademicCertificateSchema.prototype['status'] = undefined;

/**
 * @member {String} type
 */
AcademicCertificateSchema.prototype['type'] = undefined;

/**
 * @member {String} validFromDate
 */
AcademicCertificateSchema.prototype['validFromDate'] = undefined;






export default AcademicCertificateSchema;

