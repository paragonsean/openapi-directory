/**
 * KERALA PUBLIC SERVICE COMMISSION, Kerala
 * The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OtcerRequestCertificateParameters model module.
 * @module model/OtcerRequestCertificateParameters
 * @version 3.0.0
 */
class OtcerRequestCertificateParameters {
    /**
     * Constructs a new <code>OtcerRequestCertificateParameters</code>.
     * @alias module:model/OtcerRequestCertificateParameters
     * @param DOB {String} Date of birth in DD-MM-YYYY format
     * @param fullName {String} Full name
     * @param UID {String} Aadhaar number
     */
    constructor(DOB, fullName, UID) { 
        
        OtcerRequestCertificateParameters.initialize(this, DOB, fullName, UID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, DOB, fullName, UID) { 
        obj['DOB'] = DOB;
        obj['FullName'] = fullName;
        obj['UID'] = UID;
    }

    /**
     * Constructs a <code>OtcerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OtcerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/OtcerRequestCertificateParameters} The populated <code>OtcerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OtcerRequestCertificateParameters();

            if (data.hasOwnProperty('DOB')) {
                obj['DOB'] = ApiClient.convertToType(data['DOB'], 'String');
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], 'String');
            }
            if (data.hasOwnProperty('UID')) {
                obj['UID'] = ApiClient.convertToType(data['UID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OtcerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OtcerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OtcerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DOB'] && !(typeof data['DOB'] === 'string' || data['DOB'] instanceof String)) {
            throw new Error("Expected the field `DOB` to be a primitive type in the JSON string but got " + data['DOB']);
        }
        // ensure the json data is a string
        if (data['FullName'] && !(typeof data['FullName'] === 'string' || data['FullName'] instanceof String)) {
            throw new Error("Expected the field `FullName` to be a primitive type in the JSON string but got " + data['FullName']);
        }
        // ensure the json data is a string
        if (data['UID'] && !(typeof data['UID'] === 'string' || data['UID'] instanceof String)) {
            throw new Error("Expected the field `UID` to be a primitive type in the JSON string but got " + data['UID']);
        }

        return true;
    }


}

OtcerRequestCertificateParameters.RequiredProperties = ["DOB", "FullName", "UID"];

/**
 * Date of birth in DD-MM-YYYY format
 * @member {String} DOB
 */
OtcerRequestCertificateParameters.prototype['DOB'] = undefined;

/**
 * Full name
 * @member {String} FullName
 */
OtcerRequestCertificateParameters.prototype['FullName'] = undefined;

/**
 * Aadhaar number
 * @member {String} UID
 */
OtcerRequestCertificateParameters.prototype['UID'] = undefined;






export default OtcerRequestCertificateParameters;

