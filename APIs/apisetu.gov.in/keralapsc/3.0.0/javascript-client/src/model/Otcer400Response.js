/**
 * KERALA PUBLIC SERVICE COMMISSION, Kerala
 * The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Otcer400Response model module.
 * @module model/Otcer400Response
 * @version 3.0.0
 */
class Otcer400Response {
    /**
     * Constructs a new <code>Otcer400Response</code>.
     * @alias module:model/Otcer400Response
     */
    constructor() { 
        
        Otcer400Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Otcer400Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Otcer400Response} obj Optional instance to populate.
     * @return {module:model/Otcer400Response} The populated <code>Otcer400Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Otcer400Response();

            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('errorDescription')) {
                obj['errorDescription'] = ApiClient.convertToType(data['errorDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Otcer400Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Otcer400Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['errorDescription'] && !(typeof data['errorDescription'] === 'string' || data['errorDescription'] instanceof String)) {
            throw new Error("Expected the field `errorDescription` to be a primitive type in the JSON string but got " + data['errorDescription']);
        }

        return true;
    }


}



/**
 * @member {module:model/Otcer400Response.ErrorEnum} error
 */
Otcer400Response.prototype['error'] = undefined;

/**
 * @member {module:model/Otcer400Response.ErrorDescriptionEnum} errorDescription
 */
Otcer400Response.prototype['errorDescription'] = undefined;





/**
 * Allowed values for the <code>error</code> property.
 * @enum {String}
 * @readonly
 */
Otcer400Response['ErrorEnum'] = {

    /**
     * value: "missing_parameter"
     * @const
     */
    "missing_parameter": "missing_parameter",

    /**
     * value: "invalid_parameter"
     * @const
     */
    "invalid_parameter": "invalid_parameter",

    /**
     * value: "invalid_format"
     * @const
     */
    "invalid_format": "invalid_format",

    /**
     * value: "invalid_txnid"
     * @const
     */
    "invalid_txnid": "invalid_txnid",

    /**
     * value: "invalid_consentid"
     * @const
     */
    "invalid_consentid": "invalid_consentid"
};


/**
 * Allowed values for the <code>errorDescription</code> property.
 * @enum {String}
 * @readonly
 */
Otcer400Response['ErrorDescriptionEnum'] = {

    /**
     * value: "Please provide all mandatory parameters"
     * @const
     */
    "Please provide all mandatory parameters": "Please provide all mandatory parameters",

    /**
     * value: "Bad request"
     * @const
     */
    "Bad request": "Bad request",

    /**
     * value: "The format parameter is invalid"
     * @const
     */
    "The format parameter is invalid": "The format parameter is invalid",

    /**
     * value: "The txnId parameter must be in UUID format"
     * @const
     */
    "The txnId parameter must be in UUID format": "The txnId parameter must be in UUID format",

    /**
     * value: "The consentId parameter must be in UUID format"
     * @const
     */
    "The consentId parameter must be in UUID format": "The consentId parameter must be in UUID format"
};



export default Otcer400Response;

