/**
 * KERALA PUBLIC SERVICE COMMISSION, Kerala
 * The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtcer_500_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtcer_500_response::OAIOtcer_500_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtcer_500_response::OAIOtcer_500_response() {
    this->initializeModel();
}

OAIOtcer_500_response::~OAIOtcer_500_response() {}

void OAIOtcer_500_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;
}

void OAIOtcer_500_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtcer_500_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;
}

QString OAIOtcer_500_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtcer_500_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    return obj;
}

QString OAIOtcer_500_response::getError() const {
    return m_error;
}
void OAIOtcer_500_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIOtcer_500_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAIOtcer_500_response::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIOtcer_500_response::getErrorDescription() const {
    return m_error_description;
}
void OAIOtcer_500_response::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIOtcer_500_response::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIOtcer_500_response::is_error_description_Valid() const{
    return m_error_description_isValid;
}

bool OAIOtcer_500_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtcer_500_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
