/**
 * KERALA PUBLIC SERVICE COMMISSION, Kerala
 * The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtcer_request_certificateParameters::OAIOtcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtcer_request_certificateParameters::OAIOtcer_request_certificateParameters() {
    this->initializeModel();
}

OAIOtcer_request_certificateParameters::~OAIOtcer_request_certificateParameters() {}

void OAIOtcer_request_certificateParameters::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIOtcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;
}

QString OAIOtcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIOtcer_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAIOtcer_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIOtcer_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIOtcer_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIOtcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIOtcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIOtcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIOtcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIOtcer_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAIOtcer_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIOtcer_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIOtcer_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIOtcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_full_name_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
