/**
 * KERALA PUBLIC SERVICE COMMISSION, Kerala
 * The following issued documents can be integrated with DigiLocker and get used by candidates for service delivery - 1.One Time Verification -OTV certificate ï¿½ issued to candidates qualified for appointment for posts in Govt. Sector to produce to the concerned dept. after scrutinizing their the relevant documents to prove their qualifications, age, etc.2. Admission Tickets for appearing Online, OMR Exams, Physical Test, Interview etc. 3.Departmental Test Certificates- is issued to employees in Govt. sector
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcademicCertificateSchema_IssuedTo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcademicCertificateSchema_IssuedTo::OAIAcademicCertificateSchema_IssuedTo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcademicCertificateSchema_IssuedTo::OAIAcademicCertificateSchema_IssuedTo() {
    this->initializeModel();
}

OAIAcademicCertificateSchema_IssuedTo::~OAIAcademicCertificateSchema_IssuedTo() {}

void OAIAcademicCertificateSchema_IssuedTo::initializeModel() {

    m_person_isSet = false;
    m_person_isValid = false;
}

void OAIAcademicCertificateSchema_IssuedTo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcademicCertificateSchema_IssuedTo::fromJsonObject(QJsonObject json) {

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("Person")]);
    m_person_isSet = !json[QString("Person")].isNull() && m_person_isValid;
}

QString OAIAcademicCertificateSchema_IssuedTo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcademicCertificateSchema_IssuedTo::asJsonObject() const {
    QJsonObject obj;
    if (m_person.isSet()) {
        obj.insert(QString("Person"), ::OpenAPI::toJsonValue(m_person));
    }
    return obj;
}

OAIAcademicCertificateSchema_IssuedTo_Person OAIAcademicCertificateSchema_IssuedTo::getPerson() const {
    return m_person;
}
void OAIAcademicCertificateSchema_IssuedTo::setPerson(const OAIAcademicCertificateSchema_IssuedTo_Person &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIAcademicCertificateSchema_IssuedTo::is_person_Set() const{
    return m_person_isSet;
}

bool OAIAcademicCertificateSchema_IssuedTo::is_person_Valid() const{
    return m_person_isValid;
}

bool OAIAcademicCertificateSchema_IssuedTo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcademicCertificateSchema_IssuedTo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_person_isValid && true;
}

} // namespace OpenAPI
