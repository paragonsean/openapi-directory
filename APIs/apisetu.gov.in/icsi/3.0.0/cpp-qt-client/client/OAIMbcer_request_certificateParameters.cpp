/**
 * Institute of Company Secretaries of India
 * Institute of Company Secretaries of India is available on DigiLocker. ID Card is available for candidates to pull into their DigiLocker account. ICSI members can also pull their ACS certificates  into their DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMbcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMbcer_request_certificateParameters::OAIMbcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMbcer_request_certificateParameters::OAIMbcer_request_certificateParameters() {
    this->initializeModel();
}

OAIMbcer_request_certificateParameters::~OAIMbcer_request_certificateParameters() {}

void OAIMbcer_request_certificateParameters::initializeModel() {

    m_cert_type_isSet = false;
    m_cert_type_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_membership_no_isSet = false;
    m_membership_no_isValid = false;
}

void OAIMbcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMbcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cert_type_isValid = ::OpenAPI::fromJsonValue(m_cert_type, json[QString("CertType")]);
    m_cert_type_isSet = !json[QString("CertType")].isNull() && m_cert_type_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_membership_no_isValid = ::OpenAPI::fromJsonValue(m_membership_no, json[QString("Membership_No")]);
    m_membership_no_isSet = !json[QString("Membership_No")].isNull() && m_membership_no_isValid;
}

QString OAIMbcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMbcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_type_isSet) {
        obj.insert(QString("CertType"), ::OpenAPI::toJsonValue(m_cert_type));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_membership_no_isSet) {
        obj.insert(QString("Membership_No"), ::OpenAPI::toJsonValue(m_membership_no));
    }
    return obj;
}

QString OAIMbcer_request_certificateParameters::getCertType() const {
    return m_cert_type;
}
void OAIMbcer_request_certificateParameters::setCertType(const QString &cert_type) {
    m_cert_type = cert_type;
    m_cert_type_isSet = true;
}

bool OAIMbcer_request_certificateParameters::is_cert_type_Set() const{
    return m_cert_type_isSet;
}

bool OAIMbcer_request_certificateParameters::is_cert_type_Valid() const{
    return m_cert_type_isValid;
}

QString OAIMbcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIMbcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIMbcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIMbcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIMbcer_request_certificateParameters::getMembershipNo() const {
    return m_membership_no;
}
void OAIMbcer_request_certificateParameters::setMembershipNo(const QString &membership_no) {
    m_membership_no = membership_no;
    m_membership_no_isSet = true;
}

bool OAIMbcer_request_certificateParameters::is_membership_no_Set() const{
    return m_membership_no_isSet;
}

bool OAIMbcer_request_certificateParameters::is_membership_no_Valid() const{
    return m_membership_no_isValid;
}

bool OAIMbcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMbcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cert_type_isValid && m_full_name_isValid && m_membership_no_isValid && true;
}

} // namespace OpenAPI
