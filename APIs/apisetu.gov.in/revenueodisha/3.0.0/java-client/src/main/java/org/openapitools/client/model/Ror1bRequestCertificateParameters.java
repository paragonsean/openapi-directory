/*
 * Revenue Department, Odisha
 * Revenue Department of Odisha(http://revenueodisha.gov.in/) provides Copy of Registered Deed(Sale, Gift) of year 2010 onward and Copy of Record of Rights (RoR).
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Ror1bRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:40.977179-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Ror1bRequestCertificateParameters {
  public static final String SERIALIZED_NAME_KHATANO = "khatano";
  @SerializedName(SERIALIZED_NAME_KHATANO)
  private String khatano;

  public static final String SERIALIZED_NAME_LEVEL1 = "level1";
  @SerializedName(SERIALIZED_NAME_LEVEL1)
  private String level1;

  public static final String SERIALIZED_NAME_LEVEL2 = "level2";
  @SerializedName(SERIALIZED_NAME_LEVEL2)
  private String level2;

  public static final String SERIALIZED_NAME_LEVEL3 = "level3";
  @SerializedName(SERIALIZED_NAME_LEVEL3)
  private String level3;

  public Ror1bRequestCertificateParameters() {
  }

  public Ror1bRequestCertificateParameters khatano(String khatano) {
    this.khatano = khatano;
    return this;
  }

  /**
   * Khata No.
   * @return khatano
   */
  @javax.annotation.Nonnull
  public String getKhatano() {
    return khatano;
  }

  public void setKhatano(String khatano) {
    this.khatano = khatano;
  }


  public Ror1bRequestCertificateParameters level1(String level1) {
    this.level1 = level1;
    return this;
  }

  /**
   * District
   * @return level1
   */
  @javax.annotation.Nonnull
  public String getLevel1() {
    return level1;
  }

  public void setLevel1(String level1) {
    this.level1 = level1;
  }


  public Ror1bRequestCertificateParameters level2(String level2) {
    this.level2 = level2;
    return this;
  }

  /**
   * Tahasil
   * @return level2
   */
  @javax.annotation.Nonnull
  public String getLevel2() {
    return level2;
  }

  public void setLevel2(String level2) {
    this.level2 = level2;
  }


  public Ror1bRequestCertificateParameters level3(String level3) {
    this.level3 = level3;
    return this;
  }

  /**
   * Village
   * @return level3
   */
  @javax.annotation.Nonnull
  public String getLevel3() {
    return level3;
  }

  public void setLevel3(String level3) {
    this.level3 = level3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ror1bRequestCertificateParameters ror1bRequestCertificateParameters = (Ror1bRequestCertificateParameters) o;
    return Objects.equals(this.khatano, ror1bRequestCertificateParameters.khatano) &&
        Objects.equals(this.level1, ror1bRequestCertificateParameters.level1) &&
        Objects.equals(this.level2, ror1bRequestCertificateParameters.level2) &&
        Objects.equals(this.level3, ror1bRequestCertificateParameters.level3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(khatano, level1, level2, level3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ror1bRequestCertificateParameters {\n");
    sb.append("    khatano: ").append(toIndentedString(khatano)).append("\n");
    sb.append("    level1: ").append(toIndentedString(level1)).append("\n");
    sb.append("    level2: ").append(toIndentedString(level2)).append("\n");
    sb.append("    level3: ").append(toIndentedString(level3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("khatano");
    openapiFields.add("level1");
    openapiFields.add("level2");
    openapiFields.add("level3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("khatano");
    openapiRequiredFields.add("level1");
    openapiRequiredFields.add("level2");
    openapiRequiredFields.add("level3");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Ror1bRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ror1bRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ror1bRequestCertificateParameters is not found in the empty JSON string", Ror1bRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ror1bRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ror1bRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Ror1bRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("khatano").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `khatano` to be a primitive type in the JSON string but got `%s`", jsonObj.get("khatano").toString()));
      }
      if (!jsonObj.get("level1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level1").toString()));
      }
      if (!jsonObj.get("level2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level2").toString()));
      }
      if (!jsonObj.get("level3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ror1bRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ror1bRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ror1bRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ror1bRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<Ror1bRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, Ror1bRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ror1bRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Ror1bRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Ror1bRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to Ror1bRequestCertificateParameters
   */
  public static Ror1bRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ror1bRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of Ror1bRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

