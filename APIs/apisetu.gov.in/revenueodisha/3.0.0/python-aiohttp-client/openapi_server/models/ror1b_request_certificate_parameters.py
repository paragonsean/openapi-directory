# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ror1bRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, khatano: str=None, level1: str=None, level2: str=None, level3: str=None):
        """Ror1bRequestCertificateParameters - a model defined in OpenAPI

        :param khatano: The khatano of this Ror1bRequestCertificateParameters.
        :param level1: The level1 of this Ror1bRequestCertificateParameters.
        :param level2: The level2 of this Ror1bRequestCertificateParameters.
        :param level3: The level3 of this Ror1bRequestCertificateParameters.
        """
        self.openapi_types = {
            'khatano': str,
            'level1': str,
            'level2': str,
            'level3': str
        }

        self.attribute_map = {
            'khatano': 'khatano',
            'level1': 'level1',
            'level2': 'level2',
            'level3': 'level3'
        }

        self._khatano = khatano
        self._level1 = level1
        self._level2 = level2
        self._level3 = level3

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ror1bRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ror1b_request_certificateParameters of this Ror1bRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def khatano(self):
        """Gets the khatano of this Ror1bRequestCertificateParameters.

        Khata No.

        :return: The khatano of this Ror1bRequestCertificateParameters.
        :rtype: str
        """
        return self._khatano

    @khatano.setter
    def khatano(self, khatano):
        """Sets the khatano of this Ror1bRequestCertificateParameters.

        Khata No.

        :param khatano: The khatano of this Ror1bRequestCertificateParameters.
        :type khatano: str
        """
        if khatano is None:
            raise ValueError("Invalid value for `khatano`, must not be `None`")

        self._khatano = khatano

    @property
    def level1(self):
        """Gets the level1 of this Ror1bRequestCertificateParameters.

        District

        :return: The level1 of this Ror1bRequestCertificateParameters.
        :rtype: str
        """
        return self._level1

    @level1.setter
    def level1(self, level1):
        """Sets the level1 of this Ror1bRequestCertificateParameters.

        District

        :param level1: The level1 of this Ror1bRequestCertificateParameters.
        :type level1: str
        """
        if level1 is None:
            raise ValueError("Invalid value for `level1`, must not be `None`")

        self._level1 = level1

    @property
    def level2(self):
        """Gets the level2 of this Ror1bRequestCertificateParameters.

        Tahasil

        :return: The level2 of this Ror1bRequestCertificateParameters.
        :rtype: str
        """
        return self._level2

    @level2.setter
    def level2(self, level2):
        """Sets the level2 of this Ror1bRequestCertificateParameters.

        Tahasil

        :param level2: The level2 of this Ror1bRequestCertificateParameters.
        :type level2: str
        """
        if level2 is None:
            raise ValueError("Invalid value for `level2`, must not be `None`")

        self._level2 = level2

    @property
    def level3(self):
        """Gets the level3 of this Ror1bRequestCertificateParameters.

        Village

        :return: The level3 of this Ror1bRequestCertificateParameters.
        :rtype: str
        """
        return self._level3

    @level3.setter
    def level3(self, level3):
        """Sets the level3 of this Ror1bRequestCertificateParameters.

        Village

        :param level3: The level3 of this Ror1bRequestCertificateParameters.
        :type level3: str
        """
        if level3 is None:
            raise ValueError("Invalid value for `level3`, must not be `None`")

        self._level3 = level3
