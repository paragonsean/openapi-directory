/**
 * Assam State Board of Secondary Education, Assam
 * Board of Secondary Education, Assam (https://sebaonline.org/) has made available 2018 Class X results in DigiLocker, which can be pulled by students into their accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SscerRequestCertificateParameters model module.
 * @module model/SscerRequestCertificateParameters
 * @version 3.0.0
 */
class SscerRequestCertificateParameters {
    /**
     * Constructs a new <code>SscerRequestCertificateParameters</code>.
     * @alias module:model/SscerRequestCertificateParameters
     * @param cent {String} Roll
     * @param mName {String} Mother Name
     * @param name {String} Name
     * @param RROLL {String} No.
     * @param YEAR {String} Year
     */
    constructor(cent, mName, name, RROLL, YEAR) { 
        
        SscerRequestCertificateParameters.initialize(this, cent, mName, name, RROLL, YEAR);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cent, mName, name, RROLL, YEAR) { 
        obj['Cent'] = cent;
        obj['MName'] = mName;
        obj['Name'] = name;
        obj['RROLL'] = RROLL;
        obj['YEAR'] = YEAR;
    }

    /**
     * Constructs a <code>SscerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SscerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/SscerRequestCertificateParameters} The populated <code>SscerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SscerRequestCertificateParameters();

            if (data.hasOwnProperty('Cent')) {
                obj['Cent'] = ApiClient.convertToType(data['Cent'], 'String');
            }
            if (data.hasOwnProperty('MName')) {
                obj['MName'] = ApiClient.convertToType(data['MName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RROLL')) {
                obj['RROLL'] = ApiClient.convertToType(data['RROLL'], 'String');
            }
            if (data.hasOwnProperty('YEAR')) {
                obj['YEAR'] = ApiClient.convertToType(data['YEAR'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SscerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SscerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SscerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Cent'] && !(typeof data['Cent'] === 'string' || data['Cent'] instanceof String)) {
            throw new Error("Expected the field `Cent` to be a primitive type in the JSON string but got " + data['Cent']);
        }
        // ensure the json data is a string
        if (data['MName'] && !(typeof data['MName'] === 'string' || data['MName'] instanceof String)) {
            throw new Error("Expected the field `MName` to be a primitive type in the JSON string but got " + data['MName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RROLL'] && !(typeof data['RROLL'] === 'string' || data['RROLL'] instanceof String)) {
            throw new Error("Expected the field `RROLL` to be a primitive type in the JSON string but got " + data['RROLL']);
        }
        // ensure the json data is a string
        if (data['YEAR'] && !(typeof data['YEAR'] === 'string' || data['YEAR'] instanceof String)) {
            throw new Error("Expected the field `YEAR` to be a primitive type in the JSON string but got " + data['YEAR']);
        }

        return true;
    }


}

SscerRequestCertificateParameters.RequiredProperties = ["Cent", "MName", "Name", "RROLL", "YEAR"];

/**
 * Roll
 * @member {String} Cent
 */
SscerRequestCertificateParameters.prototype['Cent'] = undefined;

/**
 * Mother Name
 * @member {String} MName
 */
SscerRequestCertificateParameters.prototype['MName'] = undefined;

/**
 * Name
 * @member {String} Name
 */
SscerRequestCertificateParameters.prototype['Name'] = undefined;

/**
 * No.
 * @member {String} RROLL
 */
SscerRequestCertificateParameters.prototype['RROLL'] = undefined;

/**
 * Year
 * @member {String} YEAR
 */
SscerRequestCertificateParameters.prototype['YEAR'] = undefined;






export default SscerRequestCertificateParameters;

