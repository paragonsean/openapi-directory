# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cent: str=None, m_name: str=None, name: str=None, rroll: str=None, year: str=None):
        """SscerRequestCertificateParameters - a model defined in OpenAPI

        :param cent: The cent of this SscerRequestCertificateParameters.
        :param m_name: The m_name of this SscerRequestCertificateParameters.
        :param name: The name of this SscerRequestCertificateParameters.
        :param rroll: The rroll of this SscerRequestCertificateParameters.
        :param year: The year of this SscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cent': str,
            'm_name': str,
            'name': str,
            'rroll': str,
            'year': str
        }

        self.attribute_map = {
            'cent': 'Cent',
            'm_name': 'MName',
            'name': 'Name',
            'rroll': 'RROLL',
            'year': 'YEAR'
        }

        self._cent = cent
        self._m_name = m_name
        self._name = name
        self._rroll = rroll
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sscer_request_certificateParameters of this SscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cent(self):
        """Gets the cent of this SscerRequestCertificateParameters.

        Roll

        :return: The cent of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._cent

    @cent.setter
    def cent(self, cent):
        """Sets the cent of this SscerRequestCertificateParameters.

        Roll

        :param cent: The cent of this SscerRequestCertificateParameters.
        :type cent: str
        """
        if cent is None:
            raise ValueError("Invalid value for `cent`, must not be `None`")

        self._cent = cent

    @property
    def m_name(self):
        """Gets the m_name of this SscerRequestCertificateParameters.

        Mother Name

        :return: The m_name of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._m_name

    @m_name.setter
    def m_name(self, m_name):
        """Sets the m_name of this SscerRequestCertificateParameters.

        Mother Name

        :param m_name: The m_name of this SscerRequestCertificateParameters.
        :type m_name: str
        """
        if m_name is None:
            raise ValueError("Invalid value for `m_name`, must not be `None`")

        self._m_name = m_name

    @property
    def name(self):
        """Gets the name of this SscerRequestCertificateParameters.

        Name

        :return: The name of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SscerRequestCertificateParameters.

        Name

        :param name: The name of this SscerRequestCertificateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rroll(self):
        """Gets the rroll of this SscerRequestCertificateParameters.

        No.

        :return: The rroll of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._rroll

    @rroll.setter
    def rroll(self, rroll):
        """Sets the rroll of this SscerRequestCertificateParameters.

        No.

        :param rroll: The rroll of this SscerRequestCertificateParameters.
        :type rroll: str
        """
        if rroll is None:
            raise ValueError("Invalid value for `rroll`, must not be `None`")

        self._rroll = rroll

    @property
    def year(self):
        """Gets the year of this SscerRequestCertificateParameters.

        Year

        :return: The year of this SscerRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SscerRequestCertificateParameters.

        Year

        :param year: The year of this SscerRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
