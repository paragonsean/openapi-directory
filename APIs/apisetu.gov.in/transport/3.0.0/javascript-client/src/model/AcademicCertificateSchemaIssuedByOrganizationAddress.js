/**
 * Ministry of Road Transport and Highways
 * Driving License (DL) & Vehicle Registration Certificate (RC) as available in Ministry of Transport's SARATHI & VAHAN portals (http://morth.nic.in/) can be pulled by citizens into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AcademicCertificateSchemaIssuedByOrganizationAddress model module.
 * @module model/AcademicCertificateSchemaIssuedByOrganizationAddress
 * @version 3.0.0
 */
class AcademicCertificateSchemaIssuedByOrganizationAddress {
    /**
     * Constructs a new <code>AcademicCertificateSchemaIssuedByOrganizationAddress</code>.
     * @alias module:model/AcademicCertificateSchemaIssuedByOrganizationAddress
     * @param country {String} 
     * @param district {String} 
     * @param house {String} 
     * @param landmark {String} 
     * @param line1 {String} 
     * @param line2 {String} 
     * @param locality {String} 
     * @param pin {String} 
     * @param state {String} 
     * @param type {String} 
     * @param vtc {String} 
     */
    constructor(country, district, house, landmark, line1, line2, locality, pin, state, type, vtc) { 
        
        AcademicCertificateSchemaIssuedByOrganizationAddress.initialize(this, country, district, house, landmark, line1, line2, locality, pin, state, type, vtc);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, district, house, landmark, line1, line2, locality, pin, state, type, vtc) { 
        obj['country'] = country;
        obj['district'] = district;
        obj['house'] = house;
        obj['landmark'] = landmark;
        obj['line1'] = line1;
        obj['line2'] = line2;
        obj['locality'] = locality;
        obj['pin'] = pin;
        obj['state'] = state;
        obj['type'] = type;
        obj['vtc'] = vtc;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaIssuedByOrganizationAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaIssuedByOrganizationAddress} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaIssuedByOrganizationAddress} The populated <code>AcademicCertificateSchemaIssuedByOrganizationAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaIssuedByOrganizationAddress();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = ApiClient.convertToType(data['house'], 'String');
            }
            if (data.hasOwnProperty('landmark')) {
                obj['landmark'] = ApiClient.convertToType(data['landmark'], 'String');
            }
            if (data.hasOwnProperty('line1')) {
                obj['line1'] = ApiClient.convertToType(data['line1'], 'String');
            }
            if (data.hasOwnProperty('line2')) {
                obj['line2'] = ApiClient.convertToType(data['line2'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vtc')) {
                obj['vtc'] = ApiClient.convertToType(data['vtc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaIssuedByOrganizationAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaIssuedByOrganizationAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaIssuedByOrganizationAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['house'] && !(typeof data['house'] === 'string' || data['house'] instanceof String)) {
            throw new Error("Expected the field `house` to be a primitive type in the JSON string but got " + data['house']);
        }
        // ensure the json data is a string
        if (data['landmark'] && !(typeof data['landmark'] === 'string' || data['landmark'] instanceof String)) {
            throw new Error("Expected the field `landmark` to be a primitive type in the JSON string but got " + data['landmark']);
        }
        // ensure the json data is a string
        if (data['line1'] && !(typeof data['line1'] === 'string' || data['line1'] instanceof String)) {
            throw new Error("Expected the field `line1` to be a primitive type in the JSON string but got " + data['line1']);
        }
        // ensure the json data is a string
        if (data['line2'] && !(typeof data['line2'] === 'string' || data['line2'] instanceof String)) {
            throw new Error("Expected the field `line2` to be a primitive type in the JSON string but got " + data['line2']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vtc'] && !(typeof data['vtc'] === 'string' || data['vtc'] instanceof String)) {
            throw new Error("Expected the field `vtc` to be a primitive type in the JSON string but got " + data['vtc']);
        }

        return true;
    }


}

AcademicCertificateSchemaIssuedByOrganizationAddress.RequiredProperties = ["country", "district", "house", "landmark", "line1", "line2", "locality", "pin", "state", "type", "vtc"];

/**
 * @member {String} country
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['country'] = undefined;

/**
 * @member {String} district
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['district'] = undefined;

/**
 * @member {String} house
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['house'] = undefined;

/**
 * @member {String} landmark
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['landmark'] = undefined;

/**
 * @member {String} line1
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['line1'] = undefined;

/**
 * @member {String} line2
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['line2'] = undefined;

/**
 * @member {String} locality
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['locality'] = undefined;

/**
 * @member {String} pin
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['pin'] = undefined;

/**
 * @member {String} state
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['state'] = undefined;

/**
 * @member {String} type
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['type'] = undefined;

/**
 * @member {String} vtc
 */
AcademicCertificateSchemaIssuedByOrganizationAddress.prototype['vtc'] = undefined;






export default AcademicCertificateSchemaIssuedByOrganizationAddress;

