/**
 * Ministry of Road Transport and Highways
 * Driving License (DL) & Vehicle Registration Certificate (RC) as available in Ministry of Transport's SARATHI & VAHAN portals (http://morth.nic.in/) can be pulled by citizens into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcademicCertificateSchema from '../model/AcademicCertificateSchema';
import DrivingLicenseSchema from '../model/DrivingLicenseSchema';
import Drvlc400Response from '../model/Drvlc400Response';
import Drvlc401Response from '../model/Drvlc401Response';
import Drvlc404Response from '../model/Drvlc404Response';
import Drvlc500Response from '../model/Drvlc500Response';
import Drvlc502Response from '../model/Drvlc502Response';
import Drvlc503Response from '../model/Drvlc503Response';
import Drvlc504Response from '../model/Drvlc504Response';
import DrvlcRequest from '../model/DrvlcRequest';
import FitcerRequest from '../model/FitcerRequest';
import RvcerRequest from '../model/RvcerRequest';
import VehicleRegistrationSchema from '../model/VehicleRegistrationSchema';
import VhinscRequest from '../model/VhinscRequest';
import VhtaxRequest from '../model/VhtaxRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the drvlc operation.
     * @callback module:api/APIsApi~drvlcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Driving License
     * API to verify Driving License.
     * @param {Object} opts Optional parameters
     * @param {module:model/DrvlcRequest} [drvlcRequest] Request format
     * @param {module:api/APIsApi~drvlcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    drvlc(opts, callback) {
      opts = opts || {};
      let postBody = opts['drvlcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/drvlc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fitcer operation.
     * @callback module:api/APIsApi~fitcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fitness Certificate
     * API to verify Fitness Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/FitcerRequest} [fitcerRequest] Request format
     * @param {module:api/APIsApi~fitcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fitcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['fitcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fitcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rvcer operation.
     * @callback module:api/APIsApi~rvcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration of Vehicles
     * API to verify Registration of Vehicles.
     * @param {Object} opts Optional parameters
     * @param {module:model/RvcerRequest} [rvcerRequest] Request format
     * @param {module:api/APIsApi~rvcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rvcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['rvcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rvcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vhinsc operation.
     * @callback module:api/APIsApi~vhinscCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vehicle Insurance Certificate
     * API to verify Vehicle Insurance Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/VhinscRequest} [vhinscRequest] Request format
     * @param {module:api/APIsApi~vhinscCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vhinsc(opts, callback) {
      opts = opts || {};
      let postBody = opts['vhinscRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vhinsc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vhtax operation.
     * @callback module:api/APIsApi~vhtaxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Vehicle Tax Receipt
     * API to verify Vehicle Tax Receipt.
     * @param {Object} opts Optional parameters
     * @param {module:model/VhtaxRequest} [vhtaxRequest] Request format
     * @param {module:api/APIsApi~vhtaxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vhtax(opts, callback) {
      opts = opts || {};
      let postBody = opts['vhtaxRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vhtax/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
