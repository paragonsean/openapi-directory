# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, full_name: str=None, passyr: str=None, regno: str=None, uid: str=None):
        """HscerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this HscerRequestCertificateParameters.
        :param full_name: The full_name of this HscerRequestCertificateParameters.
        :param passyr: The passyr of this HscerRequestCertificateParameters.
        :param regno: The regno of this HscerRequestCertificateParameters.
        :param uid: The uid of this HscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'full_name': str,
            'passyr': str,
            'regno': str,
            'uid': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'full_name': 'FullName',
            'passyr': 'PASSYR',
            'regno': 'REGNO',
            'uid': 'UID'
        }

        self._dob = dob
        self._full_name = full_name
        self._passyr = passyr
        self._regno = regno
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hscer_request_certificateParameters of this HscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this HscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this HscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this HscerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this HscerRequestCertificateParameters.

        Full name

        :return: The full_name of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this HscerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this HscerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def passyr(self):
        """Gets the passyr of this HscerRequestCertificateParameters.

        Enter Pass Year

        :return: The passyr of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._passyr

    @passyr.setter
    def passyr(self, passyr):
        """Sets the passyr of this HscerRequestCertificateParameters.

        Enter Pass Year

        :param passyr: The passyr of this HscerRequestCertificateParameters.
        :type passyr: str
        """
        if passyr is None:
            raise ValueError("Invalid value for `passyr`, must not be `None`")

        self._passyr = passyr

    @property
    def regno(self):
        """Gets the regno of this HscerRequestCertificateParameters.

        Enter Reg No.

        :return: The regno of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._regno

    @regno.setter
    def regno(self, regno):
        """Sets the regno of this HscerRequestCertificateParameters.

        Enter Reg No.

        :param regno: The regno of this HscerRequestCertificateParameters.
        :type regno: str
        """
        if regno is None:
            raise ValueError("Invalid value for `regno`, must not be `None`")

        self._regno = regno

    @property
    def uid(self):
        """Gets the uid of this HscerRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this HscerRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this HscerRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
