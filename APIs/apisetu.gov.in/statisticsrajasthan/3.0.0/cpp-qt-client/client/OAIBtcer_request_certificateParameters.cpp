/**
 * Directorate of Economics and Statistics Cum Chief Registrar, Rajasthan, Rajasthan
 * Birth, Still-Birth, Death and Marriage Certificates issued by the Department, from 01 January 2014 onward, can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBtcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBtcer_request_certificateParameters::OAIBtcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBtcer_request_certificateParameters::OAIBtcer_request_certificateParameters() {
    this->initializeModel();
}

OAIBtcer_request_certificateParameters::~OAIBtcer_request_certificateParameters() {}

void OAIBtcer_request_certificateParameters::initializeModel() {

    m_cert_type_isSet = false;
    m_cert_type_isValid = false;

    m_dateof_event_isSet = false;
    m_dateof_event_isValid = false;

    m_regis_number_isSet = false;
    m_regis_number_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAIBtcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBtcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cert_type_isValid = ::OpenAPI::fromJsonValue(m_cert_type, json[QString("Cert_Type")]);
    m_cert_type_isSet = !json[QString("Cert_Type")].isNull() && m_cert_type_isValid;

    m_dateof_event_isValid = ::OpenAPI::fromJsonValue(m_dateof_event, json[QString("DateofEvent")]);
    m_dateof_event_isSet = !json[QString("DateofEvent")].isNull() && m_dateof_event_isValid;

    m_regis_number_isValid = ::OpenAPI::fromJsonValue(m_regis_number, json[QString("RegisNumber")]);
    m_regis_number_isSet = !json[QString("RegisNumber")].isNull() && m_regis_number_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("Year")]);
    m_year_isSet = !json[QString("Year")].isNull() && m_year_isValid;
}

QString OAIBtcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBtcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_type_isSet) {
        obj.insert(QString("Cert_Type"), ::OpenAPI::toJsonValue(m_cert_type));
    }
    if (m_dateof_event_isSet) {
        obj.insert(QString("DateofEvent"), ::OpenAPI::toJsonValue(m_dateof_event));
    }
    if (m_regis_number_isSet) {
        obj.insert(QString("RegisNumber"), ::OpenAPI::toJsonValue(m_regis_number));
    }
    if (m_year_isSet) {
        obj.insert(QString("Year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAIBtcer_request_certificateParameters::getCertType() const {
    return m_cert_type;
}
void OAIBtcer_request_certificateParameters::setCertType(const QString &cert_type) {
    m_cert_type = cert_type;
    m_cert_type_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_cert_type_Set() const{
    return m_cert_type_isSet;
}

bool OAIBtcer_request_certificateParameters::is_cert_type_Valid() const{
    return m_cert_type_isValid;
}

QString OAIBtcer_request_certificateParameters::getDateofEvent() const {
    return m_dateof_event;
}
void OAIBtcer_request_certificateParameters::setDateofEvent(const QString &dateof_event) {
    m_dateof_event = dateof_event;
    m_dateof_event_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_dateof_event_Set() const{
    return m_dateof_event_isSet;
}

bool OAIBtcer_request_certificateParameters::is_dateof_event_Valid() const{
    return m_dateof_event_isValid;
}

QString OAIBtcer_request_certificateParameters::getRegisNumber() const {
    return m_regis_number;
}
void OAIBtcer_request_certificateParameters::setRegisNumber(const QString &regis_number) {
    m_regis_number = regis_number;
    m_regis_number_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_regis_number_Set() const{
    return m_regis_number_isSet;
}

bool OAIBtcer_request_certificateParameters::is_regis_number_Valid() const{
    return m_regis_number_isValid;
}

QString OAIBtcer_request_certificateParameters::getYear() const {
    return m_year;
}
void OAIBtcer_request_certificateParameters::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAIBtcer_request_certificateParameters::is_year_Set() const{
    return m_year_isSet;
}

bool OAIBtcer_request_certificateParameters::is_year_Valid() const{
    return m_year_isValid;
}

bool OAIBtcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dateof_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regis_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBtcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cert_type_isValid && m_dateof_event_isValid && m_regis_number_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
