/**
 * Directorate of Economics and Statistics Cum Chief Registrar, Rajasthan, Rajasthan
 * Birth, Still-Birth, Death and Marriage Certificates issued by the Department, from 01 January 2014 onward, can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BtcerRequestCertificateParameters model module.
 * @module model/BtcerRequestCertificateParameters
 * @version 3.0.0
 */
class BtcerRequestCertificateParameters {
    /**
     * Constructs a new <code>BtcerRequestCertificateParameters</code>.
     * @alias module:model/BtcerRequestCertificateParameters
     * @param certType {String} Type of Certificate
     * @param dateofEvent {String} Date of Birth
     * @param regisNumber {String} Registration Number
     * @param year {String} Year of Registration
     */
    constructor(certType, dateofEvent, regisNumber, year) { 
        
        BtcerRequestCertificateParameters.initialize(this, certType, dateofEvent, regisNumber, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certType, dateofEvent, regisNumber, year) { 
        obj['Cert_Type'] = certType;
        obj['DateofEvent'] = dateofEvent;
        obj['RegisNumber'] = regisNumber;
        obj['Year'] = year;
    }

    /**
     * Constructs a <code>BtcerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BtcerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/BtcerRequestCertificateParameters} The populated <code>BtcerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BtcerRequestCertificateParameters();

            if (data.hasOwnProperty('Cert_Type')) {
                obj['Cert_Type'] = ApiClient.convertToType(data['Cert_Type'], 'String');
            }
            if (data.hasOwnProperty('DateofEvent')) {
                obj['DateofEvent'] = ApiClient.convertToType(data['DateofEvent'], 'String');
            }
            if (data.hasOwnProperty('RegisNumber')) {
                obj['RegisNumber'] = ApiClient.convertToType(data['RegisNumber'], 'String');
            }
            if (data.hasOwnProperty('Year')) {
                obj['Year'] = ApiClient.convertToType(data['Year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BtcerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BtcerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BtcerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Cert_Type'] && !(typeof data['Cert_Type'] === 'string' || data['Cert_Type'] instanceof String)) {
            throw new Error("Expected the field `Cert_Type` to be a primitive type in the JSON string but got " + data['Cert_Type']);
        }
        // ensure the json data is a string
        if (data['DateofEvent'] && !(typeof data['DateofEvent'] === 'string' || data['DateofEvent'] instanceof String)) {
            throw new Error("Expected the field `DateofEvent` to be a primitive type in the JSON string but got " + data['DateofEvent']);
        }
        // ensure the json data is a string
        if (data['RegisNumber'] && !(typeof data['RegisNumber'] === 'string' || data['RegisNumber'] instanceof String)) {
            throw new Error("Expected the field `RegisNumber` to be a primitive type in the JSON string but got " + data['RegisNumber']);
        }
        // ensure the json data is a string
        if (data['Year'] && !(typeof data['Year'] === 'string' || data['Year'] instanceof String)) {
            throw new Error("Expected the field `Year` to be a primitive type in the JSON string but got " + data['Year']);
        }

        return true;
    }


}

BtcerRequestCertificateParameters.RequiredProperties = ["Cert_Type", "DateofEvent", "RegisNumber", "Year"];

/**
 * Type of Certificate
 * @member {String} Cert_Type
 */
BtcerRequestCertificateParameters.prototype['Cert_Type'] = undefined;

/**
 * Date of Birth
 * @member {String} DateofEvent
 */
BtcerRequestCertificateParameters.prototype['DateofEvent'] = undefined;

/**
 * Registration Number
 * @member {String} RegisNumber
 */
BtcerRequestCertificateParameters.prototype['RegisNumber'] = undefined;

/**
 * Year of Registration
 * @member {String} Year
 */
BtcerRequestCertificateParameters.prototype['Year'] = undefined;






export default BtcerRequestCertificateParameters;

