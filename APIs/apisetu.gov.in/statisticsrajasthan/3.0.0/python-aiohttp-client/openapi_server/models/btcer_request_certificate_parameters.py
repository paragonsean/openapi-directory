# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BtcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_type: str=None, dateof_event: str=None, regis_number: str=None, year: str=None):
        """BtcerRequestCertificateParameters - a model defined in OpenAPI

        :param cert_type: The cert_type of this BtcerRequestCertificateParameters.
        :param dateof_event: The dateof_event of this BtcerRequestCertificateParameters.
        :param regis_number: The regis_number of this BtcerRequestCertificateParameters.
        :param year: The year of this BtcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cert_type': str,
            'dateof_event': str,
            'regis_number': str,
            'year': str
        }

        self.attribute_map = {
            'cert_type': 'Cert_Type',
            'dateof_event': 'DateofEvent',
            'regis_number': 'RegisNumber',
            'year': 'Year'
        }

        self._cert_type = cert_type
        self._dateof_event = dateof_event
        self._regis_number = regis_number
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BtcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The btcer_request_certificateParameters of this BtcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_type(self):
        """Gets the cert_type of this BtcerRequestCertificateParameters.

        Type of Certificate

        :return: The cert_type of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this BtcerRequestCertificateParameters.

        Type of Certificate

        :param cert_type: The cert_type of this BtcerRequestCertificateParameters.
        :type cert_type: str
        """
        if cert_type is None:
            raise ValueError("Invalid value for `cert_type`, must not be `None`")

        self._cert_type = cert_type

    @property
    def dateof_event(self):
        """Gets the dateof_event of this BtcerRequestCertificateParameters.

        Date of Birth

        :return: The dateof_event of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dateof_event

    @dateof_event.setter
    def dateof_event(self, dateof_event):
        """Sets the dateof_event of this BtcerRequestCertificateParameters.

        Date of Birth

        :param dateof_event: The dateof_event of this BtcerRequestCertificateParameters.
        :type dateof_event: str
        """
        if dateof_event is None:
            raise ValueError("Invalid value for `dateof_event`, must not be `None`")

        self._dateof_event = dateof_event

    @property
    def regis_number(self):
        """Gets the regis_number of this BtcerRequestCertificateParameters.

        Registration Number

        :return: The regis_number of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._regis_number

    @regis_number.setter
    def regis_number(self, regis_number):
        """Sets the regis_number of this BtcerRequestCertificateParameters.

        Registration Number

        :param regis_number: The regis_number of this BtcerRequestCertificateParameters.
        :type regis_number: str
        """
        if regis_number is None:
            raise ValueError("Invalid value for `regis_number`, must not be `None`")

        self._regis_number = regis_number

    @property
    def year(self):
        """Gets the year of this BtcerRequestCertificateParameters.

        Year of Registration

        :return: The year of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this BtcerRequestCertificateParameters.

        Year of Registration

        :param year: The year of this BtcerRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
