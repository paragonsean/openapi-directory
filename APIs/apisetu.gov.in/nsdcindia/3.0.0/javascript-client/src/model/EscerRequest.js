/**
 * National Skill Development Corporation (NSDC)
 * NSDC (https://www.nsdcindia.org) promotes skill development by catalyzing creation of large, quality and for-profit vocational institutions. Skill certificates provided under various NSDC programmes are made available to citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentArtifactSchema from './ConsentArtifactSchema';
import EscerRequestCertificateParameters from './EscerRequestCertificateParameters';

/**
 * The EscerRequest model module.
 * @module model/EscerRequest
 * @version 3.0.0
 */
class EscerRequest {
    /**
     * Constructs a new <code>EscerRequest</code>.
     * @alias module:model/EscerRequest
     * @param format {module:model/EscerRequest.FormatEnum} The format of the certificate in response.
     * @param txnId {String} A unique transaction id for this request in UUID format. It is used for tracking the request.
     */
    constructor(format, txnId) { 
        
        EscerRequest.initialize(this, format, txnId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, format, txnId) { 
        obj['format'] = format;
        obj['txnId'] = txnId;
    }

    /**
     * Constructs a <code>EscerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EscerRequest} obj Optional instance to populate.
     * @return {module:model/EscerRequest} The populated <code>EscerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EscerRequest();

            if (data.hasOwnProperty('certificateParameters')) {
                obj['certificateParameters'] = EscerRequestCertificateParameters.constructFromObject(data['certificateParameters']);
            }
            if (data.hasOwnProperty('consentArtifact')) {
                obj['consentArtifact'] = ConsentArtifactSchema.constructFromObject(data['consentArtifact']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('txnId')) {
                obj['txnId'] = ApiClient.convertToType(data['txnId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EscerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EscerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EscerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `certificateParameters`
        if (data['certificateParameters']) { // data not null
          EscerRequestCertificateParameters.validateJSON(data['certificateParameters']);
        }
        // validate the optional field `consentArtifact`
        if (data['consentArtifact']) { // data not null
          ConsentArtifactSchema.validateJSON(data['consentArtifact']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['txnId'] && !(typeof data['txnId'] === 'string' || data['txnId'] instanceof String)) {
            throw new Error("Expected the field `txnId` to be a primitive type in the JSON string but got " + data['txnId']);
        }

        return true;
    }


}

EscerRequest.RequiredProperties = ["format", "txnId"];

/**
 * @member {module:model/EscerRequestCertificateParameters} certificateParameters
 */
EscerRequest.prototype['certificateParameters'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchema} consentArtifact
 */
EscerRequest.prototype['consentArtifact'] = undefined;

/**
 * The format of the certificate in response.
 * @member {module:model/EscerRequest.FormatEnum} format
 */
EscerRequest.prototype['format'] = undefined;

/**
 * A unique transaction id for this request in UUID format. It is used for tracking the request.
 * @member {String} txnId
 */
EscerRequest.prototype['txnId'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
EscerRequest['FormatEnum'] = {

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf"
};



export default EscerRequest;

