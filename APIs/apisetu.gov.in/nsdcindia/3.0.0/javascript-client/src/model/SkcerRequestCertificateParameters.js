/**
 * National Skill Development Corporation (NSDC)
 * NSDC (https://www.nsdcindia.org) promotes skill development by catalyzing creation of large, quality and for-profit vocational institutions. Skill certificates provided under various NSDC programmes are made available to citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SkcerRequestCertificateParameters model module.
 * @module model/SkcerRequestCertificateParameters
 * @version 3.0.0
 */
class SkcerRequestCertificateParameters {
    /**
     * Constructs a new <code>SkcerRequestCertificateParameters</code>.
     * @alias module:model/SkcerRequestCertificateParameters
     * @param centCID {String} Centre Candidate ID
     * @param certID {String} Unique Certificate Number
     * @param DOB {String} Date of birth in DD-MM-YYYY format
     * @param fullName {String} Full name
     */
    constructor(centCID, certID, DOB, fullName) { 
        
        SkcerRequestCertificateParameters.initialize(this, centCID, certID, DOB, fullName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, centCID, certID, DOB, fullName) { 
        obj['CentCID'] = centCID;
        obj['CertID'] = certID;
        obj['DOB'] = DOB;
        obj['FullName'] = fullName;
    }

    /**
     * Constructs a <code>SkcerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkcerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/SkcerRequestCertificateParameters} The populated <code>SkcerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkcerRequestCertificateParameters();

            if (data.hasOwnProperty('CentCID')) {
                obj['CentCID'] = ApiClient.convertToType(data['CentCID'], 'String');
            }
            if (data.hasOwnProperty('CertID')) {
                obj['CertID'] = ApiClient.convertToType(data['CertID'], 'String');
            }
            if (data.hasOwnProperty('DOB')) {
                obj['DOB'] = ApiClient.convertToType(data['DOB'], 'String');
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkcerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkcerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SkcerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CentCID'] && !(typeof data['CentCID'] === 'string' || data['CentCID'] instanceof String)) {
            throw new Error("Expected the field `CentCID` to be a primitive type in the JSON string but got " + data['CentCID']);
        }
        // ensure the json data is a string
        if (data['CertID'] && !(typeof data['CertID'] === 'string' || data['CertID'] instanceof String)) {
            throw new Error("Expected the field `CertID` to be a primitive type in the JSON string but got " + data['CertID']);
        }
        // ensure the json data is a string
        if (data['DOB'] && !(typeof data['DOB'] === 'string' || data['DOB'] instanceof String)) {
            throw new Error("Expected the field `DOB` to be a primitive type in the JSON string but got " + data['DOB']);
        }
        // ensure the json data is a string
        if (data['FullName'] && !(typeof data['FullName'] === 'string' || data['FullName'] instanceof String)) {
            throw new Error("Expected the field `FullName` to be a primitive type in the JSON string but got " + data['FullName']);
        }

        return true;
    }


}

SkcerRequestCertificateParameters.RequiredProperties = ["CentCID", "CertID", "DOB", "FullName"];

/**
 * Centre Candidate ID
 * @member {String} CentCID
 */
SkcerRequestCertificateParameters.prototype['CentCID'] = undefined;

/**
 * Unique Certificate Number
 * @member {String} CertID
 */
SkcerRequestCertificateParameters.prototype['CertID'] = undefined;

/**
 * Date of birth in DD-MM-YYYY format
 * @member {String} DOB
 */
SkcerRequestCertificateParameters.prototype['DOB'] = undefined;

/**
 * Full name
 * @member {String} FullName
 */
SkcerRequestCertificateParameters.prototype['FullName'] = undefined;






export default SkcerRequestCertificateParameters;

