# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, docid: str=None, full_name: str=None):
        """EscerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this EscerRequestCertificateParameters.
        :param docid: The docid of this EscerRequestCertificateParameters.
        :param full_name: The full_name of this EscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'docid': str,
            'full_name': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'docid': 'DOCID',
            'full_name': 'FullName'
        }

        self._dob = dob
        self._docid = docid
        self._full_name = full_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The escer_request_certificateParameters of this EscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this EscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this EscerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this EscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this EscerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def docid(self):
        """Gets the docid of this EscerRequestCertificateParameters.

        DOCID

        :return: The docid of this EscerRequestCertificateParameters.
        :rtype: str
        """
        return self._docid

    @docid.setter
    def docid(self, docid):
        """Sets the docid of this EscerRequestCertificateParameters.

        DOCID

        :param docid: The docid of this EscerRequestCertificateParameters.
        :type docid: str
        """
        if docid is None:
            raise ValueError("Invalid value for `docid`, must not be `None`")

        self._docid = docid

    @property
    def full_name(self):
        """Gets the full_name of this EscerRequestCertificateParameters.

        Full name

        :return: The full_name of this EscerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this EscerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this EscerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name
