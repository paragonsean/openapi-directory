# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cent_cid: str=None, cert_id: str=None, dob: str=None, full_name: str=None):
        """SkcerRequestCertificateParameters - a model defined in OpenAPI

        :param cent_cid: The cent_cid of this SkcerRequestCertificateParameters.
        :param cert_id: The cert_id of this SkcerRequestCertificateParameters.
        :param dob: The dob of this SkcerRequestCertificateParameters.
        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cent_cid': str,
            'cert_id': str,
            'dob': str,
            'full_name': str
        }

        self.attribute_map = {
            'cent_cid': 'CentCID',
            'cert_id': 'CertID',
            'dob': 'DOB',
            'full_name': 'FullName'
        }

        self._cent_cid = cent_cid
        self._cert_id = cert_id
        self._dob = dob
        self._full_name = full_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The skcer_request_certificateParameters of this SkcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cent_cid(self):
        """Gets the cent_cid of this SkcerRequestCertificateParameters.

        Centre Candidate ID

        :return: The cent_cid of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._cent_cid

    @cent_cid.setter
    def cent_cid(self, cent_cid):
        """Sets the cent_cid of this SkcerRequestCertificateParameters.

        Centre Candidate ID

        :param cent_cid: The cent_cid of this SkcerRequestCertificateParameters.
        :type cent_cid: str
        """
        if cent_cid is None:
            raise ValueError("Invalid value for `cent_cid`, must not be `None`")

        self._cent_cid = cent_cid

    @property
    def cert_id(self):
        """Gets the cert_id of this SkcerRequestCertificateParameters.

        Unique Certificate Number

        :return: The cert_id of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._cert_id

    @cert_id.setter
    def cert_id(self, cert_id):
        """Sets the cert_id of this SkcerRequestCertificateParameters.

        Unique Certificate Number

        :param cert_id: The cert_id of this SkcerRequestCertificateParameters.
        :type cert_id: str
        """
        if cert_id is None:
            raise ValueError("Invalid value for `cert_id`, must not be `None`")

        self._cert_id = cert_id

    @property
    def dob(self):
        """Gets the dob of this SkcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this SkcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this SkcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :return: The full_name of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name
