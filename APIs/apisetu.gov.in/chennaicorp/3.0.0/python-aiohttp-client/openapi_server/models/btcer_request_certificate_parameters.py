# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BtcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dateofbirth: str=None, regno: str=None):
        """BtcerRequestCertificateParameters - a model defined in OpenAPI

        :param dateofbirth: The dateofbirth of this BtcerRequestCertificateParameters.
        :param regno: The regno of this BtcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dateofbirth': str,
            'regno': str
        }

        self.attribute_map = {
            'dateofbirth': 'DATEOFBIRTH',
            'regno': 'REGNO'
        }

        self._dateofbirth = dateofbirth
        self._regno = regno

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BtcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The btcer_request_certificateParameters of this BtcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dateofbirth(self):
        """Gets the dateofbirth of this BtcerRequestCertificateParameters.

        Date of Birth

        :return: The dateofbirth of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dateofbirth

    @dateofbirth.setter
    def dateofbirth(self, dateofbirth):
        """Sets the dateofbirth of this BtcerRequestCertificateParameters.

        Date of Birth

        :param dateofbirth: The dateofbirth of this BtcerRequestCertificateParameters.
        :type dateofbirth: str
        """
        if dateofbirth is None:
            raise ValueError("Invalid value for `dateofbirth`, must not be `None`")

        self._dateofbirth = dateofbirth

    @property
    def regno(self):
        """Gets the regno of this BtcerRequestCertificateParameters.

        Registration Number

        :return: The regno of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._regno

    @regno.setter
    def regno(self, regno):
        """Sets the regno of this BtcerRequestCertificateParameters.

        Registration Number

        :param regno: The regno of this BtcerRequestCertificateParameters.
        :type regno: str
        """
        if regno is None:
            raise ValueError("Invalid value for `regno`, must not be `None`")

        self._regno = regno
