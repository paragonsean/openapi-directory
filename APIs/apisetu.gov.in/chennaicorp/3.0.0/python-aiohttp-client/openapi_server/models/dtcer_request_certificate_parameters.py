# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DtcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dateofdeath: str=None, regno: str=None):
        """DtcerRequestCertificateParameters - a model defined in OpenAPI

        :param dateofdeath: The dateofdeath of this DtcerRequestCertificateParameters.
        :param regno: The regno of this DtcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dateofdeath': str,
            'regno': str
        }

        self.attribute_map = {
            'dateofdeath': 'DATEOFDEATH',
            'regno': 'REGNO'
        }

        self._dateofdeath = dateofdeath
        self._regno = regno

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DtcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dtcer_request_certificateParameters of this DtcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dateofdeath(self):
        """Gets the dateofdeath of this DtcerRequestCertificateParameters.

        Date of Death

        :return: The dateofdeath of this DtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dateofdeath

    @dateofdeath.setter
    def dateofdeath(self, dateofdeath):
        """Sets the dateofdeath of this DtcerRequestCertificateParameters.

        Date of Death

        :param dateofdeath: The dateofdeath of this DtcerRequestCertificateParameters.
        :type dateofdeath: str
        """
        if dateofdeath is None:
            raise ValueError("Invalid value for `dateofdeath`, must not be `None`")

        self._dateofdeath = dateofdeath

    @property
    def regno(self):
        """Gets the regno of this DtcerRequestCertificateParameters.

        Registration Number

        :return: The regno of this DtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._regno

    @regno.setter
    def regno(self, regno):
        """Sets the regno of this DtcerRequestCertificateParameters.

        Registration Number

        :param regno: The regno of this DtcerRequestCertificateParameters.
        :type regno: str
        """
        if regno is None:
            raise ValueError("Invalid value for `regno`, must not be `None`")

        self._regno = regno
