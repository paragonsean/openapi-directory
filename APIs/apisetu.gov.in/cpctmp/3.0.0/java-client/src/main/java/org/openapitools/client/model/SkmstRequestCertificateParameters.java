/*
 * CPCT-MAPIT, Madhya Pradesh
 * Computer Proficiency Certification Exam (https://cpct.mp.gov.in) is mandatory for data entry/IT Operator/Assistant Grade-3/steno/shorthand/typist and other similar Permanent/Contractual positions in the departments, corporations and agencies in MP. The CPCT Score Card of 2016 can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SkmstRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:34:53.029650-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkmstRequestCertificateParameters {
  public static final String SERIALIZED_NAME_TXT10TH_ROLL_NO = "txt10thRollNo";
  @SerializedName(SERIALIZED_NAME_TXT10TH_ROLL_NO)
  private String txt10thRollNo;

  public static final String SERIALIZED_NAME_TXT_CANDIDATE_APP_SEQ = "txtCandidateAppSeq";
  @SerializedName(SERIALIZED_NAME_TXT_CANDIDATE_APP_SEQ)
  private String txtCandidateAppSeq;

  public static final String SERIALIZED_NAME_TXT_EXAM_DATE = "txtExamDate";
  @SerializedName(SERIALIZED_NAME_TXT_EXAM_DATE)
  private String txtExamDate;

  public SkmstRequestCertificateParameters() {
  }

  public SkmstRequestCertificateParameters txt10thRollNo(String txt10thRollNo) {
    this.txt10thRollNo = txt10thRollNo;
    return this;
  }

  /**
   * 10thRollNumber
   * @return txt10thRollNo
   */
  @javax.annotation.Nonnull
  public String getTxt10thRollNo() {
    return txt10thRollNo;
  }

  public void setTxt10thRollNo(String txt10thRollNo) {
    this.txt10thRollNo = txt10thRollNo;
  }


  public SkmstRequestCertificateParameters txtCandidateAppSeq(String txtCandidateAppSeq) {
    this.txtCandidateAppSeq = txtCandidateAppSeq;
    return this;
  }

  /**
   * Registration Number
   * @return txtCandidateAppSeq
   */
  @javax.annotation.Nonnull
  public String getTxtCandidateAppSeq() {
    return txtCandidateAppSeq;
  }

  public void setTxtCandidateAppSeq(String txtCandidateAppSeq) {
    this.txtCandidateAppSeq = txtCandidateAppSeq;
  }


  public SkmstRequestCertificateParameters txtExamDate(String txtExamDate) {
    this.txtExamDate = txtExamDate;
    return this;
  }

  /**
   * ExamDate
   * @return txtExamDate
   */
  @javax.annotation.Nonnull
  public String getTxtExamDate() {
    return txtExamDate;
  }

  public void setTxtExamDate(String txtExamDate) {
    this.txtExamDate = txtExamDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkmstRequestCertificateParameters skmstRequestCertificateParameters = (SkmstRequestCertificateParameters) o;
    return Objects.equals(this.txt10thRollNo, skmstRequestCertificateParameters.txt10thRollNo) &&
        Objects.equals(this.txtCandidateAppSeq, skmstRequestCertificateParameters.txtCandidateAppSeq) &&
        Objects.equals(this.txtExamDate, skmstRequestCertificateParameters.txtExamDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(txt10thRollNo, txtCandidateAppSeq, txtExamDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkmstRequestCertificateParameters {\n");
    sb.append("    txt10thRollNo: ").append(toIndentedString(txt10thRollNo)).append("\n");
    sb.append("    txtCandidateAppSeq: ").append(toIndentedString(txtCandidateAppSeq)).append("\n");
    sb.append("    txtExamDate: ").append(toIndentedString(txtExamDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("txt10thRollNo");
    openapiFields.add("txtCandidateAppSeq");
    openapiFields.add("txtExamDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("txt10thRollNo");
    openapiRequiredFields.add("txtCandidateAppSeq");
    openapiRequiredFields.add("txtExamDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkmstRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkmstRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkmstRequestCertificateParameters is not found in the empty JSON string", SkmstRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkmstRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkmstRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SkmstRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("txt10thRollNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txt10thRollNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txt10thRollNo").toString()));
      }
      if (!jsonObj.get("txtCandidateAppSeq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txtCandidateAppSeq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txtCandidateAppSeq").toString()));
      }
      if (!jsonObj.get("txtExamDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txtExamDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txtExamDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkmstRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkmstRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkmstRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkmstRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<SkmstRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, SkmstRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkmstRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkmstRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkmstRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to SkmstRequestCertificateParameters
   */
  public static SkmstRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkmstRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of SkmstRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

