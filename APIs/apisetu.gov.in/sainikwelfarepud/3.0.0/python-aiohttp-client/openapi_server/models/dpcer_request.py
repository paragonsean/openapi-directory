# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artifact_schema import ConsentArtifactSchema
from openapi_server.models.dpcer_request_certificate_parameters import DpcerRequestCertificateParameters
from openapi_server import util


class DpcerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_parameters: DpcerRequestCertificateParameters=None, consent_artifact: ConsentArtifactSchema=None, format: str=None, txn_id: str=None):
        """DpcerRequest - a model defined in OpenAPI

        :param certificate_parameters: The certificate_parameters of this DpcerRequest.
        :param consent_artifact: The consent_artifact of this DpcerRequest.
        :param format: The format of this DpcerRequest.
        :param txn_id: The txn_id of this DpcerRequest.
        """
        self.openapi_types = {
            'certificate_parameters': DpcerRequestCertificateParameters,
            'consent_artifact': ConsentArtifactSchema,
            'format': str,
            'txn_id': str
        }

        self.attribute_map = {
            'certificate_parameters': 'certificateParameters',
            'consent_artifact': 'consentArtifact',
            'format': 'format',
            'txn_id': 'txnId'
        }

        self._certificate_parameters = certificate_parameters
        self._consent_artifact = consent_artifact
        self._format = format
        self._txn_id = txn_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DpcerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dpcer_request of this DpcerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_parameters(self):
        """Gets the certificate_parameters of this DpcerRequest.


        :return: The certificate_parameters of this DpcerRequest.
        :rtype: DpcerRequestCertificateParameters
        """
        return self._certificate_parameters

    @certificate_parameters.setter
    def certificate_parameters(self, certificate_parameters):
        """Sets the certificate_parameters of this DpcerRequest.


        :param certificate_parameters: The certificate_parameters of this DpcerRequest.
        :type certificate_parameters: DpcerRequestCertificateParameters
        """

        self._certificate_parameters = certificate_parameters

    @property
    def consent_artifact(self):
        """Gets the consent_artifact of this DpcerRequest.


        :return: The consent_artifact of this DpcerRequest.
        :rtype: ConsentArtifactSchema
        """
        return self._consent_artifact

    @consent_artifact.setter
    def consent_artifact(self, consent_artifact):
        """Sets the consent_artifact of this DpcerRequest.


        :param consent_artifact: The consent_artifact of this DpcerRequest.
        :type consent_artifact: ConsentArtifactSchema
        """

        self._consent_artifact = consent_artifact

    @property
    def format(self):
        """Gets the format of this DpcerRequest.

        The format of the certificate in response.

        :return: The format of this DpcerRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DpcerRequest.

        The format of the certificate in response.

        :param format: The format of this DpcerRequest.
        :type format: str
        """
        allowed_values = ["pdf"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def txn_id(self):
        """Gets the txn_id of this DpcerRequest.

        A unique transaction id for this request in UUID format. It is used for tracking the request.

        :return: The txn_id of this DpcerRequest.
        :rtype: str
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this DpcerRequest.

        A unique transaction id for this request in UUID format. It is used for tracking the request.

        :param txn_id: The txn_id of this DpcerRequest.
        :type txn_id: str
        """
        if txn_id is None:
            raise ValueError("Invalid value for `txn_id`, must not be `None`")

        self._txn_id = txn_id
