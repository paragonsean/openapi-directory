# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SocerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appno: str=None, date_of_birth: str=None, enrolno: str=None, typ_of_cert: str=None):
        """SocerRequestCertificateParameters - a model defined in OpenAPI

        :param appno: The appno of this SocerRequestCertificateParameters.
        :param date_of_birth: The date_of_birth of this SocerRequestCertificateParameters.
        :param enrolno: The enrolno of this SocerRequestCertificateParameters.
        :param typ_of_cert: The typ_of_cert of this SocerRequestCertificateParameters.
        """
        self.openapi_types = {
            'appno': str,
            'date_of_birth': str,
            'enrolno': str,
            'typ_of_cert': str
        }

        self.attribute_map = {
            'appno': 'APPNO',
            'date_of_birth': 'Date_Of_Birth',
            'enrolno': 'ENROLNO',
            'typ_of_cert': 'TypOfCert'
        }

        self._appno = appno
        self._date_of_birth = date_of_birth
        self._enrolno = enrolno
        self._typ_of_cert = typ_of_cert

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SocerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The socer_request_certificateParameters of this SocerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appno(self):
        """Gets the appno of this SocerRequestCertificateParameters.

        Registration Application No

        :return: The appno of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._appno

    @appno.setter
    def appno(self, appno):
        """Sets the appno of this SocerRequestCertificateParameters.

        Registration Application No

        :param appno: The appno of this SocerRequestCertificateParameters.
        :type appno: str
        """
        if appno is None:
            raise ValueError("Invalid value for `appno`, must not be `None`")

        self._appno = appno

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SocerRequestCertificateParameters.

        Date Of Birth

        :return: The date_of_birth of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SocerRequestCertificateParameters.

        Date Of Birth

        :param date_of_birth: The date_of_birth of this SocerRequestCertificateParameters.
        :type date_of_birth: str
        """
        if date_of_birth is None:
            raise ValueError("Invalid value for `date_of_birth`, must not be `None`")

        self._date_of_birth = date_of_birth

    @property
    def enrolno(self):
        """Gets the enrolno of this SocerRequestCertificateParameters.

        Enrollment No.

        :return: The enrolno of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._enrolno

    @enrolno.setter
    def enrolno(self, enrolno):
        """Sets the enrolno of this SocerRequestCertificateParameters.

        Enrollment No.

        :param enrolno: The enrolno of this SocerRequestCertificateParameters.
        :type enrolno: str
        """
        if enrolno is None:
            raise ValueError("Invalid value for `enrolno`, must not be `None`")

        self._enrolno = enrolno

    @property
    def typ_of_cert(self):
        """Gets the typ_of_cert of this SocerRequestCertificateParameters.

        Type Of Service

        :return: The typ_of_cert of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._typ_of_cert

    @typ_of_cert.setter
    def typ_of_cert(self, typ_of_cert):
        """Sets the typ_of_cert of this SocerRequestCertificateParameters.

        Type Of Service

        :param typ_of_cert: The typ_of_cert of this SocerRequestCertificateParameters.
        :type typ_of_cert: str
        """
        if typ_of_cert is None:
            raise ValueError("Invalid value for `typ_of_cert`, must not be `None`")

        self._typ_of_cert = typ_of_cert
