/*
 * AIIMS Mangalagiri
 * AIIMS Mangalagiri is one of the AIIMS healthcare institutes being established by the Ministry of Health & Family Welfare, Government of India.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LabrpRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:34:29.977643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabrpRequestCertificateParameters {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private String DOB;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_G_E_N_D_E_R = "GENDER";
  @SerializedName(SERIALIZED_NAME_G_E_N_D_E_R)
  private String GENDER;

  public static final String SERIALIZED_NAME_MOBILE_NO_R_Q = "MobileNoRQ";
  @SerializedName(SERIALIZED_NAME_MOBILE_NO_R_Q)
  private String mobileNoRQ;

  public LabrpRequestCertificateParameters() {
  }

  public LabrpRequestCertificateParameters DOB(String DOB) {
    this.DOB = DOB;
    return this;
  }

  /**
   * Date of birth in DD-MM-YYYY format
   * @return DOB
   */
  @javax.annotation.Nonnull
  public String getDOB() {
    return DOB;
  }

  public void setDOB(String DOB) {
    this.DOB = DOB;
  }


  public LabrpRequestCertificateParameters fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public LabrpRequestCertificateParameters GENDER(String GENDER) {
    this.GENDER = GENDER;
    return this;
  }

  /**
   * Gender - M for male, F for female and O for other
   * @return GENDER
   */
  @javax.annotation.Nonnull
  public String getGENDER() {
    return GENDER;
  }

  public void setGENDER(String GENDER) {
    this.GENDER = GENDER;
  }


  public LabrpRequestCertificateParameters mobileNoRQ(String mobileNoRQ) {
    this.mobileNoRQ = mobileNoRQ;
    return this;
  }

  /**
   * Mobile No./Requisition No.
   * @return mobileNoRQ
   */
  @javax.annotation.Nonnull
  public String getMobileNoRQ() {
    return mobileNoRQ;
  }

  public void setMobileNoRQ(String mobileNoRQ) {
    this.mobileNoRQ = mobileNoRQ;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabrpRequestCertificateParameters labrpRequestCertificateParameters = (LabrpRequestCertificateParameters) o;
    return Objects.equals(this.DOB, labrpRequestCertificateParameters.DOB) &&
        Objects.equals(this.fullName, labrpRequestCertificateParameters.fullName) &&
        Objects.equals(this.GENDER, labrpRequestCertificateParameters.GENDER) &&
        Objects.equals(this.mobileNoRQ, labrpRequestCertificateParameters.mobileNoRQ);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, fullName, GENDER, mobileNoRQ);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabrpRequestCertificateParameters {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    GENDER: ").append(toIndentedString(GENDER)).append("\n");
    sb.append("    mobileNoRQ: ").append(toIndentedString(mobileNoRQ)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("FullName");
    openapiFields.add("GENDER");
    openapiFields.add("MobileNoRQ");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("GENDER");
    openapiRequiredFields.add("MobileNoRQ");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabrpRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabrpRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabrpRequestCertificateParameters is not found in the empty JSON string", LabrpRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabrpRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabrpRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LabrpRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DOB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("GENDER").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GENDER` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GENDER").toString()));
      }
      if (!jsonObj.get("MobileNoRQ").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MobileNoRQ` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MobileNoRQ").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabrpRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabrpRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabrpRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabrpRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<LabrpRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, LabrpRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabrpRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabrpRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabrpRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to LabrpRequestCertificateParameters
   */
  public static LabrpRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabrpRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of LabrpRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

