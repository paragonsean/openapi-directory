# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.academic_certificate_schema_issued_by_organization_address import AcademicCertificateSchemaIssuedByOrganizationAddress
from openapi_server import util


class AcademicCertificateSchemaIssuedByOrganization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AcademicCertificateSchemaIssuedByOrganizationAddress=None, code: str=None, name: str=None, tin: str=None, type: str=None, uid: str=None):
        """AcademicCertificateSchemaIssuedByOrganization - a model defined in OpenAPI

        :param address: The address of this AcademicCertificateSchemaIssuedByOrganization.
        :param code: The code of this AcademicCertificateSchemaIssuedByOrganization.
        :param name: The name of this AcademicCertificateSchemaIssuedByOrganization.
        :param tin: The tin of this AcademicCertificateSchemaIssuedByOrganization.
        :param type: The type of this AcademicCertificateSchemaIssuedByOrganization.
        :param uid: The uid of this AcademicCertificateSchemaIssuedByOrganization.
        """
        self.openapi_types = {
            'address': AcademicCertificateSchemaIssuedByOrganizationAddress,
            'code': str,
            'name': str,
            'tin': str,
            'type': str,
            'uid': str
        }

        self.attribute_map = {
            'address': 'Address',
            'code': 'code',
            'name': 'name',
            'tin': 'tin',
            'type': 'type',
            'uid': 'uid'
        }

        self._address = address
        self._code = code
        self._name = name
        self._tin = tin
        self._type = type
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcademicCertificateSchemaIssuedByOrganization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcademicCertificateSchema_IssuedBy_Organization of this AcademicCertificateSchemaIssuedByOrganization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The address of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: AcademicCertificateSchemaIssuedByOrganizationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AcademicCertificateSchemaIssuedByOrganization.


        :param address: The address of this AcademicCertificateSchemaIssuedByOrganization.
        :type address: AcademicCertificateSchemaIssuedByOrganizationAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def code(self):
        """Gets the code of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The code of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AcademicCertificateSchemaIssuedByOrganization.


        :param code: The code of this AcademicCertificateSchemaIssuedByOrganization.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def name(self):
        """Gets the name of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The name of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcademicCertificateSchemaIssuedByOrganization.


        :param name: The name of this AcademicCertificateSchemaIssuedByOrganization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def tin(self):
        """Gets the tin of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The tin of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: str
        """
        return self._tin

    @tin.setter
    def tin(self, tin):
        """Sets the tin of this AcademicCertificateSchemaIssuedByOrganization.


        :param tin: The tin of this AcademicCertificateSchemaIssuedByOrganization.
        :type tin: str
        """
        if tin is None:
            raise ValueError("Invalid value for `tin`, must not be `None`")

        self._tin = tin

    @property
    def type(self):
        """Gets the type of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The type of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AcademicCertificateSchemaIssuedByOrganization.


        :param type: The type of this AcademicCertificateSchemaIssuedByOrganization.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this AcademicCertificateSchemaIssuedByOrganization.


        :return: The uid of this AcademicCertificateSchemaIssuedByOrganization.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AcademicCertificateSchemaIssuedByOrganization.


        :param uid: The uid of this AcademicCertificateSchemaIssuedByOrganization.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
