# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CripcRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insured_dob: str=None, policy_no: str=None):
        """CripcRequestCertificateParameters - a model defined in OpenAPI

        :param insured_dob: The insured_dob of this CripcRequestCertificateParameters.
        :param policy_no: The policy_no of this CripcRequestCertificateParameters.
        """
        self.openapi_types = {
            'insured_dob': str,
            'policy_no': str
        }

        self.attribute_map = {
            'insured_dob': 'InsuredDob',
            'policy_no': 'PolicyNo'
        }

        self._insured_dob = insured_dob
        self._policy_no = policy_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CripcRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cripc_request_certificateParameters of this CripcRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insured_dob(self):
        """Gets the insured_dob of this CripcRequestCertificateParameters.

        Insured Date of Birth

        :return: The insured_dob of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._insured_dob

    @insured_dob.setter
    def insured_dob(self, insured_dob):
        """Sets the insured_dob of this CripcRequestCertificateParameters.

        Insured Date of Birth

        :param insured_dob: The insured_dob of this CripcRequestCertificateParameters.
        :type insured_dob: str
        """
        if insured_dob is None:
            raise ValueError("Invalid value for `insured_dob`, must not be `None`")

        self._insured_dob = insured_dob

    @property
    def policy_no(self):
        """Gets the policy_no of this CripcRequestCertificateParameters.

        Policy Number

        :return: The policy_no of this CripcRequestCertificateParameters.
        :rtype: str
        """
        return self._policy_no

    @policy_no.setter
    def policy_no(self, policy_no):
        """Sets the policy_no of this CripcRequestCertificateParameters.

        Policy Number

        :param policy_no: The policy_no of this CripcRequestCertificateParameters.
        :type policy_no: str
        """
        if policy_no is None:
            raise ValueError("Invalid value for `policy_no`, must not be `None`")

        self._policy_no = policy_no
