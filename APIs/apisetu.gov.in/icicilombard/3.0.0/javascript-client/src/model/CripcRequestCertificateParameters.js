/**
 * ICICI Lombard GIC Ltd.
 * Insurance policies issued by ICICI Lombard (https://www.icicilombard.com) can be fetched by Citizens into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CripcRequestCertificateParameters model module.
 * @module model/CripcRequestCertificateParameters
 * @version 3.0.0
 */
class CripcRequestCertificateParameters {
    /**
     * Constructs a new <code>CripcRequestCertificateParameters</code>.
     * @alias module:model/CripcRequestCertificateParameters
     * @param insuredDob {String} Insured Date of Birth
     * @param policyNo {String} Policy Number
     */
    constructor(insuredDob, policyNo) { 
        
        CripcRequestCertificateParameters.initialize(this, insuredDob, policyNo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, insuredDob, policyNo) { 
        obj['InsuredDob'] = insuredDob;
        obj['PolicyNo'] = policyNo;
    }

    /**
     * Constructs a <code>CripcRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CripcRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/CripcRequestCertificateParameters} The populated <code>CripcRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CripcRequestCertificateParameters();

            if (data.hasOwnProperty('InsuredDob')) {
                obj['InsuredDob'] = ApiClient.convertToType(data['InsuredDob'], 'String');
            }
            if (data.hasOwnProperty('PolicyNo')) {
                obj['PolicyNo'] = ApiClient.convertToType(data['PolicyNo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CripcRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CripcRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CripcRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['InsuredDob'] && !(typeof data['InsuredDob'] === 'string' || data['InsuredDob'] instanceof String)) {
            throw new Error("Expected the field `InsuredDob` to be a primitive type in the JSON string but got " + data['InsuredDob']);
        }
        // ensure the json data is a string
        if (data['PolicyNo'] && !(typeof data['PolicyNo'] === 'string' || data['PolicyNo'] instanceof String)) {
            throw new Error("Expected the field `PolicyNo` to be a primitive type in the JSON string but got " + data['PolicyNo']);
        }

        return true;
    }


}

CripcRequestCertificateParameters.RequiredProperties = ["InsuredDob", "PolicyNo"];

/**
 * Insured Date of Birth
 * @member {String} InsuredDob
 */
CripcRequestCertificateParameters.prototype['InsuredDob'] = undefined;

/**
 * Policy Number
 * @member {String} PolicyNo
 */
CripcRequestCertificateParameters.prototype['PolicyNo'] = undefined;






export default CripcRequestCertificateParameters;

