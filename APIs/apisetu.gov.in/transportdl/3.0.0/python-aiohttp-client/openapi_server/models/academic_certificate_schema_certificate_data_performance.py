# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.academic_certificate_schema_certificate_data_performance_subjects_inner import AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner
from openapi_server import util


class AcademicCertificateSchemaCertificateDataPerformance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subjects: List[AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner]=None, cgpa: str=None, cgpa_max: str=None, grade: str=None, marks_max: str=None, marks_total: str=None, percentage: str=None, result: str=None, result_date: str=None, update_date: str=None):
        """AcademicCertificateSchemaCertificateDataPerformance - a model defined in OpenAPI

        :param subjects: The subjects of this AcademicCertificateSchemaCertificateDataPerformance.
        :param cgpa: The cgpa of this AcademicCertificateSchemaCertificateDataPerformance.
        :param cgpa_max: The cgpa_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :param grade: The grade of this AcademicCertificateSchemaCertificateDataPerformance.
        :param marks_max: The marks_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :param marks_total: The marks_total of this AcademicCertificateSchemaCertificateDataPerformance.
        :param percentage: The percentage of this AcademicCertificateSchemaCertificateDataPerformance.
        :param result: The result of this AcademicCertificateSchemaCertificateDataPerformance.
        :param result_date: The result_date of this AcademicCertificateSchemaCertificateDataPerformance.
        :param update_date: The update_date of this AcademicCertificateSchemaCertificateDataPerformance.
        """
        self.openapi_types = {
            'subjects': List[AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner],
            'cgpa': str,
            'cgpa_max': str,
            'grade': str,
            'marks_max': str,
            'marks_total': str,
            'percentage': str,
            'result': str,
            'result_date': str,
            'update_date': str
        }

        self.attribute_map = {
            'subjects': 'Subjects',
            'cgpa': 'cgpa',
            'cgpa_max': 'cgpaMax',
            'grade': 'grade',
            'marks_max': 'marksMax',
            'marks_total': 'marksTotal',
            'percentage': 'percentage',
            'result': 'result',
            'result_date': 'resultDate',
            'update_date': 'updateDate'
        }

        self._subjects = subjects
        self._cgpa = cgpa
        self._cgpa_max = cgpa_max
        self._grade = grade
        self._marks_max = marks_max
        self._marks_total = marks_total
        self._percentage = percentage
        self._result = result
        self._result_date = result_date
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcademicCertificateSchemaCertificateDataPerformance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcademicCertificateSchema_CertificateData_Performance of this AcademicCertificateSchemaCertificateDataPerformance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subjects(self):
        """Gets the subjects of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The subjects of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: List[AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this AcademicCertificateSchemaCertificateDataPerformance.


        :param subjects: The subjects of this AcademicCertificateSchemaCertificateDataPerformance.
        :type subjects: List[AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner]
        """
        if subjects is None:
            raise ValueError("Invalid value for `subjects`, must not be `None`")

        self._subjects = subjects

    @property
    def cgpa(self):
        """Gets the cgpa of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The cgpa of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._cgpa

    @cgpa.setter
    def cgpa(self, cgpa):
        """Sets the cgpa of this AcademicCertificateSchemaCertificateDataPerformance.


        :param cgpa: The cgpa of this AcademicCertificateSchemaCertificateDataPerformance.
        :type cgpa: str
        """
        if cgpa is None:
            raise ValueError("Invalid value for `cgpa`, must not be `None`")

        self._cgpa = cgpa

    @property
    def cgpa_max(self):
        """Gets the cgpa_max of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The cgpa_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._cgpa_max

    @cgpa_max.setter
    def cgpa_max(self, cgpa_max):
        """Sets the cgpa_max of this AcademicCertificateSchemaCertificateDataPerformance.


        :param cgpa_max: The cgpa_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :type cgpa_max: str
        """
        if cgpa_max is None:
            raise ValueError("Invalid value for `cgpa_max`, must not be `None`")

        self._cgpa_max = cgpa_max

    @property
    def grade(self):
        """Gets the grade of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The grade of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AcademicCertificateSchemaCertificateDataPerformance.


        :param grade: The grade of this AcademicCertificateSchemaCertificateDataPerformance.
        :type grade: str
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")

        self._grade = grade

    @property
    def marks_max(self):
        """Gets the marks_max of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The marks_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._marks_max

    @marks_max.setter
    def marks_max(self, marks_max):
        """Sets the marks_max of this AcademicCertificateSchemaCertificateDataPerformance.


        :param marks_max: The marks_max of this AcademicCertificateSchemaCertificateDataPerformance.
        :type marks_max: str
        """
        if marks_max is None:
            raise ValueError("Invalid value for `marks_max`, must not be `None`")

        self._marks_max = marks_max

    @property
    def marks_total(self):
        """Gets the marks_total of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The marks_total of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._marks_total

    @marks_total.setter
    def marks_total(self, marks_total):
        """Sets the marks_total of this AcademicCertificateSchemaCertificateDataPerformance.


        :param marks_total: The marks_total of this AcademicCertificateSchemaCertificateDataPerformance.
        :type marks_total: str
        """
        if marks_total is None:
            raise ValueError("Invalid value for `marks_total`, must not be `None`")

        self._marks_total = marks_total

    @property
    def percentage(self):
        """Gets the percentage of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The percentage of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this AcademicCertificateSchemaCertificateDataPerformance.


        :param percentage: The percentage of this AcademicCertificateSchemaCertificateDataPerformance.
        :type percentage: str
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")

        self._percentage = percentage

    @property
    def result(self):
        """Gets the result of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The result of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AcademicCertificateSchemaCertificateDataPerformance.


        :param result: The result of this AcademicCertificateSchemaCertificateDataPerformance.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")
        if result is not None and len(result) < 1:
            raise ValueError("Invalid value for `result`, length must be greater than or equal to `1`")

        self._result = result

    @property
    def result_date(self):
        """Gets the result_date of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The result_date of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._result_date

    @result_date.setter
    def result_date(self, result_date):
        """Sets the result_date of this AcademicCertificateSchemaCertificateDataPerformance.


        :param result_date: The result_date of this AcademicCertificateSchemaCertificateDataPerformance.
        :type result_date: str
        """
        if result_date is None:
            raise ValueError("Invalid value for `result_date`, must not be `None`")
        if result_date is not None and len(result_date) < 1:
            raise ValueError("Invalid value for `result_date`, length must be greater than or equal to `1`")

        self._result_date = result_date

    @property
    def update_date(self):
        """Gets the update_date of this AcademicCertificateSchemaCertificateDataPerformance.


        :return: The update_date of this AcademicCertificateSchemaCertificateDataPerformance.
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this AcademicCertificateSchemaCertificateDataPerformance.


        :param update_date: The update_date of this AcademicCertificateSchemaCertificateDataPerformance.
        :type update_date: str
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")

        self._update_date = update_date
