/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PullDocResponseDocDetails;
import org.openapitools.client.model.PullDocResponseResponseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullDocResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullDocResponse {
  public static final String SERIALIZED_NAME_DOC_DETAILS = "DocDetails";
  @SerializedName(SERIALIZED_NAME_DOC_DETAILS)
  private PullDocResponseDocDetails docDetails;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "ResponseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private PullDocResponseResponseStatus responseStatus;

  public PullDocResponse() {
  }

  public PullDocResponse docDetails(PullDocResponseDocDetails docDetails) {
    this.docDetails = docDetails;
    return this;
  }

  /**
   * Get docDetails
   * @return docDetails
   */
  @javax.annotation.Nonnull
  public PullDocResponseDocDetails getDocDetails() {
    return docDetails;
  }

  public void setDocDetails(PullDocResponseDocDetails docDetails) {
    this.docDetails = docDetails;
  }


  public PullDocResponse responseStatus(PullDocResponseResponseStatus responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * Get responseStatus
   * @return responseStatus
   */
  @javax.annotation.Nonnull
  public PullDocResponseResponseStatus getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(PullDocResponseResponseStatus responseStatus) {
    this.responseStatus = responseStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullDocResponse pullDocResponse = (PullDocResponse) o;
    return Objects.equals(this.docDetails, pullDocResponse.docDetails) &&
        Objects.equals(this.responseStatus, pullDocResponse.responseStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docDetails, responseStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullDocResponse {\n");
    sb.append("    docDetails: ").append(toIndentedString(docDetails)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocDetails");
    openapiFields.add("ResponseStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocDetails");
    openapiRequiredFields.add("ResponseStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullDocResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullDocResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullDocResponse is not found in the empty JSON string", PullDocResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullDocResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullDocResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullDocResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocDetails`
      PullDocResponseDocDetails.validateJsonElement(jsonObj.get("DocDetails"));
      // validate the required field `ResponseStatus`
      PullDocResponseResponseStatus.validateJsonElement(jsonObj.get("ResponseStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullDocResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullDocResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullDocResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullDocResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PullDocResponse>() {
           @Override
           public void write(JsonWriter out, PullDocResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullDocResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullDocResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullDocResponse
   * @throws IOException if the JSON string is invalid with respect to PullDocResponse
   */
  public static PullDocResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullDocResponse.class);
  }

  /**
   * Convert an instance of PullDocResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

