/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Issuer can add meta content specific to document here.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullDocResponseDocDetails {
  public static final String SERIALIZED_NAME_DATA_CONTENT = "DataContent";
  @SerializedName(SERIALIZED_NAME_DATA_CONTENT)
  private String dataContent;

  public static final String SERIALIZED_NAME_DOC_CONTENT = "DocContent";
  @SerializedName(SERIALIZED_NAME_DOC_CONTENT)
  private String docContent;

  public PullDocResponseDocDetails() {
  }

  public PullDocResponseDocDetails dataContent(String dataContent) {
    this.dataContent = dataContent;
    return this;
  }

  /**
   * Enclose the Base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.
   * @return dataContent
   */
  @javax.annotation.Nonnull
  public String getDataContent() {
    return dataContent;
  }

  public void setDataContent(String dataContent) {
    this.dataContent = dataContent;
  }


  public PullDocResponseDocDetails docContent(String docContent) {
    this.docContent = docContent;
    return this;
  }

  /**
   * Enclose the Base64 byte encoded contents of PDF file in this element. The DocContent element should be sent only if the format attribute in the original request is sent as “pdf” or “both” or is absent.
   * @return docContent
   */
  @javax.annotation.Nonnull
  public String getDocContent() {
    return docContent;
  }

  public void setDocContent(String docContent) {
    this.docContent = docContent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullDocResponseDocDetails pullDocResponseDocDetails = (PullDocResponseDocDetails) o;
    return Objects.equals(this.dataContent, pullDocResponseDocDetails.dataContent) &&
        Objects.equals(this.docContent, pullDocResponseDocDetails.docContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataContent, docContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullDocResponseDocDetails {\n");
    sb.append("    dataContent: ").append(toIndentedString(dataContent)).append("\n");
    sb.append("    docContent: ").append(toIndentedString(docContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataContent");
    openapiFields.add("DocContent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DataContent");
    openapiRequiredFields.add("DocContent");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullDocResponseDocDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullDocResponseDocDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullDocResponseDocDetails is not found in the empty JSON string", PullDocResponseDocDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullDocResponseDocDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullDocResponseDocDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullDocResponseDocDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DataContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataContent").toString()));
      }
      if (!jsonObj.get("DocContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocContent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullDocResponseDocDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullDocResponseDocDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullDocResponseDocDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullDocResponseDocDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PullDocResponseDocDetails>() {
           @Override
           public void write(JsonWriter out, PullDocResponseDocDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullDocResponseDocDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullDocResponseDocDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullDocResponseDocDetails
   * @throws IOException if the JSON string is invalid with respect to PullDocResponseDocDetails
   */
  public static PullDocResponseDocDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullDocResponseDocDetails.class);
  }

  /**
   * Convert an instance of PullDocResponseDocDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

