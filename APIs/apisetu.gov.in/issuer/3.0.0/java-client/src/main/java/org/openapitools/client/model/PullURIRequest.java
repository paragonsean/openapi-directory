/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PullURIRequestDocDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullURIRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullURIRequest {
  public static final String SERIALIZED_NAME_DOC_DETAILS = "DocDetails";
  @SerializedName(SERIALIZED_NAME_DOC_DETAILS)
  private PullURIRequestDocDetails docDetails;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private String ts;

  public static final String SERIALIZED_NAME_TXN = "txn";
  @SerializedName(SERIALIZED_NAME_TXN)
  private String txn;

  public static final String SERIALIZED_NAME_VER = "ver";
  @SerializedName(SERIALIZED_NAME_VER)
  private String ver;

  public PullURIRequest() {
  }

  public PullURIRequest docDetails(PullURIRequestDocDetails docDetails) {
    this.docDetails = docDetails;
    return this;
  }

  /**
   * Get docDetails
   * @return docDetails
   */
  @javax.annotation.Nonnull
  public PullURIRequestDocDetails getDocDetails() {
    return docDetails;
  }

  public void setDocDetails(PullURIRequestDocDetails docDetails) {
    this.docDetails = docDetails;
  }


  public PullURIRequest format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Indicates the desired format of the certificate data in the response. Possible values of this attribute are:   xml: for certificate data in machine readable xml format.   pdf: for certificate data in printable pdf format   both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details
   * @return format
   */
  @javax.annotation.Nonnull
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public PullURIRequest orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.
   * @return orgId
   */
  @javax.annotation.Nonnull
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public PullURIRequest ts(String ts) {
    this.ts = ts;
    return this;
  }

  /**
   * A timestamp value. This will be used to decode the keyHash element described below.
   * @return ts
   */
  @javax.annotation.Nonnull
  public String getTs() {
    return ts;
  }

  public void setTs(String ts) {
    this.ts = ts;
  }


  public PullURIRequest txn(String txn) {
    this.txn = txn;
    return this;
  }

  /**
   * Transaction id.
   * @return txn
   */
  @javax.annotation.Nonnull
  public String getTxn() {
    return txn;
  }

  public void setTxn(String txn) {
    this.txn = txn;
  }


  public PullURIRequest ver(String ver) {
    this.ver = ver;
    return this;
  }

  /**
   * API version.
   * @return ver
   */
  @javax.annotation.Nonnull
  public String getVer() {
    return ver;
  }

  public void setVer(String ver) {
    this.ver = ver;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullURIRequest pullURIRequest = (PullURIRequest) o;
    return Objects.equals(this.docDetails, pullURIRequest.docDetails) &&
        Objects.equals(this.format, pullURIRequest.format) &&
        Objects.equals(this.orgId, pullURIRequest.orgId) &&
        Objects.equals(this.ts, pullURIRequest.ts) &&
        Objects.equals(this.txn, pullURIRequest.txn) &&
        Objects.equals(this.ver, pullURIRequest.ver);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docDetails, format, orgId, ts, txn, ver);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullURIRequest {\n");
    sb.append("    docDetails: ").append(toIndentedString(docDetails)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    txn: ").append(toIndentedString(txn)).append("\n");
    sb.append("    ver: ").append(toIndentedString(ver)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocDetails");
    openapiFields.add("format");
    openapiFields.add("orgId");
    openapiFields.add("ts");
    openapiFields.add("txn");
    openapiFields.add("ver");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocDetails");
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("ts");
    openapiRequiredFields.add("txn");
    openapiRequiredFields.add("ver");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullURIRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullURIRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullURIRequest is not found in the empty JSON string", PullURIRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullURIRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullURIRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullURIRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocDetails`
      PullURIRequestDocDetails.validateJsonElement(jsonObj.get("DocDetails"));
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ts").toString()));
      }
      if (!jsonObj.get("txn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `txn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("txn").toString()));
      }
      if (!jsonObj.get("ver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ver").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullURIRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullURIRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullURIRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullURIRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PullURIRequest>() {
           @Override
           public void write(JsonWriter out, PullURIRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullURIRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullURIRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullURIRequest
   * @throws IOException if the JSON string is invalid with respect to PullURIRequest
   */
  public static PullURIRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullURIRequest.class);
  }

  /**
   * Convert an instance of PullURIRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

