/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullDocRequestDocDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullDocRequestDocDetails {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private String DOB;

  public static final String SERIALIZED_NAME_DIGI_LOCKER_ID = "DigiLockerId";
  @SerializedName(SERIALIZED_NAME_DIGI_LOCKER_ID)
  private String digiLockerId;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_U_I_D = "UID";
  @SerializedName(SERIALIZED_NAME_U_I_D)
  private String UID;

  public static final String SERIALIZED_NAME_U_R_I = "URI";
  @SerializedName(SERIALIZED_NAME_U_R_I)
  private String URI;

  public PullDocRequestDocDetails() {
  }

  public PullDocRequestDocDetails DOB(String DOB) {
    this.DOB = DOB;
    return this;
  }

  /**
   * Date of birth of the DigiLocker user accessing the document/certificate as in Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return DOB
   */
  @javax.annotation.Nonnull
  public String getDOB() {
    return DOB;
  }

  public void setDOB(String DOB) {
    this.DOB = DOB;
  }


  public PullDocRequestDocDetails digiLockerId(String digiLockerId) {
    this.digiLockerId = digiLockerId;
    return this;
  }

  /**
   * A unique 36 character DigiLocker Id of the user account.
   * @return digiLockerId
   */
  @javax.annotation.Nonnull
  public String getDigiLockerId() {
    return digiLockerId;
  }

  public void setDigiLockerId(String digiLockerId) {
    this.digiLockerId = digiLockerId;
  }


  public PullDocRequestDocDetails fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Name of the DigiLocker user accessing the document/certificate as in Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public PullDocRequestDocDetails UID(String UID) {
    this.UID = UID;
    return this;
  }

  /**
   * Aadhaar number of the DigiLocker user accessing the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return UID
   */
  @javax.annotation.Nonnull
  public String getUID() {
    return UID;
  }

  public void setUID(String UID) {
    this.UID = UID;
  }


  public PullDocRequestDocDetails URI(String URI) {
    this.URI = URI;
    return this;
  }

  /**
   * URI identifies the document uniquely.
   * @return URI
   */
  @javax.annotation.Nonnull
  public String getURI() {
    return URI;
  }

  public void setURI(String URI) {
    this.URI = URI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullDocRequestDocDetails pullDocRequestDocDetails = (PullDocRequestDocDetails) o;
    return Objects.equals(this.DOB, pullDocRequestDocDetails.DOB) &&
        Objects.equals(this.digiLockerId, pullDocRequestDocDetails.digiLockerId) &&
        Objects.equals(this.fullName, pullDocRequestDocDetails.fullName) &&
        Objects.equals(this.UID, pullDocRequestDocDetails.UID) &&
        Objects.equals(this.URI, pullDocRequestDocDetails.URI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, digiLockerId, fullName, UID, URI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullDocRequestDocDetails {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    digiLockerId: ").append(toIndentedString(digiLockerId)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("    URI: ").append(toIndentedString(URI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("DigiLockerId");
    openapiFields.add("FullName");
    openapiFields.add("UID");
    openapiFields.add("URI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("DigiLockerId");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("UID");
    openapiRequiredFields.add("URI");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullDocRequestDocDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullDocRequestDocDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullDocRequestDocDetails is not found in the empty JSON string", PullDocRequestDocDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullDocRequestDocDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullDocRequestDocDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullDocRequestDocDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DOB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      if (!jsonObj.get("DigiLockerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DigiLockerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DigiLockerId").toString()));
      }
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("UID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UID").toString()));
      }
      if (!jsonObj.get("URI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `URI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("URI").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullDocRequestDocDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullDocRequestDocDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullDocRequestDocDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullDocRequestDocDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PullDocRequestDocDetails>() {
           @Override
           public void write(JsonWriter out, PullDocRequestDocDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullDocRequestDocDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullDocRequestDocDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullDocRequestDocDetails
   * @throws IOException if the JSON string is invalid with respect to PullDocRequestDocDetails
   */
  public static PullDocRequestDocDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullDocRequestDocDetails.class);
  }

  /**
   * Convert an instance of PullDocRequestDocDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

