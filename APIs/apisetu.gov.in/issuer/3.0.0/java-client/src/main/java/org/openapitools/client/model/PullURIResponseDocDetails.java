/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Issuer can add meta content specific to document here.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullURIResponseDocDetails {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private String DOB;

  public static final String SERIALIZED_NAME_DATA_CONTENT = "DataContent";
  @SerializedName(SERIALIZED_NAME_DATA_CONTENT)
  private String dataContent;

  public static final String SERIALIZED_NAME_DIGI_LOCKER_ID = "DigiLockerId";
  @SerializedName(SERIALIZED_NAME_DIGI_LOCKER_ID)
  private String digiLockerId;

  public static final String SERIALIZED_NAME_DOC_CONTENT = "DocContent";
  @SerializedName(SERIALIZED_NAME_DOC_CONTENT)
  private String docContent;

  public static final String SERIALIZED_NAME_DOC_TYPE = "DocType";
  @SerializedName(SERIALIZED_NAME_DOC_TYPE)
  private String docType;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_U_D_F1 = "UDF1";
  @SerializedName(SERIALIZED_NAME_U_D_F1)
  private String UDF1;

  public static final String SERIALIZED_NAME_U_D_F2 = "UDF2";
  @SerializedName(SERIALIZED_NAME_U_D_F2)
  private String UDF2;

  public static final String SERIALIZED_NAME_U_I_D = "UID";
  @SerializedName(SERIALIZED_NAME_U_I_D)
  private String UID;

  public static final String SERIALIZED_NAME_U_R_I = "URI";
  @SerializedName(SERIALIZED_NAME_U_R_I)
  private String URI;

  public PullURIResponseDocDetails() {
  }

  public PullURIResponseDocDetails DOB(String DOB) {
    this.DOB = DOB;
    return this;
  }

  /**
   * The date of birth if sent in the original request.
   * @return DOB
   */
  @javax.annotation.Nonnull
  public String getDOB() {
    return DOB;
  }

  public void setDOB(String DOB) {
    this.DOB = DOB;
  }


  public PullURIResponseDocDetails dataContent(String dataContent) {
    this.dataContent = dataContent;
    return this;
  }

  /**
   * Enclose the base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.
   * @return dataContent
   */
  @javax.annotation.Nonnull
  public String getDataContent() {
    return dataContent;
  }

  public void setDataContent(String dataContent) {
    this.dataContent = dataContent;
  }


  public PullURIResponseDocDetails digiLockerId(String digiLockerId) {
    this.digiLockerId = digiLockerId;
    return this;
  }

  /**
   * A unique 36 character DigiLocker Id as sent in the original request.
   * @return digiLockerId
   */
  @javax.annotation.Nonnull
  public String getDigiLockerId() {
    return digiLockerId;
  }

  public void setDigiLockerId(String digiLockerId) {
    this.digiLockerId = digiLockerId;
  }


  public PullURIResponseDocDetails docContent(String docContent) {
    this.docContent = docContent;
    return this;
  }

  /**
   * Enclose the Base64 byte encoded contents of PDF file in this element.
   * @return docContent
   */
  @javax.annotation.Nonnull
  public String getDocContent() {
    return docContent;
  }

  public void setDocContent(String docContent) {
    this.docContent = docContent;
  }


  public PullURIResponseDocDetails docType(String docType) {
    this.docType = docType;
    return this;
  }

  /**
   * The document type sent in the original request.
   * @return docType
   */
  @javax.annotation.Nonnull
  public String getDocType() {
    return docType;
  }

  public void setDocType(String docType) {
    this.docType = docType;
  }


  public PullURIResponseDocDetails fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * The full name if sent in the original request.
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public PullURIResponseDocDetails UDF1(String UDF1) {
    this.UDF1 = UDF1;
    return this;
  }

  /**
   * Search parameters sent in the original request.
   * @return UDF1
   */
  @javax.annotation.Nonnull
  public String getUDF1() {
    return UDF1;
  }

  public void setUDF1(String UDF1) {
    this.UDF1 = UDF1;
  }


  public PullURIResponseDocDetails UDF2(String UDF2) {
    this.UDF2 = UDF2;
    return this;
  }

  /**
   * Search parameters sent in the original request.
   * @return UDF2
   */
  @javax.annotation.Nonnull
  public String getUDF2() {
    return UDF2;
  }

  public void setUDF2(String UDF2) {
    this.UDF2 = UDF2;
  }


  public PullURIResponseDocDetails UID(String UID) {
    this.UID = UID;
    return this;
  }

  /**
   * The Aadhaar number if sent in the original request.
   * @return UID
   */
  @javax.annotation.Nonnull
  public String getUID() {
    return UID;
  }

  public void setUID(String UID) {
    this.UID = UID;
  }


  public PullURIResponseDocDetails URI(String URI) {
    this.URI = URI;
    return this;
  }

  /**
   * URI corresponding to the search criteria that identifies the document uniquely.
   * @return URI
   */
  @javax.annotation.Nonnull
  public String getURI() {
    return URI;
  }

  public void setURI(String URI) {
    this.URI = URI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullURIResponseDocDetails pullURIResponseDocDetails = (PullURIResponseDocDetails) o;
    return Objects.equals(this.DOB, pullURIResponseDocDetails.DOB) &&
        Objects.equals(this.dataContent, pullURIResponseDocDetails.dataContent) &&
        Objects.equals(this.digiLockerId, pullURIResponseDocDetails.digiLockerId) &&
        Objects.equals(this.docContent, pullURIResponseDocDetails.docContent) &&
        Objects.equals(this.docType, pullURIResponseDocDetails.docType) &&
        Objects.equals(this.fullName, pullURIResponseDocDetails.fullName) &&
        Objects.equals(this.UDF1, pullURIResponseDocDetails.UDF1) &&
        Objects.equals(this.UDF2, pullURIResponseDocDetails.UDF2) &&
        Objects.equals(this.UID, pullURIResponseDocDetails.UID) &&
        Objects.equals(this.URI, pullURIResponseDocDetails.URI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, dataContent, digiLockerId, docContent, docType, fullName, UDF1, UDF2, UID, URI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullURIResponseDocDetails {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    dataContent: ").append(toIndentedString(dataContent)).append("\n");
    sb.append("    digiLockerId: ").append(toIndentedString(digiLockerId)).append("\n");
    sb.append("    docContent: ").append(toIndentedString(docContent)).append("\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    UDF1: ").append(toIndentedString(UDF1)).append("\n");
    sb.append("    UDF2: ").append(toIndentedString(UDF2)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("    URI: ").append(toIndentedString(URI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("DataContent");
    openapiFields.add("DigiLockerId");
    openapiFields.add("DocContent");
    openapiFields.add("DocType");
    openapiFields.add("FullName");
    openapiFields.add("UDF1");
    openapiFields.add("UDF2");
    openapiFields.add("UID");
    openapiFields.add("URI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("DataContent");
    openapiRequiredFields.add("DigiLockerId");
    openapiRequiredFields.add("DocContent");
    openapiRequiredFields.add("DocType");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("UDF1");
    openapiRequiredFields.add("UDF2");
    openapiRequiredFields.add("UID");
    openapiRequiredFields.add("URI");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullURIResponseDocDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullURIResponseDocDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullURIResponseDocDetails is not found in the empty JSON string", PullURIResponseDocDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullURIResponseDocDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullURIResponseDocDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullURIResponseDocDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DOB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      if (!jsonObj.get("DataContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DataContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DataContent").toString()));
      }
      if (!jsonObj.get("DigiLockerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DigiLockerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DigiLockerId").toString()));
      }
      if (!jsonObj.get("DocContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocContent").toString()));
      }
      if (!jsonObj.get("DocType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DocType").toString()));
      }
      if (!jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("UDF1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDF1").toString()));
      }
      if (!jsonObj.get("UDF2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UDF2").toString()));
      }
      if (!jsonObj.get("UID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UID").toString()));
      }
      if (!jsonObj.get("URI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `URI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("URI").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullURIResponseDocDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullURIResponseDocDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullURIResponseDocDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullURIResponseDocDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PullURIResponseDocDetails>() {
           @Override
           public void write(JsonWriter out, PullURIResponseDocDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullURIResponseDocDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullURIResponseDocDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullURIResponseDocDetails
   * @throws IOException if the JSON string is invalid with respect to PullURIResponseDocDetails
   */
  public static PullURIResponseDocDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullURIResponseDocDetails.class);
  }

  /**
   * Convert an instance of PullURIResponseDocDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

