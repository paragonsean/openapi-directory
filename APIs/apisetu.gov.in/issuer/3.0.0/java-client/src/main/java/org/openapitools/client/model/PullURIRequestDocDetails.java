/*
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PullURIRequestDocDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:37:46.210739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PullURIRequestDocDetails {
  public static final String SERIALIZED_NAME_D_O_B = "DOB";
  @SerializedName(SERIALIZED_NAME_D_O_B)
  private List<Object> DOB = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIGI_LOCKER_ID = "DigiLockerId";
  @SerializedName(SERIALIZED_NAME_DIGI_LOCKER_ID)
  private List<Object> digiLockerId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOC_TYPE = "DocType";
  @SerializedName(SERIALIZED_NAME_DOC_TYPE)
  private List<Object> docType = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private List<Object> fullName = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHOTO = "Photo";
  @SerializedName(SERIALIZED_NAME_PHOTO)
  private List<Object> photo = new ArrayList<>();

  public static final String SERIALIZED_NAME_U_D_F1 = "UDF1";
  @SerializedName(SERIALIZED_NAME_U_D_F1)
  private List<Object> UDF1 = new ArrayList<>();

  public static final String SERIALIZED_NAME_U_D_F2 = "UDF2";
  @SerializedName(SERIALIZED_NAME_U_D_F2)
  private List<Object> UDF2 = new ArrayList<>();

  public static final String SERIALIZED_NAME_U_D_F3 = "UDF3";
  @SerializedName(SERIALIZED_NAME_U_D_F3)
  private List<Object> UDF3 = new ArrayList<>();

  public static final String SERIALIZED_NAME_UD_FN = "UDFn";
  @SerializedName(SERIALIZED_NAME_UD_FN)
  private List<Object> udFn = new ArrayList<>();

  public static final String SERIALIZED_NAME_U_I_D = "UID";
  @SerializedName(SERIALIZED_NAME_U_I_D)
  private List<Object> UID = new ArrayList<>();

  public PullURIRequestDocDetails() {
  }

  public PullURIRequestDocDetails DOB(List<Object> DOB) {
    this.DOB = DOB;
    return this;
  }

  public PullURIRequestDocDetails addDOBItem(Object DOBItem) {
    if (this.DOB == null) {
      this.DOB = new ArrayList<>();
    }
    this.DOB.add(DOBItem);
    return this;
  }

  /**
   * Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return DOB
   */
  @javax.annotation.Nonnull
  public List<Object> getDOB() {
    return DOB;
  }

  public void setDOB(List<Object> DOB) {
    this.DOB = DOB;
  }


  public PullURIRequestDocDetails digiLockerId(List<Object> digiLockerId) {
    this.digiLockerId = digiLockerId;
    return this;
  }

  public PullURIRequestDocDetails addDigiLockerIdItem(Object digiLockerIdItem) {
    if (this.digiLockerId == null) {
      this.digiLockerId = new ArrayList<>();
    }
    this.digiLockerId.add(digiLockerIdItem);
    return this;
  }

  /**
   * A unique 36 character DigiLocker Id of the user account.
   * @return digiLockerId
   */
  @javax.annotation.Nonnull
  public List<Object> getDigiLockerId() {
    return digiLockerId;
  }

  public void setDigiLockerId(List<Object> digiLockerId) {
    this.digiLockerId = digiLockerId;
  }


  public PullURIRequestDocDetails docType(List<Object> docType) {
    this.docType = docType;
    return this;
  }

  public PullURIRequestDocDetails addDocTypeItem(Object docTypeItem) {
    if (this.docType == null) {
      this.docType = new ArrayList<>();
    }
    this.docType.add(docTypeItem);
    return this;
  }

  /**
   * Digital Locker will pass the document type being searched in this parameter.
   * @return docType
   */
  @javax.annotation.Nonnull
  public List<Object> getDocType() {
    return docType;
  }

  public void setDocType(List<Object> docType) {
    this.docType = docType;
  }


  public PullURIRequestDocDetails fullName(List<Object> fullName) {
    this.fullName = fullName;
    return this;
  }

  public PullURIRequestDocDetails addFullNameItem(Object fullNameItem) {
    if (this.fullName == null) {
      this.fullName = new ArrayList<>();
    }
    this.fullName.add(fullNameItem);
    return this;
  }

  /**
   * Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return fullName
   */
  @javax.annotation.Nonnull
  public List<Object> getFullName() {
    return fullName;
  }

  public void setFullName(List<Object> fullName) {
    this.fullName = fullName;
  }


  public PullURIRequestDocDetails photo(List<Object> photo) {
    this.photo = photo;
    return this;
  }

  public PullURIRequestDocDetails addPhotoItem(Object photoItem) {
    if (this.photo == null) {
      this.photo = new ArrayList<>();
    }
    this.photo.add(photoItem);
    return this;
  }

  /**
   * The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return photo
   */
  @javax.annotation.Nonnull
  public List<Object> getPhoto() {
    return photo;
  }

  public void setPhoto(List<Object> photo) {
    this.photo = photo;
  }


  public PullURIRequestDocDetails UDF1(List<Object> UDF1) {
    this.UDF1 = UDF1;
    return this;
  }

  public PullURIRequestDocDetails addUDF1Item(Object UDF1Item) {
    if (this.UDF1 == null) {
      this.UDF1 = new ArrayList<>();
    }
    this.UDF1.add(UDF1Item);
    return this;
  }

  /**
   * User defined search parameters to search a unique document/certificate. The &lt;UDF&gt; may be &lt;RollNo&gt; for CBSE, &lt;RegistrationNo&gt; for Transportation Dept. and &lt;PAN&gt; for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.
   * @return UDF1
   */
  @javax.annotation.Nonnull
  public List<Object> getUDF1() {
    return UDF1;
  }

  public void setUDF1(List<Object> UDF1) {
    this.UDF1 = UDF1;
  }


  public PullURIRequestDocDetails UDF2(List<Object> UDF2) {
    this.UDF2 = UDF2;
    return this;
  }

  public PullURIRequestDocDetails addUDF2Item(Object UDF2Item) {
    if (this.UDF2 == null) {
      this.UDF2 = new ArrayList<>();
    }
    this.UDF2.add(UDF2Item);
    return this;
  }

  /**
   * Get UDF2
   * @return UDF2
   */
  @javax.annotation.Nonnull
  public List<Object> getUDF2() {
    return UDF2;
  }

  public void setUDF2(List<Object> UDF2) {
    this.UDF2 = UDF2;
  }


  public PullURIRequestDocDetails UDF3(List<Object> UDF3) {
    this.UDF3 = UDF3;
    return this;
  }

  public PullURIRequestDocDetails addUDF3Item(Object UDF3Item) {
    if (this.UDF3 == null) {
      this.UDF3 = new ArrayList<>();
    }
    this.UDF3.add(UDF3Item);
    return this;
  }

  /**
   * Get UDF3
   * @return UDF3
   */
  @javax.annotation.Nonnull
  public List<Object> getUDF3() {
    return UDF3;
  }

  public void setUDF3(List<Object> UDF3) {
    this.UDF3 = UDF3;
  }


  public PullURIRequestDocDetails udFn(List<Object> udFn) {
    this.udFn = udFn;
    return this;
  }

  public PullURIRequestDocDetails addUdFnItem(Object udFnItem) {
    if (this.udFn == null) {
      this.udFn = new ArrayList<>();
    }
    this.udFn.add(udFnItem);
    return this;
  }

  /**
   * Get udFn
   * @return udFn
   */
  @javax.annotation.Nonnull
  public List<Object> getUdFn() {
    return udFn;
  }

  public void setUdFn(List<Object> udFn) {
    this.udFn = udFn;
  }


  public PullURIRequestDocDetails UID(List<Object> UID) {
    this.UID = UID;
    return this;
  }

  public PullURIRequestDocDetails addUIDItem(Object UIDItem) {
    if (this.UID == null) {
      this.UID = new ArrayList<>();
    }
    this.UID.add(UIDItem);
    return this;
  }

  /**
   * Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
   * @return UID
   */
  @javax.annotation.Nonnull
  public List<Object> getUID() {
    return UID;
  }

  public void setUID(List<Object> UID) {
    this.UID = UID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PullURIRequestDocDetails pullURIRequestDocDetails = (PullURIRequestDocDetails) o;
    return Objects.equals(this.DOB, pullURIRequestDocDetails.DOB) &&
        Objects.equals(this.digiLockerId, pullURIRequestDocDetails.digiLockerId) &&
        Objects.equals(this.docType, pullURIRequestDocDetails.docType) &&
        Objects.equals(this.fullName, pullURIRequestDocDetails.fullName) &&
        Objects.equals(this.photo, pullURIRequestDocDetails.photo) &&
        Objects.equals(this.UDF1, pullURIRequestDocDetails.UDF1) &&
        Objects.equals(this.UDF2, pullURIRequestDocDetails.UDF2) &&
        Objects.equals(this.UDF3, pullURIRequestDocDetails.UDF3) &&
        Objects.equals(this.udFn, pullURIRequestDocDetails.udFn) &&
        Objects.equals(this.UID, pullURIRequestDocDetails.UID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DOB, digiLockerId, docType, fullName, photo, UDF1, UDF2, UDF3, udFn, UID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PullURIRequestDocDetails {\n");
    sb.append("    DOB: ").append(toIndentedString(DOB)).append("\n");
    sb.append("    digiLockerId: ").append(toIndentedString(digiLockerId)).append("\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    photo: ").append(toIndentedString(photo)).append("\n");
    sb.append("    UDF1: ").append(toIndentedString(UDF1)).append("\n");
    sb.append("    UDF2: ").append(toIndentedString(UDF2)).append("\n");
    sb.append("    UDF3: ").append(toIndentedString(UDF3)).append("\n");
    sb.append("    udFn: ").append(toIndentedString(udFn)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DOB");
    openapiFields.add("DigiLockerId");
    openapiFields.add("DocType");
    openapiFields.add("FullName");
    openapiFields.add("Photo");
    openapiFields.add("UDF1");
    openapiFields.add("UDF2");
    openapiFields.add("UDF3");
    openapiFields.add("UDFn");
    openapiFields.add("UID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DOB");
    openapiRequiredFields.add("DigiLockerId");
    openapiRequiredFields.add("DocType");
    openapiRequiredFields.add("FullName");
    openapiRequiredFields.add("Photo");
    openapiRequiredFields.add("UDF1");
    openapiRequiredFields.add("UDF2");
    openapiRequiredFields.add("UDF3");
    openapiRequiredFields.add("UDFn");
    openapiRequiredFields.add("UID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PullURIRequestDocDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PullURIRequestDocDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PullURIRequestDocDetails is not found in the empty JSON string", PullURIRequestDocDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PullURIRequestDocDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PullURIRequestDocDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PullURIRequestDocDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("DOB") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DOB").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DOB` to be an array in the JSON string but got `%s`", jsonObj.get("DOB").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("DigiLockerId") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DigiLockerId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DigiLockerId` to be an array in the JSON string but got `%s`", jsonObj.get("DigiLockerId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("DocType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DocType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocType` to be an array in the JSON string but got `%s`", jsonObj.get("DocType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("FullName") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("FullName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be an array in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Photo") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Photo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Photo` to be an array in the JSON string but got `%s`", jsonObj.get("Photo").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("UDF1") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("UDF1").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF1` to be an array in the JSON string but got `%s`", jsonObj.get("UDF1").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("UDF2") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("UDF2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF2` to be an array in the JSON string but got `%s`", jsonObj.get("UDF2").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("UDF3") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("UDF3").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDF3` to be an array in the JSON string but got `%s`", jsonObj.get("UDF3").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("UDFn") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("UDFn").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UDFn` to be an array in the JSON string but got `%s`", jsonObj.get("UDFn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("UID") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("UID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `UID` to be an array in the JSON string but got `%s`", jsonObj.get("UID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PullURIRequestDocDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PullURIRequestDocDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PullURIRequestDocDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PullURIRequestDocDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PullURIRequestDocDetails>() {
           @Override
           public void write(JsonWriter out, PullURIRequestDocDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PullURIRequestDocDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PullURIRequestDocDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PullURIRequestDocDetails
   * @throws IOException if the JSON string is invalid with respect to PullURIRequestDocDetails
   */
  public static PullURIRequestDocDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PullURIRequestDocDetails.class);
  }

  /**
   * Convert an instance of PullURIRequestDocDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

