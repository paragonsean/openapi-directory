/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PullURIRequestDocDetails from './PullURIRequestDocDetails';

/**
 * The PullURIRequest model module.
 * @module model/PullURIRequest
 * @version 3.0.0
 */
class PullURIRequest {
    /**
     * Constructs a new <code>PullURIRequest</code>.
     * @alias module:model/PullURIRequest
     * @param docDetails {module:model/PullURIRequestDocDetails} 
     * @param format {String} Indicates the desired format of the certificate data in the response. Possible values of this attribute are:   xml: for certificate data in machine readable xml format.   pdf: for certificate data in printable pdf format   both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details
     * @param orgId {String} Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.
     * @param ts {String} A timestamp value. This will be used to decode the keyHash element described below.
     * @param txn {String} Transaction id.
     * @param ver {String} API version.
     */
    constructor(docDetails, format, orgId, ts, txn, ver) { 
        
        PullURIRequest.initialize(this, docDetails, format, orgId, ts, txn, ver);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, docDetails, format, orgId, ts, txn, ver) { 
        obj['DocDetails'] = docDetails;
        obj['format'] = format;
        obj['orgId'] = orgId;
        obj['ts'] = ts;
        obj['txn'] = txn;
        obj['ver'] = ver;
    }

    /**
     * Constructs a <code>PullURIRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullURIRequest} obj Optional instance to populate.
     * @return {module:model/PullURIRequest} The populated <code>PullURIRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullURIRequest();

            if (data.hasOwnProperty('DocDetails')) {
                obj['DocDetails'] = PullURIRequestDocDetails.constructFromObject(data['DocDetails']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('orgId')) {
                obj['orgId'] = ApiClient.convertToType(data['orgId'], 'String');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'String');
            }
            if (data.hasOwnProperty('txn')) {
                obj['txn'] = ApiClient.convertToType(data['txn'], 'String');
            }
            if (data.hasOwnProperty('ver')) {
                obj['ver'] = ApiClient.convertToType(data['ver'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullURIRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullURIRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PullURIRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DocDetails`
        if (data['DocDetails']) { // data not null
          PullURIRequestDocDetails.validateJSON(data['DocDetails']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['orgId'] && !(typeof data['orgId'] === 'string' || data['orgId'] instanceof String)) {
            throw new Error("Expected the field `orgId` to be a primitive type in the JSON string but got " + data['orgId']);
        }
        // ensure the json data is a string
        if (data['ts'] && !(typeof data['ts'] === 'string' || data['ts'] instanceof String)) {
            throw new Error("Expected the field `ts` to be a primitive type in the JSON string but got " + data['ts']);
        }
        // ensure the json data is a string
        if (data['txn'] && !(typeof data['txn'] === 'string' || data['txn'] instanceof String)) {
            throw new Error("Expected the field `txn` to be a primitive type in the JSON string but got " + data['txn']);
        }
        // ensure the json data is a string
        if (data['ver'] && !(typeof data['ver'] === 'string' || data['ver'] instanceof String)) {
            throw new Error("Expected the field `ver` to be a primitive type in the JSON string but got " + data['ver']);
        }

        return true;
    }


}

PullURIRequest.RequiredProperties = ["DocDetails", "format", "orgId", "ts", "txn", "ver"];

/**
 * @member {module:model/PullURIRequestDocDetails} DocDetails
 */
PullURIRequest.prototype['DocDetails'] = undefined;

/**
 * Indicates the desired format of the certificate data in the response. Possible values of this attribute are:   xml: for certificate data in machine readable xml format.   pdf: for certificate data in printable pdf format   both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details
 * @member {String} format
 */
PullURIRequest.prototype['format'] = undefined;

/**
 * Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.
 * @member {String} orgId
 */
PullURIRequest.prototype['orgId'] = undefined;

/**
 * A timestamp value. This will be used to decode the keyHash element described below.
 * @member {String} ts
 */
PullURIRequest.prototype['ts'] = undefined;

/**
 * Transaction id.
 * @member {String} txn
 */
PullURIRequest.prototype['txn'] = undefined;

/**
 * API version.
 * @member {String} ver
 */
PullURIRequest.prototype['ver'] = undefined;






export default PullURIRequest;

