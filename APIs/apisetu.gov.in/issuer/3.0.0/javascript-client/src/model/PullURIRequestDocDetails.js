/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PullURIRequestDocDetails model module.
 * @module model/PullURIRequestDocDetails
 * @version 3.0.0
 */
class PullURIRequestDocDetails {
    /**
     * Constructs a new <code>PullURIRequestDocDetails</code>.
     * @alias module:model/PullURIRequestDocDetails
     * @param DOB {Array.<Object>} Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
     * @param digiLockerId {Array.<Object>} A unique 36 character DigiLocker Id of the user account.
     * @param docType {Array.<Object>} Digital Locker will pass the document type being searched in this parameter.
     * @param fullName {Array.<Object>} Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
     * @param photo {Array.<Object>} The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
     * @param uDF1 {Array.<Object>} User defined search parameters to search a unique document/certificate. The <UDF> may be <RollNo> for CBSE, <RegistrationNo> for Transportation Dept. and <PAN> for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.
     * @param uDF2 {Array.<Object>} 
     * @param uDF3 {Array.<Object>} 
     * @param uDFn {Array.<Object>} 
     * @param UID {Array.<Object>} Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
     */
    constructor(DOB, digiLockerId, docType, fullName, photo, uDF1, uDF2, uDF3, uDFn, UID) { 
        
        PullURIRequestDocDetails.initialize(this, DOB, digiLockerId, docType, fullName, photo, uDF1, uDF2, uDF3, uDFn, UID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, DOB, digiLockerId, docType, fullName, photo, uDF1, uDF2, uDF3, uDFn, UID) { 
        obj['DOB'] = DOB;
        obj['DigiLockerId'] = digiLockerId;
        obj['DocType'] = docType;
        obj['FullName'] = fullName;
        obj['Photo'] = photo;
        obj['UDF1'] = uDF1;
        obj['UDF2'] = uDF2;
        obj['UDF3'] = uDF3;
        obj['UDFn'] = uDFn;
        obj['UID'] = UID;
    }

    /**
     * Constructs a <code>PullURIRequestDocDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullURIRequestDocDetails} obj Optional instance to populate.
     * @return {module:model/PullURIRequestDocDetails} The populated <code>PullURIRequestDocDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullURIRequestDocDetails();

            if (data.hasOwnProperty('DOB')) {
                obj['DOB'] = ApiClient.convertToType(data['DOB'], [Object]);
            }
            if (data.hasOwnProperty('DigiLockerId')) {
                obj['DigiLockerId'] = ApiClient.convertToType(data['DigiLockerId'], [Object]);
            }
            if (data.hasOwnProperty('DocType')) {
                obj['DocType'] = ApiClient.convertToType(data['DocType'], [Object]);
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], [Object]);
            }
            if (data.hasOwnProperty('Photo')) {
                obj['Photo'] = ApiClient.convertToType(data['Photo'], [Object]);
            }
            if (data.hasOwnProperty('UDF1')) {
                obj['UDF1'] = ApiClient.convertToType(data['UDF1'], [Object]);
            }
            if (data.hasOwnProperty('UDF2')) {
                obj['UDF2'] = ApiClient.convertToType(data['UDF2'], [Object]);
            }
            if (data.hasOwnProperty('UDF3')) {
                obj['UDF3'] = ApiClient.convertToType(data['UDF3'], [Object]);
            }
            if (data.hasOwnProperty('UDFn')) {
                obj['UDFn'] = ApiClient.convertToType(data['UDFn'], [Object]);
            }
            if (data.hasOwnProperty('UID')) {
                obj['UID'] = ApiClient.convertToType(data['UID'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PullURIRequestDocDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PullURIRequestDocDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PullURIRequestDocDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DOB'])) {
            throw new Error("Expected the field `DOB` to be an array in the JSON data but got " + data['DOB']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DigiLockerId'])) {
            throw new Error("Expected the field `DigiLockerId` to be an array in the JSON data but got " + data['DigiLockerId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DocType'])) {
            throw new Error("Expected the field `DocType` to be an array in the JSON data but got " + data['DocType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['FullName'])) {
            throw new Error("Expected the field `FullName` to be an array in the JSON data but got " + data['FullName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Photo'])) {
            throw new Error("Expected the field `Photo` to be an array in the JSON data but got " + data['Photo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UDF1'])) {
            throw new Error("Expected the field `UDF1` to be an array in the JSON data but got " + data['UDF1']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UDF2'])) {
            throw new Error("Expected the field `UDF2` to be an array in the JSON data but got " + data['UDF2']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UDF3'])) {
            throw new Error("Expected the field `UDF3` to be an array in the JSON data but got " + data['UDF3']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UDFn'])) {
            throw new Error("Expected the field `UDFn` to be an array in the JSON data but got " + data['UDFn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['UID'])) {
            throw new Error("Expected the field `UID` to be an array in the JSON data but got " + data['UID']);
        }

        return true;
    }


}

PullURIRequestDocDetails.RequiredProperties = ["DOB", "DigiLockerId", "DocType", "FullName", "Photo", "UDF1", "UDF2", "UDF3", "UDFn", "UID"];

/**
 * Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
 * @member {Array.<Object>} DOB
 */
PullURIRequestDocDetails.prototype['DOB'] = undefined;

/**
 * A unique 36 character DigiLocker Id of the user account.
 * @member {Array.<Object>} DigiLockerId
 */
PullURIRequestDocDetails.prototype['DigiLockerId'] = undefined;

/**
 * Digital Locker will pass the document type being searched in this parameter.
 * @member {Array.<Object>} DocType
 */
PullURIRequestDocDetails.prototype['DocType'] = undefined;

/**
 * Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
 * @member {Array.<Object>} FullName
 */
PullURIRequestDocDetails.prototype['FullName'] = undefined;

/**
 * The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
 * @member {Array.<Object>} Photo
 */
PullURIRequestDocDetails.prototype['Photo'] = undefined;

/**
 * User defined search parameters to search a unique document/certificate. The <UDF> may be <RollNo> for CBSE, <RegistrationNo> for Transportation Dept. and <PAN> for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.
 * @member {Array.<Object>} UDF1
 */
PullURIRequestDocDetails.prototype['UDF1'] = undefined;

/**
 * @member {Array.<Object>} UDF2
 */
PullURIRequestDocDetails.prototype['UDF2'] = undefined;

/**
 * @member {Array.<Object>} UDF3
 */
PullURIRequestDocDetails.prototype['UDF3'] = undefined;

/**
 * @member {Array.<Object>} UDFn
 */
PullURIRequestDocDetails.prototype['UDFn'] = undefined;

/**
 * Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.
 * @member {Array.<Object>} UID
 */
PullURIRequestDocDetails.prototype['UID'] = undefined;






export default PullURIRequestDocDetails;

