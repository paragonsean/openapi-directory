/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import PullDocRequest from './model/PullDocRequest';
import PullDocRequestDocDetails from './model/PullDocRequestDocDetails';
import PullDocResponse from './model/PullDocResponse';
import PullDocResponseDocDetails from './model/PullDocResponseDocDetails';
import PullDocResponseResponseStatus from './model/PullDocResponseResponseStatus';
import PullURIRequest from './model/PullURIRequest';
import PullURIRequestDocDetails from './model/PullURIRequestDocDetails';
import PullURIResponse from './model/PullURIResponse';
import PullURIResponseDocDetails from './model/PullURIResponseDocDetails';
import PullURIResponseResponseStatus from './model/PullURIResponseResponseStatus';
import APIsApi from './api/APIsApi';


/**
* This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DigiLockerIssuerApis = require('index'); // See note below*.
* var xxxSvc = new DigiLockerIssuerApis.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DigiLockerIssuerApis.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DigiLockerIssuerApis.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DigiLockerIssuerApis.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 3.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The PullDocRequest model constructor.
     * @property {module:model/PullDocRequest}
     */
    PullDocRequest,

    /**
     * The PullDocRequestDocDetails model constructor.
     * @property {module:model/PullDocRequestDocDetails}
     */
    PullDocRequestDocDetails,

    /**
     * The PullDocResponse model constructor.
     * @property {module:model/PullDocResponse}
     */
    PullDocResponse,

    /**
     * The PullDocResponseDocDetails model constructor.
     * @property {module:model/PullDocResponseDocDetails}
     */
    PullDocResponseDocDetails,

    /**
     * The PullDocResponseResponseStatus model constructor.
     * @property {module:model/PullDocResponseResponseStatus}
     */
    PullDocResponseResponseStatus,

    /**
     * The PullURIRequest model constructor.
     * @property {module:model/PullURIRequest}
     */
    PullURIRequest,

    /**
     * The PullURIRequestDocDetails model constructor.
     * @property {module:model/PullURIRequestDocDetails}
     */
    PullURIRequestDocDetails,

    /**
     * The PullURIResponse model constructor.
     * @property {module:model/PullURIResponse}
     */
    PullURIResponse,

    /**
     * The PullURIResponseDocDetails model constructor.
     * @property {module:model/PullURIResponseDocDetails}
     */
    PullURIResponseDocDetails,

    /**
     * The PullURIResponseResponseStatus model constructor.
     * @property {module:model/PullURIResponseResponseStatus}
     */
    PullURIResponseResponseStatus,

    /**
    * The APIsApi service constructor.
    * @property {module:api/APIsApi}
    */
    APIsApi
};
