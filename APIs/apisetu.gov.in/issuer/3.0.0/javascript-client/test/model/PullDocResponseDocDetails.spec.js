/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DigiLockerIssuerApis);
  }
}(this, function(expect, DigiLockerIssuerApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DigiLockerIssuerApis.PullDocResponseDocDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PullDocResponseDocDetails', function() {
    it('should create an instance of PullDocResponseDocDetails', function() {
      // uncomment below and update the code to test PullDocResponseDocDetails
      //var instance = new DigiLockerIssuerApis.PullDocResponseDocDetails();
      //expect(instance).to.be.a(DigiLockerIssuerApis.PullDocResponseDocDetails);
    });

    it('should have the property dataContent (base name: "DataContent")', function() {
      // uncomment below and update the code to test the property dataContent
      //var instance = new DigiLockerIssuerApis.PullDocResponseDocDetails();
      //expect(instance).to.be();
    });

    it('should have the property docContent (base name: "DocContent")', function() {
      // uncomment below and update the code to test the property docContent
      //var instance = new DigiLockerIssuerApis.PullDocResponseDocDetails();
      //expect(instance).to.be();
    });

  });

}));
