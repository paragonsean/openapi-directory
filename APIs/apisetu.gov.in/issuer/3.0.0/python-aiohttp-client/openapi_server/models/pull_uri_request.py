# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pull_uri_request_doc_details import PullURIRequestDocDetails
from openapi_server import util


class PullURIRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doc_details: PullURIRequestDocDetails=None, format: str=None, org_id: str=None, ts: str=None, txn: str=None, ver: str=None):
        """PullURIRequest - a model defined in OpenAPI

        :param doc_details: The doc_details of this PullURIRequest.
        :param format: The format of this PullURIRequest.
        :param org_id: The org_id of this PullURIRequest.
        :param ts: The ts of this PullURIRequest.
        :param txn: The txn of this PullURIRequest.
        :param ver: The ver of this PullURIRequest.
        """
        self.openapi_types = {
            'doc_details': PullURIRequestDocDetails,
            'format': str,
            'org_id': str,
            'ts': str,
            'txn': str,
            'ver': str
        }

        self.attribute_map = {
            'doc_details': 'DocDetails',
            'format': 'format',
            'org_id': 'orgId',
            'ts': 'ts',
            'txn': 'txn',
            'ver': 'ver'
        }

        self._doc_details = doc_details
        self._format = format
        self._org_id = org_id
        self._ts = ts
        self._txn = txn
        self._ver = ver

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullURIRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullURIRequest of this PullURIRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_details(self):
        """Gets the doc_details of this PullURIRequest.


        :return: The doc_details of this PullURIRequest.
        :rtype: PullURIRequestDocDetails
        """
        return self._doc_details

    @doc_details.setter
    def doc_details(self, doc_details):
        """Sets the doc_details of this PullURIRequest.


        :param doc_details: The doc_details of this PullURIRequest.
        :type doc_details: PullURIRequestDocDetails
        """
        if doc_details is None:
            raise ValueError("Invalid value for `doc_details`, must not be `None`")

        self._doc_details = doc_details

    @property
    def format(self):
        """Gets the format of this PullURIRequest.

        Indicates the desired format of the certificate data in the response. Possible values of this attribute are:   xml: for certificate data in machine readable xml format.   pdf: for certificate data in printable pdf format   both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details

        :return: The format of this PullURIRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PullURIRequest.

        Indicates the desired format of the certificate data in the response. Possible values of this attribute are:   xml: for certificate data in machine readable xml format.   pdf: for certificate data in printable pdf format   both: for certificate data in both xml and pdf format. If the format attribute is not present in the request, then the API must return Base64 encoded PDF data in the response. Please see the response section below for more details

        :param format: The format of this PullURIRequest.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")
        if format is not None and len(format) < 1:
            raise ValueError("Invalid value for `format`, length must be greater than or equal to `1`")

        self._format = format

    @property
    def org_id(self):
        """Gets the org_id of this PullURIRequest.

        Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.

        :return: The org_id of this PullURIRequest.
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this PullURIRequest.

        Org Id is the user id provided to the Digital Locker application by the issuer application for accessing the API.

        :param org_id: The org_id of this PullURIRequest.
        :type org_id: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")

        self._org_id = org_id

    @property
    def ts(self):
        """Gets the ts of this PullURIRequest.

        A timestamp value. This will be used to decode the keyHash element described below.

        :return: The ts of this PullURIRequest.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this PullURIRequest.

        A timestamp value. This will be used to decode the keyHash element described below.

        :param ts: The ts of this PullURIRequest.
        :type ts: str
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")
        if ts is not None and len(ts) < 1:
            raise ValueError("Invalid value for `ts`, length must be greater than or equal to `1`")

        self._ts = ts

    @property
    def txn(self):
        """Gets the txn of this PullURIRequest.

        Transaction id.

        :return: The txn of this PullURIRequest.
        :rtype: str
        """
        return self._txn

    @txn.setter
    def txn(self, txn):
        """Sets the txn of this PullURIRequest.

        Transaction id.

        :param txn: The txn of this PullURIRequest.
        :type txn: str
        """
        if txn is None:
            raise ValueError("Invalid value for `txn`, must not be `None`")
        if txn is not None and len(txn) < 1:
            raise ValueError("Invalid value for `txn`, length must be greater than or equal to `1`")

        self._txn = txn

    @property
    def ver(self):
        """Gets the ver of this PullURIRequest.

        API version.

        :return: The ver of this PullURIRequest.
        :rtype: str
        """
        return self._ver

    @ver.setter
    def ver(self, ver):
        """Sets the ver of this PullURIRequest.

        API version.

        :param ver: The ver of this PullURIRequest.
        :type ver: str
        """
        if ver is None:
            raise ValueError("Invalid value for `ver`, must not be `None`")
        if ver is not None and len(ver) < 1:
            raise ValueError("Invalid value for `ver`, length must be greater than or equal to `1`")

        self._ver = ver
