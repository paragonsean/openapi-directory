# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullDocResponseResponseStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, ts: str=None, txn: str=None):
        """PullDocResponseResponseStatus - a model defined in OpenAPI

        :param status: The status of this PullDocResponseResponseStatus.
        :param ts: The ts of this PullDocResponseResponseStatus.
        :param txn: The txn of this PullDocResponseResponseStatus.
        """
        self.openapi_types = {
            'status': str,
            'ts': str,
            'txn': str
        }

        self.attribute_map = {
            'status': 'Status',
            'ts': 'ts',
            'txn': 'txn'
        }

        self._status = status
        self._ts = ts
        self._txn = txn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullDocResponseResponseStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullDocResponse_ResponseStatus of this PullDocResponseResponseStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this PullDocResponseResponseStatus.

        1 for success, 0 for error.

        :return: The status of this PullDocResponseResponseStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PullDocResponseResponseStatus.

        1 for success, 0 for error.

        :param status: The status of this PullDocResponseResponseStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        if status is not None and len(status) < 1:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `1`")

        self._status = status

    @property
    def ts(self):
        """Gets the ts of this PullDocResponseResponseStatus.

        A timestamp value as sent in the request.

        :return: The ts of this PullDocResponseResponseStatus.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this PullDocResponseResponseStatus.

        A timestamp value as sent in the request.

        :param ts: The ts of this PullDocResponseResponseStatus.
        :type ts: str
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")
        if ts is not None and len(ts) < 1:
            raise ValueError("Invalid value for `ts`, length must be greater than or equal to `1`")

        self._ts = ts

    @property
    def txn(self):
        """Gets the txn of this PullDocResponseResponseStatus.

        Transaction id value as sent in the request.

        :return: The txn of this PullDocResponseResponseStatus.
        :rtype: str
        """
        return self._txn

    @txn.setter
    def txn(self, txn):
        """Sets the txn of this PullDocResponseResponseStatus.

        Transaction id value as sent in the request.

        :param txn: The txn of this PullDocResponseResponseStatus.
        :type txn: str
        """
        if txn is None:
            raise ValueError("Invalid value for `txn`, must not be `None`")

        self._txn = txn
