# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pull_uri_response_doc_details import PullURIResponseDocDetails
from openapi_server.models.pull_uri_response_response_status import PullURIResponseResponseStatus
from openapi_server import util


class PullURIResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, doc_details: PullURIResponseDocDetails=None, response_status: PullURIResponseResponseStatus=None):
        """PullURIResponse - a model defined in OpenAPI

        :param doc_details: The doc_details of this PullURIResponse.
        :param response_status: The response_status of this PullURIResponse.
        """
        self.openapi_types = {
            'doc_details': PullURIResponseDocDetails,
            'response_status': PullURIResponseResponseStatus
        }

        self.attribute_map = {
            'doc_details': 'DocDetails',
            'response_status': 'ResponseStatus'
        }

        self._doc_details = doc_details
        self._response_status = response_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullURIResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullURIResponse of this PullURIResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def doc_details(self):
        """Gets the doc_details of this PullURIResponse.


        :return: The doc_details of this PullURIResponse.
        :rtype: PullURIResponseDocDetails
        """
        return self._doc_details

    @doc_details.setter
    def doc_details(self, doc_details):
        """Sets the doc_details of this PullURIResponse.


        :param doc_details: The doc_details of this PullURIResponse.
        :type doc_details: PullURIResponseDocDetails
        """
        if doc_details is None:
            raise ValueError("Invalid value for `doc_details`, must not be `None`")

        self._doc_details = doc_details

    @property
    def response_status(self):
        """Gets the response_status of this PullURIResponse.


        :return: The response_status of this PullURIResponse.
        :rtype: PullURIResponseResponseStatus
        """
        return self._response_status

    @response_status.setter
    def response_status(self, response_status):
        """Sets the response_status of this PullURIResponse.


        :param response_status: The response_status of this PullURIResponse.
        :type response_status: PullURIResponseResponseStatus
        """
        if response_status is None:
            raise ValueError("Invalid value for `response_status`, must not be `None`")

        self._response_status = response_status
