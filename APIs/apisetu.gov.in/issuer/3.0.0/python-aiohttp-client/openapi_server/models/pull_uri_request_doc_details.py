# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullURIRequestDocDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: List[object]=None, digi_locker_id: List[object]=None, doc_type: List[object]=None, full_name: List[object]=None, photo: List[object]=None, udf1: List[object]=None, udf2: List[object]=None, udf3: List[object]=None, udfn: List[object]=None, uid: List[object]=None):
        """PullURIRequestDocDetails - a model defined in OpenAPI

        :param dob: The dob of this PullURIRequestDocDetails.
        :param digi_locker_id: The digi_locker_id of this PullURIRequestDocDetails.
        :param doc_type: The doc_type of this PullURIRequestDocDetails.
        :param full_name: The full_name of this PullURIRequestDocDetails.
        :param photo: The photo of this PullURIRequestDocDetails.
        :param udf1: The udf1 of this PullURIRequestDocDetails.
        :param udf2: The udf2 of this PullURIRequestDocDetails.
        :param udf3: The udf3 of this PullURIRequestDocDetails.
        :param udfn: The udfn of this PullURIRequestDocDetails.
        :param uid: The uid of this PullURIRequestDocDetails.
        """
        self.openapi_types = {
            'dob': List[object],
            'digi_locker_id': List[object],
            'doc_type': List[object],
            'full_name': List[object],
            'photo': List[object],
            'udf1': List[object],
            'udf2': List[object],
            'udf3': List[object],
            'udfn': List[object],
            'uid': List[object]
        }

        self.attribute_map = {
            'dob': 'DOB',
            'digi_locker_id': 'DigiLockerId',
            'doc_type': 'DocType',
            'full_name': 'FullName',
            'photo': 'Photo',
            'udf1': 'UDF1',
            'udf2': 'UDF2',
            'udf3': 'UDF3',
            'udfn': 'UDFn',
            'uid': 'UID'
        }

        self._dob = dob
        self._digi_locker_id = digi_locker_id
        self._doc_type = doc_type
        self._full_name = full_name
        self._photo = photo
        self._udf1 = udf1
        self._udf2 = udf2
        self._udf3 = udf3
        self._udfn = udfn
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullURIRequestDocDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullURIRequest_DocDetails of this PullURIRequestDocDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this PullURIRequestDocDetails.

        Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The dob of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PullURIRequestDocDetails.

        Date of birth of the DigiLocker user searching for the document/certificate as on Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param dob: The dob of this PullURIRequestDocDetails.
        :type dob: List[object]
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def digi_locker_id(self):
        """Gets the digi_locker_id of this PullURIRequestDocDetails.

        A unique 36 character DigiLocker Id of the user account.

        :return: The digi_locker_id of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._digi_locker_id

    @digi_locker_id.setter
    def digi_locker_id(self, digi_locker_id):
        """Sets the digi_locker_id of this PullURIRequestDocDetails.

        A unique 36 character DigiLocker Id of the user account.

        :param digi_locker_id: The digi_locker_id of this PullURIRequestDocDetails.
        :type digi_locker_id: List[object]
        """
        if digi_locker_id is None:
            raise ValueError("Invalid value for `digi_locker_id`, must not be `None`")

        self._digi_locker_id = digi_locker_id

    @property
    def doc_type(self):
        """Gets the doc_type of this PullURIRequestDocDetails.

        Digital Locker will pass the document type being searched in this parameter.

        :return: The doc_type of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this PullURIRequestDocDetails.

        Digital Locker will pass the document type being searched in this parameter.

        :param doc_type: The doc_type of this PullURIRequestDocDetails.
        :type doc_type: List[object]
        """
        if doc_type is None:
            raise ValueError("Invalid value for `doc_type`, must not be `None`")

        self._doc_type = doc_type

    @property
    def full_name(self):
        """Gets the full_name of this PullURIRequestDocDetails.

        Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The full_name of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PullURIRequestDocDetails.

        Name of the DigiLocker user searching for the document/certificate as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param full_name: The full_name of this PullURIRequestDocDetails.
        :type full_name: List[object]
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def photo(self):
        """Gets the photo of this PullURIRequestDocDetails.

        The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The photo of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this PullURIRequestDocDetails.

        The base 64 encoded contents of JPEG photograph as on Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param photo: The photo of this PullURIRequestDocDetails.
        :type photo: List[object]
        """
        if photo is None:
            raise ValueError("Invalid value for `photo`, must not be `None`")

        self._photo = photo

    @property
    def udf1(self):
        """Gets the udf1 of this PullURIRequestDocDetails.

        User defined search parameters to search a unique document/certificate. The <UDF> may be <RollNo> for CBSE, <RegistrationNo> for Transportation Dept. and <PAN> for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.

        :return: The udf1 of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._udf1

    @udf1.setter
    def udf1(self, udf1):
        """Sets the udf1 of this PullURIRequestDocDetails.

        User defined search parameters to search a unique document/certificate. The <UDF> may be <RollNo> for CBSE, <RegistrationNo> for Transportation Dept. and <PAN> for Income Tax Dept. The search parameters for the API will be configured in the issuer portal of Digital Locker while configuring this API.

        :param udf1: The udf1 of this PullURIRequestDocDetails.
        :type udf1: List[object]
        """
        if udf1 is None:
            raise ValueError("Invalid value for `udf1`, must not be `None`")

        self._udf1 = udf1

    @property
    def udf2(self):
        """Gets the udf2 of this PullURIRequestDocDetails.


        :return: The udf2 of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._udf2

    @udf2.setter
    def udf2(self, udf2):
        """Sets the udf2 of this PullURIRequestDocDetails.


        :param udf2: The udf2 of this PullURIRequestDocDetails.
        :type udf2: List[object]
        """
        if udf2 is None:
            raise ValueError("Invalid value for `udf2`, must not be `None`")

        self._udf2 = udf2

    @property
    def udf3(self):
        """Gets the udf3 of this PullURIRequestDocDetails.


        :return: The udf3 of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._udf3

    @udf3.setter
    def udf3(self, udf3):
        """Sets the udf3 of this PullURIRequestDocDetails.


        :param udf3: The udf3 of this PullURIRequestDocDetails.
        :type udf3: List[object]
        """
        if udf3 is None:
            raise ValueError("Invalid value for `udf3`, must not be `None`")

        self._udf3 = udf3

    @property
    def udfn(self):
        """Gets the udfn of this PullURIRequestDocDetails.


        :return: The udfn of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._udfn

    @udfn.setter
    def udfn(self, udfn):
        """Sets the udfn of this PullURIRequestDocDetails.


        :param udfn: The udfn of this PullURIRequestDocDetails.
        :type udfn: List[object]
        """
        if udfn is None:
            raise ValueError("Invalid value for `udfn`, must not be `None`")

        self._udfn = udfn

    @property
    def uid(self):
        """Gets the uid of this PullURIRequestDocDetails.

        Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The uid of this PullURIRequestDocDetails.
        :rtype: List[object]
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PullURIRequestDocDetails.

        Aadhaar number of the DigiLocker user searching for the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param uid: The uid of this PullURIRequestDocDetails.
        :type uid: List[object]
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
