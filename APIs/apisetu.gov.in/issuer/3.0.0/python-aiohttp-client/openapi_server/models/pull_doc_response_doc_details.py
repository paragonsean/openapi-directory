# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullDocResponseDocDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_content: str=None, doc_content: str=None):
        """PullDocResponseDocDetails - a model defined in OpenAPI

        :param data_content: The data_content of this PullDocResponseDocDetails.
        :param doc_content: The doc_content of this PullDocResponseDocDetails.
        """
        self.openapi_types = {
            'data_content': str,
            'doc_content': str
        }

        self.attribute_map = {
            'data_content': 'DataContent',
            'doc_content': 'DocContent'
        }

        self._data_content = data_content
        self._doc_content = doc_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullDocResponseDocDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullDocResponse_DocDetails of this PullDocResponseDocDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_content(self):
        """Gets the data_content of this PullDocResponseDocDetails.

        Enclose the Base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.

        :return: The data_content of this PullDocResponseDocDetails.
        :rtype: str
        """
        return self._data_content

    @data_content.setter
    def data_content(self, data_content):
        """Sets the data_content of this PullDocResponseDocDetails.

        Enclose the Base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.

        :param data_content: The data_content of this PullDocResponseDocDetails.
        :type data_content: str
        """
        if data_content is None:
            raise ValueError("Invalid value for `data_content`, must not be `None`")
        if data_content is not None and len(data_content) < 1:
            raise ValueError("Invalid value for `data_content`, length must be greater than or equal to `1`")

        self._data_content = data_content

    @property
    def doc_content(self):
        """Gets the doc_content of this PullDocResponseDocDetails.

        Enclose the Base64 byte encoded contents of PDF file in this element. The DocContent element should be sent only if the format attribute in the original request is sent as “pdf” or “both” or is absent.

        :return: The doc_content of this PullDocResponseDocDetails.
        :rtype: str
        """
        return self._doc_content

    @doc_content.setter
    def doc_content(self, doc_content):
        """Sets the doc_content of this PullDocResponseDocDetails.

        Enclose the Base64 byte encoded contents of PDF file in this element. The DocContent element should be sent only if the format attribute in the original request is sent as “pdf” or “both” or is absent.

        :param doc_content: The doc_content of this PullDocResponseDocDetails.
        :type doc_content: str
        """
        if doc_content is None:
            raise ValueError("Invalid value for `doc_content`, must not be `None`")
        if doc_content is not None and len(doc_content) < 1:
            raise ValueError("Invalid value for `doc_content`, length must be greater than or equal to `1`")

        self._doc_content = doc_content
