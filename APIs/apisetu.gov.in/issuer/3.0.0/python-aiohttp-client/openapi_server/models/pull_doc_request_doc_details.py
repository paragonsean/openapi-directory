# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullDocRequestDocDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, digi_locker_id: str=None, full_name: str=None, uid: str=None, uri: str=None):
        """PullDocRequestDocDetails - a model defined in OpenAPI

        :param dob: The dob of this PullDocRequestDocDetails.
        :param digi_locker_id: The digi_locker_id of this PullDocRequestDocDetails.
        :param full_name: The full_name of this PullDocRequestDocDetails.
        :param uid: The uid of this PullDocRequestDocDetails.
        :param uri: The uri of this PullDocRequestDocDetails.
        """
        self.openapi_types = {
            'dob': str,
            'digi_locker_id': str,
            'full_name': str,
            'uid': str,
            'uri': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'digi_locker_id': 'DigiLockerId',
            'full_name': 'FullName',
            'uid': 'UID',
            'uri': 'URI'
        }

        self._dob = dob
        self._digi_locker_id = digi_locker_id
        self._full_name = full_name
        self._uid = uid
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullDocRequestDocDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullDocRequest_DocDetails of this PullDocRequestDocDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this PullDocRequestDocDetails.

        Date of birth of the DigiLocker user accessing the document/certificate as in Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The dob of this PullDocRequestDocDetails.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PullDocRequestDocDetails.

        Date of birth of the DigiLocker user accessing the document/certificate as in Aadhaar in DD-MM-YYYY format. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param dob: The dob of this PullDocRequestDocDetails.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")
        if dob is not None and len(dob) < 1:
            raise ValueError("Invalid value for `dob`, length must be greater than or equal to `1`")

        self._dob = dob

    @property
    def digi_locker_id(self):
        """Gets the digi_locker_id of this PullDocRequestDocDetails.

        A unique 36 character DigiLocker Id of the user account.

        :return: The digi_locker_id of this PullDocRequestDocDetails.
        :rtype: str
        """
        return self._digi_locker_id

    @digi_locker_id.setter
    def digi_locker_id(self, digi_locker_id):
        """Sets the digi_locker_id of this PullDocRequestDocDetails.

        A unique 36 character DigiLocker Id of the user account.

        :param digi_locker_id: The digi_locker_id of this PullDocRequestDocDetails.
        :type digi_locker_id: str
        """
        if digi_locker_id is None:
            raise ValueError("Invalid value for `digi_locker_id`, must not be `None`")
        if digi_locker_id is not None and len(digi_locker_id) < 1:
            raise ValueError("Invalid value for `digi_locker_id`, length must be greater than or equal to `1`")

        self._digi_locker_id = digi_locker_id

    @property
    def full_name(self):
        """Gets the full_name of this PullDocRequestDocDetails.

        Name of the DigiLocker user accessing the document/certificate as in Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The full_name of this PullDocRequestDocDetails.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PullDocRequestDocDetails.

        Name of the DigiLocker user accessing the document/certificate as in Aadhaar. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param full_name: The full_name of this PullDocRequestDocDetails.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")
        if full_name is not None and len(full_name) < 1:
            raise ValueError("Invalid value for `full_name`, length must be greater than or equal to `1`")

        self._full_name = full_name

    @property
    def uid(self):
        """Gets the uid of this PullDocRequestDocDetails.

        Aadhaar number of the DigiLocker user accessing the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :return: The uid of this PullDocRequestDocDetails.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PullDocRequestDocDetails.

        Aadhaar number of the DigiLocker user accessing the document/certificate. This is an optional parameter and will be sent only if the issuer opts for it while configuring the API on Digital Locker Issuer Portal.

        :param uid: The uid of this PullDocRequestDocDetails.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")

        self._uid = uid

    @property
    def uri(self):
        """Gets the uri of this PullDocRequestDocDetails.

        URI identifies the document uniquely.

        :return: The uri of this PullDocRequestDocDetails.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PullDocRequestDocDetails.

        URI identifies the document uniquely.

        :param uri: The uri of this PullDocRequestDocDetails.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri
