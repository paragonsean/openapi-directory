# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PullURIResponseDocDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, data_content: str=None, digi_locker_id: str=None, doc_content: str=None, doc_type: str=None, full_name: str=None, udf1: str=None, udf2: str=None, uid: str=None, uri: str=None):
        """PullURIResponseDocDetails - a model defined in OpenAPI

        :param dob: The dob of this PullURIResponseDocDetails.
        :param data_content: The data_content of this PullURIResponseDocDetails.
        :param digi_locker_id: The digi_locker_id of this PullURIResponseDocDetails.
        :param doc_content: The doc_content of this PullURIResponseDocDetails.
        :param doc_type: The doc_type of this PullURIResponseDocDetails.
        :param full_name: The full_name of this PullURIResponseDocDetails.
        :param udf1: The udf1 of this PullURIResponseDocDetails.
        :param udf2: The udf2 of this PullURIResponseDocDetails.
        :param uid: The uid of this PullURIResponseDocDetails.
        :param uri: The uri of this PullURIResponseDocDetails.
        """
        self.openapi_types = {
            'dob': str,
            'data_content': str,
            'digi_locker_id': str,
            'doc_content': str,
            'doc_type': str,
            'full_name': str,
            'udf1': str,
            'udf2': str,
            'uid': str,
            'uri': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'data_content': 'DataContent',
            'digi_locker_id': 'DigiLockerId',
            'doc_content': 'DocContent',
            'doc_type': 'DocType',
            'full_name': 'FullName',
            'udf1': 'UDF1',
            'udf2': 'UDF2',
            'uid': 'UID',
            'uri': 'URI'
        }

        self._dob = dob
        self._data_content = data_content
        self._digi_locker_id = digi_locker_id
        self._doc_content = doc_content
        self._doc_type = doc_type
        self._full_name = full_name
        self._udf1 = udf1
        self._udf2 = udf2
        self._uid = uid
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PullURIResponseDocDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PullURIResponse_DocDetails of this PullURIResponseDocDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this PullURIResponseDocDetails.

        The date of birth if sent in the original request.

        :return: The dob of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PullURIResponseDocDetails.

        The date of birth if sent in the original request.

        :param dob: The dob of this PullURIResponseDocDetails.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")
        if dob is not None and len(dob) < 1:
            raise ValueError("Invalid value for `dob`, length must be greater than or equal to `1`")

        self._dob = dob

    @property
    def data_content(self):
        """Gets the data_content of this PullURIResponseDocDetails.

        Enclose the base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.

        :return: The data_content of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._data_content

    @data_content.setter
    def data_content(self, data_content):
        """Sets the data_content of this PullURIResponseDocDetails.

        Enclose the base64 byte encoded certificate metadata in XML format. The DataContent element should be sent only if the original request contains format attribute as “xml” or “both”.

        :param data_content: The data_content of this PullURIResponseDocDetails.
        :type data_content: str
        """
        if data_content is None:
            raise ValueError("Invalid value for `data_content`, must not be `None`")
        if data_content is not None and len(data_content) < 1:
            raise ValueError("Invalid value for `data_content`, length must be greater than or equal to `1`")

        self._data_content = data_content

    @property
    def digi_locker_id(self):
        """Gets the digi_locker_id of this PullURIResponseDocDetails.

        A unique 36 character DigiLocker Id as sent in the original request.

        :return: The digi_locker_id of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._digi_locker_id

    @digi_locker_id.setter
    def digi_locker_id(self, digi_locker_id):
        """Sets the digi_locker_id of this PullURIResponseDocDetails.

        A unique 36 character DigiLocker Id as sent in the original request.

        :param digi_locker_id: The digi_locker_id of this PullURIResponseDocDetails.
        :type digi_locker_id: str
        """
        if digi_locker_id is None:
            raise ValueError("Invalid value for `digi_locker_id`, must not be `None`")
        if digi_locker_id is not None and len(digi_locker_id) < 1:
            raise ValueError("Invalid value for `digi_locker_id`, length must be greater than or equal to `1`")

        self._digi_locker_id = digi_locker_id

    @property
    def doc_content(self):
        """Gets the doc_content of this PullURIResponseDocDetails.

        Enclose the Base64 byte encoded contents of PDF file in this element.

        :return: The doc_content of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._doc_content

    @doc_content.setter
    def doc_content(self, doc_content):
        """Sets the doc_content of this PullURIResponseDocDetails.

        Enclose the Base64 byte encoded contents of PDF file in this element.

        :param doc_content: The doc_content of this PullURIResponseDocDetails.
        :type doc_content: str
        """
        if doc_content is None:
            raise ValueError("Invalid value for `doc_content`, must not be `None`")
        if doc_content is not None and len(doc_content) < 1:
            raise ValueError("Invalid value for `doc_content`, length must be greater than or equal to `1`")

        self._doc_content = doc_content

    @property
    def doc_type(self):
        """Gets the doc_type of this PullURIResponseDocDetails.

        The document type sent in the original request.

        :return: The doc_type of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this PullURIResponseDocDetails.

        The document type sent in the original request.

        :param doc_type: The doc_type of this PullURIResponseDocDetails.
        :type doc_type: str
        """
        if doc_type is None:
            raise ValueError("Invalid value for `doc_type`, must not be `None`")
        if doc_type is not None and len(doc_type) < 1:
            raise ValueError("Invalid value for `doc_type`, length must be greater than or equal to `1`")

        self._doc_type = doc_type

    @property
    def full_name(self):
        """Gets the full_name of this PullURIResponseDocDetails.

        The full name if sent in the original request.

        :return: The full_name of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PullURIResponseDocDetails.

        The full name if sent in the original request.

        :param full_name: The full_name of this PullURIResponseDocDetails.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")
        if full_name is not None and len(full_name) < 1:
            raise ValueError("Invalid value for `full_name`, length must be greater than or equal to `1`")

        self._full_name = full_name

    @property
    def udf1(self):
        """Gets the udf1 of this PullURIResponseDocDetails.

        Search parameters sent in the original request.

        :return: The udf1 of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._udf1

    @udf1.setter
    def udf1(self, udf1):
        """Sets the udf1 of this PullURIResponseDocDetails.

        Search parameters sent in the original request.

        :param udf1: The udf1 of this PullURIResponseDocDetails.
        :type udf1: str
        """
        if udf1 is None:
            raise ValueError("Invalid value for `udf1`, must not be `None`")
        if udf1 is not None and len(udf1) < 1:
            raise ValueError("Invalid value for `udf1`, length must be greater than or equal to `1`")

        self._udf1 = udf1

    @property
    def udf2(self):
        """Gets the udf2 of this PullURIResponseDocDetails.

        Search parameters sent in the original request.

        :return: The udf2 of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._udf2

    @udf2.setter
    def udf2(self, udf2):
        """Sets the udf2 of this PullURIResponseDocDetails.

        Search parameters sent in the original request.

        :param udf2: The udf2 of this PullURIResponseDocDetails.
        :type udf2: str
        """
        if udf2 is None:
            raise ValueError("Invalid value for `udf2`, must not be `None`")
        if udf2 is not None and len(udf2) < 1:
            raise ValueError("Invalid value for `udf2`, length must be greater than or equal to `1`")

        self._udf2 = udf2

    @property
    def uid(self):
        """Gets the uid of this PullURIResponseDocDetails.

        The Aadhaar number if sent in the original request.

        :return: The uid of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PullURIResponseDocDetails.

        The Aadhaar number if sent in the original request.

        :param uid: The uid of this PullURIResponseDocDetails.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")

        self._uid = uid

    @property
    def uri(self):
        """Gets the uri of this PullURIResponseDocDetails.

        URI corresponding to the search criteria that identifies the document uniquely.

        :return: The uri of this PullURIResponseDocDetails.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PullURIResponseDocDetails.

        URI corresponding to the search criteria that identifies the document uniquely.

        :param uri: The uri of this PullURIResponseDocDetails.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")

        self._uri = uri
