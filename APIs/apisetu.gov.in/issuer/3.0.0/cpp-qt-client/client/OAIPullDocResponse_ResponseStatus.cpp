/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullDocResponse_ResponseStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullDocResponse_ResponseStatus::OAIPullDocResponse_ResponseStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullDocResponse_ResponseStatus::OAIPullDocResponse_ResponseStatus() {
    this->initializeModel();
}

OAIPullDocResponse_ResponseStatus::~OAIPullDocResponse_ResponseStatus() {}

void OAIPullDocResponse_ResponseStatus::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_txn_isSet = false;
    m_txn_isValid = false;
}

void OAIPullDocResponse_ResponseStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullDocResponse_ResponseStatus::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_txn_isValid = ::OpenAPI::fromJsonValue(m_txn, json[QString("txn")]);
    m_txn_isSet = !json[QString("txn")].isNull() && m_txn_isValid;
}

QString OAIPullDocResponse_ResponseStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullDocResponse_ResponseStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_txn_isSet) {
        obj.insert(QString("txn"), ::OpenAPI::toJsonValue(m_txn));
    }
    return obj;
}

QString OAIPullDocResponse_ResponseStatus::getStatus() const {
    return m_status;
}
void OAIPullDocResponse_ResponseStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPullDocResponse_ResponseStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPullDocResponse_ResponseStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPullDocResponse_ResponseStatus::getTs() const {
    return m_ts;
}
void OAIPullDocResponse_ResponseStatus::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIPullDocResponse_ResponseStatus::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIPullDocResponse_ResponseStatus::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIPullDocResponse_ResponseStatus::getTxn() const {
    return m_txn;
}
void OAIPullDocResponse_ResponseStatus::setTxn(const QString &txn) {
    m_txn = txn;
    m_txn_isSet = true;
}

bool OAIPullDocResponse_ResponseStatus::is_txn_Set() const{
    return m_txn_isSet;
}

bool OAIPullDocResponse_ResponseStatus::is_txn_Valid() const{
    return m_txn_isValid;
}

bool OAIPullDocResponse_ResponseStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullDocResponse_ResponseStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && m_ts_isValid && m_txn_isValid && true;
}

} // namespace OpenAPI
