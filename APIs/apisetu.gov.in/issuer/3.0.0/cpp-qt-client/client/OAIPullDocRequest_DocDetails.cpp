/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullDocRequest_DocDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullDocRequest_DocDetails::OAIPullDocRequest_DocDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullDocRequest_DocDetails::OAIPullDocRequest_DocDetails() {
    this->initializeModel();
}

OAIPullDocRequest_DocDetails::~OAIPullDocRequest_DocDetails() {}

void OAIPullDocRequest_DocDetails::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_digi_locker_id_isSet = false;
    m_digi_locker_id_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPullDocRequest_DocDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullDocRequest_DocDetails::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_digi_locker_id_isValid = ::OpenAPI::fromJsonValue(m_digi_locker_id, json[QString("DigiLockerId")]);
    m_digi_locker_id_isSet = !json[QString("DigiLockerId")].isNull() && m_digi_locker_id_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("URI")]);
    m_uri_isSet = !json[QString("URI")].isNull() && m_uri_isValid;
}

QString OAIPullDocRequest_DocDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullDocRequest_DocDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_digi_locker_id_isSet) {
        obj.insert(QString("DigiLockerId"), ::OpenAPI::toJsonValue(m_digi_locker_id));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_uri_isSet) {
        obj.insert(QString("URI"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIPullDocRequest_DocDetails::getDob() const {
    return m_dob;
}
void OAIPullDocRequest_DocDetails::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIPullDocRequest_DocDetails::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIPullDocRequest_DocDetails::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIPullDocRequest_DocDetails::getDigiLockerId() const {
    return m_digi_locker_id;
}
void OAIPullDocRequest_DocDetails::setDigiLockerId(const QString &digi_locker_id) {
    m_digi_locker_id = digi_locker_id;
    m_digi_locker_id_isSet = true;
}

bool OAIPullDocRequest_DocDetails::is_digi_locker_id_Set() const{
    return m_digi_locker_id_isSet;
}

bool OAIPullDocRequest_DocDetails::is_digi_locker_id_Valid() const{
    return m_digi_locker_id_isValid;
}

QString OAIPullDocRequest_DocDetails::getFullName() const {
    return m_full_name;
}
void OAIPullDocRequest_DocDetails::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPullDocRequest_DocDetails::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPullDocRequest_DocDetails::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIPullDocRequest_DocDetails::getUid() const {
    return m_uid;
}
void OAIPullDocRequest_DocDetails::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPullDocRequest_DocDetails::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPullDocRequest_DocDetails::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIPullDocRequest_DocDetails::getUri() const {
    return m_uri;
}
void OAIPullDocRequest_DocDetails::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPullDocRequest_DocDetails::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPullDocRequest_DocDetails::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPullDocRequest_DocDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digi_locker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullDocRequest_DocDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_digi_locker_id_isValid && m_full_name_isValid && m_uid_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
