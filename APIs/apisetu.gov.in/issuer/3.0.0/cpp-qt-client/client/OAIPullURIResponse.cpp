/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullURIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullURIResponse::OAIPullURIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullURIResponse::OAIPullURIResponse() {
    this->initializeModel();
}

OAIPullURIResponse::~OAIPullURIResponse() {}

void OAIPullURIResponse::initializeModel() {

    m_doc_details_isSet = false;
    m_doc_details_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;
}

void OAIPullURIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullURIResponse::fromJsonObject(QJsonObject json) {

    m_doc_details_isValid = ::OpenAPI::fromJsonValue(m_doc_details, json[QString("DocDetails")]);
    m_doc_details_isSet = !json[QString("DocDetails")].isNull() && m_doc_details_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("ResponseStatus")]);
    m_response_status_isSet = !json[QString("ResponseStatus")].isNull() && m_response_status_isValid;
}

QString OAIPullURIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullURIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_doc_details.isSet()) {
        obj.insert(QString("DocDetails"), ::OpenAPI::toJsonValue(m_doc_details));
    }
    if (m_response_status.isSet()) {
        obj.insert(QString("ResponseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    return obj;
}

OAIPullURIResponse_DocDetails OAIPullURIResponse::getDocDetails() const {
    return m_doc_details;
}
void OAIPullURIResponse::setDocDetails(const OAIPullURIResponse_DocDetails &doc_details) {
    m_doc_details = doc_details;
    m_doc_details_isSet = true;
}

bool OAIPullURIResponse::is_doc_details_Set() const{
    return m_doc_details_isSet;
}

bool OAIPullURIResponse::is_doc_details_Valid() const{
    return m_doc_details_isValid;
}

OAIPullURIResponse_ResponseStatus OAIPullURIResponse::getResponseStatus() const {
    return m_response_status;
}
void OAIPullURIResponse::setResponseStatus(const OAIPullURIResponse_ResponseStatus &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIPullURIResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIPullURIResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

bool OAIPullURIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doc_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullURIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_doc_details_isValid && m_response_status_isValid && true;
}

} // namespace OpenAPI
