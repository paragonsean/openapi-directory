/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullURIRequest_DocDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullURIRequest_DocDetails::OAIPullURIRequest_DocDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullURIRequest_DocDetails::OAIPullURIRequest_DocDetails() {
    this->initializeModel();
}

OAIPullURIRequest_DocDetails::~OAIPullURIRequest_DocDetails() {}

void OAIPullURIRequest_DocDetails::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_digi_locker_id_isSet = false;
    m_digi_locker_id_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_photo_isSet = false;
    m_photo_isValid = false;

    m_udf1_isSet = false;
    m_udf1_isValid = false;

    m_udf2_isSet = false;
    m_udf2_isValid = false;

    m_udf3_isSet = false;
    m_udf3_isValid = false;

    m_udfn_isSet = false;
    m_udfn_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIPullURIRequest_DocDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullURIRequest_DocDetails::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_digi_locker_id_isValid = ::OpenAPI::fromJsonValue(m_digi_locker_id, json[QString("DigiLockerId")]);
    m_digi_locker_id_isSet = !json[QString("DigiLockerId")].isNull() && m_digi_locker_id_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("DocType")]);
    m_doc_type_isSet = !json[QString("DocType")].isNull() && m_doc_type_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_photo_isValid = ::OpenAPI::fromJsonValue(m_photo, json[QString("Photo")]);
    m_photo_isSet = !json[QString("Photo")].isNull() && m_photo_isValid;

    m_udf1_isValid = ::OpenAPI::fromJsonValue(m_udf1, json[QString("UDF1")]);
    m_udf1_isSet = !json[QString("UDF1")].isNull() && m_udf1_isValid;

    m_udf2_isValid = ::OpenAPI::fromJsonValue(m_udf2, json[QString("UDF2")]);
    m_udf2_isSet = !json[QString("UDF2")].isNull() && m_udf2_isValid;

    m_udf3_isValid = ::OpenAPI::fromJsonValue(m_udf3, json[QString("UDF3")]);
    m_udf3_isSet = !json[QString("UDF3")].isNull() && m_udf3_isValid;

    m_udfn_isValid = ::OpenAPI::fromJsonValue(m_udfn, json[QString("UDFn")]);
    m_udfn_isSet = !json[QString("UDFn")].isNull() && m_udfn_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;
}

QString OAIPullURIRequest_DocDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullURIRequest_DocDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_dob.size() > 0) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_digi_locker_id.size() > 0) {
        obj.insert(QString("DigiLockerId"), ::OpenAPI::toJsonValue(m_digi_locker_id));
    }
    if (m_doc_type.size() > 0) {
        obj.insert(QString("DocType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_full_name.size() > 0) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_photo.size() > 0) {
        obj.insert(QString("Photo"), ::OpenAPI::toJsonValue(m_photo));
    }
    if (m_udf1.size() > 0) {
        obj.insert(QString("UDF1"), ::OpenAPI::toJsonValue(m_udf1));
    }
    if (m_udf2.size() > 0) {
        obj.insert(QString("UDF2"), ::OpenAPI::toJsonValue(m_udf2));
    }
    if (m_udf3.size() > 0) {
        obj.insert(QString("UDF3"), ::OpenAPI::toJsonValue(m_udf3));
    }
    if (m_udfn.size() > 0) {
        obj.insert(QString("UDFn"), ::OpenAPI::toJsonValue(m_udfn));
    }
    if (m_uid.size() > 0) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getDob() const {
    return m_dob;
}
void OAIPullURIRequest_DocDetails::setDob(const QList<QJsonValue> &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIPullURIRequest_DocDetails::is_dob_Valid() const{
    return m_dob_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getDigiLockerId() const {
    return m_digi_locker_id;
}
void OAIPullURIRequest_DocDetails::setDigiLockerId(const QList<QJsonValue> &digi_locker_id) {
    m_digi_locker_id = digi_locker_id;
    m_digi_locker_id_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_digi_locker_id_Set() const{
    return m_digi_locker_id_isSet;
}

bool OAIPullURIRequest_DocDetails::is_digi_locker_id_Valid() const{
    return m_digi_locker_id_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getDocType() const {
    return m_doc_type;
}
void OAIPullURIRequest_DocDetails::setDocType(const QList<QJsonValue> &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAIPullURIRequest_DocDetails::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getFullName() const {
    return m_full_name;
}
void OAIPullURIRequest_DocDetails::setFullName(const QList<QJsonValue> &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPullURIRequest_DocDetails::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getPhoto() const {
    return m_photo;
}
void OAIPullURIRequest_DocDetails::setPhoto(const QList<QJsonValue> &photo) {
    m_photo = photo;
    m_photo_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_photo_Set() const{
    return m_photo_isSet;
}

bool OAIPullURIRequest_DocDetails::is_photo_Valid() const{
    return m_photo_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getUdf1() const {
    return m_udf1;
}
void OAIPullURIRequest_DocDetails::setUdf1(const QList<QJsonValue> &udf1) {
    m_udf1 = udf1;
    m_udf1_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_udf1_Set() const{
    return m_udf1_isSet;
}

bool OAIPullURIRequest_DocDetails::is_udf1_Valid() const{
    return m_udf1_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getUdf2() const {
    return m_udf2;
}
void OAIPullURIRequest_DocDetails::setUdf2(const QList<QJsonValue> &udf2) {
    m_udf2 = udf2;
    m_udf2_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_udf2_Set() const{
    return m_udf2_isSet;
}

bool OAIPullURIRequest_DocDetails::is_udf2_Valid() const{
    return m_udf2_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getUdf3() const {
    return m_udf3;
}
void OAIPullURIRequest_DocDetails::setUdf3(const QList<QJsonValue> &udf3) {
    m_udf3 = udf3;
    m_udf3_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_udf3_Set() const{
    return m_udf3_isSet;
}

bool OAIPullURIRequest_DocDetails::is_udf3_Valid() const{
    return m_udf3_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getUdfn() const {
    return m_udfn;
}
void OAIPullURIRequest_DocDetails::setUdfn(const QList<QJsonValue> &udfn) {
    m_udfn = udfn;
    m_udfn_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_udfn_Set() const{
    return m_udfn_isSet;
}

bool OAIPullURIRequest_DocDetails::is_udfn_Valid() const{
    return m_udfn_isValid;
}

QList<QJsonValue> OAIPullURIRequest_DocDetails::getUid() const {
    return m_uid;
}
void OAIPullURIRequest_DocDetails::setUid(const QList<QJsonValue> &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPullURIRequest_DocDetails::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPullURIRequest_DocDetails::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIPullURIRequest_DocDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_digi_locker_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf1.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf2.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf3.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_udfn.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullURIRequest_DocDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_digi_locker_id_isValid && m_doc_type_isValid && m_full_name_isValid && m_photo_isValid && m_udf1_isValid && m_udf2_isValid && m_udf3_isValid && m_udfn_isValid && m_uid_isValid && true;
}

} // namespace OpenAPI
