/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullDocResponse_DocDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullDocResponse_DocDetails::OAIPullDocResponse_DocDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullDocResponse_DocDetails::OAIPullDocResponse_DocDetails() {
    this->initializeModel();
}

OAIPullDocResponse_DocDetails::~OAIPullDocResponse_DocDetails() {}

void OAIPullDocResponse_DocDetails::initializeModel() {

    m_data_content_isSet = false;
    m_data_content_isValid = false;

    m_doc_content_isSet = false;
    m_doc_content_isValid = false;
}

void OAIPullDocResponse_DocDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullDocResponse_DocDetails::fromJsonObject(QJsonObject json) {

    m_data_content_isValid = ::OpenAPI::fromJsonValue(m_data_content, json[QString("DataContent")]);
    m_data_content_isSet = !json[QString("DataContent")].isNull() && m_data_content_isValid;

    m_doc_content_isValid = ::OpenAPI::fromJsonValue(m_doc_content, json[QString("DocContent")]);
    m_doc_content_isSet = !json[QString("DocContent")].isNull() && m_doc_content_isValid;
}

QString OAIPullDocResponse_DocDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullDocResponse_DocDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_data_content_isSet) {
        obj.insert(QString("DataContent"), ::OpenAPI::toJsonValue(m_data_content));
    }
    if (m_doc_content_isSet) {
        obj.insert(QString("DocContent"), ::OpenAPI::toJsonValue(m_doc_content));
    }
    return obj;
}

QString OAIPullDocResponse_DocDetails::getDataContent() const {
    return m_data_content;
}
void OAIPullDocResponse_DocDetails::setDataContent(const QString &data_content) {
    m_data_content = data_content;
    m_data_content_isSet = true;
}

bool OAIPullDocResponse_DocDetails::is_data_content_Set() const{
    return m_data_content_isSet;
}

bool OAIPullDocResponse_DocDetails::is_data_content_Valid() const{
    return m_data_content_isValid;
}

QString OAIPullDocResponse_DocDetails::getDocContent() const {
    return m_doc_content;
}
void OAIPullDocResponse_DocDetails::setDocContent(const QString &doc_content) {
    m_doc_content = doc_content;
    m_doc_content_isSet = true;
}

bool OAIPullDocResponse_DocDetails::is_doc_content_Set() const{
    return m_doc_content_isSet;
}

bool OAIPullDocResponse_DocDetails::is_doc_content_Valid() const{
    return m_doc_content_isValid;
}

bool OAIPullDocResponse_DocDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullDocResponse_DocDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_content_isValid && m_doc_content_isValid && true;
}

} // namespace OpenAPI
