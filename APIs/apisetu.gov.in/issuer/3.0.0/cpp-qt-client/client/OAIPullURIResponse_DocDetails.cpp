/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullURIResponse_DocDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullURIResponse_DocDetails::OAIPullURIResponse_DocDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullURIResponse_DocDetails::OAIPullURIResponse_DocDetails() {
    this->initializeModel();
}

OAIPullURIResponse_DocDetails::~OAIPullURIResponse_DocDetails() {}

void OAIPullURIResponse_DocDetails::initializeModel() {

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_data_content_isSet = false;
    m_data_content_isValid = false;

    m_digi_locker_id_isSet = false;
    m_digi_locker_id_isValid = false;

    m_doc_content_isSet = false;
    m_doc_content_isValid = false;

    m_doc_type_isSet = false;
    m_doc_type_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_udf1_isSet = false;
    m_udf1_isValid = false;

    m_udf2_isSet = false;
    m_udf2_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPullURIResponse_DocDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullURIResponse_DocDetails::fromJsonObject(QJsonObject json) {

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_data_content_isValid = ::OpenAPI::fromJsonValue(m_data_content, json[QString("DataContent")]);
    m_data_content_isSet = !json[QString("DataContent")].isNull() && m_data_content_isValid;

    m_digi_locker_id_isValid = ::OpenAPI::fromJsonValue(m_digi_locker_id, json[QString("DigiLockerId")]);
    m_digi_locker_id_isSet = !json[QString("DigiLockerId")].isNull() && m_digi_locker_id_isValid;

    m_doc_content_isValid = ::OpenAPI::fromJsonValue(m_doc_content, json[QString("DocContent")]);
    m_doc_content_isSet = !json[QString("DocContent")].isNull() && m_doc_content_isValid;

    m_doc_type_isValid = ::OpenAPI::fromJsonValue(m_doc_type, json[QString("DocType")]);
    m_doc_type_isSet = !json[QString("DocType")].isNull() && m_doc_type_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_udf1_isValid = ::OpenAPI::fromJsonValue(m_udf1, json[QString("UDF1")]);
    m_udf1_isSet = !json[QString("UDF1")].isNull() && m_udf1_isValid;

    m_udf2_isValid = ::OpenAPI::fromJsonValue(m_udf2, json[QString("UDF2")]);
    m_udf2_isSet = !json[QString("UDF2")].isNull() && m_udf2_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("URI")]);
    m_uri_isSet = !json[QString("URI")].isNull() && m_uri_isValid;
}

QString OAIPullURIResponse_DocDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullURIResponse_DocDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_data_content_isSet) {
        obj.insert(QString("DataContent"), ::OpenAPI::toJsonValue(m_data_content));
    }
    if (m_digi_locker_id_isSet) {
        obj.insert(QString("DigiLockerId"), ::OpenAPI::toJsonValue(m_digi_locker_id));
    }
    if (m_doc_content_isSet) {
        obj.insert(QString("DocContent"), ::OpenAPI::toJsonValue(m_doc_content));
    }
    if (m_doc_type_isSet) {
        obj.insert(QString("DocType"), ::OpenAPI::toJsonValue(m_doc_type));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_udf1_isSet) {
        obj.insert(QString("UDF1"), ::OpenAPI::toJsonValue(m_udf1));
    }
    if (m_udf2_isSet) {
        obj.insert(QString("UDF2"), ::OpenAPI::toJsonValue(m_udf2));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_uri_isSet) {
        obj.insert(QString("URI"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIPullURIResponse_DocDetails::getDob() const {
    return m_dob;
}
void OAIPullURIResponse_DocDetails::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAIPullURIResponse_DocDetails::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAIPullURIResponse_DocDetails::getDataContent() const {
    return m_data_content;
}
void OAIPullURIResponse_DocDetails::setDataContent(const QString &data_content) {
    m_data_content = data_content;
    m_data_content_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_data_content_Set() const{
    return m_data_content_isSet;
}

bool OAIPullURIResponse_DocDetails::is_data_content_Valid() const{
    return m_data_content_isValid;
}

QString OAIPullURIResponse_DocDetails::getDigiLockerId() const {
    return m_digi_locker_id;
}
void OAIPullURIResponse_DocDetails::setDigiLockerId(const QString &digi_locker_id) {
    m_digi_locker_id = digi_locker_id;
    m_digi_locker_id_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_digi_locker_id_Set() const{
    return m_digi_locker_id_isSet;
}

bool OAIPullURIResponse_DocDetails::is_digi_locker_id_Valid() const{
    return m_digi_locker_id_isValid;
}

QString OAIPullURIResponse_DocDetails::getDocContent() const {
    return m_doc_content;
}
void OAIPullURIResponse_DocDetails::setDocContent(const QString &doc_content) {
    m_doc_content = doc_content;
    m_doc_content_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_doc_content_Set() const{
    return m_doc_content_isSet;
}

bool OAIPullURIResponse_DocDetails::is_doc_content_Valid() const{
    return m_doc_content_isValid;
}

QString OAIPullURIResponse_DocDetails::getDocType() const {
    return m_doc_type;
}
void OAIPullURIResponse_DocDetails::setDocType(const QString &doc_type) {
    m_doc_type = doc_type;
    m_doc_type_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_doc_type_Set() const{
    return m_doc_type_isSet;
}

bool OAIPullURIResponse_DocDetails::is_doc_type_Valid() const{
    return m_doc_type_isValid;
}

QString OAIPullURIResponse_DocDetails::getFullName() const {
    return m_full_name;
}
void OAIPullURIResponse_DocDetails::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIPullURIResponse_DocDetails::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIPullURIResponse_DocDetails::getUdf1() const {
    return m_udf1;
}
void OAIPullURIResponse_DocDetails::setUdf1(const QString &udf1) {
    m_udf1 = udf1;
    m_udf1_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_udf1_Set() const{
    return m_udf1_isSet;
}

bool OAIPullURIResponse_DocDetails::is_udf1_Valid() const{
    return m_udf1_isValid;
}

QString OAIPullURIResponse_DocDetails::getUdf2() const {
    return m_udf2;
}
void OAIPullURIResponse_DocDetails::setUdf2(const QString &udf2) {
    m_udf2 = udf2;
    m_udf2_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_udf2_Set() const{
    return m_udf2_isSet;
}

bool OAIPullURIResponse_DocDetails::is_udf2_Valid() const{
    return m_udf2_isValid;
}

QString OAIPullURIResponse_DocDetails::getUid() const {
    return m_uid;
}
void OAIPullURIResponse_DocDetails::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPullURIResponse_DocDetails::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIPullURIResponse_DocDetails::getUri() const {
    return m_uri;
}
void OAIPullURIResponse_DocDetails::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPullURIResponse_DocDetails::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPullURIResponse_DocDetails::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPullURIResponse_DocDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digi_locker_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_doc_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udf2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullURIResponse_DocDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dob_isValid && m_data_content_isValid && m_digi_locker_id_isValid && m_doc_content_isValid && m_doc_type_isValid && m_full_name_isValid && m_udf1_isValid && m_udf2_isValid && m_uid_isValid && m_uri_isValid && true;
}

} // namespace OpenAPI
