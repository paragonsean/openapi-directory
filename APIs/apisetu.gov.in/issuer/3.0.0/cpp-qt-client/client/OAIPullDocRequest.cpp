/**
 * DigiLocker Issuer APIs
 * This document provides detailed specification of the Digital Locker Pull APIs. The Pull model of integration with Digital Locker enables a Digital Locker user to search a document/certificate from issuer repository and fetch (pull) it into Digital Locker. The issuer departments can use these APIs for the documents that are not Aadhaar seeded. The issuer organization integrating with Digital Locker maintains the documents/certificates in its own repository (database or file system). The issuer application provides APIs to Digital Locker to access the documents in this repository. Each issuer organization will have to implement 2 APIs to integrate with the Digital Locker system.
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@digitallocker.gov.in
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullDocRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullDocRequest::OAIPullDocRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullDocRequest::OAIPullDocRequest() {
    this->initializeModel();
}

OAIPullDocRequest::~OAIPullDocRequest() {}

void OAIPullDocRequest::initializeModel() {

    m_doc_details_isSet = false;
    m_doc_details_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_txn_isSet = false;
    m_txn_isValid = false;

    m_ver_isSet = false;
    m_ver_isValid = false;
}

void OAIPullDocRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullDocRequest::fromJsonObject(QJsonObject json) {

    m_doc_details_isValid = ::OpenAPI::fromJsonValue(m_doc_details, json[QString("DocDetails")]);
    m_doc_details_isSet = !json[QString("DocDetails")].isNull() && m_doc_details_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgId")]);
    m_org_id_isSet = !json[QString("orgId")].isNull() && m_org_id_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_txn_isValid = ::OpenAPI::fromJsonValue(m_txn, json[QString("txn")]);
    m_txn_isSet = !json[QString("txn")].isNull() && m_txn_isValid;

    m_ver_isValid = ::OpenAPI::fromJsonValue(m_ver, json[QString("ver")]);
    m_ver_isSet = !json[QString("ver")].isNull() && m_ver_isValid;
}

QString OAIPullDocRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullDocRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_doc_details.isSet()) {
        obj.insert(QString("DocDetails"), ::OpenAPI::toJsonValue(m_doc_details));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("orgId"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_txn_isSet) {
        obj.insert(QString("txn"), ::OpenAPI::toJsonValue(m_txn));
    }
    if (m_ver_isSet) {
        obj.insert(QString("ver"), ::OpenAPI::toJsonValue(m_ver));
    }
    return obj;
}

OAIPullDocRequest_DocDetails OAIPullDocRequest::getDocDetails() const {
    return m_doc_details;
}
void OAIPullDocRequest::setDocDetails(const OAIPullDocRequest_DocDetails &doc_details) {
    m_doc_details = doc_details;
    m_doc_details_isSet = true;
}

bool OAIPullDocRequest::is_doc_details_Set() const{
    return m_doc_details_isSet;
}

bool OAIPullDocRequest::is_doc_details_Valid() const{
    return m_doc_details_isValid;
}

QString OAIPullDocRequest::getFormat() const {
    return m_format;
}
void OAIPullDocRequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIPullDocRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAIPullDocRequest::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIPullDocRequest::getOrgId() const {
    return m_org_id;
}
void OAIPullDocRequest::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIPullDocRequest::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIPullDocRequest::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIPullDocRequest::getTs() const {
    return m_ts;
}
void OAIPullDocRequest::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIPullDocRequest::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIPullDocRequest::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIPullDocRequest::getTxn() const {
    return m_txn;
}
void OAIPullDocRequest::setTxn(const QString &txn) {
    m_txn = txn;
    m_txn_isSet = true;
}

bool OAIPullDocRequest::is_txn_Set() const{
    return m_txn_isSet;
}

bool OAIPullDocRequest::is_txn_Valid() const{
    return m_txn_isValid;
}

QString OAIPullDocRequest::getVer() const {
    return m_ver;
}
void OAIPullDocRequest::setVer(const QString &ver) {
    m_ver = ver;
    m_ver_isSet = true;
}

bool OAIPullDocRequest::is_ver_Set() const{
    return m_ver_isSet;
}

bool OAIPullDocRequest::is_ver_Valid() const{
    return m_ver_isValid;
}

bool OAIPullDocRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_doc_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ver_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullDocRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_doc_details_isValid && m_format_isValid && m_org_id_isValid && m_ts_isValid && m_txn_isValid && m_ver_isValid && true;
}

} // namespace OpenAPI
