/**
 * Transport Department, Sikkim
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcademicCertificateSchemaCertificateDataExamination from './AcademicCertificateSchemaCertificateDataExamination';
import AcademicCertificateSchemaCertificateDataPerformance from './AcademicCertificateSchemaCertificateDataPerformance';
import AcademicCertificateSchemaCertificateDataSchool from './AcademicCertificateSchemaCertificateDataSchool';

/**
 * The AcademicCertificateSchemaCertificateData model module.
 * @module model/AcademicCertificateSchemaCertificateData
 * @version 3.0.0
 */
class AcademicCertificateSchemaCertificateData {
    /**
     * Constructs a new <code>AcademicCertificateSchemaCertificateData</code>.
     * @alias module:model/AcademicCertificateSchemaCertificateData
     * @param examination {module:model/AcademicCertificateSchemaCertificateDataExamination} 
     * @param performance {module:model/AcademicCertificateSchemaCertificateDataPerformance} 
     * @param school {module:model/AcademicCertificateSchemaCertificateDataSchool} 
     */
    constructor(examination, performance, school) { 
        
        AcademicCertificateSchemaCertificateData.initialize(this, examination, performance, school);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, examination, performance, school) { 
        obj['Examination'] = examination;
        obj['Performance'] = performance;
        obj['School'] = school;
    }

    /**
     * Constructs a <code>AcademicCertificateSchemaCertificateData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcademicCertificateSchemaCertificateData} obj Optional instance to populate.
     * @return {module:model/AcademicCertificateSchemaCertificateData} The populated <code>AcademicCertificateSchemaCertificateData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcademicCertificateSchemaCertificateData();

            if (data.hasOwnProperty('Examination')) {
                obj['Examination'] = AcademicCertificateSchemaCertificateDataExamination.constructFromObject(data['Examination']);
            }
            if (data.hasOwnProperty('Performance')) {
                obj['Performance'] = AcademicCertificateSchemaCertificateDataPerformance.constructFromObject(data['Performance']);
            }
            if (data.hasOwnProperty('School')) {
                obj['School'] = AcademicCertificateSchemaCertificateDataSchool.constructFromObject(data['School']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcademicCertificateSchemaCertificateData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcademicCertificateSchemaCertificateData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcademicCertificateSchemaCertificateData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Examination`
        if (data['Examination']) { // data not null
          AcademicCertificateSchemaCertificateDataExamination.validateJSON(data['Examination']);
        }
        // validate the optional field `Performance`
        if (data['Performance']) { // data not null
          AcademicCertificateSchemaCertificateDataPerformance.validateJSON(data['Performance']);
        }
        // validate the optional field `School`
        if (data['School']) { // data not null
          AcademicCertificateSchemaCertificateDataSchool.validateJSON(data['School']);
        }

        return true;
    }


}

AcademicCertificateSchemaCertificateData.RequiredProperties = ["Examination", "Performance", "School"];

/**
 * @member {module:model/AcademicCertificateSchemaCertificateDataExamination} Examination
 */
AcademicCertificateSchemaCertificateData.prototype['Examination'] = undefined;

/**
 * @member {module:model/AcademicCertificateSchemaCertificateDataPerformance} Performance
 */
AcademicCertificateSchemaCertificateData.prototype['Performance'] = undefined;

/**
 * @member {module:model/AcademicCertificateSchemaCertificateDataSchool} School
 */
AcademicCertificateSchemaCertificateData.prototype['School'] = undefined;






export default AcademicCertificateSchemaCertificateData;

