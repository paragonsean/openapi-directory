# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HvcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, full_name: str=None, roll: str=None, yop: str=None):
        """HvcerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this HvcerRequestCertificateParameters.
        :param full_name: The full_name of this HvcerRequestCertificateParameters.
        :param roll: The roll of this HvcerRequestCertificateParameters.
        :param yop: The yop of this HvcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'full_name': str,
            'roll': str,
            'yop': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'full_name': 'FullName',
            'roll': 'ROLL',
            'yop': 'YOP'
        }

        self._dob = dob
        self._full_name = full_name
        self._roll = roll
        self._yop = yop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HvcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hvcer_request_certificateParameters of this HvcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this HvcerRequestCertificateParameters.

        Date of Birth

        :return: The dob of this HvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this HvcerRequestCertificateParameters.

        Date of Birth

        :param dob: The dob of this HvcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this HvcerRequestCertificateParameters.

        Full name

        :return: The full_name of this HvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this HvcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this HvcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def roll(self):
        """Gets the roll of this HvcerRequestCertificateParameters.

        Roll No.

        :return: The roll of this HvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this HvcerRequestCertificateParameters.

        Roll No.

        :param roll: The roll of this HvcerRequestCertificateParameters.
        :type roll: str
        """
        if roll is None:
            raise ValueError("Invalid value for `roll`, must not be `None`")

        self._roll = roll

    @property
    def yop(self):
        """Gets the yop of this HvcerRequestCertificateParameters.

        Year of Passing

        :return: The yop of this HvcerRequestCertificateParameters.
        :rtype: str
        """
        return self._yop

    @yop.setter
    def yop(self, yop):
        """Sets the yop of this HvcerRequestCertificateParameters.

        Year of Passing

        :param yop: The yop of this HvcerRequestCertificateParameters.
        :type yop: str
        """
        if yop is None:
            raise ValueError("Invalid value for `yop`, must not be `None`")

        self._yop = yop
