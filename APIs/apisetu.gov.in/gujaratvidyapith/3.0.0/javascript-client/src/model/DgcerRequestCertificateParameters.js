/**
 * Gujarat Vidyapith, Ahmedabad
 * Gujarat Vidyapith, Ahmedabad (http://www.gujaratvidyapith.org/) is issuing Degree certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently, data for the year 2019 is made available by Gujarat Vidyapith.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DgcerRequestCertificateParameters model module.
 * @module model/DgcerRequestCertificateParameters
 * @version 3.0.0
 */
class DgcerRequestCertificateParameters {
    /**
     * Constructs a new <code>DgcerRequestCertificateParameters</code>.
     * @alias module:model/DgcerRequestCertificateParameters
     * @param CNAME {String} CANDIDATE NAME
     * @param REGNO {String} REGN NO
     * @param RROLL {String} ROLL NO
     * @param YEAR {String} YEAR
     */
    constructor(CNAME, REGNO, RROLL, YEAR) { 
        
        DgcerRequestCertificateParameters.initialize(this, CNAME, REGNO, RROLL, YEAR);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, CNAME, REGNO, RROLL, YEAR) { 
        obj['CNAME'] = CNAME;
        obj['REGNO'] = REGNO;
        obj['RROLL'] = RROLL;
        obj['YEAR'] = YEAR;
    }

    /**
     * Constructs a <code>DgcerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DgcerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/DgcerRequestCertificateParameters} The populated <code>DgcerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DgcerRequestCertificateParameters();

            if (data.hasOwnProperty('CNAME')) {
                obj['CNAME'] = ApiClient.convertToType(data['CNAME'], 'String');
            }
            if (data.hasOwnProperty('REGNO')) {
                obj['REGNO'] = ApiClient.convertToType(data['REGNO'], 'String');
            }
            if (data.hasOwnProperty('RROLL')) {
                obj['RROLL'] = ApiClient.convertToType(data['RROLL'], 'String');
            }
            if (data.hasOwnProperty('YEAR')) {
                obj['YEAR'] = ApiClient.convertToType(data['YEAR'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DgcerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DgcerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DgcerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CNAME'] && !(typeof data['CNAME'] === 'string' || data['CNAME'] instanceof String)) {
            throw new Error("Expected the field `CNAME` to be a primitive type in the JSON string but got " + data['CNAME']);
        }
        // ensure the json data is a string
        if (data['REGNO'] && !(typeof data['REGNO'] === 'string' || data['REGNO'] instanceof String)) {
            throw new Error("Expected the field `REGNO` to be a primitive type in the JSON string but got " + data['REGNO']);
        }
        // ensure the json data is a string
        if (data['RROLL'] && !(typeof data['RROLL'] === 'string' || data['RROLL'] instanceof String)) {
            throw new Error("Expected the field `RROLL` to be a primitive type in the JSON string but got " + data['RROLL']);
        }
        // ensure the json data is a string
        if (data['YEAR'] && !(typeof data['YEAR'] === 'string' || data['YEAR'] instanceof String)) {
            throw new Error("Expected the field `YEAR` to be a primitive type in the JSON string but got " + data['YEAR']);
        }

        return true;
    }


}

DgcerRequestCertificateParameters.RequiredProperties = ["CNAME", "REGNO", "RROLL", "YEAR"];

/**
 * CANDIDATE NAME
 * @member {String} CNAME
 */
DgcerRequestCertificateParameters.prototype['CNAME'] = undefined;

/**
 * REGN NO
 * @member {String} REGNO
 */
DgcerRequestCertificateParameters.prototype['REGNO'] = undefined;

/**
 * ROLL NO
 * @member {String} RROLL
 */
DgcerRequestCertificateParameters.prototype['RROLL'] = undefined;

/**
 * YEAR
 * @member {String} YEAR
 */
DgcerRequestCertificateParameters.prototype['YEAR'] = undefined;






export default DgcerRequestCertificateParameters;

