/**
 * eDistrict Kerala, Kerala
 * eDistrict Kerala (https://edistrict.kerala.gov.in/) is the online service delivery portal for Kerala State Govt. Certain documents issued by it (e.g. Residence, Income, Caste Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICmcer_400_response.h"
#include "OAICmcer_401_response.h"
#include "OAICmcer_404_response.h"
#include "OAICmcer_500_response.h"
#include "OAICmcer_502_response.h"
#include "OAICmcer_503_response.h"
#include "OAICmcer_504_response.h"
#include "OAICmcer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void cmcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void cncer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void ctcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void dmcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void dpcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void dscer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void fmcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void idcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void imcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void lfcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void lhcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void locer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void mncer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void nrcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void ntcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void oscer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void pncer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void pscer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void rlcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void rscer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void slcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void vlcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());

    /**
    * @param[in]  oai_cmcer_request OAICmcer_request [optional]
    */
    virtual void wwcer(const ::OpenAPI::OptionalParam<OAICmcer_request> &oai_cmcer_request = ::OpenAPI::OptionalParam<OAICmcer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cmcerCallback(OAIHttpRequestWorker *worker);
    void cncerCallback(OAIHttpRequestWorker *worker);
    void ctcerCallback(OAIHttpRequestWorker *worker);
    void dmcerCallback(OAIHttpRequestWorker *worker);
    void dpcerCallback(OAIHttpRequestWorker *worker);
    void dscerCallback(OAIHttpRequestWorker *worker);
    void fmcerCallback(OAIHttpRequestWorker *worker);
    void idcerCallback(OAIHttpRequestWorker *worker);
    void imcerCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);
    void lfcerCallback(OAIHttpRequestWorker *worker);
    void lhcerCallback(OAIHttpRequestWorker *worker);
    void locerCallback(OAIHttpRequestWorker *worker);
    void mncerCallback(OAIHttpRequestWorker *worker);
    void nrcerCallback(OAIHttpRequestWorker *worker);
    void ntcerCallback(OAIHttpRequestWorker *worker);
    void oscerCallback(OAIHttpRequestWorker *worker);
    void pncerCallback(OAIHttpRequestWorker *worker);
    void pscerCallback(OAIHttpRequestWorker *worker);
    void rlcerCallback(OAIHttpRequestWorker *worker);
    void rscerCallback(OAIHttpRequestWorker *worker);
    void slcerCallback(OAIHttpRequestWorker *worker);
    void vlcerCallback(OAIHttpRequestWorker *worker);
    void wwcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cmcerSignal();
    void cncerSignal();
    void ctcerSignal();
    void dmcerSignal();
    void dpcerSignal();
    void dscerSignal();
    void fmcerSignal();
    void idcerSignal();
    void imcerSignal();
    void incerSignal();
    void lfcerSignal();
    void lhcerSignal();
    void locerSignal();
    void mncerSignal();
    void nrcerSignal();
    void ntcerSignal();
    void oscerSignal();
    void pncerSignal();
    void pscerSignal();
    void rlcerSignal();
    void rscerSignal();
    void slcerSignal();
    void vlcerSignal();
    void wwcerSignal();


    void cmcerSignalFull(OAIHttpRequestWorker *worker);
    void cncerSignalFull(OAIHttpRequestWorker *worker);
    void ctcerSignalFull(OAIHttpRequestWorker *worker);
    void dmcerSignalFull(OAIHttpRequestWorker *worker);
    void dpcerSignalFull(OAIHttpRequestWorker *worker);
    void dscerSignalFull(OAIHttpRequestWorker *worker);
    void fmcerSignalFull(OAIHttpRequestWorker *worker);
    void idcerSignalFull(OAIHttpRequestWorker *worker);
    void imcerSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);
    void lfcerSignalFull(OAIHttpRequestWorker *worker);
    void lhcerSignalFull(OAIHttpRequestWorker *worker);
    void locerSignalFull(OAIHttpRequestWorker *worker);
    void mncerSignalFull(OAIHttpRequestWorker *worker);
    void nrcerSignalFull(OAIHttpRequestWorker *worker);
    void ntcerSignalFull(OAIHttpRequestWorker *worker);
    void oscerSignalFull(OAIHttpRequestWorker *worker);
    void pncerSignalFull(OAIHttpRequestWorker *worker);
    void pscerSignalFull(OAIHttpRequestWorker *worker);
    void rlcerSignalFull(OAIHttpRequestWorker *worker);
    void rscerSignalFull(OAIHttpRequestWorker *worker);
    void slcerSignalFull(OAIHttpRequestWorker *worker);
    void vlcerSignalFull(OAIHttpRequestWorker *worker);
    void wwcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use cmcerSignalError() instead")
    void cmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cncerSignalError() instead")
    void cncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ctcerSignalError() instead")
    void ctcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ctcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalError() instead")
    void dmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalError() instead")
    void dpcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscerSignalError() instead")
    void dscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fmcerSignalError() instead")
    void fmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idcerSignalError() instead")
    void idcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void idcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imcerSignalError() instead")
    void imcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lfcerSignalError() instead")
    void lfcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lfcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalError() instead")
    void lhcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locerSignalError() instead")
    void locerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void locerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalError() instead")
    void mncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nrcerSignalError() instead")
    void nrcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nrcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntcerSignalError() instead")
    void ntcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ntcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oscerSignalError() instead")
    void oscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void oscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pncerSignalError() instead")
    void pncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pscerSignalError() instead")
    void pscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rlcerSignalError() instead")
    void rlcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rlcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalError() instead")
    void rscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slcerSignalError() instead")
    void slcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void slcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vlcerSignalError() instead")
    void vlcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vlcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wwcerSignalError() instead")
    void wwcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wwcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cmcerSignalErrorFull() instead")
    void cmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cncerSignalErrorFull() instead")
    void cncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ctcerSignalErrorFull() instead")
    void ctcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ctcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalErrorFull() instead")
    void dmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalErrorFull() instead")
    void dpcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dscerSignalErrorFull() instead")
    void dscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fmcerSignalErrorFull() instead")
    void fmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idcerSignalErrorFull() instead")
    void idcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imcerSignalErrorFull() instead")
    void imcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lfcerSignalErrorFull() instead")
    void lfcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lfcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalErrorFull() instead")
    void lhcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locerSignalErrorFull() instead")
    void locerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalErrorFull() instead")
    void mncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nrcerSignalErrorFull() instead")
    void nrcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nrcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ntcerSignalErrorFull() instead")
    void ntcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ntcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use oscerSignalErrorFull() instead")
    void oscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void oscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pncerSignalErrorFull() instead")
    void pncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pscerSignalErrorFull() instead")
    void pscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rlcerSignalErrorFull() instead")
    void rlcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rlcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalErrorFull() instead")
    void rscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use slcerSignalErrorFull() instead")
    void slcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void slcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vlcerSignalErrorFull() instead")
    void vlcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vlcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wwcerSignalErrorFull() instead")
    void wwcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wwcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
