/*
 * eDistrict Kerala, Kerala
 * eDistrict Kerala (https://edistrict.kerala.gov.in/) is the online service delivery portal for Kerala State Govt. Certain documents issued by it (e.g. Residence, Income, Caste Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CmcerRequestCertificateParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:38:02.842214-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CmcerRequestCertificateParameters {
  public static final String SERIALIZED_NAME_APLNO = "aplno";
  @SerializedName(SERIALIZED_NAME_APLNO)
  private String aplno;

  public static final String SERIALIZED_NAME_CERTNO = "certno";
  @SerializedName(SERIALIZED_NAME_CERTNO)
  private String certno;

  public static final String SERIALIZED_NAME_SCCD = "sccd";
  @SerializedName(SERIALIZED_NAME_SCCD)
  private String sccd;

  public CmcerRequestCertificateParameters() {
  }

  public CmcerRequestCertificateParameters aplno(String aplno) {
    this.aplno = aplno;
    return this;
  }

  /**
   * Application Number
   * @return aplno
   */
  @javax.annotation.Nonnull
  public String getAplno() {
    return aplno;
  }

  public void setAplno(String aplno) {
    this.aplno = aplno;
  }


  public CmcerRequestCertificateParameters certno(String certno) {
    this.certno = certno;
    return this;
  }

  /**
   * Certificate Number
   * @return certno
   */
  @javax.annotation.Nonnull
  public String getCertno() {
    return certno;
  }

  public void setCertno(String certno) {
    this.certno = certno;
  }


  public CmcerRequestCertificateParameters sccd(String sccd) {
    this.sccd = sccd;
    return this;
  }

  /**
   * Security Code
   * @return sccd
   */
  @javax.annotation.Nonnull
  public String getSccd() {
    return sccd;
  }

  public void setSccd(String sccd) {
    this.sccd = sccd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CmcerRequestCertificateParameters cmcerRequestCertificateParameters = (CmcerRequestCertificateParameters) o;
    return Objects.equals(this.aplno, cmcerRequestCertificateParameters.aplno) &&
        Objects.equals(this.certno, cmcerRequestCertificateParameters.certno) &&
        Objects.equals(this.sccd, cmcerRequestCertificateParameters.sccd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aplno, certno, sccd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CmcerRequestCertificateParameters {\n");
    sb.append("    aplno: ").append(toIndentedString(aplno)).append("\n");
    sb.append("    certno: ").append(toIndentedString(certno)).append("\n");
    sb.append("    sccd: ").append(toIndentedString(sccd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aplno");
    openapiFields.add("certno");
    openapiFields.add("sccd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aplno");
    openapiRequiredFields.add("certno");
    openapiRequiredFields.add("sccd");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CmcerRequestCertificateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CmcerRequestCertificateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CmcerRequestCertificateParameters is not found in the empty JSON string", CmcerRequestCertificateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CmcerRequestCertificateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CmcerRequestCertificateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CmcerRequestCertificateParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aplno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aplno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aplno").toString()));
      }
      if (!jsonObj.get("certno").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certno` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certno").toString()));
      }
      if (!jsonObj.get("sccd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sccd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sccd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CmcerRequestCertificateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CmcerRequestCertificateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CmcerRequestCertificateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CmcerRequestCertificateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CmcerRequestCertificateParameters>() {
           @Override
           public void write(JsonWriter out, CmcerRequestCertificateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CmcerRequestCertificateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CmcerRequestCertificateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CmcerRequestCertificateParameters
   * @throws IOException if the JSON string is invalid with respect to CmcerRequestCertificateParameters
   */
  public static CmcerRequestCertificateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CmcerRequestCertificateParameters.class);
  }

  /**
   * Convert an instance of CmcerRequestCertificateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

