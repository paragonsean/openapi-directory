/**
 * eDistrict Kerala, Kerala
 * eDistrict Kerala (https://edistrict.kerala.gov.in/) is the online service delivery portal for Kerala State Govt. Certain documents issued by it (e.g. Residence, Income, Caste Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cmcer400Response from '../model/Cmcer400Response';
import Cmcer401Response from '../model/Cmcer401Response';
import Cmcer404Response from '../model/Cmcer404Response';
import Cmcer500Response from '../model/Cmcer500Response';
import Cmcer502Response from '../model/Cmcer502Response';
import Cmcer503Response from '../model/Cmcer503Response';
import Cmcer504Response from '../model/Cmcer504Response';
import CmcerRequest from '../model/CmcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cmcer operation.
     * @callback module:api/APIsApi~cmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Community Certificate
     * API to verify Community Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~cmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cncer operation.
     * @callback module:api/APIsApi~cncerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conversion Certificate
     * API to verify Conversion Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~cncerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cncer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cncer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ctcer operation.
     * @callback module:api/APIsApi~ctcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Caste Certificate
     * API to verify Caste Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~ctcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ctcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ctcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dmcer operation.
     * @callback module:api/APIsApi~dmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domicile Certificate
     * API to verify Domicile Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~dmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpcer operation.
     * @callback module:api/APIsApi~dpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dependency Certificate
     * API to verify Dependency Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~dpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dscer operation.
     * @callback module:api/APIsApi~dscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Destitute Certificate
     * API to verify Destitute Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~dscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fmcer operation.
     * @callback module:api/APIsApi~fmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Family Membership Certificate
     * API to verify Family Membership Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~fmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/fmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the idcer operation.
     * @callback module:api/APIsApi~idcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Identification Certificate
     * API to verify Identification Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~idcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    idcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/idcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imcer operation.
     * @callback module:api/APIsApi~imcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inter-Caste Marriage Certificate
     * API to verify Inter-Caste Marriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~imcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    imcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/imcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lfcer operation.
     * @callback module:api/APIsApi~lfcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Life Certificate
     * API to verify Life Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~lfcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lfcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lfcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lhcer operation.
     * @callback module:api/APIsApi~lhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legal Heir Certificate
     * API to verify Legal Heir Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~lhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locer operation.
     * @callback module:api/APIsApi~locerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Location Certificate
     * API to verify Location Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~locerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    locer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/locer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mncer operation.
     * @callback module:api/APIsApi~mncerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Minority Certificate
     * API to verify Minority Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~mncerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mncer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mncer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nrcer operation.
     * @callback module:api/APIsApi~nrcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Non-Remarriage Certificate
     * API to verify Non-Remarriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~nrcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    nrcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/nrcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ntcer operation.
     * @callback module:api/APIsApi~ntcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Nativity Certificate
     * API to verify Nativity Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~ntcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ntcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ntcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the oscer operation.
     * @callback module:api/APIsApi~oscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * One and the Same Certificate
     * API to verify One and the Same Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~oscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    oscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/oscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pncer operation.
     * @callback module:api/APIsApi~pncerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Possession and Non-Attachment Certificate
     * API to verify Possession and Non-Attachment Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~pncerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pncer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pncer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pscer operation.
     * @callback module:api/APIsApi~pscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Possession Certificate
     * API to verify Possession Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~pscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rlcer operation.
     * @callback module:api/APIsApi~rlcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Relationship Certificate
     * API to verify Relationship Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~rlcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rlcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rlcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rscer operation.
     * @callback module:api/APIsApi~rscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Residence Certificate
     * API to verify Residence Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~rscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slcer operation.
     * @callback module:api/APIsApi~slcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Solvency Certificate
     * API to verify Solvency Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~slcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    slcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/slcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vlcer operation.
     * @callback module:api/APIsApi~vlcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Valuation Certificate
     * API to verify Valuation Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~vlcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vlcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/vlcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wwcer operation.
     * @callback module:api/APIsApi~wwcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Widow-Widower Certificate
     * API to verify Widow-Widower Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CmcerRequest} [cmcerRequest] Request format
     * @param {module:api/APIsApi~wwcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    wwcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['cmcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/wwcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
