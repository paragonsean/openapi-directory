/**
 * eDistrict Kerala, Kerala
 * eDistrict Kerala (https://edistrict.kerala.gov.in/) is the online service delivery portal for Kerala State Govt. Certain documents issued by it (e.g. Residence, Income, Caste Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EDistrictKeralaKerala);
  }
}(this, function(expect, EDistrictKeralaKerala) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EDistrictKeralaKerala.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('cmcer', function() {
      it('should call cmcer successfully', function(done) {
        //uncomment below and update the code to test cmcer
        //instance.cmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cncer', function() {
      it('should call cncer successfully', function(done) {
        //uncomment below and update the code to test cncer
        //instance.cncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ctcer', function() {
      it('should call ctcer successfully', function(done) {
        //uncomment below and update the code to test ctcer
        //instance.ctcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dmcer', function() {
      it('should call dmcer successfully', function(done) {
        //uncomment below and update the code to test dmcer
        //instance.dmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dpcer', function() {
      it('should call dpcer successfully', function(done) {
        //uncomment below and update the code to test dpcer
        //instance.dpcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dscer', function() {
      it('should call dscer successfully', function(done) {
        //uncomment below and update the code to test dscer
        //instance.dscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fmcer', function() {
      it('should call fmcer successfully', function(done) {
        //uncomment below and update the code to test fmcer
        //instance.fmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('idcer', function() {
      it('should call idcer successfully', function(done) {
        //uncomment below and update the code to test idcer
        //instance.idcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('imcer', function() {
      it('should call imcer successfully', function(done) {
        //uncomment below and update the code to test imcer
        //instance.imcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incer', function() {
      it('should call incer successfully', function(done) {
        //uncomment below and update the code to test incer
        //instance.incer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lfcer', function() {
      it('should call lfcer successfully', function(done) {
        //uncomment below and update the code to test lfcer
        //instance.lfcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lhcer', function() {
      it('should call lhcer successfully', function(done) {
        //uncomment below and update the code to test lhcer
        //instance.lhcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('locer', function() {
      it('should call locer successfully', function(done) {
        //uncomment below and update the code to test locer
        //instance.locer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mncer', function() {
      it('should call mncer successfully', function(done) {
        //uncomment below and update the code to test mncer
        //instance.mncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('nrcer', function() {
      it('should call nrcer successfully', function(done) {
        //uncomment below and update the code to test nrcer
        //instance.nrcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ntcer', function() {
      it('should call ntcer successfully', function(done) {
        //uncomment below and update the code to test ntcer
        //instance.ntcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('oscer', function() {
      it('should call oscer successfully', function(done) {
        //uncomment below and update the code to test oscer
        //instance.oscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pncer', function() {
      it('should call pncer successfully', function(done) {
        //uncomment below and update the code to test pncer
        //instance.pncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pscer', function() {
      it('should call pscer successfully', function(done) {
        //uncomment below and update the code to test pscer
        //instance.pscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rlcer', function() {
      it('should call rlcer successfully', function(done) {
        //uncomment below and update the code to test rlcer
        //instance.rlcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rscer', function() {
      it('should call rscer successfully', function(done) {
        //uncomment below and update the code to test rscer
        //instance.rscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('slcer', function() {
      it('should call slcer successfully', function(done) {
        //uncomment below and update the code to test slcer
        //instance.slcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vlcer', function() {
      it('should call vlcer successfully', function(done) {
        //uncomment below and update the code to test vlcer
        //instance.vlcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('wwcer', function() {
      it('should call wwcer successfully', function(done) {
        //uncomment below and update the code to test wwcer
        //instance.wwcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
