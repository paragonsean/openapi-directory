# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.academic_certificate_schema_issued_to_person_address import AcademicCertificateSchemaIssuedToPersonAddress
from openapi_server.models.academic_certificate_schema_issued_to_person_photo import AcademicCertificateSchemaIssuedToPersonPhoto
from openapi_server import util


class CasteCertificateSchemaIssuedToPerson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AcademicCertificateSchemaIssuedToPersonAddress=None, photo: AcademicCertificateSchemaIssuedToPersonPhoto=None, dob: str=None, email: str=None, gender: str=None, marital_status: str=None, name: str=None, phone: str=None, religion: str=None, swd: str=None, swd_indicator: str=None, title: str=None, uid: str=None):
        """CasteCertificateSchemaIssuedToPerson - a model defined in OpenAPI

        :param address: The address of this CasteCertificateSchemaIssuedToPerson.
        :param photo: The photo of this CasteCertificateSchemaIssuedToPerson.
        :param dob: The dob of this CasteCertificateSchemaIssuedToPerson.
        :param email: The email of this CasteCertificateSchemaIssuedToPerson.
        :param gender: The gender of this CasteCertificateSchemaIssuedToPerson.
        :param marital_status: The marital_status of this CasteCertificateSchemaIssuedToPerson.
        :param name: The name of this CasteCertificateSchemaIssuedToPerson.
        :param phone: The phone of this CasteCertificateSchemaIssuedToPerson.
        :param religion: The religion of this CasteCertificateSchemaIssuedToPerson.
        :param swd: The swd of this CasteCertificateSchemaIssuedToPerson.
        :param swd_indicator: The swd_indicator of this CasteCertificateSchemaIssuedToPerson.
        :param title: The title of this CasteCertificateSchemaIssuedToPerson.
        :param uid: The uid of this CasteCertificateSchemaIssuedToPerson.
        """
        self.openapi_types = {
            'address': AcademicCertificateSchemaIssuedToPersonAddress,
            'photo': AcademicCertificateSchemaIssuedToPersonPhoto,
            'dob': str,
            'email': str,
            'gender': str,
            'marital_status': str,
            'name': str,
            'phone': str,
            'religion': str,
            'swd': str,
            'swd_indicator': str,
            'title': str,
            'uid': str
        }

        self.attribute_map = {
            'address': 'Address',
            'photo': 'Photo',
            'dob': 'dob',
            'email': 'email',
            'gender': 'gender',
            'marital_status': 'maritalStatus',
            'name': 'name',
            'phone': 'phone',
            'religion': 'religion',
            'swd': 'swd',
            'swd_indicator': 'swdIndicator',
            'title': 'title',
            'uid': 'uid'
        }

        self._address = address
        self._photo = photo
        self._dob = dob
        self._email = email
        self._gender = gender
        self._marital_status = marital_status
        self._name = name
        self._phone = phone
        self._religion = religion
        self._swd = swd
        self._swd_indicator = swd_indicator
        self._title = title
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CasteCertificateSchemaIssuedToPerson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CasteCertificateSchema_IssuedTo_Person of this CasteCertificateSchemaIssuedToPerson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CasteCertificateSchemaIssuedToPerson.


        :return: The address of this CasteCertificateSchemaIssuedToPerson.
        :rtype: AcademicCertificateSchemaIssuedToPersonAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CasteCertificateSchemaIssuedToPerson.


        :param address: The address of this CasteCertificateSchemaIssuedToPerson.
        :type address: AcademicCertificateSchemaIssuedToPersonAddress
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def photo(self):
        """Gets the photo of this CasteCertificateSchemaIssuedToPerson.


        :return: The photo of this CasteCertificateSchemaIssuedToPerson.
        :rtype: AcademicCertificateSchemaIssuedToPersonPhoto
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this CasteCertificateSchemaIssuedToPerson.


        :param photo: The photo of this CasteCertificateSchemaIssuedToPerson.
        :type photo: AcademicCertificateSchemaIssuedToPersonPhoto
        """
        if photo is None:
            raise ValueError("Invalid value for `photo`, must not be `None`")

        self._photo = photo

    @property
    def dob(self):
        """Gets the dob of this CasteCertificateSchemaIssuedToPerson.


        :return: The dob of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this CasteCertificateSchemaIssuedToPerson.


        :param dob: The dob of this CasteCertificateSchemaIssuedToPerson.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")
        if dob is not None and len(dob) < 1:
            raise ValueError("Invalid value for `dob`, length must be greater than or equal to `1`")

        self._dob = dob

    @property
    def email(self):
        """Gets the email of this CasteCertificateSchemaIssuedToPerson.


        :return: The email of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CasteCertificateSchemaIssuedToPerson.


        :param email: The email of this CasteCertificateSchemaIssuedToPerson.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this CasteCertificateSchemaIssuedToPerson.


        :return: The gender of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CasteCertificateSchemaIssuedToPerson.


        :param gender: The gender of this CasteCertificateSchemaIssuedToPerson.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def marital_status(self):
        """Gets the marital_status of this CasteCertificateSchemaIssuedToPerson.


        :return: The marital_status of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this CasteCertificateSchemaIssuedToPerson.


        :param marital_status: The marital_status of this CasteCertificateSchemaIssuedToPerson.
        :type marital_status: str
        """
        if marital_status is None:
            raise ValueError("Invalid value for `marital_status`, must not be `None`")

        self._marital_status = marital_status

    @property
    def name(self):
        """Gets the name of this CasteCertificateSchemaIssuedToPerson.


        :return: The name of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CasteCertificateSchemaIssuedToPerson.


        :param name: The name of this CasteCertificateSchemaIssuedToPerson.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this CasteCertificateSchemaIssuedToPerson.


        :return: The phone of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CasteCertificateSchemaIssuedToPerson.


        :param phone: The phone of this CasteCertificateSchemaIssuedToPerson.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def religion(self):
        """Gets the religion of this CasteCertificateSchemaIssuedToPerson.


        :return: The religion of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._religion

    @religion.setter
    def religion(self, religion):
        """Sets the religion of this CasteCertificateSchemaIssuedToPerson.


        :param religion: The religion of this CasteCertificateSchemaIssuedToPerson.
        :type religion: str
        """
        if religion is None:
            raise ValueError("Invalid value for `religion`, must not be `None`")

        self._religion = religion

    @property
    def swd(self):
        """Gets the swd of this CasteCertificateSchemaIssuedToPerson.


        :return: The swd of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._swd

    @swd.setter
    def swd(self, swd):
        """Sets the swd of this CasteCertificateSchemaIssuedToPerson.


        :param swd: The swd of this CasteCertificateSchemaIssuedToPerson.
        :type swd: str
        """
        if swd is None:
            raise ValueError("Invalid value for `swd`, must not be `None`")
        if swd is not None and len(swd) < 1:
            raise ValueError("Invalid value for `swd`, length must be greater than or equal to `1`")

        self._swd = swd

    @property
    def swd_indicator(self):
        """Gets the swd_indicator of this CasteCertificateSchemaIssuedToPerson.


        :return: The swd_indicator of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._swd_indicator

    @swd_indicator.setter
    def swd_indicator(self, swd_indicator):
        """Sets the swd_indicator of this CasteCertificateSchemaIssuedToPerson.


        :param swd_indicator: The swd_indicator of this CasteCertificateSchemaIssuedToPerson.
        :type swd_indicator: str
        """
        if swd_indicator is None:
            raise ValueError("Invalid value for `swd_indicator`, must not be `None`")
        if swd_indicator is not None and len(swd_indicator) < 1:
            raise ValueError("Invalid value for `swd_indicator`, length must be greater than or equal to `1`")

        self._swd_indicator = swd_indicator

    @property
    def title(self):
        """Gets the title of this CasteCertificateSchemaIssuedToPerson.


        :return: The title of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CasteCertificateSchemaIssuedToPerson.


        :param title: The title of this CasteCertificateSchemaIssuedToPerson.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this CasteCertificateSchemaIssuedToPerson.


        :return: The uid of this CasteCertificateSchemaIssuedToPerson.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CasteCertificateSchemaIssuedToPerson.


        :param uid: The uid of this CasteCertificateSchemaIssuedToPerson.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
