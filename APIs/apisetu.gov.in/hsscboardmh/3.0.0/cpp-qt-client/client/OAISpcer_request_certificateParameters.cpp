/**
 * Maharashtra State Board of Secondary and Higher Secondary Education, Maharashtra
 * Class X and XII marksheets and passing certificates of Maharashtra State Board of Secondary and Higher Secondary Education (https://mahahsscboard.maharashtra.gov.in/) are available in DigiLocker for years 1990 to 2017.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpcer_request_certificateParameters::OAISpcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpcer_request_certificateParameters::OAISpcer_request_certificateParameters() {
    this->initializeModel();
}

OAISpcer_request_certificateParameters::~OAISpcer_request_certificateParameters() {}

void OAISpcer_request_certificateParameters::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_exsession_isSet = false;
    m_exsession_isValid = false;

    m_rollnumber_isSet = false;
    m_rollnumber_isValid = false;

    m_totalmarks_isSet = false;
    m_totalmarks_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAISpcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_exsession_isValid = ::OpenAPI::fromJsonValue(m_exsession, json[QString("exsession")]);
    m_exsession_isSet = !json[QString("exsession")].isNull() && m_exsession_isValid;

    m_rollnumber_isValid = ::OpenAPI::fromJsonValue(m_rollnumber, json[QString("rollnumber")]);
    m_rollnumber_isSet = !json[QString("rollnumber")].isNull() && m_rollnumber_isValid;

    m_totalmarks_isValid = ::OpenAPI::fromJsonValue(m_totalmarks, json[QString("totalmarks")]);
    m_totalmarks_isSet = !json[QString("totalmarks")].isNull() && m_totalmarks_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAISpcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_exsession_isSet) {
        obj.insert(QString("exsession"), ::OpenAPI::toJsonValue(m_exsession));
    }
    if (m_rollnumber_isSet) {
        obj.insert(QString("rollnumber"), ::OpenAPI::toJsonValue(m_rollnumber));
    }
    if (m_totalmarks_isSet) {
        obj.insert(QString("totalmarks"), ::OpenAPI::toJsonValue(m_totalmarks));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QString OAISpcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAISpcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAISpcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAISpcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAISpcer_request_certificateParameters::getExsession() const {
    return m_exsession;
}
void OAISpcer_request_certificateParameters::setExsession(const QString &exsession) {
    m_exsession = exsession;
    m_exsession_isSet = true;
}

bool OAISpcer_request_certificateParameters::is_exsession_Set() const{
    return m_exsession_isSet;
}

bool OAISpcer_request_certificateParameters::is_exsession_Valid() const{
    return m_exsession_isValid;
}

QString OAISpcer_request_certificateParameters::getRollnumber() const {
    return m_rollnumber;
}
void OAISpcer_request_certificateParameters::setRollnumber(const QString &rollnumber) {
    m_rollnumber = rollnumber;
    m_rollnumber_isSet = true;
}

bool OAISpcer_request_certificateParameters::is_rollnumber_Set() const{
    return m_rollnumber_isSet;
}

bool OAISpcer_request_certificateParameters::is_rollnumber_Valid() const{
    return m_rollnumber_isValid;
}

QString OAISpcer_request_certificateParameters::getTotalmarks() const {
    return m_totalmarks;
}
void OAISpcer_request_certificateParameters::setTotalmarks(const QString &totalmarks) {
    m_totalmarks = totalmarks;
    m_totalmarks_isSet = true;
}

bool OAISpcer_request_certificateParameters::is_totalmarks_Set() const{
    return m_totalmarks_isSet;
}

bool OAISpcer_request_certificateParameters::is_totalmarks_Valid() const{
    return m_totalmarks_isValid;
}

QString OAISpcer_request_certificateParameters::getYear() const {
    return m_year;
}
void OAISpcer_request_certificateParameters::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAISpcer_request_certificateParameters::is_year_Set() const{
    return m_year_isSet;
}

bool OAISpcer_request_certificateParameters::is_year_Valid() const{
    return m_year_isValid;
}

bool OAISpcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exsession_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollnumber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalmarks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_exsession_isValid && m_rollnumber_isValid && m_totalmarks_isValid && m_year_isValid && true;
}

} // namespace OpenAPI
