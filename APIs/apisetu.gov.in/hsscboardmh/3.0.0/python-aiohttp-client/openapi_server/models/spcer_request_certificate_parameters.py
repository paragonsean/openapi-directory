# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, exsession: str=None, rollnumber: str=None, totalmarks: str=None, year: str=None):
        """SpcerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this SpcerRequestCertificateParameters.
        :param exsession: The exsession of this SpcerRequestCertificateParameters.
        :param rollnumber: The rollnumber of this SpcerRequestCertificateParameters.
        :param totalmarks: The totalmarks of this SpcerRequestCertificateParameters.
        :param year: The year of this SpcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'exsession': str,
            'rollnumber': str,
            'totalmarks': str,
            'year': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'exsession': 'exsession',
            'rollnumber': 'rollnumber',
            'totalmarks': 'totalmarks',
            'year': 'year'
        }

        self._full_name = full_name
        self._exsession = exsession
        self._rollnumber = rollnumber
        self._totalmarks = totalmarks
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The spcer_request_certificateParameters of this SpcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this SpcerRequestCertificateParameters.

        Full name

        :return: The full_name of this SpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SpcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this SpcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def exsession(self):
        """Gets the exsession of this SpcerRequestCertificateParameters.

        Exam Session

        :return: The exsession of this SpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._exsession

    @exsession.setter
    def exsession(self, exsession):
        """Sets the exsession of this SpcerRequestCertificateParameters.

        Exam Session

        :param exsession: The exsession of this SpcerRequestCertificateParameters.
        :type exsession: str
        """
        if exsession is None:
            raise ValueError("Invalid value for `exsession`, must not be `None`")

        self._exsession = exsession

    @property
    def rollnumber(self):
        """Gets the rollnumber of this SpcerRequestCertificateParameters.

        Seat No

        :return: The rollnumber of this SpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._rollnumber

    @rollnumber.setter
    def rollnumber(self, rollnumber):
        """Sets the rollnumber of this SpcerRequestCertificateParameters.

        Seat No

        :param rollnumber: The rollnumber of this SpcerRequestCertificateParameters.
        :type rollnumber: str
        """
        if rollnumber is None:
            raise ValueError("Invalid value for `rollnumber`, must not be `None`")

        self._rollnumber = rollnumber

    @property
    def totalmarks(self):
        """Gets the totalmarks of this SpcerRequestCertificateParameters.

        Total Marks

        :return: The totalmarks of this SpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._totalmarks

    @totalmarks.setter
    def totalmarks(self, totalmarks):
        """Sets the totalmarks of this SpcerRequestCertificateParameters.

        Total Marks

        :param totalmarks: The totalmarks of this SpcerRequestCertificateParameters.
        :type totalmarks: str
        """
        if totalmarks is None:
            raise ValueError("Invalid value for `totalmarks`, must not be `None`")

        self._totalmarks = totalmarks

    @property
    def year(self):
        """Gets the year of this SpcerRequestCertificateParameters.

        Year

        :return: The year of this SpcerRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SpcerRequestCertificateParameters.

        Year

        :param year: The year of this SpcerRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
