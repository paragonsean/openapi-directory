# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DgmstRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, enrollment_no: str=None, full_name: str=None, roll_no: str=None, uid: str=None, year: str=None):
        """DgmstRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this DgmstRequestCertificateParameters.
        :param enrollment_no: The enrollment_no of this DgmstRequestCertificateParameters.
        :param full_name: The full_name of this DgmstRequestCertificateParameters.
        :param roll_no: The roll_no of this DgmstRequestCertificateParameters.
        :param uid: The uid of this DgmstRequestCertificateParameters.
        :param year: The year of this DgmstRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'enrollment_no': str,
            'full_name': str,
            'roll_no': str,
            'uid': str,
            'year': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'enrollment_no': 'EnrollmentNo',
            'full_name': 'FullName',
            'roll_no': 'RollNo',
            'uid': 'UID',
            'year': 'Year'
        }

        self._dob = dob
        self._enrollment_no = enrollment_no
        self._full_name = full_name
        self._roll_no = roll_no
        self._uid = uid
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DgmstRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dgmst_request_certificateParameters of this DgmstRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this DgmstRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this DgmstRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this DgmstRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def enrollment_no(self):
        """Gets the enrollment_no of this DgmstRequestCertificateParameters.

        Enrollment No

        :return: The enrollment_no of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._enrollment_no

    @enrollment_no.setter
    def enrollment_no(self, enrollment_no):
        """Sets the enrollment_no of this DgmstRequestCertificateParameters.

        Enrollment No

        :param enrollment_no: The enrollment_no of this DgmstRequestCertificateParameters.
        :type enrollment_no: str
        """
        if enrollment_no is None:
            raise ValueError("Invalid value for `enrollment_no`, must not be `None`")

        self._enrollment_no = enrollment_no

    @property
    def full_name(self):
        """Gets the full_name of this DgmstRequestCertificateParameters.

        Full name

        :return: The full_name of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this DgmstRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this DgmstRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def roll_no(self):
        """Gets the roll_no of this DgmstRequestCertificateParameters.

        Roll No

        :return: The roll_no of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._roll_no

    @roll_no.setter
    def roll_no(self, roll_no):
        """Sets the roll_no of this DgmstRequestCertificateParameters.

        Roll No

        :param roll_no: The roll_no of this DgmstRequestCertificateParameters.
        :type roll_no: str
        """
        if roll_no is None:
            raise ValueError("Invalid value for `roll_no`, must not be `None`")

        self._roll_no = roll_no

    @property
    def uid(self):
        """Gets the uid of this DgmstRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this DgmstRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this DgmstRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def year(self):
        """Gets the year of this DgmstRequestCertificateParameters.

        Year

        :return: The year of this DgmstRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DgmstRequestCertificateParameters.

        Year

        :param year: The year of this DgmstRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
