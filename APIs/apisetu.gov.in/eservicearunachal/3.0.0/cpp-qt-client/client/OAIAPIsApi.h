/**
 * eService (eDistrict), Arunachal Pradesh
 * eService (eDistrict), Arunachal Pradesh (http://eservice.arunachal.gov.in/) is the online service delivery portal for Arunachal Pradesh  State Govt. Certain documents issued by it (e.g. Income, Caste, Domicile, Dependency, SC/ST ,Character,  Residence Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChcer_400_response.h"
#include "OAIChcer_401_response.h"
#include "OAIChcer_404_response.h"
#include "OAIChcer_500_response.h"
#include "OAIChcer_502_response.h"
#include "OAIChcer_503_response.h"
#include "OAIChcer_504_response.h"
#include "OAIChcer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void chcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void dmcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void dpcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void rscer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void shcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chcerCallback(OAIHttpRequestWorker *worker);
    void dmcerCallback(OAIHttpRequestWorker *worker);
    void dpcerCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);
    void rscerCallback(OAIHttpRequestWorker *worker);
    void shcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chcerSignal();
    void dmcerSignal();
    void dpcerSignal();
    void incerSignal();
    void rscerSignal();
    void shcerSignal();


    void chcerSignalFull(OAIHttpRequestWorker *worker);
    void dmcerSignalFull(OAIHttpRequestWorker *worker);
    void dpcerSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);
    void rscerSignalFull(OAIHttpRequestWorker *worker);
    void shcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use chcerSignalError() instead")
    void chcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalError() instead")
    void dmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalError() instead")
    void dpcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalError() instead")
    void rscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalError() instead")
    void shcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chcerSignalErrorFull() instead")
    void chcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalErrorFull() instead")
    void dmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalErrorFull() instead")
    void dpcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalErrorFull() instead")
    void rscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalErrorFull() instead")
    void shcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
