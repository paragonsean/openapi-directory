# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, ref_no: str=None, token_no: str=None):
        """ChcerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this ChcerRequestCertificateParameters.
        :param ref_no: The ref_no of this ChcerRequestCertificateParameters.
        :param token_no: The token_no of this ChcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'ref_no': str,
            'token_no': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'ref_no': 'RefNo',
            'token_no': 'TokenNo'
        }

        self._full_name = full_name
        self._ref_no = ref_no
        self._token_no = token_no

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The chcer_request_certificateParameters of this ChcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this ChcerRequestCertificateParameters.

        Full name

        :return: The full_name of this ChcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this ChcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this ChcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def ref_no(self):
        """Gets the ref_no of this ChcerRequestCertificateParameters.

        Certificate Reference No

        :return: The ref_no of this ChcerRequestCertificateParameters.
        :rtype: str
        """
        return self._ref_no

    @ref_no.setter
    def ref_no(self, ref_no):
        """Sets the ref_no of this ChcerRequestCertificateParameters.

        Certificate Reference No

        :param ref_no: The ref_no of this ChcerRequestCertificateParameters.
        :type ref_no: str
        """
        if ref_no is None:
            raise ValueError("Invalid value for `ref_no`, must not be `None`")

        self._ref_no = ref_no

    @property
    def token_no(self):
        """Gets the token_no of this ChcerRequestCertificateParameters.

        Token No

        :return: The token_no of this ChcerRequestCertificateParameters.
        :rtype: str
        """
        return self._token_no

    @token_no.setter
    def token_no(self, token_no):
        """Sets the token_no of this ChcerRequestCertificateParameters.

        Token No

        :param token_no: The token_no of this ChcerRequestCertificateParameters.
        :type token_no: str
        """
        if token_no is None:
            raise ValueError("Invalid value for `token_no`, must not be `None`")

        self._token_no = token_no
