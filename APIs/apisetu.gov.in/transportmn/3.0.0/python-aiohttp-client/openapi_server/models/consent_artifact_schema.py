# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consent_artifact_schema_consent import ConsentArtifactSchemaConsent
from openapi_server.models.consent_artifact_schema_signature import ConsentArtifactSchemaSignature
from openapi_server import util


class ConsentArtifactSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consent: ConsentArtifactSchemaConsent=None, signature: ConsentArtifactSchemaSignature=None):
        """ConsentArtifactSchema - a model defined in OpenAPI

        :param consent: The consent of this ConsentArtifactSchema.
        :param signature: The signature of this ConsentArtifactSchema.
        """
        self.openapi_types = {
            'consent': ConsentArtifactSchemaConsent,
            'signature': ConsentArtifactSchemaSignature
        }

        self.attribute_map = {
            'consent': 'consent',
            'signature': 'signature'
        }

        self._consent = consent
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentArtifactSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentArtifactSchema of this ConsentArtifactSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consent(self):
        """Gets the consent of this ConsentArtifactSchema.


        :return: The consent of this ConsentArtifactSchema.
        :rtype: ConsentArtifactSchemaConsent
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this ConsentArtifactSchema.


        :param consent: The consent of this ConsentArtifactSchema.
        :type consent: ConsentArtifactSchemaConsent
        """
        if consent is None:
            raise ValueError("Invalid value for `consent`, must not be `None`")

        self._consent = consent

    @property
    def signature(self):
        """Gets the signature of this ConsentArtifactSchema.


        :return: The signature of this ConsentArtifactSchema.
        :rtype: ConsentArtifactSchemaSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ConsentArtifactSchema.


        :param signature: The signature of this ConsentArtifactSchema.
        :type signature: ConsentArtifactSchemaSignature
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature
