/**
 * Transport Department, Manipur
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner() {
    this->initializeModel();
}

OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::~OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner() {}

void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_gp_isSet = false;
    m_gp_isValid = false;

    m_gp_max_isSet = false;
    m_gp_max_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_marks_max_isSet = false;
    m_marks_max_isValid = false;

    m_marks_max_practical_isSet = false;
    m_marks_max_practical_isValid = false;

    m_marks_max_theory_isSet = false;
    m_marks_max_theory_isValid = false;

    m_marks_practical_isSet = false;
    m_marks_practical_isValid = false;

    m_marks_theory_isSet = false;
    m_marks_theory_isValid = false;

    m_marks_total_isSet = false;
    m_marks_total_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_gp_isValid = ::OpenAPI::fromJsonValue(m_gp, json[QString("gp")]);
    m_gp_isSet = !json[QString("gp")].isNull() && m_gp_isValid;

    m_gp_max_isValid = ::OpenAPI::fromJsonValue(m_gp_max, json[QString("gpMax")]);
    m_gp_max_isSet = !json[QString("gpMax")].isNull() && m_gp_max_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_marks_max_isValid = ::OpenAPI::fromJsonValue(m_marks_max, json[QString("marksMax")]);
    m_marks_max_isSet = !json[QString("marksMax")].isNull() && m_marks_max_isValid;

    m_marks_max_practical_isValid = ::OpenAPI::fromJsonValue(m_marks_max_practical, json[QString("marksMaxPractical")]);
    m_marks_max_practical_isSet = !json[QString("marksMaxPractical")].isNull() && m_marks_max_practical_isValid;

    m_marks_max_theory_isValid = ::OpenAPI::fromJsonValue(m_marks_max_theory, json[QString("marksMaxTheory")]);
    m_marks_max_theory_isSet = !json[QString("marksMaxTheory")].isNull() && m_marks_max_theory_isValid;

    m_marks_practical_isValid = ::OpenAPI::fromJsonValue(m_marks_practical, json[QString("marksPractical")]);
    m_marks_practical_isSet = !json[QString("marksPractical")].isNull() && m_marks_practical_isValid;

    m_marks_theory_isValid = ::OpenAPI::fromJsonValue(m_marks_theory, json[QString("marksTheory")]);
    m_marks_theory_isSet = !json[QString("marksTheory")].isNull() && m_marks_theory_isValid;

    m_marks_total_isValid = ::OpenAPI::fromJsonValue(m_marks_total, json[QString("marksTotal")]);
    m_marks_total_isSet = !json[QString("marksTotal")].isNull() && m_marks_total_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_gp_isSet) {
        obj.insert(QString("gp"), ::OpenAPI::toJsonValue(m_gp));
    }
    if (m_gp_max_isSet) {
        obj.insert(QString("gpMax"), ::OpenAPI::toJsonValue(m_gp_max));
    }
    if (m_grade_isSet) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_marks_max_isSet) {
        obj.insert(QString("marksMax"), ::OpenAPI::toJsonValue(m_marks_max));
    }
    if (m_marks_max_practical_isSet) {
        obj.insert(QString("marksMaxPractical"), ::OpenAPI::toJsonValue(m_marks_max_practical));
    }
    if (m_marks_max_theory_isSet) {
        obj.insert(QString("marksMaxTheory"), ::OpenAPI::toJsonValue(m_marks_max_theory));
    }
    if (m_marks_practical_isSet) {
        obj.insert(QString("marksPractical"), ::OpenAPI::toJsonValue(m_marks_practical));
    }
    if (m_marks_theory_isSet) {
        obj.insert(QString("marksTheory"), ::OpenAPI::toJsonValue(m_marks_theory));
    }
    if (m_marks_total_isSet) {
        obj.insert(QString("marksTotal"), ::OpenAPI::toJsonValue(m_marks_total));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getCode() const {
    return m_code;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getGp() const {
    return m_gp;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setGp(const QString &gp) {
    m_gp = gp;
    m_gp_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_gp_Set() const{
    return m_gp_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_gp_Valid() const{
    return m_gp_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getGpMax() const {
    return m_gp_max;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setGpMax(const QString &gp_max) {
    m_gp_max = gp_max;
    m_gp_max_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_gp_max_Set() const{
    return m_gp_max_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_gp_max_Valid() const{
    return m_gp_max_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getGrade() const {
    return m_grade;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setGrade(const QString &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_grade_Valid() const{
    return m_grade_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksMax() const {
    return m_marks_max;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksMax(const qint32 &marks_max) {
    m_marks_max = marks_max;
    m_marks_max_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_Set() const{
    return m_marks_max_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_Valid() const{
    return m_marks_max_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksMaxPractical() const {
    return m_marks_max_practical;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksMaxPractical(const qint32 &marks_max_practical) {
    m_marks_max_practical = marks_max_practical;
    m_marks_max_practical_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_practical_Set() const{
    return m_marks_max_practical_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_practical_Valid() const{
    return m_marks_max_practical_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksMaxTheory() const {
    return m_marks_max_theory;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksMaxTheory(const qint32 &marks_max_theory) {
    m_marks_max_theory = marks_max_theory;
    m_marks_max_theory_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_theory_Set() const{
    return m_marks_max_theory_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_max_theory_Valid() const{
    return m_marks_max_theory_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksPractical() const {
    return m_marks_practical;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksPractical(const qint32 &marks_practical) {
    m_marks_practical = marks_practical;
    m_marks_practical_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_practical_Set() const{
    return m_marks_practical_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_practical_Valid() const{
    return m_marks_practical_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksTheory() const {
    return m_marks_theory;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksTheory(const qint32 &marks_theory) {
    m_marks_theory = marks_theory;
    m_marks_theory_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_theory_Set() const{
    return m_marks_theory_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_theory_Valid() const{
    return m_marks_theory_isValid;
}

qint32 OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getMarksTotal() const {
    return m_marks_total;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setMarksTotal(const qint32 &marks_total) {
    m_marks_total = marks_total;
    m_marks_total_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_total_Set() const{
    return m_marks_total_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_marks_total_Valid() const{
    return m_marks_total_isValid;
}

QString OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::getName() const {
    return m_name;
}
void OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gp_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_max_practical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_max_theory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_practical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_theory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marks_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcademicCertificateSchema_CertificateData_Performance_Subjects_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_gp_isValid && m_gp_max_isValid && m_grade_isValid && m_marks_max_isValid && m_marks_max_practical_isValid && m_marks_max_theory_isValid && m_marks_practical_isValid && m_marks_theory_isValid && m_marks_total_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
