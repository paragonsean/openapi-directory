/**
 * Common Service Centre (CSC)
 * Certificates issued under Pradhan Mantri Gramin Digital Saksharta Abhiyaan (PMGDISHA) (https://www.pmgdisha.in) scheme enrolled at authorised Training Centres/ CSCs are made available to citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkcer_request_certificateParameters::OAISkcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkcer_request_certificateParameters::OAISkcer_request_certificateParameters() {
    this->initializeModel();
}

OAISkcer_request_certificateParameters::~OAISkcer_request_certificateParameters() {}

void OAISkcer_request_certificateParameters::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_certificate_type_isSet = false;
    m_certificate_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISkcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_certificate_type_isValid = ::OpenAPI::fromJsonValue(m_certificate_type, json[QString("certificateType")]);
    m_certificate_type_isSet = !json[QString("certificateType")].isNull() && m_certificate_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISkcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_certificate_type_isSet) {
        obj.insert(QString("certificateType"), ::OpenAPI::toJsonValue(m_certificate_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISkcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAISkcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAISkcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAISkcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAISkcer_request_certificateParameters::getCertificateType() const {
    return m_certificate_type;
}
void OAISkcer_request_certificateParameters::setCertificateType(const QString &certificate_type) {
    m_certificate_type = certificate_type;
    m_certificate_type_isSet = true;
}

bool OAISkcer_request_certificateParameters::is_certificate_type_Set() const{
    return m_certificate_type_isSet;
}

bool OAISkcer_request_certificateParameters::is_certificate_type_Valid() const{
    return m_certificate_type_isValid;
}

QString OAISkcer_request_certificateParameters::getUsername() const {
    return m_username;
}
void OAISkcer_request_certificateParameters::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISkcer_request_certificateParameters::is_username_Set() const{
    return m_username_isSet;
}

bool OAISkcer_request_certificateParameters::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISkcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_certificate_type_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
