# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, certificate_type: str=None, username: str=None):
        """SkcerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        :param certificate_type: The certificate_type of this SkcerRequestCertificateParameters.
        :param username: The username of this SkcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'certificate_type': str,
            'username': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'certificate_type': 'certificateType',
            'username': 'username'
        }

        self._full_name = full_name
        self._certificate_type = certificate_type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The skcer_request_certificateParameters of this SkcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :return: The full_name of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def certificate_type(self):
        """Gets the certificate_type of this SkcerRequestCertificateParameters.

        CERTIFICATE-TYPE

        :return: The certificate_type of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this SkcerRequestCertificateParameters.

        CERTIFICATE-TYPE

        :param certificate_type: The certificate_type of this SkcerRequestCertificateParameters.
        :type certificate_type: str
        """
        if certificate_type is None:
            raise ValueError("Invalid value for `certificate_type`, must not be `None`")

        self._certificate_type = certificate_type

    @property
    def username(self):
        """Gets the username of this SkcerRequestCertificateParameters.

        PMGDISHA-USERNAME

        :return: The username of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SkcerRequestCertificateParameters.

        PMGDISHA-USERNAME

        :param username: The username of this SkcerRequestCertificateParameters.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
