/**
 * Tamil Nadu State Board (Tamil Nadu Directorate of Government Examinations), Tamil Nadu
 * Tamilnadu - Government Examinations (https://dgecert.tn.nic.in/) is issuing Mark Certificates through DigiLocker. These can be pulled by students into their DigiLocker accounts. Currently Class X (2016-2019) and XII (2016-2018) marksheets are available.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HscerRequestCertificateParameters model module.
 * @module model/HscerRequestCertificateParameters
 * @version 3.0.0
 */
class HscerRequestCertificateParameters {
    /**
     * Constructs a new <code>HscerRequestCertificateParameters</code>.
     * @alias module:model/HscerRequestCertificateParameters
     * @param certificateType {String} CERTIFICATE TYPE
     * @param DOB {String} Date of birth in DD-MM-YYYY format
     * @param fullName {String} Full name
     * @param RROLL {String} Roll No
     * @param month {String} MONTH
     * @param year {String} YEAR
     */
    constructor(certificateType, DOB, fullName, RROLL, month, year) { 
        
        HscerRequestCertificateParameters.initialize(this, certificateType, DOB, fullName, RROLL, month, year);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateType, DOB, fullName, RROLL, month, year) { 
        obj['CertificateType'] = certificateType;
        obj['DOB'] = DOB;
        obj['FullName'] = fullName;
        obj['RROLL'] = RROLL;
        obj['month'] = month;
        obj['year'] = year;
    }

    /**
     * Constructs a <code>HscerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HscerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/HscerRequestCertificateParameters} The populated <code>HscerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HscerRequestCertificateParameters();

            if (data.hasOwnProperty('CertificateType')) {
                obj['CertificateType'] = ApiClient.convertToType(data['CertificateType'], 'String');
            }
            if (data.hasOwnProperty('DOB')) {
                obj['DOB'] = ApiClient.convertToType(data['DOB'], 'String');
            }
            if (data.hasOwnProperty('FullName')) {
                obj['FullName'] = ApiClient.convertToType(data['FullName'], 'String');
            }
            if (data.hasOwnProperty('RROLL')) {
                obj['RROLL'] = ApiClient.convertToType(data['RROLL'], 'String');
            }
            if (data.hasOwnProperty('month')) {
                obj['month'] = ApiClient.convertToType(data['month'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HscerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HscerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HscerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CertificateType'] && !(typeof data['CertificateType'] === 'string' || data['CertificateType'] instanceof String)) {
            throw new Error("Expected the field `CertificateType` to be a primitive type in the JSON string but got " + data['CertificateType']);
        }
        // ensure the json data is a string
        if (data['DOB'] && !(typeof data['DOB'] === 'string' || data['DOB'] instanceof String)) {
            throw new Error("Expected the field `DOB` to be a primitive type in the JSON string but got " + data['DOB']);
        }
        // ensure the json data is a string
        if (data['FullName'] && !(typeof data['FullName'] === 'string' || data['FullName'] instanceof String)) {
            throw new Error("Expected the field `FullName` to be a primitive type in the JSON string but got " + data['FullName']);
        }
        // ensure the json data is a string
        if (data['RROLL'] && !(typeof data['RROLL'] === 'string' || data['RROLL'] instanceof String)) {
            throw new Error("Expected the field `RROLL` to be a primitive type in the JSON string but got " + data['RROLL']);
        }
        // ensure the json data is a string
        if (data['month'] && !(typeof data['month'] === 'string' || data['month'] instanceof String)) {
            throw new Error("Expected the field `month` to be a primitive type in the JSON string but got " + data['month']);
        }
        // ensure the json data is a string
        if (data['year'] && !(typeof data['year'] === 'string' || data['year'] instanceof String)) {
            throw new Error("Expected the field `year` to be a primitive type in the JSON string but got " + data['year']);
        }

        return true;
    }


}

HscerRequestCertificateParameters.RequiredProperties = ["CertificateType", "DOB", "FullName", "RROLL", "month", "year"];

/**
 * CERTIFICATE TYPE
 * @member {String} CertificateType
 */
HscerRequestCertificateParameters.prototype['CertificateType'] = undefined;

/**
 * Date of birth in DD-MM-YYYY format
 * @member {String} DOB
 */
HscerRequestCertificateParameters.prototype['DOB'] = undefined;

/**
 * Full name
 * @member {String} FullName
 */
HscerRequestCertificateParameters.prototype['FullName'] = undefined;

/**
 * Roll No
 * @member {String} RROLL
 */
HscerRequestCertificateParameters.prototype['RROLL'] = undefined;

/**
 * MONTH
 * @member {String} month
 */
HscerRequestCertificateParameters.prototype['month'] = undefined;

/**
 * YEAR
 * @member {String} year
 */
HscerRequestCertificateParameters.prototype['year'] = undefined;






export default HscerRequestCertificateParameters;

