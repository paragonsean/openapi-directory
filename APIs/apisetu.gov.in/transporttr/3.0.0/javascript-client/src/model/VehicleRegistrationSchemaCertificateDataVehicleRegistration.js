/**
 * Transport Department, Tripura
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance from './VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance';
import VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle from './VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle';

/**
 * The VehicleRegistrationSchemaCertificateDataVehicleRegistration model module.
 * @module model/VehicleRegistrationSchemaCertificateDataVehicleRegistration
 * @version 3.0.0
 */
class VehicleRegistrationSchemaCertificateDataVehicleRegistration {
    /**
     * Constructs a new <code>VehicleRegistrationSchemaCertificateDataVehicleRegistration</code>.
     * @alias module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistration
     * @param financer {String} 
     * @param normsDesc {String} 
     * @param statusDate {String} 
     */
    constructor(financer, normsDesc, statusDate) { 
        
        VehicleRegistrationSchemaCertificateDataVehicleRegistration.initialize(this, financer, normsDesc, statusDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, financer, normsDesc, statusDate) { 
        obj['financer'] = financer;
        obj['normsDesc'] = normsDesc;
        obj['statusDate'] = statusDate;
    }

    /**
     * Constructs a <code>VehicleRegistrationSchemaCertificateDataVehicleRegistration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistration} obj Optional instance to populate.
     * @return {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistration} The populated <code>VehicleRegistrationSchemaCertificateDataVehicleRegistration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VehicleRegistrationSchemaCertificateDataVehicleRegistration();

            if (data.hasOwnProperty('Insurance')) {
                obj['Insurance'] = VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.constructFromObject(data['Insurance']);
            }
            if (data.hasOwnProperty('Vehicle')) {
                obj['Vehicle'] = VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.constructFromObject(data['Vehicle']);
            }
            if (data.hasOwnProperty('financer')) {
                obj['financer'] = ApiClient.convertToType(data['financer'], 'String');
            }
            if (data.hasOwnProperty('normsDesc')) {
                obj['normsDesc'] = ApiClient.convertToType(data['normsDesc'], 'String');
            }
            if (data.hasOwnProperty('statusDate')) {
                obj['statusDate'] = ApiClient.convertToType(data['statusDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VehicleRegistrationSchemaCertificateDataVehicleRegistration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VehicleRegistrationSchemaCertificateDataVehicleRegistration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VehicleRegistrationSchemaCertificateDataVehicleRegistration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Insurance`
        if (data['Insurance']) { // data not null
          VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.validateJSON(data['Insurance']);
        }
        // validate the optional field `Vehicle`
        if (data['Vehicle']) { // data not null
          VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.validateJSON(data['Vehicle']);
        }
        // ensure the json data is a string
        if (data['financer'] && !(typeof data['financer'] === 'string' || data['financer'] instanceof String)) {
            throw new Error("Expected the field `financer` to be a primitive type in the JSON string but got " + data['financer']);
        }
        // ensure the json data is a string
        if (data['normsDesc'] && !(typeof data['normsDesc'] === 'string' || data['normsDesc'] instanceof String)) {
            throw new Error("Expected the field `normsDesc` to be a primitive type in the JSON string but got " + data['normsDesc']);
        }
        // ensure the json data is a string
        if (data['statusDate'] && !(typeof data['statusDate'] === 'string' || data['statusDate'] instanceof String)) {
            throw new Error("Expected the field `statusDate` to be a primitive type in the JSON string but got " + data['statusDate']);
        }

        return true;
    }


}

VehicleRegistrationSchemaCertificateDataVehicleRegistration.RequiredProperties = ["financer", "normsDesc", "statusDate"];

/**
 * @member {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance} Insurance
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistration.prototype['Insurance'] = undefined;

/**
 * @member {module:model/VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle} Vehicle
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistration.prototype['Vehicle'] = undefined;

/**
 * @member {String} financer
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistration.prototype['financer'] = undefined;

/**
 * @member {String} normsDesc
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistration.prototype['normsDesc'] = undefined;

/**
 * @member {String} statusDate
 */
VehicleRegistrationSchemaCertificateDataVehicleRegistration.prototype['statusDate'] = undefined;






export default VehicleRegistrationSchemaCertificateDataVehicleRegistration;

