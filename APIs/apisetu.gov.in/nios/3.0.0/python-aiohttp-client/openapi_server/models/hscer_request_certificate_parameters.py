# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, full_name: str=None, rroll: str=None, year: str=None):
        """HscerRequestCertificateParameters - a model defined in OpenAPI

        :param full_name: The full_name of this HscerRequestCertificateParameters.
        :param rroll: The rroll of this HscerRequestCertificateParameters.
        :param year: The year of this HscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'full_name': str,
            'rroll': str,
            'year': str
        }

        self.attribute_map = {
            'full_name': 'FullName',
            'rroll': 'RROLL',
            'year': 'YEAR'
        }

        self._full_name = full_name
        self._rroll = rroll
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hscer_request_certificateParameters of this HscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def full_name(self):
        """Gets the full_name of this HscerRequestCertificateParameters.

        Full name

        :return: The full_name of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this HscerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this HscerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def rroll(self):
        """Gets the rroll of this HscerRequestCertificateParameters.

        ROLL NO

        :return: The rroll of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._rroll

    @rroll.setter
    def rroll(self, rroll):
        """Sets the rroll of this HscerRequestCertificateParameters.

        ROLL NO

        :param rroll: The rroll of this HscerRequestCertificateParameters.
        :type rroll: str
        """
        if rroll is None:
            raise ValueError("Invalid value for `rroll`, must not be `None`")

        self._rroll = rroll

    @property
    def year(self):
        """Gets the year of this HscerRequestCertificateParameters.

        YEAR

        :return: The year of this HscerRequestCertificateParameters.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this HscerRequestCertificateParameters.

        YEAR

        :param year: The year of this HscerRequestCertificateParameters.
        :type year: str
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
