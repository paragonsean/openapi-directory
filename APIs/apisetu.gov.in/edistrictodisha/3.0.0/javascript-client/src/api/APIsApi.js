/**
 * eDistrict Odisha, Odisha
 * eDistrict Odisha (http://edistrictodisha.gov.in/) is the online service delivery portal for Odisha State Govt. Certain documents issued by it (e.g. Income, Caste, Residence Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Ctcer400Response from '../model/Ctcer400Response';
import Ctcer401Response from '../model/Ctcer401Response';
import Ctcer404Response from '../model/Ctcer404Response';
import Ctcer500Response from '../model/Ctcer500Response';
import Ctcer502Response from '../model/Ctcer502Response';
import Ctcer503Response from '../model/Ctcer503Response';
import Ctcer504Response from '../model/Ctcer504Response';
import CtcerRequest from '../model/CtcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ctcer operation.
     * @callback module:api/APIsApi~ctcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Caste Certificate
     * API to verify Caste Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~ctcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ctcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ctcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ewcer operation.
     * @callback module:api/APIsApi~ewcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Economically Weaker Section Certificate
     * API to verify Economically Weaker Section Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~ewcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ewcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ewcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lhcer operation.
     * @callback module:api/APIsApi~lhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legal Heir Certificate
     * API to verify Legal Heir Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~lhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obcer operation.
     * @callback module:api/APIsApi~obcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OBC Certificate
     * API to verify OBC Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~obcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/obcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ror1b operation.
     * @callback module:api/APIsApi~ror1bCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Records of Rights
     * API to verify Records of Rights.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~ror1bCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ror1b(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ror1b/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the slcer operation.
     * @callback module:api/APIsApi~slcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Solvency Certificate
     * API to verify Solvency Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/CtcerRequest} [ctcerRequest] Request format
     * @param {module:api/APIsApi~slcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    slcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ctcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/slcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
