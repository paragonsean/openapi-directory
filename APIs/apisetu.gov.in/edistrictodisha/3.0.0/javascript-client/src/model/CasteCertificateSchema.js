/**
 * eDistrict Odisha, Odisha
 * eDistrict Odisha (http://edistrictodisha.gov.in/) is the online service delivery portal for Odisha State Govt. Certain documents issued by it (e.g. Income, Caste, Residence Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CasteCertificateSchemaCertificateData from './CasteCertificateSchemaCertificateData';
import CasteCertificateSchemaIssuedBy from './CasteCertificateSchemaIssuedBy';
import CasteCertificateSchemaIssuedTo from './CasteCertificateSchemaIssuedTo';

/**
 * The CasteCertificateSchema model module.
 * @module model/CasteCertificateSchema
 * @version 3.0.0
 */
class CasteCertificateSchema {
    /**
     * Constructs a new <code>CasteCertificateSchema</code>.
     * @alias module:model/CasteCertificateSchema
     * @param certificateData {module:model/CasteCertificateSchemaCertificateData} 
     * @param issuedBy {module:model/CasteCertificateSchemaIssuedBy} 
     * @param issuedTo {module:model/CasteCertificateSchemaIssuedTo} 
     * @param issueDate {String} 
     * @param issuedAt {String} 
     * @param language {String} 
     * @param name {String} 
     * @param number {Number} 
     * @param status {String} 
     * @param type {String} 
     * @param validFromDate {String} 
     */
    constructor(certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate) { 
        
        CasteCertificateSchema.initialize(this, certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateData, issuedBy, issuedTo, issueDate, issuedAt, language, name, number, status, type, validFromDate) { 
        obj['CertificateData'] = certificateData;
        obj['IssuedBy'] = issuedBy;
        obj['IssuedTo'] = issuedTo;
        obj['issueDate'] = issueDate;
        obj['issuedAt'] = issuedAt;
        obj['language'] = language;
        obj['name'] = name;
        obj['number'] = number;
        obj['status'] = status;
        obj['type'] = type;
        obj['validFromDate'] = validFromDate;
    }

    /**
     * Constructs a <code>CasteCertificateSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CasteCertificateSchema} obj Optional instance to populate.
     * @return {module:model/CasteCertificateSchema} The populated <code>CasteCertificateSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CasteCertificateSchema();

            if (data.hasOwnProperty('CertificateData')) {
                obj['CertificateData'] = CasteCertificateSchemaCertificateData.constructFromObject(data['CertificateData']);
            }
            if (data.hasOwnProperty('IssuedBy')) {
                obj['IssuedBy'] = CasteCertificateSchemaIssuedBy.constructFromObject(data['IssuedBy']);
            }
            if (data.hasOwnProperty('IssuedTo')) {
                obj['IssuedTo'] = CasteCertificateSchemaIssuedTo.constructFromObject(data['IssuedTo']);
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
            if (data.hasOwnProperty('issuedAt')) {
                obj['issuedAt'] = ApiClient.convertToType(data['issuedAt'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validFromDate')) {
                obj['validFromDate'] = ApiClient.convertToType(data['validFromDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CasteCertificateSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CasteCertificateSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CasteCertificateSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CertificateData`
        if (data['CertificateData']) { // data not null
          CasteCertificateSchemaCertificateData.validateJSON(data['CertificateData']);
        }
        // validate the optional field `IssuedBy`
        if (data['IssuedBy']) { // data not null
          CasteCertificateSchemaIssuedBy.validateJSON(data['IssuedBy']);
        }
        // validate the optional field `IssuedTo`
        if (data['IssuedTo']) { // data not null
          CasteCertificateSchemaIssuedTo.validateJSON(data['IssuedTo']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }
        // ensure the json data is a string
        if (data['issuedAt'] && !(typeof data['issuedAt'] === 'string' || data['issuedAt'] instanceof String)) {
            throw new Error("Expected the field `issuedAt` to be a primitive type in the JSON string but got " + data['issuedAt']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['validFromDate'] && !(typeof data['validFromDate'] === 'string' || data['validFromDate'] instanceof String)) {
            throw new Error("Expected the field `validFromDate` to be a primitive type in the JSON string but got " + data['validFromDate']);
        }

        return true;
    }


}

CasteCertificateSchema.RequiredProperties = ["CertificateData", "IssuedBy", "IssuedTo", "issueDate", "issuedAt", "language", "name", "number", "status", "type", "validFromDate"];

/**
 * @member {module:model/CasteCertificateSchemaCertificateData} CertificateData
 */
CasteCertificateSchema.prototype['CertificateData'] = undefined;

/**
 * @member {module:model/CasteCertificateSchemaIssuedBy} IssuedBy
 */
CasteCertificateSchema.prototype['IssuedBy'] = undefined;

/**
 * @member {module:model/CasteCertificateSchemaIssuedTo} IssuedTo
 */
CasteCertificateSchema.prototype['IssuedTo'] = undefined;

/**
 * @member {String} expiryDate
 */
CasteCertificateSchema.prototype['expiryDate'] = undefined;

/**
 * @member {String} issueDate
 */
CasteCertificateSchema.prototype['issueDate'] = undefined;

/**
 * @member {String} issuedAt
 */
CasteCertificateSchema.prototype['issuedAt'] = undefined;

/**
 * @member {String} language
 */
CasteCertificateSchema.prototype['language'] = undefined;

/**
 * @member {String} name
 */
CasteCertificateSchema.prototype['name'] = undefined;

/**
 * @member {Number} number
 */
CasteCertificateSchema.prototype['number'] = undefined;

/**
 * @member {String} status
 */
CasteCertificateSchema.prototype['status'] = undefined;

/**
 * @member {String} type
 */
CasteCertificateSchema.prototype['type'] = undefined;

/**
 * @member {String} validFromDate
 */
CasteCertificateSchema.prototype['validFromDate'] = undefined;






export default CasteCertificateSchema;

