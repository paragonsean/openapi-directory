/**
 * eDistrict Odisha, Odisha
 * eDistrict Odisha (http://edistrictodisha.gov.in/) is the online service delivery portal for Odisha State Govt. Certain documents issued by it (e.g. Income, Caste, Residence Certificates etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICtcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICtcer_request_certificateParameters::OAICtcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICtcer_request_certificateParameters::OAICtcer_request_certificateParameters() {
    this->initializeModel();
}

OAICtcer_request_certificateParameters::~OAICtcer_request_certificateParameters() {}

void OAICtcer_request_certificateParameters::initializeModel() {

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_refno_isSet = false;
    m_refno_isValid = false;
}

void OAICtcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICtcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;

    m_refno_isValid = ::OpenAPI::fromJsonValue(m_refno, json[QString("refno")]);
    m_refno_isSet = !json[QString("refno")].isNull() && m_refno_isValid;
}

QString OAICtcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICtcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_refno_isSet) {
        obj.insert(QString("refno"), ::OpenAPI::toJsonValue(m_refno));
    }
    return obj;
}

QString OAICtcer_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAICtcer_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAICtcer_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAICtcer_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAICtcer_request_certificateParameters::getRefno() const {
    return m_refno;
}
void OAICtcer_request_certificateParameters::setRefno(const QString &refno) {
    m_refno = refno;
    m_refno_isSet = true;
}

bool OAICtcer_request_certificateParameters::is_refno_Set() const{
    return m_refno_isSet;
}

bool OAICtcer_request_certificateParameters::is_refno_Valid() const{
    return m_refno_isValid;
}

bool OAICtcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refno_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICtcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uid_isValid && m_refno_isValid && true;
}

} // namespace OpenAPI
