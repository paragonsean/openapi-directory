# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coursename: str=None, personalno: str=None, unit: str=None):
        """SkcerRequestCertificateParameters - a model defined in OpenAPI

        :param coursename: The coursename of this SkcerRequestCertificateParameters.
        :param personalno: The personalno of this SkcerRequestCertificateParameters.
        :param unit: The unit of this SkcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'coursename': str,
            'personalno': str,
            'unit': str
        }

        self.attribute_map = {
            'coursename': 'coursename',
            'personalno': 'personalno',
            'unit': 'unit'
        }

        self._coursename = coursename
        self._personalno = personalno
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The skcer_request_certificateParameters of this SkcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coursename(self):
        """Gets the coursename of this SkcerRequestCertificateParameters.

        coursename

        :return: The coursename of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._coursename

    @coursename.setter
    def coursename(self, coursename):
        """Sets the coursename of this SkcerRequestCertificateParameters.

        coursename

        :param coursename: The coursename of this SkcerRequestCertificateParameters.
        :type coursename: str
        """
        if coursename is None:
            raise ValueError("Invalid value for `coursename`, must not be `None`")

        self._coursename = coursename

    @property
    def personalno(self):
        """Gets the personalno of this SkcerRequestCertificateParameters.

        Personal No

        :return: The personalno of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._personalno

    @personalno.setter
    def personalno(self, personalno):
        """Sets the personalno of this SkcerRequestCertificateParameters.

        Personal No

        :param personalno: The personalno of this SkcerRequestCertificateParameters.
        :type personalno: str
        """
        if personalno is None:
            raise ValueError("Invalid value for `personalno`, must not be `None`")

        self._personalno = personalno

    @property
    def unit(self):
        """Gets the unit of this SkcerRequestCertificateParameters.

        Unit Name

        :return: The unit of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SkcerRequestCertificateParameters.

        Unit Name

        :param unit: The unit of this SkcerRequestCertificateParameters.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
