/**
 * Indian Navy (INS Valsura)
 * Certificates and Marksheets of the training conducted by Indian Navy are available to the Officers/ Sailors in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SkcerRequestCertificateParameters model module.
 * @module model/SkcerRequestCertificateParameters
 * @version 3.0.0
 */
class SkcerRequestCertificateParameters {
    /**
     * Constructs a new <code>SkcerRequestCertificateParameters</code>.
     * @alias module:model/SkcerRequestCertificateParameters
     * @param coursename {String} coursename
     * @param personalno {String} Personal No
     * @param unit {String} Unit Name
     */
    constructor(coursename, personalno, unit) { 
        
        SkcerRequestCertificateParameters.initialize(this, coursename, personalno, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, coursename, personalno, unit) { 
        obj['coursename'] = coursename;
        obj['personalno'] = personalno;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>SkcerRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkcerRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/SkcerRequestCertificateParameters} The populated <code>SkcerRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkcerRequestCertificateParameters();

            if (data.hasOwnProperty('coursename')) {
                obj['coursename'] = ApiClient.convertToType(data['coursename'], 'String');
            }
            if (data.hasOwnProperty('personalno')) {
                obj['personalno'] = ApiClient.convertToType(data['personalno'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkcerRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkcerRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SkcerRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['coursename'] && !(typeof data['coursename'] === 'string' || data['coursename'] instanceof String)) {
            throw new Error("Expected the field `coursename` to be a primitive type in the JSON string but got " + data['coursename']);
        }
        // ensure the json data is a string
        if (data['personalno'] && !(typeof data['personalno'] === 'string' || data['personalno'] instanceof String)) {
            throw new Error("Expected the field `personalno` to be a primitive type in the JSON string but got " + data['personalno']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

SkcerRequestCertificateParameters.RequiredProperties = ["coursename", "personalno", "unit"];

/**
 * coursename
 * @member {String} coursename
 */
SkcerRequestCertificateParameters.prototype['coursename'] = undefined;

/**
 * Personal No
 * @member {String} personalno
 */
SkcerRequestCertificateParameters.prototype['personalno'] = undefined;

/**
 * Unit Name
 * @member {String} unit
 */
SkcerRequestCertificateParameters.prototype['unit'] = undefined;






export default SkcerRequestCertificateParameters;

