/**
 * Transport Department, Andhra  Pradesh
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrivingLicenseSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrivingLicenseSchema::OAIDrivingLicenseSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrivingLicenseSchema::OAIDrivingLicenseSchema() {
    this->initializeModel();
}

OAIDrivingLicenseSchema::~OAIDrivingLicenseSchema() {}

void OAIDrivingLicenseSchema::initializeModel() {

    m_certificate_data_isSet = false;
    m_certificate_data_isValid = false;

    m_issued_by_isSet = false;
    m_issued_by_isValid = false;

    m_issued_to_isSet = false;
    m_issued_to_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_prev_number_isSet = false;
    m_prev_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valid_from_date_isSet = false;
    m_valid_from_date_isValid = false;
}

void OAIDrivingLicenseSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrivingLicenseSchema::fromJsonObject(QJsonObject json) {

    m_certificate_data_isValid = ::OpenAPI::fromJsonValue(m_certificate_data, json[QString("CertificateData")]);
    m_certificate_data_isSet = !json[QString("CertificateData")].isNull() && m_certificate_data_isValid;

    m_issued_by_isValid = ::OpenAPI::fromJsonValue(m_issued_by, json[QString("IssuedBy")]);
    m_issued_by_isSet = !json[QString("IssuedBy")].isNull() && m_issued_by_isValid;

    m_issued_to_isValid = ::OpenAPI::fromJsonValue(m_issued_to, json[QString("IssuedTo")]);
    m_issued_to_isSet = !json[QString("IssuedTo")].isNull() && m_issued_to_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("issuedAt")]);
    m_issued_at_isSet = !json[QString("issuedAt")].isNull() && m_issued_at_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_prev_number_isValid = ::OpenAPI::fromJsonValue(m_prev_number, json[QString("prevNumber")]);
    m_prev_number_isSet = !json[QString("prevNumber")].isNull() && m_prev_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valid_from_date_isValid = ::OpenAPI::fromJsonValue(m_valid_from_date, json[QString("validFromDate")]);
    m_valid_from_date_isSet = !json[QString("validFromDate")].isNull() && m_valid_from_date_isValid;
}

QString OAIDrivingLicenseSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrivingLicenseSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_data.isSet()) {
        obj.insert(QString("CertificateData"), ::OpenAPI::toJsonValue(m_certificate_data));
    }
    if (m_issued_by.isSet()) {
        obj.insert(QString("IssuedBy"), ::OpenAPI::toJsonValue(m_issued_by));
    }
    if (m_issued_to.isSet()) {
        obj.insert(QString("IssuedTo"), ::OpenAPI::toJsonValue(m_issued_to));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("issuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_prev_number_isSet) {
        obj.insert(QString("prevNumber"), ::OpenAPI::toJsonValue(m_prev_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valid_from_date_isSet) {
        obj.insert(QString("validFromDate"), ::OpenAPI::toJsonValue(m_valid_from_date));
    }
    return obj;
}

OAIDrivingLicenseSchema_CertificateData OAIDrivingLicenseSchema::getCertificateData() const {
    return m_certificate_data;
}
void OAIDrivingLicenseSchema::setCertificateData(const OAIDrivingLicenseSchema_CertificateData &certificate_data) {
    m_certificate_data = certificate_data;
    m_certificate_data_isSet = true;
}

bool OAIDrivingLicenseSchema::is_certificate_data_Set() const{
    return m_certificate_data_isSet;
}

bool OAIDrivingLicenseSchema::is_certificate_data_Valid() const{
    return m_certificate_data_isValid;
}

OAIDrivingLicenseSchema_IssuedBy OAIDrivingLicenseSchema::getIssuedBy() const {
    return m_issued_by;
}
void OAIDrivingLicenseSchema::setIssuedBy(const OAIDrivingLicenseSchema_IssuedBy &issued_by) {
    m_issued_by = issued_by;
    m_issued_by_isSet = true;
}

bool OAIDrivingLicenseSchema::is_issued_by_Set() const{
    return m_issued_by_isSet;
}

bool OAIDrivingLicenseSchema::is_issued_by_Valid() const{
    return m_issued_by_isValid;
}

OAIDrivingLicenseSchema_IssuedTo OAIDrivingLicenseSchema::getIssuedTo() const {
    return m_issued_to;
}
void OAIDrivingLicenseSchema::setIssuedTo(const OAIDrivingLicenseSchema_IssuedTo &issued_to) {
    m_issued_to = issued_to;
    m_issued_to_isSet = true;
}

bool OAIDrivingLicenseSchema::is_issued_to_Set() const{
    return m_issued_to_isSet;
}

bool OAIDrivingLicenseSchema::is_issued_to_Valid() const{
    return m_issued_to_isValid;
}

QString OAIDrivingLicenseSchema::getExpiryDate() const {
    return m_expiry_date;
}
void OAIDrivingLicenseSchema::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIDrivingLicenseSchema::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIDrivingLicenseSchema::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIDrivingLicenseSchema::getIssueDate() const {
    return m_issue_date;
}
void OAIDrivingLicenseSchema::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIDrivingLicenseSchema::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIDrivingLicenseSchema::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QString OAIDrivingLicenseSchema::getIssuedAt() const {
    return m_issued_at;
}
void OAIDrivingLicenseSchema::setIssuedAt(const QString &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIDrivingLicenseSchema::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIDrivingLicenseSchema::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QString OAIDrivingLicenseSchema::getLanguage() const {
    return m_language;
}
void OAIDrivingLicenseSchema::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDrivingLicenseSchema::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDrivingLicenseSchema::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIDrivingLicenseSchema::getName() const {
    return m_name;
}
void OAIDrivingLicenseSchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDrivingLicenseSchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDrivingLicenseSchema::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDrivingLicenseSchema::getNumber() const {
    return m_number;
}
void OAIDrivingLicenseSchema::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDrivingLicenseSchema::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDrivingLicenseSchema::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIDrivingLicenseSchema::getPrevNumber() const {
    return m_prev_number;
}
void OAIDrivingLicenseSchema::setPrevNumber(const qint32 &prev_number) {
    m_prev_number = prev_number;
    m_prev_number_isSet = true;
}

bool OAIDrivingLicenseSchema::is_prev_number_Set() const{
    return m_prev_number_isSet;
}

bool OAIDrivingLicenseSchema::is_prev_number_Valid() const{
    return m_prev_number_isValid;
}

QString OAIDrivingLicenseSchema::getStatus() const {
    return m_status;
}
void OAIDrivingLicenseSchema::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDrivingLicenseSchema::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDrivingLicenseSchema::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDrivingLicenseSchema::getType() const {
    return m_type;
}
void OAIDrivingLicenseSchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDrivingLicenseSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDrivingLicenseSchema::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDrivingLicenseSchema::getValidFromDate() const {
    return m_valid_from_date;
}
void OAIDrivingLicenseSchema::setValidFromDate(const QString &valid_from_date) {
    m_valid_from_date = valid_from_date;
    m_valid_from_date_isSet = true;
}

bool OAIDrivingLicenseSchema::is_valid_from_date_Set() const{
    return m_valid_from_date_isSet;
}

bool OAIDrivingLicenseSchema::is_valid_from_date_Valid() const{
    return m_valid_from_date_isValid;
}

bool OAIDrivingLicenseSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrivingLicenseSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_data_isValid && m_issued_by_isValid && m_issued_to_isValid && m_issue_date_isValid && m_issued_at_isValid && m_language_isValid && m_name_isValid && m_number_isValid && m_status_isValid && m_type_isValid && m_valid_from_date_isValid && true;
}

} // namespace OpenAPI
