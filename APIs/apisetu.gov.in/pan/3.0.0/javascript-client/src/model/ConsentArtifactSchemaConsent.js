/**
 * Income Tax Department
 * Income Tax Department, Govt of India has provided PAN Verification Records to Indian citizens via DigiLocker. You can verify the correctness of your PAN data in real-time using this facility.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsentArtifactSchemaConsentData from './ConsentArtifactSchemaConsentData';
import ConsentArtifactSchemaConsentPermission from './ConsentArtifactSchemaConsentPermission';
import ConsentArtifactSchemaConsentPurpose from './ConsentArtifactSchemaConsentPurpose';
import ConsentArtifactSchemaConsentUser from './ConsentArtifactSchemaConsentUser';

/**
 * The ConsentArtifactSchemaConsent model module.
 * @module model/ConsentArtifactSchemaConsent
 * @version 3.0.0
 */
class ConsentArtifactSchemaConsent {
    /**
     * Constructs a new <code>ConsentArtifactSchemaConsent</code>.
     * @alias module:model/ConsentArtifactSchemaConsent
     * @param consentId {String} A unique consent id in UUID format.
     * @param data {module:model/ConsentArtifactSchemaConsentData} 
     * @param dataConsumer {module:model/ConsentArtifactSchemaConsentData} 
     * @param dataProvider {module:model/ConsentArtifactSchemaConsentData} 
     * @param permission {module:model/ConsentArtifactSchemaConsentPermission} 
     * @param purpose {module:model/ConsentArtifactSchemaConsentPurpose} 
     * @param timestamp {Date} Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
     * @param user {module:model/ConsentArtifactSchemaConsentUser} 
     */
    constructor(consentId, data, dataConsumer, dataProvider, permission, purpose, timestamp, user) { 
        
        ConsentArtifactSchemaConsent.initialize(this, consentId, data, dataConsumer, dataProvider, permission, purpose, timestamp, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consentId, data, dataConsumer, dataProvider, permission, purpose, timestamp, user) { 
        obj['consentId'] = consentId;
        obj['data'] = data;
        obj['dataConsumer'] = dataConsumer;
        obj['dataProvider'] = dataProvider;
        obj['permission'] = permission;
        obj['purpose'] = purpose;
        obj['timestamp'] = timestamp;
        obj['user'] = user;
    }

    /**
     * Constructs a <code>ConsentArtifactSchemaConsent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsentArtifactSchemaConsent} obj Optional instance to populate.
     * @return {module:model/ConsentArtifactSchemaConsent} The populated <code>ConsentArtifactSchemaConsent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsentArtifactSchemaConsent();

            if (data.hasOwnProperty('consentId')) {
                obj['consentId'] = ApiClient.convertToType(data['consentId'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ConsentArtifactSchemaConsentData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('dataConsumer')) {
                obj['dataConsumer'] = ConsentArtifactSchemaConsentData.constructFromObject(data['dataConsumer']);
            }
            if (data.hasOwnProperty('dataProvider')) {
                obj['dataProvider'] = ConsentArtifactSchemaConsentData.constructFromObject(data['dataProvider']);
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ConsentArtifactSchemaConsentPermission.constructFromObject(data['permission']);
            }
            if (data.hasOwnProperty('purpose')) {
                obj['purpose'] = ConsentArtifactSchemaConsentPurpose.constructFromObject(data['purpose']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ConsentArtifactSchemaConsentUser.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsentArtifactSchemaConsent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsentArtifactSchemaConsent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConsentArtifactSchemaConsent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consentId'] && !(typeof data['consentId'] === 'string' || data['consentId'] instanceof String)) {
            throw new Error("Expected the field `consentId` to be a primitive type in the JSON string but got " + data['consentId']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          ConsentArtifactSchemaConsentData.validateJSON(data['data']);
        }
        // validate the optional field `dataConsumer`
        if (data['dataConsumer']) { // data not null
          ConsentArtifactSchemaConsentData.validateJSON(data['dataConsumer']);
        }
        // validate the optional field `dataProvider`
        if (data['dataProvider']) { // data not null
          ConsentArtifactSchemaConsentData.validateJSON(data['dataProvider']);
        }
        // validate the optional field `permission`
        if (data['permission']) { // data not null
          ConsentArtifactSchemaConsentPermission.validateJSON(data['permission']);
        }
        // validate the optional field `purpose`
        if (data['purpose']) { // data not null
          ConsentArtifactSchemaConsentPurpose.validateJSON(data['purpose']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          ConsentArtifactSchemaConsentUser.validateJSON(data['user']);
        }

        return true;
    }


}

ConsentArtifactSchemaConsent.RequiredProperties = ["consentId", "data", "dataConsumer", "dataProvider", "permission", "purpose", "timestamp", "user"];

/**
 * A unique consent id in UUID format.
 * @member {String} consentId
 */
ConsentArtifactSchemaConsent.prototype['consentId'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentData} data
 */
ConsentArtifactSchemaConsent.prototype['data'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentData} dataConsumer
 */
ConsentArtifactSchemaConsent.prototype['dataConsumer'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentData} dataProvider
 */
ConsentArtifactSchemaConsent.prototype['dataProvider'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentPermission} permission
 */
ConsentArtifactSchemaConsent.prototype['permission'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentPurpose} purpose
 */
ConsentArtifactSchemaConsent.prototype['purpose'] = undefined;

/**
 * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
 * @member {Date} timestamp
 */
ConsentArtifactSchemaConsent.prototype['timestamp'] = undefined;

/**
 * @member {module:model/ConsentArtifactSchemaConsentUser} user
 */
ConsentArtifactSchemaConsent.prototype['user'] = undefined;






export default ConsentArtifactSchemaConsent;

