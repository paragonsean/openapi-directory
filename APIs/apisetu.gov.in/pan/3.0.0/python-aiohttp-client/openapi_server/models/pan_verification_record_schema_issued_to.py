# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pan_verification_record_schema_issued_to_person import PANVerificationRecordSchemaIssuedToPerson
from openapi_server import util


class PANVerificationRecordSchemaIssuedTo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, person: PANVerificationRecordSchemaIssuedToPerson=None):
        """PANVerificationRecordSchemaIssuedTo - a model defined in OpenAPI

        :param person: The person of this PANVerificationRecordSchemaIssuedTo.
        """
        self.openapi_types = {
            'person': PANVerificationRecordSchemaIssuedToPerson
        }

        self.attribute_map = {
            'person': 'Person'
        }

        self._person = person

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PANVerificationRecordSchemaIssuedTo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PANVerificationRecordSchema_IssuedTo of this PANVerificationRecordSchemaIssuedTo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def person(self):
        """Gets the person of this PANVerificationRecordSchemaIssuedTo.


        :return: The person of this PANVerificationRecordSchemaIssuedTo.
        :rtype: PANVerificationRecordSchemaIssuedToPerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this PANVerificationRecordSchemaIssuedTo.


        :param person: The person of this PANVerificationRecordSchemaIssuedTo.
        :type person: PANVerificationRecordSchemaIssuedToPerson
        """
        if person is None:
            raise ValueError("Invalid value for `person`, must not be `None`")

        self._person = person
