# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PancrRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, full_name: str=None, gender: str=None, pan_full_name: str=None, uid: str=None, panno: str=None):
        """PancrRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this PancrRequestCertificateParameters.
        :param full_name: The full_name of this PancrRequestCertificateParameters.
        :param gender: The gender of this PancrRequestCertificateParameters.
        :param pan_full_name: The pan_full_name of this PancrRequestCertificateParameters.
        :param uid: The uid of this PancrRequestCertificateParameters.
        :param panno: The panno of this PancrRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'full_name': str,
            'gender': str,
            'pan_full_name': str,
            'uid': str,
            'panno': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'full_name': 'FullName',
            'gender': 'GENDER',
            'pan_full_name': 'PANFullName',
            'uid': 'UID',
            'panno': 'panno'
        }

        self._dob = dob
        self._full_name = full_name
        self._gender = gender
        self._pan_full_name = pan_full_name
        self._uid = uid
        self._panno = panno

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PancrRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pancr_request_certificateParameters of this PancrRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this PancrRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this PancrRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this PancrRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this PancrRequestCertificateParameters.

        Full name

        :return: The full_name of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PancrRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this PancrRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def gender(self):
        """Gets the gender of this PancrRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :return: The gender of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this PancrRequestCertificateParameters.

        Gender - M for male, F for female and O for other

        :param gender: The gender of this PancrRequestCertificateParameters.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")

        self._gender = gender

    @property
    def pan_full_name(self):
        """Gets the pan_full_name of this PancrRequestCertificateParameters.

        Name as in PAN Card

        :return: The pan_full_name of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._pan_full_name

    @pan_full_name.setter
    def pan_full_name(self, pan_full_name):
        """Sets the pan_full_name of this PancrRequestCertificateParameters.

        Name as in PAN Card

        :param pan_full_name: The pan_full_name of this PancrRequestCertificateParameters.
        :type pan_full_name: str
        """
        if pan_full_name is None:
            raise ValueError("Invalid value for `pan_full_name`, must not be `None`")

        self._pan_full_name = pan_full_name

    @property
    def uid(self):
        """Gets the uid of this PancrRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PancrRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this PancrRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def panno(self):
        """Gets the panno of this PancrRequestCertificateParameters.

        PAN No.

        :return: The panno of this PancrRequestCertificateParameters.
        :rtype: str
        """
        return self._panno

    @panno.setter
    def panno(self, panno):
        """Sets the panno of this PancrRequestCertificateParameters.

        PAN No.

        :param panno: The panno of this PancrRequestCertificateParameters.
        :type panno: str
        """
        if panno is None:
            raise ValueError("Invalid value for `panno`, must not be `None`")

        self._panno = panno
