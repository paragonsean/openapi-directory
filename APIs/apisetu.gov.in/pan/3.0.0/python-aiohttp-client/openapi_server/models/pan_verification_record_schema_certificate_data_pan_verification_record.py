# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PANVerificationRecordSchemaCertificateDataPANVerificationRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num: str=None, verified_on: str=None):
        """PANVerificationRecordSchemaCertificateDataPANVerificationRecord - a model defined in OpenAPI

        :param num: The num of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        :param verified_on: The verified_on of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        """
        self.openapi_types = {
            'num': str,
            'verified_on': str
        }

        self.attribute_map = {
            'num': 'num',
            'verified_on': 'verifiedOn'
        }

        self._num = num
        self._verified_on = verified_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PANVerificationRecordSchemaCertificateDataPANVerificationRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PANVerificationRecordSchema_CertificateData_PANVerificationRecord of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num(self):
        """Gets the num of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.


        :return: The num of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        :rtype: str
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.


        :param num: The num of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        :type num: str
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")
        if num is not None and len(num) < 1:
            raise ValueError("Invalid value for `num`, length must be greater than or equal to `1`")

        self._num = num

    @property
    def verified_on(self):
        """Gets the verified_on of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.


        :return: The verified_on of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        :rtype: str
        """
        return self._verified_on

    @verified_on.setter
    def verified_on(self, verified_on):
        """Sets the verified_on of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.


        :param verified_on: The verified_on of this PANVerificationRecordSchemaCertificateDataPANVerificationRecord.
        :type verified_on: str
        """
        if verified_on is None:
            raise ValueError("Invalid value for `verified_on`, must not be `None`")
        if verified_on is not None and len(verified_on) < 1:
            raise ValueError("Invalid value for `verified_on`, length must be greater than or equal to `1`")

        self._verified_on = verified_on
