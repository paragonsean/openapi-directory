/**
 * Directorate of Information Technology, Government of Tripura, Tripura
 * eDistrict Tripura (http://edistrict.tripura.gov.in/) is the online service delivery portal for TripuraState Govt. Certain documents issued by it (e.g. Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DirectorateOfInformationTechnologyGovernmentOfTripuraTripura);
  }
}(this, function(expect, DirectorateOfInformationTechnologyGovernmentOfTripuraTripura) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DirectorateOfInformationTechnologyGovernmentOfTripuraTripura.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('chcer', function() {
      it('should call chcer successfully', function(done) {
        //uncomment below and update the code to test chcer
        //instance.chcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dncer', function() {
      it('should call dncer successfully', function(done) {
        //uncomment below and update the code to test dncer
        //instance.dncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dpcer', function() {
      it('should call dpcer successfully', function(done) {
        //uncomment below and update the code to test dpcer
        //instance.dpcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fslcs', function() {
      it('should call fslcs successfully', function(done) {
        //uncomment below and update the code to test fslcs
        //instance.fslcs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('grred', function() {
      it('should call grred successfully', function(done) {
        //uncomment below and update the code to test grred
        //instance.grred(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incer', function() {
      it('should call incer successfully', function(done) {
        //uncomment below and update the code to test incer
        //instance.incer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('isoal', function() {
      it('should call isoal successfully', function(done) {
        //uncomment below and update the code to test isoal
        //instance.isoal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lvcer', function() {
      it('should call lvcer successfully', function(done) {
        //uncomment below and update the code to test lvcer
        //instance.lvcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('malcs', function() {
      it('should call malcs successfully', function(done) {
        //uncomment below and update the code to test malcs
        //instance.malcs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mpkby', function() {
      it('should call mpkby successfully', function(done) {
        //uncomment below and update the code to test mpkby
        //instance.mpkby(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('obcer', function() {
      it('should call obcer successfully', function(done) {
        //uncomment below and update the code to test obcer
        //instance.obcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ritin', function() {
      it('should call ritin successfully', function(done) {
        //uncomment below and update the code to test ritin
        //instance.ritin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rmcer', function() {
      it('should call rmcer successfully', function(done) {
        //uncomment below and update the code to test rmcer
        //instance.rmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rscer', function() {
      it('should call rscer successfully', function(done) {
        //uncomment below and update the code to test rscer
        //instance.rscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shcer', function() {
      it('should call shcer successfully', function(done) {
        //uncomment below and update the code to test shcer
        //instance.shcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('smcer', function() {
      it('should call smcer successfully', function(done) {
        //uncomment below and update the code to test smcer
        //instance.smcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sslcs', function() {
      it('should call sslcs successfully', function(done) {
        //uncomment below and update the code to test sslcs
        //instance.sslcs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vrwmi', function() {
      it('should call vrwmi successfully', function(done) {
        //uncomment below and update the code to test vrwmi
        //instance.vrwmi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
