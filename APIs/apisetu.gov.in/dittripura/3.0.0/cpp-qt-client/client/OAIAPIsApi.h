/**
 * Directorate of Information Technology, Government of Tripura, Tripura
 * eDistrict Tripura (http://edistrict.tripura.gov.in/) is the online service delivery portal for TripuraState Govt. Certain documents issued by it (e.g. Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChcer_400_response.h"
#include "OAIChcer_401_response.h"
#include "OAIChcer_404_response.h"
#include "OAIChcer_500_response.h"
#include "OAIChcer_502_response.h"
#include "OAIChcer_503_response.h"
#include "OAIChcer_504_response.h"
#include "OAIChcer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void chcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void dncer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void dpcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void fslcs(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void grred(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void isoal(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void lvcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void malcs(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void mpkby(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void obcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void ritin(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void rmcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void rscer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void shcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void smcer(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void sslcs(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());

    /**
    * @param[in]  oai_chcer_request OAIChcer_request [optional]
    */
    virtual void vrwmi(const ::OpenAPI::OptionalParam<OAIChcer_request> &oai_chcer_request = ::OpenAPI::OptionalParam<OAIChcer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chcerCallback(OAIHttpRequestWorker *worker);
    void dncerCallback(OAIHttpRequestWorker *worker);
    void dpcerCallback(OAIHttpRequestWorker *worker);
    void fslcsCallback(OAIHttpRequestWorker *worker);
    void grredCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);
    void isoalCallback(OAIHttpRequestWorker *worker);
    void lvcerCallback(OAIHttpRequestWorker *worker);
    void malcsCallback(OAIHttpRequestWorker *worker);
    void mpkbyCallback(OAIHttpRequestWorker *worker);
    void obcerCallback(OAIHttpRequestWorker *worker);
    void ritinCallback(OAIHttpRequestWorker *worker);
    void rmcerCallback(OAIHttpRequestWorker *worker);
    void rscerCallback(OAIHttpRequestWorker *worker);
    void shcerCallback(OAIHttpRequestWorker *worker);
    void smcerCallback(OAIHttpRequestWorker *worker);
    void sslcsCallback(OAIHttpRequestWorker *worker);
    void vrwmiCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chcerSignal();
    void dncerSignal();
    void dpcerSignal();
    void fslcsSignal();
    void grredSignal();
    void incerSignal();
    void isoalSignal();
    void lvcerSignal();
    void malcsSignal();
    void mpkbySignal();
    void obcerSignal();
    void ritinSignal();
    void rmcerSignal();
    void rscerSignal();
    void shcerSignal();
    void smcerSignal();
    void sslcsSignal();
    void vrwmiSignal();


    void chcerSignalFull(OAIHttpRequestWorker *worker);
    void dncerSignalFull(OAIHttpRequestWorker *worker);
    void dpcerSignalFull(OAIHttpRequestWorker *worker);
    void fslcsSignalFull(OAIHttpRequestWorker *worker);
    void grredSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);
    void isoalSignalFull(OAIHttpRequestWorker *worker);
    void lvcerSignalFull(OAIHttpRequestWorker *worker);
    void malcsSignalFull(OAIHttpRequestWorker *worker);
    void mpkbySignalFull(OAIHttpRequestWorker *worker);
    void obcerSignalFull(OAIHttpRequestWorker *worker);
    void ritinSignalFull(OAIHttpRequestWorker *worker);
    void rmcerSignalFull(OAIHttpRequestWorker *worker);
    void rscerSignalFull(OAIHttpRequestWorker *worker);
    void shcerSignalFull(OAIHttpRequestWorker *worker);
    void smcerSignalFull(OAIHttpRequestWorker *worker);
    void sslcsSignalFull(OAIHttpRequestWorker *worker);
    void vrwmiSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use chcerSignalError() instead")
    void chcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dncerSignalError() instead")
    void dncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalError() instead")
    void dpcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fslcsSignalError() instead")
    void fslcsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fslcsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grredSignalError() instead")
    void grredSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void grredSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use isoalSignalError() instead")
    void isoalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void isoalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lvcerSignalError() instead")
    void lvcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lvcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use malcsSignalError() instead")
    void malcsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void malcsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mpkbySignalError() instead")
    void mpkbySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mpkbySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalError() instead")
    void obcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ritinSignalError() instead")
    void ritinSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ritinSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalError() instead")
    void rmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalError() instead")
    void rscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalError() instead")
    void shcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smcerSignalError() instead")
    void smcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void smcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sslcsSignalError() instead")
    void sslcsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sslcsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vrwmiSignalError() instead")
    void vrwmiSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vrwmiSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chcerSignalErrorFull() instead")
    void chcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dncerSignalErrorFull() instead")
    void dncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpcerSignalErrorFull() instead")
    void dpcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fslcsSignalErrorFull() instead")
    void fslcsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fslcsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grredSignalErrorFull() instead")
    void grredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void grredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use isoalSignalErrorFull() instead")
    void isoalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void isoalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lvcerSignalErrorFull() instead")
    void lvcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lvcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use malcsSignalErrorFull() instead")
    void malcsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void malcsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mpkbySignalErrorFull() instead")
    void mpkbySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mpkbySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalErrorFull() instead")
    void obcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ritinSignalErrorFull() instead")
    void ritinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ritinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalErrorFull() instead")
    void rmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalErrorFull() instead")
    void rscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalErrorFull() instead")
    void shcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smcerSignalErrorFull() instead")
    void smcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sslcsSignalErrorFull() instead")
    void sslcsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sslcsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vrwmiSignalErrorFull() instead")
    void vrwmiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vrwmiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
