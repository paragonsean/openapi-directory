/**
 * Ministry of Petroleum and Natural Gas(BPCL)
 * eSubscription Voucher for LPG connections provided by BPCL (https://bharatpetroleum.com/) are made available to citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LpgsvRequestCertificateParameters model module.
 * @module model/LpgsvRequestCertificateParameters
 * @version 3.0.0
 */
class LpgsvRequestCertificateParameters {
    /**
     * Constructs a new <code>LpgsvRequestCertificateParameters</code>.
     * @alias module:model/LpgsvRequestCertificateParameters
     * @param LPGID {String} LPG ID
     * @param SVID {String} SV ID
     */
    constructor(LPGID, SVID) { 
        
        LpgsvRequestCertificateParameters.initialize(this, LPGID, SVID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, LPGID, SVID) { 
        obj['LPGID'] = LPGID;
        obj['SVID'] = SVID;
    }

    /**
     * Constructs a <code>LpgsvRequestCertificateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LpgsvRequestCertificateParameters} obj Optional instance to populate.
     * @return {module:model/LpgsvRequestCertificateParameters} The populated <code>LpgsvRequestCertificateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LpgsvRequestCertificateParameters();

            if (data.hasOwnProperty('LPGID')) {
                obj['LPGID'] = ApiClient.convertToType(data['LPGID'], 'String');
            }
            if (data.hasOwnProperty('SVID')) {
                obj['SVID'] = ApiClient.convertToType(data['SVID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LpgsvRequestCertificateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LpgsvRequestCertificateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LpgsvRequestCertificateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['LPGID'] && !(typeof data['LPGID'] === 'string' || data['LPGID'] instanceof String)) {
            throw new Error("Expected the field `LPGID` to be a primitive type in the JSON string but got " + data['LPGID']);
        }
        // ensure the json data is a string
        if (data['SVID'] && !(typeof data['SVID'] === 'string' || data['SVID'] instanceof String)) {
            throw new Error("Expected the field `SVID` to be a primitive type in the JSON string but got " + data['SVID']);
        }

        return true;
    }


}

LpgsvRequestCertificateParameters.RequiredProperties = ["LPGID", "SVID"];

/**
 * LPG ID
 * @member {String} LPGID
 */
LpgsvRequestCertificateParameters.prototype['LPGID'] = undefined;

/**
 * SV ID
 * @member {String} SVID
 */
LpgsvRequestCertificateParameters.prototype['SVID'] = undefined;






export default LpgsvRequestCertificateParameters;

