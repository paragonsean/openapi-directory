/**
 * Ministry of Petroleum and Natural Gas(BPCL)
 * eSubscription Voucher for LPG connections provided by BPCL (https://bharatpetroleum.com/) are made available to citizens in their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILpgsv_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILpgsv_request_certificateParameters::OAILpgsv_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILpgsv_request_certificateParameters::OAILpgsv_request_certificateParameters() {
    this->initializeModel();
}

OAILpgsv_request_certificateParameters::~OAILpgsv_request_certificateParameters() {}

void OAILpgsv_request_certificateParameters::initializeModel() {

    m_lpgid_isSet = false;
    m_lpgid_isValid = false;

    m_svid_isSet = false;
    m_svid_isValid = false;
}

void OAILpgsv_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILpgsv_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_lpgid_isValid = ::OpenAPI::fromJsonValue(m_lpgid, json[QString("LPGID")]);
    m_lpgid_isSet = !json[QString("LPGID")].isNull() && m_lpgid_isValid;

    m_svid_isValid = ::OpenAPI::fromJsonValue(m_svid, json[QString("SVID")]);
    m_svid_isSet = !json[QString("SVID")].isNull() && m_svid_isValid;
}

QString OAILpgsv_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILpgsv_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_lpgid_isSet) {
        obj.insert(QString("LPGID"), ::OpenAPI::toJsonValue(m_lpgid));
    }
    if (m_svid_isSet) {
        obj.insert(QString("SVID"), ::OpenAPI::toJsonValue(m_svid));
    }
    return obj;
}

QString OAILpgsv_request_certificateParameters::getLpgid() const {
    return m_lpgid;
}
void OAILpgsv_request_certificateParameters::setLpgid(const QString &lpgid) {
    m_lpgid = lpgid;
    m_lpgid_isSet = true;
}

bool OAILpgsv_request_certificateParameters::is_lpgid_Set() const{
    return m_lpgid_isSet;
}

bool OAILpgsv_request_certificateParameters::is_lpgid_Valid() const{
    return m_lpgid_isValid;
}

QString OAILpgsv_request_certificateParameters::getSvid() const {
    return m_svid;
}
void OAILpgsv_request_certificateParameters::setSvid(const QString &svid) {
    m_svid = svid;
    m_svid_isSet = true;
}

bool OAILpgsv_request_certificateParameters::is_svid_Set() const{
    return m_svid_isSet;
}

bool OAILpgsv_request_certificateParameters::is_svid_Valid() const{
    return m_svid_isValid;
}

bool OAILpgsv_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lpgid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILpgsv_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lpgid_isValid && m_svid_isValid && true;
}

} // namespace OpenAPI
