# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LpgsvRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lpgid: str=None, svid: str=None):
        """LpgsvRequestCertificateParameters - a model defined in OpenAPI

        :param lpgid: The lpgid of this LpgsvRequestCertificateParameters.
        :param svid: The svid of this LpgsvRequestCertificateParameters.
        """
        self.openapi_types = {
            'lpgid': str,
            'svid': str
        }

        self.attribute_map = {
            'lpgid': 'LPGID',
            'svid': 'SVID'
        }

        self._lpgid = lpgid
        self._svid = svid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LpgsvRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The lpgsv_request_certificateParameters of this LpgsvRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lpgid(self):
        """Gets the lpgid of this LpgsvRequestCertificateParameters.

        LPG ID

        :return: The lpgid of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._lpgid

    @lpgid.setter
    def lpgid(self, lpgid):
        """Sets the lpgid of this LpgsvRequestCertificateParameters.

        LPG ID

        :param lpgid: The lpgid of this LpgsvRequestCertificateParameters.
        :type lpgid: str
        """
        if lpgid is None:
            raise ValueError("Invalid value for `lpgid`, must not be `None`")

        self._lpgid = lpgid

    @property
    def svid(self):
        """Gets the svid of this LpgsvRequestCertificateParameters.

        SV ID

        :return: The svid of this LpgsvRequestCertificateParameters.
        :rtype: str
        """
        return self._svid

    @svid.setter
    def svid(self, svid):
        """Sets the svid of this LpgsvRequestCertificateParameters.

        SV ID

        :param svid: The svid of this LpgsvRequestCertificateParameters.
        :type svid: str
        """
        if svid is None:
            raise ValueError("Invalid value for `svid`, must not be `None`")

        self._svid = svid
