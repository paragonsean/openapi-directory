# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SocerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appl_no: str=None, dob: str=None, full_name: str=None, session: str=None):
        """SocerRequestCertificateParameters - a model defined in OpenAPI

        :param appl_no: The appl_no of this SocerRequestCertificateParameters.
        :param dob: The dob of this SocerRequestCertificateParameters.
        :param full_name: The full_name of this SocerRequestCertificateParameters.
        :param session: The session of this SocerRequestCertificateParameters.
        """
        self.openapi_types = {
            'appl_no': str,
            'dob': str,
            'full_name': str,
            'session': str
        }

        self.attribute_map = {
            'appl_no': 'APPL_NO',
            'dob': 'DOB',
            'full_name': 'FullName',
            'session': 'SESSION'
        }

        self._appl_no = appl_no
        self._dob = dob
        self._full_name = full_name
        self._session = session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SocerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The socer_request_certificateParameters of this SocerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appl_no(self):
        """Gets the appl_no of this SocerRequestCertificateParameters.

        Application No

        :return: The appl_no of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._appl_no

    @appl_no.setter
    def appl_no(self, appl_no):
        """Sets the appl_no of this SocerRequestCertificateParameters.

        Application No

        :param appl_no: The appl_no of this SocerRequestCertificateParameters.
        :type appl_no: str
        """
        if appl_no is None:
            raise ValueError("Invalid value for `appl_no`, must not be `None`")

        self._appl_no = appl_no

    @property
    def dob(self):
        """Gets the dob of this SocerRequestCertificateParameters.

        Date of birth

        :return: The dob of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this SocerRequestCertificateParameters.

        Date of birth

        :param dob: The dob of this SocerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def full_name(self):
        """Gets the full_name of this SocerRequestCertificateParameters.

        Name

        :return: The full_name of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SocerRequestCertificateParameters.

        Name

        :param full_name: The full_name of this SocerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def session(self):
        """Gets the session of this SocerRequestCertificateParameters.

        Session

        :return: The session of this SocerRequestCertificateParameters.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this SocerRequestCertificateParameters.

        Session

        :param session: The session of this SocerRequestCertificateParameters.
        :type session: str
        """
        if session is None:
            raise ValueError("Invalid value for `session`, must not be `None`")

        self._session = session
