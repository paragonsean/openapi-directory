# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.academic_certificate_schema_certificate_data_examination import AcademicCertificateSchemaCertificateDataExamination
from openapi_server.models.academic_certificate_schema_certificate_data_performance import AcademicCertificateSchemaCertificateDataPerformance
from openapi_server.models.academic_certificate_schema_certificate_data_school import AcademicCertificateSchemaCertificateDataSchool
from openapi_server import util


class AcademicCertificateSchemaCertificateData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, examination: AcademicCertificateSchemaCertificateDataExamination=None, performance: AcademicCertificateSchemaCertificateDataPerformance=None, school: AcademicCertificateSchemaCertificateDataSchool=None):
        """AcademicCertificateSchemaCertificateData - a model defined in OpenAPI

        :param examination: The examination of this AcademicCertificateSchemaCertificateData.
        :param performance: The performance of this AcademicCertificateSchemaCertificateData.
        :param school: The school of this AcademicCertificateSchemaCertificateData.
        """
        self.openapi_types = {
            'examination': AcademicCertificateSchemaCertificateDataExamination,
            'performance': AcademicCertificateSchemaCertificateDataPerformance,
            'school': AcademicCertificateSchemaCertificateDataSchool
        }

        self.attribute_map = {
            'examination': 'Examination',
            'performance': 'Performance',
            'school': 'School'
        }

        self._examination = examination
        self._performance = performance
        self._school = school

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcademicCertificateSchemaCertificateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcademicCertificateSchema_CertificateData of this AcademicCertificateSchemaCertificateData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def examination(self):
        """Gets the examination of this AcademicCertificateSchemaCertificateData.


        :return: The examination of this AcademicCertificateSchemaCertificateData.
        :rtype: AcademicCertificateSchemaCertificateDataExamination
        """
        return self._examination

    @examination.setter
    def examination(self, examination):
        """Sets the examination of this AcademicCertificateSchemaCertificateData.


        :param examination: The examination of this AcademicCertificateSchemaCertificateData.
        :type examination: AcademicCertificateSchemaCertificateDataExamination
        """
        if examination is None:
            raise ValueError("Invalid value for `examination`, must not be `None`")

        self._examination = examination

    @property
    def performance(self):
        """Gets the performance of this AcademicCertificateSchemaCertificateData.


        :return: The performance of this AcademicCertificateSchemaCertificateData.
        :rtype: AcademicCertificateSchemaCertificateDataPerformance
        """
        return self._performance

    @performance.setter
    def performance(self, performance):
        """Sets the performance of this AcademicCertificateSchemaCertificateData.


        :param performance: The performance of this AcademicCertificateSchemaCertificateData.
        :type performance: AcademicCertificateSchemaCertificateDataPerformance
        """
        if performance is None:
            raise ValueError("Invalid value for `performance`, must not be `None`")

        self._performance = performance

    @property
    def school(self):
        """Gets the school of this AcademicCertificateSchemaCertificateData.


        :return: The school of this AcademicCertificateSchemaCertificateData.
        :rtype: AcademicCertificateSchemaCertificateDataSchool
        """
        return self._school

    @school.setter
    def school(self, school):
        """Sets the school of this AcademicCertificateSchemaCertificateData.


        :param school: The school of this AcademicCertificateSchemaCertificateData.
        :type school: AcademicCertificateSchemaCertificateDataSchool
        """
        if school is None:
            raise ValueError("Invalid value for `school`, must not be `None`")

        self._school = school
