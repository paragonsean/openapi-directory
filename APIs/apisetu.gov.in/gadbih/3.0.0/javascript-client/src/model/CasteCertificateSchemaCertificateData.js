/**
 * General Administration Department, Bihar
 * General Administration Department, Bihar (http://gad.bih.nic.in/) is LIVE with DigiLocker. You can fetch your EWS certificate into your DigiLocker user account.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CasteCertificateSchemaCertificateData model module.
 * @module model/CasteCertificateSchemaCertificateData
 * @version 3.0.0
 */
class CasteCertificateSchemaCertificateData {
    /**
     * Constructs a new <code>CasteCertificateSchemaCertificateData</code>.
     * @alias module:model/CasteCertificateSchemaCertificateData
     * @param category {module:model/CasteCertificateSchemaCertificateData.CategoryEnum} 
     * @param description {String} 
     * @param name {String} 
     * @param subCategory {String} 
     */
    constructor(category, description, name, subCategory) { 
        
        CasteCertificateSchemaCertificateData.initialize(this, category, description, name, subCategory);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, description, name, subCategory) { 
        obj['category'] = category;
        obj['description'] = description;
        obj['name'] = name;
        obj['subCategory'] = subCategory;
    }

    /**
     * Constructs a <code>CasteCertificateSchemaCertificateData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CasteCertificateSchemaCertificateData} obj Optional instance to populate.
     * @return {module:model/CasteCertificateSchemaCertificateData} The populated <code>CasteCertificateSchemaCertificateData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CasteCertificateSchemaCertificateData();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('subCategory')) {
                obj['subCategory'] = ApiClient.convertToType(data['subCategory'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CasteCertificateSchemaCertificateData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CasteCertificateSchemaCertificateData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CasteCertificateSchemaCertificateData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['subCategory'] && !(typeof data['subCategory'] === 'string' || data['subCategory'] instanceof String)) {
            throw new Error("Expected the field `subCategory` to be a primitive type in the JSON string but got " + data['subCategory']);
        }

        return true;
    }


}

CasteCertificateSchemaCertificateData.RequiredProperties = ["category", "description", "name", "subCategory"];

/**
 * @member {module:model/CasteCertificateSchemaCertificateData.CategoryEnum} category
 */
CasteCertificateSchemaCertificateData.prototype['category'] = undefined;

/**
 * @member {String} description
 */
CasteCertificateSchemaCertificateData.prototype['description'] = undefined;

/**
 * @member {String} name
 */
CasteCertificateSchemaCertificateData.prototype['name'] = undefined;

/**
 * @member {String} subCategory
 */
CasteCertificateSchemaCertificateData.prototype['subCategory'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
CasteCertificateSchemaCertificateData['CategoryEnum'] = {

    /**
     * value: "SC"
     * @const
     */
    "SC": "SC",

    /**
     * value: "ST"
     * @const
     */
    "ST": "ST",

    /**
     * value: "OBC"
     * @const
     */
    "OBC": "OBC",

    /**
     * value: "GC"
     * @const
     */
    "GC": "GC"
};



export default CasteCertificateSchemaCertificateData;

