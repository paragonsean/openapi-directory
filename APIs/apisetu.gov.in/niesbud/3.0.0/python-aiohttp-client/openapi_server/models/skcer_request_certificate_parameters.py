# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_no: str=None, full_name: str=None, certificate_type: str=None):
        """SkcerRequestCertificateParameters - a model defined in OpenAPI

        :param course_no: The course_no of this SkcerRequestCertificateParameters.
        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        :param certificate_type: The certificate_type of this SkcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'course_no': str,
            'full_name': str,
            'certificate_type': str
        }

        self.attribute_map = {
            'course_no': 'COURSE_NO',
            'full_name': 'FullName',
            'certificate_type': 'certificate_type'
        }

        self._course_no = course_no
        self._full_name = full_name
        self._certificate_type = certificate_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The skcer_request_certificateParameters of this SkcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_no(self):
        """Gets the course_no of this SkcerRequestCertificateParameters.

        CERTIFICATE NO

        :return: The course_no of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._course_no

    @course_no.setter
    def course_no(self, course_no):
        """Sets the course_no of this SkcerRequestCertificateParameters.

        CERTIFICATE NO

        :param course_no: The course_no of this SkcerRequestCertificateParameters.
        :type course_no: str
        """
        if course_no is None:
            raise ValueError("Invalid value for `course_no`, must not be `None`")

        self._course_no = course_no

    @property
    def full_name(self):
        """Gets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :return: The full_name of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this SkcerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this SkcerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def certificate_type(self):
        """Gets the certificate_type of this SkcerRequestCertificateParameters.

        CERTIFICATE TYPE

        :return: The certificate_type of this SkcerRequestCertificateParameters.
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this SkcerRequestCertificateParameters.

        CERTIFICATE TYPE

        :param certificate_type: The certificate_type of this SkcerRequestCertificateParameters.
        :type certificate_type: str
        """
        if certificate_type is None:
            raise ValueError("Invalid value for `certificate_type`, must not be `None`")

        self._certificate_type = certificate_type
