/*
 * eDistrict Himachal Pradesh, Himachal Pradesh
 * eDistrict Himachal (http://edistrict.hp.gov.in/) is the online service delivery portal for Himachal Pradesh State Govt. Certain documents issued by it (e.g. Birth, Income, Caste, Agriculturist, Bonafide Himachali Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Aecmw400Response;
import org.openapitools.client.model.Aecmw401Response;
import org.openapitools.client.model.Aecmw404Response;
import org.openapitools.client.model.Aecmw500Response;
import org.openapitools.client.model.Aecmw502Response;
import org.openapitools.client.model.Aecmw503Response;
import org.openapitools.client.model.Aecmw504Response;
import org.openapitools.client.model.AecmwRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApisApi
 */
@Disabled
public class ApisApiTest {

    private final ApisApi api = new ApisApi();

    /**
     * Application for Renewal of Contractor Migrant Workmen license
     *
     * API to verify Application for Renewal of Contractor Migrant Workmen license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aecmwTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.aecmw(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Application for Renewal of Motor Transport Worker Registration
     *
     * API to verify Application for Renewal of Motor Transport Worker Registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aemtwTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.aemtw(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Agriculture/ Agriculturist Certificate
     *
     * API to verify Agriculture/ Agriculturist Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void agcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.agcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Application for License for Inter State Migrant Workmen
     *
     * API to verify Application for License for Inter State Migrant Workmen.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alimwTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.alimw(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Application for Registration of Contractor Migrant Workmen license
     *
     * API to verify Application for Registration of Contractor Migrant Workmen license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void arcmwTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.arcmw(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Application for Registration of Motor Transport Worker Registration
     *
     * API to verify Application for Registration of Motor Transport Worker Registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void armtwTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.armtw(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Backward Area Certificate
     *
     * API to verify Backward Area Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bacerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.bacer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Bonafide Certificate
     *
     * API to verify Bonafide Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bhcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.bhcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * BPL Card
     *
     * API to verify BPL Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bpcrdTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.bpcrd(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Birth Certificate
     *
     * API to verify Birth Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void btcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.btcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Renewal Certificate of Contract Labour License
     *
     * API to verify Renewal Certificate of Contract Labour License.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cecerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.cecer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Character Certificate
     *
     * API to verify Character Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.chcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Registration Certificate for Contract Labour License
     *
     * API to verify Registration Certificate for Contract Labour License.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.clcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Copy of Pariwar Register
     *
     * API to verify Copy of Pariwar Register.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void coprgTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.coprg(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Dogra Class Certificate
     *
     * API to verify Dogra Class Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dccerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.dccer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Domicile Certificate
     *
     * API to verify Domicile Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dmcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.dmcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Disabled Person Identity Card/ Certificate
     *
     * API to verify Disabled Person Identity Card/ Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dpicrTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.dpicr(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Death Certificate
     *
     * API to verify Death Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dtcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.dtcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Registration Certificate of Establishment Employing Contract Labour
     *
     * API to verify Registration Certificate of Establishment Employing Contract Labour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ercerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.ercer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Freedom Fighter Certificate
     *
     * API to verify Freedom Fighter Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ffcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.ffcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Indigent (Needy Person) Certificate
     *
     * API to verify Indigent (Needy Person) Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void igcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.igcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Income Certificate
     *
     * API to verify Income Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.incer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Legal Heir Certificate
     *
     * API to verify Legal Heir Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lhcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.lhcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Minority Certificate
     *
     * API to verify Minority Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mncerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.mncer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * MNREGA Job Card
     *
     * API to verify MNREGA Job Card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mnrgaTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.mnrga(aecmwRequest);
        // TODO: test validations
    }

    /**
     * OBC Certificate
     *
     * API to verify OBC Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void obcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.obcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Rural Area Certificate
     *
     * API to verify Rural Area Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void racerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.racer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Marriage Certificate
     *
     * API to verify Marriage Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rmcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.rmcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Renewal Certificate of Shops And Commercial Establishment
     *
     * API to verify Renewal Certificate of Shops And Commercial Establishment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void secerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.secer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * SC/ST  Certificate
     *
     * API to verify SC/ST  Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.shcer(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Senior Citizen Identity Card/ Certificate
     *
     * API to verify Senior Citizen Identity Card/ Certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sicrdTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.sicrd(aecmwRequest);
        // TODO: test validations
    }

    /**
     * Registration Certificate of Shops And Commercial Establishment
     *
     * API to verify Registration Certificate of Shops And Commercial Establishment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void srcerTest() throws ApiException {
        AecmwRequest aecmwRequest = null;
        api.srcer(aecmwRequest);
        // TODO: test validations
    }

}
