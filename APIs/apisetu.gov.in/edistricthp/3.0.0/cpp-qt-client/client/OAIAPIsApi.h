/**
 * eDistrict Himachal Pradesh, Himachal Pradesh
 * eDistrict Himachal (http://edistrict.hp.gov.in/) is the online service delivery portal for Himachal Pradesh State Govt. Certain documents issued by it (e.g. Birth, Income, Caste, Agriculturist, Bonafide Himachali Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAecmw_400_response.h"
#include "OAIAecmw_401_response.h"
#include "OAIAecmw_404_response.h"
#include "OAIAecmw_500_response.h"
#include "OAIAecmw_502_response.h"
#include "OAIAecmw_503_response.h"
#include "OAIAecmw_504_response.h"
#include "OAIAecmw_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void aecmw(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void aemtw(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void agcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void alimw(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void arcmw(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void armtw(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void bacer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void bhcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void bpcrd(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void btcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void cecer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void chcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void clcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void coprg(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void dccer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void dmcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void dpicr(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void dtcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void ercer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void ffcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void igcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void incer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void lhcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void mncer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void mnrga(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void obcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void racer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void rmcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void secer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void shcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void sicrd(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());

    /**
    * @param[in]  oai_aecmw_request OAIAecmw_request [optional]
    */
    virtual void srcer(const ::OpenAPI::OptionalParam<OAIAecmw_request> &oai_aecmw_request = ::OpenAPI::OptionalParam<OAIAecmw_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aecmwCallback(OAIHttpRequestWorker *worker);
    void aemtwCallback(OAIHttpRequestWorker *worker);
    void agcerCallback(OAIHttpRequestWorker *worker);
    void alimwCallback(OAIHttpRequestWorker *worker);
    void arcmwCallback(OAIHttpRequestWorker *worker);
    void armtwCallback(OAIHttpRequestWorker *worker);
    void bacerCallback(OAIHttpRequestWorker *worker);
    void bhcerCallback(OAIHttpRequestWorker *worker);
    void bpcrdCallback(OAIHttpRequestWorker *worker);
    void btcerCallback(OAIHttpRequestWorker *worker);
    void cecerCallback(OAIHttpRequestWorker *worker);
    void chcerCallback(OAIHttpRequestWorker *worker);
    void clcerCallback(OAIHttpRequestWorker *worker);
    void coprgCallback(OAIHttpRequestWorker *worker);
    void dccerCallback(OAIHttpRequestWorker *worker);
    void dmcerCallback(OAIHttpRequestWorker *worker);
    void dpicrCallback(OAIHttpRequestWorker *worker);
    void dtcerCallback(OAIHttpRequestWorker *worker);
    void ercerCallback(OAIHttpRequestWorker *worker);
    void ffcerCallback(OAIHttpRequestWorker *worker);
    void igcerCallback(OAIHttpRequestWorker *worker);
    void incerCallback(OAIHttpRequestWorker *worker);
    void lhcerCallback(OAIHttpRequestWorker *worker);
    void mncerCallback(OAIHttpRequestWorker *worker);
    void mnrgaCallback(OAIHttpRequestWorker *worker);
    void obcerCallback(OAIHttpRequestWorker *worker);
    void racerCallback(OAIHttpRequestWorker *worker);
    void rmcerCallback(OAIHttpRequestWorker *worker);
    void secerCallback(OAIHttpRequestWorker *worker);
    void shcerCallback(OAIHttpRequestWorker *worker);
    void sicrdCallback(OAIHttpRequestWorker *worker);
    void srcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aecmwSignal();
    void aemtwSignal();
    void agcerSignal();
    void alimwSignal();
    void arcmwSignal();
    void armtwSignal();
    void bacerSignal();
    void bhcerSignal();
    void bpcrdSignal();
    void btcerSignal();
    void cecerSignal();
    void chcerSignal();
    void clcerSignal();
    void coprgSignal();
    void dccerSignal();
    void dmcerSignal();
    void dpicrSignal();
    void dtcerSignal();
    void ercerSignal();
    void ffcerSignal();
    void igcerSignal();
    void incerSignal();
    void lhcerSignal();
    void mncerSignal();
    void mnrgaSignal();
    void obcerSignal();
    void racerSignal();
    void rmcerSignal();
    void secerSignal();
    void shcerSignal();
    void sicrdSignal();
    void srcerSignal();


    void aecmwSignalFull(OAIHttpRequestWorker *worker);
    void aemtwSignalFull(OAIHttpRequestWorker *worker);
    void agcerSignalFull(OAIHttpRequestWorker *worker);
    void alimwSignalFull(OAIHttpRequestWorker *worker);
    void arcmwSignalFull(OAIHttpRequestWorker *worker);
    void armtwSignalFull(OAIHttpRequestWorker *worker);
    void bacerSignalFull(OAIHttpRequestWorker *worker);
    void bhcerSignalFull(OAIHttpRequestWorker *worker);
    void bpcrdSignalFull(OAIHttpRequestWorker *worker);
    void btcerSignalFull(OAIHttpRequestWorker *worker);
    void cecerSignalFull(OAIHttpRequestWorker *worker);
    void chcerSignalFull(OAIHttpRequestWorker *worker);
    void clcerSignalFull(OAIHttpRequestWorker *worker);
    void coprgSignalFull(OAIHttpRequestWorker *worker);
    void dccerSignalFull(OAIHttpRequestWorker *worker);
    void dmcerSignalFull(OAIHttpRequestWorker *worker);
    void dpicrSignalFull(OAIHttpRequestWorker *worker);
    void dtcerSignalFull(OAIHttpRequestWorker *worker);
    void ercerSignalFull(OAIHttpRequestWorker *worker);
    void ffcerSignalFull(OAIHttpRequestWorker *worker);
    void igcerSignalFull(OAIHttpRequestWorker *worker);
    void incerSignalFull(OAIHttpRequestWorker *worker);
    void lhcerSignalFull(OAIHttpRequestWorker *worker);
    void mncerSignalFull(OAIHttpRequestWorker *worker);
    void mnrgaSignalFull(OAIHttpRequestWorker *worker);
    void obcerSignalFull(OAIHttpRequestWorker *worker);
    void racerSignalFull(OAIHttpRequestWorker *worker);
    void rmcerSignalFull(OAIHttpRequestWorker *worker);
    void secerSignalFull(OAIHttpRequestWorker *worker);
    void shcerSignalFull(OAIHttpRequestWorker *worker);
    void sicrdSignalFull(OAIHttpRequestWorker *worker);
    void srcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use aecmwSignalError() instead")
    void aecmwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void aecmwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aemtwSignalError() instead")
    void aemtwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void aemtwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agcerSignalError() instead")
    void agcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void agcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alimwSignalError() instead")
    void alimwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alimwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use arcmwSignalError() instead")
    void arcmwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void arcmwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use armtwSignalError() instead")
    void armtwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void armtwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bacerSignalError() instead")
    void bacerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bacerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bhcerSignalError() instead")
    void bhcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bhcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bpcrdSignalError() instead")
    void bpcrdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bpcrdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use btcerSignalError() instead")
    void btcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cecerSignalError() instead")
    void cecerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cecerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chcerSignalError() instead")
    void chcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clcerSignalError() instead")
    void clcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coprgSignalError() instead")
    void coprgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void coprgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dccerSignalError() instead")
    void dccerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dccerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalError() instead")
    void dmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpicrSignalError() instead")
    void dpicrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dpicrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalError() instead")
    void dtcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ercerSignalError() instead")
    void ercerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ercerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ffcerSignalError() instead")
    void ffcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ffcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use igcerSignalError() instead")
    void igcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void igcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalError() instead")
    void incerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalError() instead")
    void lhcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalError() instead")
    void mncerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mnrgaSignalError() instead")
    void mnrgaSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mnrgaSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalError() instead")
    void obcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalError() instead")
    void racerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalError() instead")
    void rmcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secerSignalError() instead")
    void secerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void secerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalError() instead")
    void shcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sicrdSignalError() instead")
    void sicrdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sicrdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use srcerSignalError() instead")
    void srcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void srcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aecmwSignalErrorFull() instead")
    void aecmwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aecmwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aemtwSignalErrorFull() instead")
    void aemtwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aemtwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agcerSignalErrorFull() instead")
    void agcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alimwSignalErrorFull() instead")
    void alimwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alimwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use arcmwSignalErrorFull() instead")
    void arcmwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void arcmwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use armtwSignalErrorFull() instead")
    void armtwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void armtwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bacerSignalErrorFull() instead")
    void bacerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bacerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bhcerSignalErrorFull() instead")
    void bhcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bhcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bpcrdSignalErrorFull() instead")
    void bpcrdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bpcrdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use btcerSignalErrorFull() instead")
    void btcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cecerSignalErrorFull() instead")
    void cecerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cecerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chcerSignalErrorFull() instead")
    void chcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clcerSignalErrorFull() instead")
    void clcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use coprgSignalErrorFull() instead")
    void coprgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void coprgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dccerSignalErrorFull() instead")
    void dccerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dccerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dmcerSignalErrorFull() instead")
    void dmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dpicrSignalErrorFull() instead")
    void dpicrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dpicrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalErrorFull() instead")
    void dtcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ercerSignalErrorFull() instead")
    void ercerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ercerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ffcerSignalErrorFull() instead")
    void ffcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ffcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use igcerSignalErrorFull() instead")
    void igcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void igcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incerSignalErrorFull() instead")
    void incerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lhcerSignalErrorFull() instead")
    void lhcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lhcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mncerSignalErrorFull() instead")
    void mncerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mncerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mnrgaSignalErrorFull() instead")
    void mnrgaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mnrgaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalErrorFull() instead")
    void obcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalErrorFull() instead")
    void racerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rmcerSignalErrorFull() instead")
    void rmcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rmcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secerSignalErrorFull() instead")
    void secerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalErrorFull() instead")
    void shcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sicrdSignalErrorFull() instead")
    void sicrdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sicrdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use srcerSignalErrorFull() instead")
    void srcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void srcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
