# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AecmwRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, udf1: str=None):
        """AecmwRequestCertificateParameters - a model defined in OpenAPI

        :param udf1: The udf1 of this AecmwRequestCertificateParameters.
        """
        self.openapi_types = {
            'udf1': str
        }

        self.attribute_map = {
            'udf1': 'UDF1'
        }

        self._udf1 = udf1

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AecmwRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aecmw_request_certificateParameters of this AecmwRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def udf1(self):
        """Gets the udf1 of this AecmwRequestCertificateParameters.

        ApplicationNumber

        :return: The udf1 of this AecmwRequestCertificateParameters.
        :rtype: str
        """
        return self._udf1

    @udf1.setter
    def udf1(self, udf1):
        """Sets the udf1 of this AecmwRequestCertificateParameters.

        ApplicationNumber

        :param udf1: The udf1 of this AecmwRequestCertificateParameters.
        :type udf1: str
        """
        if udf1 is None:
            raise ValueError("Invalid value for `udf1`, must not be `None`")

        self._udf1 = udf1
