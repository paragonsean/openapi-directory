/**
 * eDistrict Himachal Pradesh, Himachal Pradesh
 * eDistrict Himachal (http://edistrict.hp.gov.in/) is the online service delivery portal for Himachal Pradesh State Govt. Certain documents issued by it (e.g. Birth, Income, Caste, Agriculturist, Bonafide Himachali Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EDistrictHimachalPradeshHimachalPradesh);
  }
}(this, function(expect, EDistrictHimachalPradeshHimachalPradesh) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EDistrictHimachalPradeshHimachalPradesh.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('aecmw', function() {
      it('should call aecmw successfully', function(done) {
        //uncomment below and update the code to test aecmw
        //instance.aecmw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('aemtw', function() {
      it('should call aemtw successfully', function(done) {
        //uncomment below and update the code to test aemtw
        //instance.aemtw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('agcer', function() {
      it('should call agcer successfully', function(done) {
        //uncomment below and update the code to test agcer
        //instance.agcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('alimw', function() {
      it('should call alimw successfully', function(done) {
        //uncomment below and update the code to test alimw
        //instance.alimw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('arcmw', function() {
      it('should call arcmw successfully', function(done) {
        //uncomment below and update the code to test arcmw
        //instance.arcmw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('armtw', function() {
      it('should call armtw successfully', function(done) {
        //uncomment below and update the code to test armtw
        //instance.armtw(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bacer', function() {
      it('should call bacer successfully', function(done) {
        //uncomment below and update the code to test bacer
        //instance.bacer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bhcer', function() {
      it('should call bhcer successfully', function(done) {
        //uncomment below and update the code to test bhcer
        //instance.bhcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bpcrd', function() {
      it('should call bpcrd successfully', function(done) {
        //uncomment below and update the code to test bpcrd
        //instance.bpcrd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('btcer', function() {
      it('should call btcer successfully', function(done) {
        //uncomment below and update the code to test btcer
        //instance.btcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cecer', function() {
      it('should call cecer successfully', function(done) {
        //uncomment below and update the code to test cecer
        //instance.cecer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('chcer', function() {
      it('should call chcer successfully', function(done) {
        //uncomment below and update the code to test chcer
        //instance.chcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clcer', function() {
      it('should call clcer successfully', function(done) {
        //uncomment below and update the code to test clcer
        //instance.clcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('coprg', function() {
      it('should call coprg successfully', function(done) {
        //uncomment below and update the code to test coprg
        //instance.coprg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dccer', function() {
      it('should call dccer successfully', function(done) {
        //uncomment below and update the code to test dccer
        //instance.dccer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dmcer', function() {
      it('should call dmcer successfully', function(done) {
        //uncomment below and update the code to test dmcer
        //instance.dmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dpicr', function() {
      it('should call dpicr successfully', function(done) {
        //uncomment below and update the code to test dpicr
        //instance.dpicr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dtcer', function() {
      it('should call dtcer successfully', function(done) {
        //uncomment below and update the code to test dtcer
        //instance.dtcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ercer', function() {
      it('should call ercer successfully', function(done) {
        //uncomment below and update the code to test ercer
        //instance.ercer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ffcer', function() {
      it('should call ffcer successfully', function(done) {
        //uncomment below and update the code to test ffcer
        //instance.ffcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('igcer', function() {
      it('should call igcer successfully', function(done) {
        //uncomment below and update the code to test igcer
        //instance.igcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incer', function() {
      it('should call incer successfully', function(done) {
        //uncomment below and update the code to test incer
        //instance.incer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lhcer', function() {
      it('should call lhcer successfully', function(done) {
        //uncomment below and update the code to test lhcer
        //instance.lhcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mncer', function() {
      it('should call mncer successfully', function(done) {
        //uncomment below and update the code to test mncer
        //instance.mncer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('mnrga', function() {
      it('should call mnrga successfully', function(done) {
        //uncomment below and update the code to test mnrga
        //instance.mnrga(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('obcer', function() {
      it('should call obcer successfully', function(done) {
        //uncomment below and update the code to test obcer
        //instance.obcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('racer', function() {
      it('should call racer successfully', function(done) {
        //uncomment below and update the code to test racer
        //instance.racer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rmcer', function() {
      it('should call rmcer successfully', function(done) {
        //uncomment below and update the code to test rmcer
        //instance.rmcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('secer', function() {
      it('should call secer successfully', function(done) {
        //uncomment below and update the code to test secer
        //instance.secer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shcer', function() {
      it('should call shcer successfully', function(done) {
        //uncomment below and update the code to test shcer
        //instance.shcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sicrd', function() {
      it('should call sicrd successfully', function(done) {
        //uncomment below and update the code to test sicrd
        //instance.sicrd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('srcer', function() {
      it('should call srcer successfully', function(done) {
        //uncomment below and update the code to test srcer
        //instance.srcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
