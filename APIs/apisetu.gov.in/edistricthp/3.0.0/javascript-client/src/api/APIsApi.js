/**
 * eDistrict Himachal Pradesh, Himachal Pradesh
 * eDistrict Himachal (http://edistrict.hp.gov.in/) is the online service delivery portal for Himachal Pradesh State Govt. Certain documents issued by it (e.g. Birth, Income, Caste, Agriculturist, Bonafide Himachali Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Aecmw400Response from '../model/Aecmw400Response';
import Aecmw401Response from '../model/Aecmw401Response';
import Aecmw404Response from '../model/Aecmw404Response';
import Aecmw500Response from '../model/Aecmw500Response';
import Aecmw502Response from '../model/Aecmw502Response';
import Aecmw503Response from '../model/Aecmw503Response';
import Aecmw504Response from '../model/Aecmw504Response';
import AecmwRequest from '../model/AecmwRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aecmw operation.
     * @callback module:api/APIsApi~aecmwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for Renewal of Contractor Migrant Workmen license
     * API to verify Application for Renewal of Contractor Migrant Workmen license.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~aecmwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    aecmw(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/aecmw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aemtw operation.
     * @callback module:api/APIsApi~aemtwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for Renewal of Motor Transport Worker Registration
     * API to verify Application for Renewal of Motor Transport Worker Registration.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~aemtwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    aemtw(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/aemtw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agcer operation.
     * @callback module:api/APIsApi~agcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agriculture/ Agriculturist Certificate
     * API to verify Agriculture/ Agriculturist Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~agcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    agcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/agcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alimw operation.
     * @callback module:api/APIsApi~alimwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for License for Inter State Migrant Workmen
     * API to verify Application for License for Inter State Migrant Workmen.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~alimwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alimw(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alimw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the arcmw operation.
     * @callback module:api/APIsApi~arcmwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for Registration of Contractor Migrant Workmen license
     * API to verify Application for Registration of Contractor Migrant Workmen license.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~arcmwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    arcmw(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/arcmw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the armtw operation.
     * @callback module:api/APIsApi~armtwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for Registration of Motor Transport Worker Registration
     * API to verify Application for Registration of Motor Transport Worker Registration.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~armtwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    armtw(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/armtw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bacer operation.
     * @callback module:api/APIsApi~bacerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Backward Area Certificate
     * API to verify Backward Area Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~bacerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bacer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bacer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bhcer operation.
     * @callback module:api/APIsApi~bhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bonafide Certificate
     * API to verify Bonafide Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~bhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bpcrd operation.
     * @callback module:api/APIsApi~bpcrdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BPL Card
     * API to verify BPL Card.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~bpcrdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bpcrd(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bpcrd/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the btcer operation.
     * @callback module:api/APIsApi~btcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Birth Certificate
     * API to verify Birth Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~btcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    btcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/btcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cecer operation.
     * @callback module:api/APIsApi~cecerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renewal Certificate of Contract Labour License
     * API to verify Renewal Certificate of Contract Labour License.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~cecerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cecer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cecer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chcer operation.
     * @callback module:api/APIsApi~chcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Character Certificate
     * API to verify Character Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~chcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    chcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/chcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clcer operation.
     * @callback module:api/APIsApi~clcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate for Contract Labour License
     * API to verify Registration Certificate for Contract Labour License.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~clcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the coprg operation.
     * @callback module:api/APIsApi~coprgCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy of Pariwar Register
     * API to verify Copy of Pariwar Register.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~coprgCallback} callback The callback function, accepting three arguments: error, data, response
     */
    coprg(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/coprg/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dccer operation.
     * @callback module:api/APIsApi~dccerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dogra Class Certificate
     * API to verify Dogra Class Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~dccerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dccer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dccer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dmcer operation.
     * @callback module:api/APIsApi~dmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Domicile Certificate
     * API to verify Domicile Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~dmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dpicr operation.
     * @callback module:api/APIsApi~dpicrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disabled Person Identity Card/ Certificate
     * API to verify Disabled Person Identity Card/ Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~dpicrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dpicr(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dpicr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dtcer operation.
     * @callback module:api/APIsApi~dtcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Death Certificate
     * API to verify Death Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~dtcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dtcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dtcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ercer operation.
     * @callback module:api/APIsApi~ercerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate of Establishment Employing Contract Labour
     * API to verify Registration Certificate of Establishment Employing Contract Labour.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~ercerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ercer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ercer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ffcer operation.
     * @callback module:api/APIsApi~ffcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freedom Fighter Certificate
     * API to verify Freedom Fighter Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~ffcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ffcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ffcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the igcer operation.
     * @callback module:api/APIsApi~igcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Indigent (Needy Person) Certificate
     * API to verify Indigent (Needy Person) Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~igcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    igcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/igcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incer operation.
     * @callback module:api/APIsApi~incerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Income Certificate
     * API to verify Income Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~incerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/incer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lhcer operation.
     * @callback module:api/APIsApi~lhcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Legal Heir Certificate
     * API to verify Legal Heir Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~lhcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lhcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lhcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mncer operation.
     * @callback module:api/APIsApi~mncerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Minority Certificate
     * API to verify Minority Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~mncerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mncer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mncer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mnrga operation.
     * @callback module:api/APIsApi~mnrgaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * MNREGA Job Card
     * API to verify MNREGA Job Card.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~mnrgaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mnrga(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/mnrga/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obcer operation.
     * @callback module:api/APIsApi~obcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OBC Certificate
     * API to verify OBC Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~obcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/obcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the racer operation.
     * @callback module:api/APIsApi~racerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rural Area Certificate
     * API to verify Rural Area Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~racerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    racer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/racer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rmcer operation.
     * @callback module:api/APIsApi~rmcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marriage Certificate
     * API to verify Marriage Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~rmcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rmcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rmcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the secer operation.
     * @callback module:api/APIsApi~secerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renewal Certificate of Shops And Commercial Establishment
     * API to verify Renewal Certificate of Shops And Commercial Establishment.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~secerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/secer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shcer operation.
     * @callback module:api/APIsApi~shcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SC/ST  Certificate
     * API to verify SC/ST  Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~shcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sicrd operation.
     * @callback module:api/APIsApi~sicrdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Senior Citizen Identity Card/ Certificate
     * API to verify Senior Citizen Identity Card/ Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~sicrdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sicrd(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sicrd/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the srcer operation.
     * @callback module:api/APIsApi~srcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate of Shops And Commercial Establishment
     * API to verify Registration Certificate of Shops And Commercial Establishment.
     * @param {Object} opts Optional parameters
     * @param {module:model/AecmwRequest} [aecmwRequest] Request format
     * @param {module:api/APIsApi~srcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    srcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['aecmwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/srcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
