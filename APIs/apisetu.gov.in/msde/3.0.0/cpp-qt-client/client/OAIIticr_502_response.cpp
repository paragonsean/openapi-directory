/**
 * Ministry of Skill Development And Entrepreneurship
 * National Council for Vocational Training (NCVT) under Ministry of Skill Development And Entrepreneurship has been entrusted with the responsibilities of prescribing standards and curricula for craftsmen training and conducting All India Trade Tests and awarding National Trade Certificates. All the ITI certificates under the purview of NCVT are available to download through Citizen's DigiLocker account.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIticr_502_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIticr_502_response::OAIIticr_502_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIticr_502_response::OAIIticr_502_response() {
    this->initializeModel();
}

OAIIticr_502_response::~OAIIticr_502_response() {}

void OAIIticr_502_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;
}

void OAIIticr_502_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIticr_502_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;
}

QString OAIIticr_502_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIticr_502_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    return obj;
}

QString OAIIticr_502_response::getError() const {
    return m_error;
}
void OAIIticr_502_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIIticr_502_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAIIticr_502_response::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIIticr_502_response::getErrorDescription() const {
    return m_error_description;
}
void OAIIticr_502_response::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIIticr_502_response::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIIticr_502_response::is_error_description_Valid() const{
    return m_error_description_isValid;
}

bool OAIIticr_502_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIticr_502_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
