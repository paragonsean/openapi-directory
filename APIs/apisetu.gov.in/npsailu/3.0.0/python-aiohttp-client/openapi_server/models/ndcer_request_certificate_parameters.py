# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NdcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appid: str=None):
        """NdcerRequestCertificateParameters - a model defined in OpenAPI

        :param appid: The appid of this NdcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'appid': str
        }

        self.attribute_map = {
            'appid': 'appid'
        }

        self._appid = appid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NdcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ndcer_request_certificateParameters of this NdcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appid(self):
        """Gets the appid of this NdcerRequestCertificateParameters.

        ApplicationNumber

        :return: The appid of this NdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._appid

    @appid.setter
    def appid(self, appid):
        """Sets the appid of this NdcerRequestCertificateParameters.

        ApplicationNumber

        :param appid: The appid of this NdcerRequestCertificateParameters.
        :type appid: str
        """
        if appid is None:
            raise ValueError("Invalid value for `appid`, must not be `None`")

        self._appid = appid
