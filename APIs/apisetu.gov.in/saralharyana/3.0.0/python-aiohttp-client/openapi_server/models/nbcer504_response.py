# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Nbcer504Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, error_description: str=None):
        """Nbcer504Response - a model defined in OpenAPI

        :param error: The error of this Nbcer504Response.
        :param error_description: The error_description of this Nbcer504Response.
        """
        self.openapi_types = {
            'error': str,
            'error_description': str
        }

        self.attribute_map = {
            'error': 'error',
            'error_description': 'errorDescription'
        }

        self._error = error
        self._error_description = error_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Nbcer504Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The nbcer_504_response of this Nbcer504Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this Nbcer504Response.


        :return: The error of this Nbcer504Response.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Nbcer504Response.


        :param error: The error of this Nbcer504Response.
        :type error: str
        """
        allowed_values = ["gateway_timeout"]  # noqa: E501
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    @property
    def error_description(self):
        """Gets the error_description of this Nbcer504Response.


        :return: The error_description of this Nbcer504Response.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this Nbcer504Response.


        :param error_description: The error_description of this Nbcer504Response.
        :type error_description: str
        """
        allowed_values = ["Publisher service did not respond in time"]  # noqa: E501
        if error_description not in allowed_values:
            raise ValueError(
                "Invalid value for `error_description` ({0}), must be one of {1}"
                .format(error_description, allowed_values)
            )

        self._error_description = error_description
