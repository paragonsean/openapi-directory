/**
 * Transport Department, Assam
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRvcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRvcer_request_certificateParameters::OAIRvcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRvcer_request_certificateParameters::OAIRvcer_request_certificateParameters() {
    this->initializeModel();
}

OAIRvcer_request_certificateParameters::~OAIRvcer_request_certificateParameters() {}

void OAIRvcer_request_certificateParameters::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_chasis_no_isSet = false;
    m_chasis_no_isValid = false;

    m_reg_no_isSet = false;
    m_reg_no_isValid = false;
}

void OAIRvcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRvcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("FullName")]);
    m_full_name_isSet = !json[QString("FullName")].isNull() && m_full_name_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("UID")]);
    m_uid_isSet = !json[QString("UID")].isNull() && m_uid_isValid;

    m_chasis_no_isValid = ::OpenAPI::fromJsonValue(m_chasis_no, json[QString("chasis_no")]);
    m_chasis_no_isSet = !json[QString("chasis_no")].isNull() && m_chasis_no_isValid;

    m_reg_no_isValid = ::OpenAPI::fromJsonValue(m_reg_no, json[QString("reg_no")]);
    m_reg_no_isSet = !json[QString("reg_no")].isNull() && m_reg_no_isValid;
}

QString OAIRvcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRvcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("FullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_uid_isSet) {
        obj.insert(QString("UID"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_chasis_no_isSet) {
        obj.insert(QString("chasis_no"), ::OpenAPI::toJsonValue(m_chasis_no));
    }
    if (m_reg_no_isSet) {
        obj.insert(QString("reg_no"), ::OpenAPI::toJsonValue(m_reg_no));
    }
    return obj;
}

QString OAIRvcer_request_certificateParameters::getFullName() const {
    return m_full_name;
}
void OAIRvcer_request_certificateParameters::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIRvcer_request_certificateParameters::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIRvcer_request_certificateParameters::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIRvcer_request_certificateParameters::getUid() const {
    return m_uid;
}
void OAIRvcer_request_certificateParameters::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRvcer_request_certificateParameters::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRvcer_request_certificateParameters::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIRvcer_request_certificateParameters::getChasisNo() const {
    return m_chasis_no;
}
void OAIRvcer_request_certificateParameters::setChasisNo(const QString &chasis_no) {
    m_chasis_no = chasis_no;
    m_chasis_no_isSet = true;
}

bool OAIRvcer_request_certificateParameters::is_chasis_no_Set() const{
    return m_chasis_no_isSet;
}

bool OAIRvcer_request_certificateParameters::is_chasis_no_Valid() const{
    return m_chasis_no_isValid;
}

QString OAIRvcer_request_certificateParameters::getRegNo() const {
    return m_reg_no;
}
void OAIRvcer_request_certificateParameters::setRegNo(const QString &reg_no) {
    m_reg_no = reg_no;
    m_reg_no_isSet = true;
}

bool OAIRvcer_request_certificateParameters::is_reg_no_Set() const{
    return m_reg_no_isSet;
}

bool OAIRvcer_request_certificateParameters::is_reg_no_Valid() const{
    return m_reg_no_isValid;
}

bool OAIRvcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chasis_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reg_no_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRvcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_full_name_isValid && m_uid_isValid && m_chasis_no_isValid && m_reg_no_isValid && true;
}

} // namespace OpenAPI
