/**
 * Transport Department, Assam
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDrivingLicenseSchema_CertificateData_DrivingLicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDrivingLicenseSchema_CertificateData_DrivingLicense::OAIDrivingLicenseSchema_CertificateData_DrivingLicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDrivingLicenseSchema_CertificateData_DrivingLicense::OAIDrivingLicenseSchema_CertificateData_DrivingLicense() {
    this->initializeModel();
}

OAIDrivingLicenseSchema_CertificateData_DrivingLicense::~OAIDrivingLicenseSchema_CertificateData_DrivingLicense() {}

void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endorse_date_isSet = false;
    m_endorse_date_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;
}

void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endorse_date_isValid = ::OpenAPI::fromJsonValue(m_endorse_date, json[QString("endorseDate")]);
    m_endorse_date_isSet = !json[QString("endorseDate")].isNull() && m_endorse_date_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDrivingLicenseSchema_CertificateData_DrivingLicense::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endorse_date_isSet) {
        obj.insert(QString("endorseDate"), ::OpenAPI::toJsonValue(m_endorse_date));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    return obj;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::getAbbreviation() const {
    return m_abbreviation;
}
void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::getCode() const {
    return m_code;
}
void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_code_Set() const{
    return m_code_isSet;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::getDescription() const {
    return m_description;
}
void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::getEndorseDate() const {
    return m_endorse_date;
}
void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::setEndorseDate(const QString &endorse_date) {
    m_endorse_date = endorse_date;
    m_endorse_date_isSet = true;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_endorse_date_Set() const{
    return m_endorse_date_isSet;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_endorse_date_Valid() const{
    return m_endorse_date_isValid;
}

QString OAIDrivingLicenseSchema_CertificateData_DrivingLicense::getIssueDate() const {
    return m_issue_date;
}
void OAIDrivingLicenseSchema_CertificateData_DrivingLicense::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endorse_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDrivingLicenseSchema_CertificateData_DrivingLicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_abbreviation_isValid && m_code_isValid && m_description_isValid && m_endorse_date_isValid && m_issue_date_isValid && true;
}

} // namespace OpenAPI
