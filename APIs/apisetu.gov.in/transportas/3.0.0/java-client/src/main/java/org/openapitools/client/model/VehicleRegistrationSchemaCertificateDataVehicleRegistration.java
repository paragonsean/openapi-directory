/*
 * Transport Department, Assam
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance;
import org.openapitools.client.model.VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VehicleRegistrationSchemaCertificateDataVehicleRegistration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:38:19.807453-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VehicleRegistrationSchemaCertificateDataVehicleRegistration {
  public static final String SERIALIZED_NAME_INSURANCE = "Insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  private VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance insurance;

  public static final String SERIALIZED_NAME_VEHICLE = "Vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle vehicle;

  public static final String SERIALIZED_NAME_FINANCER = "financer";
  @SerializedName(SERIALIZED_NAME_FINANCER)
  private String financer;

  public static final String SERIALIZED_NAME_NORMS_DESC = "normsDesc";
  @SerializedName(SERIALIZED_NAME_NORMS_DESC)
  private String normsDesc;

  public static final String SERIALIZED_NAME_STATUS_DATE = "statusDate";
  @SerializedName(SERIALIZED_NAME_STATUS_DATE)
  private String statusDate;

  public VehicleRegistrationSchemaCertificateDataVehicleRegistration() {
  }

  public VehicleRegistrationSchemaCertificateDataVehicleRegistration insurance(VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance insurance) {
    this.insurance = insurance;
    return this;
  }

  /**
   * Get insurance
   * @return insurance
   */
  @javax.annotation.Nullable
  public VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance getInsurance() {
    return insurance;
  }

  public void setInsurance(VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance insurance) {
    this.insurance = insurance;
  }


  public VehicleRegistrationSchemaCertificateDataVehicleRegistration vehicle(VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  /**
   * Get vehicle
   * @return vehicle
   */
  @javax.annotation.Nullable
  public VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle getVehicle() {
    return vehicle;
  }

  public void setVehicle(VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle vehicle) {
    this.vehicle = vehicle;
  }


  public VehicleRegistrationSchemaCertificateDataVehicleRegistration financer(String financer) {
    this.financer = financer;
    return this;
  }

  /**
   * Get financer
   * @return financer
   */
  @javax.annotation.Nonnull
  public String getFinancer() {
    return financer;
  }

  public void setFinancer(String financer) {
    this.financer = financer;
  }


  public VehicleRegistrationSchemaCertificateDataVehicleRegistration normsDesc(String normsDesc) {
    this.normsDesc = normsDesc;
    return this;
  }

  /**
   * Get normsDesc
   * @return normsDesc
   */
  @javax.annotation.Nonnull
  public String getNormsDesc() {
    return normsDesc;
  }

  public void setNormsDesc(String normsDesc) {
    this.normsDesc = normsDesc;
  }


  public VehicleRegistrationSchemaCertificateDataVehicleRegistration statusDate(String statusDate) {
    this.statusDate = statusDate;
    return this;
  }

  /**
   * Get statusDate
   * @return statusDate
   */
  @javax.annotation.Nonnull
  public String getStatusDate() {
    return statusDate;
  }

  public void setStatusDate(String statusDate) {
    this.statusDate = statusDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VehicleRegistrationSchemaCertificateDataVehicleRegistration vehicleRegistrationSchemaCertificateDataVehicleRegistration = (VehicleRegistrationSchemaCertificateDataVehicleRegistration) o;
    return Objects.equals(this.insurance, vehicleRegistrationSchemaCertificateDataVehicleRegistration.insurance) &&
        Objects.equals(this.vehicle, vehicleRegistrationSchemaCertificateDataVehicleRegistration.vehicle) &&
        Objects.equals(this.financer, vehicleRegistrationSchemaCertificateDataVehicleRegistration.financer) &&
        Objects.equals(this.normsDesc, vehicleRegistrationSchemaCertificateDataVehicleRegistration.normsDesc) &&
        Objects.equals(this.statusDate, vehicleRegistrationSchemaCertificateDataVehicleRegistration.statusDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(insurance, vehicle, financer, normsDesc, statusDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VehicleRegistrationSchemaCertificateDataVehicleRegistration {\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    financer: ").append(toIndentedString(financer)).append("\n");
    sb.append("    normsDesc: ").append(toIndentedString(normsDesc)).append("\n");
    sb.append("    statusDate: ").append(toIndentedString(statusDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Insurance");
    openapiFields.add("Vehicle");
    openapiFields.add("financer");
    openapiFields.add("normsDesc");
    openapiFields.add("statusDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("financer");
    openapiRequiredFields.add("normsDesc");
    openapiRequiredFields.add("statusDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VehicleRegistrationSchemaCertificateDataVehicleRegistration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VehicleRegistrationSchemaCertificateDataVehicleRegistration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VehicleRegistrationSchemaCertificateDataVehicleRegistration is not found in the empty JSON string", VehicleRegistrationSchemaCertificateDataVehicleRegistration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VehicleRegistrationSchemaCertificateDataVehicleRegistration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VehicleRegistrationSchemaCertificateDataVehicleRegistration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VehicleRegistrationSchemaCertificateDataVehicleRegistration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Insurance`
      if (jsonObj.get("Insurance") != null && !jsonObj.get("Insurance").isJsonNull()) {
        VehicleRegistrationSchemaCertificateDataVehicleRegistrationInsurance.validateJsonElement(jsonObj.get("Insurance"));
      }
      // validate the optional field `Vehicle`
      if (jsonObj.get("Vehicle") != null && !jsonObj.get("Vehicle").isJsonNull()) {
        VehicleRegistrationSchemaCertificateDataVehicleRegistrationVehicle.validateJsonElement(jsonObj.get("Vehicle"));
      }
      if (!jsonObj.get("financer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financer").toString()));
      }
      if (!jsonObj.get("normsDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normsDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normsDesc").toString()));
      }
      if (!jsonObj.get("statusDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VehicleRegistrationSchemaCertificateDataVehicleRegistration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VehicleRegistrationSchemaCertificateDataVehicleRegistration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VehicleRegistrationSchemaCertificateDataVehicleRegistration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VehicleRegistrationSchemaCertificateDataVehicleRegistration.class));

       return (TypeAdapter<T>) new TypeAdapter<VehicleRegistrationSchemaCertificateDataVehicleRegistration>() {
           @Override
           public void write(JsonWriter out, VehicleRegistrationSchemaCertificateDataVehicleRegistration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VehicleRegistrationSchemaCertificateDataVehicleRegistration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VehicleRegistrationSchemaCertificateDataVehicleRegistration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VehicleRegistrationSchemaCertificateDataVehicleRegistration
   * @throws IOException if the JSON string is invalid with respect to VehicleRegistrationSchemaCertificateDataVehicleRegistration
   */
  public static VehicleRegistrationSchemaCertificateDataVehicleRegistration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VehicleRegistrationSchemaCertificateDataVehicleRegistration.class);
  }

  /**
   * Convert an instance of VehicleRegistrationSchemaCertificateDataVehicleRegistration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

