/**
 * Karnataka Industrial Areas Development Board, Karnataka
 * KIADB, AP (http://en.kiadb.in/) is the online s for Karnataka State Govt. Certain documents issued by it (e.g. Allotment Letter,Building Plan, Water Supply Connection, NOC For Banks etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlltr_400_response.h"
#include "OAIAlltr_401_response.h"
#include "OAIAlltr_404_response.h"
#include "OAIAlltr_500_response.h"
#include "OAIAlltr_502_response.h"
#include "OAIAlltr_503_response.h"
#include "OAIAlltr_504_response.h"
#include "OAIAlltr_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void alltr(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void bknoc(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void bpcer(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void cfltr(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void lcsag(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void pscer(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void psnoc(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());

    /**
    * @param[in]  oai_alltr_request OAIAlltr_request [optional]
    */
    virtual void wtrbl(const ::OpenAPI::OptionalParam<OAIAlltr_request> &oai_alltr_request = ::OpenAPI::OptionalParam<OAIAlltr_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alltrCallback(OAIHttpRequestWorker *worker);
    void bknocCallback(OAIHttpRequestWorker *worker);
    void bpcerCallback(OAIHttpRequestWorker *worker);
    void cfltrCallback(OAIHttpRequestWorker *worker);
    void lcsagCallback(OAIHttpRequestWorker *worker);
    void pscerCallback(OAIHttpRequestWorker *worker);
    void psnocCallback(OAIHttpRequestWorker *worker);
    void wtrblCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alltrSignal();
    void bknocSignal();
    void bpcerSignal();
    void cfltrSignal();
    void lcsagSignal();
    void pscerSignal();
    void psnocSignal();
    void wtrblSignal();


    void alltrSignalFull(OAIHttpRequestWorker *worker);
    void bknocSignalFull(OAIHttpRequestWorker *worker);
    void bpcerSignalFull(OAIHttpRequestWorker *worker);
    void cfltrSignalFull(OAIHttpRequestWorker *worker);
    void lcsagSignalFull(OAIHttpRequestWorker *worker);
    void pscerSignalFull(OAIHttpRequestWorker *worker);
    void psnocSignalFull(OAIHttpRequestWorker *worker);
    void wtrblSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use alltrSignalError() instead")
    void alltrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alltrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bknocSignalError() instead")
    void bknocSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bknocSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bpcerSignalError() instead")
    void bpcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bpcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfltrSignalError() instead")
    void cfltrSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cfltrSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lcsagSignalError() instead")
    void lcsagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void lcsagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pscerSignalError() instead")
    void pscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use psnocSignalError() instead")
    void psnocSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void psnocSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wtrblSignalError() instead")
    void wtrblSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void wtrblSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alltrSignalErrorFull() instead")
    void alltrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alltrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bknocSignalErrorFull() instead")
    void bknocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bknocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bpcerSignalErrorFull() instead")
    void bpcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bpcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cfltrSignalErrorFull() instead")
    void cfltrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cfltrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lcsagSignalErrorFull() instead")
    void lcsagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lcsagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pscerSignalErrorFull() instead")
    void pscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use psnocSignalErrorFull() instead")
    void psnocSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void psnocSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use wtrblSignalErrorFull() instead")
    void wtrblSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void wtrblSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
