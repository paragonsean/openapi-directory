/**
 * Karnataka Industrial Areas Development Board, Karnataka
 * KIADB, AP (http://en.kiadb.in/) is the online s for Karnataka State Govt. Certain documents issued by it (e.g. Allotment Letter,Building Plan, Water Supply Connection, NOC For Banks etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alltr400Response from '../model/Alltr400Response';
import Alltr401Response from '../model/Alltr401Response';
import Alltr404Response from '../model/Alltr404Response';
import Alltr500Response from '../model/Alltr500Response';
import Alltr502Response from '../model/Alltr502Response';
import Alltr503Response from '../model/Alltr503Response';
import Alltr504Response from '../model/Alltr504Response';
import AlltrRequest from '../model/AlltrRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alltr operation.
     * @callback module:api/APIsApi~alltrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allotment Letter
     * API to verify Allotment Letter.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~alltrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alltr(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alltr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bknoc operation.
     * @callback module:api/APIsApi~bknocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOC For Banks
     * API to verify NOC For Banks.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~bknocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bknoc(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bknoc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bpcer operation.
     * @callback module:api/APIsApi~bpcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Building Plan
     * API to verify Building Plan.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~bpcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bpcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/bpcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cfltr operation.
     * @callback module:api/APIsApi~cfltrCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirmatory Letter
     * API to verify Confirmatory Letter.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~cfltrCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cfltr(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cfltr/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lcsag operation.
     * @callback module:api/APIsApi~lcsagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lease cum Sale Agreement
     * API to verify Lease cum Sale Agreement.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~lcsagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    lcsag(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lcsag/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pscer operation.
     * @callback module:api/APIsApi~pscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Possession Certificate
     * API to verify Possession Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~pscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/pscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the psnoc operation.
     * @callback module:api/APIsApi~psnocCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOC for New Power Supply
     * API to verify NOC for New Power Supply.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~psnocCallback} callback The callback function, accepting three arguments: error, data, response
     */
    psnoc(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/psnoc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the wtrbl operation.
     * @callback module:api/APIsApi~wtrblCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Water Bill/ Connection
     * API to verify Water Bill/ Connection.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlltrRequest} [alltrRequest] Request format
     * @param {module:api/APIsApi~wtrblCallback} callback The callback function, accepting three arguments: error, data, response
     */
    wtrbl(opts, callback) {
      opts = opts || {};
      let postBody = opts['alltrRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/wtrbl/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
