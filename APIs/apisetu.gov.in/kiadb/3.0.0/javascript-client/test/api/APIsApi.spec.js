/**
 * Karnataka Industrial Areas Development Board, Karnataka
 * KIADB, AP (http://en.kiadb.in/) is the online s for Karnataka State Govt. Certain documents issued by it (e.g. Allotment Letter,Building Plan, Water Supply Connection, NOC For Banks etc) are made available in citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KarnatakaIndustrialAreasDevelopmentBoardKarnataka);
  }
}(this, function(expect, KarnatakaIndustrialAreasDevelopmentBoardKarnataka) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KarnatakaIndustrialAreasDevelopmentBoardKarnataka.APIsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('APIsApi', function() {
    describe('alltr', function() {
      it('should call alltr successfully', function(done) {
        //uncomment below and update the code to test alltr
        //instance.alltr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bknoc', function() {
      it('should call bknoc successfully', function(done) {
        //uncomment below and update the code to test bknoc
        //instance.bknoc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bpcer', function() {
      it('should call bpcer successfully', function(done) {
        //uncomment below and update the code to test bpcer
        //instance.bpcer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cfltr', function() {
      it('should call cfltr successfully', function(done) {
        //uncomment below and update the code to test cfltr
        //instance.cfltr(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lcsag', function() {
      it('should call lcsag successfully', function(done) {
        //uncomment below and update the code to test lcsag
        //instance.lcsag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pscer', function() {
      it('should call pscer successfully', function(done) {
        //uncomment below and update the code to test pscer
        //instance.pscer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('psnoc', function() {
      it('should call psnoc successfully', function(done) {
        //uncomment below and update the code to test psnoc
        //instance.psnoc(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('wtrbl', function() {
      it('should call wtrbl successfully', function(done) {
        //uncomment below and update the code to test wtrbl
        //instance.wtrbl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
