# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DrivingLicenseSchemaCertificateDataDrivingLicense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abbreviation: str=None, code: str=None, description: str=None, endorse_date: str=None, issue_date: str=None):
        """DrivingLicenseSchemaCertificateDataDrivingLicense - a model defined in OpenAPI

        :param abbreviation: The abbreviation of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :param code: The code of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :param description: The description of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :param endorse_date: The endorse_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :param issue_date: The issue_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        """
        self.openapi_types = {
            'abbreviation': str,
            'code': str,
            'description': str,
            'endorse_date': str,
            'issue_date': str
        }

        self.attribute_map = {
            'abbreviation': 'abbreviation',
            'code': 'code',
            'description': 'description',
            'endorse_date': 'endorseDate',
            'issue_date': 'issueDate'
        }

        self._abbreviation = abbreviation
        self._code = code
        self._description = description
        self._endorse_date = endorse_date
        self._issue_date = issue_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DrivingLicenseSchemaCertificateDataDrivingLicense':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DrivingLicenseSchema_CertificateData_DrivingLicense of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abbreviation(self):
        """Gets the abbreviation of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :return: The abbreviation of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :param abbreviation: The abbreviation of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :type abbreviation: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")

        self._abbreviation = abbreviation

    @property
    def code(self):
        """Gets the code of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :return: The code of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :param code: The code of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def description(self):
        """Gets the description of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :return: The description of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :param description: The description of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def endorse_date(self):
        """Gets the endorse_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :return: The endorse_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :rtype: str
        """
        return self._endorse_date

    @endorse_date.setter
    def endorse_date(self, endorse_date):
        """Sets the endorse_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :param endorse_date: The endorse_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :type endorse_date: str
        """
        if endorse_date is None:
            raise ValueError("Invalid value for `endorse_date`, must not be `None`")

        self._endorse_date = endorse_date

    @property
    def issue_date(self):
        """Gets the issue_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :return: The issue_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.


        :param issue_date: The issue_date of this DrivingLicenseSchemaCertificateDataDrivingLicense.
        :type issue_date: str
        """
        if issue_date is None:
            raise ValueError("Invalid value for `issue_date`, must not be `None`")

        self._issue_date = issue_date
