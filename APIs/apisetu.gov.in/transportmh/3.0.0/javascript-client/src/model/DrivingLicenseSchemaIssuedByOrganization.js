/**
 * Motor Vehicle Department, Maharashtra
 * Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DrivingLicenseSchemaIssuedByOrganizationAddress from './DrivingLicenseSchemaIssuedByOrganizationAddress';

/**
 * The DrivingLicenseSchemaIssuedByOrganization model module.
 * @module model/DrivingLicenseSchemaIssuedByOrganization
 * @version 3.0.0
 */
class DrivingLicenseSchemaIssuedByOrganization {
    /**
     * Constructs a new <code>DrivingLicenseSchemaIssuedByOrganization</code>.
     * @alias module:model/DrivingLicenseSchemaIssuedByOrganization
     * @param address {module:model/DrivingLicenseSchemaIssuedByOrganizationAddress} 
     * @param code {String} 
     * @param name {String} 
     * @param tin {String} 
     * @param type {String} 
     * @param uid {String} 
     */
    constructor(address, code, name, tin, type, uid) { 
        
        DrivingLicenseSchemaIssuedByOrganization.initialize(this, address, code, name, tin, type, uid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, code, name, tin, type, uid) { 
        obj['Address'] = address;
        obj['code'] = code;
        obj['name'] = name;
        obj['tin'] = tin;
        obj['type'] = type;
        obj['uid'] = uid;
    }

    /**
     * Constructs a <code>DrivingLicenseSchemaIssuedByOrganization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DrivingLicenseSchemaIssuedByOrganization} obj Optional instance to populate.
     * @return {module:model/DrivingLicenseSchemaIssuedByOrganization} The populated <code>DrivingLicenseSchemaIssuedByOrganization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DrivingLicenseSchemaIssuedByOrganization();

            if (data.hasOwnProperty('Address')) {
                obj['Address'] = DrivingLicenseSchemaIssuedByOrganizationAddress.constructFromObject(data['Address']);
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tin')) {
                obj['tin'] = ApiClient.convertToType(data['tin'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DrivingLicenseSchemaIssuedByOrganization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DrivingLicenseSchemaIssuedByOrganization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DrivingLicenseSchemaIssuedByOrganization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Address`
        if (data['Address']) { // data not null
          DrivingLicenseSchemaIssuedByOrganizationAddress.validateJSON(data['Address']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tin'] && !(typeof data['tin'] === 'string' || data['tin'] instanceof String)) {
            throw new Error("Expected the field `tin` to be a primitive type in the JSON string but got " + data['tin']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}

DrivingLicenseSchemaIssuedByOrganization.RequiredProperties = ["Address", "code", "name", "tin", "type", "uid"];

/**
 * @member {module:model/DrivingLicenseSchemaIssuedByOrganizationAddress} Address
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['Address'] = undefined;

/**
 * @member {String} code
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['code'] = undefined;

/**
 * @member {String} name
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['name'] = undefined;

/**
 * @member {String} tin
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['tin'] = undefined;

/**
 * @member {String} type
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['type'] = undefined;

/**
 * @member {String} uid
 */
DrivingLicenseSchemaIssuedByOrganization.prototype['uid'] = undefined;






export default DrivingLicenseSchemaIssuedByOrganization;

