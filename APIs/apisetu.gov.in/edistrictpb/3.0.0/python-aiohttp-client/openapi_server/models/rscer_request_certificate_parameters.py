# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RscerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, dsnno: str=None, father_name: str=None, full_name: str=None, uid: str=None):
        """RscerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this RscerRequestCertificateParameters.
        :param dsnno: The dsnno of this RscerRequestCertificateParameters.
        :param father_name: The father_name of this RscerRequestCertificateParameters.
        :param full_name: The full_name of this RscerRequestCertificateParameters.
        :param uid: The uid of this RscerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'dsnno': str,
            'father_name': str,
            'full_name': str,
            'uid': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'dsnno': 'DSNNo',
            'father_name': 'FatherName',
            'full_name': 'FullName',
            'uid': 'UID'
        }

        self._dob = dob
        self._dsnno = dsnno
        self._father_name = father_name
        self._full_name = full_name
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RscerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rscer_request_certificateParameters of this RscerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this RscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this RscerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this RscerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this RscerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def dsnno(self):
        """Gets the dsnno of this RscerRequestCertificateParameters.

        DSN Number

        :return: The dsnno of this RscerRequestCertificateParameters.
        :rtype: str
        """
        return self._dsnno

    @dsnno.setter
    def dsnno(self, dsnno):
        """Sets the dsnno of this RscerRequestCertificateParameters.

        DSN Number

        :param dsnno: The dsnno of this RscerRequestCertificateParameters.
        :type dsnno: str
        """
        if dsnno is None:
            raise ValueError("Invalid value for `dsnno`, must not be `None`")

        self._dsnno = dsnno

    @property
    def father_name(self):
        """Gets the father_name of this RscerRequestCertificateParameters.

        Father Name

        :return: The father_name of this RscerRequestCertificateParameters.
        :rtype: str
        """
        return self._father_name

    @father_name.setter
    def father_name(self, father_name):
        """Sets the father_name of this RscerRequestCertificateParameters.

        Father Name

        :param father_name: The father_name of this RscerRequestCertificateParameters.
        :type father_name: str
        """
        if father_name is None:
            raise ValueError("Invalid value for `father_name`, must not be `None`")

        self._father_name = father_name

    @property
    def full_name(self):
        """Gets the full_name of this RscerRequestCertificateParameters.

        Full name

        :return: The full_name of this RscerRequestCertificateParameters.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this RscerRequestCertificateParameters.

        Full name

        :param full_name: The full_name of this RscerRequestCertificateParameters.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def uid(self):
        """Gets the uid of this RscerRequestCertificateParameters.

        Aadhaar number

        :return: The uid of this RscerRequestCertificateParameters.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this RscerRequestCertificateParameters.

        Aadhaar number

        :param uid: The uid of this RscerRequestCertificateParameters.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid
