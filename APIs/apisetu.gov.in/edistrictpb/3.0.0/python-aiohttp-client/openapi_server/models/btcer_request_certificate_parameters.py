# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BtcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dob: str=None, registration_id: str=None):
        """BtcerRequestCertificateParameters - a model defined in OpenAPI

        :param dob: The dob of this BtcerRequestCertificateParameters.
        :param registration_id: The registration_id of this BtcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'dob': str,
            'registration_id': str
        }

        self.attribute_map = {
            'dob': 'DOB',
            'registration_id': 'RegistrationID'
        }

        self._dob = dob
        self._registration_id = registration_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BtcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The btcer_request_certificateParameters of this BtcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dob(self):
        """Gets the dob of this BtcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this BtcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this BtcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def registration_id(self):
        """Gets the registration_id of this BtcerRequestCertificateParameters.

        Registration Number

        :return: The registration_id of this BtcerRequestCertificateParameters.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this BtcerRequestCertificateParameters.

        Registration Number

        :param registration_id: The registration_id of this BtcerRequestCertificateParameters.
        :type registration_id: str
        """
        if registration_id is None:
            raise ValueError("Invalid value for `registration_id`, must not be `None`")

        self._registration_id = registration_id
