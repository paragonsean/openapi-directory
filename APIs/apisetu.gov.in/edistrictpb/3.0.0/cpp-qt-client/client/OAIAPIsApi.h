/**
 * Punjab State eGovernance Society, Punjab
 * eDistrict Punjab (http://edistrict.punjabgovt.gov.in) is the online service delivery portal for Punjab State Govt. Certain documents issued by it (e.g. Residence, SC/ST, OBC Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBtcer_400_response.h"
#include "OAIBtcer_401_response.h"
#include "OAIBtcer_404_response.h"
#include "OAIBtcer_500_response.h"
#include "OAIBtcer_502_response.h"
#include "OAIBtcer_503_response.h"
#include "OAIBtcer_504_response.h"
#include "OAIBtcer_request.h"
#include "OAIEwcer_request.h"
#include "OAIObcer_request.h"
#include "OAIRscer_request.h"
#include "OAIShcer_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_btcer_request OAIBtcer_request [optional]
    */
    virtual void btcer(const ::OpenAPI::OptionalParam<OAIBtcer_request> &oai_btcer_request = ::OpenAPI::OptionalParam<OAIBtcer_request>());

    /**
    * @param[in]  oai_btcer_request OAIBtcer_request [optional]
    */
    virtual void dtcer(const ::OpenAPI::OptionalParam<OAIBtcer_request> &oai_btcer_request = ::OpenAPI::OptionalParam<OAIBtcer_request>());

    /**
    * @param[in]  oai_ewcer_request OAIEwcer_request [optional]
    */
    virtual void ewcer(const ::OpenAPI::OptionalParam<OAIEwcer_request> &oai_ewcer_request = ::OpenAPI::OptionalParam<OAIEwcer_request>());

    /**
    * @param[in]  oai_obcer_request OAIObcer_request [optional]
    */
    virtual void obcer(const ::OpenAPI::OptionalParam<OAIObcer_request> &oai_obcer_request = ::OpenAPI::OptionalParam<OAIObcer_request>());

    /**
    * @param[in]  oai_ewcer_request OAIEwcer_request [optional]
    */
    virtual void racer(const ::OpenAPI::OptionalParam<OAIEwcer_request> &oai_ewcer_request = ::OpenAPI::OptionalParam<OAIEwcer_request>());

    /**
    * @param[in]  oai_rscer_request OAIRscer_request [optional]
    */
    virtual void rscer(const ::OpenAPI::OptionalParam<OAIRscer_request> &oai_rscer_request = ::OpenAPI::OptionalParam<OAIRscer_request>());

    /**
    * @param[in]  oai_shcer_request OAIShcer_request [optional]
    */
    virtual void shcer(const ::OpenAPI::OptionalParam<OAIShcer_request> &oai_shcer_request = ::OpenAPI::OptionalParam<OAIShcer_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void btcerCallback(OAIHttpRequestWorker *worker);
    void dtcerCallback(OAIHttpRequestWorker *worker);
    void ewcerCallback(OAIHttpRequestWorker *worker);
    void obcerCallback(OAIHttpRequestWorker *worker);
    void racerCallback(OAIHttpRequestWorker *worker);
    void rscerCallback(OAIHttpRequestWorker *worker);
    void shcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void btcerSignal();
    void dtcerSignal();
    void ewcerSignal();
    void obcerSignal();
    void racerSignal();
    void rscerSignal();
    void shcerSignal();


    void btcerSignalFull(OAIHttpRequestWorker *worker);
    void dtcerSignalFull(OAIHttpRequestWorker *worker);
    void ewcerSignalFull(OAIHttpRequestWorker *worker);
    void obcerSignalFull(OAIHttpRequestWorker *worker);
    void racerSignalFull(OAIHttpRequestWorker *worker);
    void rscerSignalFull(OAIHttpRequestWorker *worker);
    void shcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use btcerSignalError() instead")
    void btcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalError() instead")
    void dtcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ewcerSignalError() instead")
    void ewcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ewcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalError() instead")
    void obcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalError() instead")
    void racerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalError() instead")
    void rscerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalError() instead")
    void shcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use btcerSignalErrorFull() instead")
    void btcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void btcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dtcerSignalErrorFull() instead")
    void dtcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dtcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ewcerSignalErrorFull() instead")
    void ewcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ewcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use obcerSignalErrorFull() instead")
    void obcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void obcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racerSignalErrorFull() instead")
    void racerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void racerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rscerSignalErrorFull() instead")
    void rscerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rscerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shcerSignalErrorFull() instead")
    void shcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
