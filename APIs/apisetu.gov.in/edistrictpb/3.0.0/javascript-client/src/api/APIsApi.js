/**
 * Punjab State eGovernance Society, Punjab
 * eDistrict Punjab (http://edistrict.punjabgovt.gov.in) is the online service delivery portal for Punjab State Govt. Certain documents issued by it (e.g. Residence, SC/ST, OBC Certificates etc) can be pulled into citizens' DigiLocker accounts.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Btcer400Response from '../model/Btcer400Response';
import Btcer401Response from '../model/Btcer401Response';
import Btcer404Response from '../model/Btcer404Response';
import Btcer500Response from '../model/Btcer500Response';
import Btcer502Response from '../model/Btcer502Response';
import Btcer503Response from '../model/Btcer503Response';
import Btcer504Response from '../model/Btcer504Response';
import BtcerRequest from '../model/BtcerRequest';
import EwcerRequest from '../model/EwcerRequest';
import ObcerRequest from '../model/ObcerRequest';
import RscerRequest from '../model/RscerRequest';
import ShcerRequest from '../model/ShcerRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the btcer operation.
     * @callback module:api/APIsApi~btcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Birth Certificate
     * API to verify Birth Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~btcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    btcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/btcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dtcer operation.
     * @callback module:api/APIsApi~dtcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Death Certificate
     * API to verify Death Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/BtcerRequest} [btcerRequest] Request format
     * @param {module:api/APIsApi~dtcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dtcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['btcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dtcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ewcer operation.
     * @callback module:api/APIsApi~ewcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Economically Weaker Section Certificate
     * API to verify Economically Weaker Section Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/EwcerRequest} [ewcerRequest] Request format
     * @param {module:api/APIsApi~ewcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ewcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ewcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/ewcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the obcer operation.
     * @callback module:api/APIsApi~obcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OBC Certificate
     * API to verify OBC Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/ObcerRequest} [obcerRequest] Request format
     * @param {module:api/APIsApi~obcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    obcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['obcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/obcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the racer operation.
     * @callback module:api/APIsApi~racerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rural Area Certificate
     * API to verify Rural Area Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/EwcerRequest} [ewcerRequest] Request format
     * @param {module:api/APIsApi~racerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    racer(opts, callback) {
      opts = opts || {};
      let postBody = opts['ewcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/racer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rscer operation.
     * @callback module:api/APIsApi~rscerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Residence Certificate
     * API to verify Residence Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/RscerRequest} [rscerRequest] Request format
     * @param {module:api/APIsApi~rscerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rscer(opts, callback) {
      opts = opts || {};
      let postBody = opts['rscerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rscer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shcer operation.
     * @callback module:api/APIsApi~shcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SC/ST  Certificate
     * API to verify SC/ST  Certificate.
     * @param {Object} opts Optional parameters
     * @param {module:model/ShcerRequest} [shcerRequest] Request format
     * @param {module:api/APIsApi~shcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['shcerRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/shcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
