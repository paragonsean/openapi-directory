/**
 * UCO Bank
 * APIs provided by UCO Bank.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITdcer_request_certificateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITdcer_request_certificateParameters::OAITdcer_request_certificateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITdcer_request_certificateParameters::OAITdcer_request_certificateParameters() {
    this->initializeModel();
}

OAITdcer_request_certificateParameters::~OAITdcer_request_certificateParameters() {}

void OAITdcer_request_certificateParameters::initializeModel() {

    m_cust_id_isSet = false;
    m_cust_id_isValid = false;

    m_dob_isSet = false;
    m_dob_isValid = false;

    m_fin_yr_isSet = false;
    m_fin_yr_isValid = false;
}

void OAITdcer_request_certificateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITdcer_request_certificateParameters::fromJsonObject(QJsonObject json) {

    m_cust_id_isValid = ::OpenAPI::fromJsonValue(m_cust_id, json[QString("CustID")]);
    m_cust_id_isSet = !json[QString("CustID")].isNull() && m_cust_id_isValid;

    m_dob_isValid = ::OpenAPI::fromJsonValue(m_dob, json[QString("DOB")]);
    m_dob_isSet = !json[QString("DOB")].isNull() && m_dob_isValid;

    m_fin_yr_isValid = ::OpenAPI::fromJsonValue(m_fin_yr, json[QString("finYr")]);
    m_fin_yr_isSet = !json[QString("finYr")].isNull() && m_fin_yr_isValid;
}

QString OAITdcer_request_certificateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITdcer_request_certificateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_cust_id_isSet) {
        obj.insert(QString("CustID"), ::OpenAPI::toJsonValue(m_cust_id));
    }
    if (m_dob_isSet) {
        obj.insert(QString("DOB"), ::OpenAPI::toJsonValue(m_dob));
    }
    if (m_fin_yr_isSet) {
        obj.insert(QString("finYr"), ::OpenAPI::toJsonValue(m_fin_yr));
    }
    return obj;
}

QString OAITdcer_request_certificateParameters::getCustId() const {
    return m_cust_id;
}
void OAITdcer_request_certificateParameters::setCustId(const QString &cust_id) {
    m_cust_id = cust_id;
    m_cust_id_isSet = true;
}

bool OAITdcer_request_certificateParameters::is_cust_id_Set() const{
    return m_cust_id_isSet;
}

bool OAITdcer_request_certificateParameters::is_cust_id_Valid() const{
    return m_cust_id_isValid;
}

QString OAITdcer_request_certificateParameters::getDob() const {
    return m_dob;
}
void OAITdcer_request_certificateParameters::setDob(const QString &dob) {
    m_dob = dob;
    m_dob_isSet = true;
}

bool OAITdcer_request_certificateParameters::is_dob_Set() const{
    return m_dob_isSet;
}

bool OAITdcer_request_certificateParameters::is_dob_Valid() const{
    return m_dob_isValid;
}

QString OAITdcer_request_certificateParameters::getFinYr() const {
    return m_fin_yr;
}
void OAITdcer_request_certificateParameters::setFinYr(const QString &fin_yr) {
    m_fin_yr = fin_yr;
    m_fin_yr_isSet = true;
}

bool OAITdcer_request_certificateParameters::is_fin_yr_Set() const{
    return m_fin_yr_isSet;
}

bool OAITdcer_request_certificateParameters::is_fin_yr_Valid() const{
    return m_fin_yr_isValid;
}

bool OAITdcer_request_certificateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cust_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fin_yr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITdcer_request_certificateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cust_id_isValid && m_dob_isValid && m_fin_yr_isValid && true;
}

} // namespace OpenAPI
