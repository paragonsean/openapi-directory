# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TdcerRequestCertificateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cust_id: str=None, dob: str=None, fin_yr: str=None):
        """TdcerRequestCertificateParameters - a model defined in OpenAPI

        :param cust_id: The cust_id of this TdcerRequestCertificateParameters.
        :param dob: The dob of this TdcerRequestCertificateParameters.
        :param fin_yr: The fin_yr of this TdcerRequestCertificateParameters.
        """
        self.openapi_types = {
            'cust_id': str,
            'dob': str,
            'fin_yr': str
        }

        self.attribute_map = {
            'cust_id': 'CustID',
            'dob': 'DOB',
            'fin_yr': 'finYr'
        }

        self._cust_id = cust_id
        self._dob = dob
        self._fin_yr = fin_yr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TdcerRequestCertificateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tdcer_request_certificateParameters of this TdcerRequestCertificateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cust_id(self):
        """Gets the cust_id of this TdcerRequestCertificateParameters.

        Account Number

        :return: The cust_id of this TdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._cust_id

    @cust_id.setter
    def cust_id(self, cust_id):
        """Sets the cust_id of this TdcerRequestCertificateParameters.

        Account Number

        :param cust_id: The cust_id of this TdcerRequestCertificateParameters.
        :type cust_id: str
        """
        if cust_id is None:
            raise ValueError("Invalid value for `cust_id`, must not be `None`")

        self._cust_id = cust_id

    @property
    def dob(self):
        """Gets the dob of this TdcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :return: The dob of this TdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this TdcerRequestCertificateParameters.

        Date of birth in DD-MM-YYYY format

        :param dob: The dob of this TdcerRequestCertificateParameters.
        :type dob: str
        """
        if dob is None:
            raise ValueError("Invalid value for `dob`, must not be `None`")

        self._dob = dob

    @property
    def fin_yr(self):
        """Gets the fin_yr of this TdcerRequestCertificateParameters.

        Financial Year

        :return: The fin_yr of this TdcerRequestCertificateParameters.
        :rtype: str
        """
        return self._fin_yr

    @fin_yr.setter
    def fin_yr(self, fin_yr):
        """Sets the fin_yr of this TdcerRequestCertificateParameters.

        Financial Year

        :param fin_yr: The fin_yr of this TdcerRequestCertificateParameters.
        :type fin_yr: str
        """
        if fin_yr is None:
            raise ValueError("Invalid value for `fin_yr`, must not be `None`")

        self._fin_yr = fin_yr
