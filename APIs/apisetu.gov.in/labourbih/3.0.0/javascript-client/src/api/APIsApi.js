/**
 * Labour Resource Department, Bihar
 * Department of Labour Resources (http://labour.bih.nic.in/) issues various certificates to the citizens. They can be pulled into citizen's DigiLocker account. Currently available- Shops and Commercial Establishments Registration Certificate
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alimw400Response from '../model/Alimw400Response';
import Alimw401Response from '../model/Alimw401Response';
import Alimw404Response from '../model/Alimw404Response';
import Alimw500Response from '../model/Alimw500Response';
import Alimw502Response from '../model/Alimw502Response';
import Alimw503Response from '../model/Alimw503Response';
import Alimw504Response from '../model/Alimw504Response';
import AlimwRequest from '../model/AlimwRequest';

/**
* APIs service.
* @module api/APIsApi
* @version 3.0.0
*/
export default class APIsApi {

    /**
    * Constructs a new APIsApi. 
    * @alias module:api/APIsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alimw operation.
     * @callback module:api/APIsApi~alimwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application for License for Inter State Migrant Workmen
     * API to verify Application for License for Inter State Migrant Workmen.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~alimwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alimw(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alimw/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alsbl operation.
     * @callback module:api/APIsApi~alsblCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application/ License for Boilers
     * API to verify Application/ License for Boilers.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~alsblCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alsbl(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alsbl/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alsfc operation.
     * @callback module:api/APIsApi~alsfcCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application/ License for Factory
     * API to verify Application/ License for Factory.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~alsfcCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alsfc(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/alsfc/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apptu operation.
     * @callback module:api/APIsApi~apptuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application realted to Trade Unions
     * API to verify Application realted to Trade Unions.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~apptuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apptu(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apptu/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clcer operation.
     * @callback module:api/APIsApi~clcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate for Contract Labour License
     * API to verify Registration Certificate for Contract Labour License.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~clcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/clcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the noocl operation.
     * @callback module:api/APIsApi~nooclCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notice of Closure
     * API to verify Notice of Closure.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~nooclCallback} callback The callback function, accepting three arguments: error, data, response
     */
    noocl(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/noocl/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the srcer operation.
     * @callback module:api/APIsApi~srcerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registration Certificate of Shops And Commercial Establishment
     * API to verify Registration Certificate of Shops And Commercial Establishment.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlimwRequest} [alimwRequest] Request format
     * @param {module:api/APIsApi~srcerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    srcer(opts, callback) {
      opts = opts || {};
      let postBody = opts['alimwRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['clientId', 'apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/pdf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/srcer/certificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
