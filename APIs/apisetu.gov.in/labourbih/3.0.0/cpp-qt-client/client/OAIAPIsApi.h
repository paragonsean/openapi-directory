/**
 * Labour Resource Department, Bihar
 * Department of Labour Resources (http://labour.bih.nic.in/) issues various certificates to the citizens. They can be pulled into citizen's DigiLocker account. Currently available- Shops and Commercial Establishments Registration Certificate
 *
 * The version of the OpenAPI document: 3.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIsApi_H
#define OAI_OAIAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlimw_400_response.h"
#include "OAIAlimw_401_response.h"
#include "OAIAlimw_404_response.h"
#include "OAIAlimw_500_response.h"
#include "OAIAlimw_502_response.h"
#include "OAIAlimw_503_response.h"
#include "OAIAlimw_504_response.h"
#include "OAIAlimw_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIsApi : public QObject {
    Q_OBJECT

public:
    OAIAPIsApi(const int timeOut = 0);
    ~OAIAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void alimw(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void alsbl(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void alsfc(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void apptu(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void clcer(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void noocl(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());

    /**
    * @param[in]  oai_alimw_request OAIAlimw_request [optional]
    */
    virtual void srcer(const ::OpenAPI::OptionalParam<OAIAlimw_request> &oai_alimw_request = ::OpenAPI::OptionalParam<OAIAlimw_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alimwCallback(OAIHttpRequestWorker *worker);
    void alsblCallback(OAIHttpRequestWorker *worker);
    void alsfcCallback(OAIHttpRequestWorker *worker);
    void apptuCallback(OAIHttpRequestWorker *worker);
    void clcerCallback(OAIHttpRequestWorker *worker);
    void nooclCallback(OAIHttpRequestWorker *worker);
    void srcerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alimwSignal();
    void alsblSignal();
    void alsfcSignal();
    void apptuSignal();
    void clcerSignal();
    void nooclSignal();
    void srcerSignal();


    void alimwSignalFull(OAIHttpRequestWorker *worker);
    void alsblSignalFull(OAIHttpRequestWorker *worker);
    void alsfcSignalFull(OAIHttpRequestWorker *worker);
    void apptuSignalFull(OAIHttpRequestWorker *worker);
    void clcerSignalFull(OAIHttpRequestWorker *worker);
    void nooclSignalFull(OAIHttpRequestWorker *worker);
    void srcerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use alimwSignalError() instead")
    void alimwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alimwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alsblSignalError() instead")
    void alsblSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alsblSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alsfcSignalError() instead")
    void alsfcSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alsfcSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apptuSignalError() instead")
    void apptuSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apptuSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clcerSignalError() instead")
    void clcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void clcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nooclSignalError() instead")
    void nooclSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void nooclSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use srcerSignalError() instead")
    void srcerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void srcerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alimwSignalErrorFull() instead")
    void alimwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alimwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alsblSignalErrorFull() instead")
    void alsblSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alsblSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alsfcSignalErrorFull() instead")
    void alsfcSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alsfcSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apptuSignalErrorFull() instead")
    void apptuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apptuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clcerSignalErrorFull() instead")
    void clcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nooclSignalErrorFull() instead")
    void nooclSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nooclSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use srcerSignalErrorFull() instead")
    void srcerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void srcerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
