/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListingsPostRequestPreorderInfo model module.
 * @module model/ListingsPostRequestPreorderInfo
 * @version 3.0
 */
class ListingsPostRequestPreorderInfo {
    /**
     * Constructs a new <code>ListingsPostRequestPreorderInfo</code>.
     * Create or update a preorder listing. Requires opt-in. Please contact sales@reverb.com if you would like to activate this feature.
     * @alias module:model/ListingsPostRequestPreorderInfo
     * @param leadTimeUnit {module:model/ListingsPostRequestPreorderInfo.LeadTimeUnitEnum} The unit of time which lead_time is measured in
     */
    constructor(leadTimeUnit) { 
        
        ListingsPostRequestPreorderInfo.initialize(this, leadTimeUnit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, leadTimeUnit) { 
        obj['lead_time_unit'] = leadTimeUnit;
    }

    /**
     * Constructs a <code>ListingsPostRequestPreorderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingsPostRequestPreorderInfo} obj Optional instance to populate.
     * @return {module:model/ListingsPostRequestPreorderInfo} The populated <code>ListingsPostRequestPreorderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingsPostRequestPreorderInfo();

            if (data.hasOwnProperty('lead_time')) {
                obj['lead_time'] = ApiClient.convertToType(data['lead_time'], 'Number');
            }
            if (data.hasOwnProperty('lead_time_unit')) {
                obj['lead_time_unit'] = ApiClient.convertToType(data['lead_time_unit'], 'String');
            }
            if (data.hasOwnProperty('ship_date')) {
                obj['ship_date'] = ApiClient.convertToType(data['ship_date'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingsPostRequestPreorderInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingsPostRequestPreorderInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListingsPostRequestPreorderInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['lead_time_unit'] && !(typeof data['lead_time_unit'] === 'string' || data['lead_time_unit'] instanceof String)) {
            throw new Error("Expected the field `lead_time_unit` to be a primitive type in the JSON string but got " + data['lead_time_unit']);
        }
        // ensure the json data is a string
        if (data['ship_date'] && !(typeof data['ship_date'] === 'string' || data['ship_date'] instanceof String)) {
            throw new Error("Expected the field `ship_date` to be a primitive type in the JSON string but got " + data['ship_date']);
        }

        return true;
    }


}

ListingsPostRequestPreorderInfo.RequiredProperties = ["lead_time_unit"];

/**
 * The amount of time before the item will be ready to ship. When lead_time is submitted it is converted into days and added to the current date to produce `estimated_ship_date` in the response body of the request.
 * @member {Number} lead_time
 */
ListingsPostRequestPreorderInfo.prototype['lead_time'] = undefined;

/**
 * The unit of time which lead_time is measured in
 * @member {module:model/ListingsPostRequestPreorderInfo.LeadTimeUnitEnum} lead_time_unit
 */
ListingsPostRequestPreorderInfo.prototype['lead_time_unit'] = undefined;

/**
 * The date the item will be available to ship. In the response body of the request, `estimated_ship_date`, will be the same as ship_date. Date must be ISO8601 format - e.g: 2015-04-09T10:52:23-00:00.
 * @member {String} ship_date
 */
ListingsPostRequestPreorderInfo.prototype['ship_date'] = undefined;





/**
 * Allowed values for the <code>lead_time_unit</code> property.
 * @enum {String}
 * @readonly
 */
ListingsPostRequestPreorderInfo['LeadTimeUnitEnum'] = {

    /**
     * value: "days"
     * @const
     */
    "days": "days",

    /**
     * value: "weeks"
     * @const
     */
    "weeks": "weeks"
};



export default ListingsPostRequestPreorderInfo;

