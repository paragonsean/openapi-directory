/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MyFollowsSearchPostRequest model module.
 * @module model/MyFollowsSearchPostRequest
 * @version 3.0
 */
class MyFollowsSearchPostRequest {
    /**
     * Constructs a new <code>MyFollowsSearchPostRequest</code>.
     * @alias module:model/MyFollowsSearchPostRequest
     */
    constructor() { 
        
        MyFollowsSearchPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MyFollowsSearchPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MyFollowsSearchPostRequest} obj Optional instance to populate.
     * @return {module:model/MyFollowsSearchPostRequest} The populated <code>MyFollowsSearchPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MyFollowsSearchPostRequest();

            if (data.hasOwnProperty('accepts_gift_cards')) {
                obj['accepts_gift_cards'] = ApiClient.convertToType(data['accepts_gift_cards'], 'Boolean');
            }
            if (data.hasOwnProperty('accepts_payment_plans')) {
                obj['accepts_payment_plans'] = ApiClient.convertToType(data['accepts_payment_plans'], 'Boolean');
            }
            if (data.hasOwnProperty('auction_price_max')) {
                obj['auction_price_max'] = ApiClient.convertToType(data['auction_price_max'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], ['String']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('decade')) {
                obj['decade'] = ApiClient.convertToType(data['decade'], 'String');
            }
            if (data.hasOwnProperty('exclude_auctions')) {
                obj['exclude_auctions'] = ApiClient.convertToType(data['exclude_auctions'], 'Boolean');
            }
            if (data.hasOwnProperty('finish')) {
                obj['finish'] = ApiClient.convertToType(data['finish'], 'String');
            }
            if (data.hasOwnProperty('handmade')) {
                obj['handmade'] = ApiClient.convertToType(data['handmade'], 'Boolean');
            }
            if (data.hasOwnProperty('item_city')) {
                obj['item_city'] = ApiClient.convertToType(data['item_city'], 'String');
            }
            if (data.hasOwnProperty('item_country')) {
                obj['item_country'] = ApiClient.convertToType(data['item_country'], 'String');
            }
            if (data.hasOwnProperty('item_region')) {
                obj['item_region'] = ApiClient.convertToType(data['item_region'], 'String');
            }
            if (data.hasOwnProperty('item_state')) {
                obj['item_state'] = ApiClient.convertToType(data['item_state'], 'String');
            }
            if (data.hasOwnProperty('listing_type')) {
                obj['listing_type'] = ApiClient.convertToType(data['listing_type'], 'String');
            }
            if (data.hasOwnProperty('local_pickup')) {
                obj['local_pickup'] = ApiClient.convertToType(data['local_pickup'], 'Boolean');
            }
            if (data.hasOwnProperty('make')) {
                obj['make'] = ApiClient.convertToType(data['make'], ['String']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('must_not')) {
                obj['must_not'] = ApiClient.convertToType(data['must_not'], 'String');
            }
            if (data.hasOwnProperty('not_ids')) {
                obj['not_ids'] = ApiClient.convertToType(data['not_ids'], ['Number']);
            }
            if (data.hasOwnProperty('preferred_seller')) {
                obj['preferred_seller'] = ApiClient.convertToType(data['preferred_seller'], 'Boolean');
            }
            if (data.hasOwnProperty('price_max')) {
                obj['price_max'] = ApiClient.convertToType(data['price_max'], 'Number');
            }
            if (data.hasOwnProperty('price_min')) {
                obj['price_min'] = ApiClient.convertToType(data['price_min'], 'Number');
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('ships_to')) {
                obj['ships_to'] = ApiClient.convertToType(data['ships_to'], 'String');
            }
            if (data.hasOwnProperty('shop')) {
                obj['shop'] = ApiClient.convertToType(data['shop'], 'String');
            }
            if (data.hasOwnProperty('shop_id')) {
                obj['shop_id'] = ApiClient.convertToType(data['shop_id'], 'String');
            }
            if (data.hasOwnProperty('watchers_count_min')) {
                obj['watchers_count_min'] = ApiClient.convertToType(data['watchers_count_min'], 'Number');
            }
            if (data.hasOwnProperty('year_max')) {
                obj['year_max'] = ApiClient.convertToType(data['year_max'], 'Number');
            }
            if (data.hasOwnProperty('year_min')) {
                obj['year_min'] = ApiClient.convertToType(data['year_min'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MyFollowsSearchPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MyFollowsSearchPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditions'])) {
            throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['decade'] && !(typeof data['decade'] === 'string' || data['decade'] instanceof String)) {
            throw new Error("Expected the field `decade` to be a primitive type in the JSON string but got " + data['decade']);
        }
        // ensure the json data is a string
        if (data['finish'] && !(typeof data['finish'] === 'string' || data['finish'] instanceof String)) {
            throw new Error("Expected the field `finish` to be a primitive type in the JSON string but got " + data['finish']);
        }
        // ensure the json data is a string
        if (data['item_city'] && !(typeof data['item_city'] === 'string' || data['item_city'] instanceof String)) {
            throw new Error("Expected the field `item_city` to be a primitive type in the JSON string but got " + data['item_city']);
        }
        // ensure the json data is a string
        if (data['item_country'] && !(typeof data['item_country'] === 'string' || data['item_country'] instanceof String)) {
            throw new Error("Expected the field `item_country` to be a primitive type in the JSON string but got " + data['item_country']);
        }
        // ensure the json data is a string
        if (data['item_region'] && !(typeof data['item_region'] === 'string' || data['item_region'] instanceof String)) {
            throw new Error("Expected the field `item_region` to be a primitive type in the JSON string but got " + data['item_region']);
        }
        // ensure the json data is a string
        if (data['item_state'] && !(typeof data['item_state'] === 'string' || data['item_state'] instanceof String)) {
            throw new Error("Expected the field `item_state` to be a primitive type in the JSON string but got " + data['item_state']);
        }
        // ensure the json data is a string
        if (data['listing_type'] && !(typeof data['listing_type'] === 'string' || data['listing_type'] instanceof String)) {
            throw new Error("Expected the field `listing_type` to be a primitive type in the JSON string but got " + data['listing_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['make'])) {
            throw new Error("Expected the field `make` to be an array in the JSON data but got " + data['make']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['must_not'] && !(typeof data['must_not'] === 'string' || data['must_not'] instanceof String)) {
            throw new Error("Expected the field `must_not` to be a primitive type in the JSON string but got " + data['must_not']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['not_ids'])) {
            throw new Error("Expected the field `not_ids` to be an array in the JSON data but got " + data['not_ids']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is a string
        if (data['ships_to'] && !(typeof data['ships_to'] === 'string' || data['ships_to'] instanceof String)) {
            throw new Error("Expected the field `ships_to` to be a primitive type in the JSON string but got " + data['ships_to']);
        }
        // ensure the json data is a string
        if (data['shop'] && !(typeof data['shop'] === 'string' || data['shop'] instanceof String)) {
            throw new Error("Expected the field `shop` to be a primitive type in the JSON string but got " + data['shop']);
        }
        // ensure the json data is a string
        if (data['shop_id'] && !(typeof data['shop_id'] === 'string' || data['shop_id'] instanceof String)) {
            throw new Error("Expected the field `shop_id` to be a primitive type in the JSON string but got " + data['shop_id']);
        }

        return true;
    }


}



/**
 * If true, include only items that accept gift cards
 * @member {Boolean} accepts_gift_cards
 */
MyFollowsSearchPostRequest.prototype['accepts_gift_cards'] = undefined;

/**
 * If true, only show items that can be purchased with a payment plan
 * @member {Boolean} accepts_payment_plans
 */
MyFollowsSearchPostRequest.prototype['accepts_payment_plans'] = undefined;

/**
 * Maximum current auction price
 * @member {Number} auction_price_max
 */
MyFollowsSearchPostRequest.prototype['auction_price_max'] = undefined;

/**
 * Category slug from /api/categories
 * @member {String} category
 */
MyFollowsSearchPostRequest.prototype['category'] = undefined;

/**
 * Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint
 * @member {Array.<String>} conditions
 */
MyFollowsSearchPostRequest.prototype['conditions'] = undefined;

/**
 * The currency to be used for the price filters
 * @member {module:model/MyFollowsSearchPostRequest.CurrencyEnum} currency
 */
MyFollowsSearchPostRequest.prototype['currency'] = undefined;

/**
 * Decade: e.g. 1970s, early 70s
 * @member {String} decade
 */
MyFollowsSearchPostRequest.prototype['decade'] = undefined;

/**
 * If true, exclude auctions
 * @member {Boolean} exclude_auctions
 */
MyFollowsSearchPostRequest.prototype['exclude_auctions'] = undefined;

/**
 * Visual finish of the item, common for guitars
 * @member {String} finish
 */
MyFollowsSearchPostRequest.prototype['finish'] = undefined;

/**
 * Handmade items only
 * @member {Boolean} handmade
 */
MyFollowsSearchPostRequest.prototype['handmade'] = undefined;

/**
 * City where item is located
 * @member {String} item_city
 */
MyFollowsSearchPostRequest.prototype['item_city'] = undefined;

/**
 * DEPRECATED - Country code where item is located
 * @member {String} item_country
 */
MyFollowsSearchPostRequest.prototype['item_country'] = undefined;

/**
 * Country code where item is located
 * @member {String} item_region
 */
MyFollowsSearchPostRequest.prototype['item_region'] = undefined;

/**
 * State or region code where item is located
 * @member {String} item_state
 */
MyFollowsSearchPostRequest.prototype['item_state'] = undefined;

/**
 * Type of listing: auctions,offers
 * @member {module:model/MyFollowsSearchPostRequest.ListingTypeEnum} listing_type
 */
MyFollowsSearchPostRequest.prototype['listing_type'] = undefined;

/**
 * Only items that offer local pickup
 * @member {Boolean} local_pickup
 */
MyFollowsSearchPostRequest.prototype['local_pickup'] = undefined;

/**
 * Make(s)/brand of item (e.g. Fender). Can take a single value or an array.
 * @member {Array.<String>} make
 */
MyFollowsSearchPostRequest.prototype['make'] = undefined;

/**
 * Model of item (e.g. Stratocaster)
 * @member {String} model
 */
MyFollowsSearchPostRequest.prototype['model'] = undefined;

/**
 * Search term negation. If you want to exclude a term, add it here
 * @member {String} must_not
 */
MyFollowsSearchPostRequest.prototype['must_not'] = undefined;

/**
 * Listing ID negation. If you want to exclude a listing, add it here.
 * @member {Array.<Number>} not_ids
 */
MyFollowsSearchPostRequest.prototype['not_ids'] = undefined;

/**
 * If true, include only items by Reverb Preferred Sellers
 * @member {Boolean} preferred_seller
 */
MyFollowsSearchPostRequest.prototype['preferred_seller'] = undefined;

/**
 * Maximum price of search results (USD)
 * @member {Number} price_max
 */
MyFollowsSearchPostRequest.prototype['price_max'] = undefined;

/**
 * Minimum price of search results (USD)
 * @member {Number} price_min
 */
MyFollowsSearchPostRequest.prototype['price_min'] = undefined;

/**
 * Product type slug from /api/categories
 * @member {String} product_type
 */
MyFollowsSearchPostRequest.prototype['product_type'] = undefined;

/**
 * Search query.
 * @member {String} query
 */
MyFollowsSearchPostRequest.prototype['query'] = undefined;

/**
 * Limit search to items that ship to this country code
 * @member {String} ships_to
 */
MyFollowsSearchPostRequest.prototype['ships_to'] = undefined;

/**
 * Slug of shop to search
 * @member {String} shop
 */
MyFollowsSearchPostRequest.prototype['shop'] = undefined;

/**
 * ID of shop to search
 * @member {String} shop_id
 */
MyFollowsSearchPostRequest.prototype['shop_id'] = undefined;

/**
 * Minimum number of watchers (used to find popular items)
 * @member {Number} watchers_count_min
 */
MyFollowsSearchPostRequest.prototype['watchers_count_min'] = undefined;

/**
 * Maximum year of manufacture
 * @member {Number} year_max
 */
MyFollowsSearchPostRequest.prototype['year_max'] = undefined;

/**
 * Minumum year of manufacture
 * @member {Number} year_min
 */
MyFollowsSearchPostRequest.prototype['year_min'] = undefined;





/**
 * Allowed values for the <code>currency</code> property.
 * @enum {String}
 * @readonly
 */
MyFollowsSearchPostRequest['CurrencyEnum'] = {

    /**
     * value: "USD"
     * @const
     */
    "USD": "USD",

    /**
     * value: "CAD"
     * @const
     */
    "CAD": "CAD",

    /**
     * value: "EUR"
     * @const
     */
    "EUR": "EUR",

    /**
     * value: "GBP"
     * @const
     */
    "GBP": "GBP",

    /**
     * value: "AUD"
     * @const
     */
    "AUD": "AUD",

    /**
     * value: "JPY"
     * @const
     */
    "JPY": "JPY",

    /**
     * value: "NZD"
     * @const
     */
    "NZD": "NZD",

    /**
     * value: "MXN"
     * @const
     */
    "MXN": "MXN",

    /**
     * value: "DKK"
     * @const
     */
    "DKK": "DKK",

    /**
     * value: "SEK"
     * @const
     */
    "SEK": "SEK",

    /**
     * value: "CHF"
     * @const
     */
    "CHF": "CHF",

    /**
     * value: "ARS"
     * @const
     */
    "ARS": "ARS",

    /**
     * value: "BRL"
     * @const
     */
    "BRL": "BRL",

    /**
     * value: "HKD"
     * @const
     */
    "HKD": "HKD",

    /**
     * value: "NOK"
     * @const
     */
    "NOK": "NOK",

    /**
     * value: "PHP"
     * @const
     */
    "PHP": "PHP",

    /**
     * value: "PLN"
     * @const
     */
    "PLN": "PLN",

    /**
     * value: "RUB"
     * @const
     */
    "RUB": "RUB"
};


/**
 * Allowed values for the <code>listing_type</code> property.
 * @enum {String}
 * @readonly
 */
MyFollowsSearchPostRequest['ListingTypeEnum'] = {

    /**
     * value: "auctions"
     * @const
     */
    "auctions": "auctions",

    /**
     * value: "offers"
     * @const
     */
    "offers": "offers"
};



export default MyFollowsSearchPostRequest;

