/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListingsPostRequestSeller model module.
 * @module model/ListingsPostRequestSeller
 * @version 3.0
 */
class ListingsPostRequestSeller {
    /**
     * Constructs a new <code>ListingsPostRequestSeller</code>.
     * @alias module:model/ListingsPostRequestSeller
     */
    constructor() { 
        
        ListingsPostRequestSeller.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListingsPostRequestSeller</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListingsPostRequestSeller} obj Optional instance to populate.
     * @return {module:model/ListingsPostRequestSeller} The populated <code>ListingsPostRequestSeller</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListingsPostRequestSeller();

            if (data.hasOwnProperty('paypal_email')) {
                obj['paypal_email'] = ApiClient.convertToType(data['paypal_email'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListingsPostRequestSeller</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListingsPostRequestSeller</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['paypal_email'] && !(typeof data['paypal_email'] === 'string' || data['paypal_email'] instanceof String)) {
            throw new Error("Expected the field `paypal_email` to be a primitive type in the JSON string but got " + data['paypal_email']);
        }

        return true;
    }


}



/**
 * @member {String} paypal_email
 */
ListingsPostRequestSeller.prototype['paypal_email'] = undefined;






export default ListingsPostRequestSeller;

