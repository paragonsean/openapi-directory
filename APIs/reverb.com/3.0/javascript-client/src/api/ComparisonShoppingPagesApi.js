/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ComparisonShoppingPages service.
* @module api/ComparisonShoppingPagesApi
* @version 3.0
*/
export default class ComparisonShoppingPagesApi {

    /**
    * Constructs a new ComparisonShoppingPagesApi. 
    * @alias module:api/ComparisonShoppingPagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the comparisonShoppingPagesFindGet operation.
     * @callback module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesFindGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show comparison shopping page
     * Show comparison shopping page
     * @param {Object} opts Optional parameters
     * @param {String} [id] ID of the comparison shopping page
     * @param {String} [slug] Slug of the comparison shopping page
     * @param {module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesFindGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    comparisonShoppingPagesFindGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'slug': opts['slug']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comparison_shopping_pages/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comparisonShoppingPagesGet operation.
     * @callback module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a set of comparison shopping pages based on the current params
     * Returns a set of comparison shopping pages based on the current params
     * @param {module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    comparisonShoppingPagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comparison_shopping_pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comparisonShoppingPagesIdGet operation.
     * @callback module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    comparisonShoppingPagesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling comparisonShoppingPagesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comparison_shopping_pages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comparisonShoppingPagesIdListingsGet operation.
     * @callback module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdListingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return new or used listings for a comparison shopping page
     * Return new or used listings for a comparison shopping page
     * @param {String} id 
     * @param {String} condition Condition of the listing
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    comparisonShoppingPagesIdListingsGet(id, condition, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling comparisonShoppingPagesIdListingsGet");
      }
      // verify the required parameter 'condition' is set
      if (condition === undefined || condition === null) {
        throw new Error("Missing the required parameter 'condition' when calling comparisonShoppingPagesIdListingsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'condition': condition,
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comparison_shopping_pages/{id}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the comparisonShoppingPagesIdReviewsGet operation.
     * @callback module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View reviews of a comparison shopping page
     * View reviews of a comparison shopping page
     * @param {String} id 
     * @param {module:api/ComparisonShoppingPagesApi~comparisonShoppingPagesIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    comparisonShoppingPagesIdReviewsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling comparisonShoppingPagesIdReviewsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comparison_shopping_pages/{id}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
