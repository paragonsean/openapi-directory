/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebhooksRegistrationsPostRequest from '../model/WebhooksRegistrationsPostRequest';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 3.0
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhooksRegistrationsGet operation.
     * @callback module:api/WebhooksApi~webhooksRegistrationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get webhook registrations
     * Get webhook registrations
     * @param {module:api/WebhooksApi~webhooksRegistrationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksRegistrationsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/registrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksRegistrationsIdDelete operation.
     * @callback module:api/WebhooksApi~webhooksRegistrationsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a webhook
     * Remove a webhook
     * @param {String} id 
     * @param {module:api/WebhooksApi~webhooksRegistrationsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksRegistrationsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksRegistrationsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/registrations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksRegistrationsIdGet operation.
     * @callback module:api/WebhooksApi~webhooksRegistrationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a webhook registration
     * Get details of a webhook registration
     * @param {String} id 
     * @param {module:api/WebhooksApi~webhooksRegistrationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksRegistrationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhooksRegistrationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/registrations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhooksRegistrationsPost operation.
     * @callback module:api/WebhooksApi~webhooksRegistrationsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a webhook
     * Register a webhook
     * @param {Object} opts Optional parameters
     * @param {module:model/WebhooksRegistrationsPostRequest} [webhooksRegistrationsPostRequest] the content of the request
     * @param {module:api/WebhooksApi~webhooksRegistrationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhooksRegistrationsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['webhooksRegistrationsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/registrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
