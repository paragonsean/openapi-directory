/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsConversationIdOfferPostRequest from '../model/ConversationsConversationIdOfferPostRequest';
import ListingsListingIdConversationsPostRequest from '../model/ListingsListingIdConversationsPostRequest';
import MyAccountPutRequest from '../model/MyAccountPutRequest';
import MyConversationsIdPutRequest from '../model/MyConversationsIdPutRequest';
import MyConversationsPostRequest from '../model/MyConversationsPostRequest';
import MyFollowsArticlesPostRequest from '../model/MyFollowsArticlesPostRequest';
import MyFollowsSearchPostRequest from '../model/MyFollowsSearchPostRequest';
import MyListingsSlugStateEndPutRequest from '../model/MyListingsSlugStateEndPutRequest';
import MyNegotiationsIdAcceptPostRequest from '../model/MyNegotiationsIdAcceptPostRequest';
import MyOrdersSellingIdMarkPickedUpPostRequest from '../model/MyOrdersSellingIdMarkPickedUpPostRequest';
import MyOrdersSellingIdShipPostRequest from '../model/MyOrdersSellingIdShipPostRequest';

/**
* My service.
* @module api/MyApi
* @version 3.0
*/
export default class MyApi {

    /**
    * Constructs a new MyApi. 
    * @alias module:api/MyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the myAccountGet operation.
     * @callback module:api/MyApi~myAccountGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account details
     * Get account details
     * @param {module:api/MyApi~myAccountGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAccountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myAccountPut operation.
     * @callback module:api/MyApi~myAccountPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update account details
     * Update account details
     * @param {Object} opts Optional parameters
     * @param {module:model/MyAccountPutRequest} [myAccountPutRequest] the content of the request
     * @param {module:api/MyApi~myAccountPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAccountPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['myAccountPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myAddressesAddressIdDelete operation.
     * @callback module:api/MyApi~myAddressesAddressIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing address in your address book
     * Delete an existing address in your address book
     * @param {String} addressId 
     * @param {module:api/MyApi~myAddressesAddressIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAddressesAddressIdDelete(addressId, callback) {
      let postBody = null;
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling myAddressesAddressIdDelete");
      }

      let pathParams = {
        'address_id': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/addresses/{address_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myAddressesAddressIdPut operation.
     * @callback module:api/MyApi~myAddressesAddressIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing address in your address book
     * Update an existing address in your address book
     * @param {String} addressId 
     * @param {module:api/MyApi~myAddressesAddressIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAddressesAddressIdPut(addressId, callback) {
      let postBody = null;
      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling myAddressesAddressIdPut");
      }

      let pathParams = {
        'address_id': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/addresses/{address_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myAddressesGet operation.
     * @callback module:api/MyApi~myAddressesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See all addresses in your address book
     * See all addresses in your address book
     * @param {module:api/MyApi~myAddressesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAddressesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myAddressesPost operation.
     * @callback module:api/MyApi~myAddressesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new address in your address book
     * Create a new address in your address book
     * @param {module:api/MyApi~myAddressesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myAddressesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myConversationsConversationIdMessagesPost operation.
     * @callback module:api/MyApi~myConversationsConversationIdMessagesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a message
     * Send a message
     * @param {String} conversationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListingsListingIdConversationsPostRequest} [listingsListingIdConversationsPostRequest] the content of the request
     * @param {module:api/MyApi~myConversationsConversationIdMessagesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myConversationsConversationIdMessagesPost(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsListingIdConversationsPostRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling myConversationsConversationIdMessagesPost");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/conversations/{conversation_id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myConversationsGet operation.
     * @callback module:api/MyApi~myConversationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of your conversations
     * Get a list of your conversations
     * @param {Object} opts Optional parameters
     * @param {String} [search] Query string to search conversations by
     * @param {Boolean} [unreadOnly] Show unread conversations only
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/MyApi~myConversationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myConversationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'unread_only': opts['unreadOnly'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myConversationsIdGet operation.
     * @callback module:api/MyApi~myConversationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display conversation details with messages in natural time order (oldest to newest)
     * Display conversation details with messages in natural time order (oldest to newest)
     * @param {String} id 
     * @param {module:api/MyApi~myConversationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myConversationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myConversationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/conversations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myConversationsIdPut operation.
     * @callback module:api/MyApi~myConversationsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a conversation read/unread
     * Mark a conversation read/unread
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyConversationsIdPutRequest} [myConversationsIdPutRequest] the content of the request
     * @param {module:api/MyApi~myConversationsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myConversationsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['myConversationsIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myConversationsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/conversations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myConversationsPost operation.
     * @callback module:api/MyApi~myConversationsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a conversation
     * Start a conversation
     * @param {Object} opts Optional parameters
     * @param {module:model/MyConversationsPostRequest} [myConversationsPostRequest] the content of the request
     * @param {module:api/MyApi~myConversationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myConversationsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['myConversationsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myCountsGet operation.
     * @callback module:api/MyApi~myCountsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your actionable status counts
     * Get your actionable status counts
     * @param {module:api/MyApi~myCountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myCountsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myCuratedSetProductProductIdDelete operation.
     * @callback module:api/MyApi~myCuratedSetProductProductIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productId 
     * @param {module:api/MyApi~myCuratedSetProductProductIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myCuratedSetProductProductIdDelete(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling myCuratedSetProductProductIdDelete");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/curated_set/product/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myCuratedSetProductProductIdPost operation.
     * @callback module:api/MyApi~myCuratedSetProductProductIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} productId 
     * @param {module:api/MyApi~myCuratedSetProductProductIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myCuratedSetProductProductIdPost(productId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling myCuratedSetProductProductIdPost");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/curated_set/product/{product_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFeedCustomizeGet operation.
     * @callback module:api/MyApi~myFeedCustomizeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get your feed customization options
     * get your feed customization options
     * @param {module:api/MyApi~myFeedCustomizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFeedCustomizeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/feed/customize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFeedGet operation.
     * @callback module:api/MyApi~myFeedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get listings from your feed
     * Get listings from your feed
     * @param {module:api/MyApi~myFeedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFeedGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFeedGridGet operation.
     * @callback module:api/MyApi~myFeedGridGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get your feed
     * get your feed
     * @param {module:api/MyApi~myFeedGridGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFeedGridGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/feed/grid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFeedbackReceivedGet operation.
     * @callback module:api/MyApi~myFeedbackReceivedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of received feedback
     * List of received feedback
     * @param {module:api/MyApi~myFeedbackReceivedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFeedbackReceivedGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/feedback/received', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFeedbackSentGet operation.
     * @callback module:api/MyApi~myFeedbackSentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of sent feedback
     * List of sent feedback
     * @param {module:api/MyApi~myFeedbackSentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFeedbackSentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/feedback/sent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsArticlesGet operation.
     * @callback module:api/MyApi~myFollowsArticlesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's ArticleCategoryFollows
     * Returns a user's ArticleCategoryFollows
     * @param {module:api/MyApi~myFollowsArticlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsArticlesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/articles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsArticlesPost operation.
     * @callback module:api/MyApi~myFollowsArticlesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a user's ArticleCategoryFollows
     * Set a user's ArticleCategoryFollows
     * @param {Object} opts Optional parameters
     * @param {module:model/MyFollowsArticlesPostRequest} [myFollowsArticlesPostRequest] the content of the request
     * @param {module:api/MyApi~myFollowsArticlesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsArticlesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['myFollowsArticlesPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/articles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsBrandsSlugDelete operation.
     * @callback module:api/MyApi~myFollowsBrandsSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a brand
     * Unfollow a brand
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsBrandsSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsBrandsSlugDelete(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsBrandsSlugDelete");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/brands/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsBrandsSlugGet operation.
     * @callback module:api/MyApi~myFollowsBrandsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a brand
     * Follow status for a brand
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsBrandsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsBrandsSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsBrandsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/brands/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsBrandsSlugPost operation.
     * @callback module:api/MyApi~myFollowsBrandsSlugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a brand
     * Follow a brand
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsBrandsSlugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsBrandsSlugPost(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsBrandsSlugPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/brands/{slug}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesCategorySubcategoryDelete operation.
     * @callback module:api/MyApi~myFollowsCategoriesCategorySubcategoryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a subcategory
     * Unfollow a subcategory
     * @param {String} category 
     * @param {String} subcategory 
     * @param {module:api/MyApi~myFollowsCategoriesCategorySubcategoryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesCategorySubcategoryDelete(category, subcategory, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling myFollowsCategoriesCategorySubcategoryDelete");
      }
      // verify the required parameter 'subcategory' is set
      if (subcategory === undefined || subcategory === null) {
        throw new Error("Missing the required parameter 'subcategory' when calling myFollowsCategoriesCategorySubcategoryDelete");
      }

      let pathParams = {
        'category': category,
        'subcategory': subcategory
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{category}/{subcategory}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesCategorySubcategoryGet operation.
     * @callback module:api/MyApi~myFollowsCategoriesCategorySubcategoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a subcategory
     * Follow status for a subcategory
     * @param {String} category 
     * @param {String} subcategory 
     * @param {module:api/MyApi~myFollowsCategoriesCategorySubcategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesCategorySubcategoryGet(category, subcategory, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling myFollowsCategoriesCategorySubcategoryGet");
      }
      // verify the required parameter 'subcategory' is set
      if (subcategory === undefined || subcategory === null) {
        throw new Error("Missing the required parameter 'subcategory' when calling myFollowsCategoriesCategorySubcategoryGet");
      }

      let pathParams = {
        'category': category,
        'subcategory': subcategory
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{category}/{subcategory}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesCategorySubcategoryPost operation.
     * @callback module:api/MyApi~myFollowsCategoriesCategorySubcategoryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a subcategory
     * Follow a subcategory
     * @param {String} category 
     * @param {String} subcategory 
     * @param {module:api/MyApi~myFollowsCategoriesCategorySubcategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesCategorySubcategoryPost(category, subcategory, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling myFollowsCategoriesCategorySubcategoryPost");
      }
      // verify the required parameter 'subcategory' is set
      if (subcategory === undefined || subcategory === null) {
        throw new Error("Missing the required parameter 'subcategory' when calling myFollowsCategoriesCategorySubcategoryPost");
      }

      let pathParams = {
        'category': category,
        'subcategory': subcategory
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{category}/{subcategory}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesIdentifierDelete operation.
     * @callback module:api/MyApi~myFollowsCategoriesIdentifierDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a category
     * Unfollow a category
     * @param {String} identifier 
     * @param {module:api/MyApi~myFollowsCategoriesIdentifierDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesIdentifierDelete(identifier, callback) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling myFollowsCategoriesIdentifierDelete");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{identifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesIdentifierGet operation.
     * @callback module:api/MyApi~myFollowsCategoriesIdentifierGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a category
     * Follow status for a category
     * @param {String} identifier 
     * @param {module:api/MyApi~myFollowsCategoriesIdentifierGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesIdentifierGet(identifier, callback) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling myFollowsCategoriesIdentifierGet");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesIdentifierPost operation.
     * @callback module:api/MyApi~myFollowsCategoriesIdentifierPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a category
     * Follow a category
     * @param {String} identifier 
     * @param {module:api/MyApi~myFollowsCategoriesIdentifierPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesIdentifierPost(identifier, callback) {
      let postBody = null;
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling myFollowsCategoriesIdentifierPost");
      }

      let pathParams = {
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{identifier}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCategoriesUuidPost operation.
     * @callback module:api/MyApi~myFollowsCategoriesUuidPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a category
     * Follow a category
     * @param {String} uuid 
     * @param {module:api/MyApi~myFollowsCategoriesUuidPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCategoriesUuidPost(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling myFollowsCategoriesUuidPost");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/categories/{uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCollectionsSlugDelete operation.
     * @callback module:api/MyApi~myFollowsCollectionsSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a collection
     * Unfollow a collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsCollectionsSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCollectionsSlugDelete(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsCollectionsSlugDelete");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/collections/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCollectionsSlugGet operation.
     * @callback module:api/MyApi~myFollowsCollectionsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a collection
     * Follow status for a collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsCollectionsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCollectionsSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsCollectionsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/collections/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsCollectionsSlugPost operation.
     * @callback module:api/MyApi~myFollowsCollectionsSlugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a collection
     * Follow a collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsCollectionsSlugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsCollectionsSlugPost(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsCollectionsSlugPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/collections/{slug}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsFollowIdAlertDelete operation.
     * @callback module:api/MyApi~myFollowsFollowIdAlertDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} followId 
     * @param {module:api/MyApi~myFollowsFollowIdAlertDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsFollowIdAlertDelete(followId, callback) {
      let postBody = null;
      // verify the required parameter 'followId' is set
      if (followId === undefined || followId === null) {
        throw new Error("Missing the required parameter 'followId' when calling myFollowsFollowIdAlertDelete");
      }

      let pathParams = {
        'follow_id': followId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/{follow_id}/alert', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsFollowIdAlertPost operation.
     * @callback module:api/MyApi~myFollowsFollowIdAlertPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} followId 
     * @param {module:api/MyApi~myFollowsFollowIdAlertPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsFollowIdAlertPost(followId, callback) {
      let postBody = null;
      // verify the required parameter 'followId' is set
      if (followId === undefined || followId === null) {
        throw new Error("Missing the required parameter 'followId' when calling myFollowsFollowIdAlertPost");
      }

      let pathParams = {
        'follow_id': followId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/{follow_id}/alert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsFollowIdDelete operation.
     * @callback module:api/MyApi~myFollowsFollowIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a follow
     * Delete a follow
     * @param {String} followId 
     * @param {module:api/MyApi~myFollowsFollowIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsFollowIdDelete(followId, callback) {
      let postBody = null;
      // verify the required parameter 'followId' is set
      if (followId === undefined || followId === null) {
        throw new Error("Missing the required parameter 'followId' when calling myFollowsFollowIdDelete");
      }

      let pathParams = {
        'follow_id': followId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/{follow_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsGet operation.
     * @callback module:api/MyApi~myFollowsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See what the user is following
     * See what the user is following
     * @param {module:api/MyApi~myFollowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsHandpickedSlugDelete operation.
     * @callback module:api/MyApi~myFollowsHandpickedSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a handpicked collection
     * Unfollow a handpicked collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsHandpickedSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsHandpickedSlugDelete(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsHandpickedSlugDelete");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/handpicked/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsHandpickedSlugGet operation.
     * @callback module:api/MyApi~myFollowsHandpickedSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a handpicked collection
     * Follow status for a handpicked collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsHandpickedSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsHandpickedSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsHandpickedSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/handpicked/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsHandpickedSlugPost operation.
     * @callback module:api/MyApi~myFollowsHandpickedSlugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a handpicked collection
     * Follow a handpicked collection
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsHandpickedSlugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsHandpickedSlugPost(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsHandpickedSlugPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/handpicked/{slug}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsSearchGet operation.
     * @callback module:api/MyApi~myFollowsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a search
     * Follow status for a search
     * @param {module:api/MyApi~myFollowsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsSearchGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsSearchPost operation.
     * @callback module:api/MyApi~myFollowsSearchPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a search
     * Follow a search
     * @param {Object} opts Optional parameters
     * @param {module:model/MyFollowsSearchPostRequest} [myFollowsSearchPostRequest] the content of the request
     * @param {module:api/MyApi~myFollowsSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsSearchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['myFollowsSearchPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsShopsSlugDelete operation.
     * @callback module:api/MyApi~myFollowsShopsSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unfollow a shop
     * Unfollow a shop
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsShopsSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsShopsSlugDelete(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsShopsSlugDelete");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/shops/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsShopsSlugGet operation.
     * @callback module:api/MyApi~myFollowsShopsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow status for a shop
     * Follow status for a shop
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsShopsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsShopsSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsShopsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/shops/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myFollowsShopsSlugPost operation.
     * @callback module:api/MyApi~myFollowsShopsSlugPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a shop
     * Follow a shop
     * @param {String} slug 
     * @param {module:api/MyApi~myFollowsShopsSlugPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myFollowsShopsSlugPost(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myFollowsShopsSlugPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/follows/shops/{slug}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myListingsDraftsGet operation.
     * @callback module:api/MyApi~myListingsDraftsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list your draft listings
     * Retrieve a list your draft listings
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search query.
     * @param {Number} [auctionPriceMax] Maximum current auction price
     * @param {String} [category] Category slug from /api/categories
     * @param {String} [productType] Product type slug from /api/categories
     * @param {Array.<String>} [conditions] Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint
     * @param {String} [decade] Decade: e.g. 1970s, early 70s
     * @param {String} [finish] Visual finish of the item, common for guitars
     * @param {Boolean} [handmade] Handmade items only
     * @param {String} [itemCity] City where item is located
     * @param {String} [itemCountry] DEPRECATED - Country code where item is located
     * @param {String} [itemRegion] Country code where item is located
     * @param {String} [itemState] State or region code where item is located
     * @param {Array.<String>} [make] Make(s)/brand of item (e.g. Fender). Can take a single value or an array.
     * @param {String} [model] Model of item (e.g. Stratocaster)
     * @param {String} [mustNot] Search term negation. If you want to exclude a term, add it here
     * @param {Number} [priceMax] Maximum price of search results (USD)
     * @param {Number} [priceMin] Minimum price of search results (USD)
     * @param {String} [currency] The currency to be used for the price filters
     * @param {Number} [yearMax] Maximum year of manufacture
     * @param {Number} [yearMin] Minumum year of manufacture
     * @param {Boolean} [acceptsGiftCards] If true, include only items that accept gift cards
     * @param {Boolean} [preferredSeller] If true, include only items by Reverb Preferred Sellers
     * @param {String} [shop] Slug of shop to search
     * @param {String} [shopId] ID of shop to search
     * @param {String} [listingType] Type of listing: auctions,offers
     * @param {String} [shipsTo] Limit search to items that ship to this country code
     * @param {Boolean} [excludeAuctions] If true, exclude auctions
     * @param {Boolean} [acceptsPaymentPlans] If true, only show items that can be purchased with a payment plan
     * @param {Number} [watchersCountMin] Minimum number of watchers (used to find popular items)
     * @param {Array.<String>} [notIds] Listing ID negation. If you want to exclude a listing, add it here.
     * @param {Boolean} [localPickup] Only items that offer local pickup
     * @param {module:api/MyApi~myListingsDraftsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myListingsDraftsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'auction_price_max': opts['auctionPriceMax'],
        'category': opts['category'],
        'product_type': opts['productType'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'decade': opts['decade'],
        'finish': opts['finish'],
        'handmade': opts['handmade'],
        'item_city': opts['itemCity'],
        'item_country': opts['itemCountry'],
        'item_region': opts['itemRegion'],
        'item_state': opts['itemState'],
        'make': this.apiClient.buildCollectionParam(opts['make'], 'csv'),
        'model': opts['model'],
        'must_not': opts['mustNot'],
        'price_max': opts['priceMax'],
        'price_min': opts['priceMin'],
        'currency': opts['currency'],
        'year_max': opts['yearMax'],
        'year_min': opts['yearMin'],
        'accepts_gift_cards': opts['acceptsGiftCards'],
        'preferred_seller': opts['preferredSeller'],
        'shop': opts['shop'],
        'shop_id': opts['shopId'],
        'listing_type': opts['listingType'],
        'ships_to': opts['shipsTo'],
        'exclude_auctions': opts['excludeAuctions'],
        'accepts_payment_plans': opts['acceptsPaymentPlans'],
        'watchers_count_min': opts['watchersCountMin'],
        'not_ids': this.apiClient.buildCollectionParam(opts['notIds'], 'csv'),
        'local_pickup': opts['localPickup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/listings/drafts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myListingsGet operation.
     * @callback module:api/MyApi~myListingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of live listings for the seller. To search all listings specify state=all
     * Retrieve a list of live listings for the seller. To search all listings specify state=all
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search query.
     * @param {Number} [auctionPriceMax] Maximum current auction price
     * @param {String} [category] Category slug from /api/categories
     * @param {String} [productType] Product type slug from /api/categories
     * @param {Array.<String>} [conditions] Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint
     * @param {String} [decade] Decade: e.g. 1970s, early 70s
     * @param {String} [finish] Visual finish of the item, common for guitars
     * @param {Boolean} [handmade] Handmade items only
     * @param {String} [itemCity] City where item is located
     * @param {String} [itemCountry] DEPRECATED - Country code where item is located
     * @param {String} [itemRegion] Country code where item is located
     * @param {String} [itemState] State or region code where item is located
     * @param {Array.<String>} [make] Make(s)/brand of item (e.g. Fender). Can take a single value or an array.
     * @param {String} [model] Model of item (e.g. Stratocaster)
     * @param {String} [mustNot] Search term negation. If you want to exclude a term, add it here
     * @param {Number} [priceMax] Maximum price of search results (USD)
     * @param {Number} [priceMin] Minimum price of search results (USD)
     * @param {String} [currency] The currency to be used for the price filters
     * @param {Number} [yearMax] Maximum year of manufacture
     * @param {Number} [yearMin] Minumum year of manufacture
     * @param {Boolean} [acceptsGiftCards] If true, include only items that accept gift cards
     * @param {Boolean} [preferredSeller] If true, include only items by Reverb Preferred Sellers
     * @param {String} [shop] Slug of shop to search
     * @param {String} [shopId] ID of shop to search
     * @param {String} [listingType] Type of listing: auctions,offers
     * @param {String} [shipsTo] Limit search to items that ship to this country code
     * @param {Boolean} [excludeAuctions] If true, exclude auctions
     * @param {Boolean} [acceptsPaymentPlans] If true, only show items that can be purchased with a payment plan
     * @param {Number} [watchersCountMin] Minimum number of watchers (used to find popular items)
     * @param {Array.<String>} [notIds] Listing ID negation. If you want to exclude a listing, add it here.
     * @param {Boolean} [localPickup] Only items that offer local pickup
     * @param {String} [state = 'live')] Available: [\"all\", \"draft\", \"ended\", \"live\", \"ordered\", \"sold_out\", \"suspended\", \"seller_unavailable\"]. Defaults to 'live'
     * @param {String} [sku] Find a listing by sku
     * @param {module:api/MyApi~myListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myListingsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'auction_price_max': opts['auctionPriceMax'],
        'category': opts['category'],
        'product_type': opts['productType'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'decade': opts['decade'],
        'finish': opts['finish'],
        'handmade': opts['handmade'],
        'item_city': opts['itemCity'],
        'item_country': opts['itemCountry'],
        'item_region': opts['itemRegion'],
        'item_state': opts['itemState'],
        'make': this.apiClient.buildCollectionParam(opts['make'], 'csv'),
        'model': opts['model'],
        'must_not': opts['mustNot'],
        'price_max': opts['priceMax'],
        'price_min': opts['priceMin'],
        'currency': opts['currency'],
        'year_max': opts['yearMax'],
        'year_min': opts['yearMin'],
        'accepts_gift_cards': opts['acceptsGiftCards'],
        'preferred_seller': opts['preferredSeller'],
        'shop': opts['shop'],
        'shop_id': opts['shopId'],
        'listing_type': opts['listingType'],
        'ships_to': opts['shipsTo'],
        'exclude_auctions': opts['excludeAuctions'],
        'accepts_payment_plans': opts['acceptsPaymentPlans'],
        'watchers_count_min': opts['watchersCountMin'],
        'not_ids': this.apiClient.buildCollectionParam(opts['notIds'], 'csv'),
        'local_pickup': opts['localPickup'],
        'state': opts['state'],
        'sku': opts['sku']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myListingsNegotiationsGet operation.
     * @callback module:api/MyApi~myListingsNegotiationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of active negotiations as a seller
     * Get a list of active negotiations as a seller
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/MyApi~myListingsNegotiationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myListingsNegotiationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/listings/negotiations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myListingsSlugStateEndPut operation.
     * @callback module:api/MyApi~myListingsSlugStateEndPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * End a listing
     * End a listing
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyListingsSlugStateEndPutRequest} [myListingsSlugStateEndPutRequest] the content of the request
     * @param {module:api/MyApi~myListingsSlugStateEndPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myListingsSlugStateEndPut(slug, opts, callback) {
      opts = opts || {};
      let postBody = opts['myListingsSlugStateEndPutRequest'];
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling myListingsSlugStateEndPut");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/listings/{slug}/state/end', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myListsGet operation.
     * @callback module:api/MyApi~myListsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of your lists (wishlist, watch list, etc)
     * Get a list of your lists (wishlist, watch list, etc)
     * @param {module:api/MyApi~myListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myListsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myNegotiationsBuyingGet operation.
     * @callback module:api/MyApi~myNegotiationsBuyingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of active negotiations as a buyer
     * Get a list of active negotiations as a buyer
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/MyApi~myNegotiationsBuyingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myNegotiationsBuyingGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/negotiations/buying', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myNegotiationsIdAcceptPost operation.
     * @callback module:api/MyApi~myNegotiationsIdAcceptPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept an offer
     * Accept an offer
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyNegotiationsIdAcceptPostRequest} [myNegotiationsIdAcceptPostRequest] the content of the request
     * @param {module:api/MyApi~myNegotiationsIdAcceptPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myNegotiationsIdAcceptPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['myNegotiationsIdAcceptPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myNegotiationsIdAcceptPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/negotiations/{id}/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myNegotiationsIdCounterPost operation.
     * @callback module:api/MyApi~myNegotiationsIdCounterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Counter an offer
     * Counter an offer
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationsConversationIdOfferPostRequest} [conversationsConversationIdOfferPostRequest] the content of the request
     * @param {module:api/MyApi~myNegotiationsIdCounterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myNegotiationsIdCounterPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['conversationsConversationIdOfferPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myNegotiationsIdCounterPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/negotiations/{id}/counter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myNegotiationsIdDeclinePost operation.
     * @callback module:api/MyApi~myNegotiationsIdDeclinePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decline an offer
     * Decline an offer
     * @param {String} id 
     * @param {module:api/MyApi~myNegotiationsIdDeclinePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myNegotiationsIdDeclinePost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myNegotiationsIdDeclinePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/negotiations/{id}/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myNegotiationsIdGet operation.
     * @callback module:api/MyApi~myNegotiationsIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get offer details
     * Get offer details
     * @param {String} id 
     * @param {module:api/MyApi~myNegotiationsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myNegotiationsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myNegotiationsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/negotiations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersAwaitingFeedbackGet operation.
     * @callback module:api/MyApi~myOrdersAwaitingFeedbackGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of orders that need feedback
     * List of orders that need feedback
     * @param {module:api/MyApi~myOrdersAwaitingFeedbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersAwaitingFeedbackGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/awaiting_feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersBuyingAllGet operation.
     * @callback module:api/MyApi~myOrdersBuyingAllGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all orders, newest first.
     * Returns all orders, newest first.
     * @param {module:api/MyApi~myOrdersBuyingAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersBuyingAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/buying/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersBuyingByUuidUuidGet operation.
     * @callback module:api/MyApi~myOrdersBuyingByUuidUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/MyApi~myOrdersBuyingByUuidUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersBuyingByUuidUuidGet(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling myOrdersBuyingByUuidUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/buying/by_uuid/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersBuyingIdGet operation.
     * @callback module:api/MyApi~myOrdersBuyingIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns order details for a buyer
     * Returns order details for a buyer
     * @param {String} id 
     * @param {module:api/MyApi~myOrdersBuyingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersBuyingIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myOrdersBuyingIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/buying/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersBuyingIdMarkReceivedPost operation.
     * @callback module:api/MyApi~myOrdersBuyingIdMarkReceivedPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an order as received by the buyer
     * Marks an order as received by the buyer
     * @param {String} id 
     * @param {module:api/MyApi~myOrdersBuyingIdMarkReceivedPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersBuyingIdMarkReceivedPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myOrdersBuyingIdMarkReceivedPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/buying/{id}/mark_received', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersBuyingUnpaidGet operation.
     * @callback module:api/MyApi~myOrdersBuyingUnpaidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns unpaid orders, newest first.
     * Returns unpaid orders, newest first.
     * @param {module:api/MyApi~myOrdersBuyingUnpaidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersBuyingUnpaidGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/buying/unpaid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingAllGet operation.
     * @callback module:api/MyApi~myOrdersSellingAllGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all seller orders, newest first.
     * Get all seller orders, newest first.
     * @param {module:api/MyApi~myOrdersSellingAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingAwaitingShipmentGet operation.
     * @callback module:api/MyApi~myOrdersSellingAwaitingShipmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unpaid seller orders, newest first.
     * Get unpaid seller orders, newest first.
     * @param {module:api/MyApi~myOrdersSellingAwaitingShipmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingAwaitingShipmentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/awaiting_shipment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingBuyerHistoryBuyerIdGet operation.
     * @callback module:api/MyApi~myOrdersSellingBuyerHistoryBuyerIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See previous orders from buyer
     * See previous orders from buyer
     * @param {String} buyerId 
     * @param {module:api/MyApi~myOrdersSellingBuyerHistoryBuyerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingBuyerHistoryBuyerIdGet(buyerId, callback) {
      let postBody = null;
      // verify the required parameter 'buyerId' is set
      if (buyerId === undefined || buyerId === null) {
        throw new Error("Missing the required parameter 'buyerId' when calling myOrdersSellingBuyerHistoryBuyerIdGet");
      }

      let pathParams = {
        'buyer_id': buyerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/buyer_history/{buyer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingByUuidUuidGet operation.
     * @callback module:api/MyApi~myOrdersSellingByUuidUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/MyApi~myOrdersSellingByUuidUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingByUuidUuidGet(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling myOrdersSellingByUuidUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/by_uuid/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingIdGet operation.
     * @callback module:api/MyApi~myOrdersSellingIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns order details for a seller
     * Returns order details for a seller
     * @param {String} id 
     * @param {module:api/MyApi~myOrdersSellingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myOrdersSellingIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingIdMarkPickedUpPost operation.
     * @callback module:api/MyApi~myOrdersSellingIdMarkPickedUpPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an order as picked up
     * Marks an order as picked up
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyOrdersSellingIdMarkPickedUpPostRequest} [myOrdersSellingIdMarkPickedUpPostRequest] the content of the request
     * @param {module:api/MyApi~myOrdersSellingIdMarkPickedUpPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingIdMarkPickedUpPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['myOrdersSellingIdMarkPickedUpPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myOrdersSellingIdMarkPickedUpPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/{id}/mark_picked_up', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingIdShipPost operation.
     * @callback module:api/MyApi~myOrdersSellingIdShipPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks an order as shipped
     * Marks an order as shipped
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/MyOrdersSellingIdShipPostRequest} [myOrdersSellingIdShipPostRequest] the content of the request
     * @param {module:api/MyApi~myOrdersSellingIdShipPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingIdShipPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['myOrdersSellingIdShipPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myOrdersSellingIdShipPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/{id}/ship', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingOrderIdRefundRequestsPost operation.
     * @callback module:api/MyApi~myOrdersSellingOrderIdRefundRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a refund for a sold order
     * Initiate a refund for a sold order
     * @param {String} orderId 
     * @param {module:api/MyApi~myOrdersSellingOrderIdRefundRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingOrderIdRefundRequestsPost(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling myOrdersSellingOrderIdRefundRequestsPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/{order_id}/refund_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myOrdersSellingUnpaidGet operation.
     * @callback module:api/MyApi~myOrdersSellingUnpaidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unpaid seller orders, newest first.
     * Get unpaid seller orders, newest first.
     * @param {module:api/MyApi~myOrdersSellingUnpaidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myOrdersSellingUnpaidGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/orders/selling/unpaid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myPaymentsSellingGet operation.
     * @callback module:api/MyApi~myPaymentsSellingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payments
     * Get payments
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {String} [createdStartDate] Filter by date created in ISO8601 format - e.g: 2015-04-09T10:52:23-00:00
     * @param {String} [createdEndDate] Filter by date created in ISO8601 format - e.g: 2015-04-09T10:52:23-00:00
     * @param {String} [updatedStartDate] Filter by date modified in ISO8601 format - e.g: 2015-04-09T10:52:23-00:00
     * @param {String} [updatedEndDate] Filter by date modified in ISO8601 format - e.g: 2015-04-09T10:52:23-00:00
     * @param {String} [orderId] Look up payments by order id
     * @param {module:api/MyApi~myPaymentsSellingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myPaymentsSellingGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset'],
        'created_start_date': opts['createdStartDate'],
        'created_end_date': opts['createdEndDate'],
        'updated_start_date': opts['updatedStartDate'],
        'updated_end_date': opts['updatedEndDate'],
        'order_id': opts['orderId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/payments/selling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myPaymentsSellingIdGet operation.
     * @callback module:api/MyApi~myPaymentsSellingIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment
     * Get payment
     * @param {String} id 
     * @param {module:api/MyApi~myPaymentsSellingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myPaymentsSellingIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myPaymentsSellingIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/payments/selling/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myPayoutsGet operation.
     * @callback module:api/MyApi~myPayoutsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of payouts
     * Get a list of payouts
     * @param {module:api/MyApi~myPayoutsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myPayoutsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/payouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myPayoutsIdLineItemsGet operation.
     * @callback module:api/MyApi~myPayoutsIdLineItemsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read the line items of a payout
     * Read the line items of a payout
     * @param {String} id 
     * @param {module:api/MyApi~myPayoutsIdLineItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myPayoutsIdLineItemsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myPayoutsIdLineItemsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/payouts/{id}/line_items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myRefundRequestsSellingGet operation.
     * @callback module:api/MyApi~myRefundRequestsSellingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of refund requests as a seller
     * Get a list of refund requests as a seller
     * @param {module:api/MyApi~myRefundRequestsSellingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myRefundRequestsSellingGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/refund_requests/selling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myRefundRequestsSellingIdPut operation.
     * @callback module:api/MyApi~myRefundRequestsSellingIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a refund request for a sold order
     * Update a refund request for a sold order
     * @param {String} id 
     * @param {module:api/MyApi~myRefundRequestsSellingIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myRefundRequestsSellingIdPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myRefundRequestsSellingIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/refund_requests/selling/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myViewedListingsGet operation.
     * @callback module:api/MyApi~myViewedListingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of your recently viewed listings.
     * Get a list of your recently viewed listings.
     * @param {module:api/MyApi~myViewedListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myViewedListingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/viewed_listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myWishlistGet operation.
     * @callback module:api/MyApi~myWishlistGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of wishlisted items
     * Get a list of wishlisted items
     * @param {module:api/MyApi~myWishlistGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myWishlistGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/wishlist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myWishlistIdDelete operation.
     * @callback module:api/MyApi~myWishlistIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a listing from your wishlist
     * Remove a listing from your wishlist
     * @param {String} id 
     * @param {module:api/MyApi~myWishlistIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myWishlistIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myWishlistIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/wishlist/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the myWishlistIdPut operation.
     * @callback module:api/MyApi~myWishlistIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a listing to your wishlist
     * Add a listing to your wishlist
     * @param {String} id 
     * @param {module:api/MyApi~myWishlistIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    myWishlistIdPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling myWishlistIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/my/wishlist/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
