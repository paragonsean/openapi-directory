/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Sales service.
* @module api/SalesApi
* @version 3.0
*/
export default class SalesApi {

    /**
    * Constructs a new SalesApi. 
    * @alias module:api/SalesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the salesReverbGet operation.
     * @callback module:api/SalesApi~salesReverbGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View upcoming and live Reverb official sales.
     * View upcoming and live Reverb official sales.
     * @param {module:api/SalesApi~salesReverbGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesReverbGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales/reverb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesSaleIdListingsDelete operation.
     * @callback module:api/SalesApi~salesSaleIdListingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a listing from a sale
     * Remove a listing from a sale
     * @param {String} saleId 
     * @param {module:api/SalesApi~salesSaleIdListingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesSaleIdListingsDelete(saleId, callback) {
      let postBody = null;
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling salesSaleIdListingsDelete");
      }

      let pathParams = {
        'sale_id': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales/{sale_id}/listings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesSaleIdListingsPost operation.
     * @callback module:api/SalesApi~salesSaleIdListingsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add listings to a sale
     * Add listings to a sale
     * @param {String} saleId 
     * @param {module:api/SalesApi~salesSaleIdListingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesSaleIdListingsPost(saleId, callback) {
      let postBody = null;
      // verify the required parameter 'saleId' is set
      if (saleId === undefined || saleId === null) {
        throw new Error("Missing the required parameter 'saleId' when calling salesSaleIdListingsPost");
      }

      let pathParams = {
        'sale_id': saleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales/{sale_id}/listings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesSellerGet operation.
     * @callback module:api/SalesApi~salesSellerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View your created sales.
     * View your created sales.
     * @param {module:api/SalesApi~salesSellerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesSellerGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales/seller', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the salesSlugGet operation.
     * @callback module:api/SalesApi~salesSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} slug 
     * @param {module:api/SalesApi~salesSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    salesSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling salesSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sales/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
