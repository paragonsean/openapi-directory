/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsIdOfferPostRequest from '../model/ConversationsIdOfferPostRequest';
import ListingsListingIdConversationsPostRequest from '../model/ListingsListingIdConversationsPostRequest';
import ListingsPostRequest from '../model/ListingsPostRequest';
import ListingsSlugFlagPostRequest from '../model/ListingsSlugFlagPostRequest';

/**
* Listings service.
* @module api/ListingsApi
* @version 3.0
*/
export default class ListingsApi {

    /**
    * Constructs a new ListingsApi. 
    * @alias module:api/ListingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listingsAllGet operation.
     * @callback module:api/ListingsApi~listingsAllGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All listings including used, handmade, and brand new
     * All listings including used, handmade, and brand new
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search query.
     * @param {Number} [auctionPriceMax] Maximum current auction price
     * @param {String} [category] Category slug from /api/categories
     * @param {String} [productType] Product type slug from /api/categories
     * @param {Array.<String>} [conditions] Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint
     * @param {String} [decade] Decade: e.g. 1970s, early 70s
     * @param {String} [finish] Visual finish of the item, common for guitars
     * @param {Boolean} [handmade] Handmade items only
     * @param {String} [itemCity] City where item is located
     * @param {String} [itemCountry] DEPRECATED - Country code where item is located
     * @param {String} [itemRegion] Country code where item is located
     * @param {String} [itemState] State or region code where item is located
     * @param {Array.<String>} [make] Make(s)/brand of item (e.g. Fender). Can take a single value or an array.
     * @param {String} [model] Model of item (e.g. Stratocaster)
     * @param {String} [mustNot] Search term negation. If you want to exclude a term, add it here
     * @param {Number} [priceMax] Maximum price of search results (USD)
     * @param {Number} [priceMin] Minimum price of search results (USD)
     * @param {String} [currency] The currency to be used for the price filters
     * @param {Number} [yearMax] Maximum year of manufacture
     * @param {Number} [yearMin] Minumum year of manufacture
     * @param {Boolean} [acceptsGiftCards] If true, include only items that accept gift cards
     * @param {Boolean} [preferredSeller] If true, include only items by Reverb Preferred Sellers
     * @param {String} [shop] Slug of shop to search
     * @param {String} [shopId] ID of shop to search
     * @param {String} [listingType] Type of listing: auctions,offers
     * @param {String} [shipsTo] Limit search to items that ship to this country code
     * @param {Boolean} [excludeAuctions] If true, exclude auctions
     * @param {Boolean} [acceptsPaymentPlans] If true, only show items that can be purchased with a payment plan
     * @param {Number} [watchersCountMin] Minimum number of watchers (used to find popular items)
     * @param {Array.<String>} [notIds] Listing ID negation. If you want to exclude a listing, add it here.
     * @param {Boolean} [localPickup] Only items that offer local pickup
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/ListingsApi~listingsAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'auction_price_max': opts['auctionPriceMax'],
        'category': opts['category'],
        'product_type': opts['productType'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'decade': opts['decade'],
        'finish': opts['finish'],
        'handmade': opts['handmade'],
        'item_city': opts['itemCity'],
        'item_country': opts['itemCountry'],
        'item_region': opts['itemRegion'],
        'item_state': opts['itemState'],
        'make': this.apiClient.buildCollectionParam(opts['make'], 'csv'),
        'model': opts['model'],
        'must_not': opts['mustNot'],
        'price_max': opts['priceMax'],
        'price_min': opts['priceMin'],
        'currency': opts['currency'],
        'year_max': opts['yearMax'],
        'year_min': opts['yearMin'],
        'accepts_gift_cards': opts['acceptsGiftCards'],
        'preferred_seller': opts['preferredSeller'],
        'shop': opts['shop'],
        'shop_id': opts['shopId'],
        'listing_type': opts['listingType'],
        'ships_to': opts['shipsTo'],
        'exclude_auctions': opts['excludeAuctions'],
        'accepts_payment_plans': opts['acceptsPaymentPlans'],
        'watchers_count_min': opts['watchersCountMin'],
        'not_ids': this.apiClient.buildCollectionParam(opts['notIds'], 'csv'),
        'local_pickup': opts['localPickup'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsFacetsSellerLocationGet operation.
     * @callback module:api/ListingsApi~listingsFacetsSellerLocationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Individual facets
     * Individual facets
     * @param {module:api/ListingsApi~listingsFacetsSellerLocationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsFacetsSellerLocationGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/facets/seller_location', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsGet operation.
     * @callback module:api/ListingsApi~listingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Default search of listings includes only used & handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * Default search of listings includes only used & handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [query] Search query.
     * @param {Number} [auctionPriceMax] Maximum current auction price
     * @param {String} [category] Category slug from /api/categories
     * @param {String} [productType] Product type slug from /api/categories
     * @param {Array.<String>} [conditions] Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint
     * @param {String} [decade] Decade: e.g. 1970s, early 70s
     * @param {String} [finish] Visual finish of the item, common for guitars
     * @param {Boolean} [handmade] Handmade items only
     * @param {String} [itemCity] City where item is located
     * @param {String} [itemCountry] DEPRECATED - Country code where item is located
     * @param {String} [itemRegion] Country code where item is located
     * @param {String} [itemState] State or region code where item is located
     * @param {Array.<String>} [make] Make(s)/brand of item (e.g. Fender). Can take a single value or an array.
     * @param {String} [model] Model of item (e.g. Stratocaster)
     * @param {String} [mustNot] Search term negation. If you want to exclude a term, add it here
     * @param {Number} [priceMax] Maximum price of search results (USD)
     * @param {Number} [priceMin] Minimum price of search results (USD)
     * @param {String} [currency] The currency to be used for the price filters
     * @param {Number} [yearMax] Maximum year of manufacture
     * @param {Number} [yearMin] Minumum year of manufacture
     * @param {Boolean} [acceptsGiftCards] If true, include only items that accept gift cards
     * @param {Boolean} [preferredSeller] If true, include only items by Reverb Preferred Sellers
     * @param {String} [shop] Slug of shop to search
     * @param {String} [shopId] ID of shop to search
     * @param {String} [listingType] Type of listing: auctions,offers
     * @param {String} [shipsTo] Limit search to items that ship to this country code
     * @param {Boolean} [excludeAuctions] If true, exclude auctions
     * @param {Boolean} [acceptsPaymentPlans] If true, only show items that can be purchased with a payment plan
     * @param {Number} [watchersCountMin] Minimum number of watchers (used to find popular items)
     * @param {Array.<String>} [notIds] Listing ID negation. If you want to exclude a listing, add it here.
     * @param {Boolean} [localPickup] Only items that offer local pickup
     * @param {Number} [page = 1)] 
     * @param {Number} [perPage = 24)] 
     * @param {Number} [offset] 
     * @param {module:api/ListingsApi~listingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'auction_price_max': opts['auctionPriceMax'],
        'category': opts['category'],
        'product_type': opts['productType'],
        'conditions': this.apiClient.buildCollectionParam(opts['conditions'], 'csv'),
        'decade': opts['decade'],
        'finish': opts['finish'],
        'handmade': opts['handmade'],
        'item_city': opts['itemCity'],
        'item_country': opts['itemCountry'],
        'item_region': opts['itemRegion'],
        'item_state': opts['itemState'],
        'make': this.apiClient.buildCollectionParam(opts['make'], 'csv'),
        'model': opts['model'],
        'must_not': opts['mustNot'],
        'price_max': opts['priceMax'],
        'price_min': opts['priceMin'],
        'currency': opts['currency'],
        'year_max': opts['yearMax'],
        'year_min': opts['yearMin'],
        'accepts_gift_cards': opts['acceptsGiftCards'],
        'preferred_seller': opts['preferredSeller'],
        'shop': opts['shop'],
        'shop_id': opts['shopId'],
        'listing_type': opts['listingType'],
        'ships_to': opts['shipsTo'],
        'exclude_auctions': opts['excludeAuctions'],
        'accepts_payment_plans': opts['acceptsPaymentPlans'],
        'watchers_count_min': opts['watchersCountMin'],
        'not_ids': this.apiClient.buildCollectionParam(opts['notIds'], 'csv'),
        'local_pickup': opts['localPickup'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsIdNegotiationGet operation.
     * @callback module:api/ListingsApi~listingsIdNegotiationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the latest negotiation for the requesting user given a listing id
     * Returns the latest negotiation for the requesting user given a listing id
     * @param {String} id 
     * @param {module:api/ListingsApi~listingsIdNegotiationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsIdNegotiationGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listingsIdNegotiationGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{id}/negotiation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsIdOfferPost operation.
     * @callback module:api/ListingsApi~listingsIdOfferPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make an offer to the seller of a listing
     * Make an offer to the seller of a listing
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationsIdOfferPostRequest} [conversationsIdOfferPostRequest] the content of the request
     * @param {module:api/ListingsApi~listingsIdOfferPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsIdOfferPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['conversationsIdOfferPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listingsIdOfferPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{id}/offer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdBumpBudgetTypePost operation.
     * @callback module:api/ListingsApi~listingsListingIdBumpBudgetTypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bump a listing
     * Bump a listing
     * @param {String} listingId 
     * @param {String} budgetType 
     * @param {module:api/ListingsApi~listingsListingIdBumpBudgetTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdBumpBudgetTypePost(listingId, budgetType, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdBumpBudgetTypePost");
      }
      // verify the required parameter 'budgetType' is set
      if (budgetType === undefined || budgetType === null) {
        throw new Error("Missing the required parameter 'budgetType' when calling listingsListingIdBumpBudgetTypePost");
      }

      let pathParams = {
        'listing_id': listingId,
        'budget_type': budgetType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/bump/{budget_type}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdBumpGet operation.
     * @callback module:api/ListingsApi~listingsListingIdBumpGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View available bump tiers and stats for a listing
     * View available bump tiers and stats for a listing
     * @param {String} listingId 
     * @param {module:api/ListingsApi~listingsListingIdBumpGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdBumpGet(listingId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdBumpGet");
      }

      let pathParams = {
        'listing_id': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/bump', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdConversationsPost operation.
     * @callback module:api/ListingsApi~listingsListingIdConversationsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a conversation with a seller
     * Start a conversation with a seller
     * @param {String} listingId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListingsListingIdConversationsPostRequest} [listingsListingIdConversationsPostRequest] the content of the request
     * @param {module:api/ListingsApi~listingsListingIdConversationsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdConversationsPost(listingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsListingIdConversationsPostRequest'];
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdConversationsPost");
      }

      let pathParams = {
        'listing_id': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/conversations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdImagesGet operation.
     * @callback module:api/ListingsApi~listingsListingIdImagesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the images associated with a particular listing
     * View the images associated with a particular listing
     * @param {String} listingId 
     * @param {module:api/ListingsApi~listingsListingIdImagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdImagesGet(listingId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdImagesGet");
      }

      let pathParams = {
        'listing_id': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdImagesImageIdDelete operation.
     * @callback module:api/ListingsApi~listingsListingIdImagesImageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an image from a listing
     * Delete an image from a listing
     * @param {String} listingId 
     * @param {String} imageId 
     * @param {module:api/ListingsApi~listingsListingIdImagesImageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdImagesImageIdDelete(listingId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdImagesImageIdDelete");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling listingsListingIdImagesImageIdDelete");
      }

      let pathParams = {
        'listing_id': listingId,
        'image_id': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/images/{image_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsListingIdSalesGet operation.
     * @callback module:api/ListingsApi~listingsListingIdSalesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * See all sales that include a listing.
     * See all sales that include a listing.
     * @param {String} listingId 
     * @param {module:api/ListingsApi~listingsListingIdSalesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsListingIdSalesGet(listingId, callback) {
      let postBody = null;
      // verify the required parameter 'listingId' is set
      if (listingId === undefined || listingId === null) {
        throw new Error("Missing the required parameter 'listingId' when calling listingsListingIdSalesGet");
      }

      let pathParams = {
        'listing_id': listingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{listing_id}/sales', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsPost operation.
     * @callback module:api/ListingsApi~listingsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a listing
     * Create a listing
     * @param {Object} opts Optional parameters
     * @param {module:model/ListingsPostRequest} [listingsPostRequest] the content of the request
     * @param {module:api/ListingsApi~listingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugDelete operation.
     * @callback module:api/ListingsApi~listingsSlugDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a draft listing. Cannot be used on non-drafts.
     * Delete a draft listing. Cannot be used on non-drafts.
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugDelete(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugDelete");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugEditGet operation.
     * @callback module:api/ListingsApi~listingsSlugEditGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit listing.
     * Edit listing.
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugEditGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugEditGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugEditGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}/edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugFlagPost operation.
     * @callback module:api/ListingsApi~listingsSlugFlagPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flag a listing for inappropriate content or fraud
     * Flag a listing for inappropriate content or fraud
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListingsSlugFlagPostRequest} [listingsSlugFlagPostRequest] the content of the request
     * @param {module:api/ListingsApi~listingsSlugFlagPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugFlagPost(slug, opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsSlugFlagPostRequest'];
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugFlagPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugGet operation.
     * @callback module:api/ListingsApi~listingsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing details
     * Listing details
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugPut operation.
     * @callback module:api/ListingsApi~listingsSlugPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a listing
     * Update a listing
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {module:model/ListingsPostRequest} [listingsPostRequest] the content of the request
     * @param {module:api/ListingsApi~listingsSlugPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugPut(slug, opts, callback) {
      opts = opts || {};
      let postBody = opts['listingsPostRequest'];
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugPut");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugReviewsGet operation.
     * @callback module:api/ListingsApi~listingsSlugReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View reviews of a listing
     * View reviews of a listing
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugReviewsGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugReviewsGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugReviewsPost operation.
     * @callback module:api/ListingsApi~listingsSlugReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a review for a listing
     * Create a review for a listing
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugReviewsPost(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugReviewsPost");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listingsSlugSimilarListingsGet operation.
     * @callback module:api/ListingsApi~listingsSlugSimilarListingsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listing details
     * Listing details
     * @param {String} slug 
     * @param {module:api/ListingsApi~listingsSlugSimilarListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listingsSlugSimilarListingsGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling listingsSlugSimilarListingsGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/listings/{slug}/similar_listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
