/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationsConversationIdOfferPostRequest from '../model/ConversationsConversationIdOfferPostRequest';
import ConversationsIdOfferPostRequest from '../model/ConversationsIdOfferPostRequest';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 3.0
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the conversationsConversationIdOfferPost operation.
     * @callback module:api/ConversationsApi~conversationsConversationIdOfferPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param {String} conversationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationsConversationIdOfferPostRequest} [conversationsConversationIdOfferPostRequest] the content of the request
     * @param {module:api/ConversationsApi~conversationsConversationIdOfferPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    conversationsConversationIdOfferPost(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['conversationsConversationIdOfferPostRequest'];
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling conversationsConversationIdOfferPost");
      }

      let pathParams = {
        'conversation_id': conversationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{conversation_id}/offer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the conversationsIdOfferPost operation.
     * @callback module:api/ConversationsApi~conversationsIdOfferPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConversationsIdOfferPostRequest} [conversationsIdOfferPostRequest] the content of the request
     * @param {module:api/ConversationsApi~conversationsIdOfferPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    conversationsIdOfferPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['conversationsIdOfferPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling conversationsIdOfferPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{id}/offer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
