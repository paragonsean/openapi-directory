/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ShopPutRequest from '../model/ShopPutRequest';

/**
* Shop service.
* @module api/ShopApi
* @version 3.0
*/
export default class ShopApi {

    /**
    * Constructs a new ShopApi. 
    * @alias module:api/ShopApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the shopGet operation.
     * @callback module:api/ShopApi~shopGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get your own shop details
     * Get your own shop details
     * @param {module:api/ShopApi~shopGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopListingConditionsGet operation.
     * @callback module:api/ShopApi~shopListingConditionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of supported product conditions
     * List of supported product conditions
     * @param {module:api/ShopApi~shopListingConditionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopListingConditionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop/listing_conditions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopPaymentMethodsGet operation.
     * @callback module:api/ShopApi~shopPaymentMethodsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get accepted payment methods
     * Get accepted payment methods
     * @param {module:api/ShopApi~shopPaymentMethodsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopPaymentMethodsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopPut operation.
     * @callback module:api/ShopApi~shopPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update your shop profile
     * Update your shop profile
     * @param {Object} opts Optional parameters
     * @param {module:model/ShopPutRequest} [shopPutRequest] the content of the request
     * @param {module:api/ShopApi~shopPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['shopPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopVacationDelete operation.
     * @callback module:api/ShopApi~shopVacationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable vacation mode. All listings will be re-enabled.
     * Disable vacation mode. All listings will be re-enabled.
     * @param {module:api/ShopApi~shopVacationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopVacationDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop/vacation', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopVacationGet operation.
     * @callback module:api/ShopApi~shopVacationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns shop vacation status
     * Returns shop vacation status
     * @param {module:api/ShopApi~shopVacationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopVacationGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop/vacation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopVacationPost operation.
     * @callback module:api/ShopApi~shopVacationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable vacation mode. All listings will be unavailable until vacation mode is turned off.
     * Enable vacation mode. All listings will be unavailable until vacation mode is turned off.
     * @param {module:api/ShopApi~shopVacationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopVacationPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shop/vacation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
