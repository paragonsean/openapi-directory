/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Shops service.
* @module api/ShopsApi
* @version 3.0
*/
export default class ShopsApi {

    /**
    * Constructs a new ShopsApi. 
    * @alias module:api/ShopsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the shopsIdStorefrontsGet operation.
     * @callback module:api/ShopsApi~shopsIdStorefrontsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get storefront details on a shop.
     * Get storefront details on a shop.
     * @param {String} id 
     * @param {module:api/ShopsApi~shopsIdStorefrontsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsIdStorefrontsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling shopsIdStorefrontsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{id}/storefronts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopsShopIdShippingProfilesGet operation.
     * @callback module:api/ShopsApi~shopsShopIdShippingProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of shipping profiles for your shop
     * List of shipping profiles for your shop
     * @param {String} shopId 
     * @param {module:api/ShopsApi~shopsShopIdShippingProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsShopIdShippingProfilesGet(shopId, callback) {
      let postBody = null;
      // verify the required parameter 'shopId' is set
      if (shopId === undefined || shopId === null) {
        throw new Error("Missing the required parameter 'shopId' when calling shopsShopIdShippingProfilesGet");
      }

      let pathParams = {
        'shop_id': shopId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{shop_id}/shipping_profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopsSlugFeedbackBuyerGet operation.
     * @callback module:api/ShopsApi~shopsSlugFeedbackBuyerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get seller's feedback as a buyer
     * Get seller's feedback as a buyer
     * @param {String} slug 
     * @param {module:api/ShopsApi~shopsSlugFeedbackBuyerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsSlugFeedbackBuyerGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling shopsSlugFeedbackBuyerGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{slug}/feedback/buyer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopsSlugFeedbackGet operation.
     * @callback module:api/ShopsApi~shopsSlugFeedbackGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get seller's feedback
     * Get seller's feedback
     * @param {String} slug 
     * @param {module:api/ShopsApi~shopsSlugFeedbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsSlugFeedbackGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling shopsSlugFeedbackGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{slug}/feedback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopsSlugFeedbackSellerGet operation.
     * @callback module:api/ShopsApi~shopsSlugFeedbackSellerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get seller's feedback as a seller
     * Get seller's feedback as a seller
     * @param {String} slug 
     * @param {module:api/ShopsApi~shopsSlugFeedbackSellerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsSlugFeedbackSellerGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling shopsSlugFeedbackSellerGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{slug}/feedback/seller', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shopsSlugGet operation.
     * @callback module:api/ShopsApi~shopsSlugGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details on a shop.
     * Get details on a shop.
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeListingCount] Include the live listing count in the response.
     * @param {module:api/ShopsApi~shopsSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shopsSlugGet(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling shopsSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'include_listing_count': opts['includeListingCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shops/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
