/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Orders service.
* @module api/OrdersApi
* @version 3.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ordersOrderIdFeedbackBuyerGet operation.
     * @callback module:api/OrdersApi~ordersOrderIdFeedbackBuyerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Feedback details for an order's buyer
     * Feedback details for an order's buyer
     * @param {String} orderId 
     * @param {module:api/OrdersApi~ordersOrderIdFeedbackBuyerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersOrderIdFeedbackBuyerGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdFeedbackBuyerGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{order_id}/feedback/buyer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderIdFeedbackBuyerPost operation.
     * @callback module:api/OrdersApi~ordersOrderIdFeedbackBuyerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add feedback about an order's buyer
     * Add feedback about an order's buyer
     * @param {String} orderId 
     * @param {module:api/OrdersApi~ordersOrderIdFeedbackBuyerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersOrderIdFeedbackBuyerPost(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdFeedbackBuyerPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{order_id}/feedback/buyer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderIdFeedbackSellerGet operation.
     * @callback module:api/OrdersApi~ordersOrderIdFeedbackSellerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Feedback details for an order's seller
     * Feedback details for an order's seller
     * @param {String} orderId 
     * @param {module:api/OrdersApi~ordersOrderIdFeedbackSellerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersOrderIdFeedbackSellerGet(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdFeedbackSellerGet");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{order_id}/feedback/seller', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderIdFeedbackSellerPost operation.
     * @callback module:api/OrdersApi~ordersOrderIdFeedbackSellerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add feedback about an order's seller
     * Add feedback about an order's seller
     * @param {String} orderId 
     * @param {module:api/OrdersApi~ordersOrderIdFeedbackSellerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ordersOrderIdFeedbackSellerPost(orderId, callback) {
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling ordersOrderIdFeedbackSellerPost");
      }

      let pathParams = {
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/orders/{order_id}/feedback/seller', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
