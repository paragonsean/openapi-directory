/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reverb);
  }
}(this, function(expect, Reverb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reverb.MyFollowsSearchPostRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MyFollowsSearchPostRequest', function() {
    it('should create an instance of MyFollowsSearchPostRequest', function() {
      // uncomment below and update the code to test MyFollowsSearchPostRequest
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be.a(Reverb.MyFollowsSearchPostRequest);
    });

    it('should have the property acceptsGiftCards (base name: "accepts_gift_cards")', function() {
      // uncomment below and update the code to test the property acceptsGiftCards
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property acceptsPaymentPlans (base name: "accepts_payment_plans")', function() {
      // uncomment below and update the code to test the property acceptsPaymentPlans
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property auctionPriceMax (base name: "auction_price_max")', function() {
      // uncomment below and update the code to test the property auctionPriceMax
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property conditions (base name: "conditions")', function() {
      // uncomment below and update the code to test the property conditions
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property decade (base name: "decade")', function() {
      // uncomment below and update the code to test the property decade
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property excludeAuctions (base name: "exclude_auctions")', function() {
      // uncomment below and update the code to test the property excludeAuctions
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property finish (base name: "finish")', function() {
      // uncomment below and update the code to test the property finish
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property handmade (base name: "handmade")', function() {
      // uncomment below and update the code to test the property handmade
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property itemCity (base name: "item_city")', function() {
      // uncomment below and update the code to test the property itemCity
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property itemCountry (base name: "item_country")', function() {
      // uncomment below and update the code to test the property itemCountry
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property itemRegion (base name: "item_region")', function() {
      // uncomment below and update the code to test the property itemRegion
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property itemState (base name: "item_state")', function() {
      // uncomment below and update the code to test the property itemState
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property listingType (base name: "listing_type")', function() {
      // uncomment below and update the code to test the property listingType
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property localPickup (base name: "local_pickup")', function() {
      // uncomment below and update the code to test the property localPickup
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property make (base name: "make")', function() {
      // uncomment below and update the code to test the property make
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property mustNot (base name: "must_not")', function() {
      // uncomment below and update the code to test the property mustNot
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property notIds (base name: "not_ids")', function() {
      // uncomment below and update the code to test the property notIds
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property preferredSeller (base name: "preferred_seller")', function() {
      // uncomment below and update the code to test the property preferredSeller
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property priceMax (base name: "price_max")', function() {
      // uncomment below and update the code to test the property priceMax
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property priceMin (base name: "price_min")', function() {
      // uncomment below and update the code to test the property priceMin
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property productType (base name: "product_type")', function() {
      // uncomment below and update the code to test the property productType
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shipsTo (base name: "ships_to")', function() {
      // uncomment below and update the code to test the property shipsTo
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shop (base name: "shop")', function() {
      // uncomment below and update the code to test the property shop
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shopId (base name: "shop_id")', function() {
      // uncomment below and update the code to test the property shopId
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property watchersCountMin (base name: "watchers_count_min")', function() {
      // uncomment below and update the code to test the property watchersCountMin
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property yearMax (base name: "year_max")', function() {
      // uncomment below and update the code to test the property yearMax
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property yearMin (base name: "year_min")', function() {
      // uncomment below and update the code to test the property yearMin
      //var instance = new Reverb.MyFollowsSearchPostRequest();
      //expect(instance).to.be();
    });

  });

}));
