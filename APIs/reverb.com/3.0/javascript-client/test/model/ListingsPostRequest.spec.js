/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Reverb);
  }
}(this, function(expect, Reverb) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Reverb.ListingsPostRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListingsPostRequest', function() {
    it('should create an instance of ListingsPostRequest', function() {
      // uncomment below and update the code to test ListingsPostRequest
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be.a(Reverb.ListingsPostRequest);
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property condition (base name: "condition")', function() {
      // uncomment below and update the code to test the property condition
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property exclusiveChannel (base name: "exclusive_channel")', function() {
      // uncomment below and update the code to test the property exclusiveChannel
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property finish (base name: "finish")', function() {
      // uncomment below and update the code to test the property finish
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property hasInventory (base name: "has_inventory")', function() {
      // uncomment below and update the code to test the property hasInventory
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property inventory (base name: "inventory")', function() {
      // uncomment below and update the code to test the property inventory
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property make (base name: "make")', function() {
      // uncomment below and update the code to test the property make
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property model (base name: "model")', function() {
      // uncomment below and update the code to test the property model
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property multiItem (base name: "multi_item")', function() {
      // uncomment below and update the code to test the property multiItem
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property offersEnabled (base name: "offers_enabled")', function() {
      // uncomment below and update the code to test the property offersEnabled
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property originCountryCode (base name: "origin_country_code")', function() {
      // uncomment below and update the code to test the property originCountryCode
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property photos (base name: "photos")', function() {
      // uncomment below and update the code to test the property photos
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property preorderInfo (base name: "preorder_info")', function() {
      // uncomment below and update the code to test the property preorderInfo
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property prop65Warning (base name: "prop_65_warning")', function() {
      // uncomment below and update the code to test the property prop65Warning
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property publish (base name: "publish")', function() {
      // uncomment below and update the code to test the property publish
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property seller (base name: "seller")', function() {
      // uncomment below and update the code to test the property seller
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property sellerCost (base name: "seller_cost")', function() {
      // uncomment below and update the code to test the property sellerCost
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shipping (base name: "shipping")', function() {
      // uncomment below and update the code to test the property shipping
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shippingProfileId (base name: "shipping_profile_id")', function() {
      // uncomment below and update the code to test the property shippingProfileId
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property shippingProfileName (base name: "shipping_profile_name")', function() {
      // uncomment below and update the code to test the property shippingProfileName
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property soldAsIs (base name: "sold_as_is")', function() {
      // uncomment below and update the code to test the property soldAsIs
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property storageLocation (base name: "storage_location")', function() {
      // uncomment below and update the code to test the property storageLocation
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property taxExempt (base name: "tax_exempt")', function() {
      // uncomment below and update the code to test the property taxExempt
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property upcDoesNotApply (base name: "upc_does_not_apply")', function() {
      // uncomment below and update the code to test the property upcDoesNotApply
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property videos (base name: "videos")', function() {
      // uncomment below and update the code to test the property videos
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

    it('should have the property year (base name: "year")', function() {
      // uncomment below and update the code to test the property year
      //var instance = new Reverb.ListingsPostRequest();
      //expect(instance).to.be();
    });

  });

}));
