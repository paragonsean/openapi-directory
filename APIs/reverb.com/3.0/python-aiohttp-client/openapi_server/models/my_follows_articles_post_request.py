# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MyFollowsArticlesPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_uuids: str=None):
        """MyFollowsArticlesPostRequest - a model defined in OpenAPI

        :param category_uuids: The category_uuids of this MyFollowsArticlesPostRequest.
        """
        self.openapi_types = {
            'category_uuids': str
        }

        self.attribute_map = {
            'category_uuids': 'category_uuids'
        }

        self._category_uuids = category_uuids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MyFollowsArticlesPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _my_follows_articles_post_request of this MyFollowsArticlesPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_uuids(self):
        """Gets the category_uuids of this MyFollowsArticlesPostRequest.


        :return: The category_uuids of this MyFollowsArticlesPostRequest.
        :rtype: str
        """
        return self._category_uuids

    @category_uuids.setter
    def category_uuids(self, category_uuids):
        """Sets the category_uuids of this MyFollowsArticlesPostRequest.


        :param category_uuids: The category_uuids of this MyFollowsArticlesPostRequest.
        :type category_uuids: str
        """
        if category_uuids is None:
            raise ValueError("Invalid value for `category_uuids`, must not be `None`")

        self._category_uuids = category_uuids
