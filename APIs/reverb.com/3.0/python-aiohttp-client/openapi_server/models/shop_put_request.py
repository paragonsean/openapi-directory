# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shop_put_request_address import ShopPutRequestAddress
from openapi_server import util


class ShopPutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ShopPutRequestAddress=None, currency: str=None, description: str=None, legal_country_code: str=None, legal_country_code_confirmed: bool=None, name: str=None, payment_policy: str=None, return_policy: str=None, shipping_policy: str=None, shop_type: str=None, website: str=None):
        """ShopPutRequest - a model defined in OpenAPI

        :param address: The address of this ShopPutRequest.
        :param currency: The currency of this ShopPutRequest.
        :param description: The description of this ShopPutRequest.
        :param legal_country_code: The legal_country_code of this ShopPutRequest.
        :param legal_country_code_confirmed: The legal_country_code_confirmed of this ShopPutRequest.
        :param name: The name of this ShopPutRequest.
        :param payment_policy: The payment_policy of this ShopPutRequest.
        :param return_policy: The return_policy of this ShopPutRequest.
        :param shipping_policy: The shipping_policy of this ShopPutRequest.
        :param shop_type: The shop_type of this ShopPutRequest.
        :param website: The website of this ShopPutRequest.
        """
        self.openapi_types = {
            'address': ShopPutRequestAddress,
            'currency': str,
            'description': str,
            'legal_country_code': str,
            'legal_country_code_confirmed': bool,
            'name': str,
            'payment_policy': str,
            'return_policy': str,
            'shipping_policy': str,
            'shop_type': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'currency': 'currency',
            'description': 'description',
            'legal_country_code': 'legal_country_code',
            'legal_country_code_confirmed': 'legal_country_code_confirmed',
            'name': 'name',
            'payment_policy': 'payment_policy',
            'return_policy': 'return_policy',
            'shipping_policy': 'shipping_policy',
            'shop_type': 'shop_type',
            'website': 'website'
        }

        self._address = address
        self._currency = currency
        self._description = description
        self._legal_country_code = legal_country_code
        self._legal_country_code_confirmed = legal_country_code_confirmed
        self._name = name
        self._payment_policy = payment_policy
        self._return_policy = return_policy
        self._shipping_policy = shipping_policy
        self._shop_type = shop_type
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShopPutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _shop_put_request of this ShopPutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ShopPutRequest.


        :return: The address of this ShopPutRequest.
        :rtype: ShopPutRequestAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ShopPutRequest.


        :param address: The address of this ShopPutRequest.
        :type address: ShopPutRequestAddress
        """

        self._address = address

    @property
    def currency(self):
        """Gets the currency of this ShopPutRequest.


        :return: The currency of this ShopPutRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ShopPutRequest.


        :param currency: The currency of this ShopPutRequest.
        :type currency: str
        """
        allowed_values = ["USD", "CAD", "EUR", "GBP", "AUD", "JPY", "NZD", "MXN"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this ShopPutRequest.


        :return: The description of this ShopPutRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShopPutRequest.


        :param description: The description of this ShopPutRequest.
        :type description: str
        """

        self._description = description

    @property
    def legal_country_code(self):
        """Gets the legal_country_code of this ShopPutRequest.


        :return: The legal_country_code of this ShopPutRequest.
        :rtype: str
        """
        return self._legal_country_code

    @legal_country_code.setter
    def legal_country_code(self, legal_country_code):
        """Sets the legal_country_code of this ShopPutRequest.


        :param legal_country_code: The legal_country_code of this ShopPutRequest.
        :type legal_country_code: str
        """
        allowed_values = ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "false", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]  # noqa: E501
        if legal_country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_country_code` ({0}), must be one of {1}"
                .format(legal_country_code, allowed_values)
            )

        self._legal_country_code = legal_country_code

    @property
    def legal_country_code_confirmed(self):
        """Gets the legal_country_code_confirmed of this ShopPutRequest.


        :return: The legal_country_code_confirmed of this ShopPutRequest.
        :rtype: bool
        """
        return self._legal_country_code_confirmed

    @legal_country_code_confirmed.setter
    def legal_country_code_confirmed(self, legal_country_code_confirmed):
        """Sets the legal_country_code_confirmed of this ShopPutRequest.


        :param legal_country_code_confirmed: The legal_country_code_confirmed of this ShopPutRequest.
        :type legal_country_code_confirmed: bool
        """

        self._legal_country_code_confirmed = legal_country_code_confirmed

    @property
    def name(self):
        """Gets the name of this ShopPutRequest.


        :return: The name of this ShopPutRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShopPutRequest.


        :param name: The name of this ShopPutRequest.
        :type name: str
        """

        self._name = name

    @property
    def payment_policy(self):
        """Gets the payment_policy of this ShopPutRequest.


        :return: The payment_policy of this ShopPutRequest.
        :rtype: str
        """
        return self._payment_policy

    @payment_policy.setter
    def payment_policy(self, payment_policy):
        """Sets the payment_policy of this ShopPutRequest.


        :param payment_policy: The payment_policy of this ShopPutRequest.
        :type payment_policy: str
        """

        self._payment_policy = payment_policy

    @property
    def return_policy(self):
        """Gets the return_policy of this ShopPutRequest.


        :return: The return_policy of this ShopPutRequest.
        :rtype: str
        """
        return self._return_policy

    @return_policy.setter
    def return_policy(self, return_policy):
        """Sets the return_policy of this ShopPutRequest.


        :param return_policy: The return_policy of this ShopPutRequest.
        :type return_policy: str
        """

        self._return_policy = return_policy

    @property
    def shipping_policy(self):
        """Gets the shipping_policy of this ShopPutRequest.


        :return: The shipping_policy of this ShopPutRequest.
        :rtype: str
        """
        return self._shipping_policy

    @shipping_policy.setter
    def shipping_policy(self, shipping_policy):
        """Sets the shipping_policy of this ShopPutRequest.


        :param shipping_policy: The shipping_policy of this ShopPutRequest.
        :type shipping_policy: str
        """

        self._shipping_policy = shipping_policy

    @property
    def shop_type(self):
        """Gets the shop_type of this ShopPutRequest.


        :return: The shop_type of this ShopPutRequest.
        :rtype: str
        """
        return self._shop_type

    @shop_type.setter
    def shop_type(self, shop_type):
        """Sets the shop_type of this ShopPutRequest.


        :param shop_type: The shop_type of this ShopPutRequest.
        :type shop_type: str
        """
        allowed_values = ["individual", "business"]  # noqa: E501
        if shop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shop_type` ({0}), must be one of {1}"
                .format(shop_type, allowed_values)
            )

        self._shop_type = shop_type

    @property
    def website(self):
        """Gets the website of this ShopPutRequest.


        :return: The website of this ShopPutRequest.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ShopPutRequest.


        :param website: The website of this ShopPutRequest.
        :type website: str
        """

        self._website = website
