# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListingsPostRequestCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uuid: str=None):
        """ListingsPostRequestCondition - a model defined in OpenAPI

        :param uuid: The uuid of this ListingsPostRequestCondition.
        """
        self.openapi_types = {
            'uuid': str
        }

        self.attribute_map = {
            'uuid': 'uuid'
        }

        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingsPostRequestCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _listings_post_request_condition of this ListingsPostRequestCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this ListingsPostRequestCondition.

        Condition UUID

        :return: The uuid of this ListingsPostRequestCondition.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ListingsPostRequestCondition.

        Condition UUID

        :param uuid: The uuid of this ListingsPostRequestCondition.
        :type uuid: str
        """
        allowed_values = ["fbf35668-96a0-4baa-bcde-ab18d6b1b329", "6a9dfcad-600b-46c8-9e08-ce6e5057921e", "98777886-76d0-44c8-865e-bb40e669e934", "f7a3f48c-972a-44c6-b01a-0cd27488d3f6", "ae4d9114-1bd7-4ec5-a4ba-6653af5ac84d", "df268ad1-c462-4ba6-b6db-e007e23922ea", "ac5b9c1e-dc78-466d-b0b3-7cf712967a48", "6db7df88-293b-4017-a1c1-cdb5e599fa1a", "9225283f-60c2-4413-ad18-1f5eba7a856f", "7c3f45de-2ae0-4c81-8400-fdb6b1d74890"]  # noqa: E501
        if uuid not in allowed_values:
            raise ValueError(
                "Invalid value for `uuid` ({0}), must be one of {1}"
                .format(uuid, allowed_values)
            )

        self._uuid = uuid
