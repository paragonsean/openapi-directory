# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversations_conversation_id_offer_post_request_price import ConversationsConversationIdOfferPostRequestPrice
from openapi_server.models.listings_post_request_categories_inner import ListingsPostRequestCategoriesInner
from openapi_server.models.listings_post_request_condition import ListingsPostRequestCondition
from openapi_server.models.listings_post_request_location import ListingsPostRequestLocation
from openapi_server.models.listings_post_request_preorder_info import ListingsPostRequestPreorderInfo
from openapi_server.models.listings_post_request_seller import ListingsPostRequestSeller
from openapi_server.models.listings_post_request_shipping import ListingsPostRequestShipping
from openapi_server.models.listings_post_request_videos_inner import ListingsPostRequestVideosInner
from openapi_server import util


class ListingsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[ListingsPostRequestCategoriesInner]=None, condition: ListingsPostRequestCondition=None, description: str=None, exclusive_channel: str=None, finish: str=None, has_inventory: bool=None, inventory: int=None, location: ListingsPostRequestLocation=None, make: str=None, model: str=None, multi_item: bool=None, offers_enabled: bool=None, origin_country_code: str=None, photos: List[str]=None, preorder_info: ListingsPostRequestPreorderInfo=None, price: ConversationsConversationIdOfferPostRequestPrice=None, prop_65_warning: str=None, publish: bool=None, seller: ListingsPostRequestSeller=None, seller_cost: str=None, shipping: ListingsPostRequestShipping=None, shipping_profile_id: str=None, shipping_profile_name: str=None, sku: str=None, sold_as_is: bool=None, storage_location: str=None, tax_exempt: bool=None, title: str=None, upc: str=None, upc_does_not_apply: bool=None, videos: List[ListingsPostRequestVideosInner]=None, year: str=None):
        """ListingsPostRequest - a model defined in OpenAPI

        :param categories: The categories of this ListingsPostRequest.
        :param condition: The condition of this ListingsPostRequest.
        :param description: The description of this ListingsPostRequest.
        :param exclusive_channel: The exclusive_channel of this ListingsPostRequest.
        :param finish: The finish of this ListingsPostRequest.
        :param has_inventory: The has_inventory of this ListingsPostRequest.
        :param inventory: The inventory of this ListingsPostRequest.
        :param location: The location of this ListingsPostRequest.
        :param make: The make of this ListingsPostRequest.
        :param model: The model of this ListingsPostRequest.
        :param multi_item: The multi_item of this ListingsPostRequest.
        :param offers_enabled: The offers_enabled of this ListingsPostRequest.
        :param origin_country_code: The origin_country_code of this ListingsPostRequest.
        :param photos: The photos of this ListingsPostRequest.
        :param preorder_info: The preorder_info of this ListingsPostRequest.
        :param price: The price of this ListingsPostRequest.
        :param prop_65_warning: The prop_65_warning of this ListingsPostRequest.
        :param publish: The publish of this ListingsPostRequest.
        :param seller: The seller of this ListingsPostRequest.
        :param seller_cost: The seller_cost of this ListingsPostRequest.
        :param shipping: The shipping of this ListingsPostRequest.
        :param shipping_profile_id: The shipping_profile_id of this ListingsPostRequest.
        :param shipping_profile_name: The shipping_profile_name of this ListingsPostRequest.
        :param sku: The sku of this ListingsPostRequest.
        :param sold_as_is: The sold_as_is of this ListingsPostRequest.
        :param storage_location: The storage_location of this ListingsPostRequest.
        :param tax_exempt: The tax_exempt of this ListingsPostRequest.
        :param title: The title of this ListingsPostRequest.
        :param upc: The upc of this ListingsPostRequest.
        :param upc_does_not_apply: The upc_does_not_apply of this ListingsPostRequest.
        :param videos: The videos of this ListingsPostRequest.
        :param year: The year of this ListingsPostRequest.
        """
        self.openapi_types = {
            'categories': List[ListingsPostRequestCategoriesInner],
            'condition': ListingsPostRequestCondition,
            'description': str,
            'exclusive_channel': str,
            'finish': str,
            'has_inventory': bool,
            'inventory': int,
            'location': ListingsPostRequestLocation,
            'make': str,
            'model': str,
            'multi_item': bool,
            'offers_enabled': bool,
            'origin_country_code': str,
            'photos': List[str],
            'preorder_info': ListingsPostRequestPreorderInfo,
            'price': ConversationsConversationIdOfferPostRequestPrice,
            'prop_65_warning': str,
            'publish': bool,
            'seller': ListingsPostRequestSeller,
            'seller_cost': str,
            'shipping': ListingsPostRequestShipping,
            'shipping_profile_id': str,
            'shipping_profile_name': str,
            'sku': str,
            'sold_as_is': bool,
            'storage_location': str,
            'tax_exempt': bool,
            'title': str,
            'upc': str,
            'upc_does_not_apply': bool,
            'videos': List[ListingsPostRequestVideosInner],
            'year': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'condition': 'condition',
            'description': 'description',
            'exclusive_channel': 'exclusive_channel',
            'finish': 'finish',
            'has_inventory': 'has_inventory',
            'inventory': 'inventory',
            'location': 'location',
            'make': 'make',
            'model': 'model',
            'multi_item': 'multi_item',
            'offers_enabled': 'offers_enabled',
            'origin_country_code': 'origin_country_code',
            'photos': 'photos',
            'preorder_info': 'preorder_info',
            'price': 'price',
            'prop_65_warning': 'prop_65_warning',
            'publish': 'publish',
            'seller': 'seller',
            'seller_cost': 'seller_cost',
            'shipping': 'shipping',
            'shipping_profile_id': 'shipping_profile_id',
            'shipping_profile_name': 'shipping_profile_name',
            'sku': 'sku',
            'sold_as_is': 'sold_as_is',
            'storage_location': 'storage_location',
            'tax_exempt': 'tax_exempt',
            'title': 'title',
            'upc': 'upc',
            'upc_does_not_apply': 'upc_does_not_apply',
            'videos': 'videos',
            'year': 'year'
        }

        self._categories = categories
        self._condition = condition
        self._description = description
        self._exclusive_channel = exclusive_channel
        self._finish = finish
        self._has_inventory = has_inventory
        self._inventory = inventory
        self._location = location
        self._make = make
        self._model = model
        self._multi_item = multi_item
        self._offers_enabled = offers_enabled
        self._origin_country_code = origin_country_code
        self._photos = photos
        self._preorder_info = preorder_info
        self._price = price
        self._prop_65_warning = prop_65_warning
        self._publish = publish
        self._seller = seller
        self._seller_cost = seller_cost
        self._shipping = shipping
        self._shipping_profile_id = shipping_profile_id
        self._shipping_profile_name = shipping_profile_name
        self._sku = sku
        self._sold_as_is = sold_as_is
        self._storage_location = storage_location
        self._tax_exempt = tax_exempt
        self._title = title
        self._upc = upc
        self._upc_does_not_apply = upc_does_not_apply
        self._videos = videos
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _listings_post_request of this ListingsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this ListingsPostRequest.


        :return: The categories of this ListingsPostRequest.
        :rtype: List[ListingsPostRequestCategoriesInner]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ListingsPostRequest.


        :param categories: The categories of this ListingsPostRequest.
        :type categories: List[ListingsPostRequestCategoriesInner]
        """

        self._categories = categories

    @property
    def condition(self):
        """Gets the condition of this ListingsPostRequest.


        :return: The condition of this ListingsPostRequest.
        :rtype: ListingsPostRequestCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ListingsPostRequest.


        :param condition: The condition of this ListingsPostRequest.
        :type condition: ListingsPostRequestCondition
        """

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this ListingsPostRequest.

        Product description. Please keep formatting to a minimum.

        :return: The description of this ListingsPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListingsPostRequest.

        Product description. Please keep formatting to a minimum.

        :param description: The description of this ListingsPostRequest.
        :type description: str
        """

        self._description = description

    @property
    def exclusive_channel(self):
        """Gets the exclusive_channel of this ListingsPostRequest.

        Currently for users of seller sites only, this allows you to have a listing available only to your seller site by setting this to 'seller_site'

        :return: The exclusive_channel of this ListingsPostRequest.
        :rtype: str
        """
        return self._exclusive_channel

    @exclusive_channel.setter
    def exclusive_channel(self, exclusive_channel):
        """Sets the exclusive_channel of this ListingsPostRequest.

        Currently for users of seller sites only, this allows you to have a listing available only to your seller site by setting this to 'seller_site'

        :param exclusive_channel: The exclusive_channel of this ListingsPostRequest.
        :type exclusive_channel: str
        """
        allowed_values = ["seller_site", "reverb", "none"]  # noqa: E501
        if exclusive_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `exclusive_channel` ({0}), must be one of {1}"
                .format(exclusive_channel, allowed_values)
            )

        self._exclusive_channel = exclusive_channel

    @property
    def finish(self):
        """Gets the finish of this ListingsPostRequest.

        Finish, e.g. 'Sunburst'

        :return: The finish of this ListingsPostRequest.
        :rtype: str
        """
        return self._finish

    @finish.setter
    def finish(self, finish):
        """Sets the finish of this ListingsPostRequest.

        Finish, e.g. 'Sunburst'

        :param finish: The finish of this ListingsPostRequest.
        :type finish: str
        """

        self._finish = finish

    @property
    def has_inventory(self):
        """Gets the has_inventory of this ListingsPostRequest.

        Set true if selling more than one

        :return: The has_inventory of this ListingsPostRequest.
        :rtype: bool
        """
        return self._has_inventory

    @has_inventory.setter
    def has_inventory(self, has_inventory):
        """Sets the has_inventory of this ListingsPostRequest.

        Set true if selling more than one

        :param has_inventory: The has_inventory of this ListingsPostRequest.
        :type has_inventory: bool
        """

        self._has_inventory = has_inventory

    @property
    def inventory(self):
        """Gets the inventory of this ListingsPostRequest.

        Number of items available for sale. Reverb will increment and decrement automatically.

        :return: The inventory of this ListingsPostRequest.
        :rtype: int
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this ListingsPostRequest.

        Number of items available for sale. Reverb will increment and decrement automatically.

        :param inventory: The inventory of this ListingsPostRequest.
        :type inventory: int
        """

        self._inventory = inventory

    @property
    def location(self):
        """Gets the location of this ListingsPostRequest.


        :return: The location of this ListingsPostRequest.
        :rtype: ListingsPostRequestLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ListingsPostRequest.


        :param location: The location of this ListingsPostRequest.
        :type location: ListingsPostRequestLocation
        """

        self._location = location

    @property
    def make(self):
        """Gets the make of this ListingsPostRequest.

        ex: Fender, Gibson

        :return: The make of this ListingsPostRequest.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this ListingsPostRequest.

        ex: Fender, Gibson

        :param make: The make of this ListingsPostRequest.
        :type make: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this ListingsPostRequest.

        ex: Stratocaster, SG

        :return: The model of this ListingsPostRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ListingsPostRequest.

        ex: Stratocaster, SG

        :param model: The model of this ListingsPostRequest.
        :type model: str
        """

        self._model = model

    @property
    def multi_item(self):
        """Gets the multi_item of this ListingsPostRequest.

        Specifies if the listing is a bundle of multiple individual items

        :return: The multi_item of this ListingsPostRequest.
        :rtype: bool
        """
        return self._multi_item

    @multi_item.setter
    def multi_item(self, multi_item):
        """Sets the multi_item of this ListingsPostRequest.

        Specifies if the listing is a bundle of multiple individual items

        :param multi_item: The multi_item of this ListingsPostRequest.
        :type multi_item: bool
        """

        self._multi_item = multi_item

    @property
    def offers_enabled(self):
        """Gets the offers_enabled of this ListingsPostRequest.

        Whether the listing accepts negotiated offers (default: true)

        :return: The offers_enabled of this ListingsPostRequest.
        :rtype: bool
        """
        return self._offers_enabled

    @offers_enabled.setter
    def offers_enabled(self, offers_enabled):
        """Sets the offers_enabled of this ListingsPostRequest.

        Whether the listing accepts negotiated offers (default: true)

        :param offers_enabled: The offers_enabled of this ListingsPostRequest.
        :type offers_enabled: bool
        """

        self._offers_enabled = offers_enabled

    @property
    def origin_country_code(self):
        """Gets the origin_country_code of this ListingsPostRequest.

        Country of origin/manufacture, ISO code (e.g: US)

        :return: The origin_country_code of this ListingsPostRequest.
        :rtype: str
        """
        return self._origin_country_code

    @origin_country_code.setter
    def origin_country_code(self, origin_country_code):
        """Sets the origin_country_code of this ListingsPostRequest.

        Country of origin/manufacture, ISO code (e.g: US)

        :param origin_country_code: The origin_country_code of this ListingsPostRequest.
        :type origin_country_code: str
        """

        self._origin_country_code = origin_country_code

    @property
    def photos(self):
        """Gets the photos of this ListingsPostRequest.

        An array of image URLs. Ex: ['http://my.site.com/image.jpg']

        :return: The photos of this ListingsPostRequest.
        :rtype: List[str]
        """
        return self._photos

    @photos.setter
    def photos(self, photos):
        """Sets the photos of this ListingsPostRequest.

        An array of image URLs. Ex: ['http://my.site.com/image.jpg']

        :param photos: The photos of this ListingsPostRequest.
        :type photos: List[str]
        """

        self._photos = photos

    @property
    def preorder_info(self):
        """Gets the preorder_info of this ListingsPostRequest.


        :return: The preorder_info of this ListingsPostRequest.
        :rtype: ListingsPostRequestPreorderInfo
        """
        return self._preorder_info

    @preorder_info.setter
    def preorder_info(self, preorder_info):
        """Sets the preorder_info of this ListingsPostRequest.


        :param preorder_info: The preorder_info of this ListingsPostRequest.
        :type preorder_info: ListingsPostRequestPreorderInfo
        """

        self._preorder_info = preorder_info

    @property
    def price(self):
        """Gets the price of this ListingsPostRequest.


        :return: The price of this ListingsPostRequest.
        :rtype: ConversationsConversationIdOfferPostRequestPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ListingsPostRequest.


        :param price: The price of this ListingsPostRequest.
        :type price: ConversationsConversationIdOfferPostRequestPrice
        """

        self._price = price

    @property
    def prop_65_warning(self):
        """Gets the prop_65_warning of this ListingsPostRequest.

        If your listing contains chemicals that are required to be reported under California Prop 65, please provide your warning statement. We will add the required 'Warning' label and link to California's information page, so you only need to provide the body of the warning. For more information, see https://www.p65warnings.ca.gov/new-proposition-65-warnings

        :return: The prop_65_warning of this ListingsPostRequest.
        :rtype: str
        """
        return self._prop_65_warning

    @prop_65_warning.setter
    def prop_65_warning(self, prop_65_warning):
        """Sets the prop_65_warning of this ListingsPostRequest.

        If your listing contains chemicals that are required to be reported under California Prop 65, please provide your warning statement. We will add the required 'Warning' label and link to California's information page, so you only need to provide the body of the warning. For more information, see https://www.p65warnings.ca.gov/new-proposition-65-warnings

        :param prop_65_warning: The prop_65_warning of this ListingsPostRequest.
        :type prop_65_warning: str
        """

        self._prop_65_warning = prop_65_warning

    @property
    def publish(self):
        """Gets the publish of this ListingsPostRequest.

        Publish your listing if draft

        :return: The publish of this ListingsPostRequest.
        :rtype: bool
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this ListingsPostRequest.

        Publish your listing if draft

        :param publish: The publish of this ListingsPostRequest.
        :type publish: bool
        """

        self._publish = publish

    @property
    def seller(self):
        """Gets the seller of this ListingsPostRequest.


        :return: The seller of this ListingsPostRequest.
        :rtype: ListingsPostRequestSeller
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this ListingsPostRequest.


        :param seller: The seller of this ListingsPostRequest.
        :type seller: ListingsPostRequestSeller
        """

        self._seller = seller

    @property
    def seller_cost(self):
        """Gets the seller_cost of this ListingsPostRequest.

        Cost of goods in your currency as a POSIX-compliant decimal number (internal use only, not shown to buyers)

        :return: The seller_cost of this ListingsPostRequest.
        :rtype: str
        """
        return self._seller_cost

    @seller_cost.setter
    def seller_cost(self, seller_cost):
        """Sets the seller_cost of this ListingsPostRequest.

        Cost of goods in your currency as a POSIX-compliant decimal number (internal use only, not shown to buyers)

        :param seller_cost: The seller_cost of this ListingsPostRequest.
        :type seller_cost: str
        """

        self._seller_cost = seller_cost

    @property
    def shipping(self):
        """Gets the shipping of this ListingsPostRequest.


        :return: The shipping of this ListingsPostRequest.
        :rtype: ListingsPostRequestShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this ListingsPostRequest.


        :param shipping: The shipping of this ListingsPostRequest.
        :type shipping: ListingsPostRequestShipping
        """

        self._shipping = shipping

    @property
    def shipping_profile_id(self):
        """Gets the shipping_profile_id of this ListingsPostRequest.

        id of a shop's shipping profile

        :return: The shipping_profile_id of this ListingsPostRequest.
        :rtype: str
        """
        return self._shipping_profile_id

    @shipping_profile_id.setter
    def shipping_profile_id(self, shipping_profile_id):
        """Sets the shipping_profile_id of this ListingsPostRequest.

        id of a shop's shipping profile

        :param shipping_profile_id: The shipping_profile_id of this ListingsPostRequest.
        :type shipping_profile_id: str
        """

        self._shipping_profile_id = shipping_profile_id

    @property
    def shipping_profile_name(self):
        """Gets the shipping_profile_name of this ListingsPostRequest.

        DEPRECATED, please use shipping_profile_id. Name of a shipping profile

        :return: The shipping_profile_name of this ListingsPostRequest.
        :rtype: str
        """
        return self._shipping_profile_name

    @shipping_profile_name.setter
    def shipping_profile_name(self, shipping_profile_name):
        """Sets the shipping_profile_name of this ListingsPostRequest.

        DEPRECATED, please use shipping_profile_id. Name of a shipping profile

        :param shipping_profile_name: The shipping_profile_name of this ListingsPostRequest.
        :type shipping_profile_name: str
        """

        self._shipping_profile_name = shipping_profile_name

    @property
    def sku(self):
        """Gets the sku of this ListingsPostRequest.

        Unique identifier for product

        :return: The sku of this ListingsPostRequest.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ListingsPostRequest.

        Unique identifier for product

        :param sku: The sku of this ListingsPostRequest.
        :type sku: str
        """

        self._sku = sku

    @property
    def sold_as_is(self):
        """Gets the sold_as_is of this ListingsPostRequest.

        This item is sold As-Is and cannot be returned

        :return: The sold_as_is of this ListingsPostRequest.
        :rtype: bool
        """
        return self._sold_as_is

    @sold_as_is.setter
    def sold_as_is(self, sold_as_is):
        """Sets the sold_as_is of this ListingsPostRequest.

        This item is sold As-Is and cannot be returned

        :param sold_as_is: The sold_as_is of this ListingsPostRequest.
        :type sold_as_is: bool
        """

        self._sold_as_is = sold_as_is

    @property
    def storage_location(self):
        """Gets the storage_location of this ListingsPostRequest.

        Internal note used by sellers to back reference their catalog system when entering a listing

        :return: The storage_location of this ListingsPostRequest.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this ListingsPostRequest.

        Internal note used by sellers to back reference their catalog system when entering a listing

        :param storage_location: The storage_location of this ListingsPostRequest.
        :type storage_location: str
        """

        self._storage_location = storage_location

    @property
    def tax_exempt(self):
        """Gets the tax_exempt of this ListingsPostRequest.

        Listing is exempt from taxes / VAT

        :return: The tax_exempt of this ListingsPostRequest.
        :rtype: bool
        """
        return self._tax_exempt

    @tax_exempt.setter
    def tax_exempt(self, tax_exempt):
        """Sets the tax_exempt of this ListingsPostRequest.

        Listing is exempt from taxes / VAT

        :param tax_exempt: The tax_exempt of this ListingsPostRequest.
        :type tax_exempt: bool
        """

        self._tax_exempt = tax_exempt

    @property
    def title(self):
        """Gets the title of this ListingsPostRequest.

        Title of your listing

        :return: The title of this ListingsPostRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ListingsPostRequest.

        Title of your listing

        :param title: The title of this ListingsPostRequest.
        :type title: str
        """

        self._title = title

    @property
    def upc(self):
        """Gets the upc of this ListingsPostRequest.

        Valid UPC code

        :return: The upc of this ListingsPostRequest.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ListingsPostRequest.

        Valid UPC code

        :param upc: The upc of this ListingsPostRequest.
        :type upc: str
        """

        self._upc = upc

    @property
    def upc_does_not_apply(self):
        """Gets the upc_does_not_apply of this ListingsPostRequest.

        True if a brand new product has no UPC code, ie for a handmade or custom item

        :return: The upc_does_not_apply of this ListingsPostRequest.
        :rtype: bool
        """
        return self._upc_does_not_apply

    @upc_does_not_apply.setter
    def upc_does_not_apply(self, upc_does_not_apply):
        """Sets the upc_does_not_apply of this ListingsPostRequest.

        True if a brand new product has no UPC code, ie for a handmade or custom item

        :param upc_does_not_apply: The upc_does_not_apply of this ListingsPostRequest.
        :type upc_does_not_apply: bool
        """

        self._upc_does_not_apply = upc_does_not_apply

    @property
    def videos(self):
        """Gets the videos of this ListingsPostRequest.

        List of YouTube video urls. Note: ONLY ONE ALLOWED

        :return: The videos of this ListingsPostRequest.
        :rtype: List[ListingsPostRequestVideosInner]
        """
        return self._videos

    @videos.setter
    def videos(self, videos):
        """Sets the videos of this ListingsPostRequest.

        List of YouTube video urls. Note: ONLY ONE ALLOWED

        :param videos: The videos of this ListingsPostRequest.
        :type videos: List[ListingsPostRequestVideosInner]
        """

        self._videos = videos

    @property
    def year(self):
        """Gets the year of this ListingsPostRequest.

        Supports many formats. Ex: 1979, mid-70s, late 90s

        :return: The year of this ListingsPostRequest.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ListingsPostRequest.

        Supports many formats. Ex: 1979, mid-70s, late 90s

        :param year: The year of this ListingsPostRequest.
        :type year: str
        """

        self._year = year
