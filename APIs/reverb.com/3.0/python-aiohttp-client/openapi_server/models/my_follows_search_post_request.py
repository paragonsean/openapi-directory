# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MyFollowsSearchPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepts_gift_cards: bool=None, accepts_payment_plans: bool=None, auction_price_max: float=None, category: str=None, conditions: List[str]=None, currency: str=None, decade: str=None, exclude_auctions: bool=None, finish: str=None, handmade: bool=None, item_city: str=None, item_country: str=None, item_region: str=None, item_state: str=None, listing_type: str=None, local_pickup: bool=None, make: List[str]=None, model: str=None, must_not: str=None, not_ids: List[int]=None, preferred_seller: bool=None, price_max: float=None, price_min: float=None, product_type: str=None, query: str=None, ships_to: str=None, shop: str=None, shop_id: str=None, watchers_count_min: int=None, year_max: int=None, year_min: int=None):
        """MyFollowsSearchPostRequest - a model defined in OpenAPI

        :param accepts_gift_cards: The accepts_gift_cards of this MyFollowsSearchPostRequest.
        :param accepts_payment_plans: The accepts_payment_plans of this MyFollowsSearchPostRequest.
        :param auction_price_max: The auction_price_max of this MyFollowsSearchPostRequest.
        :param category: The category of this MyFollowsSearchPostRequest.
        :param conditions: The conditions of this MyFollowsSearchPostRequest.
        :param currency: The currency of this MyFollowsSearchPostRequest.
        :param decade: The decade of this MyFollowsSearchPostRequest.
        :param exclude_auctions: The exclude_auctions of this MyFollowsSearchPostRequest.
        :param finish: The finish of this MyFollowsSearchPostRequest.
        :param handmade: The handmade of this MyFollowsSearchPostRequest.
        :param item_city: The item_city of this MyFollowsSearchPostRequest.
        :param item_country: The item_country of this MyFollowsSearchPostRequest.
        :param item_region: The item_region of this MyFollowsSearchPostRequest.
        :param item_state: The item_state of this MyFollowsSearchPostRequest.
        :param listing_type: The listing_type of this MyFollowsSearchPostRequest.
        :param local_pickup: The local_pickup of this MyFollowsSearchPostRequest.
        :param make: The make of this MyFollowsSearchPostRequest.
        :param model: The model of this MyFollowsSearchPostRequest.
        :param must_not: The must_not of this MyFollowsSearchPostRequest.
        :param not_ids: The not_ids of this MyFollowsSearchPostRequest.
        :param preferred_seller: The preferred_seller of this MyFollowsSearchPostRequest.
        :param price_max: The price_max of this MyFollowsSearchPostRequest.
        :param price_min: The price_min of this MyFollowsSearchPostRequest.
        :param product_type: The product_type of this MyFollowsSearchPostRequest.
        :param query: The query of this MyFollowsSearchPostRequest.
        :param ships_to: The ships_to of this MyFollowsSearchPostRequest.
        :param shop: The shop of this MyFollowsSearchPostRequest.
        :param shop_id: The shop_id of this MyFollowsSearchPostRequest.
        :param watchers_count_min: The watchers_count_min of this MyFollowsSearchPostRequest.
        :param year_max: The year_max of this MyFollowsSearchPostRequest.
        :param year_min: The year_min of this MyFollowsSearchPostRequest.
        """
        self.openapi_types = {
            'accepts_gift_cards': bool,
            'accepts_payment_plans': bool,
            'auction_price_max': float,
            'category': str,
            'conditions': List[str],
            'currency': str,
            'decade': str,
            'exclude_auctions': bool,
            'finish': str,
            'handmade': bool,
            'item_city': str,
            'item_country': str,
            'item_region': str,
            'item_state': str,
            'listing_type': str,
            'local_pickup': bool,
            'make': List[str],
            'model': str,
            'must_not': str,
            'not_ids': List[int],
            'preferred_seller': bool,
            'price_max': float,
            'price_min': float,
            'product_type': str,
            'query': str,
            'ships_to': str,
            'shop': str,
            'shop_id': str,
            'watchers_count_min': int,
            'year_max': int,
            'year_min': int
        }

        self.attribute_map = {
            'accepts_gift_cards': 'accepts_gift_cards',
            'accepts_payment_plans': 'accepts_payment_plans',
            'auction_price_max': 'auction_price_max',
            'category': 'category',
            'conditions': 'conditions',
            'currency': 'currency',
            'decade': 'decade',
            'exclude_auctions': 'exclude_auctions',
            'finish': 'finish',
            'handmade': 'handmade',
            'item_city': 'item_city',
            'item_country': 'item_country',
            'item_region': 'item_region',
            'item_state': 'item_state',
            'listing_type': 'listing_type',
            'local_pickup': 'local_pickup',
            'make': 'make',
            'model': 'model',
            'must_not': 'must_not',
            'not_ids': 'not_ids',
            'preferred_seller': 'preferred_seller',
            'price_max': 'price_max',
            'price_min': 'price_min',
            'product_type': 'product_type',
            'query': 'query',
            'ships_to': 'ships_to',
            'shop': 'shop',
            'shop_id': 'shop_id',
            'watchers_count_min': 'watchers_count_min',
            'year_max': 'year_max',
            'year_min': 'year_min'
        }

        self._accepts_gift_cards = accepts_gift_cards
        self._accepts_payment_plans = accepts_payment_plans
        self._auction_price_max = auction_price_max
        self._category = category
        self._conditions = conditions
        self._currency = currency
        self._decade = decade
        self._exclude_auctions = exclude_auctions
        self._finish = finish
        self._handmade = handmade
        self._item_city = item_city
        self._item_country = item_country
        self._item_region = item_region
        self._item_state = item_state
        self._listing_type = listing_type
        self._local_pickup = local_pickup
        self._make = make
        self._model = model
        self._must_not = must_not
        self._not_ids = not_ids
        self._preferred_seller = preferred_seller
        self._price_max = price_max
        self._price_min = price_min
        self._product_type = product_type
        self._query = query
        self._ships_to = ships_to
        self._shop = shop
        self._shop_id = shop_id
        self._watchers_count_min = watchers_count_min
        self._year_max = year_max
        self._year_min = year_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MyFollowsSearchPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _my_follows_search_post_request of this MyFollowsSearchPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepts_gift_cards(self):
        """Gets the accepts_gift_cards of this MyFollowsSearchPostRequest.

        If true, include only items that accept gift cards

        :return: The accepts_gift_cards of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._accepts_gift_cards

    @accepts_gift_cards.setter
    def accepts_gift_cards(self, accepts_gift_cards):
        """Sets the accepts_gift_cards of this MyFollowsSearchPostRequest.

        If true, include only items that accept gift cards

        :param accepts_gift_cards: The accepts_gift_cards of this MyFollowsSearchPostRequest.
        :type accepts_gift_cards: bool
        """

        self._accepts_gift_cards = accepts_gift_cards

    @property
    def accepts_payment_plans(self):
        """Gets the accepts_payment_plans of this MyFollowsSearchPostRequest.

        If true, only show items that can be purchased with a payment plan

        :return: The accepts_payment_plans of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._accepts_payment_plans

    @accepts_payment_plans.setter
    def accepts_payment_plans(self, accepts_payment_plans):
        """Sets the accepts_payment_plans of this MyFollowsSearchPostRequest.

        If true, only show items that can be purchased with a payment plan

        :param accepts_payment_plans: The accepts_payment_plans of this MyFollowsSearchPostRequest.
        :type accepts_payment_plans: bool
        """

        self._accepts_payment_plans = accepts_payment_plans

    @property
    def auction_price_max(self):
        """Gets the auction_price_max of this MyFollowsSearchPostRequest.

        Maximum current auction price

        :return: The auction_price_max of this MyFollowsSearchPostRequest.
        :rtype: float
        """
        return self._auction_price_max

    @auction_price_max.setter
    def auction_price_max(self, auction_price_max):
        """Sets the auction_price_max of this MyFollowsSearchPostRequest.

        Maximum current auction price

        :param auction_price_max: The auction_price_max of this MyFollowsSearchPostRequest.
        :type auction_price_max: float
        """

        self._auction_price_max = auction_price_max

    @property
    def category(self):
        """Gets the category of this MyFollowsSearchPostRequest.

        Category slug from /api/categories

        :return: The category of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MyFollowsSearchPostRequest.

        Category slug from /api/categories

        :param category: The category of this MyFollowsSearchPostRequest.
        :type category: str
        """

        self._category = category

    @property
    def conditions(self):
        """Gets the conditions of this MyFollowsSearchPostRequest.

        Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint

        :return: The conditions of this MyFollowsSearchPostRequest.
        :rtype: List[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this MyFollowsSearchPostRequest.

        Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint

        :param conditions: The conditions of this MyFollowsSearchPostRequest.
        :type conditions: List[str]
        """
        allowed_values = ["all", "new", "b-stock", "used", "non-functioning", "all-but-new", "poor", "fair", "good", "very-good", "excellent", "mint"]  # noqa: E501
        if not set(conditions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `conditions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(conditions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._conditions = conditions

    @property
    def currency(self):
        """Gets the currency of this MyFollowsSearchPostRequest.

        The currency to be used for the price filters

        :return: The currency of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this MyFollowsSearchPostRequest.

        The currency to be used for the price filters

        :param currency: The currency of this MyFollowsSearchPostRequest.
        :type currency: str
        """
        allowed_values = ["USD", "CAD", "EUR", "GBP", "AUD", "JPY", "NZD", "MXN", "DKK", "SEK", "CHF", "ARS", "BRL", "HKD", "NOK", "PHP", "PLN", "RUB"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def decade(self):
        """Gets the decade of this MyFollowsSearchPostRequest.

        Decade: e.g. 1970s, early 70s

        :return: The decade of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._decade

    @decade.setter
    def decade(self, decade):
        """Sets the decade of this MyFollowsSearchPostRequest.

        Decade: e.g. 1970s, early 70s

        :param decade: The decade of this MyFollowsSearchPostRequest.
        :type decade: str
        """

        self._decade = decade

    @property
    def exclude_auctions(self):
        """Gets the exclude_auctions of this MyFollowsSearchPostRequest.

        If true, exclude auctions

        :return: The exclude_auctions of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._exclude_auctions

    @exclude_auctions.setter
    def exclude_auctions(self, exclude_auctions):
        """Sets the exclude_auctions of this MyFollowsSearchPostRequest.

        If true, exclude auctions

        :param exclude_auctions: The exclude_auctions of this MyFollowsSearchPostRequest.
        :type exclude_auctions: bool
        """

        self._exclude_auctions = exclude_auctions

    @property
    def finish(self):
        """Gets the finish of this MyFollowsSearchPostRequest.

        Visual finish of the item, common for guitars

        :return: The finish of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._finish

    @finish.setter
    def finish(self, finish):
        """Sets the finish of this MyFollowsSearchPostRequest.

        Visual finish of the item, common for guitars

        :param finish: The finish of this MyFollowsSearchPostRequest.
        :type finish: str
        """

        self._finish = finish

    @property
    def handmade(self):
        """Gets the handmade of this MyFollowsSearchPostRequest.

        Handmade items only

        :return: The handmade of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._handmade

    @handmade.setter
    def handmade(self, handmade):
        """Sets the handmade of this MyFollowsSearchPostRequest.

        Handmade items only

        :param handmade: The handmade of this MyFollowsSearchPostRequest.
        :type handmade: bool
        """

        self._handmade = handmade

    @property
    def item_city(self):
        """Gets the item_city of this MyFollowsSearchPostRequest.

        City where item is located

        :return: The item_city of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._item_city

    @item_city.setter
    def item_city(self, item_city):
        """Sets the item_city of this MyFollowsSearchPostRequest.

        City where item is located

        :param item_city: The item_city of this MyFollowsSearchPostRequest.
        :type item_city: str
        """

        self._item_city = item_city

    @property
    def item_country(self):
        """Gets the item_country of this MyFollowsSearchPostRequest.

        DEPRECATED - Country code where item is located

        :return: The item_country of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._item_country

    @item_country.setter
    def item_country(self, item_country):
        """Sets the item_country of this MyFollowsSearchPostRequest.

        DEPRECATED - Country code where item is located

        :param item_country: The item_country of this MyFollowsSearchPostRequest.
        :type item_country: str
        """

        self._item_country = item_country

    @property
    def item_region(self):
        """Gets the item_region of this MyFollowsSearchPostRequest.

        Country code where item is located

        :return: The item_region of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._item_region

    @item_region.setter
    def item_region(self, item_region):
        """Sets the item_region of this MyFollowsSearchPostRequest.

        Country code where item is located

        :param item_region: The item_region of this MyFollowsSearchPostRequest.
        :type item_region: str
        """

        self._item_region = item_region

    @property
    def item_state(self):
        """Gets the item_state of this MyFollowsSearchPostRequest.

        State or region code where item is located

        :return: The item_state of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._item_state

    @item_state.setter
    def item_state(self, item_state):
        """Sets the item_state of this MyFollowsSearchPostRequest.

        State or region code where item is located

        :param item_state: The item_state of this MyFollowsSearchPostRequest.
        :type item_state: str
        """

        self._item_state = item_state

    @property
    def listing_type(self):
        """Gets the listing_type of this MyFollowsSearchPostRequest.

        Type of listing: auctions,offers

        :return: The listing_type of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this MyFollowsSearchPostRequest.

        Type of listing: auctions,offers

        :param listing_type: The listing_type of this MyFollowsSearchPostRequest.
        :type listing_type: str
        """
        allowed_values = ["auctions", "offers"]  # noqa: E501
        if listing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `listing_type` ({0}), must be one of {1}"
                .format(listing_type, allowed_values)
            )

        self._listing_type = listing_type

    @property
    def local_pickup(self):
        """Gets the local_pickup of this MyFollowsSearchPostRequest.

        Only items that offer local pickup

        :return: The local_pickup of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._local_pickup

    @local_pickup.setter
    def local_pickup(self, local_pickup):
        """Sets the local_pickup of this MyFollowsSearchPostRequest.

        Only items that offer local pickup

        :param local_pickup: The local_pickup of this MyFollowsSearchPostRequest.
        :type local_pickup: bool
        """

        self._local_pickup = local_pickup

    @property
    def make(self):
        """Gets the make of this MyFollowsSearchPostRequest.

        Make(s)/brand of item (e.g. Fender). Can take a single value or an array.

        :return: The make of this MyFollowsSearchPostRequest.
        :rtype: List[str]
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this MyFollowsSearchPostRequest.

        Make(s)/brand of item (e.g. Fender). Can take a single value or an array.

        :param make: The make of this MyFollowsSearchPostRequest.
        :type make: List[str]
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this MyFollowsSearchPostRequest.

        Model of item (e.g. Stratocaster)

        :return: The model of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MyFollowsSearchPostRequest.

        Model of item (e.g. Stratocaster)

        :param model: The model of this MyFollowsSearchPostRequest.
        :type model: str
        """

        self._model = model

    @property
    def must_not(self):
        """Gets the must_not of this MyFollowsSearchPostRequest.

        Search term negation. If you want to exclude a term, add it here

        :return: The must_not of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._must_not

    @must_not.setter
    def must_not(self, must_not):
        """Sets the must_not of this MyFollowsSearchPostRequest.

        Search term negation. If you want to exclude a term, add it here

        :param must_not: The must_not of this MyFollowsSearchPostRequest.
        :type must_not: str
        """

        self._must_not = must_not

    @property
    def not_ids(self):
        """Gets the not_ids of this MyFollowsSearchPostRequest.

        Listing ID negation. If you want to exclude a listing, add it here.

        :return: The not_ids of this MyFollowsSearchPostRequest.
        :rtype: List[int]
        """
        return self._not_ids

    @not_ids.setter
    def not_ids(self, not_ids):
        """Sets the not_ids of this MyFollowsSearchPostRequest.

        Listing ID negation. If you want to exclude a listing, add it here.

        :param not_ids: The not_ids of this MyFollowsSearchPostRequest.
        :type not_ids: List[int]
        """

        self._not_ids = not_ids

    @property
    def preferred_seller(self):
        """Gets the preferred_seller of this MyFollowsSearchPostRequest.

        If true, include only items by Reverb Preferred Sellers

        :return: The preferred_seller of this MyFollowsSearchPostRequest.
        :rtype: bool
        """
        return self._preferred_seller

    @preferred_seller.setter
    def preferred_seller(self, preferred_seller):
        """Sets the preferred_seller of this MyFollowsSearchPostRequest.

        If true, include only items by Reverb Preferred Sellers

        :param preferred_seller: The preferred_seller of this MyFollowsSearchPostRequest.
        :type preferred_seller: bool
        """

        self._preferred_seller = preferred_seller

    @property
    def price_max(self):
        """Gets the price_max of this MyFollowsSearchPostRequest.

        Maximum price of search results (USD)

        :return: The price_max of this MyFollowsSearchPostRequest.
        :rtype: float
        """
        return self._price_max

    @price_max.setter
    def price_max(self, price_max):
        """Sets the price_max of this MyFollowsSearchPostRequest.

        Maximum price of search results (USD)

        :param price_max: The price_max of this MyFollowsSearchPostRequest.
        :type price_max: float
        """

        self._price_max = price_max

    @property
    def price_min(self):
        """Gets the price_min of this MyFollowsSearchPostRequest.

        Minimum price of search results (USD)

        :return: The price_min of this MyFollowsSearchPostRequest.
        :rtype: float
        """
        return self._price_min

    @price_min.setter
    def price_min(self, price_min):
        """Sets the price_min of this MyFollowsSearchPostRequest.

        Minimum price of search results (USD)

        :param price_min: The price_min of this MyFollowsSearchPostRequest.
        :type price_min: float
        """

        self._price_min = price_min

    @property
    def product_type(self):
        """Gets the product_type of this MyFollowsSearchPostRequest.

        Product type slug from /api/categories

        :return: The product_type of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this MyFollowsSearchPostRequest.

        Product type slug from /api/categories

        :param product_type: The product_type of this MyFollowsSearchPostRequest.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def query(self):
        """Gets the query of this MyFollowsSearchPostRequest.

        Search query.

        :return: The query of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this MyFollowsSearchPostRequest.

        Search query.

        :param query: The query of this MyFollowsSearchPostRequest.
        :type query: str
        """

        self._query = query

    @property
    def ships_to(self):
        """Gets the ships_to of this MyFollowsSearchPostRequest.

        Limit search to items that ship to this country code

        :return: The ships_to of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._ships_to

    @ships_to.setter
    def ships_to(self, ships_to):
        """Sets the ships_to of this MyFollowsSearchPostRequest.

        Limit search to items that ship to this country code

        :param ships_to: The ships_to of this MyFollowsSearchPostRequest.
        :type ships_to: str
        """

        self._ships_to = ships_to

    @property
    def shop(self):
        """Gets the shop of this MyFollowsSearchPostRequest.

        Slug of shop to search

        :return: The shop of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._shop

    @shop.setter
    def shop(self, shop):
        """Sets the shop of this MyFollowsSearchPostRequest.

        Slug of shop to search

        :param shop: The shop of this MyFollowsSearchPostRequest.
        :type shop: str
        """

        self._shop = shop

    @property
    def shop_id(self):
        """Gets the shop_id of this MyFollowsSearchPostRequest.

        ID of shop to search

        :return: The shop_id of this MyFollowsSearchPostRequest.
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this MyFollowsSearchPostRequest.

        ID of shop to search

        :param shop_id: The shop_id of this MyFollowsSearchPostRequest.
        :type shop_id: str
        """

        self._shop_id = shop_id

    @property
    def watchers_count_min(self):
        """Gets the watchers_count_min of this MyFollowsSearchPostRequest.

        Minimum number of watchers (used to find popular items)

        :return: The watchers_count_min of this MyFollowsSearchPostRequest.
        :rtype: int
        """
        return self._watchers_count_min

    @watchers_count_min.setter
    def watchers_count_min(self, watchers_count_min):
        """Sets the watchers_count_min of this MyFollowsSearchPostRequest.

        Minimum number of watchers (used to find popular items)

        :param watchers_count_min: The watchers_count_min of this MyFollowsSearchPostRequest.
        :type watchers_count_min: int
        """

        self._watchers_count_min = watchers_count_min

    @property
    def year_max(self):
        """Gets the year_max of this MyFollowsSearchPostRequest.

        Maximum year of manufacture

        :return: The year_max of this MyFollowsSearchPostRequest.
        :rtype: int
        """
        return self._year_max

    @year_max.setter
    def year_max(self, year_max):
        """Sets the year_max of this MyFollowsSearchPostRequest.

        Maximum year of manufacture

        :param year_max: The year_max of this MyFollowsSearchPostRequest.
        :type year_max: int
        """

        self._year_max = year_max

    @property
    def year_min(self):
        """Gets the year_min of this MyFollowsSearchPostRequest.

        Minumum year of manufacture

        :return: The year_min of this MyFollowsSearchPostRequest.
        :rtype: int
        """
        return self._year_min

    @year_min.setter
    def year_min(self, year_min):
        """Sets the year_min of this MyFollowsSearchPostRequest.

        Minumum year of manufacture

        :param year_min: The year_min of this MyFollowsSearchPostRequest.
        :type year_min: int
        """

        self._year_min = year_min
