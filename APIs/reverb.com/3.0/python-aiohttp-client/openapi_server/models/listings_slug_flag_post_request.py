# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListingsSlugFlagPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, reason: str=None):
        """ListingsSlugFlagPostRequest - a model defined in OpenAPI

        :param description: The description of this ListingsSlugFlagPostRequest.
        :param reason: The reason of this ListingsSlugFlagPostRequest.
        """
        self.openapi_types = {
            'description': str,
            'reason': str
        }

        self.attribute_map = {
            'description': 'description',
            'reason': 'reason'
        }

        self._description = description
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListingsSlugFlagPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _listings__slug__flag_post_request of this ListingsSlugFlagPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ListingsSlugFlagPostRequest.

        User input description specifying what is flag-worthy about this listing

        :return: The description of this ListingsSlugFlagPostRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListingsSlugFlagPostRequest.

        User input description specifying what is flag-worthy about this listing

        :param description: The description of this ListingsSlugFlagPostRequest.
        :type description: str
        """

        self._description = description

    @property
    def reason(self):
        """Gets the reason of this ListingsSlugFlagPostRequest.

        Valid reasons: 'Sexuality/nudity', 'Hateful or inappropriate speech', 'Item not as described or potential fraud', 'Trademark infringement', 'Other'

        :return: The reason of this ListingsSlugFlagPostRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ListingsSlugFlagPostRequest.

        Valid reasons: 'Sexuality/nudity', 'Hateful or inappropriate speech', 'Item not as described or potential fraud', 'Trademark infringement', 'Other'

        :param reason: The reason of this ListingsSlugFlagPostRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
