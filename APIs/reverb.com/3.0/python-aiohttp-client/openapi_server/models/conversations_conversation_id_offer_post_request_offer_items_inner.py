# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConversationsConversationIdOfferPostRequestOfferItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, listing_id: str=None, price: str=None, shipping_price: str=None):
        """ConversationsConversationIdOfferPostRequestOfferItemsInner - a model defined in OpenAPI

        :param listing_id: The listing_id of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :param price: The price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :param shipping_price: The shipping_price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        """
        self.openapi_types = {
            'listing_id': str,
            'price': str,
            'shipping_price': str
        }

        self.attribute_map = {
            'listing_id': 'listing_id',
            'price': 'price',
            'shipping_price': 'shipping_price'
        }

        self._listing_id = listing_id
        self._price = price
        self._shipping_price = shipping_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsConversationIdOfferPostRequestOfferItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _conversations__conversation_id__offer_post_request_offer_items_inner of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def listing_id(self):
        """Gets the listing_id of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :return: The listing_id of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :param listing_id: The listing_id of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :type listing_id: str
        """
        if listing_id is None:
            raise ValueError("Invalid value for `listing_id`, must not be `None`")

        self._listing_id = listing_id

    @property
    def price(self):
        """Gets the price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :return: The price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :param price: The price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :type price: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def shipping_price(self):
        """Gets the shipping_price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :return: The shipping_price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :rtype: str
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.


        :param shipping_price: The shipping_price of this ConversationsConversationIdOfferPostRequestOfferItemsInner.
        :type shipping_price: str
        """
        if shipping_price is None:
            raise ValueError("Invalid value for `shipping_price`, must not be `None`")

        self._shipping_price = shipping_price
