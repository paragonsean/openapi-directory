# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConversationsIdOfferPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, price: str=None, shipping_price: str=None):
        """ConversationsIdOfferPostRequest - a model defined in OpenAPI

        :param message: The message of this ConversationsIdOfferPostRequest.
        :param price: The price of this ConversationsIdOfferPostRequest.
        :param shipping_price: The shipping_price of this ConversationsIdOfferPostRequest.
        """
        self.openapi_types = {
            'message': str,
            'price': str,
            'shipping_price': str
        }

        self.attribute_map = {
            'message': 'message',
            'price': 'price',
            'shipping_price': 'shipping_price'
        }

        self._message = message
        self._price = price
        self._shipping_price = shipping_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationsIdOfferPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _conversations__id__offer_post_request of this ConversationsIdOfferPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ConversationsIdOfferPostRequest.

        Message to include with counter offer

        :return: The message of this ConversationsIdOfferPostRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConversationsIdOfferPostRequest.

        Message to include with counter offer

        :param message: The message of this ConversationsIdOfferPostRequest.
        :type message: str
        """

        self._message = message

    @property
    def price(self):
        """Gets the price of this ConversationsIdOfferPostRequest.

        Offer price

        :return: The price of this ConversationsIdOfferPostRequest.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ConversationsIdOfferPostRequest.

        Offer price

        :param price: The price of this ConversationsIdOfferPostRequest.
        :type price: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def shipping_price(self):
        """Gets the shipping_price of this ConversationsIdOfferPostRequest.

        Shipping price (sellers only)

        :return: The shipping_price of this ConversationsIdOfferPostRequest.
        :rtype: str
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this ConversationsIdOfferPostRequest.

        Shipping price (sellers only)

        :param shipping_price: The shipping_price of this ConversationsIdOfferPostRequest.
        :type shipping_price: str
        """

        self._shipping_price = shipping_price
