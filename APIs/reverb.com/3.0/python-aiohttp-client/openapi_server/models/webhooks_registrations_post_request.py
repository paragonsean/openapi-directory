# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebhooksRegistrationsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic: str=None, url: str=None):
        """WebhooksRegistrationsPostRequest - a model defined in OpenAPI

        :param topic: The topic of this WebhooksRegistrationsPostRequest.
        :param url: The url of this WebhooksRegistrationsPostRequest.
        """
        self.openapi_types = {
            'topic': str,
            'url': str
        }

        self.attribute_map = {
            'topic': 'topic',
            'url': 'url'
        }

        self._topic = topic
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhooksRegistrationsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _webhooks_registrations_post_request of this WebhooksRegistrationsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self):
        """Gets the topic of this WebhooksRegistrationsPostRequest.

        Valid values: listings/update, listings/publish, listings/bumps-ran-out, orders/create, orders/update, payments/create, payments/update, app/uninstalled

        :return: The topic of this WebhooksRegistrationsPostRequest.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WebhooksRegistrationsPostRequest.

        Valid values: listings/update, listings/publish, listings/bumps-ran-out, orders/create, orders/update, payments/create, payments/update, app/uninstalled

        :param topic: The topic of this WebhooksRegistrationsPostRequest.
        :type topic: str
        """
        allowed_values = ["listings/update", "listings/publish", "listings/bumps-ran-out", "orders/create", "orders/update", "payments/create", "payments/update", "app/uninstalled"]  # noqa: E501
        if topic not in allowed_values:
            raise ValueError(
                "Invalid value for `topic` ({0}), must be one of {1}"
                .format(topic, allowed_values)
            )

        self._topic = topic

    @property
    def url(self):
        """Gets the url of this WebhooksRegistrationsPostRequest.


        :return: The url of this WebhooksRegistrationsPostRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhooksRegistrationsPostRequest.


        :param url: The url of this WebhooksRegistrationsPostRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
