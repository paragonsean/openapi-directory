# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MyConversationsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, cloudinary_photos: List[str]=None, listing_id: int=None, recipient_id: int=None, recipient_uuid: str=None, shop_id: str=None):
        """MyConversationsPostRequest - a model defined in OpenAPI

        :param body: The body of this MyConversationsPostRequest.
        :param cloudinary_photos: The cloudinary_photos of this MyConversationsPostRequest.
        :param listing_id: The listing_id of this MyConversationsPostRequest.
        :param recipient_id: The recipient_id of this MyConversationsPostRequest.
        :param recipient_uuid: The recipient_uuid of this MyConversationsPostRequest.
        :param shop_id: The shop_id of this MyConversationsPostRequest.
        """
        self.openapi_types = {
            'body': str,
            'cloudinary_photos': List[str],
            'listing_id': int,
            'recipient_id': int,
            'recipient_uuid': str,
            'shop_id': str
        }

        self.attribute_map = {
            'body': 'body',
            'cloudinary_photos': 'cloudinary_photos',
            'listing_id': 'listing_id',
            'recipient_id': 'recipient_id',
            'recipient_uuid': 'recipient_uuid',
            'shop_id': 'shop_id'
        }

        self._body = body
        self._cloudinary_photos = cloudinary_photos
        self._listing_id = listing_id
        self._recipient_id = recipient_id
        self._recipient_uuid = recipient_uuid
        self._shop_id = shop_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MyConversationsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _my_conversations_post_request of this MyConversationsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this MyConversationsPostRequest.

        The body of the message

        :return: The body of this MyConversationsPostRequest.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MyConversationsPostRequest.

        The body of the message

        :param body: The body of this MyConversationsPostRequest.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def cloudinary_photos(self):
        """Gets the cloudinary_photos of this MyConversationsPostRequest.

        An array of cloudinary data hashes (Reverb internal use only).

        :return: The cloudinary_photos of this MyConversationsPostRequest.
        :rtype: List[str]
        """
        return self._cloudinary_photos

    @cloudinary_photos.setter
    def cloudinary_photos(self, cloudinary_photos):
        """Sets the cloudinary_photos of this MyConversationsPostRequest.

        An array of cloudinary data hashes (Reverb internal use only).

        :param cloudinary_photos: The cloudinary_photos of this MyConversationsPostRequest.
        :type cloudinary_photos: List[str]
        """

        self._cloudinary_photos = cloudinary_photos

    @property
    def listing_id(self):
        """Gets the listing_id of this MyConversationsPostRequest.

        The id of the listing being discussed

        :return: The listing_id of this MyConversationsPostRequest.
        :rtype: int
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this MyConversationsPostRequest.

        The id of the listing being discussed

        :param listing_id: The listing_id of this MyConversationsPostRequest.
        :type listing_id: int
        """

        self._listing_id = listing_id

    @property
    def recipient_id(self):
        """Gets the recipient_id of this MyConversationsPostRequest.

        The id of the user you are trying to contact

        :return: The recipient_id of this MyConversationsPostRequest.
        :rtype: int
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this MyConversationsPostRequest.

        The id of the user you are trying to contact

        :param recipient_id: The recipient_id of this MyConversationsPostRequest.
        :type recipient_id: int
        """

        self._recipient_id = recipient_id

    @property
    def recipient_uuid(self):
        """Gets the recipient_uuid of this MyConversationsPostRequest.

        The uuid of the user you are trying to contact

        :return: The recipient_uuid of this MyConversationsPostRequest.
        :rtype: str
        """
        return self._recipient_uuid

    @recipient_uuid.setter
    def recipient_uuid(self, recipient_uuid):
        """Sets the recipient_uuid of this MyConversationsPostRequest.

        The uuid of the user you are trying to contact

        :param recipient_uuid: The recipient_uuid of this MyConversationsPostRequest.
        :type recipient_uuid: str
        """

        self._recipient_uuid = recipient_uuid

    @property
    def shop_id(self):
        """Gets the shop_id of this MyConversationsPostRequest.

        The id of the shop you are trying to contact

        :return: The shop_id of this MyConversationsPostRequest.
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this MyConversationsPostRequest.

        The id of the shop you are trying to contact

        :param shop_id: The shop_id of this MyConversationsPostRequest.
        :type shop_id: str
        """

        self._shop_id = shop_id
