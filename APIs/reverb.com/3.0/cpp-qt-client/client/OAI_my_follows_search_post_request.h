/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_my_follows_search_post_request.h
 *
 * 
 */

#ifndef OAI_my_follows_search_post_request_H
#define OAI_my_follows_search_post_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_my_follows_search_post_request : public OAIObject {
public:
    OAI_my_follows_search_post_request();
    OAI_my_follows_search_post_request(QString json);
    ~OAI_my_follows_search_post_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAcceptsGiftCards() const;
    void setAcceptsGiftCards(const bool &accepts_gift_cards);
    bool is_accepts_gift_cards_Set() const;
    bool is_accepts_gift_cards_Valid() const;

    bool isAcceptsPaymentPlans() const;
    void setAcceptsPaymentPlans(const bool &accepts_payment_plans);
    bool is_accepts_payment_plans_Set() const;
    bool is_accepts_payment_plans_Valid() const;

    float getAuctionPriceMax() const;
    void setAuctionPriceMax(const float &auction_price_max);
    bool is_auction_price_max_Set() const;
    bool is_auction_price_max_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    QList<QString> getConditions() const;
    void setConditions(const QList<QString> &conditions);
    bool is_conditions_Set() const;
    bool is_conditions_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getDecade() const;
    void setDecade(const QString &decade);
    bool is_decade_Set() const;
    bool is_decade_Valid() const;

    bool isExcludeAuctions() const;
    void setExcludeAuctions(const bool &exclude_auctions);
    bool is_exclude_auctions_Set() const;
    bool is_exclude_auctions_Valid() const;

    QString getFinish() const;
    void setFinish(const QString &finish);
    bool is_finish_Set() const;
    bool is_finish_Valid() const;

    bool isHandmade() const;
    void setHandmade(const bool &handmade);
    bool is_handmade_Set() const;
    bool is_handmade_Valid() const;

    QString getItemCity() const;
    void setItemCity(const QString &item_city);
    bool is_item_city_Set() const;
    bool is_item_city_Valid() const;

    QString getItemCountry() const;
    void setItemCountry(const QString &item_country);
    bool is_item_country_Set() const;
    bool is_item_country_Valid() const;

    QString getItemRegion() const;
    void setItemRegion(const QString &item_region);
    bool is_item_region_Set() const;
    bool is_item_region_Valid() const;

    QString getItemState() const;
    void setItemState(const QString &item_state);
    bool is_item_state_Set() const;
    bool is_item_state_Valid() const;

    QString getListingType() const;
    void setListingType(const QString &listing_type);
    bool is_listing_type_Set() const;
    bool is_listing_type_Valid() const;

    bool isLocalPickup() const;
    void setLocalPickup(const bool &local_pickup);
    bool is_local_pickup_Set() const;
    bool is_local_pickup_Valid() const;

    QList<QString> getMake() const;
    void setMake(const QList<QString> &make);
    bool is_make_Set() const;
    bool is_make_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getMustNot() const;
    void setMustNot(const QString &must_not);
    bool is_must_not_Set() const;
    bool is_must_not_Valid() const;

    QList<qint32> getNotIds() const;
    void setNotIds(const QList<qint32> &not_ids);
    bool is_not_ids_Set() const;
    bool is_not_ids_Valid() const;

    bool isPreferredSeller() const;
    void setPreferredSeller(const bool &preferred_seller);
    bool is_preferred_seller_Set() const;
    bool is_preferred_seller_Valid() const;

    float getPriceMax() const;
    void setPriceMax(const float &price_max);
    bool is_price_max_Set() const;
    bool is_price_max_Valid() const;

    float getPriceMin() const;
    void setPriceMin(const float &price_min);
    bool is_price_min_Set() const;
    bool is_price_min_Valid() const;

    QString getProductType() const;
    void setProductType(const QString &product_type);
    bool is_product_type_Set() const;
    bool is_product_type_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    QString getShipsTo() const;
    void setShipsTo(const QString &ships_to);
    bool is_ships_to_Set() const;
    bool is_ships_to_Valid() const;

    QString getShop() const;
    void setShop(const QString &shop);
    bool is_shop_Set() const;
    bool is_shop_Valid() const;

    QString getShopId() const;
    void setShopId(const QString &shop_id);
    bool is_shop_id_Set() const;
    bool is_shop_id_Valid() const;

    qint32 getWatchersCountMin() const;
    void setWatchersCountMin(const qint32 &watchers_count_min);
    bool is_watchers_count_min_Set() const;
    bool is_watchers_count_min_Valid() const;

    qint32 getYearMax() const;
    void setYearMax(const qint32 &year_max);
    bool is_year_max_Set() const;
    bool is_year_max_Valid() const;

    qint32 getYearMin() const;
    void setYearMin(const qint32 &year_min);
    bool is_year_min_Set() const;
    bool is_year_min_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accepts_gift_cards;
    bool m_accepts_gift_cards_isSet;
    bool m_accepts_gift_cards_isValid;

    bool m_accepts_payment_plans;
    bool m_accepts_payment_plans_isSet;
    bool m_accepts_payment_plans_isValid;

    float m_auction_price_max;
    bool m_auction_price_max_isSet;
    bool m_auction_price_max_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    QList<QString> m_conditions;
    bool m_conditions_isSet;
    bool m_conditions_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_decade;
    bool m_decade_isSet;
    bool m_decade_isValid;

    bool m_exclude_auctions;
    bool m_exclude_auctions_isSet;
    bool m_exclude_auctions_isValid;

    QString m_finish;
    bool m_finish_isSet;
    bool m_finish_isValid;

    bool m_handmade;
    bool m_handmade_isSet;
    bool m_handmade_isValid;

    QString m_item_city;
    bool m_item_city_isSet;
    bool m_item_city_isValid;

    QString m_item_country;
    bool m_item_country_isSet;
    bool m_item_country_isValid;

    QString m_item_region;
    bool m_item_region_isSet;
    bool m_item_region_isValid;

    QString m_item_state;
    bool m_item_state_isSet;
    bool m_item_state_isValid;

    QString m_listing_type;
    bool m_listing_type_isSet;
    bool m_listing_type_isValid;

    bool m_local_pickup;
    bool m_local_pickup_isSet;
    bool m_local_pickup_isValid;

    QList<QString> m_make;
    bool m_make_isSet;
    bool m_make_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_must_not;
    bool m_must_not_isSet;
    bool m_must_not_isValid;

    QList<qint32> m_not_ids;
    bool m_not_ids_isSet;
    bool m_not_ids_isValid;

    bool m_preferred_seller;
    bool m_preferred_seller_isSet;
    bool m_preferred_seller_isValid;

    float m_price_max;
    bool m_price_max_isSet;
    bool m_price_max_isValid;

    float m_price_min;
    bool m_price_min_isSet;
    bool m_price_min_isValid;

    QString m_product_type;
    bool m_product_type_isSet;
    bool m_product_type_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    QString m_ships_to;
    bool m_ships_to_isSet;
    bool m_ships_to_isValid;

    QString m_shop;
    bool m_shop_isSet;
    bool m_shop_isValid;

    QString m_shop_id;
    bool m_shop_id_isSet;
    bool m_shop_id_isValid;

    qint32 m_watchers_count_min;
    bool m_watchers_count_min_isSet;
    bool m_watchers_count_min_isValid;

    qint32 m_year_max;
    bool m_year_max_isSet;
    bool m_year_max_isValid;

    qint32 m_year_min;
    bool m_year_min_isSet;
    bool m_year_min_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_my_follows_search_post_request)

#endif // OAI_my_follows_search_post_request_H
