/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_my_follows_search_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_my_follows_search_post_request::OAI_my_follows_search_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_my_follows_search_post_request::OAI_my_follows_search_post_request() {
    this->initializeModel();
}

OAI_my_follows_search_post_request::~OAI_my_follows_search_post_request() {}

void OAI_my_follows_search_post_request::initializeModel() {

    m_accepts_gift_cards_isSet = false;
    m_accepts_gift_cards_isValid = false;

    m_accepts_payment_plans_isSet = false;
    m_accepts_payment_plans_isValid = false;

    m_auction_price_max_isSet = false;
    m_auction_price_max_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_decade_isSet = false;
    m_decade_isValid = false;

    m_exclude_auctions_isSet = false;
    m_exclude_auctions_isValid = false;

    m_finish_isSet = false;
    m_finish_isValid = false;

    m_handmade_isSet = false;
    m_handmade_isValid = false;

    m_item_city_isSet = false;
    m_item_city_isValid = false;

    m_item_country_isSet = false;
    m_item_country_isValid = false;

    m_item_region_isSet = false;
    m_item_region_isValid = false;

    m_item_state_isSet = false;
    m_item_state_isValid = false;

    m_listing_type_isSet = false;
    m_listing_type_isValid = false;

    m_local_pickup_isSet = false;
    m_local_pickup_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_must_not_isSet = false;
    m_must_not_isValid = false;

    m_not_ids_isSet = false;
    m_not_ids_isValid = false;

    m_preferred_seller_isSet = false;
    m_preferred_seller_isValid = false;

    m_price_max_isSet = false;
    m_price_max_isValid = false;

    m_price_min_isSet = false;
    m_price_min_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_ships_to_isSet = false;
    m_ships_to_isValid = false;

    m_shop_isSet = false;
    m_shop_isValid = false;

    m_shop_id_isSet = false;
    m_shop_id_isValid = false;

    m_watchers_count_min_isSet = false;
    m_watchers_count_min_isValid = false;

    m_year_max_isSet = false;
    m_year_max_isValid = false;

    m_year_min_isSet = false;
    m_year_min_isValid = false;
}

void OAI_my_follows_search_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_my_follows_search_post_request::fromJsonObject(QJsonObject json) {

    m_accepts_gift_cards_isValid = ::OpenAPI::fromJsonValue(m_accepts_gift_cards, json[QString("accepts_gift_cards")]);
    m_accepts_gift_cards_isSet = !json[QString("accepts_gift_cards")].isNull() && m_accepts_gift_cards_isValid;

    m_accepts_payment_plans_isValid = ::OpenAPI::fromJsonValue(m_accepts_payment_plans, json[QString("accepts_payment_plans")]);
    m_accepts_payment_plans_isSet = !json[QString("accepts_payment_plans")].isNull() && m_accepts_payment_plans_isValid;

    m_auction_price_max_isValid = ::OpenAPI::fromJsonValue(m_auction_price_max, json[QString("auction_price_max")]);
    m_auction_price_max_isSet = !json[QString("auction_price_max")].isNull() && m_auction_price_max_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_decade_isValid = ::OpenAPI::fromJsonValue(m_decade, json[QString("decade")]);
    m_decade_isSet = !json[QString("decade")].isNull() && m_decade_isValid;

    m_exclude_auctions_isValid = ::OpenAPI::fromJsonValue(m_exclude_auctions, json[QString("exclude_auctions")]);
    m_exclude_auctions_isSet = !json[QString("exclude_auctions")].isNull() && m_exclude_auctions_isValid;

    m_finish_isValid = ::OpenAPI::fromJsonValue(m_finish, json[QString("finish")]);
    m_finish_isSet = !json[QString("finish")].isNull() && m_finish_isValid;

    m_handmade_isValid = ::OpenAPI::fromJsonValue(m_handmade, json[QString("handmade")]);
    m_handmade_isSet = !json[QString("handmade")].isNull() && m_handmade_isValid;

    m_item_city_isValid = ::OpenAPI::fromJsonValue(m_item_city, json[QString("item_city")]);
    m_item_city_isSet = !json[QString("item_city")].isNull() && m_item_city_isValid;

    m_item_country_isValid = ::OpenAPI::fromJsonValue(m_item_country, json[QString("item_country")]);
    m_item_country_isSet = !json[QString("item_country")].isNull() && m_item_country_isValid;

    m_item_region_isValid = ::OpenAPI::fromJsonValue(m_item_region, json[QString("item_region")]);
    m_item_region_isSet = !json[QString("item_region")].isNull() && m_item_region_isValid;

    m_item_state_isValid = ::OpenAPI::fromJsonValue(m_item_state, json[QString("item_state")]);
    m_item_state_isSet = !json[QString("item_state")].isNull() && m_item_state_isValid;

    m_listing_type_isValid = ::OpenAPI::fromJsonValue(m_listing_type, json[QString("listing_type")]);
    m_listing_type_isSet = !json[QString("listing_type")].isNull() && m_listing_type_isValid;

    m_local_pickup_isValid = ::OpenAPI::fromJsonValue(m_local_pickup, json[QString("local_pickup")]);
    m_local_pickup_isSet = !json[QString("local_pickup")].isNull() && m_local_pickup_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_must_not_isValid = ::OpenAPI::fromJsonValue(m_must_not, json[QString("must_not")]);
    m_must_not_isSet = !json[QString("must_not")].isNull() && m_must_not_isValid;

    m_not_ids_isValid = ::OpenAPI::fromJsonValue(m_not_ids, json[QString("not_ids")]);
    m_not_ids_isSet = !json[QString("not_ids")].isNull() && m_not_ids_isValid;

    m_preferred_seller_isValid = ::OpenAPI::fromJsonValue(m_preferred_seller, json[QString("preferred_seller")]);
    m_preferred_seller_isSet = !json[QString("preferred_seller")].isNull() && m_preferred_seller_isValid;

    m_price_max_isValid = ::OpenAPI::fromJsonValue(m_price_max, json[QString("price_max")]);
    m_price_max_isSet = !json[QString("price_max")].isNull() && m_price_max_isValid;

    m_price_min_isValid = ::OpenAPI::fromJsonValue(m_price_min, json[QString("price_min")]);
    m_price_min_isSet = !json[QString("price_min")].isNull() && m_price_min_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_ships_to_isValid = ::OpenAPI::fromJsonValue(m_ships_to, json[QString("ships_to")]);
    m_ships_to_isSet = !json[QString("ships_to")].isNull() && m_ships_to_isValid;

    m_shop_isValid = ::OpenAPI::fromJsonValue(m_shop, json[QString("shop")]);
    m_shop_isSet = !json[QString("shop")].isNull() && m_shop_isValid;

    m_shop_id_isValid = ::OpenAPI::fromJsonValue(m_shop_id, json[QString("shop_id")]);
    m_shop_id_isSet = !json[QString("shop_id")].isNull() && m_shop_id_isValid;

    m_watchers_count_min_isValid = ::OpenAPI::fromJsonValue(m_watchers_count_min, json[QString("watchers_count_min")]);
    m_watchers_count_min_isSet = !json[QString("watchers_count_min")].isNull() && m_watchers_count_min_isValid;

    m_year_max_isValid = ::OpenAPI::fromJsonValue(m_year_max, json[QString("year_max")]);
    m_year_max_isSet = !json[QString("year_max")].isNull() && m_year_max_isValid;

    m_year_min_isValid = ::OpenAPI::fromJsonValue(m_year_min, json[QString("year_min")]);
    m_year_min_isSet = !json[QString("year_min")].isNull() && m_year_min_isValid;
}

QString OAI_my_follows_search_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_my_follows_search_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_accepts_gift_cards_isSet) {
        obj.insert(QString("accepts_gift_cards"), ::OpenAPI::toJsonValue(m_accepts_gift_cards));
    }
    if (m_accepts_payment_plans_isSet) {
        obj.insert(QString("accepts_payment_plans"), ::OpenAPI::toJsonValue(m_accepts_payment_plans));
    }
    if (m_auction_price_max_isSet) {
        obj.insert(QString("auction_price_max"), ::OpenAPI::toJsonValue(m_auction_price_max));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_decade_isSet) {
        obj.insert(QString("decade"), ::OpenAPI::toJsonValue(m_decade));
    }
    if (m_exclude_auctions_isSet) {
        obj.insert(QString("exclude_auctions"), ::OpenAPI::toJsonValue(m_exclude_auctions));
    }
    if (m_finish_isSet) {
        obj.insert(QString("finish"), ::OpenAPI::toJsonValue(m_finish));
    }
    if (m_handmade_isSet) {
        obj.insert(QString("handmade"), ::OpenAPI::toJsonValue(m_handmade));
    }
    if (m_item_city_isSet) {
        obj.insert(QString("item_city"), ::OpenAPI::toJsonValue(m_item_city));
    }
    if (m_item_country_isSet) {
        obj.insert(QString("item_country"), ::OpenAPI::toJsonValue(m_item_country));
    }
    if (m_item_region_isSet) {
        obj.insert(QString("item_region"), ::OpenAPI::toJsonValue(m_item_region));
    }
    if (m_item_state_isSet) {
        obj.insert(QString("item_state"), ::OpenAPI::toJsonValue(m_item_state));
    }
    if (m_listing_type_isSet) {
        obj.insert(QString("listing_type"), ::OpenAPI::toJsonValue(m_listing_type));
    }
    if (m_local_pickup_isSet) {
        obj.insert(QString("local_pickup"), ::OpenAPI::toJsonValue(m_local_pickup));
    }
    if (m_make.size() > 0) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_must_not_isSet) {
        obj.insert(QString("must_not"), ::OpenAPI::toJsonValue(m_must_not));
    }
    if (m_not_ids.size() > 0) {
        obj.insert(QString("not_ids"), ::OpenAPI::toJsonValue(m_not_ids));
    }
    if (m_preferred_seller_isSet) {
        obj.insert(QString("preferred_seller"), ::OpenAPI::toJsonValue(m_preferred_seller));
    }
    if (m_price_max_isSet) {
        obj.insert(QString("price_max"), ::OpenAPI::toJsonValue(m_price_max));
    }
    if (m_price_min_isSet) {
        obj.insert(QString("price_min"), ::OpenAPI::toJsonValue(m_price_min));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_ships_to_isSet) {
        obj.insert(QString("ships_to"), ::OpenAPI::toJsonValue(m_ships_to));
    }
    if (m_shop_isSet) {
        obj.insert(QString("shop"), ::OpenAPI::toJsonValue(m_shop));
    }
    if (m_shop_id_isSet) {
        obj.insert(QString("shop_id"), ::OpenAPI::toJsonValue(m_shop_id));
    }
    if (m_watchers_count_min_isSet) {
        obj.insert(QString("watchers_count_min"), ::OpenAPI::toJsonValue(m_watchers_count_min));
    }
    if (m_year_max_isSet) {
        obj.insert(QString("year_max"), ::OpenAPI::toJsonValue(m_year_max));
    }
    if (m_year_min_isSet) {
        obj.insert(QString("year_min"), ::OpenAPI::toJsonValue(m_year_min));
    }
    return obj;
}

bool OAI_my_follows_search_post_request::isAcceptsGiftCards() const {
    return m_accepts_gift_cards;
}
void OAI_my_follows_search_post_request::setAcceptsGiftCards(const bool &accepts_gift_cards) {
    m_accepts_gift_cards = accepts_gift_cards;
    m_accepts_gift_cards_isSet = true;
}

bool OAI_my_follows_search_post_request::is_accepts_gift_cards_Set() const{
    return m_accepts_gift_cards_isSet;
}

bool OAI_my_follows_search_post_request::is_accepts_gift_cards_Valid() const{
    return m_accepts_gift_cards_isValid;
}

bool OAI_my_follows_search_post_request::isAcceptsPaymentPlans() const {
    return m_accepts_payment_plans;
}
void OAI_my_follows_search_post_request::setAcceptsPaymentPlans(const bool &accepts_payment_plans) {
    m_accepts_payment_plans = accepts_payment_plans;
    m_accepts_payment_plans_isSet = true;
}

bool OAI_my_follows_search_post_request::is_accepts_payment_plans_Set() const{
    return m_accepts_payment_plans_isSet;
}

bool OAI_my_follows_search_post_request::is_accepts_payment_plans_Valid() const{
    return m_accepts_payment_plans_isValid;
}

float OAI_my_follows_search_post_request::getAuctionPriceMax() const {
    return m_auction_price_max;
}
void OAI_my_follows_search_post_request::setAuctionPriceMax(const float &auction_price_max) {
    m_auction_price_max = auction_price_max;
    m_auction_price_max_isSet = true;
}

bool OAI_my_follows_search_post_request::is_auction_price_max_Set() const{
    return m_auction_price_max_isSet;
}

bool OAI_my_follows_search_post_request::is_auction_price_max_Valid() const{
    return m_auction_price_max_isValid;
}

QString OAI_my_follows_search_post_request::getCategory() const {
    return m_category;
}
void OAI_my_follows_search_post_request::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAI_my_follows_search_post_request::is_category_Set() const{
    return m_category_isSet;
}

bool OAI_my_follows_search_post_request::is_category_Valid() const{
    return m_category_isValid;
}

QList<QString> OAI_my_follows_search_post_request::getConditions() const {
    return m_conditions;
}
void OAI_my_follows_search_post_request::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAI_my_follows_search_post_request::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAI_my_follows_search_post_request::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAI_my_follows_search_post_request::getCurrency() const {
    return m_currency;
}
void OAI_my_follows_search_post_request::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAI_my_follows_search_post_request::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAI_my_follows_search_post_request::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAI_my_follows_search_post_request::getDecade() const {
    return m_decade;
}
void OAI_my_follows_search_post_request::setDecade(const QString &decade) {
    m_decade = decade;
    m_decade_isSet = true;
}

bool OAI_my_follows_search_post_request::is_decade_Set() const{
    return m_decade_isSet;
}

bool OAI_my_follows_search_post_request::is_decade_Valid() const{
    return m_decade_isValid;
}

bool OAI_my_follows_search_post_request::isExcludeAuctions() const {
    return m_exclude_auctions;
}
void OAI_my_follows_search_post_request::setExcludeAuctions(const bool &exclude_auctions) {
    m_exclude_auctions = exclude_auctions;
    m_exclude_auctions_isSet = true;
}

bool OAI_my_follows_search_post_request::is_exclude_auctions_Set() const{
    return m_exclude_auctions_isSet;
}

bool OAI_my_follows_search_post_request::is_exclude_auctions_Valid() const{
    return m_exclude_auctions_isValid;
}

QString OAI_my_follows_search_post_request::getFinish() const {
    return m_finish;
}
void OAI_my_follows_search_post_request::setFinish(const QString &finish) {
    m_finish = finish;
    m_finish_isSet = true;
}

bool OAI_my_follows_search_post_request::is_finish_Set() const{
    return m_finish_isSet;
}

bool OAI_my_follows_search_post_request::is_finish_Valid() const{
    return m_finish_isValid;
}

bool OAI_my_follows_search_post_request::isHandmade() const {
    return m_handmade;
}
void OAI_my_follows_search_post_request::setHandmade(const bool &handmade) {
    m_handmade = handmade;
    m_handmade_isSet = true;
}

bool OAI_my_follows_search_post_request::is_handmade_Set() const{
    return m_handmade_isSet;
}

bool OAI_my_follows_search_post_request::is_handmade_Valid() const{
    return m_handmade_isValid;
}

QString OAI_my_follows_search_post_request::getItemCity() const {
    return m_item_city;
}
void OAI_my_follows_search_post_request::setItemCity(const QString &item_city) {
    m_item_city = item_city;
    m_item_city_isSet = true;
}

bool OAI_my_follows_search_post_request::is_item_city_Set() const{
    return m_item_city_isSet;
}

bool OAI_my_follows_search_post_request::is_item_city_Valid() const{
    return m_item_city_isValid;
}

QString OAI_my_follows_search_post_request::getItemCountry() const {
    return m_item_country;
}
void OAI_my_follows_search_post_request::setItemCountry(const QString &item_country) {
    m_item_country = item_country;
    m_item_country_isSet = true;
}

bool OAI_my_follows_search_post_request::is_item_country_Set() const{
    return m_item_country_isSet;
}

bool OAI_my_follows_search_post_request::is_item_country_Valid() const{
    return m_item_country_isValid;
}

QString OAI_my_follows_search_post_request::getItemRegion() const {
    return m_item_region;
}
void OAI_my_follows_search_post_request::setItemRegion(const QString &item_region) {
    m_item_region = item_region;
    m_item_region_isSet = true;
}

bool OAI_my_follows_search_post_request::is_item_region_Set() const{
    return m_item_region_isSet;
}

bool OAI_my_follows_search_post_request::is_item_region_Valid() const{
    return m_item_region_isValid;
}

QString OAI_my_follows_search_post_request::getItemState() const {
    return m_item_state;
}
void OAI_my_follows_search_post_request::setItemState(const QString &item_state) {
    m_item_state = item_state;
    m_item_state_isSet = true;
}

bool OAI_my_follows_search_post_request::is_item_state_Set() const{
    return m_item_state_isSet;
}

bool OAI_my_follows_search_post_request::is_item_state_Valid() const{
    return m_item_state_isValid;
}

QString OAI_my_follows_search_post_request::getListingType() const {
    return m_listing_type;
}
void OAI_my_follows_search_post_request::setListingType(const QString &listing_type) {
    m_listing_type = listing_type;
    m_listing_type_isSet = true;
}

bool OAI_my_follows_search_post_request::is_listing_type_Set() const{
    return m_listing_type_isSet;
}

bool OAI_my_follows_search_post_request::is_listing_type_Valid() const{
    return m_listing_type_isValid;
}

bool OAI_my_follows_search_post_request::isLocalPickup() const {
    return m_local_pickup;
}
void OAI_my_follows_search_post_request::setLocalPickup(const bool &local_pickup) {
    m_local_pickup = local_pickup;
    m_local_pickup_isSet = true;
}

bool OAI_my_follows_search_post_request::is_local_pickup_Set() const{
    return m_local_pickup_isSet;
}

bool OAI_my_follows_search_post_request::is_local_pickup_Valid() const{
    return m_local_pickup_isValid;
}

QList<QString> OAI_my_follows_search_post_request::getMake() const {
    return m_make;
}
void OAI_my_follows_search_post_request::setMake(const QList<QString> &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAI_my_follows_search_post_request::is_make_Set() const{
    return m_make_isSet;
}

bool OAI_my_follows_search_post_request::is_make_Valid() const{
    return m_make_isValid;
}

QString OAI_my_follows_search_post_request::getModel() const {
    return m_model;
}
void OAI_my_follows_search_post_request::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAI_my_follows_search_post_request::is_model_Set() const{
    return m_model_isSet;
}

bool OAI_my_follows_search_post_request::is_model_Valid() const{
    return m_model_isValid;
}

QString OAI_my_follows_search_post_request::getMustNot() const {
    return m_must_not;
}
void OAI_my_follows_search_post_request::setMustNot(const QString &must_not) {
    m_must_not = must_not;
    m_must_not_isSet = true;
}

bool OAI_my_follows_search_post_request::is_must_not_Set() const{
    return m_must_not_isSet;
}

bool OAI_my_follows_search_post_request::is_must_not_Valid() const{
    return m_must_not_isValid;
}

QList<qint32> OAI_my_follows_search_post_request::getNotIds() const {
    return m_not_ids;
}
void OAI_my_follows_search_post_request::setNotIds(const QList<qint32> &not_ids) {
    m_not_ids = not_ids;
    m_not_ids_isSet = true;
}

bool OAI_my_follows_search_post_request::is_not_ids_Set() const{
    return m_not_ids_isSet;
}

bool OAI_my_follows_search_post_request::is_not_ids_Valid() const{
    return m_not_ids_isValid;
}

bool OAI_my_follows_search_post_request::isPreferredSeller() const {
    return m_preferred_seller;
}
void OAI_my_follows_search_post_request::setPreferredSeller(const bool &preferred_seller) {
    m_preferred_seller = preferred_seller;
    m_preferred_seller_isSet = true;
}

bool OAI_my_follows_search_post_request::is_preferred_seller_Set() const{
    return m_preferred_seller_isSet;
}

bool OAI_my_follows_search_post_request::is_preferred_seller_Valid() const{
    return m_preferred_seller_isValid;
}

float OAI_my_follows_search_post_request::getPriceMax() const {
    return m_price_max;
}
void OAI_my_follows_search_post_request::setPriceMax(const float &price_max) {
    m_price_max = price_max;
    m_price_max_isSet = true;
}

bool OAI_my_follows_search_post_request::is_price_max_Set() const{
    return m_price_max_isSet;
}

bool OAI_my_follows_search_post_request::is_price_max_Valid() const{
    return m_price_max_isValid;
}

float OAI_my_follows_search_post_request::getPriceMin() const {
    return m_price_min;
}
void OAI_my_follows_search_post_request::setPriceMin(const float &price_min) {
    m_price_min = price_min;
    m_price_min_isSet = true;
}

bool OAI_my_follows_search_post_request::is_price_min_Set() const{
    return m_price_min_isSet;
}

bool OAI_my_follows_search_post_request::is_price_min_Valid() const{
    return m_price_min_isValid;
}

QString OAI_my_follows_search_post_request::getProductType() const {
    return m_product_type;
}
void OAI_my_follows_search_post_request::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAI_my_follows_search_post_request::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAI_my_follows_search_post_request::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QString OAI_my_follows_search_post_request::getQuery() const {
    return m_query;
}
void OAI_my_follows_search_post_request::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAI_my_follows_search_post_request::is_query_Set() const{
    return m_query_isSet;
}

bool OAI_my_follows_search_post_request::is_query_Valid() const{
    return m_query_isValid;
}

QString OAI_my_follows_search_post_request::getShipsTo() const {
    return m_ships_to;
}
void OAI_my_follows_search_post_request::setShipsTo(const QString &ships_to) {
    m_ships_to = ships_to;
    m_ships_to_isSet = true;
}

bool OAI_my_follows_search_post_request::is_ships_to_Set() const{
    return m_ships_to_isSet;
}

bool OAI_my_follows_search_post_request::is_ships_to_Valid() const{
    return m_ships_to_isValid;
}

QString OAI_my_follows_search_post_request::getShop() const {
    return m_shop;
}
void OAI_my_follows_search_post_request::setShop(const QString &shop) {
    m_shop = shop;
    m_shop_isSet = true;
}

bool OAI_my_follows_search_post_request::is_shop_Set() const{
    return m_shop_isSet;
}

bool OAI_my_follows_search_post_request::is_shop_Valid() const{
    return m_shop_isValid;
}

QString OAI_my_follows_search_post_request::getShopId() const {
    return m_shop_id;
}
void OAI_my_follows_search_post_request::setShopId(const QString &shop_id) {
    m_shop_id = shop_id;
    m_shop_id_isSet = true;
}

bool OAI_my_follows_search_post_request::is_shop_id_Set() const{
    return m_shop_id_isSet;
}

bool OAI_my_follows_search_post_request::is_shop_id_Valid() const{
    return m_shop_id_isValid;
}

qint32 OAI_my_follows_search_post_request::getWatchersCountMin() const {
    return m_watchers_count_min;
}
void OAI_my_follows_search_post_request::setWatchersCountMin(const qint32 &watchers_count_min) {
    m_watchers_count_min = watchers_count_min;
    m_watchers_count_min_isSet = true;
}

bool OAI_my_follows_search_post_request::is_watchers_count_min_Set() const{
    return m_watchers_count_min_isSet;
}

bool OAI_my_follows_search_post_request::is_watchers_count_min_Valid() const{
    return m_watchers_count_min_isValid;
}

qint32 OAI_my_follows_search_post_request::getYearMax() const {
    return m_year_max;
}
void OAI_my_follows_search_post_request::setYearMax(const qint32 &year_max) {
    m_year_max = year_max;
    m_year_max_isSet = true;
}

bool OAI_my_follows_search_post_request::is_year_max_Set() const{
    return m_year_max_isSet;
}

bool OAI_my_follows_search_post_request::is_year_max_Valid() const{
    return m_year_max_isValid;
}

qint32 OAI_my_follows_search_post_request::getYearMin() const {
    return m_year_min;
}
void OAI_my_follows_search_post_request::setYearMin(const qint32 &year_min) {
    m_year_min = year_min;
    m_year_min_isSet = true;
}

bool OAI_my_follows_search_post_request::is_year_min_Set() const{
    return m_year_min_isSet;
}

bool OAI_my_follows_search_post_request::is_year_min_Valid() const{
    return m_year_min_isValid;
}

bool OAI_my_follows_search_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepts_gift_cards_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_payment_plans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auction_price_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_auctions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handmade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_not_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ships_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers_count_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_my_follows_search_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
