/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_my_conversations_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_my_conversations_post_request::OAI_my_conversations_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_my_conversations_post_request::OAI_my_conversations_post_request() {
    this->initializeModel();
}

OAI_my_conversations_post_request::~OAI_my_conversations_post_request() {}

void OAI_my_conversations_post_request::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_cloudinary_photos_isSet = false;
    m_cloudinary_photos_isValid = false;

    m_listing_id_isSet = false;
    m_listing_id_isValid = false;

    m_recipient_id_isSet = false;
    m_recipient_id_isValid = false;

    m_recipient_uuid_isSet = false;
    m_recipient_uuid_isValid = false;

    m_shop_id_isSet = false;
    m_shop_id_isValid = false;
}

void OAI_my_conversations_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_my_conversations_post_request::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cloudinary_photos_isValid = ::OpenAPI::fromJsonValue(m_cloudinary_photos, json[QString("cloudinary_photos")]);
    m_cloudinary_photos_isSet = !json[QString("cloudinary_photos")].isNull() && m_cloudinary_photos_isValid;

    m_listing_id_isValid = ::OpenAPI::fromJsonValue(m_listing_id, json[QString("listing_id")]);
    m_listing_id_isSet = !json[QString("listing_id")].isNull() && m_listing_id_isValid;

    m_recipient_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_id, json[QString("recipient_id")]);
    m_recipient_id_isSet = !json[QString("recipient_id")].isNull() && m_recipient_id_isValid;

    m_recipient_uuid_isValid = ::OpenAPI::fromJsonValue(m_recipient_uuid, json[QString("recipient_uuid")]);
    m_recipient_uuid_isSet = !json[QString("recipient_uuid")].isNull() && m_recipient_uuid_isValid;

    m_shop_id_isValid = ::OpenAPI::fromJsonValue(m_shop_id, json[QString("shop_id")]);
    m_shop_id_isSet = !json[QString("shop_id")].isNull() && m_shop_id_isValid;
}

QString OAI_my_conversations_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_my_conversations_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cloudinary_photos.size() > 0) {
        obj.insert(QString("cloudinary_photos"), ::OpenAPI::toJsonValue(m_cloudinary_photos));
    }
    if (m_listing_id_isSet) {
        obj.insert(QString("listing_id"), ::OpenAPI::toJsonValue(m_listing_id));
    }
    if (m_recipient_id_isSet) {
        obj.insert(QString("recipient_id"), ::OpenAPI::toJsonValue(m_recipient_id));
    }
    if (m_recipient_uuid_isSet) {
        obj.insert(QString("recipient_uuid"), ::OpenAPI::toJsonValue(m_recipient_uuid));
    }
    if (m_shop_id_isSet) {
        obj.insert(QString("shop_id"), ::OpenAPI::toJsonValue(m_shop_id));
    }
    return obj;
}

QString OAI_my_conversations_post_request::getBody() const {
    return m_body;
}
void OAI_my_conversations_post_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAI_my_conversations_post_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAI_my_conversations_post_request::is_body_Valid() const{
    return m_body_isValid;
}

QList<QString> OAI_my_conversations_post_request::getCloudinaryPhotos() const {
    return m_cloudinary_photos;
}
void OAI_my_conversations_post_request::setCloudinaryPhotos(const QList<QString> &cloudinary_photos) {
    m_cloudinary_photos = cloudinary_photos;
    m_cloudinary_photos_isSet = true;
}

bool OAI_my_conversations_post_request::is_cloudinary_photos_Set() const{
    return m_cloudinary_photos_isSet;
}

bool OAI_my_conversations_post_request::is_cloudinary_photos_Valid() const{
    return m_cloudinary_photos_isValid;
}

qint32 OAI_my_conversations_post_request::getListingId() const {
    return m_listing_id;
}
void OAI_my_conversations_post_request::setListingId(const qint32 &listing_id) {
    m_listing_id = listing_id;
    m_listing_id_isSet = true;
}

bool OAI_my_conversations_post_request::is_listing_id_Set() const{
    return m_listing_id_isSet;
}

bool OAI_my_conversations_post_request::is_listing_id_Valid() const{
    return m_listing_id_isValid;
}

qint32 OAI_my_conversations_post_request::getRecipientId() const {
    return m_recipient_id;
}
void OAI_my_conversations_post_request::setRecipientId(const qint32 &recipient_id) {
    m_recipient_id = recipient_id;
    m_recipient_id_isSet = true;
}

bool OAI_my_conversations_post_request::is_recipient_id_Set() const{
    return m_recipient_id_isSet;
}

bool OAI_my_conversations_post_request::is_recipient_id_Valid() const{
    return m_recipient_id_isValid;
}

QString OAI_my_conversations_post_request::getRecipientUuid() const {
    return m_recipient_uuid;
}
void OAI_my_conversations_post_request::setRecipientUuid(const QString &recipient_uuid) {
    m_recipient_uuid = recipient_uuid;
    m_recipient_uuid_isSet = true;
}

bool OAI_my_conversations_post_request::is_recipient_uuid_Set() const{
    return m_recipient_uuid_isSet;
}

bool OAI_my_conversations_post_request::is_recipient_uuid_Valid() const{
    return m_recipient_uuid_isValid;
}

QString OAI_my_conversations_post_request::getShopId() const {
    return m_shop_id;
}
void OAI_my_conversations_post_request::setShopId(const QString &shop_id) {
    m_shop_id = shop_id;
    m_shop_id_isSet = true;
}

bool OAI_my_conversations_post_request::is_shop_id_Set() const{
    return m_shop_id_isSet;
}

bool OAI_my_conversations_post_request::is_shop_id_Valid() const{
    return m_shop_id_isValid;
}

bool OAI_my_conversations_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloudinary_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_my_conversations_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_body_isValid && true;
}

} // namespace OpenAPI
