/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_my_account_put_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_my_account_put_request::OAI_my_account_put_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_my_account_put_request::OAI_my_account_put_request() {
    this->initializeModel();
}

OAI_my_account_put_request::~OAI_my_account_put_request() {}

void OAI_my_account_put_request::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_code_isSet = false;
    m_locale_code_isValid = false;

    m_shipping_region_code_isSet = false;
    m_shipping_region_code_isValid = false;

    m_third_party_ad_data_consent_isSet = false;
    m_third_party_ad_data_consent_isValid = false;
}

void OAI_my_account_put_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_my_account_put_request::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_locale_code_isValid = ::OpenAPI::fromJsonValue(m_locale_code, json[QString("locale_code")]);
    m_locale_code_isSet = !json[QString("locale_code")].isNull() && m_locale_code_isValid;

    m_shipping_region_code_isValid = ::OpenAPI::fromJsonValue(m_shipping_region_code, json[QString("shipping_region_code")]);
    m_shipping_region_code_isSet = !json[QString("shipping_region_code")].isNull() && m_shipping_region_code_isValid;

    m_third_party_ad_data_consent_isValid = ::OpenAPI::fromJsonValue(m_third_party_ad_data_consent, json[QString("third_party_ad_data_consent")]);
    m_third_party_ad_data_consent_isSet = !json[QString("third_party_ad_data_consent")].isNull() && m_third_party_ad_data_consent_isValid;
}

QString OAI_my_account_put_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_my_account_put_request::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_code_isSet) {
        obj.insert(QString("locale_code"), ::OpenAPI::toJsonValue(m_locale_code));
    }
    if (m_shipping_region_code_isSet) {
        obj.insert(QString("shipping_region_code"), ::OpenAPI::toJsonValue(m_shipping_region_code));
    }
    if (m_third_party_ad_data_consent_isSet) {
        obj.insert(QString("third_party_ad_data_consent"), ::OpenAPI::toJsonValue(m_third_party_ad_data_consent));
    }
    return obj;
}

QString OAI_my_account_put_request::getCurrency() const {
    return m_currency;
}
void OAI_my_account_put_request::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAI_my_account_put_request::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAI_my_account_put_request::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAI_my_account_put_request::getFirstName() const {
    return m_first_name;
}
void OAI_my_account_put_request::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAI_my_account_put_request::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAI_my_account_put_request::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAI_my_account_put_request::getLastName() const {
    return m_last_name;
}
void OAI_my_account_put_request::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAI_my_account_put_request::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAI_my_account_put_request::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAI_my_account_put_request::getLocaleCode() const {
    return m_locale_code;
}
void OAI_my_account_put_request::setLocaleCode(const QString &locale_code) {
    m_locale_code = locale_code;
    m_locale_code_isSet = true;
}

bool OAI_my_account_put_request::is_locale_code_Set() const{
    return m_locale_code_isSet;
}

bool OAI_my_account_put_request::is_locale_code_Valid() const{
    return m_locale_code_isValid;
}

QString OAI_my_account_put_request::getShippingRegionCode() const {
    return m_shipping_region_code;
}
void OAI_my_account_put_request::setShippingRegionCode(const QString &shipping_region_code) {
    m_shipping_region_code = shipping_region_code;
    m_shipping_region_code_isSet = true;
}

bool OAI_my_account_put_request::is_shipping_region_code_Set() const{
    return m_shipping_region_code_isSet;
}

bool OAI_my_account_put_request::is_shipping_region_code_Valid() const{
    return m_shipping_region_code_isValid;
}

bool OAI_my_account_put_request::isThirdPartyAdDataConsent() const {
    return m_third_party_ad_data_consent;
}
void OAI_my_account_put_request::setThirdPartyAdDataConsent(const bool &third_party_ad_data_consent) {
    m_third_party_ad_data_consent = third_party_ad_data_consent;
    m_third_party_ad_data_consent_isSet = true;
}

bool OAI_my_account_put_request::is_third_party_ad_data_consent_Set() const{
    return m_third_party_ad_data_consent_isSet;
}

bool OAI_my_account_put_request::is_third_party_ad_data_consent_Valid() const{
    return m_third_party_ad_data_consent_isValid;
}

bool OAI_my_account_put_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_ad_data_consent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_my_account_put_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
