/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHandpickedApi_H
#define OAI_OAIHandpickedApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHandpickedApi : public QObject {
    Q_OBJECT

public:
    OAIHandpickedApi(const int timeOut = 0);
    ~OAIHandpickedApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  slug QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  auction_price_max float [optional]
    * @param[in]  category QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  decade QString [optional]
    * @param[in]  finish QString [optional]
    * @param[in]  handmade bool [optional]
    * @param[in]  item_city QString [optional]
    * @param[in]  item_country QString [optional]
    * @param[in]  item_region QString [optional]
    * @param[in]  item_state QString [optional]
    * @param[in]  make QList<QString> [optional]
    * @param[in]  model QString [optional]
    * @param[in]  must_not QString [optional]
    * @param[in]  price_max float [optional]
    * @param[in]  price_min float [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  year_max qint32 [optional]
    * @param[in]  year_min qint32 [optional]
    * @param[in]  accepts_gift_cards bool [optional]
    * @param[in]  preferred_seller bool [optional]
    * @param[in]  shop QString [optional]
    * @param[in]  shop_id QString [optional]
    * @param[in]  listing_type QString [optional]
    * @param[in]  ships_to QString [optional]
    * @param[in]  exclude_auctions bool [optional]
    * @param[in]  accepts_payment_plans bool [optional]
    * @param[in]  watchers_count_min qint32 [optional]
    * @param[in]  not_ids QList<QString> [optional]
    * @param[in]  local_pickup bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void handpickedSlugGet(const QString &slug, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &auction_price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finish = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handmade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &item_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &make = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &must_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &price_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &accepts_gift_cards = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &preferred_seller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shop_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ships_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_auctions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &accepts_payment_plans = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &watchers_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &not_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &local_pickup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void handpickedSlugGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void handpickedSlugGetSignal();


    void handpickedSlugGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use handpickedSlugGetSignalError() instead")
    void handpickedSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void handpickedSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use handpickedSlugGetSignalErrorFull() instead")
    void handpickedSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void handpickedSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
