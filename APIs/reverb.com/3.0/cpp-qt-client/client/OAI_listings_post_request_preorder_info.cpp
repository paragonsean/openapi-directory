/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_listings_post_request_preorder_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_listings_post_request_preorder_info::OAI_listings_post_request_preorder_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_listings_post_request_preorder_info::OAI_listings_post_request_preorder_info() {
    this->initializeModel();
}

OAI_listings_post_request_preorder_info::~OAI_listings_post_request_preorder_info() {}

void OAI_listings_post_request_preorder_info::initializeModel() {

    m_lead_time_isSet = false;
    m_lead_time_isValid = false;

    m_lead_time_unit_isSet = false;
    m_lead_time_unit_isValid = false;

    m_ship_date_isSet = false;
    m_ship_date_isValid = false;
}

void OAI_listings_post_request_preorder_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_listings_post_request_preorder_info::fromJsonObject(QJsonObject json) {

    m_lead_time_isValid = ::OpenAPI::fromJsonValue(m_lead_time, json[QString("lead_time")]);
    m_lead_time_isSet = !json[QString("lead_time")].isNull() && m_lead_time_isValid;

    m_lead_time_unit_isValid = ::OpenAPI::fromJsonValue(m_lead_time_unit, json[QString("lead_time_unit")]);
    m_lead_time_unit_isSet = !json[QString("lead_time_unit")].isNull() && m_lead_time_unit_isValid;

    m_ship_date_isValid = ::OpenAPI::fromJsonValue(m_ship_date, json[QString("ship_date")]);
    m_ship_date_isSet = !json[QString("ship_date")].isNull() && m_ship_date_isValid;
}

QString OAI_listings_post_request_preorder_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_listings_post_request_preorder_info::asJsonObject() const {
    QJsonObject obj;
    if (m_lead_time_isSet) {
        obj.insert(QString("lead_time"), ::OpenAPI::toJsonValue(m_lead_time));
    }
    if (m_lead_time_unit_isSet) {
        obj.insert(QString("lead_time_unit"), ::OpenAPI::toJsonValue(m_lead_time_unit));
    }
    if (m_ship_date_isSet) {
        obj.insert(QString("ship_date"), ::OpenAPI::toJsonValue(m_ship_date));
    }
    return obj;
}

qint32 OAI_listings_post_request_preorder_info::getLeadTime() const {
    return m_lead_time;
}
void OAI_listings_post_request_preorder_info::setLeadTime(const qint32 &lead_time) {
    m_lead_time = lead_time;
    m_lead_time_isSet = true;
}

bool OAI_listings_post_request_preorder_info::is_lead_time_Set() const{
    return m_lead_time_isSet;
}

bool OAI_listings_post_request_preorder_info::is_lead_time_Valid() const{
    return m_lead_time_isValid;
}

QString OAI_listings_post_request_preorder_info::getLeadTimeUnit() const {
    return m_lead_time_unit;
}
void OAI_listings_post_request_preorder_info::setLeadTimeUnit(const QString &lead_time_unit) {
    m_lead_time_unit = lead_time_unit;
    m_lead_time_unit_isSet = true;
}

bool OAI_listings_post_request_preorder_info::is_lead_time_unit_Set() const{
    return m_lead_time_unit_isSet;
}

bool OAI_listings_post_request_preorder_info::is_lead_time_unit_Valid() const{
    return m_lead_time_unit_isValid;
}

QString OAI_listings_post_request_preorder_info::getShipDate() const {
    return m_ship_date;
}
void OAI_listings_post_request_preorder_info::setShipDate(const QString &ship_date) {
    m_ship_date = ship_date;
    m_ship_date_isSet = true;
}

bool OAI_listings_post_request_preorder_info::is_ship_date_Set() const{
    return m_ship_date_isSet;
}

bool OAI_listings_post_request_preorder_info::is_ship_date_Valid() const{
    return m_ship_date_isValid;
}

bool OAI_listings_post_request_preorder_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lead_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lead_time_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ship_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_listings_post_request_preorder_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lead_time_unit_isValid && true;
}

} // namespace OpenAPI
