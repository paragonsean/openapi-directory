/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMyApi_H
#define OAI_OAIMyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_conversations__conversation_id__offer_post_request.h"
#include "OAI_listings__listing_id__conversations_post_request.h"
#include "OAI_my_account_put_request.h"
#include "OAI_my_conversations__id__put_request.h"
#include "OAI_my_conversations_post_request.h"
#include "OAI_my_follows_articles_post_request.h"
#include "OAI_my_follows_search_post_request.h"
#include "OAI_my_listings__slug__state_end_put_request.h"
#include "OAI_my_negotiations__id__accept_post_request.h"
#include "OAI_my_orders_selling__id__mark_picked_up_post_request.h"
#include "OAI_my_orders_selling__id__ship_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMyApi : public QObject {
    Q_OBJECT

public:
    OAIMyApi(const int timeOut = 0);
    ~OAIMyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void myAccountGet();

    /**
    * @param[in]  oai_my_account_put_request OAI_my_account_put_request [optional]
    */
    virtual void myAccountPut(const ::OpenAPI::OptionalParam<OAI_my_account_put_request> &oai_my_account_put_request = ::OpenAPI::OptionalParam<OAI_my_account_put_request>());

    /**
    * @param[in]  address_id QString [required]
    */
    virtual void myAddressesAddressIdDelete(const QString &address_id);

    /**
    * @param[in]  address_id QString [required]
    */
    virtual void myAddressesAddressIdPut(const QString &address_id);


    virtual void myAddressesGet();


    virtual void myAddressesPost();

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  oai_listings__listing_id__conversations_post_request OAI_listings__listing_id__conversations_post_request [optional]
    */
    virtual void myConversationsConversationIdMessagesPost(const QString &conversation_id, const ::OpenAPI::OptionalParam<OAI_listings__listing_id__conversations_post_request> &oai_listings__listing_id__conversations_post_request = ::OpenAPI::OptionalParam<OAI_listings__listing_id__conversations_post_request>());

    /**
    * @param[in]  search QString [optional]
    * @param[in]  unread_only bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void myConversationsGet(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unread_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void myConversationsIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_my_conversations__id__put_request OAI_my_conversations__id__put_request [optional]
    */
    virtual void myConversationsIdPut(const QString &id, const ::OpenAPI::OptionalParam<OAI_my_conversations__id__put_request> &oai_my_conversations__id__put_request = ::OpenAPI::OptionalParam<OAI_my_conversations__id__put_request>());

    /**
    * @param[in]  oai_my_conversations_post_request OAI_my_conversations_post_request [optional]
    */
    virtual void myConversationsPost(const ::OpenAPI::OptionalParam<OAI_my_conversations_post_request> &oai_my_conversations_post_request = ::OpenAPI::OptionalParam<OAI_my_conversations_post_request>());


    virtual void myCountsGet();

    /**
    * @param[in]  product_id QString [required]
    */
    virtual void myCuratedSetProductProductIdDelete(const QString &product_id);

    /**
    * @param[in]  product_id QString [required]
    */
    virtual void myCuratedSetProductProductIdPost(const QString &product_id);


    virtual void myFeedCustomizeGet();


    virtual void myFeedGet();


    virtual void myFeedGridGet();


    virtual void myFeedbackReceivedGet();


    virtual void myFeedbackSentGet();


    virtual void myFollowsArticlesGet();

    /**
    * @param[in]  oai_my_follows_articles_post_request OAI_my_follows_articles_post_request [optional]
    */
    virtual void myFollowsArticlesPost(const ::OpenAPI::OptionalParam<OAI_my_follows_articles_post_request> &oai_my_follows_articles_post_request = ::OpenAPI::OptionalParam<OAI_my_follows_articles_post_request>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsBrandsSlugDelete(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsBrandsSlugGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsBrandsSlugPost(const QString &slug);

    /**
    * @param[in]  category QString [required]
    * @param[in]  subcategory QString [required]
    */
    virtual void myFollowsCategoriesCategorySubcategoryDelete(const QString &category, const QString &subcategory);

    /**
    * @param[in]  category QString [required]
    * @param[in]  subcategory QString [required]
    */
    virtual void myFollowsCategoriesCategorySubcategoryGet(const QString &category, const QString &subcategory);

    /**
    * @param[in]  category QString [required]
    * @param[in]  subcategory QString [required]
    */
    virtual void myFollowsCategoriesCategorySubcategoryPost(const QString &category, const QString &subcategory);

    /**
    * @param[in]  identifier QString [required]
    */
    virtual void myFollowsCategoriesIdentifierDelete(const QString &identifier);

    /**
    * @param[in]  identifier QString [required]
    */
    virtual void myFollowsCategoriesIdentifierGet(const QString &identifier);

    /**
    * @param[in]  identifier QString [required]
    */
    virtual void myFollowsCategoriesIdentifierPost(const QString &identifier);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void myFollowsCategoriesUuidPost(const QString &uuid);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsCollectionsSlugDelete(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsCollectionsSlugGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsCollectionsSlugPost(const QString &slug);

    /**
    * @param[in]  follow_id QString [required]
    */
    virtual void myFollowsFollowIdAlertDelete(const QString &follow_id);

    /**
    * @param[in]  follow_id QString [required]
    */
    virtual void myFollowsFollowIdAlertPost(const QString &follow_id);

    /**
    * @param[in]  follow_id QString [required]
    */
    virtual void myFollowsFollowIdDelete(const QString &follow_id);


    virtual void myFollowsGet();

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsHandpickedSlugDelete(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsHandpickedSlugGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsHandpickedSlugPost(const QString &slug);


    virtual void myFollowsSearchGet();

    /**
    * @param[in]  oai_my_follows_search_post_request OAI_my_follows_search_post_request [optional]
    */
    virtual void myFollowsSearchPost(const ::OpenAPI::OptionalParam<OAI_my_follows_search_post_request> &oai_my_follows_search_post_request = ::OpenAPI::OptionalParam<OAI_my_follows_search_post_request>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsShopsSlugDelete(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsShopsSlugGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void myFollowsShopsSlugPost(const QString &slug);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  auction_price_max float [optional]
    * @param[in]  category QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  decade QString [optional]
    * @param[in]  finish QString [optional]
    * @param[in]  handmade bool [optional]
    * @param[in]  item_city QString [optional]
    * @param[in]  item_country QString [optional]
    * @param[in]  item_region QString [optional]
    * @param[in]  item_state QString [optional]
    * @param[in]  make QList<QString> [optional]
    * @param[in]  model QString [optional]
    * @param[in]  must_not QString [optional]
    * @param[in]  price_max float [optional]
    * @param[in]  price_min float [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  year_max qint32 [optional]
    * @param[in]  year_min qint32 [optional]
    * @param[in]  accepts_gift_cards bool [optional]
    * @param[in]  preferred_seller bool [optional]
    * @param[in]  shop QString [optional]
    * @param[in]  shop_id QString [optional]
    * @param[in]  listing_type QString [optional]
    * @param[in]  ships_to QString [optional]
    * @param[in]  exclude_auctions bool [optional]
    * @param[in]  accepts_payment_plans bool [optional]
    * @param[in]  watchers_count_min qint32 [optional]
    * @param[in]  not_ids QList<QString> [optional]
    * @param[in]  local_pickup bool [optional]
    */
    virtual void myListingsDraftsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &auction_price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finish = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handmade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &item_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &make = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &must_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &price_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &accepts_gift_cards = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &preferred_seller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shop_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ships_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_auctions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &accepts_payment_plans = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &watchers_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &not_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &local_pickup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  auction_price_max float [optional]
    * @param[in]  category QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  decade QString [optional]
    * @param[in]  finish QString [optional]
    * @param[in]  handmade bool [optional]
    * @param[in]  item_city QString [optional]
    * @param[in]  item_country QString [optional]
    * @param[in]  item_region QString [optional]
    * @param[in]  item_state QString [optional]
    * @param[in]  make QList<QString> [optional]
    * @param[in]  model QString [optional]
    * @param[in]  must_not QString [optional]
    * @param[in]  price_max float [optional]
    * @param[in]  price_min float [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  year_max qint32 [optional]
    * @param[in]  year_min qint32 [optional]
    * @param[in]  accepts_gift_cards bool [optional]
    * @param[in]  preferred_seller bool [optional]
    * @param[in]  shop QString [optional]
    * @param[in]  shop_id QString [optional]
    * @param[in]  listing_type QString [optional]
    * @param[in]  ships_to QString [optional]
    * @param[in]  exclude_auctions bool [optional]
    * @param[in]  accepts_payment_plans bool [optional]
    * @param[in]  watchers_count_min qint32 [optional]
    * @param[in]  not_ids QList<QString> [optional]
    * @param[in]  local_pickup bool [optional]
    * @param[in]  state QString [optional]
    * @param[in]  sku QString [optional]
    */
    virtual void myListingsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &auction_price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finish = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handmade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &item_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &make = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &must_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &price_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &accepts_gift_cards = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &preferred_seller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shop_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ships_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_auctions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &accepts_payment_plans = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &watchers_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &not_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &local_pickup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void myListingsNegotiationsGet(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  slug QString [required]
    * @param[in]  oai_my_listings__slug__state_end_put_request OAI_my_listings__slug__state_end_put_request [optional]
    */
    virtual void myListingsSlugStateEndPut(const QString &slug, const ::OpenAPI::OptionalParam<OAI_my_listings__slug__state_end_put_request> &oai_my_listings__slug__state_end_put_request = ::OpenAPI::OptionalParam<OAI_my_listings__slug__state_end_put_request>());


    virtual void myListsGet();

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void myNegotiationsBuyingGet(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_my_negotiations__id__accept_post_request OAI_my_negotiations__id__accept_post_request [optional]
    */
    virtual void myNegotiationsIdAcceptPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_my_negotiations__id__accept_post_request> &oai_my_negotiations__id__accept_post_request = ::OpenAPI::OptionalParam<OAI_my_negotiations__id__accept_post_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_conversations__conversation_id__offer_post_request OAI_conversations__conversation_id__offer_post_request [optional]
    */
    virtual void myNegotiationsIdCounterPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_conversations__conversation_id__offer_post_request> &oai_conversations__conversation_id__offer_post_request = ::OpenAPI::OptionalParam<OAI_conversations__conversation_id__offer_post_request>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void myNegotiationsIdDeclinePost(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void myNegotiationsIdGet(const QString &id);


    virtual void myOrdersAwaitingFeedbackGet();


    virtual void myOrdersBuyingAllGet();

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void myOrdersBuyingByUuidUuidGet(const QString &uuid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void myOrdersBuyingIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void myOrdersBuyingIdMarkReceivedPost(const QString &id);


    virtual void myOrdersBuyingUnpaidGet();


    virtual void myOrdersSellingAllGet();


    virtual void myOrdersSellingAwaitingShipmentGet();

    /**
    * @param[in]  buyer_id QString [required]
    */
    virtual void myOrdersSellingBuyerHistoryBuyerIdGet(const QString &buyer_id);

    /**
    * @param[in]  uuid QString [required]
    */
    virtual void myOrdersSellingByUuidUuidGet(const QString &uuid);

    /**
    * @param[in]  id QString [required]
    */
    virtual void myOrdersSellingIdGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_my_orders_selling__id__mark_picked_up_post_request OAI_my_orders_selling__id__mark_picked_up_post_request [optional]
    */
    virtual void myOrdersSellingIdMarkPickedUpPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_my_orders_selling__id__mark_picked_up_post_request> &oai_my_orders_selling__id__mark_picked_up_post_request = ::OpenAPI::OptionalParam<OAI_my_orders_selling__id__mark_picked_up_post_request>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_my_orders_selling__id__ship_post_request OAI_my_orders_selling__id__ship_post_request [optional]
    */
    virtual void myOrdersSellingIdShipPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_my_orders_selling__id__ship_post_request> &oai_my_orders_selling__id__ship_post_request = ::OpenAPI::OptionalParam<OAI_my_orders_selling__id__ship_post_request>());

    /**
    * @param[in]  order_id QString [required]
    */
    virtual void myOrdersSellingOrderIdRefundRequestsPost(const QString &order_id);


    virtual void myOrdersSellingUnpaidGet();

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  created_start_date QString [optional]
    * @param[in]  created_end_date QString [optional]
    * @param[in]  updated_start_date QString [optional]
    * @param[in]  updated_end_date QString [optional]
    * @param[in]  order_id QString [optional]
    */
    virtual void myPaymentsSellingGet(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &created_start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &updated_end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void myPaymentsSellingIdGet(const QString &id);


    virtual void myPayoutsGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void myPayoutsIdLineItemsGet(const QString &id);


    virtual void myRefundRequestsSellingGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void myRefundRequestsSellingIdPut(const QString &id);


    virtual void myViewedListingsGet();


    virtual void myWishlistGet();

    /**
    * @param[in]  id QString [required]
    */
    virtual void myWishlistIdDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void myWishlistIdPut(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void myAccountGetCallback(OAIHttpRequestWorker *worker);
    void myAccountPutCallback(OAIHttpRequestWorker *worker);
    void myAddressesAddressIdDeleteCallback(OAIHttpRequestWorker *worker);
    void myAddressesAddressIdPutCallback(OAIHttpRequestWorker *worker);
    void myAddressesGetCallback(OAIHttpRequestWorker *worker);
    void myAddressesPostCallback(OAIHttpRequestWorker *worker);
    void myConversationsConversationIdMessagesPostCallback(OAIHttpRequestWorker *worker);
    void myConversationsGetCallback(OAIHttpRequestWorker *worker);
    void myConversationsIdGetCallback(OAIHttpRequestWorker *worker);
    void myConversationsIdPutCallback(OAIHttpRequestWorker *worker);
    void myConversationsPostCallback(OAIHttpRequestWorker *worker);
    void myCountsGetCallback(OAIHttpRequestWorker *worker);
    void myCuratedSetProductProductIdDeleteCallback(OAIHttpRequestWorker *worker);
    void myCuratedSetProductProductIdPostCallback(OAIHttpRequestWorker *worker);
    void myFeedCustomizeGetCallback(OAIHttpRequestWorker *worker);
    void myFeedGetCallback(OAIHttpRequestWorker *worker);
    void myFeedGridGetCallback(OAIHttpRequestWorker *worker);
    void myFeedbackReceivedGetCallback(OAIHttpRequestWorker *worker);
    void myFeedbackSentGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsArticlesGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsArticlesPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesUuidPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdAlertDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdAlertPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsSearchGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsSearchPostCallback(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugGetCallback(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugPostCallback(OAIHttpRequestWorker *worker);
    void myListingsDraftsGetCallback(OAIHttpRequestWorker *worker);
    void myListingsGetCallback(OAIHttpRequestWorker *worker);
    void myListingsNegotiationsGetCallback(OAIHttpRequestWorker *worker);
    void myListingsSlugStateEndPutCallback(OAIHttpRequestWorker *worker);
    void myListsGetCallback(OAIHttpRequestWorker *worker);
    void myNegotiationsBuyingGetCallback(OAIHttpRequestWorker *worker);
    void myNegotiationsIdAcceptPostCallback(OAIHttpRequestWorker *worker);
    void myNegotiationsIdCounterPostCallback(OAIHttpRequestWorker *worker);
    void myNegotiationsIdDeclinePostCallback(OAIHttpRequestWorker *worker);
    void myNegotiationsIdGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersAwaitingFeedbackGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersBuyingAllGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersBuyingByUuidUuidGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersBuyingIdGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersBuyingIdMarkReceivedPostCallback(OAIHttpRequestWorker *worker);
    void myOrdersBuyingUnpaidGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingAllGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingAwaitingShipmentGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingBuyerHistoryBuyerIdGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingByUuidUuidGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdGetCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdMarkPickedUpPostCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdShipPostCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingOrderIdRefundRequestsPostCallback(OAIHttpRequestWorker *worker);
    void myOrdersSellingUnpaidGetCallback(OAIHttpRequestWorker *worker);
    void myPaymentsSellingGetCallback(OAIHttpRequestWorker *worker);
    void myPaymentsSellingIdGetCallback(OAIHttpRequestWorker *worker);
    void myPayoutsGetCallback(OAIHttpRequestWorker *worker);
    void myPayoutsIdLineItemsGetCallback(OAIHttpRequestWorker *worker);
    void myRefundRequestsSellingGetCallback(OAIHttpRequestWorker *worker);
    void myRefundRequestsSellingIdPutCallback(OAIHttpRequestWorker *worker);
    void myViewedListingsGetCallback(OAIHttpRequestWorker *worker);
    void myWishlistGetCallback(OAIHttpRequestWorker *worker);
    void myWishlistIdDeleteCallback(OAIHttpRequestWorker *worker);
    void myWishlistIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void myAccountGetSignal();
    void myAccountPutSignal();
    void myAddressesAddressIdDeleteSignal();
    void myAddressesAddressIdPutSignal();
    void myAddressesGetSignal();
    void myAddressesPostSignal();
    void myConversationsConversationIdMessagesPostSignal();
    void myConversationsGetSignal();
    void myConversationsIdGetSignal();
    void myConversationsIdPutSignal();
    void myConversationsPostSignal();
    void myCountsGetSignal();
    void myCuratedSetProductProductIdDeleteSignal();
    void myCuratedSetProductProductIdPostSignal();
    void myFeedCustomizeGetSignal();
    void myFeedGetSignal();
    void myFeedGridGetSignal();
    void myFeedbackReceivedGetSignal();
    void myFeedbackSentGetSignal();
    void myFollowsArticlesGetSignal();
    void myFollowsArticlesPostSignal();
    void myFollowsBrandsSlugDeleteSignal();
    void myFollowsBrandsSlugGetSignal();
    void myFollowsBrandsSlugPostSignal();
    void myFollowsCategoriesCategorySubcategoryDeleteSignal();
    void myFollowsCategoriesCategorySubcategoryGetSignal();
    void myFollowsCategoriesCategorySubcategoryPostSignal();
    void myFollowsCategoriesIdentifierDeleteSignal();
    void myFollowsCategoriesIdentifierGetSignal();
    void myFollowsCategoriesIdentifierPostSignal();
    void myFollowsCategoriesUuidPostSignal();
    void myFollowsCollectionsSlugDeleteSignal();
    void myFollowsCollectionsSlugGetSignal();
    void myFollowsCollectionsSlugPostSignal();
    void myFollowsFollowIdAlertDeleteSignal();
    void myFollowsFollowIdAlertPostSignal();
    void myFollowsFollowIdDeleteSignal();
    void myFollowsGetSignal();
    void myFollowsHandpickedSlugDeleteSignal();
    void myFollowsHandpickedSlugGetSignal();
    void myFollowsHandpickedSlugPostSignal();
    void myFollowsSearchGetSignal();
    void myFollowsSearchPostSignal();
    void myFollowsShopsSlugDeleteSignal();
    void myFollowsShopsSlugGetSignal();
    void myFollowsShopsSlugPostSignal();
    void myListingsDraftsGetSignal();
    void myListingsGetSignal();
    void myListingsNegotiationsGetSignal();
    void myListingsSlugStateEndPutSignal();
    void myListsGetSignal();
    void myNegotiationsBuyingGetSignal();
    void myNegotiationsIdAcceptPostSignal();
    void myNegotiationsIdCounterPostSignal();
    void myNegotiationsIdDeclinePostSignal();
    void myNegotiationsIdGetSignal();
    void myOrdersAwaitingFeedbackGetSignal();
    void myOrdersBuyingAllGetSignal();
    void myOrdersBuyingByUuidUuidGetSignal();
    void myOrdersBuyingIdGetSignal();
    void myOrdersBuyingIdMarkReceivedPostSignal();
    void myOrdersBuyingUnpaidGetSignal();
    void myOrdersSellingAllGetSignal();
    void myOrdersSellingAwaitingShipmentGetSignal();
    void myOrdersSellingBuyerHistoryBuyerIdGetSignal();
    void myOrdersSellingByUuidUuidGetSignal();
    void myOrdersSellingIdGetSignal();
    void myOrdersSellingIdMarkPickedUpPostSignal();
    void myOrdersSellingIdShipPostSignal();
    void myOrdersSellingOrderIdRefundRequestsPostSignal();
    void myOrdersSellingUnpaidGetSignal();
    void myPaymentsSellingGetSignal();
    void myPaymentsSellingIdGetSignal();
    void myPayoutsGetSignal();
    void myPayoutsIdLineItemsGetSignal();
    void myRefundRequestsSellingGetSignal();
    void myRefundRequestsSellingIdPutSignal();
    void myViewedListingsGetSignal();
    void myWishlistGetSignal();
    void myWishlistIdDeleteSignal();
    void myWishlistIdPutSignal();


    void myAccountGetSignalFull(OAIHttpRequestWorker *worker);
    void myAccountPutSignalFull(OAIHttpRequestWorker *worker);
    void myAddressesAddressIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myAddressesAddressIdPutSignalFull(OAIHttpRequestWorker *worker);
    void myAddressesGetSignalFull(OAIHttpRequestWorker *worker);
    void myAddressesPostSignalFull(OAIHttpRequestWorker *worker);
    void myConversationsConversationIdMessagesPostSignalFull(OAIHttpRequestWorker *worker);
    void myConversationsGetSignalFull(OAIHttpRequestWorker *worker);
    void myConversationsIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myConversationsIdPutSignalFull(OAIHttpRequestWorker *worker);
    void myConversationsPostSignalFull(OAIHttpRequestWorker *worker);
    void myCountsGetSignalFull(OAIHttpRequestWorker *worker);
    void myCuratedSetProductProductIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myCuratedSetProductProductIdPostSignalFull(OAIHttpRequestWorker *worker);
    void myFeedCustomizeGetSignalFull(OAIHttpRequestWorker *worker);
    void myFeedGetSignalFull(OAIHttpRequestWorker *worker);
    void myFeedGridGetSignalFull(OAIHttpRequestWorker *worker);
    void myFeedbackReceivedGetSignalFull(OAIHttpRequestWorker *worker);
    void myFeedbackSentGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsArticlesGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsArticlesPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsBrandsSlugPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesCategorySubcategoryPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesIdentifierPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCategoriesUuidPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsCollectionsSlugPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdAlertDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdAlertPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsFollowIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsHandpickedSlugPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsSearchPostSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void myFollowsShopsSlugPostSignalFull(OAIHttpRequestWorker *worker);
    void myListingsDraftsGetSignalFull(OAIHttpRequestWorker *worker);
    void myListingsGetSignalFull(OAIHttpRequestWorker *worker);
    void myListingsNegotiationsGetSignalFull(OAIHttpRequestWorker *worker);
    void myListingsSlugStateEndPutSignalFull(OAIHttpRequestWorker *worker);
    void myListsGetSignalFull(OAIHttpRequestWorker *worker);
    void myNegotiationsBuyingGetSignalFull(OAIHttpRequestWorker *worker);
    void myNegotiationsIdAcceptPostSignalFull(OAIHttpRequestWorker *worker);
    void myNegotiationsIdCounterPostSignalFull(OAIHttpRequestWorker *worker);
    void myNegotiationsIdDeclinePostSignalFull(OAIHttpRequestWorker *worker);
    void myNegotiationsIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersAwaitingFeedbackGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersBuyingAllGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersBuyingByUuidUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersBuyingIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersBuyingIdMarkReceivedPostSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersBuyingUnpaidGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingAllGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingAwaitingShipmentGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingBuyerHistoryBuyerIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingByUuidUuidGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdMarkPickedUpPostSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingIdShipPostSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingOrderIdRefundRequestsPostSignalFull(OAIHttpRequestWorker *worker);
    void myOrdersSellingUnpaidGetSignalFull(OAIHttpRequestWorker *worker);
    void myPaymentsSellingGetSignalFull(OAIHttpRequestWorker *worker);
    void myPaymentsSellingIdGetSignalFull(OAIHttpRequestWorker *worker);
    void myPayoutsGetSignalFull(OAIHttpRequestWorker *worker);
    void myPayoutsIdLineItemsGetSignalFull(OAIHttpRequestWorker *worker);
    void myRefundRequestsSellingGetSignalFull(OAIHttpRequestWorker *worker);
    void myRefundRequestsSellingIdPutSignalFull(OAIHttpRequestWorker *worker);
    void myViewedListingsGetSignalFull(OAIHttpRequestWorker *worker);
    void myWishlistGetSignalFull(OAIHttpRequestWorker *worker);
    void myWishlistIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void myWishlistIdPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use myAccountGetSignalError() instead")
    void myAccountGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAccountGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAccountPutSignalError() instead")
    void myAccountPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAccountPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesAddressIdDeleteSignalError() instead")
    void myAddressesAddressIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesAddressIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesAddressIdPutSignalError() instead")
    void myAddressesAddressIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesAddressIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesGetSignalError() instead")
    void myAddressesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesPostSignalError() instead")
    void myAddressesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsConversationIdMessagesPostSignalError() instead")
    void myConversationsConversationIdMessagesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsConversationIdMessagesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsGetSignalError() instead")
    void myConversationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsIdGetSignalError() instead")
    void myConversationsIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsIdPutSignalError() instead")
    void myConversationsIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsPostSignalError() instead")
    void myConversationsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCountsGetSignalError() instead")
    void myCountsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myCountsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCuratedSetProductProductIdDeleteSignalError() instead")
    void myCuratedSetProductProductIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myCuratedSetProductProductIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCuratedSetProductProductIdPostSignalError() instead")
    void myCuratedSetProductProductIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myCuratedSetProductProductIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedCustomizeGetSignalError() instead")
    void myFeedCustomizeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedCustomizeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedGetSignalError() instead")
    void myFeedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedGridGetSignalError() instead")
    void myFeedGridGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedGridGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedbackReceivedGetSignalError() instead")
    void myFeedbackReceivedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedbackReceivedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedbackSentGetSignalError() instead")
    void myFeedbackSentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedbackSentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsArticlesGetSignalError() instead")
    void myFollowsArticlesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsArticlesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsArticlesPostSignalError() instead")
    void myFollowsArticlesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsArticlesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugDeleteSignalError() instead")
    void myFollowsBrandsSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugGetSignalError() instead")
    void myFollowsBrandsSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugPostSignalError() instead")
    void myFollowsBrandsSlugPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryDeleteSignalError() instead")
    void myFollowsCategoriesCategorySubcategoryDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryGetSignalError() instead")
    void myFollowsCategoriesCategorySubcategoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryPostSignalError() instead")
    void myFollowsCategoriesCategorySubcategoryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierDeleteSignalError() instead")
    void myFollowsCategoriesIdentifierDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierGetSignalError() instead")
    void myFollowsCategoriesIdentifierGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierPostSignalError() instead")
    void myFollowsCategoriesIdentifierPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesUuidPostSignalError() instead")
    void myFollowsCategoriesUuidPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesUuidPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugDeleteSignalError() instead")
    void myFollowsCollectionsSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugGetSignalError() instead")
    void myFollowsCollectionsSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugPostSignalError() instead")
    void myFollowsCollectionsSlugPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdAlertDeleteSignalError() instead")
    void myFollowsFollowIdAlertDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdAlertDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdAlertPostSignalError() instead")
    void myFollowsFollowIdAlertPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdAlertPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdDeleteSignalError() instead")
    void myFollowsFollowIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsGetSignalError() instead")
    void myFollowsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugDeleteSignalError() instead")
    void myFollowsHandpickedSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugGetSignalError() instead")
    void myFollowsHandpickedSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugPostSignalError() instead")
    void myFollowsHandpickedSlugPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsSearchGetSignalError() instead")
    void myFollowsSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsSearchPostSignalError() instead")
    void myFollowsSearchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsSearchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugDeleteSignalError() instead")
    void myFollowsShopsSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugGetSignalError() instead")
    void myFollowsShopsSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugPostSignalError() instead")
    void myFollowsShopsSlugPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsDraftsGetSignalError() instead")
    void myListingsDraftsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsDraftsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsGetSignalError() instead")
    void myListingsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsNegotiationsGetSignalError() instead")
    void myListingsNegotiationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsNegotiationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsSlugStateEndPutSignalError() instead")
    void myListingsSlugStateEndPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsSlugStateEndPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListsGetSignalError() instead")
    void myListsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myListsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsBuyingGetSignalError() instead")
    void myNegotiationsBuyingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsBuyingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdAcceptPostSignalError() instead")
    void myNegotiationsIdAcceptPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdAcceptPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdCounterPostSignalError() instead")
    void myNegotiationsIdCounterPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdCounterPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdDeclinePostSignalError() instead")
    void myNegotiationsIdDeclinePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdDeclinePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdGetSignalError() instead")
    void myNegotiationsIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersAwaitingFeedbackGetSignalError() instead")
    void myOrdersAwaitingFeedbackGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersAwaitingFeedbackGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingAllGetSignalError() instead")
    void myOrdersBuyingAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingByUuidUuidGetSignalError() instead")
    void myOrdersBuyingByUuidUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingByUuidUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingIdGetSignalError() instead")
    void myOrdersBuyingIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingIdMarkReceivedPostSignalError() instead")
    void myOrdersBuyingIdMarkReceivedPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingIdMarkReceivedPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingUnpaidGetSignalError() instead")
    void myOrdersBuyingUnpaidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingUnpaidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingAllGetSignalError() instead")
    void myOrdersSellingAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingAwaitingShipmentGetSignalError() instead")
    void myOrdersSellingAwaitingShipmentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingAwaitingShipmentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingBuyerHistoryBuyerIdGetSignalError() instead")
    void myOrdersSellingBuyerHistoryBuyerIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingBuyerHistoryBuyerIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingByUuidUuidGetSignalError() instead")
    void myOrdersSellingByUuidUuidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingByUuidUuidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdGetSignalError() instead")
    void myOrdersSellingIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdMarkPickedUpPostSignalError() instead")
    void myOrdersSellingIdMarkPickedUpPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdMarkPickedUpPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdShipPostSignalError() instead")
    void myOrdersSellingIdShipPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdShipPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingOrderIdRefundRequestsPostSignalError() instead")
    void myOrdersSellingOrderIdRefundRequestsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingOrderIdRefundRequestsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingUnpaidGetSignalError() instead")
    void myOrdersSellingUnpaidGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingUnpaidGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPaymentsSellingGetSignalError() instead")
    void myPaymentsSellingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myPaymentsSellingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPaymentsSellingIdGetSignalError() instead")
    void myPaymentsSellingIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myPaymentsSellingIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPayoutsGetSignalError() instead")
    void myPayoutsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myPayoutsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPayoutsIdLineItemsGetSignalError() instead")
    void myPayoutsIdLineItemsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myPayoutsIdLineItemsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myRefundRequestsSellingGetSignalError() instead")
    void myRefundRequestsSellingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myRefundRequestsSellingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myRefundRequestsSellingIdPutSignalError() instead")
    void myRefundRequestsSellingIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myRefundRequestsSellingIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myViewedListingsGetSignalError() instead")
    void myViewedListingsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myViewedListingsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistGetSignalError() instead")
    void myWishlistGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistIdDeleteSignalError() instead")
    void myWishlistIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistIdPutSignalError() instead")
    void myWishlistIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use myAccountGetSignalErrorFull() instead")
    void myAccountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAccountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAccountPutSignalErrorFull() instead")
    void myAccountPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAccountPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesAddressIdDeleteSignalErrorFull() instead")
    void myAddressesAddressIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesAddressIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesAddressIdPutSignalErrorFull() instead")
    void myAddressesAddressIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesAddressIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesGetSignalErrorFull() instead")
    void myAddressesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myAddressesPostSignalErrorFull() instead")
    void myAddressesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myAddressesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsConversationIdMessagesPostSignalErrorFull() instead")
    void myConversationsConversationIdMessagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsConversationIdMessagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsGetSignalErrorFull() instead")
    void myConversationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsIdGetSignalErrorFull() instead")
    void myConversationsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsIdPutSignalErrorFull() instead")
    void myConversationsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myConversationsPostSignalErrorFull() instead")
    void myConversationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myConversationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCountsGetSignalErrorFull() instead")
    void myCountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myCountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCuratedSetProductProductIdDeleteSignalErrorFull() instead")
    void myCuratedSetProductProductIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myCuratedSetProductProductIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myCuratedSetProductProductIdPostSignalErrorFull() instead")
    void myCuratedSetProductProductIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myCuratedSetProductProductIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedCustomizeGetSignalErrorFull() instead")
    void myFeedCustomizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedCustomizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedGetSignalErrorFull() instead")
    void myFeedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedGridGetSignalErrorFull() instead")
    void myFeedGridGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedGridGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedbackReceivedGetSignalErrorFull() instead")
    void myFeedbackReceivedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedbackReceivedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFeedbackSentGetSignalErrorFull() instead")
    void myFeedbackSentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFeedbackSentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsArticlesGetSignalErrorFull() instead")
    void myFollowsArticlesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsArticlesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsArticlesPostSignalErrorFull() instead")
    void myFollowsArticlesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsArticlesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugDeleteSignalErrorFull() instead")
    void myFollowsBrandsSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugGetSignalErrorFull() instead")
    void myFollowsBrandsSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsBrandsSlugPostSignalErrorFull() instead")
    void myFollowsBrandsSlugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsBrandsSlugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryDeleteSignalErrorFull() instead")
    void myFollowsCategoriesCategorySubcategoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryGetSignalErrorFull() instead")
    void myFollowsCategoriesCategorySubcategoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesCategorySubcategoryPostSignalErrorFull() instead")
    void myFollowsCategoriesCategorySubcategoryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesCategorySubcategoryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierDeleteSignalErrorFull() instead")
    void myFollowsCategoriesIdentifierDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierGetSignalErrorFull() instead")
    void myFollowsCategoriesIdentifierGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesIdentifierPostSignalErrorFull() instead")
    void myFollowsCategoriesIdentifierPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesIdentifierPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCategoriesUuidPostSignalErrorFull() instead")
    void myFollowsCategoriesUuidPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCategoriesUuidPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugDeleteSignalErrorFull() instead")
    void myFollowsCollectionsSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugGetSignalErrorFull() instead")
    void myFollowsCollectionsSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsCollectionsSlugPostSignalErrorFull() instead")
    void myFollowsCollectionsSlugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsCollectionsSlugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdAlertDeleteSignalErrorFull() instead")
    void myFollowsFollowIdAlertDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdAlertDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdAlertPostSignalErrorFull() instead")
    void myFollowsFollowIdAlertPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdAlertPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsFollowIdDeleteSignalErrorFull() instead")
    void myFollowsFollowIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsFollowIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsGetSignalErrorFull() instead")
    void myFollowsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugDeleteSignalErrorFull() instead")
    void myFollowsHandpickedSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugGetSignalErrorFull() instead")
    void myFollowsHandpickedSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsHandpickedSlugPostSignalErrorFull() instead")
    void myFollowsHandpickedSlugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsHandpickedSlugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsSearchGetSignalErrorFull() instead")
    void myFollowsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsSearchPostSignalErrorFull() instead")
    void myFollowsSearchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsSearchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugDeleteSignalErrorFull() instead")
    void myFollowsShopsSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugGetSignalErrorFull() instead")
    void myFollowsShopsSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myFollowsShopsSlugPostSignalErrorFull() instead")
    void myFollowsShopsSlugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myFollowsShopsSlugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsDraftsGetSignalErrorFull() instead")
    void myListingsDraftsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsDraftsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsGetSignalErrorFull() instead")
    void myListingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsNegotiationsGetSignalErrorFull() instead")
    void myListingsNegotiationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsNegotiationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListingsSlugStateEndPutSignalErrorFull() instead")
    void myListingsSlugStateEndPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myListingsSlugStateEndPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myListsGetSignalErrorFull() instead")
    void myListsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myListsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsBuyingGetSignalErrorFull() instead")
    void myNegotiationsBuyingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsBuyingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdAcceptPostSignalErrorFull() instead")
    void myNegotiationsIdAcceptPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdAcceptPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdCounterPostSignalErrorFull() instead")
    void myNegotiationsIdCounterPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdCounterPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdDeclinePostSignalErrorFull() instead")
    void myNegotiationsIdDeclinePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdDeclinePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myNegotiationsIdGetSignalErrorFull() instead")
    void myNegotiationsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myNegotiationsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersAwaitingFeedbackGetSignalErrorFull() instead")
    void myOrdersAwaitingFeedbackGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersAwaitingFeedbackGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingAllGetSignalErrorFull() instead")
    void myOrdersBuyingAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingByUuidUuidGetSignalErrorFull() instead")
    void myOrdersBuyingByUuidUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingByUuidUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingIdGetSignalErrorFull() instead")
    void myOrdersBuyingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingIdMarkReceivedPostSignalErrorFull() instead")
    void myOrdersBuyingIdMarkReceivedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingIdMarkReceivedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersBuyingUnpaidGetSignalErrorFull() instead")
    void myOrdersBuyingUnpaidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersBuyingUnpaidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingAllGetSignalErrorFull() instead")
    void myOrdersSellingAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingAwaitingShipmentGetSignalErrorFull() instead")
    void myOrdersSellingAwaitingShipmentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingAwaitingShipmentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingBuyerHistoryBuyerIdGetSignalErrorFull() instead")
    void myOrdersSellingBuyerHistoryBuyerIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingBuyerHistoryBuyerIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingByUuidUuidGetSignalErrorFull() instead")
    void myOrdersSellingByUuidUuidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingByUuidUuidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdGetSignalErrorFull() instead")
    void myOrdersSellingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdMarkPickedUpPostSignalErrorFull() instead")
    void myOrdersSellingIdMarkPickedUpPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdMarkPickedUpPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingIdShipPostSignalErrorFull() instead")
    void myOrdersSellingIdShipPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingIdShipPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingOrderIdRefundRequestsPostSignalErrorFull() instead")
    void myOrdersSellingOrderIdRefundRequestsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingOrderIdRefundRequestsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myOrdersSellingUnpaidGetSignalErrorFull() instead")
    void myOrdersSellingUnpaidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myOrdersSellingUnpaidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPaymentsSellingGetSignalErrorFull() instead")
    void myPaymentsSellingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myPaymentsSellingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPaymentsSellingIdGetSignalErrorFull() instead")
    void myPaymentsSellingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myPaymentsSellingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPayoutsGetSignalErrorFull() instead")
    void myPayoutsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myPayoutsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myPayoutsIdLineItemsGetSignalErrorFull() instead")
    void myPayoutsIdLineItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myPayoutsIdLineItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myRefundRequestsSellingGetSignalErrorFull() instead")
    void myRefundRequestsSellingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myRefundRequestsSellingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myRefundRequestsSellingIdPutSignalErrorFull() instead")
    void myRefundRequestsSellingIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myRefundRequestsSellingIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myViewedListingsGetSignalErrorFull() instead")
    void myViewedListingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myViewedListingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistGetSignalErrorFull() instead")
    void myWishlistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistIdDeleteSignalErrorFull() instead")
    void myWishlistIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use myWishlistIdPutSignalErrorFull() instead")
    void myWishlistIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void myWishlistIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
