/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_listings_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_listings_post_request::OAI_listings_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_listings_post_request::OAI_listings_post_request() {
    this->initializeModel();
}

OAI_listings_post_request::~OAI_listings_post_request() {}

void OAI_listings_post_request::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exclusive_channel_isSet = false;
    m_exclusive_channel_isValid = false;

    m_finish_isSet = false;
    m_finish_isValid = false;

    m_has_inventory_isSet = false;
    m_has_inventory_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_multi_item_isSet = false;
    m_multi_item_isValid = false;

    m_offers_enabled_isSet = false;
    m_offers_enabled_isValid = false;

    m_origin_country_code_isSet = false;
    m_origin_country_code_isValid = false;

    m_photos_isSet = false;
    m_photos_isValid = false;

    m_preorder_info_isSet = false;
    m_preorder_info_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_prop_65_warning_isSet = false;
    m_prop_65_warning_isValid = false;

    m_publish_isSet = false;
    m_publish_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_seller_cost_isSet = false;
    m_seller_cost_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_shipping_profile_id_isSet = false;
    m_shipping_profile_id_isValid = false;

    m_shipping_profile_name_isSet = false;
    m_shipping_profile_name_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_sold_as_is_isSet = false;
    m_sold_as_is_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_tax_exempt_isSet = false;
    m_tax_exempt_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;

    m_upc_does_not_apply_isSet = false;
    m_upc_does_not_apply_isValid = false;

    m_videos_isSet = false;
    m_videos_isValid = false;

    m_year_isSet = false;
    m_year_isValid = false;
}

void OAI_listings_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_listings_post_request::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_exclusive_channel_isValid = ::OpenAPI::fromJsonValue(m_exclusive_channel, json[QString("exclusive_channel")]);
    m_exclusive_channel_isSet = !json[QString("exclusive_channel")].isNull() && m_exclusive_channel_isValid;

    m_finish_isValid = ::OpenAPI::fromJsonValue(m_finish, json[QString("finish")]);
    m_finish_isSet = !json[QString("finish")].isNull() && m_finish_isValid;

    m_has_inventory_isValid = ::OpenAPI::fromJsonValue(m_has_inventory, json[QString("has_inventory")]);
    m_has_inventory_isSet = !json[QString("has_inventory")].isNull() && m_has_inventory_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("make")]);
    m_make_isSet = !json[QString("make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_multi_item_isValid = ::OpenAPI::fromJsonValue(m_multi_item, json[QString("multi_item")]);
    m_multi_item_isSet = !json[QString("multi_item")].isNull() && m_multi_item_isValid;

    m_offers_enabled_isValid = ::OpenAPI::fromJsonValue(m_offers_enabled, json[QString("offers_enabled")]);
    m_offers_enabled_isSet = !json[QString("offers_enabled")].isNull() && m_offers_enabled_isValid;

    m_origin_country_code_isValid = ::OpenAPI::fromJsonValue(m_origin_country_code, json[QString("origin_country_code")]);
    m_origin_country_code_isSet = !json[QString("origin_country_code")].isNull() && m_origin_country_code_isValid;

    m_photos_isValid = ::OpenAPI::fromJsonValue(m_photos, json[QString("photos")]);
    m_photos_isSet = !json[QString("photos")].isNull() && m_photos_isValid;

    m_preorder_info_isValid = ::OpenAPI::fromJsonValue(m_preorder_info, json[QString("preorder_info")]);
    m_preorder_info_isSet = !json[QString("preorder_info")].isNull() && m_preorder_info_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_prop_65_warning_isValid = ::OpenAPI::fromJsonValue(m_prop_65_warning, json[QString("prop_65_warning")]);
    m_prop_65_warning_isSet = !json[QString("prop_65_warning")].isNull() && m_prop_65_warning_isValid;

    m_publish_isValid = ::OpenAPI::fromJsonValue(m_publish, json[QString("publish")]);
    m_publish_isSet = !json[QString("publish")].isNull() && m_publish_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_seller_cost_isValid = ::OpenAPI::fromJsonValue(m_seller_cost, json[QString("seller_cost")]);
    m_seller_cost_isSet = !json[QString("seller_cost")].isNull() && m_seller_cost_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_shipping_profile_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_profile_id, json[QString("shipping_profile_id")]);
    m_shipping_profile_id_isSet = !json[QString("shipping_profile_id")].isNull() && m_shipping_profile_id_isValid;

    m_shipping_profile_name_isValid = ::OpenAPI::fromJsonValue(m_shipping_profile_name, json[QString("shipping_profile_name")]);
    m_shipping_profile_name_isSet = !json[QString("shipping_profile_name")].isNull() && m_shipping_profile_name_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_sold_as_is_isValid = ::OpenAPI::fromJsonValue(m_sold_as_is, json[QString("sold_as_is")]);
    m_sold_as_is_isSet = !json[QString("sold_as_is")].isNull() && m_sold_as_is_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storage_location")]);
    m_storage_location_isSet = !json[QString("storage_location")].isNull() && m_storage_location_isValid;

    m_tax_exempt_isValid = ::OpenAPI::fromJsonValue(m_tax_exempt, json[QString("tax_exempt")]);
    m_tax_exempt_isSet = !json[QString("tax_exempt")].isNull() && m_tax_exempt_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;

    m_upc_does_not_apply_isValid = ::OpenAPI::fromJsonValue(m_upc_does_not_apply, json[QString("upc_does_not_apply")]);
    m_upc_does_not_apply_isSet = !json[QString("upc_does_not_apply")].isNull() && m_upc_does_not_apply_isValid;

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;

    m_year_isValid = ::OpenAPI::fromJsonValue(m_year, json[QString("year")]);
    m_year_isSet = !json[QString("year")].isNull() && m_year_isValid;
}

QString OAI_listings_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_listings_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exclusive_channel_isSet) {
        obj.insert(QString("exclusive_channel"), ::OpenAPI::toJsonValue(m_exclusive_channel));
    }
    if (m_finish_isSet) {
        obj.insert(QString("finish"), ::OpenAPI::toJsonValue(m_finish));
    }
    if (m_has_inventory_isSet) {
        obj.insert(QString("has_inventory"), ::OpenAPI::toJsonValue(m_has_inventory));
    }
    if (m_inventory_isSet) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_make_isSet) {
        obj.insert(QString("make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_multi_item_isSet) {
        obj.insert(QString("multi_item"), ::OpenAPI::toJsonValue(m_multi_item));
    }
    if (m_offers_enabled_isSet) {
        obj.insert(QString("offers_enabled"), ::OpenAPI::toJsonValue(m_offers_enabled));
    }
    if (m_origin_country_code_isSet) {
        obj.insert(QString("origin_country_code"), ::OpenAPI::toJsonValue(m_origin_country_code));
    }
    if (m_photos.size() > 0) {
        obj.insert(QString("photos"), ::OpenAPI::toJsonValue(m_photos));
    }
    if (m_preorder_info.isSet()) {
        obj.insert(QString("preorder_info"), ::OpenAPI::toJsonValue(m_preorder_info));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_prop_65_warning_isSet) {
        obj.insert(QString("prop_65_warning"), ::OpenAPI::toJsonValue(m_prop_65_warning));
    }
    if (m_publish_isSet) {
        obj.insert(QString("publish"), ::OpenAPI::toJsonValue(m_publish));
    }
    if (m_seller.isSet()) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_seller_cost_isSet) {
        obj.insert(QString("seller_cost"), ::OpenAPI::toJsonValue(m_seller_cost));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_shipping_profile_id_isSet) {
        obj.insert(QString("shipping_profile_id"), ::OpenAPI::toJsonValue(m_shipping_profile_id));
    }
    if (m_shipping_profile_name_isSet) {
        obj.insert(QString("shipping_profile_name"), ::OpenAPI::toJsonValue(m_shipping_profile_name));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_sold_as_is_isSet) {
        obj.insert(QString("sold_as_is"), ::OpenAPI::toJsonValue(m_sold_as_is));
    }
    if (m_storage_location_isSet) {
        obj.insert(QString("storage_location"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_tax_exempt_isSet) {
        obj.insert(QString("tax_exempt"), ::OpenAPI::toJsonValue(m_tax_exempt));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_upc_isSet) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    if (m_upc_does_not_apply_isSet) {
        obj.insert(QString("upc_does_not_apply"), ::OpenAPI::toJsonValue(m_upc_does_not_apply));
    }
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    if (m_year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(m_year));
    }
    return obj;
}

QList<OAI_listings_post_request_categories_inner> OAI_listings_post_request::getCategories() const {
    return m_categories;
}
void OAI_listings_post_request::setCategories(const QList<OAI_listings_post_request_categories_inner> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAI_listings_post_request::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAI_listings_post_request::is_categories_Valid() const{
    return m_categories_isValid;
}

OAI_listings_post_request_condition OAI_listings_post_request::getCondition() const {
    return m_condition;
}
void OAI_listings_post_request::setCondition(const OAI_listings_post_request_condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAI_listings_post_request::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAI_listings_post_request::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAI_listings_post_request::getDescription() const {
    return m_description;
}
void OAI_listings_post_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAI_listings_post_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAI_listings_post_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAI_listings_post_request::getExclusiveChannel() const {
    return m_exclusive_channel;
}
void OAI_listings_post_request::setExclusiveChannel(const QString &exclusive_channel) {
    m_exclusive_channel = exclusive_channel;
    m_exclusive_channel_isSet = true;
}

bool OAI_listings_post_request::is_exclusive_channel_Set() const{
    return m_exclusive_channel_isSet;
}

bool OAI_listings_post_request::is_exclusive_channel_Valid() const{
    return m_exclusive_channel_isValid;
}

QString OAI_listings_post_request::getFinish() const {
    return m_finish;
}
void OAI_listings_post_request::setFinish(const QString &finish) {
    m_finish = finish;
    m_finish_isSet = true;
}

bool OAI_listings_post_request::is_finish_Set() const{
    return m_finish_isSet;
}

bool OAI_listings_post_request::is_finish_Valid() const{
    return m_finish_isValid;
}

bool OAI_listings_post_request::isHasInventory() const {
    return m_has_inventory;
}
void OAI_listings_post_request::setHasInventory(const bool &has_inventory) {
    m_has_inventory = has_inventory;
    m_has_inventory_isSet = true;
}

bool OAI_listings_post_request::is_has_inventory_Set() const{
    return m_has_inventory_isSet;
}

bool OAI_listings_post_request::is_has_inventory_Valid() const{
    return m_has_inventory_isValid;
}

qint32 OAI_listings_post_request::getInventory() const {
    return m_inventory;
}
void OAI_listings_post_request::setInventory(const qint32 &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAI_listings_post_request::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAI_listings_post_request::is_inventory_Valid() const{
    return m_inventory_isValid;
}

OAI_listings_post_request_location OAI_listings_post_request::getLocation() const {
    return m_location;
}
void OAI_listings_post_request::setLocation(const OAI_listings_post_request_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAI_listings_post_request::is_location_Set() const{
    return m_location_isSet;
}

bool OAI_listings_post_request::is_location_Valid() const{
    return m_location_isValid;
}

QString OAI_listings_post_request::getMake() const {
    return m_make;
}
void OAI_listings_post_request::setMake(const QString &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAI_listings_post_request::is_make_Set() const{
    return m_make_isSet;
}

bool OAI_listings_post_request::is_make_Valid() const{
    return m_make_isValid;
}

QString OAI_listings_post_request::getModel() const {
    return m_model;
}
void OAI_listings_post_request::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAI_listings_post_request::is_model_Set() const{
    return m_model_isSet;
}

bool OAI_listings_post_request::is_model_Valid() const{
    return m_model_isValid;
}

bool OAI_listings_post_request::isMultiItem() const {
    return m_multi_item;
}
void OAI_listings_post_request::setMultiItem(const bool &multi_item) {
    m_multi_item = multi_item;
    m_multi_item_isSet = true;
}

bool OAI_listings_post_request::is_multi_item_Set() const{
    return m_multi_item_isSet;
}

bool OAI_listings_post_request::is_multi_item_Valid() const{
    return m_multi_item_isValid;
}

bool OAI_listings_post_request::isOffersEnabled() const {
    return m_offers_enabled;
}
void OAI_listings_post_request::setOffersEnabled(const bool &offers_enabled) {
    m_offers_enabled = offers_enabled;
    m_offers_enabled_isSet = true;
}

bool OAI_listings_post_request::is_offers_enabled_Set() const{
    return m_offers_enabled_isSet;
}

bool OAI_listings_post_request::is_offers_enabled_Valid() const{
    return m_offers_enabled_isValid;
}

QString OAI_listings_post_request::getOriginCountryCode() const {
    return m_origin_country_code;
}
void OAI_listings_post_request::setOriginCountryCode(const QString &origin_country_code) {
    m_origin_country_code = origin_country_code;
    m_origin_country_code_isSet = true;
}

bool OAI_listings_post_request::is_origin_country_code_Set() const{
    return m_origin_country_code_isSet;
}

bool OAI_listings_post_request::is_origin_country_code_Valid() const{
    return m_origin_country_code_isValid;
}

QList<QString> OAI_listings_post_request::getPhotos() const {
    return m_photos;
}
void OAI_listings_post_request::setPhotos(const QList<QString> &photos) {
    m_photos = photos;
    m_photos_isSet = true;
}

bool OAI_listings_post_request::is_photos_Set() const{
    return m_photos_isSet;
}

bool OAI_listings_post_request::is_photos_Valid() const{
    return m_photos_isValid;
}

OAI_listings_post_request_preorder_info OAI_listings_post_request::getPreorderInfo() const {
    return m_preorder_info;
}
void OAI_listings_post_request::setPreorderInfo(const OAI_listings_post_request_preorder_info &preorder_info) {
    m_preorder_info = preorder_info;
    m_preorder_info_isSet = true;
}

bool OAI_listings_post_request::is_preorder_info_Set() const{
    return m_preorder_info_isSet;
}

bool OAI_listings_post_request::is_preorder_info_Valid() const{
    return m_preorder_info_isValid;
}

OAI_conversations__conversation_id__offer_post_request_price OAI_listings_post_request::getPrice() const {
    return m_price;
}
void OAI_listings_post_request::setPrice(const OAI_conversations__conversation_id__offer_post_request_price &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAI_listings_post_request::is_price_Set() const{
    return m_price_isSet;
}

bool OAI_listings_post_request::is_price_Valid() const{
    return m_price_isValid;
}

QString OAI_listings_post_request::getProp65Warning() const {
    return m_prop_65_warning;
}
void OAI_listings_post_request::setProp65Warning(const QString &prop_65_warning) {
    m_prop_65_warning = prop_65_warning;
    m_prop_65_warning_isSet = true;
}

bool OAI_listings_post_request::is_prop_65_warning_Set() const{
    return m_prop_65_warning_isSet;
}

bool OAI_listings_post_request::is_prop_65_warning_Valid() const{
    return m_prop_65_warning_isValid;
}

bool OAI_listings_post_request::isPublish() const {
    return m_publish;
}
void OAI_listings_post_request::setPublish(const bool &publish) {
    m_publish = publish;
    m_publish_isSet = true;
}

bool OAI_listings_post_request::is_publish_Set() const{
    return m_publish_isSet;
}

bool OAI_listings_post_request::is_publish_Valid() const{
    return m_publish_isValid;
}

OAI_listings_post_request_seller OAI_listings_post_request::getSeller() const {
    return m_seller;
}
void OAI_listings_post_request::setSeller(const OAI_listings_post_request_seller &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAI_listings_post_request::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAI_listings_post_request::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAI_listings_post_request::getSellerCost() const {
    return m_seller_cost;
}
void OAI_listings_post_request::setSellerCost(const QString &seller_cost) {
    m_seller_cost = seller_cost;
    m_seller_cost_isSet = true;
}

bool OAI_listings_post_request::is_seller_cost_Set() const{
    return m_seller_cost_isSet;
}

bool OAI_listings_post_request::is_seller_cost_Valid() const{
    return m_seller_cost_isValid;
}

OAI_listings_post_request_shipping OAI_listings_post_request::getShipping() const {
    return m_shipping;
}
void OAI_listings_post_request::setShipping(const OAI_listings_post_request_shipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAI_listings_post_request::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAI_listings_post_request::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAI_listings_post_request::getShippingProfileId() const {
    return m_shipping_profile_id;
}
void OAI_listings_post_request::setShippingProfileId(const QString &shipping_profile_id) {
    m_shipping_profile_id = shipping_profile_id;
    m_shipping_profile_id_isSet = true;
}

bool OAI_listings_post_request::is_shipping_profile_id_Set() const{
    return m_shipping_profile_id_isSet;
}

bool OAI_listings_post_request::is_shipping_profile_id_Valid() const{
    return m_shipping_profile_id_isValid;
}

QString OAI_listings_post_request::getShippingProfileName() const {
    return m_shipping_profile_name;
}
void OAI_listings_post_request::setShippingProfileName(const QString &shipping_profile_name) {
    m_shipping_profile_name = shipping_profile_name;
    m_shipping_profile_name_isSet = true;
}

bool OAI_listings_post_request::is_shipping_profile_name_Set() const{
    return m_shipping_profile_name_isSet;
}

bool OAI_listings_post_request::is_shipping_profile_name_Valid() const{
    return m_shipping_profile_name_isValid;
}

QString OAI_listings_post_request::getSku() const {
    return m_sku;
}
void OAI_listings_post_request::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAI_listings_post_request::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAI_listings_post_request::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAI_listings_post_request::isSoldAsIs() const {
    return m_sold_as_is;
}
void OAI_listings_post_request::setSoldAsIs(const bool &sold_as_is) {
    m_sold_as_is = sold_as_is;
    m_sold_as_is_isSet = true;
}

bool OAI_listings_post_request::is_sold_as_is_Set() const{
    return m_sold_as_is_isSet;
}

bool OAI_listings_post_request::is_sold_as_is_Valid() const{
    return m_sold_as_is_isValid;
}

QString OAI_listings_post_request::getStorageLocation() const {
    return m_storage_location;
}
void OAI_listings_post_request::setStorageLocation(const QString &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAI_listings_post_request::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAI_listings_post_request::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

bool OAI_listings_post_request::isTaxExempt() const {
    return m_tax_exempt;
}
void OAI_listings_post_request::setTaxExempt(const bool &tax_exempt) {
    m_tax_exempt = tax_exempt;
    m_tax_exempt_isSet = true;
}

bool OAI_listings_post_request::is_tax_exempt_Set() const{
    return m_tax_exempt_isSet;
}

bool OAI_listings_post_request::is_tax_exempt_Valid() const{
    return m_tax_exempt_isValid;
}

QString OAI_listings_post_request::getTitle() const {
    return m_title;
}
void OAI_listings_post_request::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAI_listings_post_request::is_title_Set() const{
    return m_title_isSet;
}

bool OAI_listings_post_request::is_title_Valid() const{
    return m_title_isValid;
}

QString OAI_listings_post_request::getUpc() const {
    return m_upc;
}
void OAI_listings_post_request::setUpc(const QString &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAI_listings_post_request::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAI_listings_post_request::is_upc_Valid() const{
    return m_upc_isValid;
}

bool OAI_listings_post_request::isUpcDoesNotApply() const {
    return m_upc_does_not_apply;
}
void OAI_listings_post_request::setUpcDoesNotApply(const bool &upc_does_not_apply) {
    m_upc_does_not_apply = upc_does_not_apply;
    m_upc_does_not_apply_isSet = true;
}

bool OAI_listings_post_request::is_upc_does_not_apply_Set() const{
    return m_upc_does_not_apply_isSet;
}

bool OAI_listings_post_request::is_upc_does_not_apply_Valid() const{
    return m_upc_does_not_apply_isValid;
}

QList<OAI_listings_post_request_videos_inner> OAI_listings_post_request::getVideos() const {
    return m_videos;
}
void OAI_listings_post_request::setVideos(const QList<OAI_listings_post_request_videos_inner> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAI_listings_post_request::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAI_listings_post_request::is_videos_Valid() const{
    return m_videos_isValid;
}

QString OAI_listings_post_request::getYear() const {
    return m_year;
}
void OAI_listings_post_request::setYear(const QString &year) {
    m_year = year;
    m_year_isSet = true;
}

bool OAI_listings_post_request::is_year_Set() const{
    return m_year_isSet;
}

bool OAI_listings_post_request::is_year_Valid() const{
    return m_year_isValid;
}

bool OAI_listings_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preorder_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prop_65_warning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sold_as_is_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_exempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc_does_not_apply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_listings_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
