/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListingsApi_H
#define OAI_OAIListingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_conversations__id__offer_post_request.h"
#include "OAI_listings__listing_id__conversations_post_request.h"
#include "OAI_listings__slug__flag_post_request.h"
#include "OAI_listings_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListingsApi : public QObject {
    Q_OBJECT

public:
    OAIListingsApi(const int timeOut = 0);
    ~OAIListingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  query QString [optional]
    * @param[in]  auction_price_max float [optional]
    * @param[in]  category QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  decade QString [optional]
    * @param[in]  finish QString [optional]
    * @param[in]  handmade bool [optional]
    * @param[in]  item_city QString [optional]
    * @param[in]  item_country QString [optional]
    * @param[in]  item_region QString [optional]
    * @param[in]  item_state QString [optional]
    * @param[in]  make QList<QString> [optional]
    * @param[in]  model QString [optional]
    * @param[in]  must_not QString [optional]
    * @param[in]  price_max float [optional]
    * @param[in]  price_min float [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  year_max qint32 [optional]
    * @param[in]  year_min qint32 [optional]
    * @param[in]  accepts_gift_cards bool [optional]
    * @param[in]  preferred_seller bool [optional]
    * @param[in]  shop QString [optional]
    * @param[in]  shop_id QString [optional]
    * @param[in]  listing_type QString [optional]
    * @param[in]  ships_to QString [optional]
    * @param[in]  exclude_auctions bool [optional]
    * @param[in]  accepts_payment_plans bool [optional]
    * @param[in]  watchers_count_min qint32 [optional]
    * @param[in]  not_ids QList<QString> [optional]
    * @param[in]  local_pickup bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void listingsAllGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &auction_price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finish = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handmade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &item_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &make = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &must_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &price_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &accepts_gift_cards = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &preferred_seller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shop_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ships_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_auctions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &accepts_payment_plans = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &watchers_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &not_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &local_pickup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


    virtual void listingsFacetsSellerLocationGet();

    /**
    * @param[in]  query QString [optional]
    * @param[in]  auction_price_max float [optional]
    * @param[in]  category QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  conditions QList<QString> [optional]
    * @param[in]  decade QString [optional]
    * @param[in]  finish QString [optional]
    * @param[in]  handmade bool [optional]
    * @param[in]  item_city QString [optional]
    * @param[in]  item_country QString [optional]
    * @param[in]  item_region QString [optional]
    * @param[in]  item_state QString [optional]
    * @param[in]  make QList<QString> [optional]
    * @param[in]  model QString [optional]
    * @param[in]  must_not QString [optional]
    * @param[in]  price_max float [optional]
    * @param[in]  price_min float [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  year_max qint32 [optional]
    * @param[in]  year_min qint32 [optional]
    * @param[in]  accepts_gift_cards bool [optional]
    * @param[in]  preferred_seller bool [optional]
    * @param[in]  shop QString [optional]
    * @param[in]  shop_id QString [optional]
    * @param[in]  listing_type QString [optional]
    * @param[in]  ships_to QString [optional]
    * @param[in]  exclude_auctions bool [optional]
    * @param[in]  accepts_payment_plans bool [optional]
    * @param[in]  watchers_count_min qint32 [optional]
    * @param[in]  not_ids QList<QString> [optional]
    * @param[in]  local_pickup bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void listingsGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &auction_price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &conditions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &decade = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &finish = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handmade = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &item_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &item_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &make = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &must_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &price_max = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &price_min = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &year_max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &year_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &accepts_gift_cards = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &preferred_seller = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shop_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &listing_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ships_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_auctions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &accepts_payment_plans = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &watchers_count_min = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &not_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &local_pickup = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void listingsIdNegotiationGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_conversations__id__offer_post_request OAI_conversations__id__offer_post_request [optional]
    */
    virtual void listingsIdOfferPost(const QString &id, const ::OpenAPI::OptionalParam<OAI_conversations__id__offer_post_request> &oai_conversations__id__offer_post_request = ::OpenAPI::OptionalParam<OAI_conversations__id__offer_post_request>());

    /**
    * @param[in]  listing_id QString [required]
    * @param[in]  budget_type QString [required]
    */
    virtual void listingsListingIdBumpBudgetTypePost(const QString &listing_id, const QString &budget_type);

    /**
    * @param[in]  listing_id QString [required]
    */
    virtual void listingsListingIdBumpGet(const QString &listing_id);

    /**
    * @param[in]  listing_id QString [required]
    * @param[in]  oai_listings__listing_id__conversations_post_request OAI_listings__listing_id__conversations_post_request [optional]
    */
    virtual void listingsListingIdConversationsPost(const QString &listing_id, const ::OpenAPI::OptionalParam<OAI_listings__listing_id__conversations_post_request> &oai_listings__listing_id__conversations_post_request = ::OpenAPI::OptionalParam<OAI_listings__listing_id__conversations_post_request>());

    /**
    * @param[in]  listing_id QString [required]
    */
    virtual void listingsListingIdImagesGet(const QString &listing_id);

    /**
    * @param[in]  listing_id QString [required]
    * @param[in]  image_id QString [required]
    */
    virtual void listingsListingIdImagesImageIdDelete(const QString &listing_id, const QString &image_id);

    /**
    * @param[in]  listing_id QString [required]
    */
    virtual void listingsListingIdSalesGet(const QString &listing_id);

    /**
    * @param[in]  oai_listings_post_request OAI_listings_post_request [optional]
    */
    virtual void listingsPost(const ::OpenAPI::OptionalParam<OAI_listings_post_request> &oai_listings_post_request = ::OpenAPI::OptionalParam<OAI_listings_post_request>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugDelete(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugEditGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    * @param[in]  oai_listings__slug__flag_post_request OAI_listings__slug__flag_post_request [optional]
    */
    virtual void listingsSlugFlagPost(const QString &slug, const ::OpenAPI::OptionalParam<OAI_listings__slug__flag_post_request> &oai_listings__slug__flag_post_request = ::OpenAPI::OptionalParam<OAI_listings__slug__flag_post_request>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    * @param[in]  oai_listings_post_request OAI_listings_post_request [optional]
    */
    virtual void listingsSlugPut(const QString &slug, const ::OpenAPI::OptionalParam<OAI_listings_post_request> &oai_listings_post_request = ::OpenAPI::OptionalParam<OAI_listings_post_request>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugReviewsGet(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugReviewsPost(const QString &slug);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void listingsSlugSimilarListingsGet(const QString &slug);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listingsAllGetCallback(OAIHttpRequestWorker *worker);
    void listingsFacetsSellerLocationGetCallback(OAIHttpRequestWorker *worker);
    void listingsGetCallback(OAIHttpRequestWorker *worker);
    void listingsIdNegotiationGetCallback(OAIHttpRequestWorker *worker);
    void listingsIdOfferPostCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdBumpBudgetTypePostCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdBumpGetCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdConversationsPostCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdImagesGetCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdImagesImageIdDeleteCallback(OAIHttpRequestWorker *worker);
    void listingsListingIdSalesGetCallback(OAIHttpRequestWorker *worker);
    void listingsPostCallback(OAIHttpRequestWorker *worker);
    void listingsSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void listingsSlugEditGetCallback(OAIHttpRequestWorker *worker);
    void listingsSlugFlagPostCallback(OAIHttpRequestWorker *worker);
    void listingsSlugGetCallback(OAIHttpRequestWorker *worker);
    void listingsSlugPutCallback(OAIHttpRequestWorker *worker);
    void listingsSlugReviewsGetCallback(OAIHttpRequestWorker *worker);
    void listingsSlugReviewsPostCallback(OAIHttpRequestWorker *worker);
    void listingsSlugSimilarListingsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listingsAllGetSignal();
    void listingsFacetsSellerLocationGetSignal();
    void listingsGetSignal();
    void listingsIdNegotiationGetSignal();
    void listingsIdOfferPostSignal();
    void listingsListingIdBumpBudgetTypePostSignal();
    void listingsListingIdBumpGetSignal();
    void listingsListingIdConversationsPostSignal();
    void listingsListingIdImagesGetSignal();
    void listingsListingIdImagesImageIdDeleteSignal();
    void listingsListingIdSalesGetSignal();
    void listingsPostSignal();
    void listingsSlugDeleteSignal();
    void listingsSlugEditGetSignal();
    void listingsSlugFlagPostSignal();
    void listingsSlugGetSignal();
    void listingsSlugPutSignal();
    void listingsSlugReviewsGetSignal();
    void listingsSlugReviewsPostSignal();
    void listingsSlugSimilarListingsGetSignal();


    void listingsAllGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsFacetsSellerLocationGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsIdNegotiationGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsIdOfferPostSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdBumpBudgetTypePostSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdBumpGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdConversationsPostSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdImagesGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdImagesImageIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void listingsListingIdSalesGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsPostSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugEditGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugFlagPostSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugPutSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugReviewsGetSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugReviewsPostSignalFull(OAIHttpRequestWorker *worker);
    void listingsSlugSimilarListingsGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use listingsAllGetSignalError() instead")
    void listingsAllGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsAllGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsFacetsSellerLocationGetSignalError() instead")
    void listingsFacetsSellerLocationGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsFacetsSellerLocationGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsGetSignalError() instead")
    void listingsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsIdNegotiationGetSignalError() instead")
    void listingsIdNegotiationGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsIdNegotiationGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsIdOfferPostSignalError() instead")
    void listingsIdOfferPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsIdOfferPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdBumpBudgetTypePostSignalError() instead")
    void listingsListingIdBumpBudgetTypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdBumpBudgetTypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdBumpGetSignalError() instead")
    void listingsListingIdBumpGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdBumpGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdConversationsPostSignalError() instead")
    void listingsListingIdConversationsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdConversationsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdImagesGetSignalError() instead")
    void listingsListingIdImagesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdImagesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdImagesImageIdDeleteSignalError() instead")
    void listingsListingIdImagesImageIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdImagesImageIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdSalesGetSignalError() instead")
    void listingsListingIdSalesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdSalesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsPostSignalError() instead")
    void listingsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugDeleteSignalError() instead")
    void listingsSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugEditGetSignalError() instead")
    void listingsSlugEditGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugEditGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugFlagPostSignalError() instead")
    void listingsSlugFlagPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugFlagPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugGetSignalError() instead")
    void listingsSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugPutSignalError() instead")
    void listingsSlugPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugReviewsGetSignalError() instead")
    void listingsSlugReviewsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugReviewsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugReviewsPostSignalError() instead")
    void listingsSlugReviewsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugReviewsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugSimilarListingsGetSignalError() instead")
    void listingsSlugSimilarListingsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugSimilarListingsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listingsAllGetSignalErrorFull() instead")
    void listingsAllGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsAllGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsFacetsSellerLocationGetSignalErrorFull() instead")
    void listingsFacetsSellerLocationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsFacetsSellerLocationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsGetSignalErrorFull() instead")
    void listingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsIdNegotiationGetSignalErrorFull() instead")
    void listingsIdNegotiationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsIdNegotiationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsIdOfferPostSignalErrorFull() instead")
    void listingsIdOfferPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsIdOfferPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdBumpBudgetTypePostSignalErrorFull() instead")
    void listingsListingIdBumpBudgetTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdBumpBudgetTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdBumpGetSignalErrorFull() instead")
    void listingsListingIdBumpGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdBumpGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdConversationsPostSignalErrorFull() instead")
    void listingsListingIdConversationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdConversationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdImagesGetSignalErrorFull() instead")
    void listingsListingIdImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdImagesImageIdDeleteSignalErrorFull() instead")
    void listingsListingIdImagesImageIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdImagesImageIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsListingIdSalesGetSignalErrorFull() instead")
    void listingsListingIdSalesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsListingIdSalesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsPostSignalErrorFull() instead")
    void listingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugDeleteSignalErrorFull() instead")
    void listingsSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugEditGetSignalErrorFull() instead")
    void listingsSlugEditGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugEditGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugFlagPostSignalErrorFull() instead")
    void listingsSlugFlagPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugFlagPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugGetSignalErrorFull() instead")
    void listingsSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugPutSignalErrorFull() instead")
    void listingsSlugPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugReviewsGetSignalErrorFull() instead")
    void listingsSlugReviewsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugReviewsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugReviewsPostSignalErrorFull() instead")
    void listingsSlugReviewsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugReviewsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listingsSlugSimilarListingsGetSignalErrorFull() instead")
    void listingsSlugSimilarListingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listingsSlugSimilarListingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
