/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShopApi_H
#define OAI_OAIShopApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_shop_put_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShopApi : public QObject {
    Q_OBJECT

public:
    OAIShopApi(const int timeOut = 0);
    ~OAIShopApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void shopGet();


    virtual void shopListingConditionsGet();


    virtual void shopPaymentMethodsGet();

    /**
    * @param[in]  oai_shop_put_request OAI_shop_put_request [optional]
    */
    virtual void shopPut(const ::OpenAPI::OptionalParam<OAI_shop_put_request> &oai_shop_put_request = ::OpenAPI::OptionalParam<OAI_shop_put_request>());


    virtual void shopVacationDelete();


    virtual void shopVacationGet();


    virtual void shopVacationPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void shopGetCallback(OAIHttpRequestWorker *worker);
    void shopListingConditionsGetCallback(OAIHttpRequestWorker *worker);
    void shopPaymentMethodsGetCallback(OAIHttpRequestWorker *worker);
    void shopPutCallback(OAIHttpRequestWorker *worker);
    void shopVacationDeleteCallback(OAIHttpRequestWorker *worker);
    void shopVacationGetCallback(OAIHttpRequestWorker *worker);
    void shopVacationPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void shopGetSignal();
    void shopListingConditionsGetSignal();
    void shopPaymentMethodsGetSignal();
    void shopPutSignal();
    void shopVacationDeleteSignal();
    void shopVacationGetSignal();
    void shopVacationPostSignal();


    void shopGetSignalFull(OAIHttpRequestWorker *worker);
    void shopListingConditionsGetSignalFull(OAIHttpRequestWorker *worker);
    void shopPaymentMethodsGetSignalFull(OAIHttpRequestWorker *worker);
    void shopPutSignalFull(OAIHttpRequestWorker *worker);
    void shopVacationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void shopVacationGetSignalFull(OAIHttpRequestWorker *worker);
    void shopVacationPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use shopGetSignalError() instead")
    void shopGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopListingConditionsGetSignalError() instead")
    void shopListingConditionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopListingConditionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopPaymentMethodsGetSignalError() instead")
    void shopPaymentMethodsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopPaymentMethodsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopPutSignalError() instead")
    void shopPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationDeleteSignalError() instead")
    void shopVacationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationGetSignalError() instead")
    void shopVacationGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationPostSignalError() instead")
    void shopVacationPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use shopGetSignalErrorFull() instead")
    void shopGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopListingConditionsGetSignalErrorFull() instead")
    void shopListingConditionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopListingConditionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopPaymentMethodsGetSignalErrorFull() instead")
    void shopPaymentMethodsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopPaymentMethodsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopPutSignalErrorFull() instead")
    void shopPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationDeleteSignalErrorFull() instead")
    void shopVacationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationGetSignalErrorFull() instead")
    void shopVacationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shopVacationPostSignalErrorFull() instead")
    void shopVacationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shopVacationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
