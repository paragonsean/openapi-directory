/**
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesApi_H
#define OAI_OAISalesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesApi : public QObject {
    Q_OBJECT

public:
    OAISalesApi(const int timeOut = 0);
    ~OAISalesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void salesReverbGet();

    /**
    * @param[in]  sale_id QString [required]
    */
    virtual void salesSaleIdListingsDelete(const QString &sale_id);

    /**
    * @param[in]  sale_id QString [required]
    */
    virtual void salesSaleIdListingsPost(const QString &sale_id);


    virtual void salesSellerGet();

    /**
    * @param[in]  slug QString [required]
    */
    virtual void salesSlugGet(const QString &slug);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesReverbGetCallback(OAIHttpRequestWorker *worker);
    void salesSaleIdListingsDeleteCallback(OAIHttpRequestWorker *worker);
    void salesSaleIdListingsPostCallback(OAIHttpRequestWorker *worker);
    void salesSellerGetCallback(OAIHttpRequestWorker *worker);
    void salesSlugGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesReverbGetSignal();
    void salesSaleIdListingsDeleteSignal();
    void salesSaleIdListingsPostSignal();
    void salesSellerGetSignal();
    void salesSlugGetSignal();


    void salesReverbGetSignalFull(OAIHttpRequestWorker *worker);
    void salesSaleIdListingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void salesSaleIdListingsPostSignalFull(OAIHttpRequestWorker *worker);
    void salesSellerGetSignalFull(OAIHttpRequestWorker *worker);
    void salesSlugGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use salesReverbGetSignalError() instead")
    void salesReverbGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesReverbGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSaleIdListingsDeleteSignalError() instead")
    void salesSaleIdListingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesSaleIdListingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSaleIdListingsPostSignalError() instead")
    void salesSaleIdListingsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesSaleIdListingsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSellerGetSignalError() instead")
    void salesSellerGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesSellerGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSlugGetSignalError() instead")
    void salesSlugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesSlugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesReverbGetSignalErrorFull() instead")
    void salesReverbGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesReverbGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSaleIdListingsDeleteSignalErrorFull() instead")
    void salesSaleIdListingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesSaleIdListingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSaleIdListingsPostSignalErrorFull() instead")
    void salesSaleIdListingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesSaleIdListingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSellerGetSignalErrorFull() instead")
    void salesSellerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesSellerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesSlugGetSignalErrorFull() instead")
    void salesSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
