/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationsConversationIdOfferPostRequest;
import org.openapitools.client.model.ListingsListingIdConversationsPostRequest;
import org.openapitools.client.model.MyAccountPutRequest;
import org.openapitools.client.model.MyConversationsIdPutRequest;
import org.openapitools.client.model.MyConversationsPostRequest;
import org.openapitools.client.model.MyFollowsArticlesPostRequest;
import org.openapitools.client.model.MyFollowsSearchPostRequest;
import org.openapitools.client.model.MyListingsSlugStateEndPutRequest;
import org.openapitools.client.model.MyNegotiationsIdAcceptPostRequest;
import org.openapitools.client.model.MyOrdersSellingIdMarkPickedUpPostRequest;
import org.openapitools.client.model.MyOrdersSellingIdShipPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyApi
 */
@Disabled
public class MyApiTest {

    private final MyApi api = new MyApi();

    /**
     * Get account details
     *
     * Get account details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAccountGetTest() throws ApiException {
        api.myAccountGet();
        // TODO: test validations
    }

    /**
     * Update account details
     *
     * Update account details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAccountPutTest() throws ApiException {
        MyAccountPutRequest myAccountPutRequest = null;
        api.myAccountPut(myAccountPutRequest);
        // TODO: test validations
    }

    /**
     * Delete an existing address in your address book
     *
     * Delete an existing address in your address book
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAddressesAddressIdDeleteTest() throws ApiException {
        String addressId = null;
        api.myAddressesAddressIdDelete(addressId);
        // TODO: test validations
    }

    /**
     * Update an existing address in your address book
     *
     * Update an existing address in your address book
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAddressesAddressIdPutTest() throws ApiException {
        String addressId = null;
        api.myAddressesAddressIdPut(addressId);
        // TODO: test validations
    }

    /**
     * See all addresses in your address book
     *
     * See all addresses in your address book
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAddressesGetTest() throws ApiException {
        api.myAddressesGet();
        // TODO: test validations
    }

    /**
     * Create a new address in your address book
     *
     * Create a new address in your address book
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myAddressesPostTest() throws ApiException {
        api.myAddressesPost();
        // TODO: test validations
    }

    /**
     * Send a message
     *
     * Send a message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myConversationsConversationIdMessagesPostTest() throws ApiException {
        String conversationId = null;
        ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest = null;
        api.myConversationsConversationIdMessagesPost(conversationId, listingsListingIdConversationsPostRequest);
        // TODO: test validations
    }

    /**
     * Get a list of your conversations
     *
     * Get a list of your conversations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myConversationsGetTest() throws ApiException {
        String search = null;
        Boolean unreadOnly = null;
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        api.myConversationsGet(search, unreadOnly, page, perPage, offset);
        // TODO: test validations
    }

    /**
     * Display conversation details with messages in natural time order (oldest to newest)
     *
     * Display conversation details with messages in natural time order (oldest to newest)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myConversationsIdGetTest() throws ApiException {
        String id = null;
        api.myConversationsIdGet(id);
        // TODO: test validations
    }

    /**
     * Mark a conversation read/unread
     *
     * Mark a conversation read/unread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myConversationsIdPutTest() throws ApiException {
        String id = null;
        MyConversationsIdPutRequest myConversationsIdPutRequest = null;
        api.myConversationsIdPut(id, myConversationsIdPutRequest);
        // TODO: test validations
    }

    /**
     * Start a conversation
     *
     * Start a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myConversationsPostTest() throws ApiException {
        MyConversationsPostRequest myConversationsPostRequest = null;
        api.myConversationsPost(myConversationsPostRequest);
        // TODO: test validations
    }

    /**
     * Get your actionable status counts
     *
     * Get your actionable status counts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myCountsGetTest() throws ApiException {
        api.myCountsGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myCuratedSetProductProductIdDeleteTest() throws ApiException {
        String productId = null;
        api.myCuratedSetProductProductIdDelete(productId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myCuratedSetProductProductIdPostTest() throws ApiException {
        String productId = null;
        api.myCuratedSetProductProductIdPost(productId);
        // TODO: test validations
    }

    /**
     * get your feed customization options
     *
     * get your feed customization options
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFeedCustomizeGetTest() throws ApiException {
        api.myFeedCustomizeGet();
        // TODO: test validations
    }

    /**
     * Get listings from your feed
     *
     * Get listings from your feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFeedGetTest() throws ApiException {
        api.myFeedGet();
        // TODO: test validations
    }

    /**
     * get your feed
     *
     * get your feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFeedGridGetTest() throws ApiException {
        api.myFeedGridGet();
        // TODO: test validations
    }

    /**
     * List of received feedback
     *
     * List of received feedback
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFeedbackReceivedGetTest() throws ApiException {
        api.myFeedbackReceivedGet();
        // TODO: test validations
    }

    /**
     * List of sent feedback
     *
     * List of sent feedback
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFeedbackSentGetTest() throws ApiException {
        api.myFeedbackSentGet();
        // TODO: test validations
    }

    /**
     * Returns a user&#39;s ArticleCategoryFollows
     *
     * Returns a user&#39;s ArticleCategoryFollows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsArticlesGetTest() throws ApiException {
        api.myFollowsArticlesGet();
        // TODO: test validations
    }

    /**
     * Set a user&#39;s ArticleCategoryFollows
     *
     * Set a user&#39;s ArticleCategoryFollows
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsArticlesPostTest() throws ApiException {
        MyFollowsArticlesPostRequest myFollowsArticlesPostRequest = null;
        api.myFollowsArticlesPost(myFollowsArticlesPostRequest);
        // TODO: test validations
    }

    /**
     * Unfollow a brand
     *
     * Unfollow a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsBrandsSlugDeleteTest() throws ApiException {
        String slug = null;
        api.myFollowsBrandsSlugDelete(slug);
        // TODO: test validations
    }

    /**
     * Follow status for a brand
     *
     * Follow status for a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsBrandsSlugGetTest() throws ApiException {
        String slug = null;
        api.myFollowsBrandsSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Follow a brand
     *
     * Follow a brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsBrandsSlugPostTest() throws ApiException {
        String slug = null;
        api.myFollowsBrandsSlugPost(slug);
        // TODO: test validations
    }

    /**
     * Unfollow a subcategory
     *
     * Unfollow a subcategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesCategorySubcategoryDeleteTest() throws ApiException {
        String category = null;
        String subcategory = null;
        api.myFollowsCategoriesCategorySubcategoryDelete(category, subcategory);
        // TODO: test validations
    }

    /**
     * Follow status for a subcategory
     *
     * Follow status for a subcategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesCategorySubcategoryGetTest() throws ApiException {
        String category = null;
        String subcategory = null;
        api.myFollowsCategoriesCategorySubcategoryGet(category, subcategory);
        // TODO: test validations
    }

    /**
     * Follow a subcategory
     *
     * Follow a subcategory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesCategorySubcategoryPostTest() throws ApiException {
        String category = null;
        String subcategory = null;
        api.myFollowsCategoriesCategorySubcategoryPost(category, subcategory);
        // TODO: test validations
    }

    /**
     * Unfollow a category
     *
     * Unfollow a category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesIdentifierDeleteTest() throws ApiException {
        String identifier = null;
        api.myFollowsCategoriesIdentifierDelete(identifier);
        // TODO: test validations
    }

    /**
     * Follow status for a category
     *
     * Follow status for a category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesIdentifierGetTest() throws ApiException {
        String identifier = null;
        api.myFollowsCategoriesIdentifierGet(identifier);
        // TODO: test validations
    }

    /**
     * Follow a category
     *
     * Follow a category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesIdentifierPostTest() throws ApiException {
        String identifier = null;
        api.myFollowsCategoriesIdentifierPost(identifier);
        // TODO: test validations
    }

    /**
     * Follow a category
     *
     * Follow a category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCategoriesUuidPostTest() throws ApiException {
        String uuid = null;
        api.myFollowsCategoriesUuidPost(uuid);
        // TODO: test validations
    }

    /**
     * Unfollow a collection
     *
     * Unfollow a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCollectionsSlugDeleteTest() throws ApiException {
        String slug = null;
        api.myFollowsCollectionsSlugDelete(slug);
        // TODO: test validations
    }

    /**
     * Follow status for a collection
     *
     * Follow status for a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCollectionsSlugGetTest() throws ApiException {
        String slug = null;
        api.myFollowsCollectionsSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Follow a collection
     *
     * Follow a collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsCollectionsSlugPostTest() throws ApiException {
        String slug = null;
        api.myFollowsCollectionsSlugPost(slug);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsFollowIdAlertDeleteTest() throws ApiException {
        String followId = null;
        api.myFollowsFollowIdAlertDelete(followId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsFollowIdAlertPostTest() throws ApiException {
        String followId = null;
        api.myFollowsFollowIdAlertPost(followId);
        // TODO: test validations
    }

    /**
     * Delete a follow
     *
     * Delete a follow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsFollowIdDeleteTest() throws ApiException {
        String followId = null;
        api.myFollowsFollowIdDelete(followId);
        // TODO: test validations
    }

    /**
     * See what the user is following
     *
     * See what the user is following
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsGetTest() throws ApiException {
        api.myFollowsGet();
        // TODO: test validations
    }

    /**
     * Unfollow a handpicked collection
     *
     * Unfollow a handpicked collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsHandpickedSlugDeleteTest() throws ApiException {
        String slug = null;
        api.myFollowsHandpickedSlugDelete(slug);
        // TODO: test validations
    }

    /**
     * Follow status for a handpicked collection
     *
     * Follow status for a handpicked collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsHandpickedSlugGetTest() throws ApiException {
        String slug = null;
        api.myFollowsHandpickedSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Follow a handpicked collection
     *
     * Follow a handpicked collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsHandpickedSlugPostTest() throws ApiException {
        String slug = null;
        api.myFollowsHandpickedSlugPost(slug);
        // TODO: test validations
    }

    /**
     * Follow status for a search
     *
     * Follow status for a search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsSearchGetTest() throws ApiException {
        api.myFollowsSearchGet();
        // TODO: test validations
    }

    /**
     * Follow a search
     *
     * Follow a search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsSearchPostTest() throws ApiException {
        MyFollowsSearchPostRequest myFollowsSearchPostRequest = null;
        api.myFollowsSearchPost(myFollowsSearchPostRequest);
        // TODO: test validations
    }

    /**
     * Unfollow a shop
     *
     * Unfollow a shop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsShopsSlugDeleteTest() throws ApiException {
        String slug = null;
        api.myFollowsShopsSlugDelete(slug);
        // TODO: test validations
    }

    /**
     * Follow status for a shop
     *
     * Follow status for a shop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsShopsSlugGetTest() throws ApiException {
        String slug = null;
        api.myFollowsShopsSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Follow a shop
     *
     * Follow a shop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myFollowsShopsSlugPostTest() throws ApiException {
        String slug = null;
        api.myFollowsShopsSlugPost(slug);
        // TODO: test validations
    }

    /**
     * Retrieve a list your draft listings
     *
     * Retrieve a list your draft listings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myListingsDraftsGetTest() throws ApiException {
        String query = null;
        Float auctionPriceMax = null;
        String category = null;
        String productType = null;
        List<String> conditions = null;
        String decade = null;
        String finish = null;
        Boolean handmade = null;
        String itemCity = null;
        String itemCountry = null;
        String itemRegion = null;
        String itemState = null;
        List<String> make = null;
        String model = null;
        String mustNot = null;
        Float priceMax = null;
        Float priceMin = null;
        String currency = null;
        Integer yearMax = null;
        Integer yearMin = null;
        Boolean acceptsGiftCards = null;
        Boolean preferredSeller = null;
        String shop = null;
        String shopId = null;
        String listingType = null;
        String shipsTo = null;
        Boolean excludeAuctions = null;
        Boolean acceptsPaymentPlans = null;
        Integer watchersCountMin = null;
        List<String> notIds = null;
        Boolean localPickup = null;
        api.myListingsDraftsGet(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup);
        // TODO: test validations
    }

    /**
     * Retrieve a list of live listings for the seller. To search all listings specify state&#x3D;all
     *
     * Retrieve a list of live listings for the seller. To search all listings specify state&#x3D;all
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myListingsGetTest() throws ApiException {
        String query = null;
        Float auctionPriceMax = null;
        String category = null;
        String productType = null;
        List<String> conditions = null;
        String decade = null;
        String finish = null;
        Boolean handmade = null;
        String itemCity = null;
        String itemCountry = null;
        String itemRegion = null;
        String itemState = null;
        List<String> make = null;
        String model = null;
        String mustNot = null;
        Float priceMax = null;
        Float priceMin = null;
        String currency = null;
        Integer yearMax = null;
        Integer yearMin = null;
        Boolean acceptsGiftCards = null;
        Boolean preferredSeller = null;
        String shop = null;
        String shopId = null;
        String listingType = null;
        String shipsTo = null;
        Boolean excludeAuctions = null;
        Boolean acceptsPaymentPlans = null;
        Integer watchersCountMin = null;
        List<String> notIds = null;
        Boolean localPickup = null;
        String state = null;
        String sku = null;
        api.myListingsGet(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, state, sku);
        // TODO: test validations
    }

    /**
     * Get a list of active negotiations as a seller
     *
     * Get a list of active negotiations as a seller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myListingsNegotiationsGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        api.myListingsNegotiationsGet(page, perPage, offset);
        // TODO: test validations
    }

    /**
     * End a listing
     *
     * End a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myListingsSlugStateEndPutTest() throws ApiException {
        String slug = null;
        MyListingsSlugStateEndPutRequest myListingsSlugStateEndPutRequest = null;
        api.myListingsSlugStateEndPut(slug, myListingsSlugStateEndPutRequest);
        // TODO: test validations
    }

    /**
     * Get a list of your lists (wishlist, watch list, etc)
     *
     * Get a list of your lists (wishlist, watch list, etc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myListsGetTest() throws ApiException {
        api.myListsGet();
        // TODO: test validations
    }

    /**
     * Get a list of active negotiations as a buyer
     *
     * Get a list of active negotiations as a buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myNegotiationsBuyingGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        api.myNegotiationsBuyingGet(page, perPage, offset);
        // TODO: test validations
    }

    /**
     * Accept an offer
     *
     * Accept an offer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myNegotiationsIdAcceptPostTest() throws ApiException {
        String id = null;
        MyNegotiationsIdAcceptPostRequest myNegotiationsIdAcceptPostRequest = null;
        api.myNegotiationsIdAcceptPost(id, myNegotiationsIdAcceptPostRequest);
        // TODO: test validations
    }

    /**
     * Counter an offer
     *
     * Counter an offer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myNegotiationsIdCounterPostTest() throws ApiException {
        String id = null;
        ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest = null;
        api.myNegotiationsIdCounterPost(id, conversationsConversationIdOfferPostRequest);
        // TODO: test validations
    }

    /**
     * Decline an offer
     *
     * Decline an offer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myNegotiationsIdDeclinePostTest() throws ApiException {
        String id = null;
        api.myNegotiationsIdDeclinePost(id);
        // TODO: test validations
    }

    /**
     * Get offer details
     *
     * Get offer details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myNegotiationsIdGetTest() throws ApiException {
        String id = null;
        api.myNegotiationsIdGet(id);
        // TODO: test validations
    }

    /**
     * List of orders that need feedback
     *
     * List of orders that need feedback
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersAwaitingFeedbackGetTest() throws ApiException {
        api.myOrdersAwaitingFeedbackGet();
        // TODO: test validations
    }

    /**
     * Returns all orders, newest first.
     *
     * Returns all orders, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersBuyingAllGetTest() throws ApiException {
        api.myOrdersBuyingAllGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersBuyingByUuidUuidGetTest() throws ApiException {
        String uuid = null;
        api.myOrdersBuyingByUuidUuidGet(uuid);
        // TODO: test validations
    }

    /**
     * Returns order details for a buyer
     *
     * Returns order details for a buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersBuyingIdGetTest() throws ApiException {
        String id = null;
        api.myOrdersBuyingIdGet(id);
        // TODO: test validations
    }

    /**
     * Marks an order as received by the buyer
     *
     * Marks an order as received by the buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersBuyingIdMarkReceivedPostTest() throws ApiException {
        String id = null;
        api.myOrdersBuyingIdMarkReceivedPost(id);
        // TODO: test validations
    }

    /**
     * Returns unpaid orders, newest first.
     *
     * Returns unpaid orders, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersBuyingUnpaidGetTest() throws ApiException {
        api.myOrdersBuyingUnpaidGet();
        // TODO: test validations
    }

    /**
     * Get all seller orders, newest first.
     *
     * Get all seller orders, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingAllGetTest() throws ApiException {
        api.myOrdersSellingAllGet();
        // TODO: test validations
    }

    /**
     * Get unpaid seller orders, newest first.
     *
     * Get unpaid seller orders, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingAwaitingShipmentGetTest() throws ApiException {
        api.myOrdersSellingAwaitingShipmentGet();
        // TODO: test validations
    }

    /**
     * See previous orders from buyer
     *
     * See previous orders from buyer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingBuyerHistoryBuyerIdGetTest() throws ApiException {
        String buyerId = null;
        api.myOrdersSellingBuyerHistoryBuyerIdGet(buyerId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingByUuidUuidGetTest() throws ApiException {
        String uuid = null;
        api.myOrdersSellingByUuidUuidGet(uuid);
        // TODO: test validations
    }

    /**
     * Returns order details for a seller
     *
     * Returns order details for a seller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingIdGetTest() throws ApiException {
        String id = null;
        api.myOrdersSellingIdGet(id);
        // TODO: test validations
    }

    /**
     * Marks an order as picked up
     *
     * Marks an order as picked up
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingIdMarkPickedUpPostTest() throws ApiException {
        String id = null;
        MyOrdersSellingIdMarkPickedUpPostRequest myOrdersSellingIdMarkPickedUpPostRequest = null;
        api.myOrdersSellingIdMarkPickedUpPost(id, myOrdersSellingIdMarkPickedUpPostRequest);
        // TODO: test validations
    }

    /**
     * Marks an order as shipped
     *
     * Marks an order as shipped
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingIdShipPostTest() throws ApiException {
        String id = null;
        MyOrdersSellingIdShipPostRequest myOrdersSellingIdShipPostRequest = null;
        api.myOrdersSellingIdShipPost(id, myOrdersSellingIdShipPostRequest);
        // TODO: test validations
    }

    /**
     * Initiate a refund for a sold order
     *
     * Initiate a refund for a sold order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingOrderIdRefundRequestsPostTest() throws ApiException {
        String orderId = null;
        api.myOrdersSellingOrderIdRefundRequestsPost(orderId);
        // TODO: test validations
    }

    /**
     * Get unpaid seller orders, newest first.
     *
     * Get unpaid seller orders, newest first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myOrdersSellingUnpaidGetTest() throws ApiException {
        api.myOrdersSellingUnpaidGet();
        // TODO: test validations
    }

    /**
     * Get payments
     *
     * Get payments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myPaymentsSellingGetTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        String createdStartDate = null;
        String createdEndDate = null;
        String updatedStartDate = null;
        String updatedEndDate = null;
        String orderId = null;
        api.myPaymentsSellingGet(page, perPage, offset, createdStartDate, createdEndDate, updatedStartDate, updatedEndDate, orderId);
        // TODO: test validations
    }

    /**
     * Get payment
     *
     * Get payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myPaymentsSellingIdGetTest() throws ApiException {
        String id = null;
        api.myPaymentsSellingIdGet(id);
        // TODO: test validations
    }

    /**
     * Get a list of payouts
     *
     * Get a list of payouts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myPayoutsGetTest() throws ApiException {
        api.myPayoutsGet();
        // TODO: test validations
    }

    /**
     * Read the line items of a payout
     *
     * Read the line items of a payout
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myPayoutsIdLineItemsGetTest() throws ApiException {
        String id = null;
        api.myPayoutsIdLineItemsGet(id);
        // TODO: test validations
    }

    /**
     * Get a list of refund requests as a seller
     *
     * Get a list of refund requests as a seller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myRefundRequestsSellingGetTest() throws ApiException {
        api.myRefundRequestsSellingGet();
        // TODO: test validations
    }

    /**
     * Update a refund request for a sold order
     *
     * Update a refund request for a sold order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myRefundRequestsSellingIdPutTest() throws ApiException {
        String id = null;
        api.myRefundRequestsSellingIdPut(id);
        // TODO: test validations
    }

    /**
     * Get a list of your recently viewed listings.
     *
     * Get a list of your recently viewed listings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myViewedListingsGetTest() throws ApiException {
        api.myViewedListingsGet();
        // TODO: test validations
    }

    /**
     * Get a list of wishlisted items
     *
     * Get a list of wishlisted items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myWishlistGetTest() throws ApiException {
        api.myWishlistGet();
        // TODO: test validations
    }

    /**
     * Remove a listing from your wishlist
     *
     * Remove a listing from your wishlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myWishlistIdDeleteTest() throws ApiException {
        String id = null;
        api.myWishlistIdDelete(id);
        // TODO: test validations
    }

    /**
     * Add a listing to your wishlist
     *
     * Add a listing to your wishlist
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void myWishlistIdPutTest() throws ApiException {
        String id = null;
        api.myWishlistIdPut(id);
        // TODO: test validations
    }

}
