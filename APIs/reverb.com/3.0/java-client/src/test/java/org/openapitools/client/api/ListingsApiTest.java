/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConversationsIdOfferPostRequest;
import org.openapitools.client.model.ListingsListingIdConversationsPostRequest;
import org.openapitools.client.model.ListingsPostRequest;
import org.openapitools.client.model.ListingsSlugFlagPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ListingsApi
 */
@Disabled
public class ListingsApiTest {

    private final ListingsApi api = new ListingsApi();

    /**
     * All listings including used, handmade, and brand new
     *
     * All listings including used, handmade, and brand new
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsAllGetTest() throws ApiException {
        String query = null;
        Float auctionPriceMax = null;
        String category = null;
        String productType = null;
        List<String> conditions = null;
        String decade = null;
        String finish = null;
        Boolean handmade = null;
        String itemCity = null;
        String itemCountry = null;
        String itemRegion = null;
        String itemState = null;
        List<String> make = null;
        String model = null;
        String mustNot = null;
        Float priceMax = null;
        Float priceMin = null;
        String currency = null;
        Integer yearMax = null;
        Integer yearMin = null;
        Boolean acceptsGiftCards = null;
        Boolean preferredSeller = null;
        String shop = null;
        String shopId = null;
        String listingType = null;
        String shipsTo = null;
        Boolean excludeAuctions = null;
        Boolean acceptsPaymentPlans = null;
        Integer watchersCountMin = null;
        List<String> notIds = null;
        Boolean localPickup = null;
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        api.listingsAllGet(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset);
        // TODO: test validations
    }

    /**
     * Individual facets
     *
     * Individual facets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsFacetsSellerLocationGetTest() throws ApiException {
        api.listingsFacetsSellerLocationGet();
        // TODO: test validations
    }

    /**
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     *
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsGetTest() throws ApiException {
        String query = null;
        Float auctionPriceMax = null;
        String category = null;
        String productType = null;
        List<String> conditions = null;
        String decade = null;
        String finish = null;
        Boolean handmade = null;
        String itemCity = null;
        String itemCountry = null;
        String itemRegion = null;
        String itemState = null;
        List<String> make = null;
        String model = null;
        String mustNot = null;
        Float priceMax = null;
        Float priceMin = null;
        String currency = null;
        Integer yearMax = null;
        Integer yearMin = null;
        Boolean acceptsGiftCards = null;
        Boolean preferredSeller = null;
        String shop = null;
        String shopId = null;
        String listingType = null;
        String shipsTo = null;
        Boolean excludeAuctions = null;
        Boolean acceptsPaymentPlans = null;
        Integer watchersCountMin = null;
        List<String> notIds = null;
        Boolean localPickup = null;
        Integer page = null;
        Integer perPage = null;
        Integer offset = null;
        api.listingsGet(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset);
        // TODO: test validations
    }

    /**
     * Returns the latest negotiation for the requesting user given a listing id
     *
     * Returns the latest negotiation for the requesting user given a listing id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsIdNegotiationGetTest() throws ApiException {
        String id = null;
        api.listingsIdNegotiationGet(id);
        // TODO: test validations
    }

    /**
     * Make an offer to the seller of a listing
     *
     * Make an offer to the seller of a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsIdOfferPostTest() throws ApiException {
        String id = null;
        ConversationsIdOfferPostRequest conversationsIdOfferPostRequest = null;
        api.listingsIdOfferPost(id, conversationsIdOfferPostRequest);
        // TODO: test validations
    }

    /**
     * Bump a listing
     *
     * Bump a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdBumpBudgetTypePostTest() throws ApiException {
        String listingId = null;
        String budgetType = null;
        api.listingsListingIdBumpBudgetTypePost(listingId, budgetType);
        // TODO: test validations
    }

    /**
     * View available bump tiers and stats for a listing
     *
     * View available bump tiers and stats for a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdBumpGetTest() throws ApiException {
        String listingId = null;
        api.listingsListingIdBumpGet(listingId);
        // TODO: test validations
    }

    /**
     * Start a conversation with a seller
     *
     * Start a conversation with a seller
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdConversationsPostTest() throws ApiException {
        String listingId = null;
        ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest = null;
        api.listingsListingIdConversationsPost(listingId, listingsListingIdConversationsPostRequest);
        // TODO: test validations
    }

    /**
     * View the images associated with a particular listing
     *
     * View the images associated with a particular listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdImagesGetTest() throws ApiException {
        String listingId = null;
        api.listingsListingIdImagesGet(listingId);
        // TODO: test validations
    }

    /**
     * Delete an image from a listing
     *
     * Delete an image from a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdImagesImageIdDeleteTest() throws ApiException {
        String listingId = null;
        String imageId = null;
        api.listingsListingIdImagesImageIdDelete(listingId, imageId);
        // TODO: test validations
    }

    /**
     * See all sales that include a listing.
     *
     * See all sales that include a listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsListingIdSalesGetTest() throws ApiException {
        String listingId = null;
        api.listingsListingIdSalesGet(listingId);
        // TODO: test validations
    }

    /**
     * Create a listing
     *
     * Create a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsPostTest() throws ApiException {
        ListingsPostRequest listingsPostRequest = null;
        api.listingsPost(listingsPostRequest);
        // TODO: test validations
    }

    /**
     * Delete a draft listing. Cannot be used on non-drafts.
     *
     * Delete a draft listing. Cannot be used on non-drafts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugDeleteTest() throws ApiException {
        String slug = null;
        api.listingsSlugDelete(slug);
        // TODO: test validations
    }

    /**
     * Edit listing.
     *
     * Edit listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugEditGetTest() throws ApiException {
        String slug = null;
        api.listingsSlugEditGet(slug);
        // TODO: test validations
    }

    /**
     * Flag a listing for inappropriate content or fraud
     *
     * Flag a listing for inappropriate content or fraud
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugFlagPostTest() throws ApiException {
        String slug = null;
        ListingsSlugFlagPostRequest listingsSlugFlagPostRequest = null;
        api.listingsSlugFlagPost(slug, listingsSlugFlagPostRequest);
        // TODO: test validations
    }

    /**
     * Listing details
     *
     * Listing details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugGetTest() throws ApiException {
        String slug = null;
        api.listingsSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Update a listing
     *
     * Update a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugPutTest() throws ApiException {
        String slug = null;
        ListingsPostRequest listingsPostRequest = null;
        api.listingsSlugPut(slug, listingsPostRequest);
        // TODO: test validations
    }

    /**
     * View reviews of a listing
     *
     * View reviews of a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugReviewsGetTest() throws ApiException {
        String slug = null;
        api.listingsSlugReviewsGet(slug);
        // TODO: test validations
    }

    /**
     * Create a review for a listing
     *
     * Create a review for a listing
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugReviewsPostTest() throws ApiException {
        String slug = null;
        api.listingsSlugReviewsPost(slug);
        // TODO: test validations
    }

    /**
     * Listing details
     *
     * Listing details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listingsSlugSimilarListingsGetTest() throws ApiException {
        String slug = null;
        api.listingsSlugSimilarListingsGet(slug);
        // TODO: test validations
    }

}
