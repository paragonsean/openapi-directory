/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MyConversationsPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:29.182990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MyConversationsPostRequest {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CLOUDINARY_PHOTOS = "cloudinary_photos";
  @SerializedName(SERIALIZED_NAME_CLOUDINARY_PHOTOS)
  private List<String> cloudinaryPhotos = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTING_ID = "listing_id";
  @SerializedName(SERIALIZED_NAME_LISTING_ID)
  private Integer listingId;

  public static final String SERIALIZED_NAME_RECIPIENT_ID = "recipient_id";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ID)
  private Integer recipientId;

  public static final String SERIALIZED_NAME_RECIPIENT_UUID = "recipient_uuid";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_UUID)
  private String recipientUuid;

  public static final String SERIALIZED_NAME_SHOP_ID = "shop_id";
  @SerializedName(SERIALIZED_NAME_SHOP_ID)
  private String shopId;

  public MyConversationsPostRequest() {
  }

  public MyConversationsPostRequest body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the message
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public MyConversationsPostRequest cloudinaryPhotos(List<String> cloudinaryPhotos) {
    this.cloudinaryPhotos = cloudinaryPhotos;
    return this;
  }

  public MyConversationsPostRequest addCloudinaryPhotosItem(String cloudinaryPhotosItem) {
    if (this.cloudinaryPhotos == null) {
      this.cloudinaryPhotos = new ArrayList<>();
    }
    this.cloudinaryPhotos.add(cloudinaryPhotosItem);
    return this;
  }

  /**
   * An array of cloudinary data hashes (Reverb internal use only).
   * @return cloudinaryPhotos
   */
  @javax.annotation.Nullable
  public List<String> getCloudinaryPhotos() {
    return cloudinaryPhotos;
  }

  public void setCloudinaryPhotos(List<String> cloudinaryPhotos) {
    this.cloudinaryPhotos = cloudinaryPhotos;
  }


  public MyConversationsPostRequest listingId(Integer listingId) {
    this.listingId = listingId;
    return this;
  }

  /**
   * The id of the listing being discussed
   * @return listingId
   */
  @javax.annotation.Nullable
  public Integer getListingId() {
    return listingId;
  }

  public void setListingId(Integer listingId) {
    this.listingId = listingId;
  }


  public MyConversationsPostRequest recipientId(Integer recipientId) {
    this.recipientId = recipientId;
    return this;
  }

  /**
   * The id of the user you are trying to contact
   * @return recipientId
   */
  @javax.annotation.Nullable
  public Integer getRecipientId() {
    return recipientId;
  }

  public void setRecipientId(Integer recipientId) {
    this.recipientId = recipientId;
  }


  public MyConversationsPostRequest recipientUuid(String recipientUuid) {
    this.recipientUuid = recipientUuid;
    return this;
  }

  /**
   * The uuid of the user you are trying to contact
   * @return recipientUuid
   */
  @javax.annotation.Nullable
  public String getRecipientUuid() {
    return recipientUuid;
  }

  public void setRecipientUuid(String recipientUuid) {
    this.recipientUuid = recipientUuid;
  }


  public MyConversationsPostRequest shopId(String shopId) {
    this.shopId = shopId;
    return this;
  }

  /**
   * The id of the shop you are trying to contact
   * @return shopId
   */
  @javax.annotation.Nullable
  public String getShopId() {
    return shopId;
  }

  public void setShopId(String shopId) {
    this.shopId = shopId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MyConversationsPostRequest myConversationsPostRequest = (MyConversationsPostRequest) o;
    return Objects.equals(this.body, myConversationsPostRequest.body) &&
        Objects.equals(this.cloudinaryPhotos, myConversationsPostRequest.cloudinaryPhotos) &&
        Objects.equals(this.listingId, myConversationsPostRequest.listingId) &&
        Objects.equals(this.recipientId, myConversationsPostRequest.recipientId) &&
        Objects.equals(this.recipientUuid, myConversationsPostRequest.recipientUuid) &&
        Objects.equals(this.shopId, myConversationsPostRequest.shopId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, cloudinaryPhotos, listingId, recipientId, recipientUuid, shopId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MyConversationsPostRequest {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    cloudinaryPhotos: ").append(toIndentedString(cloudinaryPhotos)).append("\n");
    sb.append("    listingId: ").append(toIndentedString(listingId)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    recipientUuid: ").append(toIndentedString(recipientUuid)).append("\n");
    sb.append("    shopId: ").append(toIndentedString(shopId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("cloudinary_photos");
    openapiFields.add("listing_id");
    openapiFields.add("recipient_id");
    openapiFields.add("recipient_uuid");
    openapiFields.add("shop_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MyConversationsPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MyConversationsPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MyConversationsPostRequest is not found in the empty JSON string", MyConversationsPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MyConversationsPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MyConversationsPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MyConversationsPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudinary_photos") != null && !jsonObj.get("cloudinary_photos").isJsonNull() && !jsonObj.get("cloudinary_photos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudinary_photos` to be an array in the JSON string but got `%s`", jsonObj.get("cloudinary_photos").toString()));
      }
      if ((jsonObj.get("recipient_uuid") != null && !jsonObj.get("recipient_uuid").isJsonNull()) && !jsonObj.get("recipient_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_uuid").toString()));
      }
      if ((jsonObj.get("shop_id") != null && !jsonObj.get("shop_id").isJsonNull()) && !jsonObj.get("shop_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shop_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shop_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MyConversationsPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MyConversationsPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MyConversationsPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MyConversationsPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MyConversationsPostRequest>() {
           @Override
           public void write(JsonWriter out, MyConversationsPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MyConversationsPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MyConversationsPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MyConversationsPostRequest
   * @throws IOException if the JSON string is invalid with respect to MyConversationsPostRequest
   */
  public static MyConversationsPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MyConversationsPostRequest.class);
  }

  /**
   * Convert an instance of MyConversationsPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

