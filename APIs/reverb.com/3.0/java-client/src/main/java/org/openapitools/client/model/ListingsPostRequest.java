/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConversationsConversationIdOfferPostRequestPrice;
import org.openapitools.client.model.ListingsPostRequestCategoriesInner;
import org.openapitools.client.model.ListingsPostRequestCondition;
import org.openapitools.client.model.ListingsPostRequestLocation;
import org.openapitools.client.model.ListingsPostRequestPreorderInfo;
import org.openapitools.client.model.ListingsPostRequestSeller;
import org.openapitools.client.model.ListingsPostRequestShipping;
import org.openapitools.client.model.ListingsPostRequestVideosInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListingsPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:29.182990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingsPostRequest {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<ListingsPostRequestCategoriesInner> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ListingsPostRequestCondition condition;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Currently for users of seller sites only, this allows you to have a listing available only to your seller site by setting this to &#39;seller_site&#39;
   */
  @JsonAdapter(ExclusiveChannelEnum.Adapter.class)
  public enum ExclusiveChannelEnum {
    SELLER_SITE("seller_site"),
    
    REVERB("reverb"),
    
    NONE("none");

    private String value;

    ExclusiveChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExclusiveChannelEnum fromValue(String value) {
      for (ExclusiveChannelEnum b : ExclusiveChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExclusiveChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExclusiveChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExclusiveChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExclusiveChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExclusiveChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXCLUSIVE_CHANNEL = "exclusive_channel";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_CHANNEL)
  private ExclusiveChannelEnum exclusiveChannel;

  public static final String SERIALIZED_NAME_FINISH = "finish";
  @SerializedName(SERIALIZED_NAME_FINISH)
  private String finish;

  public static final String SERIALIZED_NAME_HAS_INVENTORY = "has_inventory";
  @SerializedName(SERIALIZED_NAME_HAS_INVENTORY)
  private Boolean hasInventory;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private Integer inventory;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private ListingsPostRequestLocation location;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  private String make;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_MULTI_ITEM = "multi_item";
  @SerializedName(SERIALIZED_NAME_MULTI_ITEM)
  private Boolean multiItem;

  public static final String SERIALIZED_NAME_OFFERS_ENABLED = "offers_enabled";
  @SerializedName(SERIALIZED_NAME_OFFERS_ENABLED)
  private Boolean offersEnabled;

  public static final String SERIALIZED_NAME_ORIGIN_COUNTRY_CODE = "origin_country_code";
  @SerializedName(SERIALIZED_NAME_ORIGIN_COUNTRY_CODE)
  private String originCountryCode;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private List<String> photos = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREORDER_INFO = "preorder_info";
  @SerializedName(SERIALIZED_NAME_PREORDER_INFO)
  private ListingsPostRequestPreorderInfo preorderInfo;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private ConversationsConversationIdOfferPostRequestPrice price;

  public static final String SERIALIZED_NAME_PROP65_WARNING = "prop_65_warning";
  @SerializedName(SERIALIZED_NAME_PROP65_WARNING)
  private String prop65Warning;

  public static final String SERIALIZED_NAME_PUBLISH = "publish";
  @SerializedName(SERIALIZED_NAME_PUBLISH)
  private Boolean publish;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private ListingsPostRequestSeller seller;

  public static final String SERIALIZED_NAME_SELLER_COST = "seller_cost";
  @SerializedName(SERIALIZED_NAME_SELLER_COST)
  private String sellerCost;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private ListingsPostRequestShipping shipping;

  public static final String SERIALIZED_NAME_SHIPPING_PROFILE_ID = "shipping_profile_id";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROFILE_ID)
  private String shippingProfileId;

  public static final String SERIALIZED_NAME_SHIPPING_PROFILE_NAME = "shipping_profile_name";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PROFILE_NAME)
  private String shippingProfileName;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SOLD_AS_IS = "sold_as_is";
  @SerializedName(SERIALIZED_NAME_SOLD_AS_IS)
  private Boolean soldAsIs;

  public static final String SERIALIZED_NAME_STORAGE_LOCATION = "storage_location";
  @SerializedName(SERIALIZED_NAME_STORAGE_LOCATION)
  private String storageLocation;

  public static final String SERIALIZED_NAME_TAX_EXEMPT = "tax_exempt";
  @SerializedName(SERIALIZED_NAME_TAX_EXEMPT)
  private Boolean taxExempt;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private String upc;

  public static final String SERIALIZED_NAME_UPC_DOES_NOT_APPLY = "upc_does_not_apply";
  @SerializedName(SERIALIZED_NAME_UPC_DOES_NOT_APPLY)
  private Boolean upcDoesNotApply;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<ListingsPostRequestVideosInner> videos = new ArrayList<>();

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private String year;

  public ListingsPostRequest() {
  }

  public ListingsPostRequest categories(List<ListingsPostRequestCategoriesInner> categories) {
    this.categories = categories;
    return this;
  }

  public ListingsPostRequest addCategoriesItem(ListingsPostRequestCategoriesInner categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<ListingsPostRequestCategoriesInner> getCategories() {
    return categories;
  }

  public void setCategories(List<ListingsPostRequestCategoriesInner> categories) {
    this.categories = categories;
  }


  public ListingsPostRequest condition(ListingsPostRequestCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public ListingsPostRequestCondition getCondition() {
    return condition;
  }

  public void setCondition(ListingsPostRequestCondition condition) {
    this.condition = condition;
  }


  public ListingsPostRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Product description. Please keep formatting to a minimum.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListingsPostRequest exclusiveChannel(ExclusiveChannelEnum exclusiveChannel) {
    this.exclusiveChannel = exclusiveChannel;
    return this;
  }

  /**
   * Currently for users of seller sites only, this allows you to have a listing available only to your seller site by setting this to &#39;seller_site&#39;
   * @return exclusiveChannel
   */
  @javax.annotation.Nullable
  public ExclusiveChannelEnum getExclusiveChannel() {
    return exclusiveChannel;
  }

  public void setExclusiveChannel(ExclusiveChannelEnum exclusiveChannel) {
    this.exclusiveChannel = exclusiveChannel;
  }


  public ListingsPostRequest finish(String finish) {
    this.finish = finish;
    return this;
  }

  /**
   * Finish, e.g. &#39;Sunburst&#39;
   * @return finish
   */
  @javax.annotation.Nullable
  public String getFinish() {
    return finish;
  }

  public void setFinish(String finish) {
    this.finish = finish;
  }


  public ListingsPostRequest hasInventory(Boolean hasInventory) {
    this.hasInventory = hasInventory;
    return this;
  }

  /**
   * Set true if selling more than one
   * @return hasInventory
   */
  @javax.annotation.Nullable
  public Boolean getHasInventory() {
    return hasInventory;
  }

  public void setHasInventory(Boolean hasInventory) {
    this.hasInventory = hasInventory;
  }


  public ListingsPostRequest inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

  /**
   * Number of items available for sale. Reverb will increment and decrement automatically.
   * @return inventory
   */
  @javax.annotation.Nullable
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }


  public ListingsPostRequest location(ListingsPostRequestLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public ListingsPostRequestLocation getLocation() {
    return location;
  }

  public void setLocation(ListingsPostRequestLocation location) {
    this.location = location;
  }


  public ListingsPostRequest make(String make) {
    this.make = make;
    return this;
  }

  /**
   * ex: Fender, Gibson
   * @return make
   */
  @javax.annotation.Nullable
  public String getMake() {
    return make;
  }

  public void setMake(String make) {
    this.make = make;
  }


  public ListingsPostRequest model(String model) {
    this.model = model;
    return this;
  }

  /**
   * ex: Stratocaster, SG
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public ListingsPostRequest multiItem(Boolean multiItem) {
    this.multiItem = multiItem;
    return this;
  }

  /**
   * Specifies if the listing is a bundle of multiple individual items
   * @return multiItem
   */
  @javax.annotation.Nullable
  public Boolean getMultiItem() {
    return multiItem;
  }

  public void setMultiItem(Boolean multiItem) {
    this.multiItem = multiItem;
  }


  public ListingsPostRequest offersEnabled(Boolean offersEnabled) {
    this.offersEnabled = offersEnabled;
    return this;
  }

  /**
   * Whether the listing accepts negotiated offers (default: true)
   * @return offersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOffersEnabled() {
    return offersEnabled;
  }

  public void setOffersEnabled(Boolean offersEnabled) {
    this.offersEnabled = offersEnabled;
  }


  public ListingsPostRequest originCountryCode(String originCountryCode) {
    this.originCountryCode = originCountryCode;
    return this;
  }

  /**
   * Country of origin/manufacture, ISO code (e.g: US)
   * @return originCountryCode
   */
  @javax.annotation.Nullable
  public String getOriginCountryCode() {
    return originCountryCode;
  }

  public void setOriginCountryCode(String originCountryCode) {
    this.originCountryCode = originCountryCode;
  }


  public ListingsPostRequest photos(List<String> photos) {
    this.photos = photos;
    return this;
  }

  public ListingsPostRequest addPhotosItem(String photosItem) {
    if (this.photos == null) {
      this.photos = new ArrayList<>();
    }
    this.photos.add(photosItem);
    return this;
  }

  /**
   * An array of image URLs. Ex: [&#39;http://my.site.com/image.jpg&#39;]
   * @return photos
   */
  @javax.annotation.Nullable
  public List<String> getPhotos() {
    return photos;
  }

  public void setPhotos(List<String> photos) {
    this.photos = photos;
  }


  public ListingsPostRequest preorderInfo(ListingsPostRequestPreorderInfo preorderInfo) {
    this.preorderInfo = preorderInfo;
    return this;
  }

  /**
   * Get preorderInfo
   * @return preorderInfo
   */
  @javax.annotation.Nullable
  public ListingsPostRequestPreorderInfo getPreorderInfo() {
    return preorderInfo;
  }

  public void setPreorderInfo(ListingsPostRequestPreorderInfo preorderInfo) {
    this.preorderInfo = preorderInfo;
  }


  public ListingsPostRequest price(ConversationsConversationIdOfferPostRequestPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public ConversationsConversationIdOfferPostRequestPrice getPrice() {
    return price;
  }

  public void setPrice(ConversationsConversationIdOfferPostRequestPrice price) {
    this.price = price;
  }


  public ListingsPostRequest prop65Warning(String prop65Warning) {
    this.prop65Warning = prop65Warning;
    return this;
  }

  /**
   * If your listing contains chemicals that are required to be reported under California Prop 65, please provide your warning statement. We will add the required &#39;Warning&#39; label and link to California&#39;s information page, so you only need to provide the body of the warning. For more information, see https://www.p65warnings.ca.gov/new-proposition-65-warnings
   * @return prop65Warning
   */
  @javax.annotation.Nullable
  public String getProp65Warning() {
    return prop65Warning;
  }

  public void setProp65Warning(String prop65Warning) {
    this.prop65Warning = prop65Warning;
  }


  public ListingsPostRequest publish(Boolean publish) {
    this.publish = publish;
    return this;
  }

  /**
   * Publish your listing if draft
   * @return publish
   */
  @javax.annotation.Nullable
  public Boolean getPublish() {
    return publish;
  }

  public void setPublish(Boolean publish) {
    this.publish = publish;
  }


  public ListingsPostRequest seller(ListingsPostRequestSeller seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Get seller
   * @return seller
   */
  @javax.annotation.Nullable
  public ListingsPostRequestSeller getSeller() {
    return seller;
  }

  public void setSeller(ListingsPostRequestSeller seller) {
    this.seller = seller;
  }


  public ListingsPostRequest sellerCost(String sellerCost) {
    this.sellerCost = sellerCost;
    return this;
  }

  /**
   * Cost of goods in your currency as a POSIX-compliant decimal number (internal use only, not shown to buyers)
   * @return sellerCost
   */
  @javax.annotation.Nullable
  public String getSellerCost() {
    return sellerCost;
  }

  public void setSellerCost(String sellerCost) {
    this.sellerCost = sellerCost;
  }


  public ListingsPostRequest shipping(ListingsPostRequestShipping shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Get shipping
   * @return shipping
   */
  @javax.annotation.Nullable
  public ListingsPostRequestShipping getShipping() {
    return shipping;
  }

  public void setShipping(ListingsPostRequestShipping shipping) {
    this.shipping = shipping;
  }


  public ListingsPostRequest shippingProfileId(String shippingProfileId) {
    this.shippingProfileId = shippingProfileId;
    return this;
  }

  /**
   * id of a shop&#39;s shipping profile
   * @return shippingProfileId
   */
  @javax.annotation.Nullable
  public String getShippingProfileId() {
    return shippingProfileId;
  }

  public void setShippingProfileId(String shippingProfileId) {
    this.shippingProfileId = shippingProfileId;
  }


  public ListingsPostRequest shippingProfileName(String shippingProfileName) {
    this.shippingProfileName = shippingProfileName;
    return this;
  }

  /**
   * DEPRECATED, please use shipping_profile_id. Name of a shipping profile
   * @return shippingProfileName
   */
  @javax.annotation.Nullable
  public String getShippingProfileName() {
    return shippingProfileName;
  }

  public void setShippingProfileName(String shippingProfileName) {
    this.shippingProfileName = shippingProfileName;
  }


  public ListingsPostRequest sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Unique identifier for product
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public ListingsPostRequest soldAsIs(Boolean soldAsIs) {
    this.soldAsIs = soldAsIs;
    return this;
  }

  /**
   * This item is sold As-Is and cannot be returned
   * @return soldAsIs
   */
  @javax.annotation.Nullable
  public Boolean getSoldAsIs() {
    return soldAsIs;
  }

  public void setSoldAsIs(Boolean soldAsIs) {
    this.soldAsIs = soldAsIs;
  }


  public ListingsPostRequest storageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
    return this;
  }

  /**
   * Internal note used by sellers to back reference their catalog system when entering a listing
   * @return storageLocation
   */
  @javax.annotation.Nullable
  public String getStorageLocation() {
    return storageLocation;
  }

  public void setStorageLocation(String storageLocation) {
    this.storageLocation = storageLocation;
  }


  public ListingsPostRequest taxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
    return this;
  }

  /**
   * Listing is exempt from taxes / VAT
   * @return taxExempt
   */
  @javax.annotation.Nullable
  public Boolean getTaxExempt() {
    return taxExempt;
  }

  public void setTaxExempt(Boolean taxExempt) {
    this.taxExempt = taxExempt;
  }


  public ListingsPostRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of your listing
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ListingsPostRequest upc(String upc) {
    this.upc = upc;
    return this;
  }

  /**
   * Valid UPC code
   * @return upc
   */
  @javax.annotation.Nullable
  public String getUpc() {
    return upc;
  }

  public void setUpc(String upc) {
    this.upc = upc;
  }


  public ListingsPostRequest upcDoesNotApply(Boolean upcDoesNotApply) {
    this.upcDoesNotApply = upcDoesNotApply;
    return this;
  }

  /**
   * True if a brand new product has no UPC code, ie for a handmade or custom item
   * @return upcDoesNotApply
   */
  @javax.annotation.Nullable
  public Boolean getUpcDoesNotApply() {
    return upcDoesNotApply;
  }

  public void setUpcDoesNotApply(Boolean upcDoesNotApply) {
    this.upcDoesNotApply = upcDoesNotApply;
  }


  public ListingsPostRequest videos(List<ListingsPostRequestVideosInner> videos) {
    this.videos = videos;
    return this;
  }

  public ListingsPostRequest addVideosItem(ListingsPostRequestVideosInner videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * List of YouTube video urls. Note: ONLY ONE ALLOWED
   * @return videos
   */
  @javax.annotation.Nullable
  public List<ListingsPostRequestVideosInner> getVideos() {
    return videos;
  }

  public void setVideos(List<ListingsPostRequestVideosInner> videos) {
    this.videos = videos;
  }


  public ListingsPostRequest year(String year) {
    this.year = year;
    return this;
  }

  /**
   * Supports many formats. Ex: 1979, mid-70s, late 90s
   * @return year
   */
  @javax.annotation.Nullable
  public String getYear() {
    return year;
  }

  public void setYear(String year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingsPostRequest listingsPostRequest = (ListingsPostRequest) o;
    return Objects.equals(this.categories, listingsPostRequest.categories) &&
        Objects.equals(this.condition, listingsPostRequest.condition) &&
        Objects.equals(this.description, listingsPostRequest.description) &&
        Objects.equals(this.exclusiveChannel, listingsPostRequest.exclusiveChannel) &&
        Objects.equals(this.finish, listingsPostRequest.finish) &&
        Objects.equals(this.hasInventory, listingsPostRequest.hasInventory) &&
        Objects.equals(this.inventory, listingsPostRequest.inventory) &&
        Objects.equals(this.location, listingsPostRequest.location) &&
        Objects.equals(this.make, listingsPostRequest.make) &&
        Objects.equals(this.model, listingsPostRequest.model) &&
        Objects.equals(this.multiItem, listingsPostRequest.multiItem) &&
        Objects.equals(this.offersEnabled, listingsPostRequest.offersEnabled) &&
        Objects.equals(this.originCountryCode, listingsPostRequest.originCountryCode) &&
        Objects.equals(this.photos, listingsPostRequest.photos) &&
        Objects.equals(this.preorderInfo, listingsPostRequest.preorderInfo) &&
        Objects.equals(this.price, listingsPostRequest.price) &&
        Objects.equals(this.prop65Warning, listingsPostRequest.prop65Warning) &&
        Objects.equals(this.publish, listingsPostRequest.publish) &&
        Objects.equals(this.seller, listingsPostRequest.seller) &&
        Objects.equals(this.sellerCost, listingsPostRequest.sellerCost) &&
        Objects.equals(this.shipping, listingsPostRequest.shipping) &&
        Objects.equals(this.shippingProfileId, listingsPostRequest.shippingProfileId) &&
        Objects.equals(this.shippingProfileName, listingsPostRequest.shippingProfileName) &&
        Objects.equals(this.sku, listingsPostRequest.sku) &&
        Objects.equals(this.soldAsIs, listingsPostRequest.soldAsIs) &&
        Objects.equals(this.storageLocation, listingsPostRequest.storageLocation) &&
        Objects.equals(this.taxExempt, listingsPostRequest.taxExempt) &&
        Objects.equals(this.title, listingsPostRequest.title) &&
        Objects.equals(this.upc, listingsPostRequest.upc) &&
        Objects.equals(this.upcDoesNotApply, listingsPostRequest.upcDoesNotApply) &&
        Objects.equals(this.videos, listingsPostRequest.videos) &&
        Objects.equals(this.year, listingsPostRequest.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, condition, description, exclusiveChannel, finish, hasInventory, inventory, location, make, model, multiItem, offersEnabled, originCountryCode, photos, preorderInfo, price, prop65Warning, publish, seller, sellerCost, shipping, shippingProfileId, shippingProfileName, sku, soldAsIs, storageLocation, taxExempt, title, upc, upcDoesNotApply, videos, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingsPostRequest {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exclusiveChannel: ").append(toIndentedString(exclusiveChannel)).append("\n");
    sb.append("    finish: ").append(toIndentedString(finish)).append("\n");
    sb.append("    hasInventory: ").append(toIndentedString(hasInventory)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    multiItem: ").append(toIndentedString(multiItem)).append("\n");
    sb.append("    offersEnabled: ").append(toIndentedString(offersEnabled)).append("\n");
    sb.append("    originCountryCode: ").append(toIndentedString(originCountryCode)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    preorderInfo: ").append(toIndentedString(preorderInfo)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    prop65Warning: ").append(toIndentedString(prop65Warning)).append("\n");
    sb.append("    publish: ").append(toIndentedString(publish)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerCost: ").append(toIndentedString(sellerCost)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    shippingProfileId: ").append(toIndentedString(shippingProfileId)).append("\n");
    sb.append("    shippingProfileName: ").append(toIndentedString(shippingProfileName)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    soldAsIs: ").append(toIndentedString(soldAsIs)).append("\n");
    sb.append("    storageLocation: ").append(toIndentedString(storageLocation)).append("\n");
    sb.append("    taxExempt: ").append(toIndentedString(taxExempt)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("    upcDoesNotApply: ").append(toIndentedString(upcDoesNotApply)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("condition");
    openapiFields.add("description");
    openapiFields.add("exclusive_channel");
    openapiFields.add("finish");
    openapiFields.add("has_inventory");
    openapiFields.add("inventory");
    openapiFields.add("location");
    openapiFields.add("make");
    openapiFields.add("model");
    openapiFields.add("multi_item");
    openapiFields.add("offers_enabled");
    openapiFields.add("origin_country_code");
    openapiFields.add("photos");
    openapiFields.add("preorder_info");
    openapiFields.add("price");
    openapiFields.add("prop_65_warning");
    openapiFields.add("publish");
    openapiFields.add("seller");
    openapiFields.add("seller_cost");
    openapiFields.add("shipping");
    openapiFields.add("shipping_profile_id");
    openapiFields.add("shipping_profile_name");
    openapiFields.add("sku");
    openapiFields.add("sold_as_is");
    openapiFields.add("storage_location");
    openapiFields.add("tax_exempt");
    openapiFields.add("title");
    openapiFields.add("upc");
    openapiFields.add("upc_does_not_apply");
    openapiFields.add("videos");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingsPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingsPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingsPostRequest is not found in the empty JSON string", ListingsPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingsPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingsPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            ListingsPostRequestCategoriesInner.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        ListingsPostRequestCondition.validateJsonElement(jsonObj.get("condition"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("exclusive_channel") != null && !jsonObj.get("exclusive_channel").isJsonNull()) && !jsonObj.get("exclusive_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusive_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusive_channel").toString()));
      }
      // validate the optional field `exclusive_channel`
      if (jsonObj.get("exclusive_channel") != null && !jsonObj.get("exclusive_channel").isJsonNull()) {
        ExclusiveChannelEnum.validateJsonElement(jsonObj.get("exclusive_channel"));
      }
      if ((jsonObj.get("finish") != null && !jsonObj.get("finish").isJsonNull()) && !jsonObj.get("finish").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finish` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finish").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        ListingsPostRequestLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("make") != null && !jsonObj.get("make").isJsonNull()) && !jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("origin_country_code") != null && !jsonObj.get("origin_country_code").isJsonNull()) && !jsonObj.get("origin_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin_country_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull() && !jsonObj.get("photos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `photos` to be an array in the JSON string but got `%s`", jsonObj.get("photos").toString()));
      }
      // validate the optional field `preorder_info`
      if (jsonObj.get("preorder_info") != null && !jsonObj.get("preorder_info").isJsonNull()) {
        ListingsPostRequestPreorderInfo.validateJsonElement(jsonObj.get("preorder_info"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        ConversationsConversationIdOfferPostRequestPrice.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("prop_65_warning") != null && !jsonObj.get("prop_65_warning").isJsonNull()) && !jsonObj.get("prop_65_warning").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prop_65_warning` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prop_65_warning").toString()));
      }
      // validate the optional field `seller`
      if (jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) {
        ListingsPostRequestSeller.validateJsonElement(jsonObj.get("seller"));
      }
      if ((jsonObj.get("seller_cost") != null && !jsonObj.get("seller_cost").isJsonNull()) && !jsonObj.get("seller_cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_cost").toString()));
      }
      // validate the optional field `shipping`
      if (jsonObj.get("shipping") != null && !jsonObj.get("shipping").isJsonNull()) {
        ListingsPostRequestShipping.validateJsonElement(jsonObj.get("shipping"));
      }
      if ((jsonObj.get("shipping_profile_id") != null && !jsonObj.get("shipping_profile_id").isJsonNull()) && !jsonObj.get("shipping_profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_profile_id").toString()));
      }
      if ((jsonObj.get("shipping_profile_name") != null && !jsonObj.get("shipping_profile_name").isJsonNull()) && !jsonObj.get("shipping_profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_profile_name").toString()));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("storage_location") != null && !jsonObj.get("storage_location").isJsonNull()) && !jsonObj.get("storage_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_location").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("upc") != null && !jsonObj.get("upc").isJsonNull()) && !jsonObj.get("upc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upc").toString()));
      }
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull()) {
        JsonArray jsonArrayvideos = jsonObj.getAsJsonArray("videos");
        if (jsonArrayvideos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("videos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
          }

          // validate the optional field `videos` (array)
          for (int i = 0; i < jsonArrayvideos.size(); i++) {
            ListingsPostRequestVideosInner.validateJsonElement(jsonArrayvideos.get(i));
          };
        }
      }
      if ((jsonObj.get("year") != null && !jsonObj.get("year").isJsonNull()) && !jsonObj.get("year").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `year` to be a primitive type in the JSON string but got `%s`", jsonObj.get("year").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingsPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingsPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingsPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingsPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingsPostRequest>() {
           @Override
           public void write(JsonWriter out, ListingsPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingsPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingsPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingsPostRequest
   * @throws IOException if the JSON string is invalid with respect to ListingsPostRequest
   */
  public static ListingsPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingsPostRequest.class);
  }

  /**
   * Convert an instance of ListingsPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

