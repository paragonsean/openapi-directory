/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Condition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:29.182990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListingsPostRequestCondition {
  /**
   * Condition UUID
   */
  @JsonAdapter(UuidEnum.Adapter.class)
  public enum UuidEnum {
    FBF35668_96A0_4BAA_BCDE_AB18D6B1B329("fbf35668-96a0-4baa-bcde-ab18d6b1b329"),
    
    _6A9DFCAD_600B_46C8_9E08_CE6E5057921E("6a9dfcad-600b-46c8-9e08-ce6e5057921e"),
    
    _98777886_76D0_44C8_865E_BB40E669E934("98777886-76d0-44c8-865e-bb40e669e934"),
    
    F7A3F48C_972A_44C6_B01A_0CD27488D3F6("f7a3f48c-972a-44c6-b01a-0cd27488d3f6"),
    
    AE4D9114_1BD7_4EC5_A4BA_6653AF5AC84D("ae4d9114-1bd7-4ec5-a4ba-6653af5ac84d"),
    
    DF268AD1_C462_4BA6_B6DB_E007E23922EA("df268ad1-c462-4ba6-b6db-e007e23922ea"),
    
    AC5B9C1E_DC78_466D_B0B3_7CF712967A48("ac5b9c1e-dc78-466d-b0b3-7cf712967a48"),
    
    _6DB7DF88_293B_4017_A1C1_CDB5E599FA1A("6db7df88-293b-4017-a1c1-cdb5e599fa1a"),
    
    _9225283F_60C2_4413_AD18_1F5EBA7A856F("9225283f-60c2-4413-ad18-1f5eba7a856f"),
    
    _7C3F45DE_2AE0_4C81_8400_FDB6B1D74890("7c3f45de-2ae0-4c81-8400-fdb6b1d74890");

    private String value;

    UuidEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UuidEnum fromValue(String value) {
      for (UuidEnum b : UuidEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UuidEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UuidEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UuidEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UuidEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UuidEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UuidEnum uuid;

  public ListingsPostRequestCondition() {
  }

  public ListingsPostRequestCondition uuid(UuidEnum uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Condition UUID
   * @return uuid
   */
  @javax.annotation.Nonnull
  public UuidEnum getUuid() {
    return uuid;
  }

  public void setUuid(UuidEnum uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingsPostRequestCondition listingsPostRequestCondition = (ListingsPostRequestCondition) o;
    return Objects.equals(this.uuid, listingsPostRequestCondition.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingsPostRequestCondition {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("uuid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListingsPostRequestCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListingsPostRequestCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListingsPostRequestCondition is not found in the empty JSON string", ListingsPostRequestCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListingsPostRequestCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListingsPostRequestCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListingsPostRequestCondition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      // validate the required field `uuid`
      UuidEnum.validateJsonElement(jsonObj.get("uuid"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListingsPostRequestCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListingsPostRequestCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListingsPostRequestCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListingsPostRequestCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<ListingsPostRequestCondition>() {
           @Override
           public void write(JsonWriter out, ListingsPostRequestCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListingsPostRequestCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListingsPostRequestCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListingsPostRequestCondition
   * @throws IOException if the JSON string is invalid with respect to ListingsPostRequestCondition
   */
  public static ListingsPostRequestCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListingsPostRequestCondition.class);
  }

  /**
   * Convert an instance of ListingsPostRequestCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

