/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ShopPutRequestAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShopPutRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:29.182990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShopPutRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ShopPutRequestAddress address;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    USD("USD"),
    
    CAD("CAD"),
    
    EUR("EUR"),
    
    GBP("GBP"),
    
    AUD("AUD"),
    
    JPY("JPY"),
    
    NZD("NZD"),
    
    MXN("MXN");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets legalCountryCode
   */
  @JsonAdapter(LegalCountryCodeEnum.Adapter.class)
  public enum LegalCountryCodeEnum {
    AD("AD"),
    
    AE("AE"),
    
    AF("AF"),
    
    AG("AG"),
    
    AI("AI"),
    
    AL("AL"),
    
    AM("AM"),
    
    AO("AO"),
    
    AR("AR"),
    
    AS("AS"),
    
    AT("AT"),
    
    AU("AU"),
    
    AW("AW"),
    
    AX("AX"),
    
    AZ("AZ"),
    
    BA("BA"),
    
    BB("BB"),
    
    BD("BD"),
    
    BE("BE"),
    
    BF("BF"),
    
    BG("BG"),
    
    BH("BH"),
    
    BI("BI"),
    
    BJ("BJ"),
    
    BL("BL"),
    
    BM("BM"),
    
    BN("BN"),
    
    BO("BO"),
    
    BQ("BQ"),
    
    BR("BR"),
    
    BS("BS"),
    
    BT("BT"),
    
    BV("BV"),
    
    BW("BW"),
    
    BY("BY"),
    
    BZ("BZ"),
    
    CA("CA"),
    
    CC("CC"),
    
    CD("CD"),
    
    CF("CF"),
    
    CG("CG"),
    
    CH("CH"),
    
    CI("CI"),
    
    CK("CK"),
    
    CL("CL"),
    
    CM("CM"),
    
    CN("CN"),
    
    CO("CO"),
    
    CR("CR"),
    
    CV("CV"),
    
    CW("CW"),
    
    CX("CX"),
    
    CY("CY"),
    
    CZ("CZ"),
    
    DE("DE"),
    
    DJ("DJ"),
    
    DK("DK"),
    
    DM("DM"),
    
    DO("DO"),
    
    DZ("DZ"),
    
    EC("EC"),
    
    EE("EE"),
    
    EG("EG"),
    
    EH("EH"),
    
    ER("ER"),
    
    ES("ES"),
    
    ET("ET"),
    
    FI("FI"),
    
    FJ("FJ"),
    
    FK("FK"),
    
    FM("FM"),
    
    FO("FO"),
    
    FR("FR"),
    
    GA("GA"),
    
    GB("GB"),
    
    GD("GD"),
    
    GE("GE"),
    
    GF("GF"),
    
    GG("GG"),
    
    GH("GH"),
    
    GI("GI"),
    
    GL("GL"),
    
    GM("GM"),
    
    GN("GN"),
    
    GP("GP"),
    
    GQ("GQ"),
    
    GR("GR"),
    
    GS("GS"),
    
    GT("GT"),
    
    GU("GU"),
    
    GW("GW"),
    
    GY("GY"),
    
    HK("HK"),
    
    HM("HM"),
    
    HN("HN"),
    
    HR("HR"),
    
    HT("HT"),
    
    HU("HU"),
    
    ID("ID"),
    
    IE("IE"),
    
    IL("IL"),
    
    IM("IM"),
    
    IN("IN"),
    
    IO("IO"),
    
    IQ("IQ"),
    
    IS("IS"),
    
    IT("IT"),
    
    JE("JE"),
    
    JM("JM"),
    
    JO("JO"),
    
    JP("JP"),
    
    KE("KE"),
    
    KG("KG"),
    
    KH("KH"),
    
    KI("KI"),
    
    KM("KM"),
    
    KN("KN"),
    
    KR("KR"),
    
    KW("KW"),
    
    KY("KY"),
    
    KZ("KZ"),
    
    LA("LA"),
    
    LB("LB"),
    
    LC("LC"),
    
    LI("LI"),
    
    LK("LK"),
    
    LR("LR"),
    
    LS("LS"),
    
    LT("LT"),
    
    LU("LU"),
    
    LV("LV"),
    
    LY("LY"),
    
    MA("MA"),
    
    MC("MC"),
    
    MD("MD"),
    
    ME("ME"),
    
    MF("MF"),
    
    MG("MG"),
    
    MH("MH"),
    
    MK("MK"),
    
    ML("ML"),
    
    MM("MM"),
    
    MN("MN"),
    
    MO("MO"),
    
    MP("MP"),
    
    MQ("MQ"),
    
    MR("MR"),
    
    MS("MS"),
    
    MT("MT"),
    
    MU("MU"),
    
    MV("MV"),
    
    MW("MW"),
    
    MX("MX"),
    
    MY("MY"),
    
    MZ("MZ"),
    
    NA("NA"),
    
    NC("NC"),
    
    NE("NE"),
    
    NF("NF"),
    
    NG("NG"),
    
    NI("NI"),
    
    NL("NL"),
    
    FALSE("false"),
    
    NP("NP"),
    
    NR("NR"),
    
    NU("NU"),
    
    NZ("NZ"),
    
    OM("OM"),
    
    PA("PA"),
    
    PE("PE"),
    
    PF("PF"),
    
    PG("PG"),
    
    PH("PH"),
    
    PK("PK"),
    
    PL("PL"),
    
    PM("PM"),
    
    PN("PN"),
    
    PS("PS"),
    
    PT("PT"),
    
    PW("PW"),
    
    PY("PY"),
    
    QA("QA"),
    
    RE("RE"),
    
    RO("RO"),
    
    RS("RS"),
    
    RU("RU"),
    
    RW("RW"),
    
    SA("SA"),
    
    SB("SB"),
    
    SC("SC"),
    
    SE("SE"),
    
    SG("SG"),
    
    SH("SH"),
    
    SI("SI"),
    
    SJ("SJ"),
    
    SK("SK"),
    
    SL("SL"),
    
    SM("SM"),
    
    SN("SN"),
    
    SO("SO"),
    
    SR("SR"),
    
    SS("SS"),
    
    ST("ST"),
    
    SV("SV"),
    
    SX("SX"),
    
    SZ("SZ"),
    
    TC("TC"),
    
    TD("TD"),
    
    TF("TF"),
    
    TG("TG"),
    
    TH("TH"),
    
    TJ("TJ"),
    
    TK("TK"),
    
    TL("TL"),
    
    TM("TM"),
    
    TN("TN"),
    
    TO("TO"),
    
    TR("TR"),
    
    TT("TT"),
    
    TV("TV"),
    
    TW("TW"),
    
    TZ("TZ"),
    
    UA("UA"),
    
    UG("UG"),
    
    UM("UM"),
    
    US("US"),
    
    UY("UY"),
    
    UZ("UZ"),
    
    VA("VA"),
    
    VC("VC"),
    
    VE("VE"),
    
    VG("VG"),
    
    VI("VI"),
    
    VN("VN"),
    
    VU("VU"),
    
    WF("WF"),
    
    WS("WS"),
    
    YE("YE"),
    
    YT("YT"),
    
    ZA("ZA"),
    
    ZM("ZM"),
    
    ZW("ZW");

    private String value;

    LegalCountryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalCountryCodeEnum fromValue(String value) {
      for (LegalCountryCodeEnum b : LegalCountryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalCountryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalCountryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalCountryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalCountryCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalCountryCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_COUNTRY_CODE = "legal_country_code";
  @SerializedName(SERIALIZED_NAME_LEGAL_COUNTRY_CODE)
  private LegalCountryCodeEnum legalCountryCode;

  public static final String SERIALIZED_NAME_LEGAL_COUNTRY_CODE_CONFIRMED = "legal_country_code_confirmed";
  @SerializedName(SERIALIZED_NAME_LEGAL_COUNTRY_CODE_CONFIRMED)
  private Boolean legalCountryCodeConfirmed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAYMENT_POLICY = "payment_policy";
  @SerializedName(SERIALIZED_NAME_PAYMENT_POLICY)
  private String paymentPolicy;

  public static final String SERIALIZED_NAME_RETURN_POLICY = "return_policy";
  @SerializedName(SERIALIZED_NAME_RETURN_POLICY)
  private String returnPolicy;

  public static final String SERIALIZED_NAME_SHIPPING_POLICY = "shipping_policy";
  @SerializedName(SERIALIZED_NAME_SHIPPING_POLICY)
  private String shippingPolicy;

  /**
   * Gets or Sets shopType
   */
  @JsonAdapter(ShopTypeEnum.Adapter.class)
  public enum ShopTypeEnum {
    INDIVIDUAL("individual"),
    
    BUSINESS("business");

    private String value;

    ShopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShopTypeEnum fromValue(String value) {
      for (ShopTypeEnum b : ShopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOP_TYPE = "shop_type";
  @SerializedName(SERIALIZED_NAME_SHOP_TYPE)
  private ShopTypeEnum shopType;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public ShopPutRequest() {
  }

  public ShopPutRequest address(ShopPutRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public ShopPutRequestAddress getAddress() {
    return address;
  }

  public void setAddress(ShopPutRequestAddress address) {
    this.address = address;
  }


  public ShopPutRequest currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public ShopPutRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ShopPutRequest legalCountryCode(LegalCountryCodeEnum legalCountryCode) {
    this.legalCountryCode = legalCountryCode;
    return this;
  }

  /**
   * Get legalCountryCode
   * @return legalCountryCode
   */
  @javax.annotation.Nullable
  public LegalCountryCodeEnum getLegalCountryCode() {
    return legalCountryCode;
  }

  public void setLegalCountryCode(LegalCountryCodeEnum legalCountryCode) {
    this.legalCountryCode = legalCountryCode;
  }


  public ShopPutRequest legalCountryCodeConfirmed(Boolean legalCountryCodeConfirmed) {
    this.legalCountryCodeConfirmed = legalCountryCodeConfirmed;
    return this;
  }

  /**
   * Get legalCountryCodeConfirmed
   * @return legalCountryCodeConfirmed
   */
  @javax.annotation.Nullable
  public Boolean getLegalCountryCodeConfirmed() {
    return legalCountryCodeConfirmed;
  }

  public void setLegalCountryCodeConfirmed(Boolean legalCountryCodeConfirmed) {
    this.legalCountryCodeConfirmed = legalCountryCodeConfirmed;
  }


  public ShopPutRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ShopPutRequest paymentPolicy(String paymentPolicy) {
    this.paymentPolicy = paymentPolicy;
    return this;
  }

  /**
   * Get paymentPolicy
   * @return paymentPolicy
   */
  @javax.annotation.Nullable
  public String getPaymentPolicy() {
    return paymentPolicy;
  }

  public void setPaymentPolicy(String paymentPolicy) {
    this.paymentPolicy = paymentPolicy;
  }


  public ShopPutRequest returnPolicy(String returnPolicy) {
    this.returnPolicy = returnPolicy;
    return this;
  }

  /**
   * Get returnPolicy
   * @return returnPolicy
   */
  @javax.annotation.Nullable
  public String getReturnPolicy() {
    return returnPolicy;
  }

  public void setReturnPolicy(String returnPolicy) {
    this.returnPolicy = returnPolicy;
  }


  public ShopPutRequest shippingPolicy(String shippingPolicy) {
    this.shippingPolicy = shippingPolicy;
    return this;
  }

  /**
   * Get shippingPolicy
   * @return shippingPolicy
   */
  @javax.annotation.Nullable
  public String getShippingPolicy() {
    return shippingPolicy;
  }

  public void setShippingPolicy(String shippingPolicy) {
    this.shippingPolicy = shippingPolicy;
  }


  public ShopPutRequest shopType(ShopTypeEnum shopType) {
    this.shopType = shopType;
    return this;
  }

  /**
   * Get shopType
   * @return shopType
   */
  @javax.annotation.Nullable
  public ShopTypeEnum getShopType() {
    return shopType;
  }

  public void setShopType(ShopTypeEnum shopType) {
    this.shopType = shopType;
  }


  public ShopPutRequest website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShopPutRequest shopPutRequest = (ShopPutRequest) o;
    return Objects.equals(this.address, shopPutRequest.address) &&
        Objects.equals(this.currency, shopPutRequest.currency) &&
        Objects.equals(this.description, shopPutRequest.description) &&
        Objects.equals(this.legalCountryCode, shopPutRequest.legalCountryCode) &&
        Objects.equals(this.legalCountryCodeConfirmed, shopPutRequest.legalCountryCodeConfirmed) &&
        Objects.equals(this.name, shopPutRequest.name) &&
        Objects.equals(this.paymentPolicy, shopPutRequest.paymentPolicy) &&
        Objects.equals(this.returnPolicy, shopPutRequest.returnPolicy) &&
        Objects.equals(this.shippingPolicy, shopPutRequest.shippingPolicy) &&
        Objects.equals(this.shopType, shopPutRequest.shopType) &&
        Objects.equals(this.website, shopPutRequest.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, currency, description, legalCountryCode, legalCountryCodeConfirmed, name, paymentPolicy, returnPolicy, shippingPolicy, shopType, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShopPutRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    legalCountryCode: ").append(toIndentedString(legalCountryCode)).append("\n");
    sb.append("    legalCountryCodeConfirmed: ").append(toIndentedString(legalCountryCodeConfirmed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    paymentPolicy: ").append(toIndentedString(paymentPolicy)).append("\n");
    sb.append("    returnPolicy: ").append(toIndentedString(returnPolicy)).append("\n");
    sb.append("    shippingPolicy: ").append(toIndentedString(shippingPolicy)).append("\n");
    sb.append("    shopType: ").append(toIndentedString(shopType)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("legal_country_code");
    openapiFields.add("legal_country_code_confirmed");
    openapiFields.add("name");
    openapiFields.add("payment_policy");
    openapiFields.add("return_policy");
    openapiFields.add("shipping_policy");
    openapiFields.add("shop_type");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShopPutRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShopPutRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShopPutRequest is not found in the empty JSON string", ShopPutRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShopPutRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShopPutRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ShopPutRequestAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("legal_country_code") != null && !jsonObj.get("legal_country_code").isJsonNull()) && !jsonObj.get("legal_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_country_code").toString()));
      }
      // validate the optional field `legal_country_code`
      if (jsonObj.get("legal_country_code") != null && !jsonObj.get("legal_country_code").isJsonNull()) {
        LegalCountryCodeEnum.validateJsonElement(jsonObj.get("legal_country_code"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("payment_policy") != null && !jsonObj.get("payment_policy").isJsonNull()) && !jsonObj.get("payment_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_policy").toString()));
      }
      if ((jsonObj.get("return_policy") != null && !jsonObj.get("return_policy").isJsonNull()) && !jsonObj.get("return_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_policy").toString()));
      }
      if ((jsonObj.get("shipping_policy") != null && !jsonObj.get("shipping_policy").isJsonNull()) && !jsonObj.get("shipping_policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_policy").toString()));
      }
      if ((jsonObj.get("shop_type") != null && !jsonObj.get("shop_type").isJsonNull()) && !jsonObj.get("shop_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shop_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shop_type").toString()));
      }
      // validate the optional field `shop_type`
      if (jsonObj.get("shop_type") != null && !jsonObj.get("shop_type").isJsonNull()) {
        ShopTypeEnum.validateJsonElement(jsonObj.get("shop_type"));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShopPutRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShopPutRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShopPutRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShopPutRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ShopPutRequest>() {
           @Override
           public void write(JsonWriter out, ShopPutRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShopPutRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShopPutRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShopPutRequest
   * @throws IOException if the JSON string is invalid with respect to ShopPutRequest
   */
  public static ShopPutRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShopPutRequest.class);
  }

  /**
   * Convert an instance of ShopPutRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

