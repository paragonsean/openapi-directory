/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationsConversationIdOfferPostRequest;
import org.openapitools.client.model.ConversationsIdOfferPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for conversationsConversationIdOfferPost
     * @param conversationId  (required)
     * @param conversationsConversationIdOfferPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationsConversationIdOfferPostCall(String conversationId, ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsConversationIdOfferPostRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/offer"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationsConversationIdOfferPostValidateBeforeCall(String conversationId, ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling conversationsConversationIdOfferPost(Async)");
        }

        return conversationsConversationIdOfferPostCall(conversationId, conversationsConversationIdOfferPostRequest, _callback);

    }

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param conversationId  (required)
     * @param conversationsConversationIdOfferPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void conversationsConversationIdOfferPost(String conversationId, ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest) throws ApiException {
        conversationsConversationIdOfferPostWithHttpInfo(conversationId, conversationsConversationIdOfferPostRequest);
    }

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param conversationId  (required)
     * @param conversationsConversationIdOfferPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> conversationsConversationIdOfferPostWithHttpInfo(String conversationId, ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest) throws ApiException {
        okhttp3.Call localVarCall = conversationsConversationIdOfferPostValidateBeforeCall(conversationId, conversationsConversationIdOfferPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make an offer to the other participant in the conversation (asynchronously)
     * Make an offer to the other participant in the conversation
     * @param conversationId  (required)
     * @param conversationsConversationIdOfferPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationsConversationIdOfferPostAsync(String conversationId, ConversationsConversationIdOfferPostRequest conversationsConversationIdOfferPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationsConversationIdOfferPostValidateBeforeCall(conversationId, conversationsConversationIdOfferPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for conversationsIdOfferPost
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationsIdOfferPostCall(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsIdOfferPostRequest;

        // create path and map variables
        String localVarPath = "/conversations/{id}/offer"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationsIdOfferPostValidateBeforeCall(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling conversationsIdOfferPost(Async)");
        }

        return conversationsIdOfferPostCall(id, conversationsIdOfferPostRequest, _callback);

    }

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void conversationsIdOfferPost(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest) throws ApiException {
        conversationsIdOfferPostWithHttpInfo(id, conversationsIdOfferPostRequest);
    }

    /**
     * Make an offer to the other participant in the conversation
     * Make an offer to the other participant in the conversation
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> conversationsIdOfferPostWithHttpInfo(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest) throws ApiException {
        okhttp3.Call localVarCall = conversationsIdOfferPostValidateBeforeCall(id, conversationsIdOfferPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make an offer to the other participant in the conversation (asynchronously)
     * Make an offer to the other participant in the conversation
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call conversationsIdOfferPostAsync(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationsIdOfferPostValidateBeforeCall(id, conversationsIdOfferPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
