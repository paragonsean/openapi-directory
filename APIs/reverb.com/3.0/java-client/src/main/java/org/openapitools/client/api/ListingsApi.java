/*
 * reverb
 * reverb
 *
 * The version of the OpenAPI document: 3.0
 * Contact: integrations@reverb.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConversationsIdOfferPostRequest;
import org.openapitools.client.model.ListingsListingIdConversationsPostRequest;
import org.openapitools.client.model.ListingsPostRequest;
import org.openapitools.client.model.ListingsSlugFlagPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ListingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listingsAllGet
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsAllGetCall(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (auctionPriceMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auction_price_max", auctionPriceMax));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_type", productType));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "conditions", conditions));
        }

        if (decade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decade", decade));
        }

        if (finish != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finish", finish));
        }

        if (handmade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handmade", handmade));
        }

        if (itemCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_city", itemCity));
        }

        if (itemCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_country", itemCountry));
        }

        if (itemRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_region", itemRegion));
        }

        if (itemState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_state", itemState));
        }

        if (make != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (mustNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("must_not", mustNot));
        }

        if (priceMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_max", priceMax));
        }

        if (priceMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_min", priceMin));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (yearMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_max", yearMax));
        }

        if (yearMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_min", yearMin));
        }

        if (acceptsGiftCards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepts_gift_cards", acceptsGiftCards));
        }

        if (preferredSeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferred_seller", preferredSeller));
        }

        if (shop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop", shop));
        }

        if (shopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_id", shopId));
        }

        if (listingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_type", listingType));
        }

        if (shipsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ships_to", shipsTo));
        }

        if (excludeAuctions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_auctions", excludeAuctions));
        }

        if (acceptsPaymentPlans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepts_payment_plans", acceptsPaymentPlans));
        }

        if (watchersCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("watchers_count_min", watchersCountMin));
        }

        if (notIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "not_ids", notIds));
        }

        if (localPickup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_pickup", localPickup));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsAllGetValidateBeforeCall(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback _callback) throws ApiException {
        return listingsAllGetCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, _callback);

    }

    /**
     * All listings including used, handmade, and brand new
     * All listings including used, handmade, and brand new
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsAllGet(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset) throws ApiException {
        listingsAllGetWithHttpInfo(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset);
    }

    /**
     * All listings including used, handmade, and brand new
     * All listings including used, handmade, and brand new
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsAllGetWithHttpInfo(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listingsAllGetValidateBeforeCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * All listings including used, handmade, and brand new (asynchronously)
     * All listings including used, handmade, and brand new
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsAllGetAsync(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsAllGetValidateBeforeCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsFacetsSellerLocationGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsFacetsSellerLocationGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/facets/seller_location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsFacetsSellerLocationGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listingsFacetsSellerLocationGetCall(_callback);

    }

    /**
     * Individual facets
     * Individual facets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsFacetsSellerLocationGet() throws ApiException {
        listingsFacetsSellerLocationGetWithHttpInfo();
    }

    /**
     * Individual facets
     * Individual facets
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsFacetsSellerLocationGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listingsFacetsSellerLocationGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Individual facets (asynchronously)
     * Individual facets
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsFacetsSellerLocationGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsFacetsSellerLocationGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsGet
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsGetCall(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (auctionPriceMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auction_price_max", auctionPriceMax));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_type", productType));
        }

        if (conditions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "conditions", conditions));
        }

        if (decade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decade", decade));
        }

        if (finish != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("finish", finish));
        }

        if (handmade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handmade", handmade));
        }

        if (itemCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_city", itemCity));
        }

        if (itemCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_country", itemCountry));
        }

        if (itemRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_region", itemRegion));
        }

        if (itemState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_state", itemState));
        }

        if (make != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "make", make));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (mustNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("must_not", mustNot));
        }

        if (priceMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_max", priceMax));
        }

        if (priceMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price_min", priceMin));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (yearMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_max", yearMax));
        }

        if (yearMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year_min", yearMin));
        }

        if (acceptsGiftCards != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepts_gift_cards", acceptsGiftCards));
        }

        if (preferredSeller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferred_seller", preferredSeller));
        }

        if (shop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop", shop));
        }

        if (shopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_id", shopId));
        }

        if (listingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listing_type", listingType));
        }

        if (shipsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ships_to", shipsTo));
        }

        if (excludeAuctions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_auctions", excludeAuctions));
        }

        if (acceptsPaymentPlans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepts_payment_plans", acceptsPaymentPlans));
        }

        if (watchersCountMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("watchers_count_min", watchersCountMin));
        }

        if (notIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "not_ids", notIds));
        }

        if (localPickup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("local_pickup", localPickup));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsGetValidateBeforeCall(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback _callback) throws ApiException {
        return listingsGetCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, _callback);

    }

    /**
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsGet(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset) throws ApiException {
        listingsGetWithHttpInfo(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset);
    }

    /**
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsGetWithHttpInfo(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listingsGetValidateBeforeCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint. (asynchronously)
     * Default search of listings includes only used &amp; handmade. Add a filter to view all listings or use the /listings/all endpoint.
     * @param query Search query. (optional)
     * @param auctionPriceMax Maximum current auction price (optional)
     * @param category Category slug from /api/categories (optional)
     * @param productType Product type slug from /api/categories (optional)
     * @param conditions Condition: all,new,b-stock,used,non-functioning,all-but-new,poor,fair,good,very-good,excellent,mint (optional)
     * @param decade Decade: e.g. 1970s, early 70s (optional)
     * @param finish Visual finish of the item, common for guitars (optional)
     * @param handmade Handmade items only (optional)
     * @param itemCity City where item is located (optional)
     * @param itemCountry DEPRECATED - Country code where item is located (optional)
     * @param itemRegion Country code where item is located (optional)
     * @param itemState State or region code where item is located (optional)
     * @param make Make(s)/brand of item (e.g. Fender). Can take a single value or an array. (optional)
     * @param model Model of item (e.g. Stratocaster) (optional)
     * @param mustNot Search term negation. If you want to exclude a term, add it here (optional)
     * @param priceMax Maximum price of search results (USD) (optional)
     * @param priceMin Minimum price of search results (USD) (optional)
     * @param currency The currency to be used for the price filters (optional)
     * @param yearMax Maximum year of manufacture (optional)
     * @param yearMin Minumum year of manufacture (optional)
     * @param acceptsGiftCards If true, include only items that accept gift cards (optional)
     * @param preferredSeller If true, include only items by Reverb Preferred Sellers (optional)
     * @param shop Slug of shop to search (optional)
     * @param shopId ID of shop to search (optional)
     * @param listingType Type of listing: auctions,offers (optional)
     * @param shipsTo Limit search to items that ship to this country code (optional)
     * @param excludeAuctions If true, exclude auctions (optional)
     * @param acceptsPaymentPlans If true, only show items that can be purchased with a payment plan (optional)
     * @param watchersCountMin Minimum number of watchers (used to find popular items) (optional)
     * @param notIds Listing ID negation. If you want to exclude a listing, add it here. (optional)
     * @param localPickup Only items that offer local pickup (optional)
     * @param page  (optional, default to 1)
     * @param perPage  (optional, default to 24)
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsGetAsync(String query, Float auctionPriceMax, String category, String productType, List<String> conditions, String decade, String finish, Boolean handmade, String itemCity, String itemCountry, String itemRegion, String itemState, List<String> make, String model, String mustNot, Float priceMax, Float priceMin, String currency, Integer yearMax, Integer yearMin, Boolean acceptsGiftCards, Boolean preferredSeller, String shop, String shopId, String listingType, String shipsTo, Boolean excludeAuctions, Boolean acceptsPaymentPlans, Integer watchersCountMin, List<String> notIds, Boolean localPickup, Integer page, Integer perPage, Integer offset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsGetValidateBeforeCall(query, auctionPriceMax, category, productType, conditions, decade, finish, handmade, itemCity, itemCountry, itemRegion, itemState, make, model, mustNot, priceMax, priceMin, currency, yearMax, yearMin, acceptsGiftCards, preferredSeller, shop, shopId, listingType, shipsTo, excludeAuctions, acceptsPaymentPlans, watchersCountMin, notIds, localPickup, page, perPage, offset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsIdNegotiationGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsIdNegotiationGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{id}/negotiation"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsIdNegotiationGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingsIdNegotiationGet(Async)");
        }

        return listingsIdNegotiationGetCall(id, _callback);

    }

    /**
     * Returns the latest negotiation for the requesting user given a listing id
     * Returns the latest negotiation for the requesting user given a listing id
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsIdNegotiationGet(String id) throws ApiException {
        listingsIdNegotiationGetWithHttpInfo(id);
    }

    /**
     * Returns the latest negotiation for the requesting user given a listing id
     * Returns the latest negotiation for the requesting user given a listing id
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsIdNegotiationGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listingsIdNegotiationGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns the latest negotiation for the requesting user given a listing id (asynchronously)
     * Returns the latest negotiation for the requesting user given a listing id
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsIdNegotiationGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsIdNegotiationGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsIdOfferPost
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsIdOfferPostCall(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsIdOfferPostRequest;

        // create path and map variables
        String localVarPath = "/listings/{id}/offer"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsIdOfferPostValidateBeforeCall(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listingsIdOfferPost(Async)");
        }

        return listingsIdOfferPostCall(id, conversationsIdOfferPostRequest, _callback);

    }

    /**
     * Make an offer to the seller of a listing
     * Make an offer to the seller of a listing
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsIdOfferPost(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest) throws ApiException {
        listingsIdOfferPostWithHttpInfo(id, conversationsIdOfferPostRequest);
    }

    /**
     * Make an offer to the seller of a listing
     * Make an offer to the seller of a listing
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsIdOfferPostWithHttpInfo(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest) throws ApiException {
        okhttp3.Call localVarCall = listingsIdOfferPostValidateBeforeCall(id, conversationsIdOfferPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Make an offer to the seller of a listing (asynchronously)
     * Make an offer to the seller of a listing
     * @param id  (required)
     * @param conversationsIdOfferPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsIdOfferPostAsync(String id, ConversationsIdOfferPostRequest conversationsIdOfferPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsIdOfferPostValidateBeforeCall(id, conversationsIdOfferPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdBumpBudgetTypePost
     * @param listingId  (required)
     * @param budgetType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdBumpBudgetTypePostCall(String listingId, String budgetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/bump/{budget_type}"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()))
            .replace("{" + "budget_type" + "}", localVarApiClient.escapeString(budgetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdBumpBudgetTypePostValidateBeforeCall(String listingId, String budgetType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdBumpBudgetTypePost(Async)");
        }

        // verify the required parameter 'budgetType' is set
        if (budgetType == null) {
            throw new ApiException("Missing the required parameter 'budgetType' when calling listingsListingIdBumpBudgetTypePost(Async)");
        }

        return listingsListingIdBumpBudgetTypePostCall(listingId, budgetType, _callback);

    }

    /**
     * Bump a listing
     * Bump a listing
     * @param listingId  (required)
     * @param budgetType  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdBumpBudgetTypePost(String listingId, String budgetType) throws ApiException {
        listingsListingIdBumpBudgetTypePostWithHttpInfo(listingId, budgetType);
    }

    /**
     * Bump a listing
     * Bump a listing
     * @param listingId  (required)
     * @param budgetType  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdBumpBudgetTypePostWithHttpInfo(String listingId, String budgetType) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdBumpBudgetTypePostValidateBeforeCall(listingId, budgetType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bump a listing (asynchronously)
     * Bump a listing
     * @param listingId  (required)
     * @param budgetType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdBumpBudgetTypePostAsync(String listingId, String budgetType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdBumpBudgetTypePostValidateBeforeCall(listingId, budgetType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdBumpGet
     * @param listingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdBumpGetCall(String listingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/bump"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdBumpGetValidateBeforeCall(String listingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdBumpGet(Async)");
        }

        return listingsListingIdBumpGetCall(listingId, _callback);

    }

    /**
     * View available bump tiers and stats for a listing
     * View available bump tiers and stats for a listing
     * @param listingId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdBumpGet(String listingId) throws ApiException {
        listingsListingIdBumpGetWithHttpInfo(listingId);
    }

    /**
     * View available bump tiers and stats for a listing
     * View available bump tiers and stats for a listing
     * @param listingId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdBumpGetWithHttpInfo(String listingId) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdBumpGetValidateBeforeCall(listingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View available bump tiers and stats for a listing (asynchronously)
     * View available bump tiers and stats for a listing
     * @param listingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdBumpGetAsync(String listingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdBumpGetValidateBeforeCall(listingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdConversationsPost
     * @param listingId  (required)
     * @param listingsListingIdConversationsPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdConversationsPostCall(String listingId, ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listingsListingIdConversationsPostRequest;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/conversations"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdConversationsPostValidateBeforeCall(String listingId, ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdConversationsPost(Async)");
        }

        return listingsListingIdConversationsPostCall(listingId, listingsListingIdConversationsPostRequest, _callback);

    }

    /**
     * Start a conversation with a seller
     * Start a conversation with a seller
     * @param listingId  (required)
     * @param listingsListingIdConversationsPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdConversationsPost(String listingId, ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest) throws ApiException {
        listingsListingIdConversationsPostWithHttpInfo(listingId, listingsListingIdConversationsPostRequest);
    }

    /**
     * Start a conversation with a seller
     * Start a conversation with a seller
     * @param listingId  (required)
     * @param listingsListingIdConversationsPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdConversationsPostWithHttpInfo(String listingId, ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdConversationsPostValidateBeforeCall(listingId, listingsListingIdConversationsPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a conversation with a seller (asynchronously)
     * Start a conversation with a seller
     * @param listingId  (required)
     * @param listingsListingIdConversationsPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdConversationsPostAsync(String listingId, ListingsListingIdConversationsPostRequest listingsListingIdConversationsPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdConversationsPostValidateBeforeCall(listingId, listingsListingIdConversationsPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdImagesGet
     * @param listingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdImagesGetCall(String listingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/images"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdImagesGetValidateBeforeCall(String listingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdImagesGet(Async)");
        }

        return listingsListingIdImagesGetCall(listingId, _callback);

    }

    /**
     * View the images associated with a particular listing
     * View the images associated with a particular listing
     * @param listingId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdImagesGet(String listingId) throws ApiException {
        listingsListingIdImagesGetWithHttpInfo(listingId);
    }

    /**
     * View the images associated with a particular listing
     * View the images associated with a particular listing
     * @param listingId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdImagesGetWithHttpInfo(String listingId) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdImagesGetValidateBeforeCall(listingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View the images associated with a particular listing (asynchronously)
     * View the images associated with a particular listing
     * @param listingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdImagesGetAsync(String listingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdImagesGetValidateBeforeCall(listingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdImagesImageIdDelete
     * @param listingId  (required)
     * @param imageId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdImagesImageIdDeleteCall(String listingId, String imageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/images/{image_id}"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()))
            .replace("{" + "image_id" + "}", localVarApiClient.escapeString(imageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdImagesImageIdDeleteValidateBeforeCall(String listingId, String imageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdImagesImageIdDelete(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling listingsListingIdImagesImageIdDelete(Async)");
        }

        return listingsListingIdImagesImageIdDeleteCall(listingId, imageId, _callback);

    }

    /**
     * Delete an image from a listing
     * Delete an image from a listing
     * @param listingId  (required)
     * @param imageId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdImagesImageIdDelete(String listingId, String imageId) throws ApiException {
        listingsListingIdImagesImageIdDeleteWithHttpInfo(listingId, imageId);
    }

    /**
     * Delete an image from a listing
     * Delete an image from a listing
     * @param listingId  (required)
     * @param imageId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdImagesImageIdDeleteWithHttpInfo(String listingId, String imageId) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdImagesImageIdDeleteValidateBeforeCall(listingId, imageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an image from a listing (asynchronously)
     * Delete an image from a listing
     * @param listingId  (required)
     * @param imageId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdImagesImageIdDeleteAsync(String listingId, String imageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdImagesImageIdDeleteValidateBeforeCall(listingId, imageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsListingIdSalesGet
     * @param listingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdSalesGetCall(String listingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{listing_id}/sales"
            .replace("{" + "listing_id" + "}", localVarApiClient.escapeString(listingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsListingIdSalesGetValidateBeforeCall(String listingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling listingsListingIdSalesGet(Async)");
        }

        return listingsListingIdSalesGetCall(listingId, _callback);

    }

    /**
     * See all sales that include a listing.
     * See all sales that include a listing.
     * @param listingId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsListingIdSalesGet(String listingId) throws ApiException {
        listingsListingIdSalesGetWithHttpInfo(listingId);
    }

    /**
     * See all sales that include a listing.
     * See all sales that include a listing.
     * @param listingId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsListingIdSalesGetWithHttpInfo(String listingId) throws ApiException {
        okhttp3.Call localVarCall = listingsListingIdSalesGetValidateBeforeCall(listingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * See all sales that include a listing. (asynchronously)
     * See all sales that include a listing.
     * @param listingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsListingIdSalesGetAsync(String listingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsListingIdSalesGetValidateBeforeCall(listingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsPost
     * @param listingsPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsPostCall(ListingsPostRequest listingsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listingsPostRequest;

        // create path and map variables
        String localVarPath = "/listings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsPostValidateBeforeCall(ListingsPostRequest listingsPostRequest, final ApiCallback _callback) throws ApiException {
        return listingsPostCall(listingsPostRequest, _callback);

    }

    /**
     * Create a listing
     * Create a listing
     * @param listingsPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsPost(ListingsPostRequest listingsPostRequest) throws ApiException {
        listingsPostWithHttpInfo(listingsPostRequest);
    }

    /**
     * Create a listing
     * Create a listing
     * @param listingsPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsPostWithHttpInfo(ListingsPostRequest listingsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = listingsPostValidateBeforeCall(listingsPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a listing (asynchronously)
     * Create a listing
     * @param listingsPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsPostAsync(ListingsPostRequest listingsPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsPostValidateBeforeCall(listingsPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugDelete
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugDeleteCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugDeleteValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugDelete(Async)");
        }

        return listingsSlugDeleteCall(slug, _callback);

    }

    /**
     * Delete a draft listing. Cannot be used on non-drafts.
     * Delete a draft listing. Cannot be used on non-drafts.
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugDelete(String slug) throws ApiException {
        listingsSlugDeleteWithHttpInfo(slug);
    }

    /**
     * Delete a draft listing. Cannot be used on non-drafts.
     * Delete a draft listing. Cannot be used on non-drafts.
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugDeleteWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugDeleteValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a draft listing. Cannot be used on non-drafts. (asynchronously)
     * Delete a draft listing. Cannot be used on non-drafts.
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugDeleteAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugDeleteValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugEditGet
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugEditGetCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}/edit"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugEditGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugEditGet(Async)");
        }

        return listingsSlugEditGetCall(slug, _callback);

    }

    /**
     * Edit listing.
     * Edit listing.
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugEditGet(String slug) throws ApiException {
        listingsSlugEditGetWithHttpInfo(slug);
    }

    /**
     * Edit listing.
     * Edit listing.
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugEditGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugEditGetValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit listing. (asynchronously)
     * Edit listing.
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugEditGetAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugEditGetValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugFlagPost
     * @param slug  (required)
     * @param listingsSlugFlagPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugFlagPostCall(String slug, ListingsSlugFlagPostRequest listingsSlugFlagPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listingsSlugFlagPostRequest;

        // create path and map variables
        String localVarPath = "/listings/{slug}/flag"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugFlagPostValidateBeforeCall(String slug, ListingsSlugFlagPostRequest listingsSlugFlagPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugFlagPost(Async)");
        }

        return listingsSlugFlagPostCall(slug, listingsSlugFlagPostRequest, _callback);

    }

    /**
     * Flag a listing for inappropriate content or fraud
     * Flag a listing for inappropriate content or fraud
     * @param slug  (required)
     * @param listingsSlugFlagPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugFlagPost(String slug, ListingsSlugFlagPostRequest listingsSlugFlagPostRequest) throws ApiException {
        listingsSlugFlagPostWithHttpInfo(slug, listingsSlugFlagPostRequest);
    }

    /**
     * Flag a listing for inappropriate content or fraud
     * Flag a listing for inappropriate content or fraud
     * @param slug  (required)
     * @param listingsSlugFlagPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugFlagPostWithHttpInfo(String slug, ListingsSlugFlagPostRequest listingsSlugFlagPostRequest) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugFlagPostValidateBeforeCall(slug, listingsSlugFlagPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Flag a listing for inappropriate content or fraud (asynchronously)
     * Flag a listing for inappropriate content or fraud
     * @param slug  (required)
     * @param listingsSlugFlagPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugFlagPostAsync(String slug, ListingsSlugFlagPostRequest listingsSlugFlagPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugFlagPostValidateBeforeCall(slug, listingsSlugFlagPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugGet
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugGetCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugGet(Async)");
        }

        return listingsSlugGetCall(slug, _callback);

    }

    /**
     * Listing details
     * Listing details
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugGet(String slug) throws ApiException {
        listingsSlugGetWithHttpInfo(slug);
    }

    /**
     * Listing details
     * Listing details
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugGetValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Listing details (asynchronously)
     * Listing details
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugGetAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugGetValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugPut
     * @param slug  (required)
     * @param listingsPostRequest the content of the request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugPutCall(String slug, ListingsPostRequest listingsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listingsPostRequest;

        // create path and map variables
        String localVarPath = "/listings/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugPutValidateBeforeCall(String slug, ListingsPostRequest listingsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugPut(Async)");
        }

        return listingsSlugPutCall(slug, listingsPostRequest, _callback);

    }

    /**
     * Update a listing
     * Update a listing
     * @param slug  (required)
     * @param listingsPostRequest the content of the request (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugPut(String slug, ListingsPostRequest listingsPostRequest) throws ApiException {
        listingsSlugPutWithHttpInfo(slug, listingsPostRequest);
    }

    /**
     * Update a listing
     * Update a listing
     * @param slug  (required)
     * @param listingsPostRequest the content of the request (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugPutWithHttpInfo(String slug, ListingsPostRequest listingsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugPutValidateBeforeCall(slug, listingsPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a listing (asynchronously)
     * Update a listing
     * @param slug  (required)
     * @param listingsPostRequest the content of the request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugPutAsync(String slug, ListingsPostRequest listingsPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugPutValidateBeforeCall(slug, listingsPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugReviewsGet
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugReviewsGetCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}/reviews"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugReviewsGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugReviewsGet(Async)");
        }

        return listingsSlugReviewsGetCall(slug, _callback);

    }

    /**
     * View reviews of a listing
     * View reviews of a listing
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugReviewsGet(String slug) throws ApiException {
        listingsSlugReviewsGetWithHttpInfo(slug);
    }

    /**
     * View reviews of a listing
     * View reviews of a listing
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugReviewsGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugReviewsGetValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * View reviews of a listing (asynchronously)
     * View reviews of a listing
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugReviewsGetAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugReviewsGetValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugReviewsPost
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugReviewsPostCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}/reviews"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugReviewsPostValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugReviewsPost(Async)");
        }

        return listingsSlugReviewsPostCall(slug, _callback);

    }

    /**
     * Create a review for a listing
     * Create a review for a listing
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugReviewsPost(String slug) throws ApiException {
        listingsSlugReviewsPostWithHttpInfo(slug);
    }

    /**
     * Create a review for a listing
     * Create a review for a listing
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugReviewsPostWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugReviewsPostValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a review for a listing (asynchronously)
     * Create a review for a listing
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugReviewsPostAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugReviewsPostValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listingsSlugSimilarListingsGet
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugSimilarListingsGetCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/listings/{slug}/similar_listings"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listingsSlugSimilarListingsGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listingsSlugSimilarListingsGet(Async)");
        }

        return listingsSlugSimilarListingsGetCall(slug, _callback);

    }

    /**
     * Listing details
     * Listing details
     * @param slug  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public void listingsSlugSimilarListingsGet(String slug) throws ApiException {
        listingsSlugSimilarListingsGetWithHttpInfo(slug);
    }

    /**
     * Listing details
     * Listing details
     * @param slug  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listingsSlugSimilarListingsGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = listingsSlugSimilarListingsGetValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Listing details (asynchronously)
     * Listing details
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listingsSlugSimilarListingsGetAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listingsSlugSimilarListingsGetValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
