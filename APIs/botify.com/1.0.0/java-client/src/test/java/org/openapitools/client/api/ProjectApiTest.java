/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultPayload;
import org.openapitools.client.model.GetProjectAnalyses200Response;
import org.openapitools.client.model.GetSavedFilters200Response;
import org.openapitools.client.model.ProjectSavedFilter;
import org.openapitools.client.model.URLRewritingRulesSerializer;
import org.openapitools.client.model.UrlsAggsQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * List all analyses for a project
     *
     * List all analyses for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectAnalysesTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        Integer page = null;
        Integer size = null;
        GetProjectAnalyses200Response response = api.getProjectAnalyses(username, projectSlug, page, size);
        // TODO: test validations
    }

    /**
     * Project Query aggregator
     *
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectUrlsAggsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String area = null;
        String lastAnalysisSlug = null;
        Integer nbAnalyses = null;
        List<UrlsAggsQuery> urlsAggsQuery = null;
        Object response = api.getProjectUrlsAggs(username, projectSlug, area, lastAnalysisSlug, nbAnalyses, urlsAggsQuery);
        // TODO: test validations
    }

    /**
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     *
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedFilterTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String identifier = null;
        ProjectSavedFilter response = api.getSavedFilter(username, projectSlug, identifier);
        // TODO: test validations
    }

    /**
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     *
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedFiltersTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        Integer page = null;
        Integer size = null;
        GetSavedFilters200Response response = api.getSavedFilters(username, projectSlug, page, size);
        // TODO: test validations
    }

    /**
     * Match and replace parts of a URL based on rules passed in POST data
     *
     * Match and replace parts of a URL based on rules passed in POST data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testUrlRewritingRulesTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        URLRewritingRulesSerializer response = api.testUrlRewritingRules(username, projectSlug);
        // TODO: test validations
    }

}
