/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisDetail;
import org.openapitools.client.model.CrawlDatamodel;
import org.openapitools.client.model.CrawlStatistics;
import org.openapitools.client.model.CrawlStatisticsTime;
import org.openapitools.client.model.CsvExportStatus;
import org.openapitools.client.model.DefaultPayload;
import org.openapitools.client.model.GetGanalyticsOrphanURLs200Response;
import org.openapitools.client.model.GetLinksTopDomains200Response;
import org.openapitools.client.model.GetSitemapsSamplesOutOfConfig200Response;
import org.openapitools.client.model.GetUrls200Response;
import org.openapitools.client.model.GetUrlsExports200Response;
import org.openapitools.client.model.LinksPercentiles;
import org.openapitools.client.model.PageRankLost;
import org.openapitools.client.model.SitemapsReport;
import org.openapitools.client.model.UrlsAggsQuery;
import org.openapitools.client.model.UrlsQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisApi
 */
@Disabled
public class AnalysisApiTest {

    private final AnalysisApi api = new AnalysisApi();

    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv
     *
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUrlsExportTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String area = null;
        UrlsQuery urlsQuery = null;
        CsvExportStatus response = api.createUrlsExport(username, projectSlug, analysisSlug, area, urlsQuery);
        // TODO: test validations
    }

    /**
     * Get an Analysis detail
     *
     * Get an Analysis detail
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalysisSummaryTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        AnalysisDetail response = api.getAnalysisSummary(username, projectSlug, analysisSlug);
        // TODO: test validations
    }

    /**
     * Return global statistics for an analysis
     *
     * Return global statistics for an analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlStatisticsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        CrawlStatistics response = api.getCrawlStatistics(username, projectSlug, analysisSlug);
        // TODO: test validations
    }

    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
     *
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlStatisticsByFrequencyTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String frequency = null;
        Integer limit = null;
        CrawlStatisticsTime response = api.getCrawlStatisticsByFrequency(username, projectSlug, analysisSlug, frequency, limit);
        // TODO: test validations
    }

    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     *
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrawlStatisticsUrlsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String listType = null;
        List<Object> response = api.getCrawlStatisticsUrls(username, projectSlug, analysisSlug, listType);
        // TODO: test validations
    }

    /**
     * List of Orphan URLs
     *
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGanalyticsOrphanURLsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String medium = null;
        String source = null;
        Integer page = null;
        Integer size = null;
        GetGanalyticsOrphanURLs200Response response = api.getGanalyticsOrphanURLs(username, projectSlug, analysisSlug, medium, source, page, size);
        // TODO: test validations
    }

    /**
     * Get inlinks percentiles
     *
     * Get inlinks percentiles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinksPercentilesTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        LinksPercentiles response = api.getLinksPercentiles(username, projectSlug, analysisSlug);
        // TODO: test validations
    }

    /**
     * Top domains
     *
     * Top domains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinksTopDomainsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        Integer page = null;
        Integer size = null;
        GetLinksTopDomains200Response response = api.getLinksTopDomains(username, projectSlug, analysisSlug, page, size);
        // TODO: test validations
    }

    /**
     * Top subddomains
     *
     * Top subddomains
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinksTopSubdomainsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        Integer page = null;
        Integer size = null;
        GetLinksTopDomains200Response response = api.getLinksTopSubdomains(username, projectSlug, analysisSlug, page, size);
        // TODO: test validations
    }

    /**
     * Lost pagerank
     *
     * Lost pagerank
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPageRankLostTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        PageRankLost response = api.getPageRankLost(username, projectSlug, analysisSlug);
        // TODO: test validations
    }

    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
     *
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSitemapsReportTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        SitemapsReport response = api.getSitemapsReport(username, projectSlug, analysisSlug);
        // TODO: test validations
    }

    /**
     * Sample list of URLs which were found in your sitemaps but outside of the
     *
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSitemapsSamplesOutOfConfigTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        Integer page = null;
        Integer size = null;
        GetSitemapsSamplesOutOfConfig200Response response = api.getSitemapsSamplesOutOfConfig(username, projectSlug, analysisSlug, page, size);
        // TODO: test validations
    }

    /**
     * Sample list of URLs which were found in your sitemaps, within the project
     *
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSitemapsSamplesSitemapsOnlyTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        Integer page = null;
        Integer size = null;
        GetSitemapsSamplesOutOfConfig200Response response = api.getSitemapsSamplesSitemapsOnly(username, projectSlug, analysisSlug, page, size);
        // TODO: test validations
    }

    /**
     * Gets the detail of an URL for an analysis
     *
     * Gets the detail of an URL for an analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlDetailTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String url = null;
        List<String> fields = null;
        Object response = api.getUrlDetail(username, projectSlug, analysisSlug, url, fields);
        // TODO: test validations
    }

    /**
     * Executes a query and returns a paginated response
     *
     * Executes a query and returns a paginated response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String area = null;
        Integer page = null;
        Integer size = null;
        UrlsQuery urlsQuery = null;
        GetUrls200Response response = api.getUrls(username, projectSlug, analysisSlug, area, page, size, urlsQuery);
        // TODO: test validations
    }

    /**
     * Query aggregator
     *
     * Query aggregator. It accepts multiple queries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsAggsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String area = null;
        List<UrlsAggsQuery> urlsAggsQuery = null;
        List<Object> response = api.getUrlsAggs(username, projectSlug, analysisSlug, area, urlsAggsQuery);
        // TODO: test validations
    }

    /**
     * Gets an Analysis datamodel
     *
     * Gets an Analysis datamodel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsDatamodelTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String area = null;
        CrawlDatamodel response = api.getUrlsDatamodel(username, projectSlug, analysisSlug, area);
        // TODO: test validations
    }

    /**
     * Checks the status of an CSVUrlExportJob object
     *
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsExportStatusTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String urlExportId = null;
        CsvExportStatus response = api.getUrlsExportStatus(username, projectSlug, analysisSlug, urlExportId);
        // TODO: test validations
    }

    /**
     * A list of the CSV Exports requests and their current status
     *
     * A list of the CSV Exports requests and their current status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsExportsTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        Integer page = null;
        Integer size = null;
        GetUrlsExports200Response response = api.getUrlsExports(username, projectSlug, analysisSlug, page, size);
        // TODO: test validations
    }

    /**
     * Return most frequent segments (&#x3D; suggested patterns in the previous version)
     *
     * Return most frequent segments (&#x3D; suggested patterns in the previous version) for a Botify Query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUrlsSuggestedFiltersTest() throws ApiException {
        String username = null;
        String projectSlug = null;
        String analysisSlug = null;
        String area = null;
        UrlsAggsQuery urlsAggsQuery = null;
        UrlsAggsQuery response = api.getUrlsSuggestedFilters(username, projectSlug, analysisSlug, area, urlsAggsQuery);
        // TODO: test validations
    }

}
