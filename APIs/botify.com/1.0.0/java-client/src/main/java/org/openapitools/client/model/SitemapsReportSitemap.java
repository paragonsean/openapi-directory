/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SitemapsReportSitemapError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SitemapsReportSitemap
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:20.270781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SitemapsReportSitemap {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private SitemapsReportSitemapError error;

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_INVALID_URLS = "invalid_urls";
  @SerializedName(SERIALIZED_NAME_INVALID_URLS)
  private Long invalidUrls;

  public static final String SERIALIZED_NAME_SITEMAP_INDEXES = "sitemap_indexes";
  @SerializedName(SERIALIZED_NAME_SITEMAP_INDEXES)
  private List<String> sitemapIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VALID_URLS = "valid_urls";
  @SerializedName(SERIALIZED_NAME_VALID_URLS)
  private Long validUrls;

  public SitemapsReportSitemap() {
  }

  public SitemapsReportSitemap error(SitemapsReportSitemapError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public SitemapsReportSitemapError getError() {
    return error;
  }

  public void setError(SitemapsReportSitemapError error) {
    this.error = error;
  }


  public SitemapsReportSitemap fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * 
   * @return fileType
   */
  @javax.annotation.Nullable
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public SitemapsReportSitemap invalidUrls(Long invalidUrls) {
    this.invalidUrls = invalidUrls;
    return this;
  }

  /**
   * 
   * @return invalidUrls
   */
  @javax.annotation.Nullable
  public Long getInvalidUrls() {
    return invalidUrls;
  }

  public void setInvalidUrls(Long invalidUrls) {
    this.invalidUrls = invalidUrls;
  }


  public SitemapsReportSitemap sitemapIndexes(List<String> sitemapIndexes) {
    this.sitemapIndexes = sitemapIndexes;
    return this;
  }

  public SitemapsReportSitemap addSitemapIndexesItem(String sitemapIndexesItem) {
    if (this.sitemapIndexes == null) {
      this.sitemapIndexes = new ArrayList<>();
    }
    this.sitemapIndexes.add(sitemapIndexesItem);
    return this;
  }

  /**
   * 
   * @return sitemapIndexes
   */
  @javax.annotation.Nullable
  public List<String> getSitemapIndexes() {
    return sitemapIndexes;
  }

  public void setSitemapIndexes(List<String> sitemapIndexes) {
    this.sitemapIndexes = sitemapIndexes;
  }


  public SitemapsReportSitemap url(String url) {
    this.url = url;
    return this;
  }

  /**
   * 
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public SitemapsReportSitemap validUrls(Long validUrls) {
    this.validUrls = validUrls;
    return this;
  }

  /**
   * 
   * @return validUrls
   */
  @javax.annotation.Nullable
  public Long getValidUrls() {
    return validUrls;
  }

  public void setValidUrls(Long validUrls) {
    this.validUrls = validUrls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SitemapsReportSitemap sitemapsReportSitemap = (SitemapsReportSitemap) o;
    return Objects.equals(this.error, sitemapsReportSitemap.error) &&
        Objects.equals(this.fileType, sitemapsReportSitemap.fileType) &&
        Objects.equals(this.invalidUrls, sitemapsReportSitemap.invalidUrls) &&
        Objects.equals(this.sitemapIndexes, sitemapsReportSitemap.sitemapIndexes) &&
        Objects.equals(this.url, sitemapsReportSitemap.url) &&
        Objects.equals(this.validUrls, sitemapsReportSitemap.validUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, fileType, invalidUrls, sitemapIndexes, url, validUrls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SitemapsReportSitemap {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    invalidUrls: ").append(toIndentedString(invalidUrls)).append("\n");
    sb.append("    sitemapIndexes: ").append(toIndentedString(sitemapIndexes)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    validUrls: ").append(toIndentedString(validUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("file_type");
    openapiFields.add("invalid_urls");
    openapiFields.add("sitemap_indexes");
    openapiFields.add("url");
    openapiFields.add("valid_urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SitemapsReportSitemap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SitemapsReportSitemap.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SitemapsReportSitemap is not found in the empty JSON string", SitemapsReportSitemap.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SitemapsReportSitemap.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SitemapsReportSitemap` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SitemapsReportSitemap.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        SitemapsReportSitemapError.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("file_type") != null && !jsonObj.get("file_type").isJsonNull()) && !jsonObj.get("file_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sitemap_indexes") != null && !jsonObj.get("sitemap_indexes").isJsonNull() && !jsonObj.get("sitemap_indexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitemap_indexes` to be an array in the JSON string but got `%s`", jsonObj.get("sitemap_indexes").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SitemapsReportSitemap.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SitemapsReportSitemap' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SitemapsReportSitemap> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SitemapsReportSitemap.class));

       return (TypeAdapter<T>) new TypeAdapter<SitemapsReportSitemap>() {
           @Override
           public void write(JsonWriter out, SitemapsReportSitemap value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SitemapsReportSitemap read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SitemapsReportSitemap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SitemapsReportSitemap
   * @throws IOException if the JSON string is invalid with respect to SitemapsReportSitemap
   */
  public static SitemapsReportSitemap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SitemapsReportSitemap.class);
  }

  /**
   * Convert an instance of SitemapsReportSitemap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

