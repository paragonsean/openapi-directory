/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultPayload;
import org.openapitools.client.model.GetProjectAnalyses200Response;
import org.openapitools.client.model.GetSavedFilters200Response;
import org.openapitools.client.model.ProjectSavedFilter;
import org.openapitools.client.model.URLRewritingRulesSerializer;
import org.openapitools.client.model.UrlsAggsQuery;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProjectAnalyses
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAnalysesCall(String username, String projectSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectAnalysesValidateBeforeCall(String username, String projectSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getProjectAnalyses(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectAnalyses(Async)");
        }

        return getProjectAnalysesCall(username, projectSlug, page, size, _callback);

    }

    /**
     * List all analyses for a project
     * List all analyses for a project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetProjectAnalyses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectAnalyses200Response getProjectAnalyses(String username, String projectSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetProjectAnalyses200Response> localVarResp = getProjectAnalysesWithHttpInfo(username, projectSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * List all analyses for a project
     * List all analyses for a project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetProjectAnalyses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProjectAnalyses200Response> getProjectAnalysesWithHttpInfo(String username, String projectSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getProjectAnalysesValidateBeforeCall(username, projectSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetProjectAnalyses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all analyses for a project (asynchronously)
     * List all analyses for a project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAnalysesAsync(String username, String projectSlug, Integer page, Integer size, final ApiCallback<GetProjectAnalyses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectAnalysesValidateBeforeCall(username, projectSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetProjectAnalyses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectUrlsAggs
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param area Analysis context to execute the queries (optional, default to current)
     * @param lastAnalysisSlug Last analysis on the trend (optional)
     * @param nbAnalyses Max number of analysis to return (optional, default to 20)
     * @param urlsAggsQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectUrlsAggsCall(String username, String projectSlug, String area, String lastAnalysisSlug, Integer nbAnalyses, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlsAggsQuery;

        // create path and map variables
        String localVarPath = "/projects/{username}/{project_slug}/urls/aggs"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        if (lastAnalysisSlug != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_analysis_slug", lastAnalysisSlug));
        }

        if (nbAnalyses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nb_analyses", nbAnalyses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectUrlsAggsValidateBeforeCall(String username, String projectSlug, String area, String lastAnalysisSlug, Integer nbAnalyses, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getProjectUrlsAggs(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getProjectUrlsAggs(Async)");
        }

        return getProjectUrlsAggsCall(username, projectSlug, area, lastAnalysisSlug, nbAnalyses, urlsAggsQuery, _callback);

    }

    /**
     * Project Query aggregator
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param area Analysis context to execute the queries (optional, default to current)
     * @param lastAnalysisSlug Last analysis on the trend (optional)
     * @param nbAnalyses Max number of analysis to return (optional, default to 20)
     * @param urlsAggsQuery  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public Object getProjectUrlsAggs(String username, String projectSlug, String area, String lastAnalysisSlug, Integer nbAnalyses, List<UrlsAggsQuery> urlsAggsQuery) throws ApiException {
        ApiResponse<Object> localVarResp = getProjectUrlsAggsWithHttpInfo(username, projectSlug, area, lastAnalysisSlug, nbAnalyses, urlsAggsQuery);
        return localVarResp.getData();
    }

    /**
     * Project Query aggregator
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param area Analysis context to execute the queries (optional, default to current)
     * @param lastAnalysisSlug Last analysis on the trend (optional)
     * @param nbAnalyses Max number of analysis to return (optional, default to 20)
     * @param urlsAggsQuery  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProjectUrlsAggsWithHttpInfo(String username, String projectSlug, String area, String lastAnalysisSlug, Integer nbAnalyses, List<UrlsAggsQuery> urlsAggsQuery) throws ApiException {
        okhttp3.Call localVarCall = getProjectUrlsAggsValidateBeforeCall(username, projectSlug, area, lastAnalysisSlug, nbAnalyses, urlsAggsQuery, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Project Query aggregator (asynchronously)
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param area Analysis context to execute the queries (optional, default to current)
     * @param lastAnalysisSlug Last analysis on the trend (optional)
     * @param nbAnalyses Max number of analysis to return (optional, default to 20)
     * @param urlsAggsQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectUrlsAggsAsync(String username, String projectSlug, String area, String lastAnalysisSlug, Integer nbAnalyses, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectUrlsAggsValidateBeforeCall(username, projectSlug, area, lastAnalysisSlug, nbAnalyses, urlsAggsQuery, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedFilter
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param identifier Saved Filter&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedFilterCall(String username, String projectSlug, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{username}/{project_slug}/filters/{identifier}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedFilterValidateBeforeCall(String username, String projectSlug, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getSavedFilter(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getSavedFilter(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getSavedFilter(Async)");
        }

        return getSavedFilterCall(username, projectSlug, identifier, _callback);

    }

    /**
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param identifier Saved Filter&#39;s identifier (required)
     * @return ProjectSavedFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ProjectSavedFilter getSavedFilter(String username, String projectSlug, String identifier) throws ApiException {
        ApiResponse<ProjectSavedFilter> localVarResp = getSavedFilterWithHttpInfo(username, projectSlug, identifier);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param identifier Saved Filter&#39;s identifier (required)
     * @return ApiResponse&lt;ProjectSavedFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectSavedFilter> getSavedFilterWithHttpInfo(String username, String projectSlug, String identifier) throws ApiException {
        okhttp3.Call localVarCall = getSavedFilterValidateBeforeCall(username, projectSlug, identifier, null);
        Type localVarReturnType = new TypeToken<ProjectSavedFilter>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific saved filter&#39;s name, ID and filter value (asynchronously)
     * Retrieves a specific saved filter&#39;s name, ID and filter value
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param identifier Saved Filter&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedFilterAsync(String username, String projectSlug, String identifier, final ApiCallback<ProjectSavedFilter> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedFilterValidateBeforeCall(username, projectSlug, identifier, _callback);
        Type localVarReturnType = new TypeToken<ProjectSavedFilter>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSavedFilters
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedFiltersCall(String username, String projectSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{username}/{project_slug}/filters"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSavedFiltersValidateBeforeCall(String username, String projectSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getSavedFilters(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getSavedFilters(Async)");
        }

        return getSavedFiltersCall(username, projectSlug, page, size, _callback);

    }

    /**
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetSavedFilters200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetSavedFilters200Response getSavedFilters(String username, String projectSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetSavedFilters200Response> localVarResp = getSavedFiltersWithHttpInfo(username, projectSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetSavedFilters200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSavedFilters200Response> getSavedFiltersWithHttpInfo(String username, String projectSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getSavedFiltersValidateBeforeCall(username, projectSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetSavedFilters200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value) (asynchronously)
     * List all the project&#39;s saved filters (each filter&#39;s name, ID and filter value)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSavedFiltersAsync(String username, String projectSlug, Integer page, Integer size, final ApiCallback<GetSavedFilters200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSavedFiltersValidateBeforeCall(username, projectSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetSavedFilters200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUrlRewritingRules
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUrlRewritingRulesCall(String username, String projectSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{username}/{project_slug}/features/url_rewriting/rules_validator"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUrlRewritingRulesValidateBeforeCall(String username, String projectSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling testUrlRewritingRules(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling testUrlRewritingRules(Async)");
        }

        return testUrlRewritingRulesCall(username, projectSlug, _callback);

    }

    /**
     * Match and replace parts of a URL based on rules passed in POST data
     * Match and replace parts of a URL based on rules passed in POST data.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @return URLRewritingRulesSerializer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public URLRewritingRulesSerializer testUrlRewritingRules(String username, String projectSlug) throws ApiException {
        ApiResponse<URLRewritingRulesSerializer> localVarResp = testUrlRewritingRulesWithHttpInfo(username, projectSlug);
        return localVarResp.getData();
    }

    /**
     * Match and replace parts of a URL based on rules passed in POST data
     * Match and replace parts of a URL based on rules passed in POST data.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @return ApiResponse&lt;URLRewritingRulesSerializer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<URLRewritingRulesSerializer> testUrlRewritingRulesWithHttpInfo(String username, String projectSlug) throws ApiException {
        okhttp3.Call localVarCall = testUrlRewritingRulesValidateBeforeCall(username, projectSlug, null);
        Type localVarReturnType = new TypeToken<URLRewritingRulesSerializer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Match and replace parts of a URL based on rules passed in POST data (asynchronously)
     * Match and replace parts of a URL based on rules passed in POST data.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUrlRewritingRulesAsync(String username, String projectSlug, final ApiCallback<URLRewritingRulesSerializer> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUrlRewritingRulesValidateBeforeCall(username, projectSlug, _callback);
        Type localVarReturnType = new TypeToken<URLRewritingRulesSerializer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
