/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalysisDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:20.270781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisDetail {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private String config;

  public static final String SERIALIZED_NAME_DATE_FINISHED = "date_finished";
  @SerializedName(SERIALIZED_NAME_DATE_FINISHED)
  private OffsetDateTime dateFinished;

  public static final String SERIALIZED_NAME_DATE_LAST_MODIFIED = "date_last_modified";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_MODIFIED)
  private OffsetDateTime dateLastModified;

  public static final String SERIALIZED_NAME_DATE_LAUNCHED = "date_launched";
  @SerializedName(SERIALIZED_NAME_DATE_LAUNCHED)
  private OffsetDateTime dateLaunched;

  public static final String SERIALIZED_NAME_FAILURES = "failures";
  @SerializedName(SERIALIZED_NAME_FAILURES)
  private String failures;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private String features;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RED_BUTTON_DOMAIN = "red_button_domain";
  @SerializedName(SERIALIZED_NAME_RED_BUTTON_DOMAIN)
  private String redButtonDomain;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URLS_DONE = "urls_done";
  @SerializedName(SERIALIZED_NAME_URLS_DONE)
  private String urlsDone;

  public static final String SERIALIZED_NAME_URLS_IN_QUEUE = "urls_in_queue";
  @SerializedName(SERIALIZED_NAME_URLS_IN_QUEUE)
  private String urlsInQueue;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public AnalysisDetail() {
  }

  public AnalysisDetail(
     String config, 
     String failures, 
     String features, 
     Long id, 
     String name, 
     String slug, 
     String url, 
     String urlsDone, 
     String urlsInQueue
  ) {
    this();
    this.config = config;
    this.failures = failures;
    this.features = features;
    this.id = id;
    this.name = name;
    this.slug = slug;
    this.url = url;
    this.urlsDone = urlsDone;
    this.urlsInQueue = urlsInQueue;
  }

  /**
   * 
   * @return config
   */
  @javax.annotation.Nullable
  public String getConfig() {
    return config;
  }



  public AnalysisDetail dateFinished(OffsetDateTime dateFinished) {
    this.dateFinished = dateFinished;
    return this;
  }

  /**
   * 
   * @return dateFinished
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateFinished() {
    return dateFinished;
  }

  public void setDateFinished(OffsetDateTime dateFinished) {
    this.dateFinished = dateFinished;
  }


  public AnalysisDetail dateLastModified(OffsetDateTime dateLastModified) {
    this.dateLastModified = dateLastModified;
    return this;
  }

  /**
   * Date of last modified analysis
   * @return dateLastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLastModified() {
    return dateLastModified;
  }

  public void setDateLastModified(OffsetDateTime dateLastModified) {
    this.dateLastModified = dateLastModified;
  }


  public AnalysisDetail dateLaunched(OffsetDateTime dateLaunched) {
    this.dateLaunched = dateLaunched;
    return this;
  }

  /**
   * 
   * @return dateLaunched
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateLaunched() {
    return dateLaunched;
  }

  public void setDateLaunched(OffsetDateTime dateLaunched) {
    this.dateLaunched = dateLaunched;
  }


  /**
   * 
   * @return failures
   */
  @javax.annotation.Nullable
  public String getFailures() {
    return failures;
  }



  /**
   * 
   * @return features
   */
  @javax.annotation.Nullable
  public String getFeatures() {
    return features;
  }



  /**
   * 
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }



  /**
   * 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public AnalysisDetail redButtonDomain(String redButtonDomain) {
    this.redButtonDomain = redButtonDomain;
    return this;
  }

  /**
   * 
   * @return redButtonDomain
   */
  @javax.annotation.Nullable
  public String getRedButtonDomain() {
    return redButtonDomain;
  }

  public void setRedButtonDomain(String redButtonDomain) {
    this.redButtonDomain = redButtonDomain;
  }


  /**
   * 
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }



  /**
   * 
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }



  /**
   * 
   * @return urlsDone
   */
  @javax.annotation.Nullable
  public String getUrlsDone() {
    return urlsDone;
  }



  /**
   * 
   * @return urlsInQueue
   */
  @javax.annotation.Nullable
  public String getUrlsInQueue() {
    return urlsInQueue;
  }



  public AnalysisDetail user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisDetail analysisDetail = (AnalysisDetail) o;
    return Objects.equals(this.config, analysisDetail.config) &&
        Objects.equals(this.dateFinished, analysisDetail.dateFinished) &&
        Objects.equals(this.dateLastModified, analysisDetail.dateLastModified) &&
        Objects.equals(this.dateLaunched, analysisDetail.dateLaunched) &&
        Objects.equals(this.failures, analysisDetail.failures) &&
        Objects.equals(this.features, analysisDetail.features) &&
        Objects.equals(this.id, analysisDetail.id) &&
        Objects.equals(this.name, analysisDetail.name) &&
        Objects.equals(this.redButtonDomain, analysisDetail.redButtonDomain) &&
        Objects.equals(this.slug, analysisDetail.slug) &&
        Objects.equals(this.url, analysisDetail.url) &&
        Objects.equals(this.urlsDone, analysisDetail.urlsDone) &&
        Objects.equals(this.urlsInQueue, analysisDetail.urlsInQueue) &&
        Objects.equals(this.user, analysisDetail.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, dateFinished, dateLastModified, dateLaunched, failures, features, id, name, redButtonDomain, slug, url, urlsDone, urlsInQueue, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisDetail {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    dateFinished: ").append(toIndentedString(dateFinished)).append("\n");
    sb.append("    dateLastModified: ").append(toIndentedString(dateLastModified)).append("\n");
    sb.append("    dateLaunched: ").append(toIndentedString(dateLaunched)).append("\n");
    sb.append("    failures: ").append(toIndentedString(failures)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redButtonDomain: ").append(toIndentedString(redButtonDomain)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlsDone: ").append(toIndentedString(urlsDone)).append("\n");
    sb.append("    urlsInQueue: ").append(toIndentedString(urlsInQueue)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("date_finished");
    openapiFields.add("date_last_modified");
    openapiFields.add("date_launched");
    openapiFields.add("failures");
    openapiFields.add("features");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("red_button_domain");
    openapiFields.add("slug");
    openapiFields.add("url");
    openapiFields.add("urls_done");
    openapiFields.add("urls_in_queue");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisDetail is not found in the empty JSON string", AnalysisDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalysisDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) && !jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if ((jsonObj.get("failures") != null && !jsonObj.get("failures").isJsonNull()) && !jsonObj.get("failures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failures").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("red_button_domain") != null && !jsonObj.get("red_button_domain").isJsonNull()) && !jsonObj.get("red_button_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `red_button_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("red_button_domain").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urls_done") != null && !jsonObj.get("urls_done").isJsonNull()) && !jsonObj.get("urls_done").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls_done` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urls_done").toString()));
      }
      if ((jsonObj.get("urls_in_queue") != null && !jsonObj.get("urls_in_queue").isJsonNull()) && !jsonObj.get("urls_in_queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urls_in_queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urls_in_queue").toString()));
      }
      // validate the required field `user`
      User.validateJsonElement(jsonObj.get("user"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisDetail>() {
           @Override
           public void write(JsonWriter out, AnalysisDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisDetail
   * @throws IOException if the JSON string is invalid with respect to AnalysisDetail
   */
  public static AnalysisDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisDetail.class);
  }

  /**
   * Convert an instance of AnalysisDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

