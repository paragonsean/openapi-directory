/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalysisDetail;
import org.openapitools.client.model.CrawlDatamodel;
import org.openapitools.client.model.CrawlStatistics;
import org.openapitools.client.model.CrawlStatisticsTime;
import org.openapitools.client.model.CsvExportStatus;
import org.openapitools.client.model.DefaultPayload;
import org.openapitools.client.model.GetGanalyticsOrphanURLs200Response;
import org.openapitools.client.model.GetLinksTopDomains200Response;
import org.openapitools.client.model.GetSitemapsSamplesOutOfConfig200Response;
import org.openapitools.client.model.GetUrls200Response;
import org.openapitools.client.model.GetUrlsExports200Response;
import org.openapitools.client.model.LinksPercentiles;
import org.openapitools.client.model.PageRankLost;
import org.openapitools.client.model.SitemapsReport;
import org.openapitools.client.model.UrlsAggsQuery;
import org.openapitools.client.model.UrlsQuery;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUrlsExport
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUrlsExportCall(String username, String projectSlug, String analysisSlug, String area, UrlsQuery urlsQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlsQuery;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/export"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUrlsExportValidateBeforeCall(String username, String projectSlug, String analysisSlug, String area, UrlsQuery urlsQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling createUrlsExport(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling createUrlsExport(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling createUrlsExport(Async)");
        }

        return createUrlsExportCall(username, projectSlug, analysisSlug, area, urlsQuery, _callback);

    }

    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsQuery  (optional)
     * @return CsvExportStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public CsvExportStatus createUrlsExport(String username, String projectSlug, String analysisSlug, String area, UrlsQuery urlsQuery) throws ApiException {
        ApiResponse<CsvExportStatus> localVarResp = createUrlsExportWithHttpInfo(username, projectSlug, analysisSlug, area, urlsQuery);
        return localVarResp.getData();
    }

    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsQuery  (optional)
     * @return ApiResponse&lt;CsvExportStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CsvExportStatus> createUrlsExportWithHttpInfo(String username, String projectSlug, String analysisSlug, String area, UrlsQuery urlsQuery) throws ApiException {
        okhttp3.Call localVarCall = createUrlsExportValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsQuery, null);
        Type localVarReturnType = new TypeToken<CsvExportStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv (asynchronously)
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUrlsExportAsync(String username, String projectSlug, String analysisSlug, String area, UrlsQuery urlsQuery, final ApiCallback<CsvExportStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUrlsExportValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsQuery, _callback);
        Type localVarReturnType = new TypeToken<CsvExportStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalysisSummary
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisSummaryCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalysisSummaryValidateBeforeCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getAnalysisSummary(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getAnalysisSummary(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getAnalysisSummary(Async)");
        }

        return getAnalysisSummaryCall(username, projectSlug, analysisSlug, _callback);

    }

    /**
     * Get an Analysis detail
     * Get an Analysis detail
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return AnalysisDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisDetail getAnalysisSummary(String username, String projectSlug, String analysisSlug) throws ApiException {
        ApiResponse<AnalysisDetail> localVarResp = getAnalysisSummaryWithHttpInfo(username, projectSlug, analysisSlug);
        return localVarResp.getData();
    }

    /**
     * Get an Analysis detail
     * Get an Analysis detail
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return ApiResponse&lt;AnalysisDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisDetail> getAnalysisSummaryWithHttpInfo(String username, String projectSlug, String analysisSlug) throws ApiException {
        okhttp3.Call localVarCall = getAnalysisSummaryValidateBeforeCall(username, projectSlug, analysisSlug, null);
        Type localVarReturnType = new TypeToken<AnalysisDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an Analysis detail (asynchronously)
     * Get an Analysis detail
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisSummaryAsync(String username, String projectSlug, String analysisSlug, final ApiCallback<AnalysisDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalysisSummaryValidateBeforeCall(username, projectSlug, analysisSlug, _callback);
        Type localVarReturnType = new TypeToken<AnalysisDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrawlStatistics
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrawlStatisticsValidateBeforeCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCrawlStatistics(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getCrawlStatistics(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getCrawlStatistics(Async)");
        }

        return getCrawlStatisticsCall(username, projectSlug, analysisSlug, _callback);

    }

    /**
     * Return global statistics for an analysis
     * Return global statistics for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return CrawlStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public CrawlStatistics getCrawlStatistics(String username, String projectSlug, String analysisSlug) throws ApiException {
        ApiResponse<CrawlStatistics> localVarResp = getCrawlStatisticsWithHttpInfo(username, projectSlug, analysisSlug);
        return localVarResp.getData();
    }

    /**
     * Return global statistics for an analysis
     * Return global statistics for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return ApiResponse&lt;CrawlStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrawlStatistics> getCrawlStatisticsWithHttpInfo(String username, String projectSlug, String analysisSlug) throws ApiException {
        okhttp3.Call localVarCall = getCrawlStatisticsValidateBeforeCall(username, projectSlug, analysisSlug, null);
        Type localVarReturnType = new TypeToken<CrawlStatistics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return global statistics for an analysis (asynchronously)
     * Return global statistics for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsAsync(String username, String projectSlug, String analysisSlug, final ApiCallback<CrawlStatistics> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrawlStatisticsValidateBeforeCall(username, projectSlug, analysisSlug, _callback);
        Type localVarReturnType = new TypeToken<CrawlStatistics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrawlStatisticsByFrequency
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param frequency Aggregation frequency (required)
     * @param limit max number of elements to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsByFrequencyCall(String username, String projectSlug, String analysisSlug, String frequency, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/time"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (frequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("frequency", frequency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrawlStatisticsByFrequencyValidateBeforeCall(String username, String projectSlug, String analysisSlug, String frequency, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCrawlStatisticsByFrequency(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getCrawlStatisticsByFrequency(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getCrawlStatisticsByFrequency(Async)");
        }

        // verify the required parameter 'frequency' is set
        if (frequency == null) {
            throw new ApiException("Missing the required parameter 'frequency' when calling getCrawlStatisticsByFrequency(Async)");
        }

        return getCrawlStatisticsByFrequencyCall(username, projectSlug, analysisSlug, frequency, limit, _callback);

    }

    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param frequency Aggregation frequency (required)
     * @param limit max number of elements to retrieve (optional)
     * @return CrawlStatisticsTime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public CrawlStatisticsTime getCrawlStatisticsByFrequency(String username, String projectSlug, String analysisSlug, String frequency, Integer limit) throws ApiException {
        ApiResponse<CrawlStatisticsTime> localVarResp = getCrawlStatisticsByFrequencyWithHttpInfo(username, projectSlug, analysisSlug, frequency, limit);
        return localVarResp.getData();
    }

    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param frequency Aggregation frequency (required)
     * @param limit max number of elements to retrieve (optional)
     * @return ApiResponse&lt;CrawlStatisticsTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrawlStatisticsTime> getCrawlStatisticsByFrequencyWithHttpInfo(String username, String projectSlug, String analysisSlug, String frequency, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCrawlStatisticsByFrequencyValidateBeforeCall(username, projectSlug, analysisSlug, frequency, limit, null);
        Type localVarReturnType = new TypeToken<CrawlStatisticsTime>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) (asynchronously)
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param frequency Aggregation frequency (required)
     * @param limit max number of elements to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsByFrequencyAsync(String username, String projectSlug, String analysisSlug, String frequency, Integer limit, final ApiCallback<CrawlStatisticsTime> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrawlStatisticsByFrequencyValidateBeforeCall(username, projectSlug, analysisSlug, frequency, limit, _callback);
        Type localVarReturnType = new TypeToken<CrawlStatisticsTime>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrawlStatisticsUrls
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param listType URLs list type (crawled URLs or error URLs) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsUrlsCall(String username, String projectSlug, String analysisSlug, String listType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/urls/{list_type}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()))
            .replace("{" + "list_type" + "}", localVarApiClient.escapeString(listType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrawlStatisticsUrlsValidateBeforeCall(String username, String projectSlug, String analysisSlug, String listType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCrawlStatisticsUrls(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getCrawlStatisticsUrls(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getCrawlStatisticsUrls(Async)");
        }

        // verify the required parameter 'listType' is set
        if (listType == null) {
            throw new ApiException("Missing the required parameter 'listType' when calling getCrawlStatisticsUrls(Async)");
        }

        return getCrawlStatisticsUrlsCall(username, projectSlug, analysisSlug, listType, _callback);

    }

    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param listType URLs list type (crawled URLs or error URLs) (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getCrawlStatisticsUrls(String username, String projectSlug, String analysisSlug, String listType) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getCrawlStatisticsUrlsWithHttpInfo(username, projectSlug, analysisSlug, listType);
        return localVarResp.getData();
    }

    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param listType URLs list type (crawled URLs or error URLs) (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getCrawlStatisticsUrlsWithHttpInfo(String username, String projectSlug, String analysisSlug, String listType) throws ApiException {
        okhttp3.Call localVarCall = getCrawlStatisticsUrlsValidateBeforeCall(username, projectSlug, analysisSlug, listType, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors) (asynchronously)
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param listType URLs list type (crawled URLs or error URLs) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrawlStatisticsUrlsAsync(String username, String projectSlug, String analysisSlug, String listType, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrawlStatisticsUrlsValidateBeforeCall(username, projectSlug, analysisSlug, listType, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGanalyticsOrphanURLs
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param medium Type of traffic, value: &#39;organic&#39; (from search engine)or &#39;social&#39; (from a social network) (required)
     * @param source Traffic source, value: name of the search engine or social network (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGanalyticsOrphanURLsCall(String username, String projectSlug, String analysisSlug, String medium, String source, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/ganalytics/orphan_urls/{medium}/{source}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()))
            .replace("{" + "medium" + "}", localVarApiClient.escapeString(medium.toString()))
            .replace("{" + "source" + "}", localVarApiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGanalyticsOrphanURLsValidateBeforeCall(String username, String projectSlug, String analysisSlug, String medium, String source, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getGanalyticsOrphanURLs(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getGanalyticsOrphanURLs(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getGanalyticsOrphanURLs(Async)");
        }

        // verify the required parameter 'medium' is set
        if (medium == null) {
            throw new ApiException("Missing the required parameter 'medium' when calling getGanalyticsOrphanURLs(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling getGanalyticsOrphanURLs(Async)");
        }

        return getGanalyticsOrphanURLsCall(username, projectSlug, analysisSlug, medium, source, page, size, _callback);

    }

    /**
     * List of Orphan URLs
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param medium Type of traffic, value: &#39;organic&#39; (from search engine)or &#39;social&#39; (from a social network) (required)
     * @param source Traffic source, value: name of the search engine or social network (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetGanalyticsOrphanURLs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetGanalyticsOrphanURLs200Response getGanalyticsOrphanURLs(String username, String projectSlug, String analysisSlug, String medium, String source, Integer page, Integer size) throws ApiException {
        ApiResponse<GetGanalyticsOrphanURLs200Response> localVarResp = getGanalyticsOrphanURLsWithHttpInfo(username, projectSlug, analysisSlug, medium, source, page, size);
        return localVarResp.getData();
    }

    /**
     * List of Orphan URLs
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param medium Type of traffic, value: &#39;organic&#39; (from search engine)or &#39;social&#39; (from a social network) (required)
     * @param source Traffic source, value: name of the search engine or social network (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetGanalyticsOrphanURLs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGanalyticsOrphanURLs200Response> getGanalyticsOrphanURLsWithHttpInfo(String username, String projectSlug, String analysisSlug, String medium, String source, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getGanalyticsOrphanURLsValidateBeforeCall(username, projectSlug, analysisSlug, medium, source, page, size, null);
        Type localVarReturnType = new TypeToken<GetGanalyticsOrphanURLs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Orphan URLs (asynchronously)
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param medium Type of traffic, value: &#39;organic&#39; (from search engine)or &#39;social&#39; (from a social network) (required)
     * @param source Traffic source, value: name of the search engine or social network (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGanalyticsOrphanURLsAsync(String username, String projectSlug, String analysisSlug, String medium, String source, Integer page, Integer size, final ApiCallback<GetGanalyticsOrphanURLs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGanalyticsOrphanURLsValidateBeforeCall(username, projectSlug, analysisSlug, medium, source, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetGanalyticsOrphanURLs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinksPercentiles
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksPercentilesCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/links/percentiles"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinksPercentilesValidateBeforeCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getLinksPercentiles(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getLinksPercentiles(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getLinksPercentiles(Async)");
        }

        return getLinksPercentilesCall(username, projectSlug, analysisSlug, _callback);

    }

    /**
     * Get inlinks percentiles
     * Get inlinks percentiles
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return LinksPercentiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public LinksPercentiles getLinksPercentiles(String username, String projectSlug, String analysisSlug) throws ApiException {
        ApiResponse<LinksPercentiles> localVarResp = getLinksPercentilesWithHttpInfo(username, projectSlug, analysisSlug);
        return localVarResp.getData();
    }

    /**
     * Get inlinks percentiles
     * Get inlinks percentiles
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return ApiResponse&lt;LinksPercentiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinksPercentiles> getLinksPercentilesWithHttpInfo(String username, String projectSlug, String analysisSlug) throws ApiException {
        okhttp3.Call localVarCall = getLinksPercentilesValidateBeforeCall(username, projectSlug, analysisSlug, null);
        Type localVarReturnType = new TypeToken<LinksPercentiles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get inlinks percentiles (asynchronously)
     * Get inlinks percentiles
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksPercentilesAsync(String username, String projectSlug, String analysisSlug, final ApiCallback<LinksPercentiles> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinksPercentilesValidateBeforeCall(username, projectSlug, analysisSlug, _callback);
        Type localVarReturnType = new TypeToken<LinksPercentiles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinksTopDomains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksTopDomainsCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/domains"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinksTopDomainsValidateBeforeCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getLinksTopDomains(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getLinksTopDomains(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getLinksTopDomains(Async)");
        }

        return getLinksTopDomainsCall(username, projectSlug, analysisSlug, page, size, _callback);

    }

    /**
     * Top domains
     * Top domains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetLinksTopDomains200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetLinksTopDomains200Response getLinksTopDomains(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetLinksTopDomains200Response> localVarResp = getLinksTopDomainsWithHttpInfo(username, projectSlug, analysisSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * Top domains
     * Top domains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetLinksTopDomains200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLinksTopDomains200Response> getLinksTopDomainsWithHttpInfo(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getLinksTopDomainsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetLinksTopDomains200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top domains (asynchronously)
     * Top domains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksTopDomainsAsync(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback<GetLinksTopDomains200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinksTopDomainsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetLinksTopDomains200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinksTopSubdomains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksTopSubdomainsCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/subdomains"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinksTopSubdomainsValidateBeforeCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getLinksTopSubdomains(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getLinksTopSubdomains(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getLinksTopSubdomains(Async)");
        }

        return getLinksTopSubdomainsCall(username, projectSlug, analysisSlug, page, size, _callback);

    }

    /**
     * Top subddomains
     * Top subddomains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetLinksTopDomains200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetLinksTopDomains200Response getLinksTopSubdomains(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetLinksTopDomains200Response> localVarResp = getLinksTopSubdomainsWithHttpInfo(username, projectSlug, analysisSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * Top subddomains
     * Top subddomains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetLinksTopDomains200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLinksTopDomains200Response> getLinksTopSubdomainsWithHttpInfo(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getLinksTopSubdomainsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetLinksTopDomains200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Top subddomains (asynchronously)
     * Top subddomains
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinksTopSubdomainsAsync(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback<GetLinksTopDomains200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinksTopSubdomainsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetLinksTopDomains200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPageRankLost
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageRankLostCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/pagerank/lost"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageRankLostValidateBeforeCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getPageRankLost(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getPageRankLost(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getPageRankLost(Async)");
        }

        return getPageRankLostCall(username, projectSlug, analysisSlug, _callback);

    }

    /**
     * Lost pagerank
     * Lost pagerank
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return PageRankLost
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public PageRankLost getPageRankLost(String username, String projectSlug, String analysisSlug) throws ApiException {
        ApiResponse<PageRankLost> localVarResp = getPageRankLostWithHttpInfo(username, projectSlug, analysisSlug);
        return localVarResp.getData();
    }

    /**
     * Lost pagerank
     * Lost pagerank
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return ApiResponse&lt;PageRankLost&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PageRankLost> getPageRankLostWithHttpInfo(String username, String projectSlug, String analysisSlug) throws ApiException {
        okhttp3.Call localVarCall = getPageRankLostValidateBeforeCall(username, projectSlug, analysisSlug, null);
        Type localVarReturnType = new TypeToken<PageRankLost>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lost pagerank (asynchronously)
     * Lost pagerank
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageRankLostAsync(String username, String projectSlug, String analysisSlug, final ApiCallback<PageRankLost> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageRankLostValidateBeforeCall(username, projectSlug, analysisSlug, _callback);
        Type localVarReturnType = new TypeToken<PageRankLost>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitemapsReport
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsReportCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/report"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitemapsReportValidateBeforeCall(String username, String projectSlug, String analysisSlug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getSitemapsReport(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getSitemapsReport(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getSitemapsReport(Async)");
        }

        return getSitemapsReportCall(username, projectSlug, analysisSlug, _callback);

    }

    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return SitemapsReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public SitemapsReport getSitemapsReport(String username, String projectSlug, String analysisSlug) throws ApiException {
        ApiResponse<SitemapsReport> localVarResp = getSitemapsReportWithHttpInfo(username, projectSlug, analysisSlug);
        return localVarResp.getData();
    }

    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @return ApiResponse&lt;SitemapsReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SitemapsReport> getSitemapsReportWithHttpInfo(String username, String projectSlug, String analysisSlug) throws ApiException {
        okhttp3.Call localVarCall = getSitemapsReportValidateBeforeCall(username, projectSlug, analysisSlug, null);
        Type localVarReturnType = new TypeToken<SitemapsReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc (asynchronously)
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsReportAsync(String username, String projectSlug, String analysisSlug, final ApiCallback<SitemapsReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitemapsReportValidateBeforeCall(username, projectSlug, analysisSlug, _callback);
        Type localVarReturnType = new TypeToken<SitemapsReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitemapsSamplesOutOfConfig
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsSamplesOutOfConfigCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/out_of_config"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitemapsSamplesOutOfConfigValidateBeforeCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getSitemapsSamplesOutOfConfig(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getSitemapsSamplesOutOfConfig(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getSitemapsSamplesOutOfConfig(Async)");
        }

        return getSitemapsSamplesOutOfConfigCall(username, projectSlug, analysisSlug, page, size, _callback);

    }

    /**
     * Sample list of URLs which were found in your sitemaps but outside of the
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetSitemapsSamplesOutOfConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetSitemapsSamplesOutOfConfig200Response getSitemapsSamplesOutOfConfig(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetSitemapsSamplesOutOfConfig200Response> localVarResp = getSitemapsSamplesOutOfConfigWithHttpInfo(username, projectSlug, analysisSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * Sample list of URLs which were found in your sitemaps but outside of the
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetSitemapsSamplesOutOfConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSitemapsSamplesOutOfConfig200Response> getSitemapsSamplesOutOfConfigWithHttpInfo(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getSitemapsSamplesOutOfConfigValidateBeforeCall(username, projectSlug, analysisSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetSitemapsSamplesOutOfConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sample list of URLs which were found in your sitemaps but outside of the (asynchronously)
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsSamplesOutOfConfigAsync(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback<GetSitemapsSamplesOutOfConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitemapsSamplesOutOfConfigValidateBeforeCall(username, projectSlug, analysisSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetSitemapsSamplesOutOfConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSitemapsSamplesSitemapsOnly
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsSamplesSitemapsOnlyCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/sitemap_only"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSitemapsSamplesSitemapsOnlyValidateBeforeCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getSitemapsSamplesSitemapsOnly(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getSitemapsSamplesSitemapsOnly(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getSitemapsSamplesSitemapsOnly(Async)");
        }

        return getSitemapsSamplesSitemapsOnlyCall(username, projectSlug, analysisSlug, page, size, _callback);

    }

    /**
     * Sample list of URLs which were found in your sitemaps, within the project
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetSitemapsSamplesOutOfConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetSitemapsSamplesOutOfConfig200Response getSitemapsSamplesSitemapsOnly(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetSitemapsSamplesOutOfConfig200Response> localVarResp = getSitemapsSamplesSitemapsOnlyWithHttpInfo(username, projectSlug, analysisSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * Sample list of URLs which were found in your sitemaps, within the project
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetSitemapsSamplesOutOfConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSitemapsSamplesOutOfConfig200Response> getSitemapsSamplesSitemapsOnlyWithHttpInfo(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getSitemapsSamplesSitemapsOnlyValidateBeforeCall(username, projectSlug, analysisSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetSitemapsSamplesOutOfConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sample list of URLs which were found in your sitemaps, within the project (asynchronously)
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSitemapsSamplesSitemapsOnlyAsync(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback<GetSitemapsSamplesOutOfConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSitemapsSamplesSitemapsOnlyValidateBeforeCall(username, projectSlug, analysisSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetSitemapsSamplesOutOfConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlDetail
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param url (Urlencoded) Searched URL (required)
     * @param fields comma separated list of fields to return (c.f. URLs Datamodel) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlDetailCall(String username, String projectSlug, String analysisSlug, String url, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/{url}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()))
            .replace("{" + "url" + "}", localVarApiClient.escapeString(url.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlDetailValidateBeforeCall(String username, String projectSlug, String analysisSlug, String url, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlDetail(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlDetail(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlDetail(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getUrlDetail(Async)");
        }

        return getUrlDetailCall(username, projectSlug, analysisSlug, url, fields, _callback);

    }

    /**
     * Gets the detail of an URL for an analysis
     * Gets the detail of an URL for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param url (Urlencoded) Searched URL (required)
     * @param fields comma separated list of fields to return (c.f. URLs Datamodel) (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public Object getUrlDetail(String username, String projectSlug, String analysisSlug, String url, List<String> fields) throws ApiException {
        ApiResponse<Object> localVarResp = getUrlDetailWithHttpInfo(username, projectSlug, analysisSlug, url, fields);
        return localVarResp.getData();
    }

    /**
     * Gets the detail of an URL for an analysis
     * Gets the detail of an URL for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param url (Urlencoded) Searched URL (required)
     * @param fields comma separated list of fields to return (c.f. URLs Datamodel) (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getUrlDetailWithHttpInfo(String username, String projectSlug, String analysisSlug, String url, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = getUrlDetailValidateBeforeCall(username, projectSlug, analysisSlug, url, fields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the detail of an URL for an analysis (asynchronously)
     * Gets the detail of an URL for an analysis
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param url (Urlencoded) Searched URL (required)
     * @param fields comma separated list of fields to return (c.f. URLs Datamodel) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlDetailAsync(String username, String projectSlug, String analysisSlug, String url, List<String> fields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlDetailValidateBeforeCall(username, projectSlug, analysisSlug, url, fields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrls
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area Analysis context to execute the query (optional, default to current)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param urlsQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsCall(String username, String projectSlug, String analysisSlug, String area, Integer page, Integer size, UrlsQuery urlsQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlsQuery;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsValidateBeforeCall(String username, String projectSlug, String analysisSlug, String area, Integer page, Integer size, UrlsQuery urlsQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrls(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrls(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrls(Async)");
        }

        return getUrlsCall(username, projectSlug, analysisSlug, area, page, size, urlsQuery, _callback);

    }

    /**
     * Executes a query and returns a paginated response
     * Executes a query and returns a paginated response
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area Analysis context to execute the query (optional, default to current)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param urlsQuery  (optional)
     * @return GetUrls200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetUrls200Response getUrls(String username, String projectSlug, String analysisSlug, String area, Integer page, Integer size, UrlsQuery urlsQuery) throws ApiException {
        ApiResponse<GetUrls200Response> localVarResp = getUrlsWithHttpInfo(username, projectSlug, analysisSlug, area, page, size, urlsQuery);
        return localVarResp.getData();
    }

    /**
     * Executes a query and returns a paginated response
     * Executes a query and returns a paginated response
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area Analysis context to execute the query (optional, default to current)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param urlsQuery  (optional)
     * @return ApiResponse&lt;GetUrls200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUrls200Response> getUrlsWithHttpInfo(String username, String projectSlug, String analysisSlug, String area, Integer page, Integer size, UrlsQuery urlsQuery) throws ApiException {
        okhttp3.Call localVarCall = getUrlsValidateBeforeCall(username, projectSlug, analysisSlug, area, page, size, urlsQuery, null);
        Type localVarReturnType = new TypeToken<GetUrls200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Executes a query and returns a paginated response (asynchronously)
     * Executes a query and returns a paginated response
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area Analysis context to execute the query (optional, default to current)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param urlsQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsAsync(String username, String projectSlug, String analysisSlug, String area, Integer page, Integer size, UrlsQuery urlsQuery, final ApiCallback<GetUrls200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsValidateBeforeCall(username, projectSlug, analysisSlug, area, page, size, urlsQuery, _callback);
        Type localVarReturnType = new TypeToken<GetUrls200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlsAggs
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsAggsCall(String username, String projectSlug, String analysisSlug, String area, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlsAggsQuery;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/aggs"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsAggsValidateBeforeCall(String username, String projectSlug, String analysisSlug, String area, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlsAggs(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlsAggs(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlsAggs(Async)");
        }

        return getUrlsAggsCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, _callback);

    }

    /**
     * Query aggregator
     * Query aggregator. It accepts multiple queries
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> getUrlsAggs(String username, String projectSlug, String analysisSlug, String area, List<UrlsAggsQuery> urlsAggsQuery) throws ApiException {
        ApiResponse<List<Object>> localVarResp = getUrlsAggsWithHttpInfo(username, projectSlug, analysisSlug, area, urlsAggsQuery);
        return localVarResp.getData();
    }

    /**
     * Query aggregator
     * Query aggregator. It accepts multiple queries
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> getUrlsAggsWithHttpInfo(String username, String projectSlug, String analysisSlug, String area, List<UrlsAggsQuery> urlsAggsQuery) throws ApiException {
        okhttp3.Call localVarCall = getUrlsAggsValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query aggregator (asynchronously)
     * Query aggregator. It accepts multiple queries
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsAggsAsync(String username, String projectSlug, String analysisSlug, String area, List<UrlsAggsQuery> urlsAggsQuery, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsAggsValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlsDatamodel
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsDatamodelCall(String username, String projectSlug, String analysisSlug, String area, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/datamodel"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsDatamodelValidateBeforeCall(String username, String projectSlug, String analysisSlug, String area, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlsDatamodel(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlsDatamodel(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlsDatamodel(Async)");
        }

        return getUrlsDatamodelCall(username, projectSlug, analysisSlug, area, _callback);

    }

    /**
     * Gets an Analysis datamodel
     * Gets an Analysis datamodel
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @return CrawlDatamodel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public CrawlDatamodel getUrlsDatamodel(String username, String projectSlug, String analysisSlug, String area) throws ApiException {
        ApiResponse<CrawlDatamodel> localVarResp = getUrlsDatamodelWithHttpInfo(username, projectSlug, analysisSlug, area);
        return localVarResp.getData();
    }

    /**
     * Gets an Analysis datamodel
     * Gets an Analysis datamodel
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @return ApiResponse&lt;CrawlDatamodel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrawlDatamodel> getUrlsDatamodelWithHttpInfo(String username, String projectSlug, String analysisSlug, String area) throws ApiException {
        okhttp3.Call localVarCall = getUrlsDatamodelValidateBeforeCall(username, projectSlug, analysisSlug, area, null);
        Type localVarReturnType = new TypeToken<CrawlDatamodel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an Analysis datamodel (asynchronously)
     * Gets an Analysis datamodel
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsDatamodelAsync(String username, String projectSlug, String analysisSlug, String area, final ApiCallback<CrawlDatamodel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsDatamodelValidateBeforeCall(username, projectSlug, analysisSlug, area, _callback);
        Type localVarReturnType = new TypeToken<CrawlDatamodel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlsExportStatus
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param urlExportId Url Export ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsExportStatusCall(String username, String projectSlug, String analysisSlug, String urlExportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/export/{url_export_id}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()))
            .replace("{" + "url_export_id" + "}", localVarApiClient.escapeString(urlExportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsExportStatusValidateBeforeCall(String username, String projectSlug, String analysisSlug, String urlExportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlsExportStatus(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlsExportStatus(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlsExportStatus(Async)");
        }

        // verify the required parameter 'urlExportId' is set
        if (urlExportId == null) {
            throw new ApiException("Missing the required parameter 'urlExportId' when calling getUrlsExportStatus(Async)");
        }

        return getUrlsExportStatusCall(username, projectSlug, analysisSlug, urlExportId, _callback);

    }

    /**
     * Checks the status of an CSVUrlExportJob object
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param urlExportId Url Export ID (required)
     * @return CsvExportStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public CsvExportStatus getUrlsExportStatus(String username, String projectSlug, String analysisSlug, String urlExportId) throws ApiException {
        ApiResponse<CsvExportStatus> localVarResp = getUrlsExportStatusWithHttpInfo(username, projectSlug, analysisSlug, urlExportId);
        return localVarResp.getData();
    }

    /**
     * Checks the status of an CSVUrlExportJob object
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param urlExportId Url Export ID (required)
     * @return ApiResponse&lt;CsvExportStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CsvExportStatus> getUrlsExportStatusWithHttpInfo(String username, String projectSlug, String analysisSlug, String urlExportId) throws ApiException {
        okhttp3.Call localVarCall = getUrlsExportStatusValidateBeforeCall(username, projectSlug, analysisSlug, urlExportId, null);
        Type localVarReturnType = new TypeToken<CsvExportStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the status of an CSVUrlExportJob object (asynchronously)
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param urlExportId Url Export ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsExportStatusAsync(String username, String projectSlug, String analysisSlug, String urlExportId, final ApiCallback<CsvExportStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsExportStatusValidateBeforeCall(username, projectSlug, analysisSlug, urlExportId, _callback);
        Type localVarReturnType = new TypeToken<CsvExportStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlsExports
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsExportsCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/export"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsExportsValidateBeforeCall(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlsExports(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlsExports(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlsExports(Async)");
        }

        return getUrlsExportsCall(username, projectSlug, analysisSlug, page, size, _callback);

    }

    /**
     * A list of the CSV Exports requests and their current status
     * A list of the CSV Exports requests and their current status
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return GetUrlsExports200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public GetUrlsExports200Response getUrlsExports(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        ApiResponse<GetUrlsExports200Response> localVarResp = getUrlsExportsWithHttpInfo(username, projectSlug, analysisSlug, page, size);
        return localVarResp.getData();
    }

    /**
     * A list of the CSV Exports requests and their current status
     * A list of the CSV Exports requests and their current status
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @return ApiResponse&lt;GetUrlsExports200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUrlsExports200Response> getUrlsExportsWithHttpInfo(String username, String projectSlug, String analysisSlug, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getUrlsExportsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, null);
        Type localVarReturnType = new TypeToken<GetUrlsExports200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * A list of the CSV Exports requests and their current status (asynchronously)
     * A list of the CSV Exports requests and their current status
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param page Page Number (optional)
     * @param size Page Size (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsExportsAsync(String username, String projectSlug, String analysisSlug, Integer page, Integer size, final ApiCallback<GetUrlsExports200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsExportsValidateBeforeCall(username, projectSlug, analysisSlug, page, size, _callback);
        Type localVarReturnType = new TypeToken<GetUrlsExports200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUrlsSuggestedFilters
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsSuggestedFiltersCall(String username, String projectSlug, String analysisSlug, String area, UrlsAggsQuery urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = urlsAggsQuery;

        // create path and map variables
        String localVarPath = "/analyses/{username}/{project_slug}/{analysis_slug}/urls/suggested_filters"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "project_slug" + "}", localVarApiClient.escapeString(projectSlug.toString()))
            .replace("{" + "analysis_slug" + "}", localVarApiClient.escapeString(analysisSlug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (area != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area", area));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DjangoRestToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUrlsSuggestedFiltersValidateBeforeCall(String username, String projectSlug, String analysisSlug, String area, UrlsAggsQuery urlsAggsQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUrlsSuggestedFilters(Async)");
        }

        // verify the required parameter 'projectSlug' is set
        if (projectSlug == null) {
            throw new ApiException("Missing the required parameter 'projectSlug' when calling getUrlsSuggestedFilters(Async)");
        }

        // verify the required parameter 'analysisSlug' is set
        if (analysisSlug == null) {
            throw new ApiException("Missing the required parameter 'analysisSlug' when calling getUrlsSuggestedFilters(Async)");
        }

        return getUrlsSuggestedFiltersCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, _callback);

    }

    /**
     * Return most frequent segments (&#x3D; suggested patterns in the previous version)
     * Return most frequent segments (&#x3D; suggested patterns in the previous version) for a Botify Query.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @return UrlsAggsQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public UrlsAggsQuery getUrlsSuggestedFilters(String username, String projectSlug, String analysisSlug, String area, UrlsAggsQuery urlsAggsQuery) throws ApiException {
        ApiResponse<UrlsAggsQuery> localVarResp = getUrlsSuggestedFiltersWithHttpInfo(username, projectSlug, analysisSlug, area, urlsAggsQuery);
        return localVarResp.getData();
    }

    /**
     * Return most frequent segments (&#x3D; suggested patterns in the previous version)
     * Return most frequent segments (&#x3D; suggested patterns in the previous version) for a Botify Query.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @return ApiResponse&lt;UrlsAggsQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UrlsAggsQuery> getUrlsSuggestedFiltersWithHttpInfo(String username, String projectSlug, String analysisSlug, String area, UrlsAggsQuery urlsAggsQuery) throws ApiException {
        okhttp3.Call localVarCall = getUrlsSuggestedFiltersValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, null);
        Type localVarReturnType = new TypeToken<UrlsAggsQuery>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return most frequent segments (&#x3D; suggested patterns in the previous version) (asynchronously)
     * Return most frequent segments (&#x3D; suggested patterns in the previous version) for a Botify Query.
     * @param username User&#39;s identifier (required)
     * @param projectSlug Project&#39;s identifier (required)
     * @param analysisSlug Analysis&#39; identifier (required)
     * @param area  (optional, default to current)
     * @param urlsAggsQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error payload </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUrlsSuggestedFiltersAsync(String username, String projectSlug, String analysisSlug, String area, UrlsAggsQuery urlsAggsQuery, final ApiCallback<UrlsAggsQuery> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUrlsSuggestedFiltersValidateBeforeCall(username, projectSlug, analysisSlug, area, urlsAggsQuery, _callback);
        Type localVarReturnType = new TypeToken<UrlsAggsQuery>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
