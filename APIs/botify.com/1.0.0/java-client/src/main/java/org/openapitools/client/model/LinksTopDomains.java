/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LinksTopDomainsSamples;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LinksTopDomains
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:20.270781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinksTopDomains {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_FOLLOW_LINKS = "follow_links";
  @SerializedName(SERIALIZED_NAME_FOLLOW_LINKS)
  private Long followLinks;

  public static final String SERIALIZED_NAME_FOLLOW_SAMPLES = "follow_samples";
  @SerializedName(SERIALIZED_NAME_FOLLOW_SAMPLES)
  private List<LinksTopDomainsSamples> followSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOFOLLOW_LINKS = "nofollow_links";
  @SerializedName(SERIALIZED_NAME_NOFOLLOW_LINKS)
  private Long nofollowLinks;

  public static final String SERIALIZED_NAME_NOFOLLOW_SAMPLES = "nofollow_samples";
  @SerializedName(SERIALIZED_NAME_NOFOLLOW_SAMPLES)
  private List<LinksTopDomainsSamples> nofollowSamples = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIQUE_FOLLOW_LINKS = "unique_follow_links";
  @SerializedName(SERIALIZED_NAME_UNIQUE_FOLLOW_LINKS)
  private Long uniqueFollowLinks;

  public static final String SERIALIZED_NAME_UNIQUE_NOFOLLOW_LINKS = "unique_nofollow_links";
  @SerializedName(SERIALIZED_NAME_UNIQUE_NOFOLLOW_LINKS)
  private Long uniqueNofollowLinks;

  public LinksTopDomains() {
  }

  public LinksTopDomains domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * 
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public LinksTopDomains followLinks(Long followLinks) {
    this.followLinks = followLinks;
    return this;
  }

  /**
   * 
   * @return followLinks
   */
  @javax.annotation.Nonnull
  public Long getFollowLinks() {
    return followLinks;
  }

  public void setFollowLinks(Long followLinks) {
    this.followLinks = followLinks;
  }


  public LinksTopDomains followSamples(List<LinksTopDomainsSamples> followSamples) {
    this.followSamples = followSamples;
    return this;
  }

  public LinksTopDomains addFollowSamplesItem(LinksTopDomainsSamples followSamplesItem) {
    if (this.followSamples == null) {
      this.followSamples = new ArrayList<>();
    }
    this.followSamples.add(followSamplesItem);
    return this;
  }

  /**
   * 
   * @return followSamples
   */
  @javax.annotation.Nonnull
  public List<LinksTopDomainsSamples> getFollowSamples() {
    return followSamples;
  }

  public void setFollowSamples(List<LinksTopDomainsSamples> followSamples) {
    this.followSamples = followSamples;
  }


  public LinksTopDomains nofollowLinks(Long nofollowLinks) {
    this.nofollowLinks = nofollowLinks;
    return this;
  }

  /**
   * 
   * @return nofollowLinks
   */
  @javax.annotation.Nonnull
  public Long getNofollowLinks() {
    return nofollowLinks;
  }

  public void setNofollowLinks(Long nofollowLinks) {
    this.nofollowLinks = nofollowLinks;
  }


  public LinksTopDomains nofollowSamples(List<LinksTopDomainsSamples> nofollowSamples) {
    this.nofollowSamples = nofollowSamples;
    return this;
  }

  public LinksTopDomains addNofollowSamplesItem(LinksTopDomainsSamples nofollowSamplesItem) {
    if (this.nofollowSamples == null) {
      this.nofollowSamples = new ArrayList<>();
    }
    this.nofollowSamples.add(nofollowSamplesItem);
    return this;
  }

  /**
   * 
   * @return nofollowSamples
   */
  @javax.annotation.Nonnull
  public List<LinksTopDomainsSamples> getNofollowSamples() {
    return nofollowSamples;
  }

  public void setNofollowSamples(List<LinksTopDomainsSamples> nofollowSamples) {
    this.nofollowSamples = nofollowSamples;
  }


  public LinksTopDomains uniqueFollowLinks(Long uniqueFollowLinks) {
    this.uniqueFollowLinks = uniqueFollowLinks;
    return this;
  }

  /**
   * 
   * @return uniqueFollowLinks
   */
  @javax.annotation.Nonnull
  public Long getUniqueFollowLinks() {
    return uniqueFollowLinks;
  }

  public void setUniqueFollowLinks(Long uniqueFollowLinks) {
    this.uniqueFollowLinks = uniqueFollowLinks;
  }


  public LinksTopDomains uniqueNofollowLinks(Long uniqueNofollowLinks) {
    this.uniqueNofollowLinks = uniqueNofollowLinks;
    return this;
  }

  /**
   * 
   * @return uniqueNofollowLinks
   */
  @javax.annotation.Nonnull
  public Long getUniqueNofollowLinks() {
    return uniqueNofollowLinks;
  }

  public void setUniqueNofollowLinks(Long uniqueNofollowLinks) {
    this.uniqueNofollowLinks = uniqueNofollowLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinksTopDomains linksTopDomains = (LinksTopDomains) o;
    return Objects.equals(this.domain, linksTopDomains.domain) &&
        Objects.equals(this.followLinks, linksTopDomains.followLinks) &&
        Objects.equals(this.followSamples, linksTopDomains.followSamples) &&
        Objects.equals(this.nofollowLinks, linksTopDomains.nofollowLinks) &&
        Objects.equals(this.nofollowSamples, linksTopDomains.nofollowSamples) &&
        Objects.equals(this.uniqueFollowLinks, linksTopDomains.uniqueFollowLinks) &&
        Objects.equals(this.uniqueNofollowLinks, linksTopDomains.uniqueNofollowLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, followLinks, followSamples, nofollowLinks, nofollowSamples, uniqueFollowLinks, uniqueNofollowLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinksTopDomains {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    followLinks: ").append(toIndentedString(followLinks)).append("\n");
    sb.append("    followSamples: ").append(toIndentedString(followSamples)).append("\n");
    sb.append("    nofollowLinks: ").append(toIndentedString(nofollowLinks)).append("\n");
    sb.append("    nofollowSamples: ").append(toIndentedString(nofollowSamples)).append("\n");
    sb.append("    uniqueFollowLinks: ").append(toIndentedString(uniqueFollowLinks)).append("\n");
    sb.append("    uniqueNofollowLinks: ").append(toIndentedString(uniqueNofollowLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("follow_links");
    openapiFields.add("follow_samples");
    openapiFields.add("nofollow_links");
    openapiFields.add("nofollow_samples");
    openapiFields.add("unique_follow_links");
    openapiFields.add("unique_nofollow_links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("follow_links");
    openapiRequiredFields.add("follow_samples");
    openapiRequiredFields.add("nofollow_links");
    openapiRequiredFields.add("nofollow_samples");
    openapiRequiredFields.add("unique_follow_links");
    openapiRequiredFields.add("unique_nofollow_links");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinksTopDomains
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinksTopDomains.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinksTopDomains is not found in the empty JSON string", LinksTopDomains.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinksTopDomains.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinksTopDomains` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinksTopDomains.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("follow_samples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `follow_samples` to be an array in the JSON string but got `%s`", jsonObj.get("follow_samples").toString()));
      }

      JsonArray jsonArrayfollowSamples = jsonObj.getAsJsonArray("follow_samples");
      // validate the required field `follow_samples` (array)
      for (int i = 0; i < jsonArrayfollowSamples.size(); i++) {
        LinksTopDomainsSamples.validateJsonElement(jsonArrayfollowSamples.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("nofollow_samples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nofollow_samples` to be an array in the JSON string but got `%s`", jsonObj.get("nofollow_samples").toString()));
      }

      JsonArray jsonArraynofollowSamples = jsonObj.getAsJsonArray("nofollow_samples");
      // validate the required field `nofollow_samples` (array)
      for (int i = 0; i < jsonArraynofollowSamples.size(); i++) {
        LinksTopDomainsSamples.validateJsonElement(jsonArraynofollowSamples.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinksTopDomains.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinksTopDomains' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinksTopDomains> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinksTopDomains.class));

       return (TypeAdapter<T>) new TypeAdapter<LinksTopDomains>() {
           @Override
           public void write(JsonWriter out, LinksTopDomains value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinksTopDomains read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinksTopDomains given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinksTopDomains
   * @throws IOException if the JSON string is invalid with respect to LinksTopDomains
   */
  public static LinksTopDomains fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinksTopDomains.class);
  }

  /**
   * Convert an instance of LinksTopDomains to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

