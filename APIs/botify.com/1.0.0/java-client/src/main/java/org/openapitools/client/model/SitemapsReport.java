/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SitemapsReportOnly;
import org.openapitools.client.model.SitemapsReportSitemap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SitemapsReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:20.270781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SitemapsReport {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<SitemapsReportSitemap> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITEMAP_INDEXES = "sitemap_indexes";
  @SerializedName(SERIALIZED_NAME_SITEMAP_INDEXES)
  private List<SitemapsReportSitemap> sitemapIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITEMAP_ONLY = "sitemap_only";
  @SerializedName(SERIALIZED_NAME_SITEMAP_ONLY)
  private SitemapsReportOnly sitemapOnly;

  public static final String SERIALIZED_NAME_SITEMAPS = "sitemaps";
  @SerializedName(SERIALIZED_NAME_SITEMAPS)
  private List<SitemapsReportSitemap> sitemaps = new ArrayList<>();

  public SitemapsReport() {
  }

  public SitemapsReport count(Long count) {
    this.count = count;
    return this;
  }

  /**
   * 
   * @return count
   */
  @javax.annotation.Nonnull
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public SitemapsReport errors(List<SitemapsReportSitemap> errors) {
    this.errors = errors;
    return this;
  }

  public SitemapsReport addErrorsItem(SitemapsReportSitemap errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * 
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<SitemapsReportSitemap> getErrors() {
    return errors;
  }

  public void setErrors(List<SitemapsReportSitemap> errors) {
    this.errors = errors;
  }


  public SitemapsReport sitemapIndexes(List<SitemapsReportSitemap> sitemapIndexes) {
    this.sitemapIndexes = sitemapIndexes;
    return this;
  }

  public SitemapsReport addSitemapIndexesItem(SitemapsReportSitemap sitemapIndexesItem) {
    if (this.sitemapIndexes == null) {
      this.sitemapIndexes = new ArrayList<>();
    }
    this.sitemapIndexes.add(sitemapIndexesItem);
    return this;
  }

  /**
   * 
   * @return sitemapIndexes
   */
  @javax.annotation.Nonnull
  public List<SitemapsReportSitemap> getSitemapIndexes() {
    return sitemapIndexes;
  }

  public void setSitemapIndexes(List<SitemapsReportSitemap> sitemapIndexes) {
    this.sitemapIndexes = sitemapIndexes;
  }


  public SitemapsReport sitemapOnly(SitemapsReportOnly sitemapOnly) {
    this.sitemapOnly = sitemapOnly;
    return this;
  }

  /**
   * Get sitemapOnly
   * @return sitemapOnly
   */
  @javax.annotation.Nonnull
  public SitemapsReportOnly getSitemapOnly() {
    return sitemapOnly;
  }

  public void setSitemapOnly(SitemapsReportOnly sitemapOnly) {
    this.sitemapOnly = sitemapOnly;
  }


  public SitemapsReport sitemaps(List<SitemapsReportSitemap> sitemaps) {
    this.sitemaps = sitemaps;
    return this;
  }

  public SitemapsReport addSitemapsItem(SitemapsReportSitemap sitemapsItem) {
    if (this.sitemaps == null) {
      this.sitemaps = new ArrayList<>();
    }
    this.sitemaps.add(sitemapsItem);
    return this;
  }

  /**
   * 
   * @return sitemaps
   */
  @javax.annotation.Nonnull
  public List<SitemapsReportSitemap> getSitemaps() {
    return sitemaps;
  }

  public void setSitemaps(List<SitemapsReportSitemap> sitemaps) {
    this.sitemaps = sitemaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SitemapsReport sitemapsReport = (SitemapsReport) o;
    return Objects.equals(this.count, sitemapsReport.count) &&
        Objects.equals(this.errors, sitemapsReport.errors) &&
        Objects.equals(this.sitemapIndexes, sitemapsReport.sitemapIndexes) &&
        Objects.equals(this.sitemapOnly, sitemapsReport.sitemapOnly) &&
        Objects.equals(this.sitemaps, sitemapsReport.sitemaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, errors, sitemapIndexes, sitemapOnly, sitemaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SitemapsReport {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    sitemapIndexes: ").append(toIndentedString(sitemapIndexes)).append("\n");
    sb.append("    sitemapOnly: ").append(toIndentedString(sitemapOnly)).append("\n");
    sb.append("    sitemaps: ").append(toIndentedString(sitemaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("errors");
    openapiFields.add("sitemap_indexes");
    openapiFields.add("sitemap_only");
    openapiFields.add("sitemaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("sitemap_indexes");
    openapiRequiredFields.add("sitemap_only");
    openapiRequiredFields.add("sitemaps");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SitemapsReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SitemapsReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SitemapsReport is not found in the empty JSON string", SitemapsReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SitemapsReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SitemapsReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SitemapsReport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        SitemapsReportSitemap.validateJsonElement(jsonArrayerrors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sitemap_indexes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitemap_indexes` to be an array in the JSON string but got `%s`", jsonObj.get("sitemap_indexes").toString()));
      }

      JsonArray jsonArraysitemapIndexes = jsonObj.getAsJsonArray("sitemap_indexes");
      // validate the required field `sitemap_indexes` (array)
      for (int i = 0; i < jsonArraysitemapIndexes.size(); i++) {
        SitemapsReportSitemap.validateJsonElement(jsonArraysitemapIndexes.get(i));
      };
      // validate the required field `sitemap_only`
      SitemapsReportOnly.validateJsonElement(jsonObj.get("sitemap_only"));
      // ensure the json data is an array
      if (!jsonObj.get("sitemaps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sitemaps` to be an array in the JSON string but got `%s`", jsonObj.get("sitemaps").toString()));
      }

      JsonArray jsonArraysitemaps = jsonObj.getAsJsonArray("sitemaps");
      // validate the required field `sitemaps` (array)
      for (int i = 0; i < jsonArraysitemaps.size(); i++) {
        SitemapsReportSitemap.validateJsonElement(jsonArraysitemaps.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SitemapsReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SitemapsReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SitemapsReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SitemapsReport.class));

       return (TypeAdapter<T>) new TypeAdapter<SitemapsReport>() {
           @Override
           public void write(JsonWriter out, SitemapsReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SitemapsReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SitemapsReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SitemapsReport
   * @throws IOException if the JSON string is invalid with respect to SitemapsReport
   */
  public static SitemapsReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SitemapsReport.class);
  }

  /**
   * Convert an instance of SitemapsReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

