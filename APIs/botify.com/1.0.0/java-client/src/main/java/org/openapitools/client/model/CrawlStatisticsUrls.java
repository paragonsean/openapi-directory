/*
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrawlStatisticsUrls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:20.270781-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrawlStatisticsUrls {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DELAY_FIRST_BYTE = "delay_first_byte";
  @SerializedName(SERIALIZED_NAME_DELAY_FIRST_BYTE)
  private Long delayFirstByte;

  public static final String SERIALIZED_NAME_DELAY_LAST_BYTE = "delay_last_byte";
  @SerializedName(SERIALIZED_NAME_DELAY_LAST_BYTE)
  private Long delayLastByte;

  public static final String SERIALIZED_NAME_GZIP = "gzip";
  @SerializedName(SERIALIZED_NAME_GZIP)
  private Boolean gzip;

  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private Long http;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Long length;

  public static final String SERIALIZED_NAME_REDIRECTS_TO = "redirects_to";
  @SerializedName(SERIALIZED_NAME_REDIRECTS_TO)
  private String redirectsTo;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CrawlStatisticsUrls() {
  }

  public CrawlStatisticsUrls contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * 
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public CrawlStatisticsUrls date(String date) {
    this.date = date;
    return this;
  }

  /**
   * 
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public CrawlStatisticsUrls delayFirstByte(Long delayFirstByte) {
    this.delayFirstByte = delayFirstByte;
    return this;
  }

  /**
   * 
   * @return delayFirstByte
   */
  @javax.annotation.Nonnull
  public Long getDelayFirstByte() {
    return delayFirstByte;
  }

  public void setDelayFirstByte(Long delayFirstByte) {
    this.delayFirstByte = delayFirstByte;
  }


  public CrawlStatisticsUrls delayLastByte(Long delayLastByte) {
    this.delayLastByte = delayLastByte;
    return this;
  }

  /**
   * 
   * @return delayLastByte
   */
  @javax.annotation.Nonnull
  public Long getDelayLastByte() {
    return delayLastByte;
  }

  public void setDelayLastByte(Long delayLastByte) {
    this.delayLastByte = delayLastByte;
  }


  public CrawlStatisticsUrls gzip(Boolean gzip) {
    this.gzip = gzip;
    return this;
  }

  /**
   * 
   * @return gzip
   */
  @javax.annotation.Nonnull
  public Boolean getGzip() {
    return gzip;
  }

  public void setGzip(Boolean gzip) {
    this.gzip = gzip;
  }


  public CrawlStatisticsUrls http(Long http) {
    this.http = http;
    return this;
  }

  /**
   * 
   * @return http
   */
  @javax.annotation.Nonnull
  public Long getHttp() {
    return http;
  }

  public void setHttp(Long http) {
    this.http = http;
  }


  public CrawlStatisticsUrls length(Long length) {
    this.length = length;
    return this;
  }

  /**
   * 
   * @return length
   */
  @javax.annotation.Nonnull
  public Long getLength() {
    return length;
  }

  public void setLength(Long length) {
    this.length = length;
  }


  public CrawlStatisticsUrls redirectsTo(String redirectsTo) {
    this.redirectsTo = redirectsTo;
    return this;
  }

  /**
   * 
   * @return redirectsTo
   */
  @javax.annotation.Nullable
  public String getRedirectsTo() {
    return redirectsTo;
  }

  public void setRedirectsTo(String redirectsTo) {
    this.redirectsTo = redirectsTo;
  }


  public CrawlStatisticsUrls url(String url) {
    this.url = url;
    return this;
  }

  /**
   * 
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrawlStatisticsUrls crawlStatisticsUrls = (CrawlStatisticsUrls) o;
    return Objects.equals(this.contentType, crawlStatisticsUrls.contentType) &&
        Objects.equals(this.date, crawlStatisticsUrls.date) &&
        Objects.equals(this.delayFirstByte, crawlStatisticsUrls.delayFirstByte) &&
        Objects.equals(this.delayLastByte, crawlStatisticsUrls.delayLastByte) &&
        Objects.equals(this.gzip, crawlStatisticsUrls.gzip) &&
        Objects.equals(this.http, crawlStatisticsUrls.http) &&
        Objects.equals(this.length, crawlStatisticsUrls.length) &&
        Objects.equals(this.redirectsTo, crawlStatisticsUrls.redirectsTo) &&
        Objects.equals(this.url, crawlStatisticsUrls.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, date, delayFirstByte, delayLastByte, gzip, http, length, redirectsTo, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrawlStatisticsUrls {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    delayFirstByte: ").append(toIndentedString(delayFirstByte)).append("\n");
    sb.append("    delayLastByte: ").append(toIndentedString(delayLastByte)).append("\n");
    sb.append("    gzip: ").append(toIndentedString(gzip)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    redirectsTo: ").append(toIndentedString(redirectsTo)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_type");
    openapiFields.add("date");
    openapiFields.add("delay_first_byte");
    openapiFields.add("delay_last_byte");
    openapiFields.add("gzip");
    openapiFields.add("http");
    openapiFields.add("length");
    openapiFields.add("redirects_to");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content_type");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("delay_first_byte");
    openapiRequiredFields.add("delay_last_byte");
    openapiRequiredFields.add("gzip");
    openapiRequiredFields.add("http");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrawlStatisticsUrls
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrawlStatisticsUrls.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrawlStatisticsUrls is not found in the empty JSON string", CrawlStatisticsUrls.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrawlStatisticsUrls.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrawlStatisticsUrls` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrawlStatisticsUrls.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("redirects_to") != null && !jsonObj.get("redirects_to").isJsonNull()) && !jsonObj.get("redirects_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirects_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirects_to").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrawlStatisticsUrls.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrawlStatisticsUrls' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrawlStatisticsUrls> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrawlStatisticsUrls.class));

       return (TypeAdapter<T>) new TypeAdapter<CrawlStatisticsUrls>() {
           @Override
           public void write(JsonWriter out, CrawlStatisticsUrls value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrawlStatisticsUrls read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrawlStatisticsUrls given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrawlStatisticsUrls
   * @throws IOException if the JSON string is invalid with respect to CrawlStatisticsUrls
   */
  public static CrawlStatisticsUrls fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrawlStatisticsUrls.class);
  }

  /**
   * Convert an instance of CrawlStatisticsUrls to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

