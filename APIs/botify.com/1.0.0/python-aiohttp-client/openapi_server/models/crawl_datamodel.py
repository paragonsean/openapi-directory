# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crawl_datamodel_field import CrawlDatamodelField
from openapi_server.models.crawl_datamodel_group import CrawlDatamodelGroup
from openapi_server import util


class CrawlDatamodel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields: List[CrawlDatamodelField]=None, groups: List[CrawlDatamodelGroup]=None):
        """CrawlDatamodel - a model defined in OpenAPI

        :param fields: The fields of this CrawlDatamodel.
        :param groups: The groups of this CrawlDatamodel.
        """
        self.openapi_types = {
            'fields': List[CrawlDatamodelField],
            'groups': List[CrawlDatamodelGroup]
        }

        self.attribute_map = {
            'fields': 'fields',
            'groups': 'groups'
        }

        self._fields = fields
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawlDatamodel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrawlDatamodel of this CrawlDatamodel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self):
        """Gets the fields of this CrawlDatamodel.

        

        :return: The fields of this CrawlDatamodel.
        :rtype: List[CrawlDatamodelField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CrawlDatamodel.

        

        :param fields: The fields of this CrawlDatamodel.
        :type fields: List[CrawlDatamodelField]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")

        self._fields = fields

    @property
    def groups(self):
        """Gets the groups of this CrawlDatamodel.

        

        :return: The groups of this CrawlDatamodel.
        :rtype: List[CrawlDatamodelGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CrawlDatamodel.

        

        :param groups: The groups of this CrawlDatamodel.
        :type groups: List[CrawlDatamodelGroup]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups
