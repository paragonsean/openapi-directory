# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sitemaps_report_only import SitemapsReportOnly
from openapi_server.models.sitemaps_report_sitemap import SitemapsReportSitemap
from openapi_server import util


class SitemapsReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, errors: List[SitemapsReportSitemap]=None, sitemap_indexes: List[SitemapsReportSitemap]=None, sitemap_only: SitemapsReportOnly=None, sitemaps: List[SitemapsReportSitemap]=None):
        """SitemapsReport - a model defined in OpenAPI

        :param count: The count of this SitemapsReport.
        :param errors: The errors of this SitemapsReport.
        :param sitemap_indexes: The sitemap_indexes of this SitemapsReport.
        :param sitemap_only: The sitemap_only of this SitemapsReport.
        :param sitemaps: The sitemaps of this SitemapsReport.
        """
        self.openapi_types = {
            'count': int,
            'errors': List[SitemapsReportSitemap],
            'sitemap_indexes': List[SitemapsReportSitemap],
            'sitemap_only': SitemapsReportOnly,
            'sitemaps': List[SitemapsReportSitemap]
        }

        self.attribute_map = {
            'count': 'count',
            'errors': 'errors',
            'sitemap_indexes': 'sitemap_indexes',
            'sitemap_only': 'sitemap_only',
            'sitemaps': 'sitemaps'
        }

        self._count = count
        self._errors = errors
        self._sitemap_indexes = sitemap_indexes
        self._sitemap_only = sitemap_only
        self._sitemaps = sitemaps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SitemapsReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SitemapsReport of this SitemapsReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SitemapsReport.

        

        :return: The count of this SitemapsReport.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SitemapsReport.

        

        :param count: The count of this SitemapsReport.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def errors(self):
        """Gets the errors of this SitemapsReport.

        

        :return: The errors of this SitemapsReport.
        :rtype: List[SitemapsReportSitemap]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SitemapsReport.

        

        :param errors: The errors of this SitemapsReport.
        :type errors: List[SitemapsReportSitemap]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def sitemap_indexes(self):
        """Gets the sitemap_indexes of this SitemapsReport.

        

        :return: The sitemap_indexes of this SitemapsReport.
        :rtype: List[SitemapsReportSitemap]
        """
        return self._sitemap_indexes

    @sitemap_indexes.setter
    def sitemap_indexes(self, sitemap_indexes):
        """Sets the sitemap_indexes of this SitemapsReport.

        

        :param sitemap_indexes: The sitemap_indexes of this SitemapsReport.
        :type sitemap_indexes: List[SitemapsReportSitemap]
        """
        if sitemap_indexes is None:
            raise ValueError("Invalid value for `sitemap_indexes`, must not be `None`")

        self._sitemap_indexes = sitemap_indexes

    @property
    def sitemap_only(self):
        """Gets the sitemap_only of this SitemapsReport.


        :return: The sitemap_only of this SitemapsReport.
        :rtype: SitemapsReportOnly
        """
        return self._sitemap_only

    @sitemap_only.setter
    def sitemap_only(self, sitemap_only):
        """Sets the sitemap_only of this SitemapsReport.


        :param sitemap_only: The sitemap_only of this SitemapsReport.
        :type sitemap_only: SitemapsReportOnly
        """
        if sitemap_only is None:
            raise ValueError("Invalid value for `sitemap_only`, must not be `None`")

        self._sitemap_only = sitemap_only

    @property
    def sitemaps(self):
        """Gets the sitemaps of this SitemapsReport.

        

        :return: The sitemaps of this SitemapsReport.
        :rtype: List[SitemapsReportSitemap]
        """
        return self._sitemaps

    @sitemaps.setter
    def sitemaps(self, sitemaps):
        """Sets the sitemaps of this SitemapsReport.

        

        :param sitemaps: The sitemaps of this SitemapsReport.
        :type sitemaps: List[SitemapsReportSitemap]
        """
        if sitemaps is None:
            raise ValueError("Invalid value for `sitemaps`, must not be `None`")

        self._sitemaps = sitemaps
