# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sitemaps_report_sitemap_error import SitemapsReportSitemapError
from openapi_server import util


class SitemapsReportSitemap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: SitemapsReportSitemapError=None, file_type: str=None, invalid_urls: int=None, sitemap_indexes: List[str]=None, url: str=None, valid_urls: int=None):
        """SitemapsReportSitemap - a model defined in OpenAPI

        :param error: The error of this SitemapsReportSitemap.
        :param file_type: The file_type of this SitemapsReportSitemap.
        :param invalid_urls: The invalid_urls of this SitemapsReportSitemap.
        :param sitemap_indexes: The sitemap_indexes of this SitemapsReportSitemap.
        :param url: The url of this SitemapsReportSitemap.
        :param valid_urls: The valid_urls of this SitemapsReportSitemap.
        """
        self.openapi_types = {
            'error': SitemapsReportSitemapError,
            'file_type': str,
            'invalid_urls': int,
            'sitemap_indexes': List[str],
            'url': str,
            'valid_urls': int
        }

        self.attribute_map = {
            'error': 'error',
            'file_type': 'file_type',
            'invalid_urls': 'invalid_urls',
            'sitemap_indexes': 'sitemap_indexes',
            'url': 'url',
            'valid_urls': 'valid_urls'
        }

        self._error = error
        self._file_type = file_type
        self._invalid_urls = invalid_urls
        self._sitemap_indexes = sitemap_indexes
        self._url = url
        self._valid_urls = valid_urls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SitemapsReportSitemap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SitemapsReportSitemap of this SitemapsReportSitemap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this SitemapsReportSitemap.


        :return: The error of this SitemapsReportSitemap.
        :rtype: SitemapsReportSitemapError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SitemapsReportSitemap.


        :param error: The error of this SitemapsReportSitemap.
        :type error: SitemapsReportSitemapError
        """

        self._error = error

    @property
    def file_type(self):
        """Gets the file_type of this SitemapsReportSitemap.

        

        :return: The file_type of this SitemapsReportSitemap.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this SitemapsReportSitemap.

        

        :param file_type: The file_type of this SitemapsReportSitemap.
        :type file_type: str
        """

        self._file_type = file_type

    @property
    def invalid_urls(self):
        """Gets the invalid_urls of this SitemapsReportSitemap.

        

        :return: The invalid_urls of this SitemapsReportSitemap.
        :rtype: int
        """
        return self._invalid_urls

    @invalid_urls.setter
    def invalid_urls(self, invalid_urls):
        """Sets the invalid_urls of this SitemapsReportSitemap.

        

        :param invalid_urls: The invalid_urls of this SitemapsReportSitemap.
        :type invalid_urls: int
        """

        self._invalid_urls = invalid_urls

    @property
    def sitemap_indexes(self):
        """Gets the sitemap_indexes of this SitemapsReportSitemap.

        

        :return: The sitemap_indexes of this SitemapsReportSitemap.
        :rtype: List[str]
        """
        return self._sitemap_indexes

    @sitemap_indexes.setter
    def sitemap_indexes(self, sitemap_indexes):
        """Sets the sitemap_indexes of this SitemapsReportSitemap.

        

        :param sitemap_indexes: The sitemap_indexes of this SitemapsReportSitemap.
        :type sitemap_indexes: List[str]
        """

        self._sitemap_indexes = sitemap_indexes

    @property
    def url(self):
        """Gets the url of this SitemapsReportSitemap.

        

        :return: The url of this SitemapsReportSitemap.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SitemapsReportSitemap.

        

        :param url: The url of this SitemapsReportSitemap.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def valid_urls(self):
        """Gets the valid_urls of this SitemapsReportSitemap.

        

        :return: The valid_urls of this SitemapsReportSitemap.
        :rtype: int
        """
        return self._valid_urls

    @valid_urls.setter
    def valid_urls(self, valid_urls):
        """Sets the valid_urls of this SitemapsReportSitemap.

        

        :param valid_urls: The valid_urls of this SitemapsReportSitemap.
        :type valid_urls: int
        """

        self._valid_urls = valid_urls
