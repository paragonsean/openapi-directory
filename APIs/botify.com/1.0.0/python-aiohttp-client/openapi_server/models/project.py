# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_settings_serializer import ProjectSettingsSerializer
from openapi_server.models.user import User
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, current_settings: ProjectSettingsSerializer=None, date_created: str=None, name: str=None, slug: str=None, user: User=None):
        """Project - a model defined in OpenAPI

        :param active: The active of this Project.
        :param current_settings: The current_settings of this Project.
        :param date_created: The date_created of this Project.
        :param name: The name of this Project.
        :param slug: The slug of this Project.
        :param user: The user of this Project.
        """
        self.openapi_types = {
            'active': bool,
            'current_settings': ProjectSettingsSerializer,
            'date_created': str,
            'name': str,
            'slug': str,
            'user': User
        }

        self.attribute_map = {
            'active': 'active',
            'current_settings': 'current_settings',
            'date_created': 'date_created',
            'name': 'name',
            'slug': 'slug',
            'user': 'user'
        }

        self._active = active
        self._current_settings = current_settings
        self._date_created = date_created
        self._name = name
        self._slug = slug
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this Project.

        

        :return: The active of this Project.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Project.

        

        :param active: The active of this Project.
        :type active: bool
        """

        self._active = active

    @property
    def current_settings(self):
        """Gets the current_settings of this Project.


        :return: The current_settings of this Project.
        :rtype: ProjectSettingsSerializer
        """
        return self._current_settings

    @current_settings.setter
    def current_settings(self, current_settings):
        """Sets the current_settings of this Project.


        :param current_settings: The current_settings of this Project.
        :type current_settings: ProjectSettingsSerializer
        """
        if current_settings is None:
            raise ValueError("Invalid value for `current_settings`, must not be `None`")

        self._current_settings = current_settings

    @property
    def date_created(self):
        """Gets the date_created of this Project.

        

        :return: The date_created of this Project.
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Project.

        

        :param date_created: The date_created of this Project.
        :type date_created: str
        """

        self._date_created = date_created

    @property
    def name(self):
        """Gets the name of this Project.

        

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        

        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Project.

        

        :return: The slug of this Project.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Project.

        

        :param slug: The slug of this Project.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def user(self):
        """Gets the user of this Project.


        :return: The user of this Project.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Project.


        :param user: The user of this Project.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
