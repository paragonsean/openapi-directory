# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectSavedFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: object=None, identifier: str=None, name: str=None):
        """ProjectSavedFilter - a model defined in OpenAPI

        :param filters: The filters of this ProjectSavedFilter.
        :param identifier: The identifier of this ProjectSavedFilter.
        :param name: The name of this ProjectSavedFilter.
        """
        self.openapi_types = {
            'filters': object,
            'identifier': str,
            'name': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'identifier': 'identifier',
            'name': 'name'
        }

        self._filters = filters
        self._identifier = identifier
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSavedFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSavedFilter of this ProjectSavedFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this ProjectSavedFilter.

        

        :return: The filters of this ProjectSavedFilter.
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ProjectSavedFilter.

        

        :param filters: The filters of this ProjectSavedFilter.
        :type filters: object
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")

        self._filters = filters

    @property
    def identifier(self):
        """Gets the identifier of this ProjectSavedFilter.

        

        :return: The identifier of this ProjectSavedFilter.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ProjectSavedFilter.

        

        :param identifier: The identifier of this ProjectSavedFilter.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this ProjectSavedFilter.

        

        :return: The name of this ProjectSavedFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectSavedFilter.

        

        :param name: The name of this ProjectSavedFilter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
