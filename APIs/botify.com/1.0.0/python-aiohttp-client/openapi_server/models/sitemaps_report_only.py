# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SitemapsReportOnly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_configuration: int=None, out_of_configuration: int=None):
        """SitemapsReportOnly - a model defined in OpenAPI

        :param in_configuration: The in_configuration of this SitemapsReportOnly.
        :param out_of_configuration: The out_of_configuration of this SitemapsReportOnly.
        """
        self.openapi_types = {
            'in_configuration': int,
            'out_of_configuration': int
        }

        self.attribute_map = {
            'in_configuration': 'in_configuration',
            'out_of_configuration': 'out_of_configuration'
        }

        self._in_configuration = in_configuration
        self._out_of_configuration = out_of_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SitemapsReportOnly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SitemapsReportOnly of this SitemapsReportOnly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_configuration(self):
        """Gets the in_configuration of this SitemapsReportOnly.

        

        :return: The in_configuration of this SitemapsReportOnly.
        :rtype: int
        """
        return self._in_configuration

    @in_configuration.setter
    def in_configuration(self, in_configuration):
        """Sets the in_configuration of this SitemapsReportOnly.

        

        :param in_configuration: The in_configuration of this SitemapsReportOnly.
        :type in_configuration: int
        """
        if in_configuration is None:
            raise ValueError("Invalid value for `in_configuration`, must not be `None`")

        self._in_configuration = in_configuration

    @property
    def out_of_configuration(self):
        """Gets the out_of_configuration of this SitemapsReportOnly.

        

        :return: The out_of_configuration of this SitemapsReportOnly.
        :rtype: int
        """
        return self._out_of_configuration

    @out_of_configuration.setter
    def out_of_configuration(self, out_of_configuration):
        """Sets the out_of_configuration of this SitemapsReportOnly.

        

        :param out_of_configuration: The out_of_configuration of this SitemapsReportOnly.
        :type out_of_configuration: int
        """
        if out_of_configuration is None:
            raise ValueError("Invalid value for `out_of_configuration`, must not be `None`")

        self._out_of_configuration = out_of_configuration
