# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.urls_query import UrlsQuery
from openapi_server import util


class CsvExportStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: int=None, date_created: datetime=None, job_id: str=None, job_status: str=None, job_url: str=None, nb_results: int=None, query: UrlsQuery=None, results: str=None):
        """CsvExportStatus - a model defined in OpenAPI

        :param area: The area of this CsvExportStatus.
        :param date_created: The date_created of this CsvExportStatus.
        :param job_id: The job_id of this CsvExportStatus.
        :param job_status: The job_status of this CsvExportStatus.
        :param job_url: The job_url of this CsvExportStatus.
        :param nb_results: The nb_results of this CsvExportStatus.
        :param query: The query of this CsvExportStatus.
        :param results: The results of this CsvExportStatus.
        """
        self.openapi_types = {
            'area': int,
            'date_created': datetime,
            'job_id': str,
            'job_status': str,
            'job_url': str,
            'nb_results': int,
            'query': UrlsQuery,
            'results': str
        }

        self.attribute_map = {
            'area': 'area',
            'date_created': 'date_created',
            'job_id': 'job_id',
            'job_status': 'job_status',
            'job_url': 'job_url',
            'nb_results': 'nb_results',
            'query': 'query',
            'results': 'results'
        }

        self._area = area
        self._date_created = date_created
        self._job_id = job_id
        self._job_status = job_status
        self._job_url = job_url
        self._nb_results = nb_results
        self._query = query
        self._results = results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsvExportStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsvExportStatus of this CsvExportStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this CsvExportStatus.

        

        :return: The area of this CsvExportStatus.
        :rtype: int
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CsvExportStatus.

        

        :param area: The area of this CsvExportStatus.
        :type area: int
        """

        self._area = area

    @property
    def date_created(self):
        """Gets the date_created of this CsvExportStatus.

        

        :return: The date_created of this CsvExportStatus.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this CsvExportStatus.

        

        :param date_created: The date_created of this CsvExportStatus.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def job_id(self):
        """Gets the job_id of this CsvExportStatus.

        

        :return: The job_id of this CsvExportStatus.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CsvExportStatus.

        

        :param job_id: The job_id of this CsvExportStatus.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_status(self):
        """Gets the job_status of this CsvExportStatus.

        

        :return: The job_status of this CsvExportStatus.
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this CsvExportStatus.

        

        :param job_status: The job_status of this CsvExportStatus.
        :type job_status: str
        """

        self._job_status = job_status

    @property
    def job_url(self):
        """Gets the job_url of this CsvExportStatus.

        

        :return: The job_url of this CsvExportStatus.
        :rtype: str
        """
        return self._job_url

    @job_url.setter
    def job_url(self, job_url):
        """Sets the job_url of this CsvExportStatus.

        

        :param job_url: The job_url of this CsvExportStatus.
        :type job_url: str
        """

        self._job_url = job_url

    @property
    def nb_results(self):
        """Gets the nb_results of this CsvExportStatus.

        

        :return: The nb_results of this CsvExportStatus.
        :rtype: int
        """
        return self._nb_results

    @nb_results.setter
    def nb_results(self, nb_results):
        """Sets the nb_results of this CsvExportStatus.

        

        :param nb_results: The nb_results of this CsvExportStatus.
        :type nb_results: int
        """
        if nb_results is not None and nb_results > 2147483647:
            raise ValueError("Invalid value for `nb_results`, must be a value less than or equal to `2147483647`")
        if nb_results is not None and nb_results < 0:
            raise ValueError("Invalid value for `nb_results`, must be a value greater than or equal to `0`")

        self._nb_results = nb_results

    @property
    def query(self):
        """Gets the query of this CsvExportStatus.


        :return: The query of this CsvExportStatus.
        :rtype: UrlsQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CsvExportStatus.


        :param query: The query of this CsvExportStatus.
        :type query: UrlsQuery
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def results(self):
        """Gets the results of this CsvExportStatus.

        

        :return: The results of this CsvExportStatus.
        :rtype: str
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this CsvExportStatus.

        

        :param results: The results of this CsvExportStatus.
        :type results: str
        """

        self._results = results
