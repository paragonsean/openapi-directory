# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectSettingsSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_domains: List[str]=None, blacklisted_domains: List[str]=None, compare_crawl: bool=None, crawl_gzip: bool=None, extra_headers: str=None, google_analytics_account_email: str=None, google_analytics_nb_days: int=None, google_analytics_site_id: int=None, google_social_auth_id: int=None, has_robots_txt: str=None, header_settings: List[str]=None, max_depth: int=None, max_nb_pages: int=None, max_pages_per_sec: int=None, respect_nofollow: bool=None, sitemaps: List[str]=None, start_urls: List[str]=None, user_agent: str=None):
        """ProjectSettingsSerializer - a model defined in OpenAPI

        :param allowed_domains: The allowed_domains of this ProjectSettingsSerializer.
        :param blacklisted_domains: The blacklisted_domains of this ProjectSettingsSerializer.
        :param compare_crawl: The compare_crawl of this ProjectSettingsSerializer.
        :param crawl_gzip: The crawl_gzip of this ProjectSettingsSerializer.
        :param extra_headers: The extra_headers of this ProjectSettingsSerializer.
        :param google_analytics_account_email: The google_analytics_account_email of this ProjectSettingsSerializer.
        :param google_analytics_nb_days: The google_analytics_nb_days of this ProjectSettingsSerializer.
        :param google_analytics_site_id: The google_analytics_site_id of this ProjectSettingsSerializer.
        :param google_social_auth_id: The google_social_auth_id of this ProjectSettingsSerializer.
        :param has_robots_txt: The has_robots_txt of this ProjectSettingsSerializer.
        :param header_settings: The header_settings of this ProjectSettingsSerializer.
        :param max_depth: The max_depth of this ProjectSettingsSerializer.
        :param max_nb_pages: The max_nb_pages of this ProjectSettingsSerializer.
        :param max_pages_per_sec: The max_pages_per_sec of this ProjectSettingsSerializer.
        :param respect_nofollow: The respect_nofollow of this ProjectSettingsSerializer.
        :param sitemaps: The sitemaps of this ProjectSettingsSerializer.
        :param start_urls: The start_urls of this ProjectSettingsSerializer.
        :param user_agent: The user_agent of this ProjectSettingsSerializer.
        """
        self.openapi_types = {
            'allowed_domains': List[str],
            'blacklisted_domains': List[str],
            'compare_crawl': bool,
            'crawl_gzip': bool,
            'extra_headers': str,
            'google_analytics_account_email': str,
            'google_analytics_nb_days': int,
            'google_analytics_site_id': int,
            'google_social_auth_id': int,
            'has_robots_txt': str,
            'header_settings': List[str],
            'max_depth': int,
            'max_nb_pages': int,
            'max_pages_per_sec': int,
            'respect_nofollow': bool,
            'sitemaps': List[str],
            'start_urls': List[str],
            'user_agent': str
        }

        self.attribute_map = {
            'allowed_domains': 'allowed_domains',
            'blacklisted_domains': 'blacklisted_domains',
            'compare_crawl': 'compare_crawl',
            'crawl_gzip': 'crawl_gzip',
            'extra_headers': 'extra_headers',
            'google_analytics_account_email': 'google_analytics_account_email',
            'google_analytics_nb_days': 'google_analytics_nb_days',
            'google_analytics_site_id': 'google_analytics_site_id',
            'google_social_auth_id': 'google_social_auth_id',
            'has_robots_txt': 'has_robots_txt',
            'header_settings': 'header_settings',
            'max_depth': 'max_depth',
            'max_nb_pages': 'max_nb_pages',
            'max_pages_per_sec': 'max_pages_per_sec',
            'respect_nofollow': 'respect_nofollow',
            'sitemaps': 'sitemaps',
            'start_urls': 'start_urls',
            'user_agent': 'user_agent'
        }

        self._allowed_domains = allowed_domains
        self._blacklisted_domains = blacklisted_domains
        self._compare_crawl = compare_crawl
        self._crawl_gzip = crawl_gzip
        self._extra_headers = extra_headers
        self._google_analytics_account_email = google_analytics_account_email
        self._google_analytics_nb_days = google_analytics_nb_days
        self._google_analytics_site_id = google_analytics_site_id
        self._google_social_auth_id = google_social_auth_id
        self._has_robots_txt = has_robots_txt
        self._header_settings = header_settings
        self._max_depth = max_depth
        self._max_nb_pages = max_nb_pages
        self._max_pages_per_sec = max_pages_per_sec
        self._respect_nofollow = respect_nofollow
        self._sitemaps = sitemaps
        self._start_urls = start_urls
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectSettingsSerializer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectSettingsSerializer of this ProjectSettingsSerializer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_domains(self):
        """Gets the allowed_domains of this ProjectSettingsSerializer.

        

        :return: The allowed_domains of this ProjectSettingsSerializer.
        :rtype: List[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this ProjectSettingsSerializer.

        

        :param allowed_domains: The allowed_domains of this ProjectSettingsSerializer.
        :type allowed_domains: List[str]
        """
        if allowed_domains is None:
            raise ValueError("Invalid value for `allowed_domains`, must not be `None`")

        self._allowed_domains = allowed_domains

    @property
    def blacklisted_domains(self):
        """Gets the blacklisted_domains of this ProjectSettingsSerializer.

        

        :return: The blacklisted_domains of this ProjectSettingsSerializer.
        :rtype: List[str]
        """
        return self._blacklisted_domains

    @blacklisted_domains.setter
    def blacklisted_domains(self, blacklisted_domains):
        """Sets the blacklisted_domains of this ProjectSettingsSerializer.

        

        :param blacklisted_domains: The blacklisted_domains of this ProjectSettingsSerializer.
        :type blacklisted_domains: List[str]
        """
        if blacklisted_domains is None:
            raise ValueError("Invalid value for `blacklisted_domains`, must not be `None`")

        self._blacklisted_domains = blacklisted_domains

    @property
    def compare_crawl(self):
        """Gets the compare_crawl of this ProjectSettingsSerializer.

        

        :return: The compare_crawl of this ProjectSettingsSerializer.
        :rtype: bool
        """
        return self._compare_crawl

    @compare_crawl.setter
    def compare_crawl(self, compare_crawl):
        """Sets the compare_crawl of this ProjectSettingsSerializer.

        

        :param compare_crawl: The compare_crawl of this ProjectSettingsSerializer.
        :type compare_crawl: bool
        """

        self._compare_crawl = compare_crawl

    @property
    def crawl_gzip(self):
        """Gets the crawl_gzip of this ProjectSettingsSerializer.

        

        :return: The crawl_gzip of this ProjectSettingsSerializer.
        :rtype: bool
        """
        return self._crawl_gzip

    @crawl_gzip.setter
    def crawl_gzip(self, crawl_gzip):
        """Sets the crawl_gzip of this ProjectSettingsSerializer.

        

        :param crawl_gzip: The crawl_gzip of this ProjectSettingsSerializer.
        :type crawl_gzip: bool
        """

        self._crawl_gzip = crawl_gzip

    @property
    def extra_headers(self):
        """Gets the extra_headers of this ProjectSettingsSerializer.

        

        :return: The extra_headers of this ProjectSettingsSerializer.
        :rtype: str
        """
        return self._extra_headers

    @extra_headers.setter
    def extra_headers(self, extra_headers):
        """Sets the extra_headers of this ProjectSettingsSerializer.

        

        :param extra_headers: The extra_headers of this ProjectSettingsSerializer.
        :type extra_headers: str
        """

        self._extra_headers = extra_headers

    @property
    def google_analytics_account_email(self):
        """Gets the google_analytics_account_email of this ProjectSettingsSerializer.

        Keep email in case user delete his social auth connection

        :return: The google_analytics_account_email of this ProjectSettingsSerializer.
        :rtype: str
        """
        return self._google_analytics_account_email

    @google_analytics_account_email.setter
    def google_analytics_account_email(self, google_analytics_account_email):
        """Sets the google_analytics_account_email of this ProjectSettingsSerializer.

        Keep email in case user delete his social auth connection

        :param google_analytics_account_email: The google_analytics_account_email of this ProjectSettingsSerializer.
        :type google_analytics_account_email: str
        """

        self._google_analytics_account_email = google_analytics_account_email

    @property
    def google_analytics_nb_days(self):
        """Gets the google_analytics_nb_days of this ProjectSettingsSerializer.

        

        :return: The google_analytics_nb_days of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._google_analytics_nb_days

    @google_analytics_nb_days.setter
    def google_analytics_nb_days(self, google_analytics_nb_days):
        """Sets the google_analytics_nb_days of this ProjectSettingsSerializer.

        

        :param google_analytics_nb_days: The google_analytics_nb_days of this ProjectSettingsSerializer.
        :type google_analytics_nb_days: int
        """
        if google_analytics_nb_days is not None and google_analytics_nb_days > 90:
            raise ValueError("Invalid value for `google_analytics_nb_days`, must be a value less than or equal to `90`")
        if google_analytics_nb_days is not None and google_analytics_nb_days < 1:
            raise ValueError("Invalid value for `google_analytics_nb_days`, must be a value greater than or equal to `1`")

        self._google_analytics_nb_days = google_analytics_nb_days

    @property
    def google_analytics_site_id(self):
        """Gets the google_analytics_site_id of this ProjectSettingsSerializer.

        

        :return: The google_analytics_site_id of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._google_analytics_site_id

    @google_analytics_site_id.setter
    def google_analytics_site_id(self, google_analytics_site_id):
        """Sets the google_analytics_site_id of this ProjectSettingsSerializer.

        

        :param google_analytics_site_id: The google_analytics_site_id of this ProjectSettingsSerializer.
        :type google_analytics_site_id: int
        """
        if google_analytics_site_id is not None and google_analytics_site_id > 2147483647:
            raise ValueError("Invalid value for `google_analytics_site_id`, must be a value less than or equal to `2147483647`")
        if google_analytics_site_id is not None and google_analytics_site_id < -2147483648:
            raise ValueError("Invalid value for `google_analytics_site_id`, must be a value greater than or equal to `-2147483648`")

        self._google_analytics_site_id = google_analytics_site_id

    @property
    def google_social_auth_id(self):
        """Gets the google_social_auth_id of this ProjectSettingsSerializer.

        

        :return: The google_social_auth_id of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._google_social_auth_id

    @google_social_auth_id.setter
    def google_social_auth_id(self, google_social_auth_id):
        """Sets the google_social_auth_id of this ProjectSettingsSerializer.

        

        :param google_social_auth_id: The google_social_auth_id of this ProjectSettingsSerializer.
        :type google_social_auth_id: int
        """
        if google_social_auth_id is not None and google_social_auth_id > 2147483647:
            raise ValueError("Invalid value for `google_social_auth_id`, must be a value less than or equal to `2147483647`")
        if google_social_auth_id is not None and google_social_auth_id < -2147483648:
            raise ValueError("Invalid value for `google_social_auth_id`, must be a value greater than or equal to `-2147483648`")

        self._google_social_auth_id = google_social_auth_id

    @property
    def has_robots_txt(self):
        """Gets the has_robots_txt of this ProjectSettingsSerializer.

        

        :return: The has_robots_txt of this ProjectSettingsSerializer.
        :rtype: str
        """
        return self._has_robots_txt

    @has_robots_txt.setter
    def has_robots_txt(self, has_robots_txt):
        """Sets the has_robots_txt of this ProjectSettingsSerializer.

        

        :param has_robots_txt: The has_robots_txt of this ProjectSettingsSerializer.
        :type has_robots_txt: str
        """

        self._has_robots_txt = has_robots_txt

    @property
    def header_settings(self):
        """Gets the header_settings of this ProjectSettingsSerializer.

        

        :return: The header_settings of this ProjectSettingsSerializer.
        :rtype: List[str]
        """
        return self._header_settings

    @header_settings.setter
    def header_settings(self, header_settings):
        """Sets the header_settings of this ProjectSettingsSerializer.

        

        :param header_settings: The header_settings of this ProjectSettingsSerializer.
        :type header_settings: List[str]
        """
        if header_settings is None:
            raise ValueError("Invalid value for `header_settings`, must not be `None`")

        self._header_settings = header_settings

    @property
    def max_depth(self):
        """Gets the max_depth of this ProjectSettingsSerializer.

        

        :return: The max_depth of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this ProjectSettingsSerializer.

        

        :param max_depth: The max_depth of this ProjectSettingsSerializer.
        :type max_depth: int
        """
        if max_depth is not None and max_depth > 2147483647:
            raise ValueError("Invalid value for `max_depth`, must be a value less than or equal to `2147483647`")
        if max_depth is not None and max_depth < 0:
            raise ValueError("Invalid value for `max_depth`, must be a value greater than or equal to `0`")

        self._max_depth = max_depth

    @property
    def max_nb_pages(self):
        """Gets the max_nb_pages of this ProjectSettingsSerializer.

        

        :return: The max_nb_pages of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._max_nb_pages

    @max_nb_pages.setter
    def max_nb_pages(self, max_nb_pages):
        """Sets the max_nb_pages of this ProjectSettingsSerializer.

        

        :param max_nb_pages: The max_nb_pages of this ProjectSettingsSerializer.
        :type max_nb_pages: int
        """
        if max_nb_pages is None:
            raise ValueError("Invalid value for `max_nb_pages`, must not be `None`")
        if max_nb_pages is not None and max_nb_pages > 2147483647:
            raise ValueError("Invalid value for `max_nb_pages`, must be a value less than or equal to `2147483647`")
        if max_nb_pages is not None and max_nb_pages < 1:
            raise ValueError("Invalid value for `max_nb_pages`, must be a value greater than or equal to `1`")

        self._max_nb_pages = max_nb_pages

    @property
    def max_pages_per_sec(self):
        """Gets the max_pages_per_sec of this ProjectSettingsSerializer.

        

        :return: The max_pages_per_sec of this ProjectSettingsSerializer.
        :rtype: int
        """
        return self._max_pages_per_sec

    @max_pages_per_sec.setter
    def max_pages_per_sec(self, max_pages_per_sec):
        """Sets the max_pages_per_sec of this ProjectSettingsSerializer.

        

        :param max_pages_per_sec: The max_pages_per_sec of this ProjectSettingsSerializer.
        :type max_pages_per_sec: int
        """
        if max_pages_per_sec is not None and max_pages_per_sec > 2147483647:
            raise ValueError("Invalid value for `max_pages_per_sec`, must be a value less than or equal to `2147483647`")
        if max_pages_per_sec is not None and max_pages_per_sec < 1:
            raise ValueError("Invalid value for `max_pages_per_sec`, must be a value greater than or equal to `1`")

        self._max_pages_per_sec = max_pages_per_sec

    @property
    def respect_nofollow(self):
        """Gets the respect_nofollow of this ProjectSettingsSerializer.

        

        :return: The respect_nofollow of this ProjectSettingsSerializer.
        :rtype: bool
        """
        return self._respect_nofollow

    @respect_nofollow.setter
    def respect_nofollow(self, respect_nofollow):
        """Sets the respect_nofollow of this ProjectSettingsSerializer.

        

        :param respect_nofollow: The respect_nofollow of this ProjectSettingsSerializer.
        :type respect_nofollow: bool
        """

        self._respect_nofollow = respect_nofollow

    @property
    def sitemaps(self):
        """Gets the sitemaps of this ProjectSettingsSerializer.

        

        :return: The sitemaps of this ProjectSettingsSerializer.
        :rtype: List[str]
        """
        return self._sitemaps

    @sitemaps.setter
    def sitemaps(self, sitemaps):
        """Sets the sitemaps of this ProjectSettingsSerializer.

        

        :param sitemaps: The sitemaps of this ProjectSettingsSerializer.
        :type sitemaps: List[str]
        """
        if sitemaps is None:
            raise ValueError("Invalid value for `sitemaps`, must not be `None`")

        self._sitemaps = sitemaps

    @property
    def start_urls(self):
        """Gets the start_urls of this ProjectSettingsSerializer.

        

        :return: The start_urls of this ProjectSettingsSerializer.
        :rtype: List[str]
        """
        return self._start_urls

    @start_urls.setter
    def start_urls(self, start_urls):
        """Sets the start_urls of this ProjectSettingsSerializer.

        

        :param start_urls: The start_urls of this ProjectSettingsSerializer.
        :type start_urls: List[str]
        """
        if start_urls is None:
            raise ValueError("Invalid value for `start_urls`, must not be `None`")

        self._start_urls = start_urls

    @property
    def user_agent(self):
        """Gets the user_agent of this ProjectSettingsSerializer.

        

        :return: The user_agent of this ProjectSettingsSerializer.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ProjectSettingsSerializer.

        

        :param user_agent: The user_agent of this ProjectSettingsSerializer.
        :type user_agent: str
        """

        self._user_agent = user_agent
