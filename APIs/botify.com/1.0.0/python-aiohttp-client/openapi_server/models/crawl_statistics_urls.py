# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrawlStatisticsUrls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, _date: str=None, delay_first_byte: int=None, delay_last_byte: int=None, gzip: bool=None, http: int=None, length: int=None, redirects_to: str=None, url: str=None):
        """CrawlStatisticsUrls - a model defined in OpenAPI

        :param content_type: The content_type of this CrawlStatisticsUrls.
        :param _date: The _date of this CrawlStatisticsUrls.
        :param delay_first_byte: The delay_first_byte of this CrawlStatisticsUrls.
        :param delay_last_byte: The delay_last_byte of this CrawlStatisticsUrls.
        :param gzip: The gzip of this CrawlStatisticsUrls.
        :param http: The http of this CrawlStatisticsUrls.
        :param length: The length of this CrawlStatisticsUrls.
        :param redirects_to: The redirects_to of this CrawlStatisticsUrls.
        :param url: The url of this CrawlStatisticsUrls.
        """
        self.openapi_types = {
            'content_type': str,
            '_date': str,
            'delay_first_byte': int,
            'delay_last_byte': int,
            'gzip': bool,
            'http': int,
            'length': int,
            'redirects_to': str,
            'url': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            '_date': 'date',
            'delay_first_byte': 'delay_first_byte',
            'delay_last_byte': 'delay_last_byte',
            'gzip': 'gzip',
            'http': 'http',
            'length': 'length',
            'redirects_to': 'redirects_to',
            'url': 'url'
        }

        self._content_type = content_type
        self.__date = _date
        self._delay_first_byte = delay_first_byte
        self._delay_last_byte = delay_last_byte
        self._gzip = gzip
        self._http = http
        self._length = length
        self._redirects_to = redirects_to
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawlStatisticsUrls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrawlStatisticsUrls of this CrawlStatisticsUrls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this CrawlStatisticsUrls.

        

        :return: The content_type of this CrawlStatisticsUrls.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this CrawlStatisticsUrls.

        

        :param content_type: The content_type of this CrawlStatisticsUrls.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def _date(self):
        """Gets the _date of this CrawlStatisticsUrls.

        

        :return: The _date of this CrawlStatisticsUrls.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this CrawlStatisticsUrls.

        

        :param _date: The _date of this CrawlStatisticsUrls.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def delay_first_byte(self):
        """Gets the delay_first_byte of this CrawlStatisticsUrls.

        

        :return: The delay_first_byte of this CrawlStatisticsUrls.
        :rtype: int
        """
        return self._delay_first_byte

    @delay_first_byte.setter
    def delay_first_byte(self, delay_first_byte):
        """Sets the delay_first_byte of this CrawlStatisticsUrls.

        

        :param delay_first_byte: The delay_first_byte of this CrawlStatisticsUrls.
        :type delay_first_byte: int
        """
        if delay_first_byte is None:
            raise ValueError("Invalid value for `delay_first_byte`, must not be `None`")

        self._delay_first_byte = delay_first_byte

    @property
    def delay_last_byte(self):
        """Gets the delay_last_byte of this CrawlStatisticsUrls.

        

        :return: The delay_last_byte of this CrawlStatisticsUrls.
        :rtype: int
        """
        return self._delay_last_byte

    @delay_last_byte.setter
    def delay_last_byte(self, delay_last_byte):
        """Sets the delay_last_byte of this CrawlStatisticsUrls.

        

        :param delay_last_byte: The delay_last_byte of this CrawlStatisticsUrls.
        :type delay_last_byte: int
        """
        if delay_last_byte is None:
            raise ValueError("Invalid value for `delay_last_byte`, must not be `None`")

        self._delay_last_byte = delay_last_byte

    @property
    def gzip(self):
        """Gets the gzip of this CrawlStatisticsUrls.

        

        :return: The gzip of this CrawlStatisticsUrls.
        :rtype: bool
        """
        return self._gzip

    @gzip.setter
    def gzip(self, gzip):
        """Sets the gzip of this CrawlStatisticsUrls.

        

        :param gzip: The gzip of this CrawlStatisticsUrls.
        :type gzip: bool
        """
        if gzip is None:
            raise ValueError("Invalid value for `gzip`, must not be `None`")

        self._gzip = gzip

    @property
    def http(self):
        """Gets the http of this CrawlStatisticsUrls.

        

        :return: The http of this CrawlStatisticsUrls.
        :rtype: int
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this CrawlStatisticsUrls.

        

        :param http: The http of this CrawlStatisticsUrls.
        :type http: int
        """
        if http is None:
            raise ValueError("Invalid value for `http`, must not be `None`")

        self._http = http

    @property
    def length(self):
        """Gets the length of this CrawlStatisticsUrls.

        

        :return: The length of this CrawlStatisticsUrls.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CrawlStatisticsUrls.

        

        :param length: The length of this CrawlStatisticsUrls.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def redirects_to(self):
        """Gets the redirects_to of this CrawlStatisticsUrls.

        

        :return: The redirects_to of this CrawlStatisticsUrls.
        :rtype: str
        """
        return self._redirects_to

    @redirects_to.setter
    def redirects_to(self, redirects_to):
        """Sets the redirects_to of this CrawlStatisticsUrls.

        

        :param redirects_to: The redirects_to of this CrawlStatisticsUrls.
        :type redirects_to: str
        """

        self._redirects_to = redirects_to

    @property
    def url(self):
        """Gets the url of this CrawlStatisticsUrls.

        

        :return: The url of this CrawlStatisticsUrls.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CrawlStatisticsUrls.

        

        :param url: The url of this CrawlStatisticsUrls.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
