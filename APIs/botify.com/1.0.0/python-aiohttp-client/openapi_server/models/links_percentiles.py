# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_percentiles_item import LinksPercentilesItem
from openapi_server import util


class LinksPercentiles(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, percentiles: List[LinksPercentilesItem]=None):
        """LinksPercentiles - a model defined in OpenAPI

        :param domain: The domain of this LinksPercentiles.
        :param percentiles: The percentiles of this LinksPercentiles.
        """
        self.openapi_types = {
            'domain': str,
            'percentiles': List[LinksPercentilesItem]
        }

        self.attribute_map = {
            'domain': 'domain',
            'percentiles': 'percentiles'
        }

        self._domain = domain
        self._percentiles = percentiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksPercentiles':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinksPercentiles of this LinksPercentiles.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this LinksPercentiles.

        

        :return: The domain of this LinksPercentiles.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this LinksPercentiles.

        

        :param domain: The domain of this LinksPercentiles.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def percentiles(self):
        """Gets the percentiles of this LinksPercentiles.

        

        :return: The percentiles of this LinksPercentiles.
        :rtype: List[LinksPercentilesItem]
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this LinksPercentiles.

        

        :param percentiles: The percentiles of this LinksPercentiles.
        :type percentiles: List[LinksPercentilesItem]
        """
        if percentiles is None:
            raise ValueError("Invalid value for `percentiles`, must not be `None`")

        self._percentiles = percentiles
