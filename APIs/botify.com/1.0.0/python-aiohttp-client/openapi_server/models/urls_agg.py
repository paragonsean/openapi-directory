# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UrlsAgg(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggs: List[object]=None, count: int=None):
        """UrlsAgg - a model defined in OpenAPI

        :param aggs: The aggs of this UrlsAgg.
        :param count: The count of this UrlsAgg.
        """
        self.openapi_types = {
            'aggs': List[object],
            'count': int
        }

        self.attribute_map = {
            'aggs': 'aggs',
            'count': 'count'
        }

        self._aggs = aggs
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlsAgg':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UrlsAgg of this UrlsAgg.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggs(self):
        """Gets the aggs of this UrlsAgg.

        

        :return: The aggs of this UrlsAgg.
        :rtype: List[object]
        """
        return self._aggs

    @aggs.setter
    def aggs(self, aggs):
        """Sets the aggs of this UrlsAgg.

        

        :param aggs: The aggs of this UrlsAgg.
        :type aggs: List[object]
        """

        self._aggs = aggs

    @property
    def count(self):
        """Gets the count of this UrlsAgg.

        

        :return: The count of this UrlsAgg.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this UrlsAgg.

        

        :param count: The count of this UrlsAgg.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count
