# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldValuesResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nb_urls: int=None, value: str=None):
        """FieldValuesResult - a model defined in OpenAPI

        :param nb_urls: The nb_urls of this FieldValuesResult.
        :param value: The value of this FieldValuesResult.
        """
        self.openapi_types = {
            'nb_urls': int,
            'value': str
        }

        self.attribute_map = {
            'nb_urls': 'nb_urls',
            'value': 'value'
        }

        self._nb_urls = nb_urls
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldValuesResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldValuesResult of this FieldValuesResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nb_urls(self):
        """Gets the nb_urls of this FieldValuesResult.

        

        :return: The nb_urls of this FieldValuesResult.
        :rtype: int
        """
        return self._nb_urls

    @nb_urls.setter
    def nb_urls(self, nb_urls):
        """Sets the nb_urls of this FieldValuesResult.

        

        :param nb_urls: The nb_urls of this FieldValuesResult.
        :type nb_urls: int
        """
        if nb_urls is None:
            raise ValueError("Invalid value for `nb_urls`, must not be `None`")

        self._nb_urls = nb_urls

    @property
    def value(self):
        """Gets the value of this FieldValuesResult.

        

        :return: The value of this FieldValuesResult.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldValuesResult.

        

        :param value: The value of this FieldValuesResult.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
