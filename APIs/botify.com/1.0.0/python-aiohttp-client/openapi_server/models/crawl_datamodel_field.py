# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrawlDatamodelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: str=None, id: str=None, multiple: bool=None, name: str=None, permissions: List[str]=None, subtype: str=None, type: str=None):
        """CrawlDatamodelField - a model defined in OpenAPI

        :param group: The group of this CrawlDatamodelField.
        :param id: The id of this CrawlDatamodelField.
        :param multiple: The multiple of this CrawlDatamodelField.
        :param name: The name of this CrawlDatamodelField.
        :param permissions: The permissions of this CrawlDatamodelField.
        :param subtype: The subtype of this CrawlDatamodelField.
        :param type: The type of this CrawlDatamodelField.
        """
        self.openapi_types = {
            'group': str,
            'id': str,
            'multiple': bool,
            'name': str,
            'permissions': List[str],
            'subtype': str,
            'type': str
        }

        self.attribute_map = {
            'group': 'group',
            'id': 'id',
            'multiple': 'multiple',
            'name': 'name',
            'permissions': 'permissions',
            'subtype': 'subtype',
            'type': 'type'
        }

        self._group = group
        self._id = id
        self._multiple = multiple
        self._name = name
        self._permissions = permissions
        self._subtype = subtype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawlDatamodelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CrawlDatamodelField of this CrawlDatamodelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this CrawlDatamodelField.

        

        :return: The group of this CrawlDatamodelField.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CrawlDatamodelField.

        

        :param group: The group of this CrawlDatamodelField.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def id(self):
        """Gets the id of this CrawlDatamodelField.

        

        :return: The id of this CrawlDatamodelField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrawlDatamodelField.

        

        :param id: The id of this CrawlDatamodelField.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def multiple(self):
        """Gets the multiple of this CrawlDatamodelField.

        

        :return: The multiple of this CrawlDatamodelField.
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this CrawlDatamodelField.

        

        :param multiple: The multiple of this CrawlDatamodelField.
        :type multiple: bool
        """
        if multiple is None:
            raise ValueError("Invalid value for `multiple`, must not be `None`")

        self._multiple = multiple

    @property
    def name(self):
        """Gets the name of this CrawlDatamodelField.

        

        :return: The name of this CrawlDatamodelField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CrawlDatamodelField.

        

        :param name: The name of this CrawlDatamodelField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this CrawlDatamodelField.

        

        :return: The permissions of this CrawlDatamodelField.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CrawlDatamodelField.

        

        :param permissions: The permissions of this CrawlDatamodelField.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def subtype(self):
        """Gets the subtype of this CrawlDatamodelField.

        

        :return: The subtype of this CrawlDatamodelField.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this CrawlDatamodelField.

        

        :param subtype: The subtype of this CrawlDatamodelField.
        :type subtype: str
        """
        if subtype is None:
            raise ValueError("Invalid value for `subtype`, must not be `None`")

        self._subtype = subtype

    @property
    def type(self):
        """Gets the type of this CrawlDatamodelField.

        

        :return: The type of this CrawlDatamodelField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CrawlDatamodelField.

        

        :param type: The type of this CrawlDatamodelField.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
