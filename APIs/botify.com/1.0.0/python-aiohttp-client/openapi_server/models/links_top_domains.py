# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_top_domains_samples import LinksTopDomainsSamples
from openapi_server import util


class LinksTopDomains(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, follow_links: int=None, follow_samples: List[LinksTopDomainsSamples]=None, nofollow_links: int=None, nofollow_samples: List[LinksTopDomainsSamples]=None, unique_follow_links: int=None, unique_nofollow_links: int=None):
        """LinksTopDomains - a model defined in OpenAPI

        :param domain: The domain of this LinksTopDomains.
        :param follow_links: The follow_links of this LinksTopDomains.
        :param follow_samples: The follow_samples of this LinksTopDomains.
        :param nofollow_links: The nofollow_links of this LinksTopDomains.
        :param nofollow_samples: The nofollow_samples of this LinksTopDomains.
        :param unique_follow_links: The unique_follow_links of this LinksTopDomains.
        :param unique_nofollow_links: The unique_nofollow_links of this LinksTopDomains.
        """
        self.openapi_types = {
            'domain': str,
            'follow_links': int,
            'follow_samples': List[LinksTopDomainsSamples],
            'nofollow_links': int,
            'nofollow_samples': List[LinksTopDomainsSamples],
            'unique_follow_links': int,
            'unique_nofollow_links': int
        }

        self.attribute_map = {
            'domain': 'domain',
            'follow_links': 'follow_links',
            'follow_samples': 'follow_samples',
            'nofollow_links': 'nofollow_links',
            'nofollow_samples': 'nofollow_samples',
            'unique_follow_links': 'unique_follow_links',
            'unique_nofollow_links': 'unique_nofollow_links'
        }

        self._domain = domain
        self._follow_links = follow_links
        self._follow_samples = follow_samples
        self._nofollow_links = nofollow_links
        self._nofollow_samples = nofollow_samples
        self._unique_follow_links = unique_follow_links
        self._unique_nofollow_links = unique_nofollow_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksTopDomains':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinksTopDomains of this LinksTopDomains.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this LinksTopDomains.

        

        :return: The domain of this LinksTopDomains.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this LinksTopDomains.

        

        :param domain: The domain of this LinksTopDomains.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def follow_links(self):
        """Gets the follow_links of this LinksTopDomains.

        

        :return: The follow_links of this LinksTopDomains.
        :rtype: int
        """
        return self._follow_links

    @follow_links.setter
    def follow_links(self, follow_links):
        """Sets the follow_links of this LinksTopDomains.

        

        :param follow_links: The follow_links of this LinksTopDomains.
        :type follow_links: int
        """
        if follow_links is None:
            raise ValueError("Invalid value for `follow_links`, must not be `None`")

        self._follow_links = follow_links

    @property
    def follow_samples(self):
        """Gets the follow_samples of this LinksTopDomains.

        

        :return: The follow_samples of this LinksTopDomains.
        :rtype: List[LinksTopDomainsSamples]
        """
        return self._follow_samples

    @follow_samples.setter
    def follow_samples(self, follow_samples):
        """Sets the follow_samples of this LinksTopDomains.

        

        :param follow_samples: The follow_samples of this LinksTopDomains.
        :type follow_samples: List[LinksTopDomainsSamples]
        """
        if follow_samples is None:
            raise ValueError("Invalid value for `follow_samples`, must not be `None`")

        self._follow_samples = follow_samples

    @property
    def nofollow_links(self):
        """Gets the nofollow_links of this LinksTopDomains.

        

        :return: The nofollow_links of this LinksTopDomains.
        :rtype: int
        """
        return self._nofollow_links

    @nofollow_links.setter
    def nofollow_links(self, nofollow_links):
        """Sets the nofollow_links of this LinksTopDomains.

        

        :param nofollow_links: The nofollow_links of this LinksTopDomains.
        :type nofollow_links: int
        """
        if nofollow_links is None:
            raise ValueError("Invalid value for `nofollow_links`, must not be `None`")

        self._nofollow_links = nofollow_links

    @property
    def nofollow_samples(self):
        """Gets the nofollow_samples of this LinksTopDomains.

        

        :return: The nofollow_samples of this LinksTopDomains.
        :rtype: List[LinksTopDomainsSamples]
        """
        return self._nofollow_samples

    @nofollow_samples.setter
    def nofollow_samples(self, nofollow_samples):
        """Sets the nofollow_samples of this LinksTopDomains.

        

        :param nofollow_samples: The nofollow_samples of this LinksTopDomains.
        :type nofollow_samples: List[LinksTopDomainsSamples]
        """
        if nofollow_samples is None:
            raise ValueError("Invalid value for `nofollow_samples`, must not be `None`")

        self._nofollow_samples = nofollow_samples

    @property
    def unique_follow_links(self):
        """Gets the unique_follow_links of this LinksTopDomains.

        

        :return: The unique_follow_links of this LinksTopDomains.
        :rtype: int
        """
        return self._unique_follow_links

    @unique_follow_links.setter
    def unique_follow_links(self, unique_follow_links):
        """Sets the unique_follow_links of this LinksTopDomains.

        

        :param unique_follow_links: The unique_follow_links of this LinksTopDomains.
        :type unique_follow_links: int
        """
        if unique_follow_links is None:
            raise ValueError("Invalid value for `unique_follow_links`, must not be `None`")

        self._unique_follow_links = unique_follow_links

    @property
    def unique_nofollow_links(self):
        """Gets the unique_nofollow_links of this LinksTopDomains.

        

        :return: The unique_nofollow_links of this LinksTopDomains.
        :rtype: int
        """
        return self._unique_nofollow_links

    @unique_nofollow_links.setter
    def unique_nofollow_links(self, unique_nofollow_links):
        """Sets the unique_nofollow_links of this LinksTopDomains.

        

        :param unique_nofollow_links: The unique_nofollow_links of this LinksTopDomains.
        :type unique_nofollow_links: int
        """
        if unique_nofollow_links is None:
            raise ValueError("Invalid value for `unique_nofollow_links`, must not be `None`")

        self._unique_nofollow_links = unique_nofollow_links
