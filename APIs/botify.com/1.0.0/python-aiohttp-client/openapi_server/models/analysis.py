# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Analysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: str=None, date_created: datetime=None, date_finished: datetime=None, date_last_modified: datetime=None, date_launched: datetime=None, features: str=None, id: int=None, name: str=None, slug: str=None, status: str=None, url: str=None, urls_done: str=None, urls_in_queue: str=None, user: User=None):
        """Analysis - a model defined in OpenAPI

        :param config: The config of this Analysis.
        :param date_created: The date_created of this Analysis.
        :param date_finished: The date_finished of this Analysis.
        :param date_last_modified: The date_last_modified of this Analysis.
        :param date_launched: The date_launched of this Analysis.
        :param features: The features of this Analysis.
        :param id: The id of this Analysis.
        :param name: The name of this Analysis.
        :param slug: The slug of this Analysis.
        :param status: The status of this Analysis.
        :param url: The url of this Analysis.
        :param urls_done: The urls_done of this Analysis.
        :param urls_in_queue: The urls_in_queue of this Analysis.
        :param user: The user of this Analysis.
        """
        self.openapi_types = {
            'config': str,
            'date_created': datetime,
            'date_finished': datetime,
            'date_last_modified': datetime,
            'date_launched': datetime,
            'features': str,
            'id': int,
            'name': str,
            'slug': str,
            'status': str,
            'url': str,
            'urls_done': str,
            'urls_in_queue': str,
            'user': User
        }

        self.attribute_map = {
            'config': 'config',
            'date_created': 'date_created',
            'date_finished': 'date_finished',
            'date_last_modified': 'date_last_modified',
            'date_launched': 'date_launched',
            'features': 'features',
            'id': 'id',
            'name': 'name',
            'slug': 'slug',
            'status': 'status',
            'url': 'url',
            'urls_done': 'urls_done',
            'urls_in_queue': 'urls_in_queue',
            'user': 'user'
        }

        self._config = config
        self._date_created = date_created
        self._date_finished = date_finished
        self._date_last_modified = date_last_modified
        self._date_launched = date_launched
        self._features = features
        self._id = id
        self._name = name
        self._slug = slug
        self._status = status
        self._url = url
        self._urls_done = urls_done
        self._urls_in_queue = urls_in_queue
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Analysis of this Analysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Analysis.

        

        :return: The config of this Analysis.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Analysis.

        

        :param config: The config of this Analysis.
        :type config: str
        """

        self._config = config

    @property
    def date_created(self):
        """Gets the date_created of this Analysis.

        

        :return: The date_created of this Analysis.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Analysis.

        

        :param date_created: The date_created of this Analysis.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_finished(self):
        """Gets the date_finished of this Analysis.

        

        :return: The date_finished of this Analysis.
        :rtype: datetime
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """Sets the date_finished of this Analysis.

        

        :param date_finished: The date_finished of this Analysis.
        :type date_finished: datetime
        """

        self._date_finished = date_finished

    @property
    def date_last_modified(self):
        """Gets the date_last_modified of this Analysis.

        Date of last modified analysis

        :return: The date_last_modified of this Analysis.
        :rtype: datetime
        """
        return self._date_last_modified

    @date_last_modified.setter
    def date_last_modified(self, date_last_modified):
        """Sets the date_last_modified of this Analysis.

        Date of last modified analysis

        :param date_last_modified: The date_last_modified of this Analysis.
        :type date_last_modified: datetime
        """

        self._date_last_modified = date_last_modified

    @property
    def date_launched(self):
        """Gets the date_launched of this Analysis.

        

        :return: The date_launched of this Analysis.
        :rtype: datetime
        """
        return self._date_launched

    @date_launched.setter
    def date_launched(self, date_launched):
        """Sets the date_launched of this Analysis.

        

        :param date_launched: The date_launched of this Analysis.
        :type date_launched: datetime
        """

        self._date_launched = date_launched

    @property
    def features(self):
        """Gets the features of this Analysis.

        

        :return: The features of this Analysis.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Analysis.

        

        :param features: The features of this Analysis.
        :type features: str
        """

        self._features = features

    @property
    def id(self):
        """Gets the id of this Analysis.

        

        :return: The id of this Analysis.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Analysis.

        

        :param id: The id of this Analysis.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Analysis.

        

        :return: The name of this Analysis.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Analysis.

        

        :param name: The name of this Analysis.
        :type name: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Analysis.

        

        :return: The slug of this Analysis.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Analysis.

        

        :param slug: The slug of this Analysis.
        :type slug: str
        """

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this Analysis.

        

        :return: The status of this Analysis.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Analysis.

        

        :param status: The status of this Analysis.
        :type status: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this Analysis.

        

        :return: The url of this Analysis.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Analysis.

        

        :param url: The url of this Analysis.
        :type url: str
        """

        self._url = url

    @property
    def urls_done(self):
        """Gets the urls_done of this Analysis.

        

        :return: The urls_done of this Analysis.
        :rtype: str
        """
        return self._urls_done

    @urls_done.setter
    def urls_done(self, urls_done):
        """Sets the urls_done of this Analysis.

        

        :param urls_done: The urls_done of this Analysis.
        :type urls_done: str
        """

        self._urls_done = urls_done

    @property
    def urls_in_queue(self):
        """Gets the urls_in_queue of this Analysis.

        

        :return: The urls_in_queue of this Analysis.
        :rtype: str
        """
        return self._urls_in_queue

    @urls_in_queue.setter
    def urls_in_queue(self, urls_in_queue):
        """Sets the urls_in_queue of this Analysis.

        

        :param urls_in_queue: The urls_in_queue of this Analysis.
        :type urls_in_queue: str
        """

        self._urls_in_queue = urls_in_queue

    @property
    def user(self):
        """Gets the user of this Analysis.


        :return: The user of this Analysis.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Analysis.


        :param user: The user of this Analysis.
        :type user: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
