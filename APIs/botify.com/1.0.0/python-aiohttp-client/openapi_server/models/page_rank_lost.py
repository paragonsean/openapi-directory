# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PageRankLost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external: float=None, non_crawled: float=None, robots_txt: float=None):
        """PageRankLost - a model defined in OpenAPI

        :param external: The external of this PageRankLost.
        :param non_crawled: The non_crawled of this PageRankLost.
        :param robots_txt: The robots_txt of this PageRankLost.
        """
        self.openapi_types = {
            'external': float,
            'non_crawled': float,
            'robots_txt': float
        }

        self.attribute_map = {
            'external': 'external',
            'non_crawled': 'non_crawled',
            'robots_txt': 'robots_txt'
        }

        self._external = external
        self._non_crawled = non_crawled
        self._robots_txt = robots_txt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageRankLost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PageRankLost of this PageRankLost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external(self):
        """Gets the external of this PageRankLost.

        

        :return: The external of this PageRankLost.
        :rtype: float
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this PageRankLost.

        

        :param external: The external of this PageRankLost.
        :type external: float
        """
        if external is None:
            raise ValueError("Invalid value for `external`, must not be `None`")

        self._external = external

    @property
    def non_crawled(self):
        """Gets the non_crawled of this PageRankLost.

        

        :return: The non_crawled of this PageRankLost.
        :rtype: float
        """
        return self._non_crawled

    @non_crawled.setter
    def non_crawled(self, non_crawled):
        """Sets the non_crawled of this PageRankLost.

        

        :param non_crawled: The non_crawled of this PageRankLost.
        :type non_crawled: float
        """
        if non_crawled is None:
            raise ValueError("Invalid value for `non_crawled`, must not be `None`")

        self._non_crawled = non_crawled

    @property
    def robots_txt(self):
        """Gets the robots_txt of this PageRankLost.

        

        :return: The robots_txt of this PageRankLost.
        :rtype: float
        """
        return self._robots_txt

    @robots_txt.setter
    def robots_txt(self, robots_txt):
        """Sets the robots_txt of this PageRankLost.

        

        :param robots_txt: The robots_txt of this PageRankLost.
        :type robots_txt: float
        """
        if robots_txt is None:
            raise ValueError("Invalid value for `robots_txt`, must not be `None`")

        self._robots_txt = robots_txt
