# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinksTopDomainsSamples(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sources: List[str]=None, unique_links: int=None, url: str=None):
        """LinksTopDomainsSamples - a model defined in OpenAPI

        :param sources: The sources of this LinksTopDomainsSamples.
        :param unique_links: The unique_links of this LinksTopDomainsSamples.
        :param url: The url of this LinksTopDomainsSamples.
        """
        self.openapi_types = {
            'sources': List[str],
            'unique_links': int,
            'url': str
        }

        self.attribute_map = {
            'sources': 'sources',
            'unique_links': 'unique_links',
            'url': 'url'
        }

        self._sources = sources
        self._unique_links = unique_links
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksTopDomainsSamples':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinksTopDomainsSamples of this LinksTopDomainsSamples.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sources(self):
        """Gets the sources of this LinksTopDomainsSamples.

        

        :return: The sources of this LinksTopDomainsSamples.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this LinksTopDomainsSamples.

        

        :param sources: The sources of this LinksTopDomainsSamples.
        :type sources: List[str]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def unique_links(self):
        """Gets the unique_links of this LinksTopDomainsSamples.

        

        :return: The unique_links of this LinksTopDomainsSamples.
        :rtype: int
        """
        return self._unique_links

    @unique_links.setter
    def unique_links(self, unique_links):
        """Sets the unique_links of this LinksTopDomainsSamples.

        

        :param unique_links: The unique_links of this LinksTopDomainsSamples.
        :type unique_links: int
        """
        if unique_links is None:
            raise ValueError("Invalid value for `unique_links`, must not be `None`")

        self._unique_links = unique_links

    @property
    def url(self):
        """Gets the url of this LinksTopDomainsSamples.

        

        :return: The url of this LinksTopDomainsSamples.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LinksTopDomainsSamples.

        

        :param url: The url of this LinksTopDomainsSamples.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
