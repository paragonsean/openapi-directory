# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewritingRuleSerializer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_case: bool=None, regex: str=None, replace: str=None):
        """RewritingRuleSerializer - a model defined in OpenAPI

        :param ignore_case: The ignore_case of this RewritingRuleSerializer.
        :param regex: The regex of this RewritingRuleSerializer.
        :param replace: The replace of this RewritingRuleSerializer.
        """
        self.openapi_types = {
            'ignore_case': bool,
            'regex': str,
            'replace': str
        }

        self.attribute_map = {
            'ignore_case': 'ignore_case',
            'regex': 'regex',
            'replace': 'replace'
        }

        self._ignore_case = ignore_case
        self._regex = regex
        self._replace = replace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewritingRuleSerializer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewritingRuleSerializer of this RewritingRuleSerializer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_case(self):
        """Gets the ignore_case of this RewritingRuleSerializer.

        

        :return: The ignore_case of this RewritingRuleSerializer.
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this RewritingRuleSerializer.

        

        :param ignore_case: The ignore_case of this RewritingRuleSerializer.
        :type ignore_case: bool
        """
        if ignore_case is None:
            raise ValueError("Invalid value for `ignore_case`, must not be `None`")

        self._ignore_case = ignore_case

    @property
    def regex(self):
        """Gets the regex of this RewritingRuleSerializer.

        

        :return: The regex of this RewritingRuleSerializer.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this RewritingRuleSerializer.

        

        :param regex: The regex of this RewritingRuleSerializer.
        :type regex: str
        """
        if regex is None:
            raise ValueError("Invalid value for `regex`, must not be `None`")

        self._regex = regex

    @property
    def replace(self):
        """Gets the replace of this RewritingRuleSerializer.

        

        :return: The replace of this RewritingRuleSerializer.
        :rtype: str
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this RewritingRuleSerializer.

        

        :param replace: The replace of this RewritingRuleSerializer.
        :type replace: str
        """
        if replace is None:
            raise ValueError("Invalid value for `replace`, must not be `None`")

        self._replace = replace
