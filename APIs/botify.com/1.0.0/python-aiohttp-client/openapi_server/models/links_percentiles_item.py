# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinksPercentilesItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg: int=None, id: int=None, max: int=None, metric_total: int=None, min: int=None, url_total: int=None):
        """LinksPercentilesItem - a model defined in OpenAPI

        :param avg: The avg of this LinksPercentilesItem.
        :param id: The id of this LinksPercentilesItem.
        :param max: The max of this LinksPercentilesItem.
        :param metric_total: The metric_total of this LinksPercentilesItem.
        :param min: The min of this LinksPercentilesItem.
        :param url_total: The url_total of this LinksPercentilesItem.
        """
        self.openapi_types = {
            'avg': int,
            'id': int,
            'max': int,
            'metric_total': int,
            'min': int,
            'url_total': int
        }

        self.attribute_map = {
            'avg': 'avg',
            'id': 'id',
            'max': 'max',
            'metric_total': 'metric_total',
            'min': 'min',
            'url_total': 'url_total'
        }

        self._avg = avg
        self._id = id
        self._max = max
        self._metric_total = metric_total
        self._min = min
        self._url_total = url_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinksPercentilesItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinksPercentilesItem of this LinksPercentilesItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg(self):
        """Gets the avg of this LinksPercentilesItem.

        

        :return: The avg of this LinksPercentilesItem.
        :rtype: int
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this LinksPercentilesItem.

        

        :param avg: The avg of this LinksPercentilesItem.
        :type avg: int
        """
        if avg is None:
            raise ValueError("Invalid value for `avg`, must not be `None`")

        self._avg = avg

    @property
    def id(self):
        """Gets the id of this LinksPercentilesItem.

        

        :return: The id of this LinksPercentilesItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinksPercentilesItem.

        

        :param id: The id of this LinksPercentilesItem.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max(self):
        """Gets the max of this LinksPercentilesItem.

        

        :return: The max of this LinksPercentilesItem.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this LinksPercentilesItem.

        

        :param max: The max of this LinksPercentilesItem.
        :type max: int
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def metric_total(self):
        """Gets the metric_total of this LinksPercentilesItem.

        

        :return: The metric_total of this LinksPercentilesItem.
        :rtype: int
        """
        return self._metric_total

    @metric_total.setter
    def metric_total(self, metric_total):
        """Sets the metric_total of this LinksPercentilesItem.

        

        :param metric_total: The metric_total of this LinksPercentilesItem.
        :type metric_total: int
        """
        if metric_total is None:
            raise ValueError("Invalid value for `metric_total`, must not be `None`")

        self._metric_total = metric_total

    @property
    def min(self):
        """Gets the min of this LinksPercentilesItem.

        

        :return: The min of this LinksPercentilesItem.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this LinksPercentilesItem.

        

        :param min: The min of this LinksPercentilesItem.
        :type min: int
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def url_total(self):
        """Gets the url_total of this LinksPercentilesItem.

        

        :return: The url_total of this LinksPercentilesItem.
        :rtype: int
        """
        return self._url_total

    @url_total.setter
    def url_total(self, url_total):
        """Sets the url_total of this LinksPercentilesItem.

        

        :param url_total: The url_total of this LinksPercentilesItem.
        :type url_total: int
        """
        if url_total is None:
            raise ValueError("Invalid value for `url_total`, must not be `None`")

        self._url_total = url_total
