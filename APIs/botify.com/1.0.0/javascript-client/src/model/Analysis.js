/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Analysis model module.
 * @module model/Analysis
 * @version 1.0.0
 */
class Analysis {
    /**
     * Constructs a new <code>Analysis</code>.
     * @alias module:model/Analysis
     * @param user {module:model/User} 
     */
    constructor(user) { 
        
        Analysis.initialize(this, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, user) { 
        obj['user'] = user;
    }

    /**
     * Constructs a <code>Analysis</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Analysis} obj Optional instance to populate.
     * @return {module:model/Analysis} The populated <code>Analysis</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Analysis();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ApiClient.convertToType(data['config'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('date_finished')) {
                obj['date_finished'] = ApiClient.convertToType(data['date_finished'], 'Date');
            }
            if (data.hasOwnProperty('date_last_modified')) {
                obj['date_last_modified'] = ApiClient.convertToType(data['date_last_modified'], 'Date');
            }
            if (data.hasOwnProperty('date_launched')) {
                obj['date_launched'] = ApiClient.convertToType(data['date_launched'], 'Date');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('urls_done')) {
                obj['urls_done'] = ApiClient.convertToType(data['urls_done'], 'String');
            }
            if (data.hasOwnProperty('urls_in_queue')) {
                obj['urls_in_queue'] = ApiClient.convertToType(data['urls_in_queue'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Analysis</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Analysis</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Analysis.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['config'] && !(typeof data['config'] === 'string' || data['config'] instanceof String)) {
            throw new Error("Expected the field `config` to be a primitive type in the JSON string but got " + data['config']);
        }
        // ensure the json data is a string
        if (data['features'] && !(typeof data['features'] === 'string' || data['features'] instanceof String)) {
            throw new Error("Expected the field `features` to be a primitive type in the JSON string but got " + data['features']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['urls_done'] && !(typeof data['urls_done'] === 'string' || data['urls_done'] instanceof String)) {
            throw new Error("Expected the field `urls_done` to be a primitive type in the JSON string but got " + data['urls_done']);
        }
        // ensure the json data is a string
        if (data['urls_in_queue'] && !(typeof data['urls_in_queue'] === 'string' || data['urls_in_queue'] instanceof String)) {
            throw new Error("Expected the field `urls_in_queue` to be a primitive type in the JSON string but got " + data['urls_in_queue']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

Analysis.RequiredProperties = ["user"];

/**
 * 
 * @member {String} config
 */
Analysis.prototype['config'] = undefined;

/**
 * 
 * @member {Date} date_created
 */
Analysis.prototype['date_created'] = undefined;

/**
 * 
 * @member {Date} date_finished
 */
Analysis.prototype['date_finished'] = undefined;

/**
 * Date of last modified analysis
 * @member {Date} date_last_modified
 */
Analysis.prototype['date_last_modified'] = undefined;

/**
 * 
 * @member {Date} date_launched
 */
Analysis.prototype['date_launched'] = undefined;

/**
 * 
 * @member {String} features
 */
Analysis.prototype['features'] = undefined;

/**
 * 
 * @member {Number} id
 */
Analysis.prototype['id'] = undefined;

/**
 * 
 * @member {String} name
 */
Analysis.prototype['name'] = undefined;

/**
 * 
 * @member {String} slug
 */
Analysis.prototype['slug'] = undefined;

/**
 * 
 * @member {String} status
 */
Analysis.prototype['status'] = undefined;

/**
 * 
 * @member {String} url
 */
Analysis.prototype['url'] = undefined;

/**
 * 
 * @member {String} urls_done
 */
Analysis.prototype['urls_done'] = undefined;

/**
 * 
 * @member {String} urls_in_queue
 */
Analysis.prototype['urls_in_queue'] = undefined;

/**
 * @member {module:model/User} user
 */
Analysis.prototype['user'] = undefined;






export default Analysis;

