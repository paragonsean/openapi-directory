/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SitemapsReportOnly from './SitemapsReportOnly';
import SitemapsReportSitemap from './SitemapsReportSitemap';

/**
 * The SitemapsReport model module.
 * @module model/SitemapsReport
 * @version 1.0.0
 */
class SitemapsReport {
    /**
     * Constructs a new <code>SitemapsReport</code>.
     * @alias module:model/SitemapsReport
     * @param count {Number} 
     * @param errors {Array.<module:model/SitemapsReportSitemap>} 
     * @param sitemapIndexes {Array.<module:model/SitemapsReportSitemap>} 
     * @param sitemapOnly {module:model/SitemapsReportOnly} 
     * @param sitemaps {Array.<module:model/SitemapsReportSitemap>} 
     */
    constructor(count, errors, sitemapIndexes, sitemapOnly, sitemaps) { 
        
        SitemapsReport.initialize(this, count, errors, sitemapIndexes, sitemapOnly, sitemaps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, errors, sitemapIndexes, sitemapOnly, sitemaps) { 
        obj['count'] = count;
        obj['errors'] = errors;
        obj['sitemap_indexes'] = sitemapIndexes;
        obj['sitemap_only'] = sitemapOnly;
        obj['sitemaps'] = sitemaps;
    }

    /**
     * Constructs a <code>SitemapsReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SitemapsReport} obj Optional instance to populate.
     * @return {module:model/SitemapsReport} The populated <code>SitemapsReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SitemapsReport();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [SitemapsReportSitemap]);
            }
            if (data.hasOwnProperty('sitemap_indexes')) {
                obj['sitemap_indexes'] = ApiClient.convertToType(data['sitemap_indexes'], [SitemapsReportSitemap]);
            }
            if (data.hasOwnProperty('sitemap_only')) {
                obj['sitemap_only'] = SitemapsReportOnly.constructFromObject(data['sitemap_only']);
            }
            if (data.hasOwnProperty('sitemaps')) {
                obj['sitemaps'] = ApiClient.convertToType(data['sitemaps'], [SitemapsReportSitemap]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SitemapsReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SitemapsReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SitemapsReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                SitemapsReportSitemap.validateJSON(item);
            };
        }
        if (data['sitemap_indexes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sitemap_indexes'])) {
                throw new Error("Expected the field `sitemap_indexes` to be an array in the JSON data but got " + data['sitemap_indexes']);
            }
            // validate the optional field `sitemap_indexes` (array)
            for (const item of data['sitemap_indexes']) {
                SitemapsReportSitemap.validateJSON(item);
            };
        }
        // validate the optional field `sitemap_only`
        if (data['sitemap_only']) { // data not null
          SitemapsReportOnly.validateJSON(data['sitemap_only']);
        }
        if (data['sitemaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sitemaps'])) {
                throw new Error("Expected the field `sitemaps` to be an array in the JSON data but got " + data['sitemaps']);
            }
            // validate the optional field `sitemaps` (array)
            for (const item of data['sitemaps']) {
                SitemapsReportSitemap.validateJSON(item);
            };
        }

        return true;
    }


}

SitemapsReport.RequiredProperties = ["count", "errors", "sitemap_indexes", "sitemap_only", "sitemaps"];

/**
 * 
 * @member {Number} count
 */
SitemapsReport.prototype['count'] = undefined;

/**
 * 
 * @member {Array.<module:model/SitemapsReportSitemap>} errors
 */
SitemapsReport.prototype['errors'] = undefined;

/**
 * 
 * @member {Array.<module:model/SitemapsReportSitemap>} sitemap_indexes
 */
SitemapsReport.prototype['sitemap_indexes'] = undefined;

/**
 * @member {module:model/SitemapsReportOnly} sitemap_only
 */
SitemapsReport.prototype['sitemap_only'] = undefined;

/**
 * 
 * @member {Array.<module:model/SitemapsReportSitemap>} sitemaps
 */
SitemapsReport.prototype['sitemaps'] = undefined;






export default SitemapsReport;

