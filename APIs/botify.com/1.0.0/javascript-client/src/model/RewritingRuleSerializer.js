/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RewritingRuleSerializer model module.
 * @module model/RewritingRuleSerializer
 * @version 1.0.0
 */
class RewritingRuleSerializer {
    /**
     * Constructs a new <code>RewritingRuleSerializer</code>.
     * @alias module:model/RewritingRuleSerializer
     * @param ignoreCase {Boolean} 
     * @param regex {String} 
     * @param replace {String} 
     */
    constructor(ignoreCase, regex, replace) { 
        
        RewritingRuleSerializer.initialize(this, ignoreCase, regex, replace);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ignoreCase, regex, replace) { 
        obj['ignore_case'] = ignoreCase;
        obj['regex'] = regex;
        obj['replace'] = replace;
    }

    /**
     * Constructs a <code>RewritingRuleSerializer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RewritingRuleSerializer} obj Optional instance to populate.
     * @return {module:model/RewritingRuleSerializer} The populated <code>RewritingRuleSerializer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RewritingRuleSerializer();

            if (data.hasOwnProperty('ignore_case')) {
                obj['ignore_case'] = ApiClient.convertToType(data['ignore_case'], 'Boolean');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('replace')) {
                obj['replace'] = ApiClient.convertToType(data['replace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RewritingRuleSerializer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RewritingRuleSerializer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RewritingRuleSerializer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }
        // ensure the json data is a string
        if (data['replace'] && !(typeof data['replace'] === 'string' || data['replace'] instanceof String)) {
            throw new Error("Expected the field `replace` to be a primitive type in the JSON string but got " + data['replace']);
        }

        return true;
    }


}

RewritingRuleSerializer.RequiredProperties = ["ignore_case", "regex", "replace"];

/**
 * 
 * @member {Boolean} ignore_case
 */
RewritingRuleSerializer.prototype['ignore_case'] = undefined;

/**
 * 
 * @member {String} regex
 */
RewritingRuleSerializer.prototype['regex'] = undefined;

/**
 * 
 * @member {String} replace
 */
RewritingRuleSerializer.prototype['replace'] = undefined;






export default RewritingRuleSerializer;

