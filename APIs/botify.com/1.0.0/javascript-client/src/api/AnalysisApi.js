/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisDetail from '../model/AnalysisDetail';
import CrawlDatamodel from '../model/CrawlDatamodel';
import CrawlStatistics from '../model/CrawlStatistics';
import CrawlStatisticsTime from '../model/CrawlStatisticsTime';
import CsvExportStatus from '../model/CsvExportStatus';
import DefaultPayload from '../model/DefaultPayload';
import GetGanalyticsOrphanURLs200Response from '../model/GetGanalyticsOrphanURLs200Response';
import GetLinksTopDomains200Response from '../model/GetLinksTopDomains200Response';
import GetSitemapsSamplesOutOfConfig200Response from '../model/GetSitemapsSamplesOutOfConfig200Response';
import GetUrls200Response from '../model/GetUrls200Response';
import GetUrlsExports200Response from '../model/GetUrlsExports200Response';
import LinksPercentiles from '../model/LinksPercentiles';
import PageRankLost from '../model/PageRankLost';
import SitemapsReport from '../model/SitemapsReport';
import UrlsAggsQuery from '../model/UrlsAggsQuery';
import UrlsQuery from '../model/UrlsQuery';

/**
* Analysis service.
* @module api/AnalysisApi
* @version 1.0.0
*/
export default class AnalysisApi {

    /**
    * Constructs a new AnalysisApi. 
    * @alias module:api/AnalysisApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUrlsExport operation.
     * @callback module:api/AnalysisApi~createUrlsExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CsvExportStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new UrlExport object and starts a task that will export the results into a csv
     * Creates a new UrlExport object and starts a task that will export the results into a csv. Returns the model id that manages the task
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] 
     * @param {module:model/UrlsQuery} [urlsQuery] 
     * @param {module:api/AnalysisApi~createUrlsExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CsvExportStatus}
     */
    createUrlsExport(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['urlsQuery'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createUrlsExport");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling createUrlsExport");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling createUrlsExport");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'area': opts['area']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CsvExportStatus;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalysisSummary operation.
     * @callback module:api/AnalysisApi~getAnalysisSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Analysis detail
     * Get an Analysis detail
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:api/AnalysisApi~getAnalysisSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisDetail}
     */
    getAnalysisSummary(username, projectSlug, analysisSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAnalysisSummary");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getAnalysisSummary");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getAnalysisSummary");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisDetail;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrawlStatistics operation.
     * @callback module:api/AnalysisApi~getCrawlStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrawlStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return global statistics for an analysis
     * Return global statistics for an analysis
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:api/AnalysisApi~getCrawlStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrawlStatistics}
     */
    getCrawlStatistics(username, projectSlug, analysisSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getCrawlStatistics");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getCrawlStatistics");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getCrawlStatistics");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrawlStatistics;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrawlStatisticsByFrequency operation.
     * @callback module:api/AnalysisApi~getCrawlStatisticsByFrequencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrawlStatisticsTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min)
     * Return crawl statistics grouped by time frequency (1 min, 5 mins or 60 min) for an analysis
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:model/String} frequency Aggregation frequency
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] max number of elements to retrieve
     * @param {module:api/AnalysisApi~getCrawlStatisticsByFrequencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrawlStatisticsTime}
     */
    getCrawlStatisticsByFrequency(username, projectSlug, analysisSlug, frequency, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getCrawlStatisticsByFrequency");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getCrawlStatisticsByFrequency");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getCrawlStatisticsByFrequency");
      }
      // verify the required parameter 'frequency' is set
      if (frequency === undefined || frequency === null) {
        throw new Error("Missing the required parameter 'frequency' when calling getCrawlStatisticsByFrequency");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'limit': opts['limit'],
        'frequency': frequency
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrawlStatisticsTime;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrawlStatisticsUrls operation.
     * @callback module:api/AnalysisApi~getCrawlStatisticsUrlsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * Return a list of 1000 latest URLs crawled (all crawled URLs or only URLS with HTTP errors)
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:model/String} listType URLs list type (crawled URLs or error URLs)
     * @param {module:api/AnalysisApi~getCrawlStatisticsUrlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getCrawlStatisticsUrls(username, projectSlug, analysisSlug, listType, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getCrawlStatisticsUrls");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getCrawlStatisticsUrls");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getCrawlStatisticsUrls");
      }
      // verify the required parameter 'listType' is set
      if (listType === undefined || listType === null) {
        throw new Error("Missing the required parameter 'listType' when calling getCrawlStatisticsUrls");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug,
        'list_type': listType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/urls/{list_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGanalyticsOrphanURLs operation.
     * @callback module:api/AnalysisApi~getGanalyticsOrphanURLsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGanalyticsOrphanURLs200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Orphan URLs
     * List of Orphan URLs. URLs which generated visits from the selected source according to Google Analytics data, but were not crawled with by the Botify crawler (either because no links to them were found on the website, or because the crawler was not allowed to follow these links according to the project settings).   For a search engine (medium: origanic; sources: all, aol, ask, baidu, bing, google, naver, yahoo, yandex) or a social network (medium: social; sources: all, facebook, google+, linkedin, pinterest, reddit, tumblr, twitter)
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:model/String} medium Type of traffic, value: 'organic' (from search engine)or 'social' (from a social network)
     * @param {module:model/String} source Traffic source, value: name of the search engine or social network
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getGanalyticsOrphanURLsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGanalyticsOrphanURLs200Response}
     */
    getGanalyticsOrphanURLs(username, projectSlug, analysisSlug, medium, source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getGanalyticsOrphanURLs");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getGanalyticsOrphanURLs");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getGanalyticsOrphanURLs");
      }
      // verify the required parameter 'medium' is set
      if (medium === undefined || medium === null) {
        throw new Error("Missing the required parameter 'medium' when calling getGanalyticsOrphanURLs");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getGanalyticsOrphanURLs");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug,
        'medium': medium,
        'source': source
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGanalyticsOrphanURLs200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/ganalytics/orphan_urls/{medium}/{source}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinksPercentiles operation.
     * @callback module:api/AnalysisApi~getLinksPercentilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LinksPercentiles} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get inlinks percentiles
     * Get inlinks percentiles
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:api/AnalysisApi~getLinksPercentilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LinksPercentiles}
     */
    getLinksPercentiles(username, projectSlug, analysisSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getLinksPercentiles");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getLinksPercentiles");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getLinksPercentiles");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LinksPercentiles;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/links/percentiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinksTopDomains operation.
     * @callback module:api/AnalysisApi~getLinksTopDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLinksTopDomains200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top domains
     * Top domains
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getLinksTopDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLinksTopDomains200Response}
     */
    getLinksTopDomains(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getLinksTopDomains");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getLinksTopDomains");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getLinksTopDomains");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLinksTopDomains200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinksTopSubdomains operation.
     * @callback module:api/AnalysisApi~getLinksTopSubdomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLinksTopDomains200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Top subddomains
     * Top subddomains
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getLinksTopSubdomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLinksTopDomains200Response}
     */
    getLinksTopSubdomains(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getLinksTopSubdomains");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getLinksTopSubdomains");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getLinksTopSubdomains");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLinksTopDomains200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/subdomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPageRankLost operation.
     * @callback module:api/AnalysisApi~getPageRankLostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageRankLost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lost pagerank
     * Lost pagerank
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:api/AnalysisApi~getPageRankLostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageRankLost}
     */
    getPageRankLost(username, projectSlug, analysisSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPageRankLost");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getPageRankLost");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getPageRankLost");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageRankLost;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/pagerank/lost', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitemapsReport operation.
     * @callback module:api/AnalysisApi~getSitemapsReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SitemapsReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc
     * Get global information of the sitemaps found (sitemaps indexes, invalid sitemaps urls, etc.)
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {module:api/AnalysisApi~getSitemapsReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SitemapsReport}
     */
    getSitemapsReport(username, projectSlug, analysisSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSitemapsReport");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getSitemapsReport");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getSitemapsReport");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SitemapsReport;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitemapsSamplesOutOfConfig operation.
     * @callback module:api/AnalysisApi~getSitemapsSamplesOutOfConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSitemapsSamplesOutOfConfig200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample list of URLs which were found in your sitemaps but outside of the
     * Sample list of URLs which were found in your sitemaps but outside of the crawl perimeter defined for the project, for instance domain/subdomain or protocol (HTTP/HTTPS) not allowed in the crawl settings.
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getSitemapsSamplesOutOfConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSitemapsSamplesOutOfConfig200Response}
     */
    getSitemapsSamplesOutOfConfig(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSitemapsSamplesOutOfConfig");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getSitemapsSamplesOutOfConfig");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getSitemapsSamplesOutOfConfig");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSitemapsSamplesOutOfConfig200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/out_of_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSitemapsSamplesSitemapsOnly operation.
     * @callback module:api/AnalysisApi~getSitemapsSamplesSitemapsOnlyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSitemapsSamplesOutOfConfig200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sample list of URLs which were found in your sitemaps, within the project
     * Sample list of URLs which were found in your sitemaps, within the project allowed scope (allowed domains/subdomains/protocols), but not found by the Botify crawler.
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getSitemapsSamplesSitemapsOnlyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSitemapsSamplesOutOfConfig200Response}
     */
    getSitemapsSamplesSitemapsOnly(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSitemapsSamplesSitemapsOnly");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getSitemapsSamplesSitemapsOnly");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getSitemapsSamplesSitemapsOnly");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSitemapsSamplesOutOfConfig200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/sitemap_only', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlDetail operation.
     * @callback module:api/AnalysisApi~getUrlDetailCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the detail of an URL for an analysis
     * Gets the detail of an URL for an analysis
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {String} url (Urlencoded) Searched URL
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] comma separated list of fields to return (c.f. URLs Datamodel)
     * @param {module:api/AnalysisApi~getUrlDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getUrlDetail(username, projectSlug, analysisSlug, url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlDetail");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlDetail");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlDetail");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling getUrlDetail");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug,
        'url': url
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/{url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrls operation.
     * @callback module:api/AnalysisApi~getUrlsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUrls200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes a query and returns a paginated response
     * Executes a query and returns a paginated response
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] Analysis context to execute the query
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:model/UrlsQuery} [urlsQuery] 
     * @param {module:api/AnalysisApi~getUrlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUrls200Response}
     */
    getUrls(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['urlsQuery'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrls");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrls");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrls");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'area': opts['area'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetUrls200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlsAggs operation.
     * @callback module:api/AnalysisApi~getUrlsAggsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query aggregator
     * Query aggregator. It accepts multiple queries
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] 
     * @param {Array.<module:model/UrlsAggsQuery>} [urlsAggsQuery] 
     * @param {module:api/AnalysisApi~getUrlsAggsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getUrlsAggs(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['urlsAggsQuery'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlsAggs");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlsAggs");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlsAggs");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'area': opts['area']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/aggs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlsDatamodel operation.
     * @callback module:api/AnalysisApi~getUrlsDatamodelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CrawlDatamodel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Analysis datamodel
     * Gets an Analysis datamodel
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] 
     * @param {module:api/AnalysisApi~getUrlsDatamodelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CrawlDatamodel}
     */
    getUrlsDatamodel(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlsDatamodel");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlsDatamodel");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlsDatamodel");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'area': opts['area']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CrawlDatamodel;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/datamodel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlsExportStatus operation.
     * @callback module:api/AnalysisApi~getUrlsExportStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CsvExportStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the status of an CSVUrlExportJob object
     * Checks the status of an CSVUrlExportJob object. Returns json object with the status.
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {String} urlExportId Url Export ID
     * @param {module:api/AnalysisApi~getUrlsExportStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CsvExportStatus}
     */
    getUrlsExportStatus(username, projectSlug, analysisSlug, urlExportId, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlsExportStatus");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlsExportStatus");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlsExportStatus");
      }
      // verify the required parameter 'urlExportId' is set
      if (urlExportId === undefined || urlExportId === null) {
        throw new Error("Missing the required parameter 'urlExportId' when calling getUrlsExportStatus");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug,
        'url_export_id': urlExportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CsvExportStatus;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export/{url_export_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlsExports operation.
     * @callback module:api/AnalysisApi~getUrlsExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUrlsExports200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of the CSV Exports requests and their current status
     * A list of the CSV Exports requests and their current status
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/AnalysisApi~getUrlsExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUrlsExports200Response}
     */
    getUrlsExports(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlsExports");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlsExports");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlsExports");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUrlsExports200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUrlsSuggestedFilters operation.
     * @callback module:api/AnalysisApi~getUrlsSuggestedFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlsAggsQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return most frequent segments (= suggested patterns in the previous version)
     * Return most frequent segments (= suggested patterns in the previous version) for a Botify Query.
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} analysisSlug Analysis' identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] 
     * @param {module:model/UrlsAggsQuery} [urlsAggsQuery] 
     * @param {module:api/AnalysisApi~getUrlsSuggestedFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlsAggsQuery}
     */
    getUrlsSuggestedFilters(username, projectSlug, analysisSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['urlsAggsQuery'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUrlsSuggestedFilters");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getUrlsSuggestedFilters");
      }
      // verify the required parameter 'analysisSlug' is set
      if (analysisSlug === undefined || analysisSlug === null) {
        throw new Error("Missing the required parameter 'analysisSlug' when calling getUrlsSuggestedFilters");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'analysis_slug': analysisSlug
      };
      let queryParams = {
        'area': opts['area']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UrlsAggsQuery;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}/{analysis_slug}/urls/suggested_filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
