/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultPayload from '../model/DefaultPayload';
import GetProjectAnalyses200Response from '../model/GetProjectAnalyses200Response';
import GetSavedFilters200Response from '../model/GetSavedFilters200Response';
import ProjectSavedFilter from '../model/ProjectSavedFilter';
import URLRewritingRulesSerializer from '../model/URLRewritingRulesSerializer';
import UrlsAggsQuery from '../model/UrlsAggsQuery';

/**
* Project service.
* @module api/ProjectApi
* @version 1.0.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProjectAnalyses operation.
     * @callback module:api/ProjectApi~getProjectAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectAnalyses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all analyses for a project
     * List all analyses for a project
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/ProjectApi~getProjectAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectAnalyses200Response}
     */
    getProjectAnalyses(username, projectSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getProjectAnalyses");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectAnalyses");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProjectAnalyses200Response;
      return this.apiClient.callApi(
        '/analyses/{username}/{project_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectUrlsAggs operation.
     * @callback module:api/ProjectApi~getProjectUrlsAggsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Project Query aggregator
     * Project Query aggregator. It accepts multiple queries that will be executed on all completed analyses in the project
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [area = 'current')] Analysis context to execute the queries
     * @param {String} [lastAnalysisSlug] Last analysis on the trend
     * @param {Number} [nbAnalyses = 20)] Max number of analysis to return
     * @param {Array.<module:model/UrlsAggsQuery>} [urlsAggsQuery] 
     * @param {module:api/ProjectApi~getProjectUrlsAggsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProjectUrlsAggs(username, projectSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['urlsAggsQuery'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getProjectUrlsAggs");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getProjectUrlsAggs");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug
      };
      let queryParams = {
        'area': opts['area'],
        'last_analysis_slug': opts['lastAnalysisSlug'],
        'nb_analyses': opts['nbAnalyses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{username}/{project_slug}/urls/aggs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSavedFilter operation.
     * @callback module:api/ProjectApi~getSavedFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSavedFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific saved filter's name, ID and filter value
     * Retrieves a specific saved filter's name, ID and filter value
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {String} identifier Saved Filter's identifier
     * @param {module:api/ProjectApi~getSavedFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSavedFilter}
     */
    getSavedFilter(username, projectSlug, identifier, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSavedFilter");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getSavedFilter");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling getSavedFilter");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug,
        'identifier': identifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectSavedFilter;
      return this.apiClient.callApi(
        '/projects/{username}/{project_slug}/filters/{identifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSavedFilters operation.
     * @callback module:api/ProjectApi~getSavedFiltersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSavedFilters200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the project's saved filters (each filter's name, ID and filter value)
     * List all the project's saved filters (each filter's name, ID and filter value)
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page Number
     * @param {Number} [size] Page Size
     * @param {module:api/ProjectApi~getSavedFiltersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSavedFilters200Response}
     */
    getSavedFilters(username, projectSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSavedFilters");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling getSavedFilters");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSavedFilters200Response;
      return this.apiClient.callApi(
        '/projects/{username}/{project_slug}/filters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testUrlRewritingRules operation.
     * @callback module:api/ProjectApi~testUrlRewritingRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/URLRewritingRulesSerializer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Match and replace parts of a URL based on rules passed in POST data
     * Match and replace parts of a URL based on rules passed in POST data.
     * @param {String} username User's identifier
     * @param {String} projectSlug Project's identifier
     * @param {module:api/ProjectApi~testUrlRewritingRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/URLRewritingRulesSerializer}
     */
    testUrlRewritingRules(username, projectSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling testUrlRewritingRules");
      }
      // verify the required parameter 'projectSlug' is set
      if (projectSlug === undefined || projectSlug === null) {
        throw new Error("Missing the required parameter 'projectSlug' when calling testUrlRewritingRules");
      }

      let pathParams = {
        'username': username,
        'project_slug': projectSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DjangoRestToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = URLRewritingRulesSerializer;
      return this.apiClient.callApi(
        '/projects/{username}/{project_slug}/features/url_rewriting/rules_validator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
