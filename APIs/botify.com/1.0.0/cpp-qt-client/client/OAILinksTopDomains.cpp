/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinksTopDomains.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinksTopDomains::OAILinksTopDomains(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinksTopDomains::OAILinksTopDomains() {
    this->initializeModel();
}

OAILinksTopDomains::~OAILinksTopDomains() {}

void OAILinksTopDomains::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_follow_links_isSet = false;
    m_follow_links_isValid = false;

    m_follow_samples_isSet = false;
    m_follow_samples_isValid = false;

    m_nofollow_links_isSet = false;
    m_nofollow_links_isValid = false;

    m_nofollow_samples_isSet = false;
    m_nofollow_samples_isValid = false;

    m_unique_follow_links_isSet = false;
    m_unique_follow_links_isValid = false;

    m_unique_nofollow_links_isSet = false;
    m_unique_nofollow_links_isValid = false;
}

void OAILinksTopDomains::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinksTopDomains::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_follow_links_isValid = ::OpenAPI::fromJsonValue(m_follow_links, json[QString("follow_links")]);
    m_follow_links_isSet = !json[QString("follow_links")].isNull() && m_follow_links_isValid;

    m_follow_samples_isValid = ::OpenAPI::fromJsonValue(m_follow_samples, json[QString("follow_samples")]);
    m_follow_samples_isSet = !json[QString("follow_samples")].isNull() && m_follow_samples_isValid;

    m_nofollow_links_isValid = ::OpenAPI::fromJsonValue(m_nofollow_links, json[QString("nofollow_links")]);
    m_nofollow_links_isSet = !json[QString("nofollow_links")].isNull() && m_nofollow_links_isValid;

    m_nofollow_samples_isValid = ::OpenAPI::fromJsonValue(m_nofollow_samples, json[QString("nofollow_samples")]);
    m_nofollow_samples_isSet = !json[QString("nofollow_samples")].isNull() && m_nofollow_samples_isValid;

    m_unique_follow_links_isValid = ::OpenAPI::fromJsonValue(m_unique_follow_links, json[QString("unique_follow_links")]);
    m_unique_follow_links_isSet = !json[QString("unique_follow_links")].isNull() && m_unique_follow_links_isValid;

    m_unique_nofollow_links_isValid = ::OpenAPI::fromJsonValue(m_unique_nofollow_links, json[QString("unique_nofollow_links")]);
    m_unique_nofollow_links_isSet = !json[QString("unique_nofollow_links")].isNull() && m_unique_nofollow_links_isValid;
}

QString OAILinksTopDomains::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinksTopDomains::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_follow_links_isSet) {
        obj.insert(QString("follow_links"), ::OpenAPI::toJsonValue(m_follow_links));
    }
    if (m_follow_samples.size() > 0) {
        obj.insert(QString("follow_samples"), ::OpenAPI::toJsonValue(m_follow_samples));
    }
    if (m_nofollow_links_isSet) {
        obj.insert(QString("nofollow_links"), ::OpenAPI::toJsonValue(m_nofollow_links));
    }
    if (m_nofollow_samples.size() > 0) {
        obj.insert(QString("nofollow_samples"), ::OpenAPI::toJsonValue(m_nofollow_samples));
    }
    if (m_unique_follow_links_isSet) {
        obj.insert(QString("unique_follow_links"), ::OpenAPI::toJsonValue(m_unique_follow_links));
    }
    if (m_unique_nofollow_links_isSet) {
        obj.insert(QString("unique_nofollow_links"), ::OpenAPI::toJsonValue(m_unique_nofollow_links));
    }
    return obj;
}

QString OAILinksTopDomains::getDomain() const {
    return m_domain;
}
void OAILinksTopDomains::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAILinksTopDomains::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAILinksTopDomains::is_domain_Valid() const{
    return m_domain_isValid;
}

qint64 OAILinksTopDomains::getFollowLinks() const {
    return m_follow_links;
}
void OAILinksTopDomains::setFollowLinks(const qint64 &follow_links) {
    m_follow_links = follow_links;
    m_follow_links_isSet = true;
}

bool OAILinksTopDomains::is_follow_links_Set() const{
    return m_follow_links_isSet;
}

bool OAILinksTopDomains::is_follow_links_Valid() const{
    return m_follow_links_isValid;
}

QList<OAILinksTopDomainsSamples> OAILinksTopDomains::getFollowSamples() const {
    return m_follow_samples;
}
void OAILinksTopDomains::setFollowSamples(const QList<OAILinksTopDomainsSamples> &follow_samples) {
    m_follow_samples = follow_samples;
    m_follow_samples_isSet = true;
}

bool OAILinksTopDomains::is_follow_samples_Set() const{
    return m_follow_samples_isSet;
}

bool OAILinksTopDomains::is_follow_samples_Valid() const{
    return m_follow_samples_isValid;
}

qint64 OAILinksTopDomains::getNofollowLinks() const {
    return m_nofollow_links;
}
void OAILinksTopDomains::setNofollowLinks(const qint64 &nofollow_links) {
    m_nofollow_links = nofollow_links;
    m_nofollow_links_isSet = true;
}

bool OAILinksTopDomains::is_nofollow_links_Set() const{
    return m_nofollow_links_isSet;
}

bool OAILinksTopDomains::is_nofollow_links_Valid() const{
    return m_nofollow_links_isValid;
}

QList<OAILinksTopDomainsSamples> OAILinksTopDomains::getNofollowSamples() const {
    return m_nofollow_samples;
}
void OAILinksTopDomains::setNofollowSamples(const QList<OAILinksTopDomainsSamples> &nofollow_samples) {
    m_nofollow_samples = nofollow_samples;
    m_nofollow_samples_isSet = true;
}

bool OAILinksTopDomains::is_nofollow_samples_Set() const{
    return m_nofollow_samples_isSet;
}

bool OAILinksTopDomains::is_nofollow_samples_Valid() const{
    return m_nofollow_samples_isValid;
}

qint64 OAILinksTopDomains::getUniqueFollowLinks() const {
    return m_unique_follow_links;
}
void OAILinksTopDomains::setUniqueFollowLinks(const qint64 &unique_follow_links) {
    m_unique_follow_links = unique_follow_links;
    m_unique_follow_links_isSet = true;
}

bool OAILinksTopDomains::is_unique_follow_links_Set() const{
    return m_unique_follow_links_isSet;
}

bool OAILinksTopDomains::is_unique_follow_links_Valid() const{
    return m_unique_follow_links_isValid;
}

qint64 OAILinksTopDomains::getUniqueNofollowLinks() const {
    return m_unique_nofollow_links;
}
void OAILinksTopDomains::setUniqueNofollowLinks(const qint64 &unique_nofollow_links) {
    m_unique_nofollow_links = unique_nofollow_links;
    m_unique_nofollow_links_isSet = true;
}

bool OAILinksTopDomains::is_unique_nofollow_links_Set() const{
    return m_unique_nofollow_links_isSet;
}

bool OAILinksTopDomains::is_unique_nofollow_links_Valid() const{
    return m_unique_nofollow_links_isValid;
}

bool OAILinksTopDomains::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nofollow_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nofollow_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_follow_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_nofollow_links_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinksTopDomains::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_follow_links_isValid && m_follow_samples_isValid && m_nofollow_links_isValid && m_nofollow_samples_isValid && m_unique_follow_links_isValid && m_unique_nofollow_links_isValid && true;
}

} // namespace OpenAPI
