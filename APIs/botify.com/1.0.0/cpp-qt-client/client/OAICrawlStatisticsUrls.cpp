/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlStatisticsUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlStatisticsUrls::OAICrawlStatisticsUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlStatisticsUrls::OAICrawlStatisticsUrls() {
    this->initializeModel();
}

OAICrawlStatisticsUrls::~OAICrawlStatisticsUrls() {}

void OAICrawlStatisticsUrls::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_delay_first_byte_isSet = false;
    m_delay_first_byte_isValid = false;

    m_delay_last_byte_isSet = false;
    m_delay_last_byte_isValid = false;

    m_gzip_isSet = false;
    m_gzip_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_redirects_to_isSet = false;
    m_redirects_to_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICrawlStatisticsUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlStatisticsUrls::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_delay_first_byte_isValid = ::OpenAPI::fromJsonValue(m_delay_first_byte, json[QString("delay_first_byte")]);
    m_delay_first_byte_isSet = !json[QString("delay_first_byte")].isNull() && m_delay_first_byte_isValid;

    m_delay_last_byte_isValid = ::OpenAPI::fromJsonValue(m_delay_last_byte, json[QString("delay_last_byte")]);
    m_delay_last_byte_isSet = !json[QString("delay_last_byte")].isNull() && m_delay_last_byte_isValid;

    m_gzip_isValid = ::OpenAPI::fromJsonValue(m_gzip, json[QString("gzip")]);
    m_gzip_isSet = !json[QString("gzip")].isNull() && m_gzip_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_redirects_to_isValid = ::OpenAPI::fromJsonValue(m_redirects_to, json[QString("redirects_to")]);
    m_redirects_to_isSet = !json[QString("redirects_to")].isNull() && m_redirects_to_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICrawlStatisticsUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlStatisticsUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_delay_first_byte_isSet) {
        obj.insert(QString("delay_first_byte"), ::OpenAPI::toJsonValue(m_delay_first_byte));
    }
    if (m_delay_last_byte_isSet) {
        obj.insert(QString("delay_last_byte"), ::OpenAPI::toJsonValue(m_delay_last_byte));
    }
    if (m_gzip_isSet) {
        obj.insert(QString("gzip"), ::OpenAPI::toJsonValue(m_gzip));
    }
    if (m_http_isSet) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_redirects_to_isSet) {
        obj.insert(QString("redirects_to"), ::OpenAPI::toJsonValue(m_redirects_to));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICrawlStatisticsUrls::getContentType() const {
    return m_content_type;
}
void OAICrawlStatisticsUrls::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICrawlStatisticsUrls::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICrawlStatisticsUrls::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAICrawlStatisticsUrls::getDate() const {
    return m_date;
}
void OAICrawlStatisticsUrls::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICrawlStatisticsUrls::is_date_Set() const{
    return m_date_isSet;
}

bool OAICrawlStatisticsUrls::is_date_Valid() const{
    return m_date_isValid;
}

qint64 OAICrawlStatisticsUrls::getDelayFirstByte() const {
    return m_delay_first_byte;
}
void OAICrawlStatisticsUrls::setDelayFirstByte(const qint64 &delay_first_byte) {
    m_delay_first_byte = delay_first_byte;
    m_delay_first_byte_isSet = true;
}

bool OAICrawlStatisticsUrls::is_delay_first_byte_Set() const{
    return m_delay_first_byte_isSet;
}

bool OAICrawlStatisticsUrls::is_delay_first_byte_Valid() const{
    return m_delay_first_byte_isValid;
}

qint64 OAICrawlStatisticsUrls::getDelayLastByte() const {
    return m_delay_last_byte;
}
void OAICrawlStatisticsUrls::setDelayLastByte(const qint64 &delay_last_byte) {
    m_delay_last_byte = delay_last_byte;
    m_delay_last_byte_isSet = true;
}

bool OAICrawlStatisticsUrls::is_delay_last_byte_Set() const{
    return m_delay_last_byte_isSet;
}

bool OAICrawlStatisticsUrls::is_delay_last_byte_Valid() const{
    return m_delay_last_byte_isValid;
}

bool OAICrawlStatisticsUrls::isGzip() const {
    return m_gzip;
}
void OAICrawlStatisticsUrls::setGzip(const bool &gzip) {
    m_gzip = gzip;
    m_gzip_isSet = true;
}

bool OAICrawlStatisticsUrls::is_gzip_Set() const{
    return m_gzip_isSet;
}

bool OAICrawlStatisticsUrls::is_gzip_Valid() const{
    return m_gzip_isValid;
}

qint64 OAICrawlStatisticsUrls::getHttp() const {
    return m_http;
}
void OAICrawlStatisticsUrls::setHttp(const qint64 &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAICrawlStatisticsUrls::is_http_Set() const{
    return m_http_isSet;
}

bool OAICrawlStatisticsUrls::is_http_Valid() const{
    return m_http_isValid;
}

qint64 OAICrawlStatisticsUrls::getLength() const {
    return m_length;
}
void OAICrawlStatisticsUrls::setLength(const qint64 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAICrawlStatisticsUrls::is_length_Set() const{
    return m_length_isSet;
}

bool OAICrawlStatisticsUrls::is_length_Valid() const{
    return m_length_isValid;
}

QString OAICrawlStatisticsUrls::getRedirectsTo() const {
    return m_redirects_to;
}
void OAICrawlStatisticsUrls::setRedirectsTo(const QString &redirects_to) {
    m_redirects_to = redirects_to;
    m_redirects_to_isSet = true;
}

bool OAICrawlStatisticsUrls::is_redirects_to_Set() const{
    return m_redirects_to_isSet;
}

bool OAICrawlStatisticsUrls::is_redirects_to_Valid() const{
    return m_redirects_to_isValid;
}

QString OAICrawlStatisticsUrls::getUrl() const {
    return m_url;
}
void OAICrawlStatisticsUrls::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICrawlStatisticsUrls::is_url_Set() const{
    return m_url_isSet;
}

bool OAICrawlStatisticsUrls::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICrawlStatisticsUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_first_byte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_last_byte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gzip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirects_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlStatisticsUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && m_date_isValid && m_delay_first_byte_isValid && m_delay_last_byte_isValid && m_gzip_isValid && m_http_isValid && m_length_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
