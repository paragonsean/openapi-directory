/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlOrphanURLs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlOrphanURLs::OAICrawlOrphanURLs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlOrphanURLs::OAICrawlOrphanURLs() {
    this->initializeModel();
}

OAICrawlOrphanURLs::~OAICrawlOrphanURLs() {}

void OAICrawlOrphanURLs::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_visits_isSet = false;
    m_visits_isValid = false;
}

void OAICrawlOrphanURLs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlOrphanURLs::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visits_isValid = ::OpenAPI::fromJsonValue(m_visits, json[QString("visits")]);
    m_visits_isSet = !json[QString("visits")].isNull() && m_visits_isValid;
}

QString OAICrawlOrphanURLs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlOrphanURLs::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visits_isSet) {
        obj.insert(QString("visits"), ::OpenAPI::toJsonValue(m_visits));
    }
    return obj;
}

QString OAICrawlOrphanURLs::getUrl() const {
    return m_url;
}
void OAICrawlOrphanURLs::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICrawlOrphanURLs::is_url_Set() const{
    return m_url_isSet;
}

bool OAICrawlOrphanURLs::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAICrawlOrphanURLs::getVisits() const {
    return m_visits;
}
void OAICrawlOrphanURLs::setVisits(const qint64 &visits) {
    m_visits = visits;
    m_visits_isSet = true;
}

bool OAICrawlOrphanURLs::is_visits_Set() const{
    return m_visits_isSet;
}

bool OAICrawlOrphanURLs::is_visits_Valid() const{
    return m_visits_isValid;
}

bool OAICrawlOrphanURLs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visits_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlOrphanURLs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && m_visits_isValid && true;
}

} // namespace OpenAPI
