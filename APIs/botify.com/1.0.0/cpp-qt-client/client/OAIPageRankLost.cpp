/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageRankLost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageRankLost::OAIPageRankLost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageRankLost::OAIPageRankLost() {
    this->initializeModel();
}

OAIPageRankLost::~OAIPageRankLost() {}

void OAIPageRankLost::initializeModel() {

    m_external_isSet = false;
    m_external_isValid = false;

    m_non_crawled_isSet = false;
    m_non_crawled_isValid = false;

    m_robots_txt_isSet = false;
    m_robots_txt_isValid = false;
}

void OAIPageRankLost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageRankLost::fromJsonObject(QJsonObject json) {

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_non_crawled_isValid = ::OpenAPI::fromJsonValue(m_non_crawled, json[QString("non_crawled")]);
    m_non_crawled_isSet = !json[QString("non_crawled")].isNull() && m_non_crawled_isValid;

    m_robots_txt_isValid = ::OpenAPI::fromJsonValue(m_robots_txt, json[QString("robots_txt")]);
    m_robots_txt_isSet = !json[QString("robots_txt")].isNull() && m_robots_txt_isValid;
}

QString OAIPageRankLost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageRankLost::asJsonObject() const {
    QJsonObject obj;
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_non_crawled_isSet) {
        obj.insert(QString("non_crawled"), ::OpenAPI::toJsonValue(m_non_crawled));
    }
    if (m_robots_txt_isSet) {
        obj.insert(QString("robots_txt"), ::OpenAPI::toJsonValue(m_robots_txt));
    }
    return obj;
}

float OAIPageRankLost::getExternal() const {
    return m_external;
}
void OAIPageRankLost::setExternal(const float &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIPageRankLost::is_external_Set() const{
    return m_external_isSet;
}

bool OAIPageRankLost::is_external_Valid() const{
    return m_external_isValid;
}

float OAIPageRankLost::getNonCrawled() const {
    return m_non_crawled;
}
void OAIPageRankLost::setNonCrawled(const float &non_crawled) {
    m_non_crawled = non_crawled;
    m_non_crawled_isSet = true;
}

bool OAIPageRankLost::is_non_crawled_Set() const{
    return m_non_crawled_isSet;
}

bool OAIPageRankLost::is_non_crawled_Valid() const{
    return m_non_crawled_isValid;
}

float OAIPageRankLost::getRobotsTxt() const {
    return m_robots_txt;
}
void OAIPageRankLost::setRobotsTxt(const float &robots_txt) {
    m_robots_txt = robots_txt;
    m_robots_txt_isSet = true;
}

bool OAIPageRankLost::is_robots_txt_Set() const{
    return m_robots_txt_isSet;
}

bool OAIPageRankLost::is_robots_txt_Valid() const{
    return m_robots_txt_isValid;
}

bool OAIPageRankLost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_crawled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_robots_txt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageRankLost::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_external_isValid && m_non_crawled_isValid && m_robots_txt_isValid && true;
}

} // namespace OpenAPI
