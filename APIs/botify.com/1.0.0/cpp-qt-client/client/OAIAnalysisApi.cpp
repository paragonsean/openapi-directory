/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAnalysisApi::OAIAnalysisApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAnalysisApi::~OAIAnalysisApi() {
}

void OAIAnalysisApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.botify.com/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createUrlsExport", defaultConf);
    _serverIndices.insert("createUrlsExport", 0);
    _serverConfigs.insert("getAnalysisSummary", defaultConf);
    _serverIndices.insert("getAnalysisSummary", 0);
    _serverConfigs.insert("getCrawlStatistics", defaultConf);
    _serverIndices.insert("getCrawlStatistics", 0);
    _serverConfigs.insert("getCrawlStatisticsByFrequency", defaultConf);
    _serverIndices.insert("getCrawlStatisticsByFrequency", 0);
    _serverConfigs.insert("getCrawlStatisticsUrls", defaultConf);
    _serverIndices.insert("getCrawlStatisticsUrls", 0);
    _serverConfigs.insert("getGanalyticsOrphanURLs", defaultConf);
    _serverIndices.insert("getGanalyticsOrphanURLs", 0);
    _serverConfigs.insert("getLinksPercentiles", defaultConf);
    _serverIndices.insert("getLinksPercentiles", 0);
    _serverConfigs.insert("getLinksTopDomains", defaultConf);
    _serverIndices.insert("getLinksTopDomains", 0);
    _serverConfigs.insert("getLinksTopSubdomains", defaultConf);
    _serverIndices.insert("getLinksTopSubdomains", 0);
    _serverConfigs.insert("getPageRankLost", defaultConf);
    _serverIndices.insert("getPageRankLost", 0);
    _serverConfigs.insert("getSitemapsReport", defaultConf);
    _serverIndices.insert("getSitemapsReport", 0);
    _serverConfigs.insert("getSitemapsSamplesOutOfConfig", defaultConf);
    _serverIndices.insert("getSitemapsSamplesOutOfConfig", 0);
    _serverConfigs.insert("getSitemapsSamplesSitemapsOnly", defaultConf);
    _serverIndices.insert("getSitemapsSamplesSitemapsOnly", 0);
    _serverConfigs.insert("getUrlDetail", defaultConf);
    _serverIndices.insert("getUrlDetail", 0);
    _serverConfigs.insert("getUrls", defaultConf);
    _serverIndices.insert("getUrls", 0);
    _serverConfigs.insert("getUrlsAggs", defaultConf);
    _serverIndices.insert("getUrlsAggs", 0);
    _serverConfigs.insert("getUrlsDatamodel", defaultConf);
    _serverIndices.insert("getUrlsDatamodel", 0);
    _serverConfigs.insert("getUrlsExportStatus", defaultConf);
    _serverIndices.insert("getUrlsExportStatus", 0);
    _serverConfigs.insert("getUrlsExports", defaultConf);
    _serverIndices.insert("getUrlsExports", 0);
    _serverConfigs.insert("getUrlsSuggestedFilters", defaultConf);
    _serverIndices.insert("getUrlsSuggestedFilters", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAnalysisApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAnalysisApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAnalysisApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAnalysisApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAnalysisApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAnalysisApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAnalysisApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAnalysisApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAnalysisApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAnalysisApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnalysisApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnalysisApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAnalysisApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAnalysisApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAnalysisApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAnalysisApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAnalysisApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAnalysisApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAnalysisApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAnalysisApi::createUrlsExport(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area, const ::OpenAPI::OptionalParam<OAIUrlsQuery> &oai_urls_query) {
    QString fullPath = QString(_serverConfigs["createUrlsExport"][_serverIndices.value("createUrlsExport")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/export");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "area", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("area")).append(querySuffix).append(QUrl::toPercentEncoding(area.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_urls_query.hasValue()){

        
        QByteArray output = oai_urls_query.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::createUrlsExportCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::createUrlsExportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICsvExportStatus output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createUrlsExportSignal(output);
        Q_EMIT createUrlsExportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createUrlsExportSignalE(output, error_type, error_str);
        Q_EMIT createUrlsExportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createUrlsExportSignalError(output, error_type, error_str);
        Q_EMIT createUrlsExportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getAnalysisSummary(const QString &username, const QString &project_slug, const QString &analysis_slug) {
    QString fullPath = QString(_serverConfigs["getAnalysisSummary"][_serverIndices.value("getAnalysisSummary")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getAnalysisSummaryCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getAnalysisSummaryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAnalysisDetail output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnalysisSummarySignal(output);
        Q_EMIT getAnalysisSummarySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnalysisSummarySignalE(output, error_type, error_str);
        Q_EMIT getAnalysisSummarySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnalysisSummarySignalError(output, error_type, error_str);
        Q_EMIT getAnalysisSummarySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getCrawlStatistics(const QString &username, const QString &project_slug, const QString &analysis_slug) {
    QString fullPath = QString(_serverConfigs["getCrawlStatistics"][_serverIndices.value("getCrawlStatistics")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getCrawlStatisticsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getCrawlStatisticsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrawlStatistics output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCrawlStatisticsSignal(output);
        Q_EMIT getCrawlStatisticsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCrawlStatisticsSignalE(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCrawlStatisticsSignalError(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getCrawlStatisticsByFrequency(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &frequency, const ::OpenAPI::OptionalParam<qint32> &limit) {
    QString fullPath = QString(_serverConfigs["getCrawlStatisticsByFrequency"][_serverIndices.value("getCrawlStatisticsByFrequency")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/time");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "frequency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("frequency")).append(querySuffix).append(QUrl::toPercentEncoding(frequency));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getCrawlStatisticsByFrequencyCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getCrawlStatisticsByFrequencyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrawlStatisticsTime output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCrawlStatisticsByFrequencySignal(output);
        Q_EMIT getCrawlStatisticsByFrequencySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCrawlStatisticsByFrequencySignalE(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsByFrequencySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCrawlStatisticsByFrequencySignalError(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsByFrequencySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getCrawlStatisticsUrls(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &list_type) {
    QString fullPath = QString(_serverConfigs["getCrawlStatisticsUrls"][_serverIndices.value("getCrawlStatisticsUrls")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/crawl_statistics/urls/{list_type}");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    
    {
        QString list_typePathParam("{");
        list_typePathParam.append("list_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "list_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"list_type"+pathSuffix : pathPrefix;
        fullPath.replace(list_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(list_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getCrawlStatisticsUrlsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getCrawlStatisticsUrlsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCrawlStatisticsUrlsSignal(output);
        Q_EMIT getCrawlStatisticsUrlsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCrawlStatisticsUrlsSignalE(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsUrlsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCrawlStatisticsUrlsSignalError(output, error_type, error_str);
        Q_EMIT getCrawlStatisticsUrlsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getGanalyticsOrphanURLs(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &medium, const QString &source, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getGanalyticsOrphanURLs"][_serverIndices.value("getGanalyticsOrphanURLs")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/ganalytics/orphan_urls/{medium}/{source}");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    
    {
        QString mediumPathParam("{");
        mediumPathParam.append("medium").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "medium", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"medium"+pathSuffix : pathPrefix;
        fullPath.replace(mediumPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(medium)));
    }
    
    {
        QString sourcePathParam("{");
        sourcePathParam.append("source").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "source", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"source"+pathSuffix : pathPrefix;
        fullPath.replace(sourcePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(source)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getGanalyticsOrphanURLsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getGanalyticsOrphanURLsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetGanalyticsOrphanURLs_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGanalyticsOrphanURLsSignal(output);
        Q_EMIT getGanalyticsOrphanURLsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGanalyticsOrphanURLsSignalE(output, error_type, error_str);
        Q_EMIT getGanalyticsOrphanURLsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGanalyticsOrphanURLsSignalError(output, error_type, error_str);
        Q_EMIT getGanalyticsOrphanURLsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getLinksPercentiles(const QString &username, const QString &project_slug, const QString &analysis_slug) {
    QString fullPath = QString(_serverConfigs["getLinksPercentiles"][_serverIndices.value("getLinksPercentiles")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/links/percentiles");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getLinksPercentilesCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getLinksPercentilesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinksPercentiles output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLinksPercentilesSignal(output);
        Q_EMIT getLinksPercentilesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLinksPercentilesSignalE(output, error_type, error_str);
        Q_EMIT getLinksPercentilesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLinksPercentilesSignalError(output, error_type, error_str);
        Q_EMIT getLinksPercentilesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getLinksTopDomains(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getLinksTopDomains"][_serverIndices.value("getLinksTopDomains")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/domains");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getLinksTopDomainsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getLinksTopDomainsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetLinksTopDomains_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLinksTopDomainsSignal(output);
        Q_EMIT getLinksTopDomainsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLinksTopDomainsSignalE(output, error_type, error_str);
        Q_EMIT getLinksTopDomainsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLinksTopDomainsSignalError(output, error_type, error_str);
        Q_EMIT getLinksTopDomainsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getLinksTopSubdomains(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getLinksTopSubdomains"][_serverIndices.value("getLinksTopSubdomains")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/top_domains/subdomains");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getLinksTopSubdomainsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getLinksTopSubdomainsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetLinksTopDomains_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLinksTopSubdomainsSignal(output);
        Q_EMIT getLinksTopSubdomainsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLinksTopSubdomainsSignalE(output, error_type, error_str);
        Q_EMIT getLinksTopSubdomainsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLinksTopSubdomainsSignalError(output, error_type, error_str);
        Q_EMIT getLinksTopSubdomainsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getPageRankLost(const QString &username, const QString &project_slug, const QString &analysis_slug) {
    QString fullPath = QString(_serverConfigs["getPageRankLost"][_serverIndices.value("getPageRankLost")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/pagerank/lost");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getPageRankLostCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getPageRankLostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPageRankLost output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getPageRankLostSignal(output);
        Q_EMIT getPageRankLostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getPageRankLostSignalE(output, error_type, error_str);
        Q_EMIT getPageRankLostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getPageRankLostSignalError(output, error_type, error_str);
        Q_EMIT getPageRankLostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getSitemapsReport(const QString &username, const QString &project_slug, const QString &analysis_slug) {
    QString fullPath = QString(_serverConfigs["getSitemapsReport"][_serverIndices.value("getSitemapsReport")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/report");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getSitemapsReportCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getSitemapsReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISitemapsReport output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSitemapsReportSignal(output);
        Q_EMIT getSitemapsReportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSitemapsReportSignalE(output, error_type, error_str);
        Q_EMIT getSitemapsReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSitemapsReportSignalError(output, error_type, error_str);
        Q_EMIT getSitemapsReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getSitemapsSamplesOutOfConfig(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getSitemapsSamplesOutOfConfig"][_serverIndices.value("getSitemapsSamplesOutOfConfig")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/out_of_config");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getSitemapsSamplesOutOfConfigCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getSitemapsSamplesOutOfConfigCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetSitemapsSamplesOutOfConfig_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSitemapsSamplesOutOfConfigSignal(output);
        Q_EMIT getSitemapsSamplesOutOfConfigSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSitemapsSamplesOutOfConfigSignalE(output, error_type, error_str);
        Q_EMIT getSitemapsSamplesOutOfConfigSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSitemapsSamplesOutOfConfigSignalError(output, error_type, error_str);
        Q_EMIT getSitemapsSamplesOutOfConfigSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getSitemapsSamplesSitemapsOnly(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getSitemapsSamplesSitemapsOnly"][_serverIndices.value("getSitemapsSamplesSitemapsOnly")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/features/sitemaps/samples/sitemap_only");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getSitemapsSamplesSitemapsOnlyCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getSitemapsSamplesSitemapsOnlyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetSitemapsSamplesOutOfConfig_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSitemapsSamplesSitemapsOnlySignal(output);
        Q_EMIT getSitemapsSamplesSitemapsOnlySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSitemapsSamplesSitemapsOnlySignalE(output, error_type, error_str);
        Q_EMIT getSitemapsSamplesSitemapsOnlySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSitemapsSamplesSitemapsOnlySignalError(output, error_type, error_str);
        Q_EMIT getSitemapsSamplesSitemapsOnlySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlDetail(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &url, const ::OpenAPI::OptionalParam<QList<QString>> &fields) {
    QString fullPath = QString(_serverConfigs["getUrlDetail"][_serverIndices.value("getUrlDetail")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/{url}");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    
    {
        QString urlPathParam("{");
        urlPathParam.append("url").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "url", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"url"+pathSuffix : pathPrefix;
        fullPath.replace(urlPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(url)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (fields.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fields", false);
        if (fields.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : fields.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("fields=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("fields").append(querySuffix);
                qint32 count = 0;
                for (QString t : fields.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("fields").append(querySuffix);
                qint32 count = 0;
                for (QString t : fields.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("fields").append(querySuffix);
                qint32 count = 0;
                for (QString t : fields.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("fields").append(querySuffix);
                qint32 count = 0;
                for (QString t : fields.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("fields").append(querySuffix);
                qint32 count = 0;
                for (QString t : fields.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlDetailCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlDetailSignal(output);
        Q_EMIT getUrlDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlDetailSignalE(output, error_type, error_str);
        Q_EMIT getUrlDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlDetailSignalError(output, error_type, error_str);
        Q_EMIT getUrlDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrls(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size, const ::OpenAPI::OptionalParam<OAIUrlsQuery> &oai_urls_query) {
    QString fullPath = QString(_serverConfigs["getUrls"][_serverIndices.value("getUrls")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "area", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("area")).append(querySuffix).append(QUrl::toPercentEncoding(area.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_urls_query.hasValue()){

        
        QByteArray output = oai_urls_query.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetUrls_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsSignal(output);
        Q_EMIT getUrlsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsSignalE(output, error_type, error_str);
        Q_EMIT getUrlsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsSignalError(output, error_type, error_str);
        Q_EMIT getUrlsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlsAggs(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area, const ::OpenAPI::OptionalParam<QList<OAIUrlsAggsQuery>> &oai_urls_aggs_query) {
    QString fullPath = QString(_serverConfigs["getUrlsAggs"][_serverIndices.value("getUrlsAggs")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/aggs");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "area", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("area")).append(querySuffix).append(QUrl::toPercentEncoding(area.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_urls_aggs_query.hasValue()){
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_urls_aggs_query.value()).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsAggsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsAggsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QJsonValue> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QJsonValue val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsAggsSignal(output);
        Q_EMIT getUrlsAggsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsAggsSignalE(output, error_type, error_str);
        Q_EMIT getUrlsAggsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsAggsSignalError(output, error_type, error_str);
        Q_EMIT getUrlsAggsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlsDatamodel(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area) {
    QString fullPath = QString(_serverConfigs["getUrlsDatamodel"][_serverIndices.value("getUrlsDatamodel")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/datamodel");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "area", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("area")).append(querySuffix).append(QUrl::toPercentEncoding(area.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsDatamodelCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsDatamodelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrawlDatamodel output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsDatamodelSignal(output);
        Q_EMIT getUrlsDatamodelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsDatamodelSignalE(output, error_type, error_str);
        Q_EMIT getUrlsDatamodelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsDatamodelSignalError(output, error_type, error_str);
        Q_EMIT getUrlsDatamodelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlsExportStatus(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &url_export_id) {
    QString fullPath = QString(_serverConfigs["getUrlsExportStatus"][_serverIndices.value("getUrlsExportStatus")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/export/{url_export_id}");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    
    {
        QString url_export_idPathParam("{");
        url_export_idPathParam.append("url_export_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "url_export_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"url_export_id"+pathSuffix : pathPrefix;
        fullPath.replace(url_export_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(url_export_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsExportStatusCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsExportStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICsvExportStatus output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsExportStatusSignal(output);
        Q_EMIT getUrlsExportStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsExportStatusSignalE(output, error_type, error_str);
        Q_EMIT getUrlsExportStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsExportStatusSignalError(output, error_type, error_str);
        Q_EMIT getUrlsExportStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlsExports(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<qint32> &size) {
    QString fullPath = QString(_serverConfigs["getUrlsExports"][_serverIndices.value("getUrlsExports")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/export");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("size")).append(querySuffix).append(QUrl::toPercentEncoding(size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsExportsCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsExportsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetUrlsExports_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsExportsSignal(output);
        Q_EMIT getUrlsExportsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsExportsSignalE(output, error_type, error_str);
        Q_EMIT getUrlsExportsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsExportsSignalError(output, error_type, error_str);
        Q_EMIT getUrlsExportsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::getUrlsSuggestedFilters(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area, const ::OpenAPI::OptionalParam<OAIUrlsAggsQuery> &oai_urls_aggs_query) {
    QString fullPath = QString(_serverConfigs["getUrlsSuggestedFilters"][_serverIndices.value("getUrlsSuggestedFilters")].URL()+"/analyses/{username}/{project_slug}/{analysis_slug}/urls/suggested_filters");
    
    if (_apiKeys.contains("DjangoRestToken")) {
        addHeaders("DjangoRestToken",_apiKeys.find("DjangoRestToken").value());
    }
    
    
    {
        QString usernamePathParam("{");
        usernamePathParam.append("username").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "username", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"username"+pathSuffix : pathPrefix;
        fullPath.replace(usernamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(username)));
    }
    
    {
        QString project_slugPathParam("{");
        project_slugPathParam.append("project_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_slug"+pathSuffix : pathPrefix;
        fullPath.replace(project_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_slug)));
    }
    
    {
        QString analysis_slugPathParam("{");
        analysis_slugPathParam.append("analysis_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "analysis_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"analysis_slug"+pathSuffix : pathPrefix;
        fullPath.replace(analysis_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(analysis_slug)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (area.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "area", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("area")).append(querySuffix).append(QUrl::toPercentEncoding(area.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_urls_aggs_query.hasValue()){

        
        QByteArray output = oai_urls_aggs_query.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisApi::getUrlsSuggestedFiltersCallback);
    connect(this, &OAIAnalysisApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisApi::getUrlsSuggestedFiltersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIUrlsAggsQuery output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getUrlsSuggestedFiltersSignal(output);
        Q_EMIT getUrlsSuggestedFiltersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getUrlsSuggestedFiltersSignalE(output, error_type, error_str);
        Q_EMIT getUrlsSuggestedFiltersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getUrlsSuggestedFiltersSignalError(output, error_type, error_str);
        Q_EMIT getUrlsSuggestedFiltersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
