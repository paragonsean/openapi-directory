/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultPayload.h"
#include "OAIGetProjectAnalyses_200_response.h"
#include "OAIGetSavedFilters_200_response.h"
#include "OAIObject.h"
#include "OAIProjectSavedFilter.h"
#include "OAIURLRewritingRulesSerializer.h"
#include "OAIUrlsAggsQuery.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getProjectAnalyses(const QString &username, const QString &project_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  area QString [optional]
    * @param[in]  last_analysis_slug QString [optional]
    * @param[in]  nb_analyses qint32 [optional]
    * @param[in]  oai_urls_aggs_query QList<OAIUrlsAggsQuery> [optional]
    */
    virtual void getProjectUrlsAggs(const QString &username, const QString &project_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_analysis_slug = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &nb_analyses = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIUrlsAggsQuery>> &oai_urls_aggs_query = ::OpenAPI::OptionalParam<QList<OAIUrlsAggsQuery>>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  identifier QString [required]
    */
    virtual void getSavedFilter(const QString &username, const QString &project_slug, const QString &identifier);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getSavedFilters(const QString &username, const QString &project_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    */
    virtual void testUrlRewritingRules(const QString &username, const QString &project_slug);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getProjectAnalysesCallback(OAIHttpRequestWorker *worker);
    void getProjectUrlsAggsCallback(OAIHttpRequestWorker *worker);
    void getSavedFilterCallback(OAIHttpRequestWorker *worker);
    void getSavedFiltersCallback(OAIHttpRequestWorker *worker);
    void testUrlRewritingRulesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getProjectAnalysesSignal(OAIGetProjectAnalyses_200_response summary);
    void getProjectUrlsAggsSignal(OAIObject summary);
    void getSavedFilterSignal(OAIProjectSavedFilter summary);
    void getSavedFiltersSignal(OAIGetSavedFilters_200_response summary);
    void testUrlRewritingRulesSignal(OAIURLRewritingRulesSerializer summary);


    void getProjectAnalysesSignalFull(OAIHttpRequestWorker *worker, OAIGetProjectAnalyses_200_response summary);
    void getProjectUrlsAggsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getSavedFilterSignalFull(OAIHttpRequestWorker *worker, OAIProjectSavedFilter summary);
    void getSavedFiltersSignalFull(OAIHttpRequestWorker *worker, OAIGetSavedFilters_200_response summary);
    void testUrlRewritingRulesSignalFull(OAIHttpRequestWorker *worker, OAIURLRewritingRulesSerializer summary);

    Q_DECL_DEPRECATED_X("Use getProjectAnalysesSignalError() instead")
    void getProjectAnalysesSignalE(OAIGetProjectAnalyses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectAnalysesSignalError(OAIGetProjectAnalyses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectUrlsAggsSignalError() instead")
    void getProjectUrlsAggsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectUrlsAggsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedFilterSignalError() instead")
    void getSavedFilterSignalE(OAIProjectSavedFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedFilterSignalError(OAIProjectSavedFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedFiltersSignalError() instead")
    void getSavedFiltersSignalE(OAIGetSavedFilters_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedFiltersSignalError(OAIGetSavedFilters_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUrlRewritingRulesSignalError() instead")
    void testUrlRewritingRulesSignalE(OAIURLRewritingRulesSerializer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testUrlRewritingRulesSignalError(OAIURLRewritingRulesSerializer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getProjectAnalysesSignalErrorFull() instead")
    void getProjectAnalysesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectAnalysesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectUrlsAggsSignalErrorFull() instead")
    void getProjectUrlsAggsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectUrlsAggsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedFilterSignalErrorFull() instead")
    void getSavedFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSavedFiltersSignalErrorFull() instead")
    void getSavedFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSavedFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUrlRewritingRulesSignalErrorFull() instead")
    void testUrlRewritingRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUrlRewritingRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
