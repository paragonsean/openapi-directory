/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectSettingsSerializer.h
 *
 * 
 */

#ifndef OAIProjectSettingsSerializer_H
#define OAIProjectSettingsSerializer_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProjectSettingsSerializer : public OAIObject {
public:
    OAIProjectSettingsSerializer();
    OAIProjectSettingsSerializer(QString json);
    ~OAIProjectSettingsSerializer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedDomains() const;
    void setAllowedDomains(const QList<QString> &allowed_domains);
    bool is_allowed_domains_Set() const;
    bool is_allowed_domains_Valid() const;

    QList<QString> getBlacklistedDomains() const;
    void setBlacklistedDomains(const QList<QString> &blacklisted_domains);
    bool is_blacklisted_domains_Set() const;
    bool is_blacklisted_domains_Valid() const;

    bool isCompareCrawl() const;
    void setCompareCrawl(const bool &compare_crawl);
    bool is_compare_crawl_Set() const;
    bool is_compare_crawl_Valid() const;

    bool isCrawlGzip() const;
    void setCrawlGzip(const bool &crawl_gzip);
    bool is_crawl_gzip_Set() const;
    bool is_crawl_gzip_Valid() const;

    QString getExtraHeaders() const;
    void setExtraHeaders(const QString &extra_headers);
    bool is_extra_headers_Set() const;
    bool is_extra_headers_Valid() const;

    QString getGoogleAnalyticsAccountEmail() const;
    void setGoogleAnalyticsAccountEmail(const QString &google_analytics_account_email);
    bool is_google_analytics_account_email_Set() const;
    bool is_google_analytics_account_email_Valid() const;

    qint64 getGoogleAnalyticsNbDays() const;
    void setGoogleAnalyticsNbDays(const qint64 &google_analytics_nb_days);
    bool is_google_analytics_nb_days_Set() const;
    bool is_google_analytics_nb_days_Valid() const;

    qint64 getGoogleAnalyticsSiteId() const;
    void setGoogleAnalyticsSiteId(const qint64 &google_analytics_site_id);
    bool is_google_analytics_site_id_Set() const;
    bool is_google_analytics_site_id_Valid() const;

    qint64 getGoogleSocialAuthId() const;
    void setGoogleSocialAuthId(const qint64 &google_social_auth_id);
    bool is_google_social_auth_id_Set() const;
    bool is_google_social_auth_id_Valid() const;

    QString getHasRobotsTxt() const;
    void setHasRobotsTxt(const QString &has_robots_txt);
    bool is_has_robots_txt_Set() const;
    bool is_has_robots_txt_Valid() const;

    QList<QString> getHeaderSettings() const;
    void setHeaderSettings(const QList<QString> &header_settings);
    bool is_header_settings_Set() const;
    bool is_header_settings_Valid() const;

    qint64 getMaxDepth() const;
    void setMaxDepth(const qint64 &max_depth);
    bool is_max_depth_Set() const;
    bool is_max_depth_Valid() const;

    qint64 getMaxNbPages() const;
    void setMaxNbPages(const qint64 &max_nb_pages);
    bool is_max_nb_pages_Set() const;
    bool is_max_nb_pages_Valid() const;

    qint64 getMaxPagesPerSec() const;
    void setMaxPagesPerSec(const qint64 &max_pages_per_sec);
    bool is_max_pages_per_sec_Set() const;
    bool is_max_pages_per_sec_Valid() const;

    bool isRespectNofollow() const;
    void setRespectNofollow(const bool &respect_nofollow);
    bool is_respect_nofollow_Set() const;
    bool is_respect_nofollow_Valid() const;

    QList<QString> getSitemaps() const;
    void setSitemaps(const QList<QString> &sitemaps);
    bool is_sitemaps_Set() const;
    bool is_sitemaps_Valid() const;

    QList<QString> getStartUrls() const;
    void setStartUrls(const QList<QString> &start_urls);
    bool is_start_urls_Set() const;
    bool is_start_urls_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_domains;
    bool m_allowed_domains_isSet;
    bool m_allowed_domains_isValid;

    QList<QString> m_blacklisted_domains;
    bool m_blacklisted_domains_isSet;
    bool m_blacklisted_domains_isValid;

    bool m_compare_crawl;
    bool m_compare_crawl_isSet;
    bool m_compare_crawl_isValid;

    bool m_crawl_gzip;
    bool m_crawl_gzip_isSet;
    bool m_crawl_gzip_isValid;

    QString m_extra_headers;
    bool m_extra_headers_isSet;
    bool m_extra_headers_isValid;

    QString m_google_analytics_account_email;
    bool m_google_analytics_account_email_isSet;
    bool m_google_analytics_account_email_isValid;

    qint64 m_google_analytics_nb_days;
    bool m_google_analytics_nb_days_isSet;
    bool m_google_analytics_nb_days_isValid;

    qint64 m_google_analytics_site_id;
    bool m_google_analytics_site_id_isSet;
    bool m_google_analytics_site_id_isValid;

    qint64 m_google_social_auth_id;
    bool m_google_social_auth_id_isSet;
    bool m_google_social_auth_id_isValid;

    QString m_has_robots_txt;
    bool m_has_robots_txt_isSet;
    bool m_has_robots_txt_isValid;

    QList<QString> m_header_settings;
    bool m_header_settings_isSet;
    bool m_header_settings_isValid;

    qint64 m_max_depth;
    bool m_max_depth_isSet;
    bool m_max_depth_isValid;

    qint64 m_max_nb_pages;
    bool m_max_nb_pages_isSet;
    bool m_max_nb_pages_isValid;

    qint64 m_max_pages_per_sec;
    bool m_max_pages_per_sec_isSet;
    bool m_max_pages_per_sec_isValid;

    bool m_respect_nofollow;
    bool m_respect_nofollow_isSet;
    bool m_respect_nofollow_isValid;

    QList<QString> m_sitemaps;
    bool m_sitemaps_isSet;
    bool m_sitemaps_isValid;

    QList<QString> m_start_urls;
    bool m_start_urls_isSet;
    bool m_start_urls_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectSettingsSerializer)

#endif // OAIProjectSettingsSerializer_H
