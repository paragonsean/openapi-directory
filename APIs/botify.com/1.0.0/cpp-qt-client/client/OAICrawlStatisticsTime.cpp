/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlStatisticsTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlStatisticsTime::OAICrawlStatisticsTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlStatisticsTime::OAICrawlStatisticsTime() {
    this->initializeModel();
}

OAICrawlStatisticsTime::~OAICrawlStatisticsTime() {}

void OAICrawlStatisticsTime::initializeModel() {

    m_avg_delay_isSet = false;
    m_avg_delay_isValid = false;

    m_avg_size_isSet = false;
    m_avg_size_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_http_code_2xx_isSet = false;
    m_http_code_2xx_isValid = false;

    m_http_code_3xx_isSet = false;
    m_http_code_3xx_isValid = false;

    m_http_code_4xx_isSet = false;
    m_http_code_4xx_isValid = false;

    m_http_code_5xx_isSet = false;
    m_http_code_5xx_isValid = false;

    m_http_code_xxx_isSet = false;
    m_http_code_xxx_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_new_urls_isSet = false;
    m_new_urls_isValid = false;
}

void OAICrawlStatisticsTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlStatisticsTime::fromJsonObject(QJsonObject json) {

    m_avg_delay_isValid = ::OpenAPI::fromJsonValue(m_avg_delay, json[QString("avg_delay")]);
    m_avg_delay_isSet = !json[QString("avg_delay")].isNull() && m_avg_delay_isValid;

    m_avg_size_isValid = ::OpenAPI::fromJsonValue(m_avg_size, json[QString("avg_size")]);
    m_avg_size_isSet = !json[QString("avg_size")].isNull() && m_avg_size_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_http_code_2xx_isValid = ::OpenAPI::fromJsonValue(m_http_code_2xx, json[QString("http_code_2xx")]);
    m_http_code_2xx_isSet = !json[QString("http_code_2xx")].isNull() && m_http_code_2xx_isValid;

    m_http_code_3xx_isValid = ::OpenAPI::fromJsonValue(m_http_code_3xx, json[QString("http_code_3xx")]);
    m_http_code_3xx_isSet = !json[QString("http_code_3xx")].isNull() && m_http_code_3xx_isValid;

    m_http_code_4xx_isValid = ::OpenAPI::fromJsonValue(m_http_code_4xx, json[QString("http_code_4xx")]);
    m_http_code_4xx_isSet = !json[QString("http_code_4xx")].isNull() && m_http_code_4xx_isValid;

    m_http_code_5xx_isValid = ::OpenAPI::fromJsonValue(m_http_code_5xx, json[QString("http_code_5xx")]);
    m_http_code_5xx_isSet = !json[QString("http_code_5xx")].isNull() && m_http_code_5xx_isValid;

    m_http_code_xxx_isValid = ::OpenAPI::fromJsonValue(m_http_code_xxx, json[QString("http_code_xxx")]);
    m_http_code_xxx_isSet = !json[QString("http_code_xxx")].isNull() && m_http_code_xxx_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("last_update_date")]);
    m_last_update_date_isSet = !json[QString("last_update_date")].isNull() && m_last_update_date_isValid;

    m_new_urls_isValid = ::OpenAPI::fromJsonValue(m_new_urls, json[QString("new_urls")]);
    m_new_urls_isSet = !json[QString("new_urls")].isNull() && m_new_urls_isValid;
}

QString OAICrawlStatisticsTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlStatisticsTime::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_delay.size() > 0) {
        obj.insert(QString("avg_delay"), ::OpenAPI::toJsonValue(m_avg_delay));
    }
    if (m_avg_size.size() > 0) {
        obj.insert(QString("avg_size"), ::OpenAPI::toJsonValue(m_avg_size));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_http_code_2xx.size() > 0) {
        obj.insert(QString("http_code_2xx"), ::OpenAPI::toJsonValue(m_http_code_2xx));
    }
    if (m_http_code_3xx.size() > 0) {
        obj.insert(QString("http_code_3xx"), ::OpenAPI::toJsonValue(m_http_code_3xx));
    }
    if (m_http_code_4xx.size() > 0) {
        obj.insert(QString("http_code_4xx"), ::OpenAPI::toJsonValue(m_http_code_4xx));
    }
    if (m_http_code_5xx.size() > 0) {
        obj.insert(QString("http_code_5xx"), ::OpenAPI::toJsonValue(m_http_code_5xx));
    }
    if (m_http_code_xxx.size() > 0) {
        obj.insert(QString("http_code_xxx"), ::OpenAPI::toJsonValue(m_http_code_xxx));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("last_update_date"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_new_urls.size() > 0) {
        obj.insert(QString("new_urls"), ::OpenAPI::toJsonValue(m_new_urls));
    }
    return obj;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getAvgDelay() const {
    return m_avg_delay;
}
void OAICrawlStatisticsTime::setAvgDelay(const QList<OAICrawlStatisticsTimePoint> &avg_delay) {
    m_avg_delay = avg_delay;
    m_avg_delay_isSet = true;
}

bool OAICrawlStatisticsTime::is_avg_delay_Set() const{
    return m_avg_delay_isSet;
}

bool OAICrawlStatisticsTime::is_avg_delay_Valid() const{
    return m_avg_delay_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getAvgSize() const {
    return m_avg_size;
}
void OAICrawlStatisticsTime::setAvgSize(const QList<OAICrawlStatisticsTimePoint> &avg_size) {
    m_avg_size = avg_size;
    m_avg_size_isSet = true;
}

bool OAICrawlStatisticsTime::is_avg_size_Set() const{
    return m_avg_size_isSet;
}

bool OAICrawlStatisticsTime::is_avg_size_Valid() const{
    return m_avg_size_isValid;
}

QString OAICrawlStatisticsTime::getFrequency() const {
    return m_frequency;
}
void OAICrawlStatisticsTime::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAICrawlStatisticsTime::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAICrawlStatisticsTime::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getHttpCode2xx() const {
    return m_http_code_2xx;
}
void OAICrawlStatisticsTime::setHttpCode2xx(const QList<OAICrawlStatisticsTimePoint> &http_code_2xx) {
    m_http_code_2xx = http_code_2xx;
    m_http_code_2xx_isSet = true;
}

bool OAICrawlStatisticsTime::is_http_code_2xx_Set() const{
    return m_http_code_2xx_isSet;
}

bool OAICrawlStatisticsTime::is_http_code_2xx_Valid() const{
    return m_http_code_2xx_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getHttpCode3xx() const {
    return m_http_code_3xx;
}
void OAICrawlStatisticsTime::setHttpCode3xx(const QList<OAICrawlStatisticsTimePoint> &http_code_3xx) {
    m_http_code_3xx = http_code_3xx;
    m_http_code_3xx_isSet = true;
}

bool OAICrawlStatisticsTime::is_http_code_3xx_Set() const{
    return m_http_code_3xx_isSet;
}

bool OAICrawlStatisticsTime::is_http_code_3xx_Valid() const{
    return m_http_code_3xx_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getHttpCode4xx() const {
    return m_http_code_4xx;
}
void OAICrawlStatisticsTime::setHttpCode4xx(const QList<OAICrawlStatisticsTimePoint> &http_code_4xx) {
    m_http_code_4xx = http_code_4xx;
    m_http_code_4xx_isSet = true;
}

bool OAICrawlStatisticsTime::is_http_code_4xx_Set() const{
    return m_http_code_4xx_isSet;
}

bool OAICrawlStatisticsTime::is_http_code_4xx_Valid() const{
    return m_http_code_4xx_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getHttpCode5xx() const {
    return m_http_code_5xx;
}
void OAICrawlStatisticsTime::setHttpCode5xx(const QList<OAICrawlStatisticsTimePoint> &http_code_5xx) {
    m_http_code_5xx = http_code_5xx;
    m_http_code_5xx_isSet = true;
}

bool OAICrawlStatisticsTime::is_http_code_5xx_Set() const{
    return m_http_code_5xx_isSet;
}

bool OAICrawlStatisticsTime::is_http_code_5xx_Valid() const{
    return m_http_code_5xx_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getHttpCodeXxx() const {
    return m_http_code_xxx;
}
void OAICrawlStatisticsTime::setHttpCodeXxx(const QList<OAICrawlStatisticsTimePoint> &http_code_xxx) {
    m_http_code_xxx = http_code_xxx;
    m_http_code_xxx_isSet = true;
}

bool OAICrawlStatisticsTime::is_http_code_xxx_Set() const{
    return m_http_code_xxx_isSet;
}

bool OAICrawlStatisticsTime::is_http_code_xxx_Valid() const{
    return m_http_code_xxx_isValid;
}

QDateTime OAICrawlStatisticsTime::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAICrawlStatisticsTime::setLastUpdateDate(const QDateTime &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAICrawlStatisticsTime::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAICrawlStatisticsTime::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

QList<OAICrawlStatisticsTimePoint> OAICrawlStatisticsTime::getNewUrls() const {
    return m_new_urls;
}
void OAICrawlStatisticsTime::setNewUrls(const QList<OAICrawlStatisticsTimePoint> &new_urls) {
    m_new_urls = new_urls;
    m_new_urls_isSet = true;
}

bool OAICrawlStatisticsTime::is_new_urls_Set() const{
    return m_new_urls_isSet;
}

bool OAICrawlStatisticsTime::is_new_urls_Valid() const{
    return m_new_urls_isValid;
}

bool OAICrawlStatisticsTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_delay.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_2xx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_3xx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_4xx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_5xx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_code_xxx.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlStatisticsTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avg_delay_isValid && m_avg_size_isValid && m_frequency_isValid && m_http_code_2xx_isValid && m_http_code_3xx_isValid && m_http_code_4xx_isValid && m_http_code_5xx_isValid && m_http_code_xxx_isValid && m_last_update_date_isValid && m_new_urls_isValid && true;
}

} // namespace OpenAPI
