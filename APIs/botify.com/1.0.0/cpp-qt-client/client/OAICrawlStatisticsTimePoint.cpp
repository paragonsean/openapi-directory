/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlStatisticsTimePoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlStatisticsTimePoint::OAICrawlStatisticsTimePoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlStatisticsTimePoint::OAICrawlStatisticsTimePoint() {
    this->initializeModel();
}

OAICrawlStatisticsTimePoint::~OAICrawlStatisticsTimePoint() {}

void OAICrawlStatisticsTimePoint::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;
}

void OAICrawlStatisticsTimePoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlStatisticsTimePoint::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("datetime")]);
    m_datetime_isSet = !json[QString("datetime")].isNull() && m_datetime_isValid;
}

QString OAICrawlStatisticsTimePoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlStatisticsTimePoint::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    return obj;
}

qint64 OAICrawlStatisticsTimePoint::getCount() const {
    return m_count;
}
void OAICrawlStatisticsTimePoint::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICrawlStatisticsTimePoint::is_count_Set() const{
    return m_count_isSet;
}

bool OAICrawlStatisticsTimePoint::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAICrawlStatisticsTimePoint::getDatetime() const {
    return m_datetime;
}
void OAICrawlStatisticsTimePoint::setDatetime(const QDateTime &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAICrawlStatisticsTimePoint::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAICrawlStatisticsTimePoint::is_datetime_Valid() const{
    return m_datetime_isValid;
}

bool OAICrawlStatisticsTimePoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlStatisticsTimePoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_datetime_isValid && true;
}

} // namespace OpenAPI
