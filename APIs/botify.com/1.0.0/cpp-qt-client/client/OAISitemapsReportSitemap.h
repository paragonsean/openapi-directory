/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISitemapsReportSitemap.h
 *
 * 
 */

#ifndef OAISitemapsReportSitemap_H
#define OAISitemapsReportSitemap_H

#include <QJsonObject>

#include "OAISitemapsReportSitemapError.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISitemapsReportSitemapError;

class OAISitemapsReportSitemap : public OAIObject {
public:
    OAISitemapsReportSitemap();
    OAISitemapsReportSitemap(QString json);
    ~OAISitemapsReportSitemap() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISitemapsReportSitemapError getError() const;
    void setError(const OAISitemapsReportSitemapError &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getFileType() const;
    void setFileType(const QString &file_type);
    bool is_file_type_Set() const;
    bool is_file_type_Valid() const;

    qint64 getInvalidUrls() const;
    void setInvalidUrls(const qint64 &invalid_urls);
    bool is_invalid_urls_Set() const;
    bool is_invalid_urls_Valid() const;

    QList<QString> getSitemapIndexes() const;
    void setSitemapIndexes(const QList<QString> &sitemap_indexes);
    bool is_sitemap_indexes_Set() const;
    bool is_sitemap_indexes_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint64 getValidUrls() const;
    void setValidUrls(const qint64 &valid_urls);
    bool is_valid_urls_Set() const;
    bool is_valid_urls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISitemapsReportSitemapError m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_file_type;
    bool m_file_type_isSet;
    bool m_file_type_isValid;

    qint64 m_invalid_urls;
    bool m_invalid_urls_isSet;
    bool m_invalid_urls_isValid;

    QList<QString> m_sitemap_indexes;
    bool m_sitemap_indexes_isSet;
    bool m_sitemap_indexes_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint64 m_valid_urls;
    bool m_valid_urls_isSet;
    bool m_valid_urls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISitemapsReportSitemap)

#endif // OAISitemapsReportSitemap_H
