/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlsQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlsQuery::OAIUrlsQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlsQuery::OAIUrlsQuery() {
    this->initializeModel();
}

OAIUrlsQuery::~OAIUrlsQuery() {}

void OAIUrlsQuery::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIUrlsQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlsQuery::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIUrlsQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlsQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_filters_isSet) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

QList<QString> OAIUrlsQuery::getFields() const {
    return m_fields;
}
void OAIUrlsQuery::setFields(const QList<QString> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIUrlsQuery::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIUrlsQuery::is_fields_Valid() const{
    return m_fields_isValid;
}

OAIObject OAIUrlsQuery::getFilters() const {
    return m_filters;
}
void OAIUrlsQuery::setFilters(const OAIObject &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIUrlsQuery::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIUrlsQuery::is_filters_Valid() const{
    return m_filters_isValid;
}

QList<OAIObject> OAIUrlsQuery::getSort() const {
    return m_sort;
}
void OAIUrlsQuery::setSort(const QList<OAIObject> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIUrlsQuery::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIUrlsQuery::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIUrlsQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlsQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
