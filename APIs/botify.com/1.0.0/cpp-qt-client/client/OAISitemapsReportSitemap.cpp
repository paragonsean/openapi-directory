/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISitemapsReportSitemap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISitemapsReportSitemap::OAISitemapsReportSitemap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISitemapsReportSitemap::OAISitemapsReportSitemap() {
    this->initializeModel();
}

OAISitemapsReportSitemap::~OAISitemapsReportSitemap() {}

void OAISitemapsReportSitemap::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_invalid_urls_isSet = false;
    m_invalid_urls_isValid = false;

    m_sitemap_indexes_isSet = false;
    m_sitemap_indexes_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_valid_urls_isSet = false;
    m_valid_urls_isValid = false;
}

void OAISitemapsReportSitemap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISitemapsReportSitemap::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("file_type")]);
    m_file_type_isSet = !json[QString("file_type")].isNull() && m_file_type_isValid;

    m_invalid_urls_isValid = ::OpenAPI::fromJsonValue(m_invalid_urls, json[QString("invalid_urls")]);
    m_invalid_urls_isSet = !json[QString("invalid_urls")].isNull() && m_invalid_urls_isValid;

    m_sitemap_indexes_isValid = ::OpenAPI::fromJsonValue(m_sitemap_indexes, json[QString("sitemap_indexes")]);
    m_sitemap_indexes_isSet = !json[QString("sitemap_indexes")].isNull() && m_sitemap_indexes_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_valid_urls_isValid = ::OpenAPI::fromJsonValue(m_valid_urls, json[QString("valid_urls")]);
    m_valid_urls_isSet = !json[QString("valid_urls")].isNull() && m_valid_urls_isValid;
}

QString OAISitemapsReportSitemap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISitemapsReportSitemap::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("file_type"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_invalid_urls_isSet) {
        obj.insert(QString("invalid_urls"), ::OpenAPI::toJsonValue(m_invalid_urls));
    }
    if (m_sitemap_indexes.size() > 0) {
        obj.insert(QString("sitemap_indexes"), ::OpenAPI::toJsonValue(m_sitemap_indexes));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_valid_urls_isSet) {
        obj.insert(QString("valid_urls"), ::OpenAPI::toJsonValue(m_valid_urls));
    }
    return obj;
}

OAISitemapsReportSitemapError OAISitemapsReportSitemap::getError() const {
    return m_error;
}
void OAISitemapsReportSitemap::setError(const OAISitemapsReportSitemapError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAISitemapsReportSitemap::is_error_Set() const{
    return m_error_isSet;
}

bool OAISitemapsReportSitemap::is_error_Valid() const{
    return m_error_isValid;
}

QString OAISitemapsReportSitemap::getFileType() const {
    return m_file_type;
}
void OAISitemapsReportSitemap::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAISitemapsReportSitemap::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAISitemapsReportSitemap::is_file_type_Valid() const{
    return m_file_type_isValid;
}

qint64 OAISitemapsReportSitemap::getInvalidUrls() const {
    return m_invalid_urls;
}
void OAISitemapsReportSitemap::setInvalidUrls(const qint64 &invalid_urls) {
    m_invalid_urls = invalid_urls;
    m_invalid_urls_isSet = true;
}

bool OAISitemapsReportSitemap::is_invalid_urls_Set() const{
    return m_invalid_urls_isSet;
}

bool OAISitemapsReportSitemap::is_invalid_urls_Valid() const{
    return m_invalid_urls_isValid;
}

QList<QString> OAISitemapsReportSitemap::getSitemapIndexes() const {
    return m_sitemap_indexes;
}
void OAISitemapsReportSitemap::setSitemapIndexes(const QList<QString> &sitemap_indexes) {
    m_sitemap_indexes = sitemap_indexes;
    m_sitemap_indexes_isSet = true;
}

bool OAISitemapsReportSitemap::is_sitemap_indexes_Set() const{
    return m_sitemap_indexes_isSet;
}

bool OAISitemapsReportSitemap::is_sitemap_indexes_Valid() const{
    return m_sitemap_indexes_isValid;
}

QString OAISitemapsReportSitemap::getUrl() const {
    return m_url;
}
void OAISitemapsReportSitemap::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISitemapsReportSitemap::is_url_Set() const{
    return m_url_isSet;
}

bool OAISitemapsReportSitemap::is_url_Valid() const{
    return m_url_isValid;
}

qint64 OAISitemapsReportSitemap::getValidUrls() const {
    return m_valid_urls;
}
void OAISitemapsReportSitemap::setValidUrls(const qint64 &valid_urls) {
    m_valid_urls = valid_urls;
    m_valid_urls_isSet = true;
}

bool OAISitemapsReportSitemap::is_valid_urls_Set() const{
    return m_valid_urls_isSet;
}

bool OAISitemapsReportSitemap::is_valid_urls_Valid() const{
    return m_valid_urls_isValid;
}

bool OAISitemapsReportSitemap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemap_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_urls_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISitemapsReportSitemap::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
