/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisApi_H
#define OAI_OAIAnalysisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisDetail.h"
#include "OAICrawlDatamodel.h"
#include "OAICrawlStatistics.h"
#include "OAICrawlStatisticsTime.h"
#include "OAICsvExportStatus.h"
#include "OAIDefaultPayload.h"
#include "OAIGetGanalyticsOrphanURLs_200_response.h"
#include "OAIGetLinksTopDomains_200_response.h"
#include "OAIGetSitemapsSamplesOutOfConfig_200_response.h"
#include "OAIGetUrlsExports_200_response.h"
#include "OAIGetUrls_200_response.h"
#include "OAILinksPercentiles.h"
#include "OAIObject.h"
#include "OAIPageRankLost.h"
#include "OAISitemapsReport.h"
#include "OAIUrlsAggsQuery.h"
#include "OAIUrlsQuery.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisApi(const int timeOut = 0);
    ~OAIAnalysisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  area QString [optional]
    * @param[in]  oai_urls_query OAIUrlsQuery [optional]
    */
    virtual void createUrlsExport(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUrlsQuery> &oai_urls_query = ::OpenAPI::OptionalParam<OAIUrlsQuery>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    */
    virtual void getAnalysisSummary(const QString &username, const QString &project_slug, const QString &analysis_slug);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    */
    virtual void getCrawlStatistics(const QString &username, const QString &project_slug, const QString &analysis_slug);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  frequency QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCrawlStatisticsByFrequency(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &frequency, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  list_type QString [required]
    */
    virtual void getCrawlStatisticsUrls(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &list_type);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  medium QString [required]
    * @param[in]  source QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getGanalyticsOrphanURLs(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &medium, const QString &source, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    */
    virtual void getLinksPercentiles(const QString &username, const QString &project_slug, const QString &analysis_slug);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getLinksTopDomains(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getLinksTopSubdomains(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    */
    virtual void getPageRankLost(const QString &username, const QString &project_slug, const QString &analysis_slug);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    */
    virtual void getSitemapsReport(const QString &username, const QString &project_slug, const QString &analysis_slug);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getSitemapsSamplesOutOfConfig(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getSitemapsSamplesSitemapsOnly(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  url QString [required]
    * @param[in]  fields QList<QString> [optional]
    */
    virtual void getUrlDetail(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &url, const ::OpenAPI::OptionalParam<QList<QString>> &fields = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  area QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  oai_urls_query OAIUrlsQuery [optional]
    */
    virtual void getUrls(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIUrlsQuery> &oai_urls_query = ::OpenAPI::OptionalParam<OAIUrlsQuery>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  area QString [optional]
    * @param[in]  oai_urls_aggs_query QList<OAIUrlsAggsQuery> [optional]
    */
    virtual void getUrlsAggs(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIUrlsAggsQuery>> &oai_urls_aggs_query = ::OpenAPI::OptionalParam<QList<OAIUrlsAggsQuery>>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  area QString [optional]
    */
    virtual void getUrlsDatamodel(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  url_export_id QString [required]
    */
    virtual void getUrlsExportStatus(const QString &username, const QString &project_slug, const QString &analysis_slug, const QString &url_export_id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void getUrlsExports(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  project_slug QString [required]
    * @param[in]  analysis_slug QString [required]
    * @param[in]  area QString [optional]
    * @param[in]  oai_urls_aggs_query OAIUrlsAggsQuery [optional]
    */
    virtual void getUrlsSuggestedFilters(const QString &username, const QString &project_slug, const QString &analysis_slug, const ::OpenAPI::OptionalParam<QString> &area = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUrlsAggsQuery> &oai_urls_aggs_query = ::OpenAPI::OptionalParam<OAIUrlsAggsQuery>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUrlsExportCallback(OAIHttpRequestWorker *worker);
    void getAnalysisSummaryCallback(OAIHttpRequestWorker *worker);
    void getCrawlStatisticsCallback(OAIHttpRequestWorker *worker);
    void getCrawlStatisticsByFrequencyCallback(OAIHttpRequestWorker *worker);
    void getCrawlStatisticsUrlsCallback(OAIHttpRequestWorker *worker);
    void getGanalyticsOrphanURLsCallback(OAIHttpRequestWorker *worker);
    void getLinksPercentilesCallback(OAIHttpRequestWorker *worker);
    void getLinksTopDomainsCallback(OAIHttpRequestWorker *worker);
    void getLinksTopSubdomainsCallback(OAIHttpRequestWorker *worker);
    void getPageRankLostCallback(OAIHttpRequestWorker *worker);
    void getSitemapsReportCallback(OAIHttpRequestWorker *worker);
    void getSitemapsSamplesOutOfConfigCallback(OAIHttpRequestWorker *worker);
    void getSitemapsSamplesSitemapsOnlyCallback(OAIHttpRequestWorker *worker);
    void getUrlDetailCallback(OAIHttpRequestWorker *worker);
    void getUrlsCallback(OAIHttpRequestWorker *worker);
    void getUrlsAggsCallback(OAIHttpRequestWorker *worker);
    void getUrlsDatamodelCallback(OAIHttpRequestWorker *worker);
    void getUrlsExportStatusCallback(OAIHttpRequestWorker *worker);
    void getUrlsExportsCallback(OAIHttpRequestWorker *worker);
    void getUrlsSuggestedFiltersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUrlsExportSignal(OAICsvExportStatus summary);
    void getAnalysisSummarySignal(OAIAnalysisDetail summary);
    void getCrawlStatisticsSignal(OAICrawlStatistics summary);
    void getCrawlStatisticsByFrequencySignal(OAICrawlStatisticsTime summary);
    void getCrawlStatisticsUrlsSignal(QList<QJsonValue> summary);
    void getGanalyticsOrphanURLsSignal(OAIGetGanalyticsOrphanURLs_200_response summary);
    void getLinksPercentilesSignal(OAILinksPercentiles summary);
    void getLinksTopDomainsSignal(OAIGetLinksTopDomains_200_response summary);
    void getLinksTopSubdomainsSignal(OAIGetLinksTopDomains_200_response summary);
    void getPageRankLostSignal(OAIPageRankLost summary);
    void getSitemapsReportSignal(OAISitemapsReport summary);
    void getSitemapsSamplesOutOfConfigSignal(OAIGetSitemapsSamplesOutOfConfig_200_response summary);
    void getSitemapsSamplesSitemapsOnlySignal(OAIGetSitemapsSamplesOutOfConfig_200_response summary);
    void getUrlDetailSignal(OAIObject summary);
    void getUrlsSignal(OAIGetUrls_200_response summary);
    void getUrlsAggsSignal(QList<QJsonValue> summary);
    void getUrlsDatamodelSignal(OAICrawlDatamodel summary);
    void getUrlsExportStatusSignal(OAICsvExportStatus summary);
    void getUrlsExportsSignal(OAIGetUrlsExports_200_response summary);
    void getUrlsSuggestedFiltersSignal(OAIUrlsAggsQuery summary);


    void createUrlsExportSignalFull(OAIHttpRequestWorker *worker, OAICsvExportStatus summary);
    void getAnalysisSummarySignalFull(OAIHttpRequestWorker *worker, OAIAnalysisDetail summary);
    void getCrawlStatisticsSignalFull(OAIHttpRequestWorker *worker, OAICrawlStatistics summary);
    void getCrawlStatisticsByFrequencySignalFull(OAIHttpRequestWorker *worker, OAICrawlStatisticsTime summary);
    void getCrawlStatisticsUrlsSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getGanalyticsOrphanURLsSignalFull(OAIHttpRequestWorker *worker, OAIGetGanalyticsOrphanURLs_200_response summary);
    void getLinksPercentilesSignalFull(OAIHttpRequestWorker *worker, OAILinksPercentiles summary);
    void getLinksTopDomainsSignalFull(OAIHttpRequestWorker *worker, OAIGetLinksTopDomains_200_response summary);
    void getLinksTopSubdomainsSignalFull(OAIHttpRequestWorker *worker, OAIGetLinksTopDomains_200_response summary);
    void getPageRankLostSignalFull(OAIHttpRequestWorker *worker, OAIPageRankLost summary);
    void getSitemapsReportSignalFull(OAIHttpRequestWorker *worker, OAISitemapsReport summary);
    void getSitemapsSamplesOutOfConfigSignalFull(OAIHttpRequestWorker *worker, OAIGetSitemapsSamplesOutOfConfig_200_response summary);
    void getSitemapsSamplesSitemapsOnlySignalFull(OAIHttpRequestWorker *worker, OAIGetSitemapsSamplesOutOfConfig_200_response summary);
    void getUrlDetailSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getUrlsSignalFull(OAIHttpRequestWorker *worker, OAIGetUrls_200_response summary);
    void getUrlsAggsSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getUrlsDatamodelSignalFull(OAIHttpRequestWorker *worker, OAICrawlDatamodel summary);
    void getUrlsExportStatusSignalFull(OAIHttpRequestWorker *worker, OAICsvExportStatus summary);
    void getUrlsExportsSignalFull(OAIHttpRequestWorker *worker, OAIGetUrlsExports_200_response summary);
    void getUrlsSuggestedFiltersSignalFull(OAIHttpRequestWorker *worker, OAIUrlsAggsQuery summary);

    Q_DECL_DEPRECATED_X("Use createUrlsExportSignalError() instead")
    void createUrlsExportSignalE(OAICsvExportStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUrlsExportSignalError(OAICsvExportStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisSummarySignalError() instead")
    void getAnalysisSummarySignalE(OAIAnalysisDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisSummarySignalError(OAIAnalysisDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsSignalError() instead")
    void getCrawlStatisticsSignalE(OAICrawlStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsSignalError(OAICrawlStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsByFrequencySignalError() instead")
    void getCrawlStatisticsByFrequencySignalE(OAICrawlStatisticsTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsByFrequencySignalError(OAICrawlStatisticsTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsUrlsSignalError() instead")
    void getCrawlStatisticsUrlsSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsUrlsSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGanalyticsOrphanURLsSignalError() instead")
    void getGanalyticsOrphanURLsSignalE(OAIGetGanalyticsOrphanURLs_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGanalyticsOrphanURLsSignalError(OAIGetGanalyticsOrphanURLs_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksPercentilesSignalError() instead")
    void getLinksPercentilesSignalE(OAILinksPercentiles summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksPercentilesSignalError(OAILinksPercentiles summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksTopDomainsSignalError() instead")
    void getLinksTopDomainsSignalE(OAIGetLinksTopDomains_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksTopDomainsSignalError(OAIGetLinksTopDomains_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksTopSubdomainsSignalError() instead")
    void getLinksTopSubdomainsSignalE(OAIGetLinksTopDomains_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksTopSubdomainsSignalError(OAIGetLinksTopDomains_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPageRankLostSignalError() instead")
    void getPageRankLostSignalE(OAIPageRankLost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPageRankLostSignalError(OAIPageRankLost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsReportSignalError() instead")
    void getSitemapsReportSignalE(OAISitemapsReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsReportSignalError(OAISitemapsReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsSamplesOutOfConfigSignalError() instead")
    void getSitemapsSamplesOutOfConfigSignalE(OAIGetSitemapsSamplesOutOfConfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsSamplesOutOfConfigSignalError(OAIGetSitemapsSamplesOutOfConfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsSamplesSitemapsOnlySignalError() instead")
    void getSitemapsSamplesSitemapsOnlySignalE(OAIGetSitemapsSamplesOutOfConfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsSamplesSitemapsOnlySignalError(OAIGetSitemapsSamplesOutOfConfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlDetailSignalError() instead")
    void getUrlDetailSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlDetailSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsSignalError() instead")
    void getUrlsSignalE(OAIGetUrls_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsSignalError(OAIGetUrls_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsAggsSignalError() instead")
    void getUrlsAggsSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsAggsSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsDatamodelSignalError() instead")
    void getUrlsDatamodelSignalE(OAICrawlDatamodel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsDatamodelSignalError(OAICrawlDatamodel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsExportStatusSignalError() instead")
    void getUrlsExportStatusSignalE(OAICsvExportStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsExportStatusSignalError(OAICsvExportStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsExportsSignalError() instead")
    void getUrlsExportsSignalE(OAIGetUrlsExports_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsExportsSignalError(OAIGetUrlsExports_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsSuggestedFiltersSignalError() instead")
    void getUrlsSuggestedFiltersSignalE(OAIUrlsAggsQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsSuggestedFiltersSignalError(OAIUrlsAggsQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUrlsExportSignalErrorFull() instead")
    void createUrlsExportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUrlsExportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisSummarySignalErrorFull() instead")
    void getAnalysisSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsSignalErrorFull() instead")
    void getCrawlStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsByFrequencySignalErrorFull() instead")
    void getCrawlStatisticsByFrequencySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsByFrequencySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCrawlStatisticsUrlsSignalErrorFull() instead")
    void getCrawlStatisticsUrlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrawlStatisticsUrlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGanalyticsOrphanURLsSignalErrorFull() instead")
    void getGanalyticsOrphanURLsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGanalyticsOrphanURLsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksPercentilesSignalErrorFull() instead")
    void getLinksPercentilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksPercentilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksTopDomainsSignalErrorFull() instead")
    void getLinksTopDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksTopDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLinksTopSubdomainsSignalErrorFull() instead")
    void getLinksTopSubdomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinksTopSubdomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPageRankLostSignalErrorFull() instead")
    void getPageRankLostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPageRankLostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsReportSignalErrorFull() instead")
    void getSitemapsReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsSamplesOutOfConfigSignalErrorFull() instead")
    void getSitemapsSamplesOutOfConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsSamplesOutOfConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSitemapsSamplesSitemapsOnlySignalErrorFull() instead")
    void getSitemapsSamplesSitemapsOnlySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSitemapsSamplesSitemapsOnlySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlDetailSignalErrorFull() instead")
    void getUrlDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsSignalErrorFull() instead")
    void getUrlsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsAggsSignalErrorFull() instead")
    void getUrlsAggsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsAggsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsDatamodelSignalErrorFull() instead")
    void getUrlsDatamodelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsDatamodelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsExportStatusSignalErrorFull() instead")
    void getUrlsExportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsExportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsExportsSignalErrorFull() instead")
    void getUrlsExportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsExportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlsSuggestedFiltersSignalErrorFull() instead")
    void getUrlsSuggestedFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlsSuggestedFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
