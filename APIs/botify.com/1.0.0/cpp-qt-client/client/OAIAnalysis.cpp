/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysis::OAIAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysis::OAIAnalysis() {
    this->initializeModel();
}

OAIAnalysis::~OAIAnalysis() {}

void OAIAnalysis::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_finished_isSet = false;
    m_date_finished_isValid = false;

    m_date_last_modified_isSet = false;
    m_date_last_modified_isValid = false;

    m_date_launched_isSet = false;
    m_date_launched_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_urls_done_isSet = false;
    m_urls_done_isValid = false;

    m_urls_in_queue_isSet = false;
    m_urls_in_queue_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysis::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_date_finished_isValid = ::OpenAPI::fromJsonValue(m_date_finished, json[QString("date_finished")]);
    m_date_finished_isSet = !json[QString("date_finished")].isNull() && m_date_finished_isValid;

    m_date_last_modified_isValid = ::OpenAPI::fromJsonValue(m_date_last_modified, json[QString("date_last_modified")]);
    m_date_last_modified_isSet = !json[QString("date_last_modified")].isNull() && m_date_last_modified_isValid;

    m_date_launched_isValid = ::OpenAPI::fromJsonValue(m_date_launched, json[QString("date_launched")]);
    m_date_launched_isSet = !json[QString("date_launched")].isNull() && m_date_launched_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_urls_done_isValid = ::OpenAPI::fromJsonValue(m_urls_done, json[QString("urls_done")]);
    m_urls_done_isSet = !json[QString("urls_done")].isNull() && m_urls_done_isValid;

    m_urls_in_queue_isValid = ::OpenAPI::fromJsonValue(m_urls_in_queue, json[QString("urls_in_queue")]);
    m_urls_in_queue_isSet = !json[QString("urls_in_queue")].isNull() && m_urls_in_queue_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_finished_isSet) {
        obj.insert(QString("date_finished"), ::OpenAPI::toJsonValue(m_date_finished));
    }
    if (m_date_last_modified_isSet) {
        obj.insert(QString("date_last_modified"), ::OpenAPI::toJsonValue(m_date_last_modified));
    }
    if (m_date_launched_isSet) {
        obj.insert(QString("date_launched"), ::OpenAPI::toJsonValue(m_date_launched));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_urls_done_isSet) {
        obj.insert(QString("urls_done"), ::OpenAPI::toJsonValue(m_urls_done));
    }
    if (m_urls_in_queue_isSet) {
        obj.insert(QString("urls_in_queue"), ::OpenAPI::toJsonValue(m_urls_in_queue));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIAnalysis::getConfig() const {
    return m_config;
}
void OAIAnalysis::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIAnalysis::is_config_Set() const{
    return m_config_isSet;
}

bool OAIAnalysis::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIAnalysis::getDateCreated() const {
    return m_date_created;
}
void OAIAnalysis::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAnalysis::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAnalysis::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAnalysis::getDateFinished() const {
    return m_date_finished;
}
void OAIAnalysis::setDateFinished(const QDateTime &date_finished) {
    m_date_finished = date_finished;
    m_date_finished_isSet = true;
}

bool OAIAnalysis::is_date_finished_Set() const{
    return m_date_finished_isSet;
}

bool OAIAnalysis::is_date_finished_Valid() const{
    return m_date_finished_isValid;
}

QDateTime OAIAnalysis::getDateLastModified() const {
    return m_date_last_modified;
}
void OAIAnalysis::setDateLastModified(const QDateTime &date_last_modified) {
    m_date_last_modified = date_last_modified;
    m_date_last_modified_isSet = true;
}

bool OAIAnalysis::is_date_last_modified_Set() const{
    return m_date_last_modified_isSet;
}

bool OAIAnalysis::is_date_last_modified_Valid() const{
    return m_date_last_modified_isValid;
}

QDateTime OAIAnalysis::getDateLaunched() const {
    return m_date_launched;
}
void OAIAnalysis::setDateLaunched(const QDateTime &date_launched) {
    m_date_launched = date_launched;
    m_date_launched_isSet = true;
}

bool OAIAnalysis::is_date_launched_Set() const{
    return m_date_launched_isSet;
}

bool OAIAnalysis::is_date_launched_Valid() const{
    return m_date_launched_isValid;
}

QString OAIAnalysis::getFeatures() const {
    return m_features;
}
void OAIAnalysis::setFeatures(const QString &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIAnalysis::is_features_Set() const{
    return m_features_isSet;
}

bool OAIAnalysis::is_features_Valid() const{
    return m_features_isValid;
}

qint64 OAIAnalysis::getId() const {
    return m_id;
}
void OAIAnalysis::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysis::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysis::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnalysis::getName() const {
    return m_name;
}
void OAIAnalysis::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysis::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysis::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAnalysis::getSlug() const {
    return m_slug;
}
void OAIAnalysis::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIAnalysis::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIAnalysis::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIAnalysis::getStatus() const {
    return m_status;
}
void OAIAnalysis::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAnalysis::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAnalysis::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAnalysis::getUrl() const {
    return m_url;
}
void OAIAnalysis::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAnalysis::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAnalysis::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAnalysis::getUrlsDone() const {
    return m_urls_done;
}
void OAIAnalysis::setUrlsDone(const QString &urls_done) {
    m_urls_done = urls_done;
    m_urls_done_isSet = true;
}

bool OAIAnalysis::is_urls_done_Set() const{
    return m_urls_done_isSet;
}

bool OAIAnalysis::is_urls_done_Valid() const{
    return m_urls_done_isValid;
}

QString OAIAnalysis::getUrlsInQueue() const {
    return m_urls_in_queue;
}
void OAIAnalysis::setUrlsInQueue(const QString &urls_in_queue) {
    m_urls_in_queue = urls_in_queue;
    m_urls_in_queue_isSet = true;
}

bool OAIAnalysis::is_urls_in_queue_Set() const{
    return m_urls_in_queue_isSet;
}

bool OAIAnalysis::is_urls_in_queue_Valid() const{
    return m_urls_in_queue_isValid;
}

OAIUser OAIAnalysis::getUser() const {
    return m_user;
}
void OAIAnalysis::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAnalysis::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAnalysis::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_launched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_in_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_isValid && true;
}

} // namespace OpenAPI
