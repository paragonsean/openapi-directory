/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISitemapsReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISitemapsReport::OAISitemapsReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISitemapsReport::OAISitemapsReport() {
    this->initializeModel();
}

OAISitemapsReport::~OAISitemapsReport() {}

void OAISitemapsReport::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_sitemap_indexes_isSet = false;
    m_sitemap_indexes_isValid = false;

    m_sitemap_only_isSet = false;
    m_sitemap_only_isValid = false;

    m_sitemaps_isSet = false;
    m_sitemaps_isValid = false;
}

void OAISitemapsReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISitemapsReport::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_sitemap_indexes_isValid = ::OpenAPI::fromJsonValue(m_sitemap_indexes, json[QString("sitemap_indexes")]);
    m_sitemap_indexes_isSet = !json[QString("sitemap_indexes")].isNull() && m_sitemap_indexes_isValid;

    m_sitemap_only_isValid = ::OpenAPI::fromJsonValue(m_sitemap_only, json[QString("sitemap_only")]);
    m_sitemap_only_isSet = !json[QString("sitemap_only")].isNull() && m_sitemap_only_isValid;

    m_sitemaps_isValid = ::OpenAPI::fromJsonValue(m_sitemaps, json[QString("sitemaps")]);
    m_sitemaps_isSet = !json[QString("sitemaps")].isNull() && m_sitemaps_isValid;
}

QString OAISitemapsReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISitemapsReport::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_sitemap_indexes.size() > 0) {
        obj.insert(QString("sitemap_indexes"), ::OpenAPI::toJsonValue(m_sitemap_indexes));
    }
    if (m_sitemap_only.isSet()) {
        obj.insert(QString("sitemap_only"), ::OpenAPI::toJsonValue(m_sitemap_only));
    }
    if (m_sitemaps.size() > 0) {
        obj.insert(QString("sitemaps"), ::OpenAPI::toJsonValue(m_sitemaps));
    }
    return obj;
}

qint64 OAISitemapsReport::getCount() const {
    return m_count;
}
void OAISitemapsReport::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISitemapsReport::is_count_Set() const{
    return m_count_isSet;
}

bool OAISitemapsReport::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAISitemapsReportSitemap> OAISitemapsReport::getErrors() const {
    return m_errors;
}
void OAISitemapsReport::setErrors(const QList<OAISitemapsReportSitemap> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAISitemapsReport::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAISitemapsReport::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAISitemapsReportSitemap> OAISitemapsReport::getSitemapIndexes() const {
    return m_sitemap_indexes;
}
void OAISitemapsReport::setSitemapIndexes(const QList<OAISitemapsReportSitemap> &sitemap_indexes) {
    m_sitemap_indexes = sitemap_indexes;
    m_sitemap_indexes_isSet = true;
}

bool OAISitemapsReport::is_sitemap_indexes_Set() const{
    return m_sitemap_indexes_isSet;
}

bool OAISitemapsReport::is_sitemap_indexes_Valid() const{
    return m_sitemap_indexes_isValid;
}

OAISitemapsReportOnly OAISitemapsReport::getSitemapOnly() const {
    return m_sitemap_only;
}
void OAISitemapsReport::setSitemapOnly(const OAISitemapsReportOnly &sitemap_only) {
    m_sitemap_only = sitemap_only;
    m_sitemap_only_isSet = true;
}

bool OAISitemapsReport::is_sitemap_only_Set() const{
    return m_sitemap_only_isSet;
}

bool OAISitemapsReport::is_sitemap_only_Valid() const{
    return m_sitemap_only_isValid;
}

QList<OAISitemapsReportSitemap> OAISitemapsReport::getSitemaps() const {
    return m_sitemaps;
}
void OAISitemapsReport::setSitemaps(const QList<OAISitemapsReportSitemap> &sitemaps) {
    m_sitemaps = sitemaps;
    m_sitemaps_isSet = true;
}

bool OAISitemapsReport::is_sitemaps_Set() const{
    return m_sitemaps_isSet;
}

bool OAISitemapsReport::is_sitemaps_Valid() const{
    return m_sitemaps_isValid;
}

bool OAISitemapsReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemap_indexes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemap_only.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemaps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISitemapsReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_errors_isValid && m_sitemap_indexes_isValid && m_sitemap_only_isValid && m_sitemaps_isValid && true;
}

} // namespace OpenAPI
