/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_date_joined_isSet = false;
    m_date_joined_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_is_organization_isSet = false;
    m_is_organization_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_date_joined_isValid = ::OpenAPI::fromJsonValue(m_date_joined, json[QString("date_joined")]);
    m_date_joined_isSet = !json[QString("date_joined")].isNull() && m_date_joined_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_is_organization_isValid = ::OpenAPI::fromJsonValue(m_is_organization, json[QString("is_organization")]);
    m_is_organization_isSet = !json[QString("is_organization")].isNull() && m_is_organization_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_date_joined_isSet) {
        obj.insert(QString("date_joined"), ::OpenAPI::toJsonValue(m_date_joined));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_is_organization_isSet) {
        obj.insert(QString("is_organization"), ::OpenAPI::toJsonValue(m_is_organization));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIUser::getCompanyName() const {
    return m_company_name;
}
void OAIUser::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIUser::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIUser::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QDateTime OAIUser::getDateJoined() const {
    return m_date_joined;
}
void OAIUser::setDateJoined(const QDateTime &date_joined) {
    m_date_joined = date_joined;
    m_date_joined_isSet = true;
}

bool OAIUser::is_date_joined_Set() const{
    return m_date_joined_isSet;
}

bool OAIUser::is_date_joined_Valid() const{
    return m_date_joined_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser::getIsOrganization() const {
    return m_is_organization;
}
void OAIUser::setIsOrganization(const QString &is_organization) {
    m_is_organization = is_organization;
    m_is_organization_isSet = true;
}

bool OAIUser::is_is_organization_Set() const{
    return m_is_organization_isSet;
}

bool OAIUser::is_is_organization_Valid() const{
    return m_is_organization_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUser::getLogin() const {
    return m_login;
}
void OAIUser::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUser::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUser::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUser::getStatus() const {
    return m_status;
}
void OAIUser::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUser::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUser::getUrl() const {
    return m_url;
}
void OAIUser::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUser::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUser::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
