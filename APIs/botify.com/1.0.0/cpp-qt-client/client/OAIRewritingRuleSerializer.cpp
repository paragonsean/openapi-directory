/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewritingRuleSerializer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewritingRuleSerializer::OAIRewritingRuleSerializer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewritingRuleSerializer::OAIRewritingRuleSerializer() {
    this->initializeModel();
}

OAIRewritingRuleSerializer::~OAIRewritingRuleSerializer() {}

void OAIRewritingRuleSerializer::initializeModel() {

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_replace_isSet = false;
    m_replace_isValid = false;
}

void OAIRewritingRuleSerializer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewritingRuleSerializer::fromJsonObject(QJsonObject json) {

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignore_case")]);
    m_ignore_case_isSet = !json[QString("ignore_case")].isNull() && m_ignore_case_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_replace_isValid = ::OpenAPI::fromJsonValue(m_replace, json[QString("replace")]);
    m_replace_isSet = !json[QString("replace")].isNull() && m_replace_isValid;
}

QString OAIRewritingRuleSerializer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewritingRuleSerializer::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignore_case"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_replace_isSet) {
        obj.insert(QString("replace"), ::OpenAPI::toJsonValue(m_replace));
    }
    return obj;
}

bool OAIRewritingRuleSerializer::isIgnoreCase() const {
    return m_ignore_case;
}
void OAIRewritingRuleSerializer::setIgnoreCase(const bool &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIRewritingRuleSerializer::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIRewritingRuleSerializer::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

QString OAIRewritingRuleSerializer::getRegex() const {
    return m_regex;
}
void OAIRewritingRuleSerializer::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIRewritingRuleSerializer::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIRewritingRuleSerializer::is_regex_Valid() const{
    return m_regex_isValid;
}

QString OAIRewritingRuleSerializer::getReplace() const {
    return m_replace;
}
void OAIRewritingRuleSerializer::setReplace(const QString &replace) {
    m_replace = replace;
    m_replace_isSet = true;
}

bool OAIRewritingRuleSerializer::is_replace_Set() const{
    return m_replace_isSet;
}

bool OAIRewritingRuleSerializer::is_replace_Valid() const{
    return m_replace_isValid;
}

bool OAIRewritingRuleSerializer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewritingRuleSerializer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ignore_case_isValid && m_regex_isValid && m_replace_isValid && true;
}

} // namespace OpenAPI
