/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlDatamodelField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlDatamodelField::OAICrawlDatamodelField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlDatamodelField::OAICrawlDatamodelField() {
    this->initializeModel();
}

OAICrawlDatamodelField::~OAICrawlDatamodelField() {}

void OAICrawlDatamodelField::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multiple_isSet = false;
    m_multiple_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICrawlDatamodelField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlDatamodelField::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multiple_isValid = ::OpenAPI::fromJsonValue(m_multiple, json[QString("multiple")]);
    m_multiple_isSet = !json[QString("multiple")].isNull() && m_multiple_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICrawlDatamodelField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlDatamodelField::asJsonObject() const {
    QJsonObject obj;
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multiple_isSet) {
        obj.insert(QString("multiple"), ::OpenAPI::toJsonValue(m_multiple));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICrawlDatamodelField::getGroup() const {
    return m_group;
}
void OAICrawlDatamodelField::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAICrawlDatamodelField::is_group_Set() const{
    return m_group_isSet;
}

bool OAICrawlDatamodelField::is_group_Valid() const{
    return m_group_isValid;
}

QString OAICrawlDatamodelField::getId() const {
    return m_id;
}
void OAICrawlDatamodelField::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICrawlDatamodelField::is_id_Set() const{
    return m_id_isSet;
}

bool OAICrawlDatamodelField::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICrawlDatamodelField::isMultiple() const {
    return m_multiple;
}
void OAICrawlDatamodelField::setMultiple(const bool &multiple) {
    m_multiple = multiple;
    m_multiple_isSet = true;
}

bool OAICrawlDatamodelField::is_multiple_Set() const{
    return m_multiple_isSet;
}

bool OAICrawlDatamodelField::is_multiple_Valid() const{
    return m_multiple_isValid;
}

QString OAICrawlDatamodelField::getName() const {
    return m_name;
}
void OAICrawlDatamodelField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICrawlDatamodelField::is_name_Set() const{
    return m_name_isSet;
}

bool OAICrawlDatamodelField::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICrawlDatamodelField::getPermissions() const {
    return m_permissions;
}
void OAICrawlDatamodelField::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAICrawlDatamodelField::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAICrawlDatamodelField::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAICrawlDatamodelField::getSubtype() const {
    return m_subtype;
}
void OAICrawlDatamodelField::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAICrawlDatamodelField::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAICrawlDatamodelField::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAICrawlDatamodelField::getType() const {
    return m_type;
}
void OAICrawlDatamodelField::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICrawlDatamodelField::is_type_Set() const{
    return m_type_isSet;
}

bool OAICrawlDatamodelField::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICrawlDatamodelField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlDatamodelField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_isValid && m_id_isValid && m_multiple_isValid && m_name_isValid && m_permissions_isValid && m_subtype_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
