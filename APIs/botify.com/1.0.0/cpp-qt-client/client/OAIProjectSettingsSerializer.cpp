/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSettingsSerializer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSettingsSerializer::OAIProjectSettingsSerializer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSettingsSerializer::OAIProjectSettingsSerializer() {
    this->initializeModel();
}

OAIProjectSettingsSerializer::~OAIProjectSettingsSerializer() {}

void OAIProjectSettingsSerializer::initializeModel() {

    m_allowed_domains_isSet = false;
    m_allowed_domains_isValid = false;

    m_blacklisted_domains_isSet = false;
    m_blacklisted_domains_isValid = false;

    m_compare_crawl_isSet = false;
    m_compare_crawl_isValid = false;

    m_crawl_gzip_isSet = false;
    m_crawl_gzip_isValid = false;

    m_extra_headers_isSet = false;
    m_extra_headers_isValid = false;

    m_google_analytics_account_email_isSet = false;
    m_google_analytics_account_email_isValid = false;

    m_google_analytics_nb_days_isSet = false;
    m_google_analytics_nb_days_isValid = false;

    m_google_analytics_site_id_isSet = false;
    m_google_analytics_site_id_isValid = false;

    m_google_social_auth_id_isSet = false;
    m_google_social_auth_id_isValid = false;

    m_has_robots_txt_isSet = false;
    m_has_robots_txt_isValid = false;

    m_header_settings_isSet = false;
    m_header_settings_isValid = false;

    m_max_depth_isSet = false;
    m_max_depth_isValid = false;

    m_max_nb_pages_isSet = false;
    m_max_nb_pages_isValid = false;

    m_max_pages_per_sec_isSet = false;
    m_max_pages_per_sec_isValid = false;

    m_respect_nofollow_isSet = false;
    m_respect_nofollow_isValid = false;

    m_sitemaps_isSet = false;
    m_sitemaps_isValid = false;

    m_start_urls_isSet = false;
    m_start_urls_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIProjectSettingsSerializer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSettingsSerializer::fromJsonObject(QJsonObject json) {

    m_allowed_domains_isValid = ::OpenAPI::fromJsonValue(m_allowed_domains, json[QString("allowed_domains")]);
    m_allowed_domains_isSet = !json[QString("allowed_domains")].isNull() && m_allowed_domains_isValid;

    m_blacklisted_domains_isValid = ::OpenAPI::fromJsonValue(m_blacklisted_domains, json[QString("blacklisted_domains")]);
    m_blacklisted_domains_isSet = !json[QString("blacklisted_domains")].isNull() && m_blacklisted_domains_isValid;

    m_compare_crawl_isValid = ::OpenAPI::fromJsonValue(m_compare_crawl, json[QString("compare_crawl")]);
    m_compare_crawl_isSet = !json[QString("compare_crawl")].isNull() && m_compare_crawl_isValid;

    m_crawl_gzip_isValid = ::OpenAPI::fromJsonValue(m_crawl_gzip, json[QString("crawl_gzip")]);
    m_crawl_gzip_isSet = !json[QString("crawl_gzip")].isNull() && m_crawl_gzip_isValid;

    m_extra_headers_isValid = ::OpenAPI::fromJsonValue(m_extra_headers, json[QString("extra_headers")]);
    m_extra_headers_isSet = !json[QString("extra_headers")].isNull() && m_extra_headers_isValid;

    m_google_analytics_account_email_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_account_email, json[QString("google_analytics_account_email")]);
    m_google_analytics_account_email_isSet = !json[QString("google_analytics_account_email")].isNull() && m_google_analytics_account_email_isValid;

    m_google_analytics_nb_days_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_nb_days, json[QString("google_analytics_nb_days")]);
    m_google_analytics_nb_days_isSet = !json[QString("google_analytics_nb_days")].isNull() && m_google_analytics_nb_days_isValid;

    m_google_analytics_site_id_isValid = ::OpenAPI::fromJsonValue(m_google_analytics_site_id, json[QString("google_analytics_site_id")]);
    m_google_analytics_site_id_isSet = !json[QString("google_analytics_site_id")].isNull() && m_google_analytics_site_id_isValid;

    m_google_social_auth_id_isValid = ::OpenAPI::fromJsonValue(m_google_social_auth_id, json[QString("google_social_auth_id")]);
    m_google_social_auth_id_isSet = !json[QString("google_social_auth_id")].isNull() && m_google_social_auth_id_isValid;

    m_has_robots_txt_isValid = ::OpenAPI::fromJsonValue(m_has_robots_txt, json[QString("has_robots_txt")]);
    m_has_robots_txt_isSet = !json[QString("has_robots_txt")].isNull() && m_has_robots_txt_isValid;

    m_header_settings_isValid = ::OpenAPI::fromJsonValue(m_header_settings, json[QString("header_settings")]);
    m_header_settings_isSet = !json[QString("header_settings")].isNull() && m_header_settings_isValid;

    m_max_depth_isValid = ::OpenAPI::fromJsonValue(m_max_depth, json[QString("max_depth")]);
    m_max_depth_isSet = !json[QString("max_depth")].isNull() && m_max_depth_isValid;

    m_max_nb_pages_isValid = ::OpenAPI::fromJsonValue(m_max_nb_pages, json[QString("max_nb_pages")]);
    m_max_nb_pages_isSet = !json[QString("max_nb_pages")].isNull() && m_max_nb_pages_isValid;

    m_max_pages_per_sec_isValid = ::OpenAPI::fromJsonValue(m_max_pages_per_sec, json[QString("max_pages_per_sec")]);
    m_max_pages_per_sec_isSet = !json[QString("max_pages_per_sec")].isNull() && m_max_pages_per_sec_isValid;

    m_respect_nofollow_isValid = ::OpenAPI::fromJsonValue(m_respect_nofollow, json[QString("respect_nofollow")]);
    m_respect_nofollow_isSet = !json[QString("respect_nofollow")].isNull() && m_respect_nofollow_isValid;

    m_sitemaps_isValid = ::OpenAPI::fromJsonValue(m_sitemaps, json[QString("sitemaps")]);
    m_sitemaps_isSet = !json[QString("sitemaps")].isNull() && m_sitemaps_isValid;

    m_start_urls_isValid = ::OpenAPI::fromJsonValue(m_start_urls, json[QString("start_urls")]);
    m_start_urls_isSet = !json[QString("start_urls")].isNull() && m_start_urls_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;
}

QString OAIProjectSettingsSerializer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSettingsSerializer::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_domains.size() > 0) {
        obj.insert(QString("allowed_domains"), ::OpenAPI::toJsonValue(m_allowed_domains));
    }
    if (m_blacklisted_domains.size() > 0) {
        obj.insert(QString("blacklisted_domains"), ::OpenAPI::toJsonValue(m_blacklisted_domains));
    }
    if (m_compare_crawl_isSet) {
        obj.insert(QString("compare_crawl"), ::OpenAPI::toJsonValue(m_compare_crawl));
    }
    if (m_crawl_gzip_isSet) {
        obj.insert(QString("crawl_gzip"), ::OpenAPI::toJsonValue(m_crawl_gzip));
    }
    if (m_extra_headers_isSet) {
        obj.insert(QString("extra_headers"), ::OpenAPI::toJsonValue(m_extra_headers));
    }
    if (m_google_analytics_account_email_isSet) {
        obj.insert(QString("google_analytics_account_email"), ::OpenAPI::toJsonValue(m_google_analytics_account_email));
    }
    if (m_google_analytics_nb_days_isSet) {
        obj.insert(QString("google_analytics_nb_days"), ::OpenAPI::toJsonValue(m_google_analytics_nb_days));
    }
    if (m_google_analytics_site_id_isSet) {
        obj.insert(QString("google_analytics_site_id"), ::OpenAPI::toJsonValue(m_google_analytics_site_id));
    }
    if (m_google_social_auth_id_isSet) {
        obj.insert(QString("google_social_auth_id"), ::OpenAPI::toJsonValue(m_google_social_auth_id));
    }
    if (m_has_robots_txt_isSet) {
        obj.insert(QString("has_robots_txt"), ::OpenAPI::toJsonValue(m_has_robots_txt));
    }
    if (m_header_settings.size() > 0) {
        obj.insert(QString("header_settings"), ::OpenAPI::toJsonValue(m_header_settings));
    }
    if (m_max_depth_isSet) {
        obj.insert(QString("max_depth"), ::OpenAPI::toJsonValue(m_max_depth));
    }
    if (m_max_nb_pages_isSet) {
        obj.insert(QString("max_nb_pages"), ::OpenAPI::toJsonValue(m_max_nb_pages));
    }
    if (m_max_pages_per_sec_isSet) {
        obj.insert(QString("max_pages_per_sec"), ::OpenAPI::toJsonValue(m_max_pages_per_sec));
    }
    if (m_respect_nofollow_isSet) {
        obj.insert(QString("respect_nofollow"), ::OpenAPI::toJsonValue(m_respect_nofollow));
    }
    if (m_sitemaps.size() > 0) {
        obj.insert(QString("sitemaps"), ::OpenAPI::toJsonValue(m_sitemaps));
    }
    if (m_start_urls.size() > 0) {
        obj.insert(QString("start_urls"), ::OpenAPI::toJsonValue(m_start_urls));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QList<QString> OAIProjectSettingsSerializer::getAllowedDomains() const {
    return m_allowed_domains;
}
void OAIProjectSettingsSerializer::setAllowedDomains(const QList<QString> &allowed_domains) {
    m_allowed_domains = allowed_domains;
    m_allowed_domains_isSet = true;
}

bool OAIProjectSettingsSerializer::is_allowed_domains_Set() const{
    return m_allowed_domains_isSet;
}

bool OAIProjectSettingsSerializer::is_allowed_domains_Valid() const{
    return m_allowed_domains_isValid;
}

QList<QString> OAIProjectSettingsSerializer::getBlacklistedDomains() const {
    return m_blacklisted_domains;
}
void OAIProjectSettingsSerializer::setBlacklistedDomains(const QList<QString> &blacklisted_domains) {
    m_blacklisted_domains = blacklisted_domains;
    m_blacklisted_domains_isSet = true;
}

bool OAIProjectSettingsSerializer::is_blacklisted_domains_Set() const{
    return m_blacklisted_domains_isSet;
}

bool OAIProjectSettingsSerializer::is_blacklisted_domains_Valid() const{
    return m_blacklisted_domains_isValid;
}

bool OAIProjectSettingsSerializer::isCompareCrawl() const {
    return m_compare_crawl;
}
void OAIProjectSettingsSerializer::setCompareCrawl(const bool &compare_crawl) {
    m_compare_crawl = compare_crawl;
    m_compare_crawl_isSet = true;
}

bool OAIProjectSettingsSerializer::is_compare_crawl_Set() const{
    return m_compare_crawl_isSet;
}

bool OAIProjectSettingsSerializer::is_compare_crawl_Valid() const{
    return m_compare_crawl_isValid;
}

bool OAIProjectSettingsSerializer::isCrawlGzip() const {
    return m_crawl_gzip;
}
void OAIProjectSettingsSerializer::setCrawlGzip(const bool &crawl_gzip) {
    m_crawl_gzip = crawl_gzip;
    m_crawl_gzip_isSet = true;
}

bool OAIProjectSettingsSerializer::is_crawl_gzip_Set() const{
    return m_crawl_gzip_isSet;
}

bool OAIProjectSettingsSerializer::is_crawl_gzip_Valid() const{
    return m_crawl_gzip_isValid;
}

QString OAIProjectSettingsSerializer::getExtraHeaders() const {
    return m_extra_headers;
}
void OAIProjectSettingsSerializer::setExtraHeaders(const QString &extra_headers) {
    m_extra_headers = extra_headers;
    m_extra_headers_isSet = true;
}

bool OAIProjectSettingsSerializer::is_extra_headers_Set() const{
    return m_extra_headers_isSet;
}

bool OAIProjectSettingsSerializer::is_extra_headers_Valid() const{
    return m_extra_headers_isValid;
}

QString OAIProjectSettingsSerializer::getGoogleAnalyticsAccountEmail() const {
    return m_google_analytics_account_email;
}
void OAIProjectSettingsSerializer::setGoogleAnalyticsAccountEmail(const QString &google_analytics_account_email) {
    m_google_analytics_account_email = google_analytics_account_email;
    m_google_analytics_account_email_isSet = true;
}

bool OAIProjectSettingsSerializer::is_google_analytics_account_email_Set() const{
    return m_google_analytics_account_email_isSet;
}

bool OAIProjectSettingsSerializer::is_google_analytics_account_email_Valid() const{
    return m_google_analytics_account_email_isValid;
}

qint64 OAIProjectSettingsSerializer::getGoogleAnalyticsNbDays() const {
    return m_google_analytics_nb_days;
}
void OAIProjectSettingsSerializer::setGoogleAnalyticsNbDays(const qint64 &google_analytics_nb_days) {
    m_google_analytics_nb_days = google_analytics_nb_days;
    m_google_analytics_nb_days_isSet = true;
}

bool OAIProjectSettingsSerializer::is_google_analytics_nb_days_Set() const{
    return m_google_analytics_nb_days_isSet;
}

bool OAIProjectSettingsSerializer::is_google_analytics_nb_days_Valid() const{
    return m_google_analytics_nb_days_isValid;
}

qint64 OAIProjectSettingsSerializer::getGoogleAnalyticsSiteId() const {
    return m_google_analytics_site_id;
}
void OAIProjectSettingsSerializer::setGoogleAnalyticsSiteId(const qint64 &google_analytics_site_id) {
    m_google_analytics_site_id = google_analytics_site_id;
    m_google_analytics_site_id_isSet = true;
}

bool OAIProjectSettingsSerializer::is_google_analytics_site_id_Set() const{
    return m_google_analytics_site_id_isSet;
}

bool OAIProjectSettingsSerializer::is_google_analytics_site_id_Valid() const{
    return m_google_analytics_site_id_isValid;
}

qint64 OAIProjectSettingsSerializer::getGoogleSocialAuthId() const {
    return m_google_social_auth_id;
}
void OAIProjectSettingsSerializer::setGoogleSocialAuthId(const qint64 &google_social_auth_id) {
    m_google_social_auth_id = google_social_auth_id;
    m_google_social_auth_id_isSet = true;
}

bool OAIProjectSettingsSerializer::is_google_social_auth_id_Set() const{
    return m_google_social_auth_id_isSet;
}

bool OAIProjectSettingsSerializer::is_google_social_auth_id_Valid() const{
    return m_google_social_auth_id_isValid;
}

QString OAIProjectSettingsSerializer::getHasRobotsTxt() const {
    return m_has_robots_txt;
}
void OAIProjectSettingsSerializer::setHasRobotsTxt(const QString &has_robots_txt) {
    m_has_robots_txt = has_robots_txt;
    m_has_robots_txt_isSet = true;
}

bool OAIProjectSettingsSerializer::is_has_robots_txt_Set() const{
    return m_has_robots_txt_isSet;
}

bool OAIProjectSettingsSerializer::is_has_robots_txt_Valid() const{
    return m_has_robots_txt_isValid;
}

QList<QString> OAIProjectSettingsSerializer::getHeaderSettings() const {
    return m_header_settings;
}
void OAIProjectSettingsSerializer::setHeaderSettings(const QList<QString> &header_settings) {
    m_header_settings = header_settings;
    m_header_settings_isSet = true;
}

bool OAIProjectSettingsSerializer::is_header_settings_Set() const{
    return m_header_settings_isSet;
}

bool OAIProjectSettingsSerializer::is_header_settings_Valid() const{
    return m_header_settings_isValid;
}

qint64 OAIProjectSettingsSerializer::getMaxDepth() const {
    return m_max_depth;
}
void OAIProjectSettingsSerializer::setMaxDepth(const qint64 &max_depth) {
    m_max_depth = max_depth;
    m_max_depth_isSet = true;
}

bool OAIProjectSettingsSerializer::is_max_depth_Set() const{
    return m_max_depth_isSet;
}

bool OAIProjectSettingsSerializer::is_max_depth_Valid() const{
    return m_max_depth_isValid;
}

qint64 OAIProjectSettingsSerializer::getMaxNbPages() const {
    return m_max_nb_pages;
}
void OAIProjectSettingsSerializer::setMaxNbPages(const qint64 &max_nb_pages) {
    m_max_nb_pages = max_nb_pages;
    m_max_nb_pages_isSet = true;
}

bool OAIProjectSettingsSerializer::is_max_nb_pages_Set() const{
    return m_max_nb_pages_isSet;
}

bool OAIProjectSettingsSerializer::is_max_nb_pages_Valid() const{
    return m_max_nb_pages_isValid;
}

qint64 OAIProjectSettingsSerializer::getMaxPagesPerSec() const {
    return m_max_pages_per_sec;
}
void OAIProjectSettingsSerializer::setMaxPagesPerSec(const qint64 &max_pages_per_sec) {
    m_max_pages_per_sec = max_pages_per_sec;
    m_max_pages_per_sec_isSet = true;
}

bool OAIProjectSettingsSerializer::is_max_pages_per_sec_Set() const{
    return m_max_pages_per_sec_isSet;
}

bool OAIProjectSettingsSerializer::is_max_pages_per_sec_Valid() const{
    return m_max_pages_per_sec_isValid;
}

bool OAIProjectSettingsSerializer::isRespectNofollow() const {
    return m_respect_nofollow;
}
void OAIProjectSettingsSerializer::setRespectNofollow(const bool &respect_nofollow) {
    m_respect_nofollow = respect_nofollow;
    m_respect_nofollow_isSet = true;
}

bool OAIProjectSettingsSerializer::is_respect_nofollow_Set() const{
    return m_respect_nofollow_isSet;
}

bool OAIProjectSettingsSerializer::is_respect_nofollow_Valid() const{
    return m_respect_nofollow_isValid;
}

QList<QString> OAIProjectSettingsSerializer::getSitemaps() const {
    return m_sitemaps;
}
void OAIProjectSettingsSerializer::setSitemaps(const QList<QString> &sitemaps) {
    m_sitemaps = sitemaps;
    m_sitemaps_isSet = true;
}

bool OAIProjectSettingsSerializer::is_sitemaps_Set() const{
    return m_sitemaps_isSet;
}

bool OAIProjectSettingsSerializer::is_sitemaps_Valid() const{
    return m_sitemaps_isValid;
}

QList<QString> OAIProjectSettingsSerializer::getStartUrls() const {
    return m_start_urls;
}
void OAIProjectSettingsSerializer::setStartUrls(const QList<QString> &start_urls) {
    m_start_urls = start_urls;
    m_start_urls_isSet = true;
}

bool OAIProjectSettingsSerializer::is_start_urls_Set() const{
    return m_start_urls_isSet;
}

bool OAIProjectSettingsSerializer::is_start_urls_Valid() const{
    return m_start_urls_isValid;
}

QString OAIProjectSettingsSerializer::getUserAgent() const {
    return m_user_agent;
}
void OAIProjectSettingsSerializer::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIProjectSettingsSerializer::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIProjectSettingsSerializer::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIProjectSettingsSerializer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blacklisted_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_crawl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawl_gzip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_nb_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_analytics_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_social_auth_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_robots_txt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_nb_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_pages_per_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respect_nofollow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitemaps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSettingsSerializer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_domains_isValid && m_blacklisted_domains_isValid && m_header_settings_isValid && m_max_nb_pages_isValid && m_sitemaps_isValid && m_start_urls_isValid && true;
}

} // namespace OpenAPI
