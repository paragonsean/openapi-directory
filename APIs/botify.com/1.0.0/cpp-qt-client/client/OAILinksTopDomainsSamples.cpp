/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinksTopDomainsSamples.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinksTopDomainsSamples::OAILinksTopDomainsSamples(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinksTopDomainsSamples::OAILinksTopDomainsSamples() {
    this->initializeModel();
}

OAILinksTopDomainsSamples::~OAILinksTopDomainsSamples() {}

void OAILinksTopDomainsSamples::initializeModel() {

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_unique_links_isSet = false;
    m_unique_links_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAILinksTopDomainsSamples::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinksTopDomainsSamples::fromJsonObject(QJsonObject json) {

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_unique_links_isValid = ::OpenAPI::fromJsonValue(m_unique_links, json[QString("unique_links")]);
    m_unique_links_isSet = !json[QString("unique_links")].isNull() && m_unique_links_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAILinksTopDomainsSamples::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinksTopDomainsSamples::asJsonObject() const {
    QJsonObject obj;
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_unique_links_isSet) {
        obj.insert(QString("unique_links"), ::OpenAPI::toJsonValue(m_unique_links));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAILinksTopDomainsSamples::getSources() const {
    return m_sources;
}
void OAILinksTopDomainsSamples::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAILinksTopDomainsSamples::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAILinksTopDomainsSamples::is_sources_Valid() const{
    return m_sources_isValid;
}

qint64 OAILinksTopDomainsSamples::getUniqueLinks() const {
    return m_unique_links;
}
void OAILinksTopDomainsSamples::setUniqueLinks(const qint64 &unique_links) {
    m_unique_links = unique_links;
    m_unique_links_isSet = true;
}

bool OAILinksTopDomainsSamples::is_unique_links_Set() const{
    return m_unique_links_isSet;
}

bool OAILinksTopDomainsSamples::is_unique_links_Valid() const{
    return m_unique_links_isValid;
}

QString OAILinksTopDomainsSamples::getUrl() const {
    return m_url;
}
void OAILinksTopDomainsSamples::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAILinksTopDomainsSamples::is_url_Set() const{
    return m_url_isSet;
}

bool OAILinksTopDomainsSamples::is_url_Valid() const{
    return m_url_isValid;
}

bool OAILinksTopDomainsSamples::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinksTopDomainsSamples::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sources_isValid && m_unique_links_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
