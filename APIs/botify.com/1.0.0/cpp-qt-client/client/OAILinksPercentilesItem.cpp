/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinksPercentilesItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinksPercentilesItem::OAILinksPercentilesItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinksPercentilesItem::OAILinksPercentilesItem() {
    this->initializeModel();
}

OAILinksPercentilesItem::~OAILinksPercentilesItem() {}

void OAILinksPercentilesItem::initializeModel() {

    m_avg_isSet = false;
    m_avg_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_metric_total_isSet = false;
    m_metric_total_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_url_total_isSet = false;
    m_url_total_isValid = false;
}

void OAILinksPercentilesItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinksPercentilesItem::fromJsonObject(QJsonObject json) {

    m_avg_isValid = ::OpenAPI::fromJsonValue(m_avg, json[QString("avg")]);
    m_avg_isSet = !json[QString("avg")].isNull() && m_avg_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_metric_total_isValid = ::OpenAPI::fromJsonValue(m_metric_total, json[QString("metric_total")]);
    m_metric_total_isSet = !json[QString("metric_total")].isNull() && m_metric_total_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_url_total_isValid = ::OpenAPI::fromJsonValue(m_url_total, json[QString("url_total")]);
    m_url_total_isSet = !json[QString("url_total")].isNull() && m_url_total_isValid;
}

QString OAILinksPercentilesItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinksPercentilesItem::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_isSet) {
        obj.insert(QString("avg"), ::OpenAPI::toJsonValue(m_avg));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_metric_total_isSet) {
        obj.insert(QString("metric_total"), ::OpenAPI::toJsonValue(m_metric_total));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_url_total_isSet) {
        obj.insert(QString("url_total"), ::OpenAPI::toJsonValue(m_url_total));
    }
    return obj;
}

qint64 OAILinksPercentilesItem::getAvg() const {
    return m_avg;
}
void OAILinksPercentilesItem::setAvg(const qint64 &avg) {
    m_avg = avg;
    m_avg_isSet = true;
}

bool OAILinksPercentilesItem::is_avg_Set() const{
    return m_avg_isSet;
}

bool OAILinksPercentilesItem::is_avg_Valid() const{
    return m_avg_isValid;
}

qint64 OAILinksPercentilesItem::getId() const {
    return m_id;
}
void OAILinksPercentilesItem::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILinksPercentilesItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAILinksPercentilesItem::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAILinksPercentilesItem::getMax() const {
    return m_max;
}
void OAILinksPercentilesItem::setMax(const qint64 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAILinksPercentilesItem::is_max_Set() const{
    return m_max_isSet;
}

bool OAILinksPercentilesItem::is_max_Valid() const{
    return m_max_isValid;
}

qint64 OAILinksPercentilesItem::getMetricTotal() const {
    return m_metric_total;
}
void OAILinksPercentilesItem::setMetricTotal(const qint64 &metric_total) {
    m_metric_total = metric_total;
    m_metric_total_isSet = true;
}

bool OAILinksPercentilesItem::is_metric_total_Set() const{
    return m_metric_total_isSet;
}

bool OAILinksPercentilesItem::is_metric_total_Valid() const{
    return m_metric_total_isValid;
}

qint64 OAILinksPercentilesItem::getMin() const {
    return m_min;
}
void OAILinksPercentilesItem::setMin(const qint64 &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAILinksPercentilesItem::is_min_Set() const{
    return m_min_isSet;
}

bool OAILinksPercentilesItem::is_min_Valid() const{
    return m_min_isValid;
}

qint64 OAILinksPercentilesItem::getUrlTotal() const {
    return m_url_total;
}
void OAILinksPercentilesItem::setUrlTotal(const qint64 &url_total) {
    m_url_total = url_total;
    m_url_total_isSet = true;
}

bool OAILinksPercentilesItem::is_url_total_Set() const{
    return m_url_total_isSet;
}

bool OAILinksPercentilesItem::is_url_total_Valid() const{
    return m_url_total_isValid;
}

bool OAILinksPercentilesItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinksPercentilesItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avg_isValid && m_id_isValid && m_max_isValid && m_metric_total_isValid && m_min_isValid && m_url_total_isValid && true;
}

} // namespace OpenAPI
