/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISitemapsReportOnly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISitemapsReportOnly::OAISitemapsReportOnly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISitemapsReportOnly::OAISitemapsReportOnly() {
    this->initializeModel();
}

OAISitemapsReportOnly::~OAISitemapsReportOnly() {}

void OAISitemapsReportOnly::initializeModel() {

    m_in_configuration_isSet = false;
    m_in_configuration_isValid = false;

    m_out_of_configuration_isSet = false;
    m_out_of_configuration_isValid = false;
}

void OAISitemapsReportOnly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISitemapsReportOnly::fromJsonObject(QJsonObject json) {

    m_in_configuration_isValid = ::OpenAPI::fromJsonValue(m_in_configuration, json[QString("in_configuration")]);
    m_in_configuration_isSet = !json[QString("in_configuration")].isNull() && m_in_configuration_isValid;

    m_out_of_configuration_isValid = ::OpenAPI::fromJsonValue(m_out_of_configuration, json[QString("out_of_configuration")]);
    m_out_of_configuration_isSet = !json[QString("out_of_configuration")].isNull() && m_out_of_configuration_isValid;
}

QString OAISitemapsReportOnly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISitemapsReportOnly::asJsonObject() const {
    QJsonObject obj;
    if (m_in_configuration_isSet) {
        obj.insert(QString("in_configuration"), ::OpenAPI::toJsonValue(m_in_configuration));
    }
    if (m_out_of_configuration_isSet) {
        obj.insert(QString("out_of_configuration"), ::OpenAPI::toJsonValue(m_out_of_configuration));
    }
    return obj;
}

qint64 OAISitemapsReportOnly::getInConfiguration() const {
    return m_in_configuration;
}
void OAISitemapsReportOnly::setInConfiguration(const qint64 &in_configuration) {
    m_in_configuration = in_configuration;
    m_in_configuration_isSet = true;
}

bool OAISitemapsReportOnly::is_in_configuration_Set() const{
    return m_in_configuration_isSet;
}

bool OAISitemapsReportOnly::is_in_configuration_Valid() const{
    return m_in_configuration_isValid;
}

qint64 OAISitemapsReportOnly::getOutOfConfiguration() const {
    return m_out_of_configuration;
}
void OAISitemapsReportOnly::setOutOfConfiguration(const qint64 &out_of_configuration) {
    m_out_of_configuration = out_of_configuration;
    m_out_of_configuration_isSet = true;
}

bool OAISitemapsReportOnly::is_out_of_configuration_Set() const{
    return m_out_of_configuration_isSet;
}

bool OAISitemapsReportOnly::is_out_of_configuration_Valid() const{
    return m_out_of_configuration_isValid;
}

bool OAISitemapsReportOnly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISitemapsReportOnly::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_in_configuration_isValid && m_out_of_configuration_isValid && true;
}

} // namespace OpenAPI
