/**
 * Botify API
 * Botify Saas API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIURLRewritingRulesSerializer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIURLRewritingRulesSerializer::OAIURLRewritingRulesSerializer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIURLRewritingRulesSerializer::OAIURLRewritingRulesSerializer() {
    this->initializeModel();
}

OAIURLRewritingRulesSerializer::~OAIURLRewritingRulesSerializer() {}

void OAIURLRewritingRulesSerializer::initializeModel() {

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIURLRewritingRulesSerializer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIURLRewritingRulesSerializer::fromJsonObject(QJsonObject json) {

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIURLRewritingRulesSerializer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIURLRewritingRulesSerializer::asJsonObject() const {
    QJsonObject obj;
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<OAIRewritingRuleSerializer> OAIURLRewritingRulesSerializer::getRules() const {
    return m_rules;
}
void OAIURLRewritingRulesSerializer::setRules(const QList<OAIRewritingRuleSerializer> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIURLRewritingRulesSerializer::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIURLRewritingRulesSerializer::is_rules_Valid() const{
    return m_rules_isValid;
}

QList<QString> OAIURLRewritingRulesSerializer::getUrls() const {
    return m_urls;
}
void OAIURLRewritingRulesSerializer::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIURLRewritingRulesSerializer::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIURLRewritingRulesSerializer::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIURLRewritingRulesSerializer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIURLRewritingRulesSerializer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rules_isValid && m_urls_isValid && true;
}

} // namespace OpenAPI
