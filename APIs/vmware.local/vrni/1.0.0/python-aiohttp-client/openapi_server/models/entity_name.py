# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_type import EntityType
from openapi_server import util


class EntityName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, time: int=None, name: str=None):
        """EntityName - a model defined in OpenAPI

        :param entity_id: The entity_id of this EntityName.
        :param entity_type: The entity_type of this EntityName.
        :param time: The time of this EntityName.
        :param name: The name of this EntityName.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'time': int,
            'name': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'time': 'time',
            'name': 'name'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._time = time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityName of this EntityName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this EntityName.

        Entity Identifier

        :return: The entity_id of this EntityName.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EntityName.

        Entity Identifier

        :param entity_id: The entity_id of this EntityName.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this EntityName.


        :return: The entity_type of this EntityName.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this EntityName.


        :param entity_type: The entity_type of this EntityName.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def time(self):
        """Gets the time of this EntityName.


        :return: The time of this EntityName.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EntityName.


        :param time: The time of this EntityName.
        :type time: int
        """

        self._time = time

    @property
    def name(self):
        """Gets the name of this EntityName.


        :return: The name of this EntityName.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityName.


        :param name: The name of this EntityName.
        :type name: str
        """

        self._name = name
