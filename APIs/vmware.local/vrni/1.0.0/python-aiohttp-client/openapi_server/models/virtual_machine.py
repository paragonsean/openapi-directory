# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_virtual_machine import BaseVirtualMachine
from openapi_server.models.entity_type import EntityType
from openapi_server.models.ip_v4_address import IpV4Address
from openapi_server.models.reference import Reference
from openapi_server.models.rule_set import RuleSet
from openapi_server.models.vlan import Vlan
from openapi_server import util


class VirtualMachine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, default_gateway: str=None, destination_firewall_rules: List[RuleSet]=None, ip_addresses: List[IpV4Address]=None, ip_sets: List[Reference]=None, security_groups: List[Reference]=None, source_firewall_rules: List[RuleSet]=None, vnics: List[Reference]=None, applied_to_destination_rules: List[RuleSet]=None, applied_to_source_rules: List[RuleSet]=None, cluster: Reference=None, datacenter: Reference=None, datastores: List[Reference]=None, destination_inversion_rules: List[RuleSet]=None, folders: List[Reference]=None, host: Reference=None, layer2_networks: List[Reference]=None, nsx_manager: Reference=None, resource_pool: Reference=None, security_tags: List[Reference]=None, source_inversion_rules: List[RuleSet]=None, vcenter_manager: Reference=None, vendor_id: str=None, vlans: List[Vlan]=None):
        """VirtualMachine - a model defined in OpenAPI

        :param entity_id: The entity_id of this VirtualMachine.
        :param entity_type: The entity_type of this VirtualMachine.
        :param name: The name of this VirtualMachine.
        :param default_gateway: The default_gateway of this VirtualMachine.
        :param destination_firewall_rules: The destination_firewall_rules of this VirtualMachine.
        :param ip_addresses: The ip_addresses of this VirtualMachine.
        :param ip_sets: The ip_sets of this VirtualMachine.
        :param security_groups: The security_groups of this VirtualMachine.
        :param source_firewall_rules: The source_firewall_rules of this VirtualMachine.
        :param vnics: The vnics of this VirtualMachine.
        :param applied_to_destination_rules: The applied_to_destination_rules of this VirtualMachine.
        :param applied_to_source_rules: The applied_to_source_rules of this VirtualMachine.
        :param cluster: The cluster of this VirtualMachine.
        :param datacenter: The datacenter of this VirtualMachine.
        :param datastores: The datastores of this VirtualMachine.
        :param destination_inversion_rules: The destination_inversion_rules of this VirtualMachine.
        :param folders: The folders of this VirtualMachine.
        :param host: The host of this VirtualMachine.
        :param layer2_networks: The layer2_networks of this VirtualMachine.
        :param nsx_manager: The nsx_manager of this VirtualMachine.
        :param resource_pool: The resource_pool of this VirtualMachine.
        :param security_tags: The security_tags of this VirtualMachine.
        :param source_inversion_rules: The source_inversion_rules of this VirtualMachine.
        :param vcenter_manager: The vcenter_manager of this VirtualMachine.
        :param vendor_id: The vendor_id of this VirtualMachine.
        :param vlans: The vlans of this VirtualMachine.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'default_gateway': str,
            'destination_firewall_rules': List[RuleSet],
            'ip_addresses': List[IpV4Address],
            'ip_sets': List[Reference],
            'security_groups': List[Reference],
            'source_firewall_rules': List[RuleSet],
            'vnics': List[Reference],
            'applied_to_destination_rules': List[RuleSet],
            'applied_to_source_rules': List[RuleSet],
            'cluster': Reference,
            'datacenter': Reference,
            'datastores': List[Reference],
            'destination_inversion_rules': List[RuleSet],
            'folders': List[Reference],
            'host': Reference,
            'layer2_networks': List[Reference],
            'nsx_manager': Reference,
            'resource_pool': Reference,
            'security_tags': List[Reference],
            'source_inversion_rules': List[RuleSet],
            'vcenter_manager': Reference,
            'vendor_id': str,
            'vlans': List[Vlan]
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'default_gateway': 'default_gateway',
            'destination_firewall_rules': 'destination_firewall_rules',
            'ip_addresses': 'ip_addresses',
            'ip_sets': 'ip_sets',
            'security_groups': 'security_groups',
            'source_firewall_rules': 'source_firewall_rules',
            'vnics': 'vnics',
            'applied_to_destination_rules': 'applied_to_destination_rules',
            'applied_to_source_rules': 'applied_to_source_rules',
            'cluster': 'cluster',
            'datacenter': 'datacenter',
            'datastores': 'datastores',
            'destination_inversion_rules': 'destination_inversion_rules',
            'folders': 'folders',
            'host': 'host',
            'layer2_networks': 'layer2_networks',
            'nsx_manager': 'nsx_manager',
            'resource_pool': 'resource_pool',
            'security_tags': 'security_tags',
            'source_inversion_rules': 'source_inversion_rules',
            'vcenter_manager': 'vcenter_manager',
            'vendor_id': 'vendor_id',
            'vlans': 'vlans'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._default_gateway = default_gateway
        self._destination_firewall_rules = destination_firewall_rules
        self._ip_addresses = ip_addresses
        self._ip_sets = ip_sets
        self._security_groups = security_groups
        self._source_firewall_rules = source_firewall_rules
        self._vnics = vnics
        self._applied_to_destination_rules = applied_to_destination_rules
        self._applied_to_source_rules = applied_to_source_rules
        self._cluster = cluster
        self._datacenter = datacenter
        self._datastores = datastores
        self._destination_inversion_rules = destination_inversion_rules
        self._folders = folders
        self._host = host
        self._layer2_networks = layer2_networks
        self._nsx_manager = nsx_manager
        self._resource_pool = resource_pool
        self._security_tags = security_tags
        self._source_inversion_rules = source_inversion_rules
        self._vcenter_manager = vcenter_manager
        self._vendor_id = vendor_id
        self._vlans = vlans

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachine of this VirtualMachine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this VirtualMachine.


        :return: The entity_id of this VirtualMachine.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this VirtualMachine.


        :param entity_id: The entity_id of this VirtualMachine.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this VirtualMachine.


        :return: The entity_type of this VirtualMachine.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this VirtualMachine.


        :param entity_type: The entity_type of this VirtualMachine.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this VirtualMachine.


        :return: The name of this VirtualMachine.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachine.


        :param name: The name of this VirtualMachine.
        :type name: str
        """

        self._name = name

    @property
    def default_gateway(self):
        """Gets the default_gateway of this VirtualMachine.


        :return: The default_gateway of this VirtualMachine.
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this VirtualMachine.


        :param default_gateway: The default_gateway of this VirtualMachine.
        :type default_gateway: str
        """

        self._default_gateway = default_gateway

    @property
    def destination_firewall_rules(self):
        """Gets the destination_firewall_rules of this VirtualMachine.


        :return: The destination_firewall_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._destination_firewall_rules

    @destination_firewall_rules.setter
    def destination_firewall_rules(self, destination_firewall_rules):
        """Sets the destination_firewall_rules of this VirtualMachine.


        :param destination_firewall_rules: The destination_firewall_rules of this VirtualMachine.
        :type destination_firewall_rules: List[RuleSet]
        """

        self._destination_firewall_rules = destination_firewall_rules

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this VirtualMachine.


        :return: The ip_addresses of this VirtualMachine.
        :rtype: List[IpV4Address]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this VirtualMachine.


        :param ip_addresses: The ip_addresses of this VirtualMachine.
        :type ip_addresses: List[IpV4Address]
        """

        self._ip_addresses = ip_addresses

    @property
    def ip_sets(self):
        """Gets the ip_sets of this VirtualMachine.


        :return: The ip_sets of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._ip_sets

    @ip_sets.setter
    def ip_sets(self, ip_sets):
        """Sets the ip_sets of this VirtualMachine.


        :param ip_sets: The ip_sets of this VirtualMachine.
        :type ip_sets: List[Reference]
        """

        self._ip_sets = ip_sets

    @property
    def security_groups(self):
        """Gets the security_groups of this VirtualMachine.


        :return: The security_groups of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this VirtualMachine.


        :param security_groups: The security_groups of this VirtualMachine.
        :type security_groups: List[Reference]
        """

        self._security_groups = security_groups

    @property
    def source_firewall_rules(self):
        """Gets the source_firewall_rules of this VirtualMachine.


        :return: The source_firewall_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._source_firewall_rules

    @source_firewall_rules.setter
    def source_firewall_rules(self, source_firewall_rules):
        """Sets the source_firewall_rules of this VirtualMachine.


        :param source_firewall_rules: The source_firewall_rules of this VirtualMachine.
        :type source_firewall_rules: List[RuleSet]
        """

        self._source_firewall_rules = source_firewall_rules

    @property
    def vnics(self):
        """Gets the vnics of this VirtualMachine.


        :return: The vnics of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._vnics

    @vnics.setter
    def vnics(self, vnics):
        """Sets the vnics of this VirtualMachine.


        :param vnics: The vnics of this VirtualMachine.
        :type vnics: List[Reference]
        """

        self._vnics = vnics

    @property
    def applied_to_destination_rules(self):
        """Gets the applied_to_destination_rules of this VirtualMachine.


        :return: The applied_to_destination_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._applied_to_destination_rules

    @applied_to_destination_rules.setter
    def applied_to_destination_rules(self, applied_to_destination_rules):
        """Sets the applied_to_destination_rules of this VirtualMachine.


        :param applied_to_destination_rules: The applied_to_destination_rules of this VirtualMachine.
        :type applied_to_destination_rules: List[RuleSet]
        """

        self._applied_to_destination_rules = applied_to_destination_rules

    @property
    def applied_to_source_rules(self):
        """Gets the applied_to_source_rules of this VirtualMachine.


        :return: The applied_to_source_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._applied_to_source_rules

    @applied_to_source_rules.setter
    def applied_to_source_rules(self, applied_to_source_rules):
        """Sets the applied_to_source_rules of this VirtualMachine.


        :param applied_to_source_rules: The applied_to_source_rules of this VirtualMachine.
        :type applied_to_source_rules: List[RuleSet]
        """

        self._applied_to_source_rules = applied_to_source_rules

    @property
    def cluster(self):
        """Gets the cluster of this VirtualMachine.


        :return: The cluster of this VirtualMachine.
        :rtype: Reference
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this VirtualMachine.


        :param cluster: The cluster of this VirtualMachine.
        :type cluster: Reference
        """

        self._cluster = cluster

    @property
    def datacenter(self):
        """Gets the datacenter of this VirtualMachine.


        :return: The datacenter of this VirtualMachine.
        :rtype: Reference
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this VirtualMachine.


        :param datacenter: The datacenter of this VirtualMachine.
        :type datacenter: Reference
        """

        self._datacenter = datacenter

    @property
    def datastores(self):
        """Gets the datastores of this VirtualMachine.


        :return: The datastores of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VirtualMachine.


        :param datastores: The datastores of this VirtualMachine.
        :type datastores: List[Reference]
        """

        self._datastores = datastores

    @property
    def destination_inversion_rules(self):
        """Gets the destination_inversion_rules of this VirtualMachine.


        :return: The destination_inversion_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._destination_inversion_rules

    @destination_inversion_rules.setter
    def destination_inversion_rules(self, destination_inversion_rules):
        """Sets the destination_inversion_rules of this VirtualMachine.


        :param destination_inversion_rules: The destination_inversion_rules of this VirtualMachine.
        :type destination_inversion_rules: List[RuleSet]
        """

        self._destination_inversion_rules = destination_inversion_rules

    @property
    def folders(self):
        """Gets the folders of this VirtualMachine.


        :return: The folders of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this VirtualMachine.


        :param folders: The folders of this VirtualMachine.
        :type folders: List[Reference]
        """

        self._folders = folders

    @property
    def host(self):
        """Gets the host of this VirtualMachine.


        :return: The host of this VirtualMachine.
        :rtype: Reference
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this VirtualMachine.


        :param host: The host of this VirtualMachine.
        :type host: Reference
        """

        self._host = host

    @property
    def layer2_networks(self):
        """Gets the layer2_networks of this VirtualMachine.


        :return: The layer2_networks of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._layer2_networks

    @layer2_networks.setter
    def layer2_networks(self, layer2_networks):
        """Sets the layer2_networks of this VirtualMachine.


        :param layer2_networks: The layer2_networks of this VirtualMachine.
        :type layer2_networks: List[Reference]
        """

        self._layer2_networks = layer2_networks

    @property
    def nsx_manager(self):
        """Gets the nsx_manager of this VirtualMachine.


        :return: The nsx_manager of this VirtualMachine.
        :rtype: Reference
        """
        return self._nsx_manager

    @nsx_manager.setter
    def nsx_manager(self, nsx_manager):
        """Sets the nsx_manager of this VirtualMachine.


        :param nsx_manager: The nsx_manager of this VirtualMachine.
        :type nsx_manager: Reference
        """

        self._nsx_manager = nsx_manager

    @property
    def resource_pool(self):
        """Gets the resource_pool of this VirtualMachine.


        :return: The resource_pool of this VirtualMachine.
        :rtype: Reference
        """
        return self._resource_pool

    @resource_pool.setter
    def resource_pool(self, resource_pool):
        """Sets the resource_pool of this VirtualMachine.


        :param resource_pool: The resource_pool of this VirtualMachine.
        :type resource_pool: Reference
        """

        self._resource_pool = resource_pool

    @property
    def security_tags(self):
        """Gets the security_tags of this VirtualMachine.


        :return: The security_tags of this VirtualMachine.
        :rtype: List[Reference]
        """
        return self._security_tags

    @security_tags.setter
    def security_tags(self, security_tags):
        """Sets the security_tags of this VirtualMachine.


        :param security_tags: The security_tags of this VirtualMachine.
        :type security_tags: List[Reference]
        """

        self._security_tags = security_tags

    @property
    def source_inversion_rules(self):
        """Gets the source_inversion_rules of this VirtualMachine.


        :return: The source_inversion_rules of this VirtualMachine.
        :rtype: List[RuleSet]
        """
        return self._source_inversion_rules

    @source_inversion_rules.setter
    def source_inversion_rules(self, source_inversion_rules):
        """Sets the source_inversion_rules of this VirtualMachine.


        :param source_inversion_rules: The source_inversion_rules of this VirtualMachine.
        :type source_inversion_rules: List[RuleSet]
        """

        self._source_inversion_rules = source_inversion_rules

    @property
    def vcenter_manager(self):
        """Gets the vcenter_manager of this VirtualMachine.


        :return: The vcenter_manager of this VirtualMachine.
        :rtype: Reference
        """
        return self._vcenter_manager

    @vcenter_manager.setter
    def vcenter_manager(self, vcenter_manager):
        """Sets the vcenter_manager of this VirtualMachine.


        :param vcenter_manager: The vcenter_manager of this VirtualMachine.
        :type vcenter_manager: Reference
        """

        self._vcenter_manager = vcenter_manager

    @property
    def vendor_id(self):
        """Gets the vendor_id of this VirtualMachine.


        :return: The vendor_id of this VirtualMachine.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this VirtualMachine.


        :param vendor_id: The vendor_id of this VirtualMachine.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id

    @property
    def vlans(self):
        """Gets the vlans of this VirtualMachine.


        :return: The vlans of this VirtualMachine.
        :rtype: List[Vlan]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """Sets the vlans of this VirtualMachine.


        :param vlans: The vlans of this VirtualMachine.
        :type vlans: List[Vlan]
        """

        self._vlans = vlans
