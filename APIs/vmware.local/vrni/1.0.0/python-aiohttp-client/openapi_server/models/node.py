# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_type import NodeType
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_type: NodeType=None, id: str=None, ip_address: str=None, name: str=None, node_id: str=None, node_type: str=None):
        """Node - a model defined in OpenAPI

        :param entity_type: The entity_type of this Node.
        :param id: The id of this Node.
        :param ip_address: The ip_address of this Node.
        :param name: The name of this Node.
        :param node_id: The node_id of this Node.
        :param node_type: The node_type of this Node.
        """
        self.openapi_types = {
            'entity_type': NodeType,
            'id': str,
            'ip_address': str,
            'name': str,
            'node_id': str,
            'node_type': str
        }

        self.attribute_map = {
            'entity_type': 'entity_type',
            'id': 'id',
            'ip_address': 'ip_address',
            'name': 'name',
            'node_id': 'node_id',
            'node_type': 'node_type'
        }

        self._entity_type = entity_type
        self._id = id
        self._ip_address = ip_address
        self._name = name
        self._node_id = node_id
        self._node_type = node_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_type(self):
        """Gets the entity_type of this Node.


        :return: The entity_type of this Node.
        :rtype: NodeType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Node.


        :param entity_type: The entity_type of this Node.
        :type entity_type: NodeType
        """

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this Node.


        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.
        :type id: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this Node.


        :return: The ip_address of this Node.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Node.


        :param ip_address: The ip_address of this Node.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this Node.


        :return: The node_id of this Node.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this Node.


        :param node_id: The node_id of this Node.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def node_type(self):
        """Gets the node_type of this Node.


        :return: The node_type of this Node.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this Node.


        :param node_type: The node_type of this Node.
        :type node_type: str
        """
        allowed_values = ["PROXY_VM", "PLATFORM_VM"]  # noqa: E501
        if node_type not in allowed_values:
            raise ValueError(
                "Invalid value for `node_type` ({0}), must be one of {1}"
                .format(node_type, allowed_values)
            )

        self._node_type = node_type
