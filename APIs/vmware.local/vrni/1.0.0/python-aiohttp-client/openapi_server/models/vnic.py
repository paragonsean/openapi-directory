# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_vnic import BaseVnic
from openapi_server.models.entity_type import EntityType
from openapi_server.models.ip_v4_address import IpV4Address
from openapi_server.models.reference import Reference
from openapi_server.models.vlan import Vlan
from openapi_server import util


class Vnic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, ip_addresses: List[IpV4Address]=None, layer2_network: Reference=None, vlan: Vlan=None, vm: Reference=None):
        """Vnic - a model defined in OpenAPI

        :param entity_id: The entity_id of this Vnic.
        :param entity_type: The entity_type of this Vnic.
        :param name: The name of this Vnic.
        :param ip_addresses: The ip_addresses of this Vnic.
        :param layer2_network: The layer2_network of this Vnic.
        :param vlan: The vlan of this Vnic.
        :param vm: The vm of this Vnic.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'ip_addresses': List[IpV4Address],
            'layer2_network': Reference,
            'vlan': Vlan,
            'vm': Reference
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'ip_addresses': 'ip_addresses',
            'layer2_network': 'layer2_network',
            'vlan': 'vlan',
            'vm': 'vm'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._ip_addresses = ip_addresses
        self._layer2_network = layer2_network
        self._vlan = vlan
        self._vm = vm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vnic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vnic of this Vnic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this Vnic.


        :return: The entity_id of this Vnic.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Vnic.


        :param entity_id: The entity_id of this Vnic.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Vnic.


        :return: The entity_type of this Vnic.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Vnic.


        :param entity_type: The entity_type of this Vnic.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this Vnic.


        :return: The name of this Vnic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vnic.


        :param name: The name of this Vnic.
        :type name: str
        """

        self._name = name

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this Vnic.


        :return: The ip_addresses of this Vnic.
        :rtype: List[IpV4Address]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this Vnic.


        :param ip_addresses: The ip_addresses of this Vnic.
        :type ip_addresses: List[IpV4Address]
        """

        self._ip_addresses = ip_addresses

    @property
    def layer2_network(self):
        """Gets the layer2_network of this Vnic.


        :return: The layer2_network of this Vnic.
        :rtype: Reference
        """
        return self._layer2_network

    @layer2_network.setter
    def layer2_network(self, layer2_network):
        """Sets the layer2_network of this Vnic.


        :param layer2_network: The layer2_network of this Vnic.
        :type layer2_network: Reference
        """

        self._layer2_network = layer2_network

    @property
    def vlan(self):
        """Gets the vlan of this Vnic.


        :return: The vlan of this Vnic.
        :rtype: Vlan
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this Vnic.


        :param vlan: The vlan of this Vnic.
        :type vlan: Vlan
        """

        self._vlan = vlan

    @property
    def vm(self):
        """Gets the vm of this Vnic.


        :return: The vm of this Vnic.
        :rtype: Reference
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this Vnic.


        :param vm: The vm of this Vnic.
        :type vm: Reference
        """

        self._vm = vm
