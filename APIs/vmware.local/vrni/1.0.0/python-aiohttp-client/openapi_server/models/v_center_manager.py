# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_manager import BaseManager
from openapi_server.models.entity_type import EntityType
from openapi_server.models.ip_v4_address import IpV4Address
from openapi_server.models.reference import Reference
from openapi_server import util


class VCenterManager(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, fqdn: str=None, ip_address: IpV4Address=None, nsx_manager: Reference=None, vm: Reference=None):
        """VCenterManager - a model defined in OpenAPI

        :param entity_id: The entity_id of this VCenterManager.
        :param entity_type: The entity_type of this VCenterManager.
        :param name: The name of this VCenterManager.
        :param fqdn: The fqdn of this VCenterManager.
        :param ip_address: The ip_address of this VCenterManager.
        :param nsx_manager: The nsx_manager of this VCenterManager.
        :param vm: The vm of this VCenterManager.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'fqdn': str,
            'ip_address': IpV4Address,
            'nsx_manager': Reference,
            'vm': Reference
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'fqdn': 'fqdn',
            'ip_address': 'ip_address',
            'nsx_manager': 'nsx_manager',
            'vm': 'vm'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._fqdn = fqdn
        self._ip_address = ip_address
        self._nsx_manager = nsx_manager
        self._vm = vm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VCenterManager':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VCenterManager of this VCenterManager.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this VCenterManager.


        :return: The entity_id of this VCenterManager.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this VCenterManager.


        :param entity_id: The entity_id of this VCenterManager.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this VCenterManager.


        :return: The entity_type of this VCenterManager.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this VCenterManager.


        :param entity_type: The entity_type of this VCenterManager.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this VCenterManager.


        :return: The name of this VCenterManager.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VCenterManager.


        :param name: The name of this VCenterManager.
        :type name: str
        """

        self._name = name

    @property
    def fqdn(self):
        """Gets the fqdn of this VCenterManager.


        :return: The fqdn of this VCenterManager.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this VCenterManager.


        :param fqdn: The fqdn of this VCenterManager.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def ip_address(self):
        """Gets the ip_address of this VCenterManager.


        :return: The ip_address of this VCenterManager.
        :rtype: IpV4Address
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VCenterManager.


        :param ip_address: The ip_address of this VCenterManager.
        :type ip_address: IpV4Address
        """

        self._ip_address = ip_address

    @property
    def nsx_manager(self):
        """Gets the nsx_manager of this VCenterManager.


        :return: The nsx_manager of this VCenterManager.
        :rtype: Reference
        """
        return self._nsx_manager

    @nsx_manager.setter
    def nsx_manager(self, nsx_manager):
        """Sets the nsx_manager of this VCenterManager.


        :param nsx_manager: The nsx_manager of this VCenterManager.
        :type nsx_manager: Reference
        """

        self._nsx_manager = nsx_manager

    @property
    def vm(self):
        """Gets the vm of this VCenterManager.


        :return: The vm of this VCenterManager.
        :rtype: Reference
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this VCenterManager.


        :param vm: The vm of this VCenterManager.
        :type vm: Reference
        """

        self._vm = vm
