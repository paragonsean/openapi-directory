# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_entity import BaseEntity
from openapi_server.models.entity_type import EntityType
from openapi_server.models.reference import Reference
from openapi_server import util


class Host(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, cluster: Reference=None, connection_state: str=None, datastores: List[Reference]=None, maintenance_mode: str=None, nsx_manager: Reference=None, service_tag: str=None, vcenter_manager: Reference=None, vendor_id: str=None, vm_count: int=None, vmknics: List[Reference]=None):
        """Host - a model defined in OpenAPI

        :param entity_id: The entity_id of this Host.
        :param entity_type: The entity_type of this Host.
        :param name: The name of this Host.
        :param cluster: The cluster of this Host.
        :param connection_state: The connection_state of this Host.
        :param datastores: The datastores of this Host.
        :param maintenance_mode: The maintenance_mode of this Host.
        :param nsx_manager: The nsx_manager of this Host.
        :param service_tag: The service_tag of this Host.
        :param vcenter_manager: The vcenter_manager of this Host.
        :param vendor_id: The vendor_id of this Host.
        :param vm_count: The vm_count of this Host.
        :param vmknics: The vmknics of this Host.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'cluster': Reference,
            'connection_state': str,
            'datastores': List[Reference],
            'maintenance_mode': str,
            'nsx_manager': Reference,
            'service_tag': str,
            'vcenter_manager': Reference,
            'vendor_id': str,
            'vm_count': int,
            'vmknics': List[Reference]
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'cluster': 'cluster',
            'connection_state': 'connection_state',
            'datastores': 'datastores',
            'maintenance_mode': 'maintenance_mode',
            'nsx_manager': 'nsx_manager',
            'service_tag': 'service_tag',
            'vcenter_manager': 'vcenter_manager',
            'vendor_id': 'vendor_id',
            'vm_count': 'vm_count',
            'vmknics': 'vmknics'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._cluster = cluster
        self._connection_state = connection_state
        self._datastores = datastores
        self._maintenance_mode = maintenance_mode
        self._nsx_manager = nsx_manager
        self._service_tag = service_tag
        self._vcenter_manager = vcenter_manager
        self._vendor_id = vendor_id
        self._vm_count = vm_count
        self._vmknics = vmknics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Host':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Host of this Host.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this Host.


        :return: The entity_id of this Host.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Host.


        :param entity_id: The entity_id of this Host.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Host.


        :return: The entity_type of this Host.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Host.


        :param entity_type: The entity_type of this Host.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this Host.


        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.
        :type name: str
        """

        self._name = name

    @property
    def cluster(self):
        """Gets the cluster of this Host.


        :return: The cluster of this Host.
        :rtype: Reference
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Host.


        :param cluster: The cluster of this Host.
        :type cluster: Reference
        """

        self._cluster = cluster

    @property
    def connection_state(self):
        """Gets the connection_state of this Host.


        :return: The connection_state of this Host.
        :rtype: str
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this Host.


        :param connection_state: The connection_state of this Host.
        :type connection_state: str
        """

        self._connection_state = connection_state

    @property
    def datastores(self):
        """Gets the datastores of this Host.


        :return: The datastores of this Host.
        :rtype: List[Reference]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this Host.


        :param datastores: The datastores of this Host.
        :type datastores: List[Reference]
        """

        self._datastores = datastores

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this Host.


        :return: The maintenance_mode of this Host.
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this Host.


        :param maintenance_mode: The maintenance_mode of this Host.
        :type maintenance_mode: str
        """

        self._maintenance_mode = maintenance_mode

    @property
    def nsx_manager(self):
        """Gets the nsx_manager of this Host.


        :return: The nsx_manager of this Host.
        :rtype: Reference
        """
        return self._nsx_manager

    @nsx_manager.setter
    def nsx_manager(self, nsx_manager):
        """Sets the nsx_manager of this Host.


        :param nsx_manager: The nsx_manager of this Host.
        :type nsx_manager: Reference
        """

        self._nsx_manager = nsx_manager

    @property
    def service_tag(self):
        """Gets the service_tag of this Host.


        :return: The service_tag of this Host.
        :rtype: str
        """
        return self._service_tag

    @service_tag.setter
    def service_tag(self, service_tag):
        """Sets the service_tag of this Host.


        :param service_tag: The service_tag of this Host.
        :type service_tag: str
        """

        self._service_tag = service_tag

    @property
    def vcenter_manager(self):
        """Gets the vcenter_manager of this Host.


        :return: The vcenter_manager of this Host.
        :rtype: Reference
        """
        return self._vcenter_manager

    @vcenter_manager.setter
    def vcenter_manager(self, vcenter_manager):
        """Sets the vcenter_manager of this Host.


        :param vcenter_manager: The vcenter_manager of this Host.
        :type vcenter_manager: Reference
        """

        self._vcenter_manager = vcenter_manager

    @property
    def vendor_id(self):
        """Gets the vendor_id of this Host.


        :return: The vendor_id of this Host.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this Host.


        :param vendor_id: The vendor_id of this Host.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id

    @property
    def vm_count(self):
        """Gets the vm_count of this Host.


        :return: The vm_count of this Host.
        :rtype: int
        """
        return self._vm_count

    @vm_count.setter
    def vm_count(self, vm_count):
        """Sets the vm_count of this Host.


        :param vm_count: The vm_count of this Host.
        :type vm_count: int
        """

        self._vm_count = vm_count

    @property
    def vmknics(self):
        """Gets the vmknics of this Host.


        :return: The vmknics of this Host.
        :rtype: List[Reference]
        """
        return self._vmknics

    @vmknics.setter
    def vmknics(self, vmknics):
        """Sets the vmknics of this Host.


        :param vmknics: The vmknics of this Host.
        :type vmknics: List[Reference]
        """

        self._vmknics = vmknics
