# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference import Reference
from openapi_server.models.simple_port_range import SimplePortRange
from openapi_server import util


class RecommendedRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, destinations: List[Reference]=None, port_ranges: List[SimplePortRange]=None, protocols: List[str]=None, sources: List[Reference]=None):
        """RecommendedRule - a model defined in OpenAPI

        :param action: The action of this RecommendedRule.
        :param destinations: The destinations of this RecommendedRule.
        :param port_ranges: The port_ranges of this RecommendedRule.
        :param protocols: The protocols of this RecommendedRule.
        :param sources: The sources of this RecommendedRule.
        """
        self.openapi_types = {
            'action': str,
            'destinations': List[Reference],
            'port_ranges': List[SimplePortRange],
            'protocols': List[str],
            'sources': List[Reference]
        }

        self.attribute_map = {
            'action': 'action',
            'destinations': 'destinations',
            'port_ranges': 'port_ranges',
            'protocols': 'protocols',
            'sources': 'sources'
        }

        self._action = action
        self._destinations = destinations
        self._port_ranges = port_ranges
        self._protocols = protocols
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedRule of this RecommendedRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RecommendedRule.


        :return: The action of this RecommendedRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RecommendedRule.


        :param action: The action of this RecommendedRule.
        :type action: str
        """
        allowed_values = ["ALLOW", "DROP"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def destinations(self):
        """Gets the destinations of this RecommendedRule.


        :return: The destinations of this RecommendedRule.
        :rtype: List[Reference]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this RecommendedRule.


        :param destinations: The destinations of this RecommendedRule.
        :type destinations: List[Reference]
        """

        self._destinations = destinations

    @property
    def port_ranges(self):
        """Gets the port_ranges of this RecommendedRule.


        :return: The port_ranges of this RecommendedRule.
        :rtype: List[SimplePortRange]
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this RecommendedRule.


        :param port_ranges: The port_ranges of this RecommendedRule.
        :type port_ranges: List[SimplePortRange]
        """

        self._port_ranges = port_ranges

    @property
    def protocols(self):
        """Gets the protocols of this RecommendedRule.


        :return: The protocols of this RecommendedRule.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this RecommendedRule.


        :param protocols: The protocols of this RecommendedRule.
        :type protocols: List[str]
        """

        self._protocols = protocols

    @property
    def sources(self):
        """Gets the sources of this RecommendedRule.


        :return: The sources of this RecommendedRule.
        :rtype: List[Reference]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this RecommendedRule.


        :param sources: The sources of this RecommendedRule.
        :type sources: List[Reference]
        """

        self._sources = sources
