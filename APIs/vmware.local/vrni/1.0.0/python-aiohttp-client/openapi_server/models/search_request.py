# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.all_entity_type import AllEntityType
from openapi_server.models.sort_by_clause import SortByClause
from openapi_server.models.time_range import TimeRange
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cursor: str=None, entity_type: AllEntityType=None, filter: str=None, size: int=None, sort_by: SortByClause=None, time_range: TimeRange=None):
        """SearchRequest - a model defined in OpenAPI

        :param cursor: The cursor of this SearchRequest.
        :param entity_type: The entity_type of this SearchRequest.
        :param filter: The filter of this SearchRequest.
        :param size: The size of this SearchRequest.
        :param sort_by: The sort_by of this SearchRequest.
        :param time_range: The time_range of this SearchRequest.
        """
        self.openapi_types = {
            'cursor': str,
            'entity_type': AllEntityType,
            'filter': str,
            'size': int,
            'sort_by': SortByClause,
            'time_range': TimeRange
        }

        self.attribute_map = {
            'cursor': 'cursor',
            'entity_type': 'entity_type',
            'filter': 'filter',
            'size': 'size',
            'sort_by': 'sort_by',
            'time_range': 'time_range'
        }

        self._cursor = cursor
        self._entity_type = entity_type
        self._filter = filter
        self._size = size
        self._sort_by = sort_by
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cursor(self):
        """Gets the cursor of this SearchRequest.


        :return: The cursor of this SearchRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this SearchRequest.


        :param cursor: The cursor of this SearchRequest.
        :type cursor: str
        """

        self._cursor = cursor

    @property
    def entity_type(self):
        """Gets the entity_type of this SearchRequest.


        :return: The entity_type of this SearchRequest.
        :rtype: AllEntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this SearchRequest.


        :param entity_type: The entity_type of this SearchRequest.
        :type entity_type: AllEntityType
        """

        self._entity_type = entity_type

    @property
    def filter(self):
        """Gets the filter of this SearchRequest.

        query filter

        :return: The filter of this SearchRequest.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchRequest.

        query filter

        :param filter: The filter of this SearchRequest.
        :type filter: str
        """

        self._filter = filter

    @property
    def size(self):
        """Gets the size of this SearchRequest.


        :return: The size of this SearchRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SearchRequest.


        :param size: The size of this SearchRequest.
        :type size: int
        """

        self._size = size

    @property
    def sort_by(self):
        """Gets the sort_by of this SearchRequest.


        :return: The sort_by of this SearchRequest.
        :rtype: SortByClause
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this SearchRequest.


        :param sort_by: The sort_by of this SearchRequest.
        :type sort_by: SortByClause
        """

        self._sort_by = sort_by

    @property
    def time_range(self):
        """Gets the time_range of this SearchRequest.


        :return: The time_range of this SearchRequest.
        :rtype: TimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this SearchRequest.


        :param time_range: The time_range of this SearchRequest.
        :type time_range: TimeRange
        """

        self._time_range = time_range
