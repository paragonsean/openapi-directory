# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_service import BaseService
from openapi_server.models.entity_type import EntityType
from openapi_server.models.port_range import PortRange
from openapi_server.models.reference import Reference
from openapi_server.models.scope_enum import ScopeEnum
from openapi_server import util


class NSXService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, port_ranges: List[PortRange]=None, protocol: str=None, nsx_managers: List[Reference]=None, scope: ScopeEnum=None, vendor_id: str=None):
        """NSXService - a model defined in OpenAPI

        :param entity_id: The entity_id of this NSXService.
        :param entity_type: The entity_type of this NSXService.
        :param name: The name of this NSXService.
        :param port_ranges: The port_ranges of this NSXService.
        :param protocol: The protocol of this NSXService.
        :param nsx_managers: The nsx_managers of this NSXService.
        :param scope: The scope of this NSXService.
        :param vendor_id: The vendor_id of this NSXService.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'port_ranges': List[PortRange],
            'protocol': str,
            'nsx_managers': List[Reference],
            'scope': ScopeEnum,
            'vendor_id': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'port_ranges': 'port_ranges',
            'protocol': 'protocol',
            'nsx_managers': 'nsx_managers',
            'scope': 'scope',
            'vendor_id': 'vendor_id'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._port_ranges = port_ranges
        self._protocol = protocol
        self._nsx_managers = nsx_managers
        self._scope = scope
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NSXService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NSXService of this NSXService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this NSXService.


        :return: The entity_id of this NSXService.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this NSXService.


        :param entity_id: The entity_id of this NSXService.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this NSXService.


        :return: The entity_type of this NSXService.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this NSXService.


        :param entity_type: The entity_type of this NSXService.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this NSXService.


        :return: The name of this NSXService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NSXService.


        :param name: The name of this NSXService.
        :type name: str
        """

        self._name = name

    @property
    def port_ranges(self):
        """Gets the port_ranges of this NSXService.


        :return: The port_ranges of this NSXService.
        :rtype: List[PortRange]
        """
        return self._port_ranges

    @port_ranges.setter
    def port_ranges(self, port_ranges):
        """Sets the port_ranges of this NSXService.


        :param port_ranges: The port_ranges of this NSXService.
        :type port_ranges: List[PortRange]
        """

        self._port_ranges = port_ranges

    @property
    def protocol(self):
        """Gets the protocol of this NSXService.


        :return: The protocol of this NSXService.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NSXService.


        :param protocol: The protocol of this NSXService.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def nsx_managers(self):
        """Gets the nsx_managers of this NSXService.


        :return: The nsx_managers of this NSXService.
        :rtype: List[Reference]
        """
        return self._nsx_managers

    @nsx_managers.setter
    def nsx_managers(self, nsx_managers):
        """Sets the nsx_managers of this NSXService.


        :param nsx_managers: The nsx_managers of this NSXService.
        :type nsx_managers: List[Reference]
        """

        self._nsx_managers = nsx_managers

    @property
    def scope(self):
        """Gets the scope of this NSXService.


        :return: The scope of this NSXService.
        :rtype: ScopeEnum
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NSXService.


        :param scope: The scope of this NSXService.
        :type scope: ScopeEnum
        """

        self._scope = scope

    @property
    def vendor_id(self):
        """Gets the vendor_id of this NSXService.


        :return: The vendor_id of this NSXService.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this NSXService.


        :param vendor_id: The vendor_id of this NSXService.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
