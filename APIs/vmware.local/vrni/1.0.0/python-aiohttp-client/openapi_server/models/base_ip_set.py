# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_entity import BaseEntity
from openapi_server.models.entity_type import EntityType
from openapi_server.models.ip_address_range import IpAddressRange
from openapi_server.models.ip_numeric_range import IpNumericRange
from openapi_server.models.ip_v4_address import IpV4Address
from openapi_server.models.reference import Reference
from openapi_server.models.rule_set import RuleSet
from openapi_server import util


class BaseIPSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, direct_destination_rules: List[RuleSet]=None, direct_source_rules: List[RuleSet]=None, indirect_destination_rules: List[RuleSet]=None, indirect_source_rules: List[RuleSet]=None, ip_addresses: List[IpV4Address]=None, ip_numeric_ranges: List[IpNumericRange]=None, ip_ranges: List[IpAddressRange]=None, parent_security_groups: List[Reference]=None, translated_vm_count: int=None, vendor: str=None, vendor_id: str=None):
        """BaseIPSet - a model defined in OpenAPI

        :param entity_id: The entity_id of this BaseIPSet.
        :param entity_type: The entity_type of this BaseIPSet.
        :param name: The name of this BaseIPSet.
        :param direct_destination_rules: The direct_destination_rules of this BaseIPSet.
        :param direct_source_rules: The direct_source_rules of this BaseIPSet.
        :param indirect_destination_rules: The indirect_destination_rules of this BaseIPSet.
        :param indirect_source_rules: The indirect_source_rules of this BaseIPSet.
        :param ip_addresses: The ip_addresses of this BaseIPSet.
        :param ip_numeric_ranges: The ip_numeric_ranges of this BaseIPSet.
        :param ip_ranges: The ip_ranges of this BaseIPSet.
        :param parent_security_groups: The parent_security_groups of this BaseIPSet.
        :param translated_vm_count: The translated_vm_count of this BaseIPSet.
        :param vendor: The vendor of this BaseIPSet.
        :param vendor_id: The vendor_id of this BaseIPSet.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'direct_destination_rules': List[RuleSet],
            'direct_source_rules': List[RuleSet],
            'indirect_destination_rules': List[RuleSet],
            'indirect_source_rules': List[RuleSet],
            'ip_addresses': List[IpV4Address],
            'ip_numeric_ranges': List[IpNumericRange],
            'ip_ranges': List[IpAddressRange],
            'parent_security_groups': List[Reference],
            'translated_vm_count': int,
            'vendor': str,
            'vendor_id': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'direct_destination_rules': 'direct_destination_rules',
            'direct_source_rules': 'direct_source_rules',
            'indirect_destination_rules': 'indirect_destination_rules',
            'indirect_source_rules': 'indirect_source_rules',
            'ip_addresses': 'ip_addresses',
            'ip_numeric_ranges': 'ip_numeric_ranges',
            'ip_ranges': 'ip_ranges',
            'parent_security_groups': 'parent_security_groups',
            'translated_vm_count': 'translated_vm_count',
            'vendor': 'vendor',
            'vendor_id': 'vendor_id'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._direct_destination_rules = direct_destination_rules
        self._direct_source_rules = direct_source_rules
        self._indirect_destination_rules = indirect_destination_rules
        self._indirect_source_rules = indirect_source_rules
        self._ip_addresses = ip_addresses
        self._ip_numeric_ranges = ip_numeric_ranges
        self._ip_ranges = ip_ranges
        self._parent_security_groups = parent_security_groups
        self._translated_vm_count = translated_vm_count
        self._vendor = vendor
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseIPSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseIPSet of this BaseIPSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this BaseIPSet.


        :return: The entity_id of this BaseIPSet.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this BaseIPSet.


        :param entity_id: The entity_id of this BaseIPSet.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this BaseIPSet.


        :return: The entity_type of this BaseIPSet.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this BaseIPSet.


        :param entity_type: The entity_type of this BaseIPSet.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this BaseIPSet.


        :return: The name of this BaseIPSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseIPSet.


        :param name: The name of this BaseIPSet.
        :type name: str
        """

        self._name = name

    @property
    def direct_destination_rules(self):
        """Gets the direct_destination_rules of this BaseIPSet.


        :return: The direct_destination_rules of this BaseIPSet.
        :rtype: List[RuleSet]
        """
        return self._direct_destination_rules

    @direct_destination_rules.setter
    def direct_destination_rules(self, direct_destination_rules):
        """Sets the direct_destination_rules of this BaseIPSet.


        :param direct_destination_rules: The direct_destination_rules of this BaseIPSet.
        :type direct_destination_rules: List[RuleSet]
        """

        self._direct_destination_rules = direct_destination_rules

    @property
    def direct_source_rules(self):
        """Gets the direct_source_rules of this BaseIPSet.


        :return: The direct_source_rules of this BaseIPSet.
        :rtype: List[RuleSet]
        """
        return self._direct_source_rules

    @direct_source_rules.setter
    def direct_source_rules(self, direct_source_rules):
        """Sets the direct_source_rules of this BaseIPSet.


        :param direct_source_rules: The direct_source_rules of this BaseIPSet.
        :type direct_source_rules: List[RuleSet]
        """

        self._direct_source_rules = direct_source_rules

    @property
    def indirect_destination_rules(self):
        """Gets the indirect_destination_rules of this BaseIPSet.


        :return: The indirect_destination_rules of this BaseIPSet.
        :rtype: List[RuleSet]
        """
        return self._indirect_destination_rules

    @indirect_destination_rules.setter
    def indirect_destination_rules(self, indirect_destination_rules):
        """Sets the indirect_destination_rules of this BaseIPSet.


        :param indirect_destination_rules: The indirect_destination_rules of this BaseIPSet.
        :type indirect_destination_rules: List[RuleSet]
        """

        self._indirect_destination_rules = indirect_destination_rules

    @property
    def indirect_source_rules(self):
        """Gets the indirect_source_rules of this BaseIPSet.


        :return: The indirect_source_rules of this BaseIPSet.
        :rtype: List[RuleSet]
        """
        return self._indirect_source_rules

    @indirect_source_rules.setter
    def indirect_source_rules(self, indirect_source_rules):
        """Sets the indirect_source_rules of this BaseIPSet.


        :param indirect_source_rules: The indirect_source_rules of this BaseIPSet.
        :type indirect_source_rules: List[RuleSet]
        """

        self._indirect_source_rules = indirect_source_rules

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this BaseIPSet.


        :return: The ip_addresses of this BaseIPSet.
        :rtype: List[IpV4Address]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this BaseIPSet.


        :param ip_addresses: The ip_addresses of this BaseIPSet.
        :type ip_addresses: List[IpV4Address]
        """

        self._ip_addresses = ip_addresses

    @property
    def ip_numeric_ranges(self):
        """Gets the ip_numeric_ranges of this BaseIPSet.


        :return: The ip_numeric_ranges of this BaseIPSet.
        :rtype: List[IpNumericRange]
        """
        return self._ip_numeric_ranges

    @ip_numeric_ranges.setter
    def ip_numeric_ranges(self, ip_numeric_ranges):
        """Sets the ip_numeric_ranges of this BaseIPSet.


        :param ip_numeric_ranges: The ip_numeric_ranges of this BaseIPSet.
        :type ip_numeric_ranges: List[IpNumericRange]
        """

        self._ip_numeric_ranges = ip_numeric_ranges

    @property
    def ip_ranges(self):
        """Gets the ip_ranges of this BaseIPSet.


        :return: The ip_ranges of this BaseIPSet.
        :rtype: List[IpAddressRange]
        """
        return self._ip_ranges

    @ip_ranges.setter
    def ip_ranges(self, ip_ranges):
        """Sets the ip_ranges of this BaseIPSet.


        :param ip_ranges: The ip_ranges of this BaseIPSet.
        :type ip_ranges: List[IpAddressRange]
        """

        self._ip_ranges = ip_ranges

    @property
    def parent_security_groups(self):
        """Gets the parent_security_groups of this BaseIPSet.


        :return: The parent_security_groups of this BaseIPSet.
        :rtype: List[Reference]
        """
        return self._parent_security_groups

    @parent_security_groups.setter
    def parent_security_groups(self, parent_security_groups):
        """Sets the parent_security_groups of this BaseIPSet.


        :param parent_security_groups: The parent_security_groups of this BaseIPSet.
        :type parent_security_groups: List[Reference]
        """

        self._parent_security_groups = parent_security_groups

    @property
    def translated_vm_count(self):
        """Gets the translated_vm_count of this BaseIPSet.


        :return: The translated_vm_count of this BaseIPSet.
        :rtype: int
        """
        return self._translated_vm_count

    @translated_vm_count.setter
    def translated_vm_count(self, translated_vm_count):
        """Sets the translated_vm_count of this BaseIPSet.


        :param translated_vm_count: The translated_vm_count of this BaseIPSet.
        :type translated_vm_count: int
        """

        self._translated_vm_count = translated_vm_count

    @property
    def vendor(self):
        """Gets the vendor of this BaseIPSet.


        :return: The vendor of this BaseIPSet.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this BaseIPSet.


        :param vendor: The vendor of this BaseIPSet.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def vendor_id(self):
        """Gets the vendor_id of this BaseIPSet.


        :return: The vendor_id of this BaseIPSet.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this BaseIPSet.


        :param vendor_id: The vendor_id of this BaseIPSet.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
