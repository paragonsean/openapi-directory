# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_type import NodeType
from openapi_server import util


class NodeId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_type: NodeType=None, id: str=None):
        """NodeId - a model defined in OpenAPI

        :param entity_type: The entity_type of this NodeId.
        :param id: The id of this NodeId.
        """
        self.openapi_types = {
            'entity_type': NodeType,
            'id': str
        }

        self.attribute_map = {
            'entity_type': 'entity_type',
            'id': 'id'
        }

        self._entity_type = entity_type
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeId of this NodeId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_type(self):
        """Gets the entity_type of this NodeId.


        :return: The entity_type of this NodeId.
        :rtype: NodeType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this NodeId.


        :param entity_type: The entity_type of this NodeId.
        :type entity_type: NodeType
        """

        self._entity_type = entity_type

    @property
    def id(self):
        """Gets the id of this NodeId.

        Entity Identifier

        :return: The id of this NodeId.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeId.

        Entity Identifier

        :param id: The id of this NodeId.
        :type id: str
        """

        self._id = id
