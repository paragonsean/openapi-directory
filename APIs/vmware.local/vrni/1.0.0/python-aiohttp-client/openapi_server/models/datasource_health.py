# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasourceHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_error_code: str=None, health_message: str=None, health_status: str=None):
        """DatasourceHealth - a model defined in OpenAPI

        :param health_error_code: The health_error_code of this DatasourceHealth.
        :param health_message: The health_message of this DatasourceHealth.
        :param health_status: The health_status of this DatasourceHealth.
        """
        self.openapi_types = {
            'health_error_code': str,
            'health_message': str,
            'health_status': str
        }

        self.attribute_map = {
            'health_error_code': 'health_error_code',
            'health_message': 'health_message',
            'health_status': 'health_status'
        }

        self._health_error_code = health_error_code
        self._health_message = health_message
        self._health_status = health_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasourceHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasourceHealth of this DatasourceHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_error_code(self):
        """Gets the health_error_code of this DatasourceHealth.


        :return: The health_error_code of this DatasourceHealth.
        :rtype: str
        """
        return self._health_error_code

    @health_error_code.setter
    def health_error_code(self, health_error_code):
        """Sets the health_error_code of this DatasourceHealth.


        :param health_error_code: The health_error_code of this DatasourceHealth.
        :type health_error_code: str
        """

        self._health_error_code = health_error_code

    @property
    def health_message(self):
        """Gets the health_message of this DatasourceHealth.


        :return: The health_message of this DatasourceHealth.
        :rtype: str
        """
        return self._health_message

    @health_message.setter
    def health_message(self, health_message):
        """Sets the health_message of this DatasourceHealth.


        :param health_message: The health_message of this DatasourceHealth.
        :type health_message: str
        """

        self._health_message = health_message

    @property
    def health_status(self):
        """Gets the health_status of this DatasourceHealth.


        :return: The health_status of this DatasourceHealth.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this DatasourceHealth.


        :param health_status: The health_status of this DatasourceHealth.
        :type health_status: str
        """
        allowed_values = ["HEALTHY", "HEALTHY_WITH_WARNINGS", "UNHEALTHY"]  # noqa: E501
        if health_status not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status` ({0}), must be one of {1}"
                .format(health_status, allowed_values)
            )

        self._health_status = health_status
