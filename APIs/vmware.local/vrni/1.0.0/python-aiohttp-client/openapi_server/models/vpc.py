# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_entity import BaseEntity
from openapi_server.models.entity_type import EntityType
from openapi_server.models.ip_v4_address import IpV4Address
from openapi_server import util


class VPC(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, cidr_block: IpV4Address=None, default_vpc: bool=None, last_synched_time: int=None, region: str=None, state: str=None, vendor_id: str=None):
        """VPC - a model defined in OpenAPI

        :param entity_id: The entity_id of this VPC.
        :param entity_type: The entity_type of this VPC.
        :param name: The name of this VPC.
        :param cidr_block: The cidr_block of this VPC.
        :param default_vpc: The default_vpc of this VPC.
        :param last_synched_time: The last_synched_time of this VPC.
        :param region: The region of this VPC.
        :param state: The state of this VPC.
        :param vendor_id: The vendor_id of this VPC.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'cidr_block': IpV4Address,
            'default_vpc': bool,
            'last_synched_time': int,
            'region': str,
            'state': str,
            'vendor_id': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'cidr_block': 'cidr_block',
            'default_vpc': 'default_vpc',
            'last_synched_time': 'last_synched_time',
            'region': 'region',
            'state': 'state',
            'vendor_id': 'vendor_id'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._cidr_block = cidr_block
        self._default_vpc = default_vpc
        self._last_synched_time = last_synched_time
        self._region = region
        self._state = state
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VPC':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VPC of this VPC.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this VPC.


        :return: The entity_id of this VPC.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this VPC.


        :param entity_id: The entity_id of this VPC.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this VPC.


        :return: The entity_type of this VPC.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this VPC.


        :param entity_type: The entity_type of this VPC.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this VPC.


        :return: The name of this VPC.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VPC.


        :param name: The name of this VPC.
        :type name: str
        """

        self._name = name

    @property
    def cidr_block(self):
        """Gets the cidr_block of this VPC.


        :return: The cidr_block of this VPC.
        :rtype: IpV4Address
        """
        return self._cidr_block

    @cidr_block.setter
    def cidr_block(self, cidr_block):
        """Sets the cidr_block of this VPC.


        :param cidr_block: The cidr_block of this VPC.
        :type cidr_block: IpV4Address
        """

        self._cidr_block = cidr_block

    @property
    def default_vpc(self):
        """Gets the default_vpc of this VPC.


        :return: The default_vpc of this VPC.
        :rtype: bool
        """
        return self._default_vpc

    @default_vpc.setter
    def default_vpc(self, default_vpc):
        """Sets the default_vpc of this VPC.


        :param default_vpc: The default_vpc of this VPC.
        :type default_vpc: bool
        """

        self._default_vpc = default_vpc

    @property
    def last_synched_time(self):
        """Gets the last_synched_time of this VPC.


        :return: The last_synched_time of this VPC.
        :rtype: int
        """
        return self._last_synched_time

    @last_synched_time.setter
    def last_synched_time(self, last_synched_time):
        """Sets the last_synched_time of this VPC.


        :param last_synched_time: The last_synched_time of this VPC.
        :type last_synched_time: int
        """

        self._last_synched_time = last_synched_time

    @property
    def region(self):
        """Gets the region of this VPC.


        :return: The region of this VPC.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this VPC.


        :param region: The region of this VPC.
        :type region: str
        """

        self._region = region

    @property
    def state(self):
        """Gets the state of this VPC.


        :return: The state of this VPC.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VPC.


        :param state: The state of this VPC.
        :type state: str
        """

        self._state = state

    @property
    def vendor_id(self):
        """Gets the vendor_id of this VPC.


        :return: The vendor_id of this VPC.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this VPC.


        :param vendor_id: The vendor_id of this VPC.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
