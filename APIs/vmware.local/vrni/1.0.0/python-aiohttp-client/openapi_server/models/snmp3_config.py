# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SNMP3Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_password: str=None, authentication_type: str=None, context_name: str=None, privacy_password: str=None, privacy_type: str=None, username: str=None):
        """SNMP3Config - a model defined in OpenAPI

        :param authentication_password: The authentication_password of this SNMP3Config.
        :param authentication_type: The authentication_type of this SNMP3Config.
        :param context_name: The context_name of this SNMP3Config.
        :param privacy_password: The privacy_password of this SNMP3Config.
        :param privacy_type: The privacy_type of this SNMP3Config.
        :param username: The username of this SNMP3Config.
        """
        self.openapi_types = {
            'authentication_password': str,
            'authentication_type': str,
            'context_name': str,
            'privacy_password': str,
            'privacy_type': str,
            'username': str
        }

        self.attribute_map = {
            'authentication_password': 'authentication_password',
            'authentication_type': 'authentication_type',
            'context_name': 'context_name',
            'privacy_password': 'privacy_password',
            'privacy_type': 'privacy_type',
            'username': 'username'
        }

        self._authentication_password = authentication_password
        self._authentication_type = authentication_type
        self._context_name = context_name
        self._privacy_password = privacy_password
        self._privacy_type = privacy_type
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SNMP3Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SNMP3Config of this SNMP3Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_password(self):
        """Gets the authentication_password of this SNMP3Config.


        :return: The authentication_password of this SNMP3Config.
        :rtype: str
        """
        return self._authentication_password

    @authentication_password.setter
    def authentication_password(self, authentication_password):
        """Sets the authentication_password of this SNMP3Config.


        :param authentication_password: The authentication_password of this SNMP3Config.
        :type authentication_password: str
        """

        self._authentication_password = authentication_password

    @property
    def authentication_type(self):
        """Gets the authentication_type of this SNMP3Config.


        :return: The authentication_type of this SNMP3Config.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this SNMP3Config.


        :param authentication_type: The authentication_type of this SNMP3Config.
        :type authentication_type: str
        """
        allowed_values = ["NO_AUTH", "MD5", "SHA"]  # noqa: E501
        if authentication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_type` ({0}), must be one of {1}"
                .format(authentication_type, allowed_values)
            )

        self._authentication_type = authentication_type

    @property
    def context_name(self):
        """Gets the context_name of this SNMP3Config.


        :return: The context_name of this SNMP3Config.
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this SNMP3Config.


        :param context_name: The context_name of this SNMP3Config.
        :type context_name: str
        """

        self._context_name = context_name

    @property
    def privacy_password(self):
        """Gets the privacy_password of this SNMP3Config.


        :return: The privacy_password of this SNMP3Config.
        :rtype: str
        """
        return self._privacy_password

    @privacy_password.setter
    def privacy_password(self, privacy_password):
        """Sets the privacy_password of this SNMP3Config.


        :param privacy_password: The privacy_password of this SNMP3Config.
        :type privacy_password: str
        """

        self._privacy_password = privacy_password

    @property
    def privacy_type(self):
        """Gets the privacy_type of this SNMP3Config.


        :return: The privacy_type of this SNMP3Config.
        :rtype: str
        """
        return self._privacy_type

    @privacy_type.setter
    def privacy_type(self, privacy_type):
        """Sets the privacy_type of this SNMP3Config.


        :param privacy_type: The privacy_type of this SNMP3Config.
        :type privacy_type: str
        """
        allowed_values = ["AES", "DES", "AES128", "AES192", "AES256", "3DES", "NO_PRIV"]  # noqa: E501
        if privacy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `privacy_type` ({0}), must be one of {1}"
                .format(privacy_type, allowed_values)
            )

        self._privacy_type = privacy_type

    @property
    def username(self):
        """Gets the username of this SNMP3Config.


        :return: The username of this SNMP3Config.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SNMP3Config.


        :param username: The username of this SNMP3Config.
        :type username: str
        """

        self._username = username
