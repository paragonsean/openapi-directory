# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: int=None, token: str=None):
        """Token - a model defined in OpenAPI

        :param expiry: The expiry of this Token.
        :param token: The token of this Token.
        """
        self.openapi_types = {
            'expiry': int,
            'token': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'token': 'token'
        }

        self._expiry = expiry
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this Token.

        expiry epoch time in secs.

        :return: The expiry of this Token.
        :rtype: int
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this Token.

        expiry epoch time in secs.

        :param expiry: The expiry of this Token.
        :type expiry: int
        """

        self._expiry = expiry

    @property
    def token(self):
        """Gets the token of this Token.


        :return: The token of this Token.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Token.


        :param token: The token of this Token.
        :type token: str
        """

        self._token = token
