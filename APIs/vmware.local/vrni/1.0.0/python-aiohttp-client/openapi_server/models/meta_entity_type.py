# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetaEntityType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    GROUP = 'Group'
    BASESECURITYGROUP = 'BaseSecurityGroup'
    BASEEVENT = 'BaseEvent'
    BASEVIRTUALMACHINE = 'BaseVirtualMachine'
    BASEFIREWALLRULE = 'BaseFirewallRule'
    BASEIPSET = 'BaseIPSet'
    BASEL2NETWORK = 'BaseL2Network'
    BASEMANAGER = 'BaseManager'
    BASENSXMANAGER = 'BaseNSXManager'
    BASEFIREWALL = 'BaseFirewall'
    BASESERVICE = 'BaseService'
    BASESERVICEGROUP = 'BaseServiceGroup'
    BASEVNIC = 'BaseVnic'

    def __init__(self):
        """MetaEntityType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetaEntityType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetaEntityType of this MetaEntityType.
        """
        return util.deserialize_model(dikt, cls)
