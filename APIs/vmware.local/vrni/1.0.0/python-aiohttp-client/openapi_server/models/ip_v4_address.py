# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpV4Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, netmask: str=None, network_address: str=None):
        """IpV4Address - a model defined in OpenAPI

        :param ip_address: The ip_address of this IpV4Address.
        :param netmask: The netmask of this IpV4Address.
        :param network_address: The network_address of this IpV4Address.
        """
        self.openapi_types = {
            'ip_address': str,
            'netmask': str,
            'network_address': str
        }

        self.attribute_map = {
            'ip_address': 'ip_address',
            'netmask': 'netmask',
            'network_address': 'network_address'
        }

        self._ip_address = ip_address
        self._netmask = netmask
        self._network_address = network_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpV4Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpV4Address of this IpV4Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this IpV4Address.


        :return: The ip_address of this IpV4Address.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this IpV4Address.


        :param ip_address: The ip_address of this IpV4Address.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def netmask(self):
        """Gets the netmask of this IpV4Address.


        :return: The netmask of this IpV4Address.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this IpV4Address.


        :param netmask: The netmask of this IpV4Address.
        :type netmask: str
        """

        self._netmask = netmask

    @property
    def network_address(self):
        """Gets the network_address of this IpV4Address.


        :return: The network_address of this IpV4Address.
        :rtype: str
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this IpV4Address.


        :param network_address: The network_address of this IpV4Address.
        :type network_address: str
        """

        self._network_address = network_address
