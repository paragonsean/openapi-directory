# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_service_group import BaseServiceGroup
from openapi_server.models.entity_type import EntityType
from openapi_server.models.reference import Reference
from openapi_server.models.scope_enum import ScopeEnum
from openapi_server import util


class NSXServiceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, entity_type: EntityType=None, name: str=None, members: List[Reference]=None, nsx_managers: List[Reference]=None, scope: ScopeEnum=None, vendor_id: str=None):
        """NSXServiceGroup - a model defined in OpenAPI

        :param entity_id: The entity_id of this NSXServiceGroup.
        :param entity_type: The entity_type of this NSXServiceGroup.
        :param name: The name of this NSXServiceGroup.
        :param members: The members of this NSXServiceGroup.
        :param nsx_managers: The nsx_managers of this NSXServiceGroup.
        :param scope: The scope of this NSXServiceGroup.
        :param vendor_id: The vendor_id of this NSXServiceGroup.
        """
        self.openapi_types = {
            'entity_id': str,
            'entity_type': EntityType,
            'name': str,
            'members': List[Reference],
            'nsx_managers': List[Reference],
            'scope': ScopeEnum,
            'vendor_id': str
        }

        self.attribute_map = {
            'entity_id': 'entity_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'members': 'members',
            'nsx_managers': 'nsx_managers',
            'scope': 'scope',
            'vendor_id': 'vendor_id'
        }

        self._entity_id = entity_id
        self._entity_type = entity_type
        self._name = name
        self._members = members
        self._nsx_managers = nsx_managers
        self._scope = scope
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NSXServiceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NSXServiceGroup of this NSXServiceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this NSXServiceGroup.


        :return: The entity_id of this NSXServiceGroup.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this NSXServiceGroup.


        :param entity_id: The entity_id of this NSXServiceGroup.
        :type entity_id: str
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this NSXServiceGroup.


        :return: The entity_type of this NSXServiceGroup.
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this NSXServiceGroup.


        :param entity_type: The entity_type of this NSXServiceGroup.
        :type entity_type: EntityType
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """Gets the name of this NSXServiceGroup.


        :return: The name of this NSXServiceGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NSXServiceGroup.


        :param name: The name of this NSXServiceGroup.
        :type name: str
        """

        self._name = name

    @property
    def members(self):
        """Gets the members of this NSXServiceGroup.


        :return: The members of this NSXServiceGroup.
        :rtype: List[Reference]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this NSXServiceGroup.


        :param members: The members of this NSXServiceGroup.
        :type members: List[Reference]
        """

        self._members = members

    @property
    def nsx_managers(self):
        """Gets the nsx_managers of this NSXServiceGroup.


        :return: The nsx_managers of this NSXServiceGroup.
        :rtype: List[Reference]
        """
        return self._nsx_managers

    @nsx_managers.setter
    def nsx_managers(self, nsx_managers):
        """Sets the nsx_managers of this NSXServiceGroup.


        :param nsx_managers: The nsx_managers of this NSXServiceGroup.
        :type nsx_managers: List[Reference]
        """

        self._nsx_managers = nsx_managers

    @property
    def scope(self):
        """Gets the scope of this NSXServiceGroup.


        :return: The scope of this NSXServiceGroup.
        :rtype: ScopeEnum
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this NSXServiceGroup.


        :param scope: The scope of this NSXServiceGroup.
        :type scope: ScopeEnum
        """

        self._scope = scope

    @property
    def vendor_id(self):
        """Gets the vendor_id of this NSXServiceGroup.


        :return: The vendor_id of this NSXServiceGroup.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this NSXServiceGroup.


        :param vendor_id: The vendor_id of this NSXServiceGroup.
        :type vendor_id: str
        """

        self._vendor_id = vendor_id
