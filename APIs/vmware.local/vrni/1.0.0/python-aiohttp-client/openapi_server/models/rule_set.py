# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reference import Reference
from openapi_server import util


class RuleSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firewall: Reference=None, rule_set_type: str=None, rules: List[Reference]=None):
        """RuleSet - a model defined in OpenAPI

        :param firewall: The firewall of this RuleSet.
        :param rule_set_type: The rule_set_type of this RuleSet.
        :param rules: The rules of this RuleSet.
        """
        self.openapi_types = {
            'firewall': Reference,
            'rule_set_type': str,
            'rules': List[Reference]
        }

        self.attribute_map = {
            'firewall': 'firewall',
            'rule_set_type': 'rule_set_type',
            'rules': 'rules'
        }

        self._firewall = firewall
        self._rule_set_type = rule_set_type
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleSet of this RuleSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firewall(self):
        """Gets the firewall of this RuleSet.


        :return: The firewall of this RuleSet.
        :rtype: Reference
        """
        return self._firewall

    @firewall.setter
    def firewall(self, firewall):
        """Sets the firewall of this RuleSet.


        :param firewall: The firewall of this RuleSet.
        :type firewall: Reference
        """

        self._firewall = firewall

    @property
    def rule_set_type(self):
        """Gets the rule_set_type of this RuleSet.


        :return: The rule_set_type of this RuleSet.
        :rtype: str
        """
        return self._rule_set_type

    @rule_set_type.setter
    def rule_set_type(self, rule_set_type):
        """Sets the rule_set_type of this RuleSet.


        :param rule_set_type: The rule_set_type of this RuleSet.
        :type rule_set_type: str
        """
        allowed_values = ["NSX_STANDARD", "NSX_REDIRECT", "AWS_STANDARD"]  # noqa: E501
        if rule_set_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_set_type` ({0}), must be one of {1}"
                .format(rule_set_type, allowed_values)
            )

        self._rule_set_type = rule_set_type

    @property
    def rules(self):
        """Gets the rules of this RuleSet.


        :return: The rules of this RuleSet.
        :rtype: List[Reference]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this RuleSet.


        :param rules: The rules of this RuleSet.
        :type rules: List[Reference]
        """

        self._rules = rules
