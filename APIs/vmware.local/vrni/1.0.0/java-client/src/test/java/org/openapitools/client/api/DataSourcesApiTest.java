/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.AristaSwitchDataSource;
import org.openapitools.client.model.AristaSwitchDataSourceRequest;
import org.openapitools.client.model.BrocadeSwitchDataSource;
import org.openapitools.client.model.BrocadeSwitchDataSourceRequest;
import org.openapitools.client.model.CheckpointFirewallDataSource;
import org.openapitools.client.model.CheckpointFirewallDataSourceRequest;
import org.openapitools.client.model.CiscoSwitchDataSource;
import org.openapitools.client.model.CiscoSwitchDataSourceRequest;
import org.openapitools.client.model.DataSourceListResponse;
import org.openapitools.client.model.DellSwitchDataSource;
import org.openapitools.client.model.DellSwitchDataSourceRequest;
import org.openapitools.client.model.HPOneViewManagerDataSource;
import org.openapitools.client.model.HPOneViewManagerDataSourceRequest;
import org.openapitools.client.model.HPVCManagerDataSource;
import org.openapitools.client.model.HPVCManagerDataSourceRequest;
import org.openapitools.client.model.JuniperSwitchDataSource;
import org.openapitools.client.model.JuniperSwitchDataSourceRequest;
import org.openapitools.client.model.NSXControllerDataCollection;
import org.openapitools.client.model.NSXVManagerDataSource;
import org.openapitools.client.model.NSXVManagerDataSourceRequest;
import org.openapitools.client.model.PanFirewallDataSource;
import org.openapitools.client.model.PanFirewallDataSourceRequest;
import org.openapitools.client.model.SNMPConfig;
import org.openapitools.client.model.SwitchDataSource;
import org.openapitools.client.model.UCSManagerDataSource;
import org.openapitools.client.model.UCSManagerDataSourceRequest;
import org.openapitools.client.model.VCenterDataSource;
import org.openapitools.client.model.VCenterDataSourceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataSourcesApi
 */
@Disabled
public class DataSourcesApiTest {

    private final DataSourcesApi api = new DataSourcesApi();

    /**
     * Create an arista switch data source
     *
     * Add arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAristaSwitchTest() throws ApiException {
        AristaSwitchDataSourceRequest aristaSwitchDataSourceRequest = null;
        AristaSwitchDataSource response = api.addAristaSwitch(aristaSwitchDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a brocade switch data source
     *
     * Add brocade switch as a data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBrocadeSwitchTest() throws ApiException {
        BrocadeSwitchDataSourceRequest brocadeSwitchDataSourceRequest = null;
        BrocadeSwitchDataSource response = api.addBrocadeSwitch(brocadeSwitchDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a checkpoint firewall
     *
     * Add checkpoint firewall as data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCheckpointFirewallTest() throws ApiException {
        CheckpointFirewallDataSourceRequest checkpointFirewallDataSourceRequest = null;
        CheckpointFirewallDataSource response = api.addCheckpointFirewall(checkpointFirewallDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a cisco switch data source
     *
     * Add cisco switch as data source. User must provide one of ip or fqdn field in the request body. Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCiscoSwitchTest() throws ApiException {
        CiscoSwitchDataSourceRequest ciscoSwitchDataSourceRequest = null;
        CiscoSwitchDataSource response = api.addCiscoSwitch(ciscoSwitchDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a dell switch data source
     *
     * Add a dell switch as data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDellSwitchTest() throws ApiException {
        DellSwitchDataSourceRequest dellSwitchDataSourceRequest = null;
        DellSwitchDataSource response = api.addDellSwitch(dellSwitchDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a hp oneview manager data source
     *
     * Add a hp oneview manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addHpovManagerTest() throws ApiException {
        HPOneViewManagerDataSourceRequest hpOneViewManagerDataSourceRequest = null;
        HPOneViewManagerDataSource response = api.addHpovManager(hpOneViewManagerDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a hpvc manager data source
     *
     * Add hpvc manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addHpvcManagerTest() throws ApiException {
        HPVCManagerDataSourceRequest hpVCManagerDataSourceRequest = null;
        HPVCManagerDataSource response = api.addHpvcManager(hpVCManagerDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Add a juniper switch as data source
     *
     * Add switch Datasource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addJuniperSwitchTest() throws ApiException {
        JuniperSwitchDataSourceRequest juniperSwitchDataSourceRequest = null;
        JuniperSwitchDataSource response = api.addJuniperSwitch(juniperSwitchDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a nsx-v manager data source
     *
     * Add a nsx-v manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNsxvManagerDatasourceTest() throws ApiException {
        NSXVManagerDataSourceRequest nsXVManagerDataSourceRequest = null;
        NSXVManagerDataSource response = api.addNsxvManagerDatasource(nsXVManagerDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create panorama firewall data source
     *
     * Add panorama firewall as data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPanoramaFirewallTest() throws ApiException {
        PanFirewallDataSourceRequest panFirewallDataSourceRequest = null;
        PanFirewallDataSource response = api.addPanoramaFirewall(panFirewallDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create an ucs manager data source
     *
     * Add an ucs manager as data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUcsManagerTest() throws ApiException {
        UCSManagerDataSourceRequest ucSManagerDataSourceRequest = null;
        UCSManagerDataSource response = api.addUcsManager(ucSManagerDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Create a vCenter data source
     *
     * Add a vcenter data source. User must provide one of ip or fqdn field in the request body. Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVcenterDatasourceTest() throws ApiException {
        VCenterDataSourceRequest vcenterDataSourceRequest = null;
        VCenterDataSource response = api.addVcenterDatasource(vcenterDataSourceRequest);
        // TODO: test validations
    }

    /**
     * Delete an arista switch data source
     *
     * Delete an arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAristaSwitchTest() throws ApiException {
        String id = null;
        api.deleteAristaSwitch(id);
        // TODO: test validations
    }

    /**
     * Delete a brocade switch data source
     *
     * Delete a brocade switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBrocadeSwitchTest() throws ApiException {
        String id = null;
        api.deleteBrocadeSwitch(id);
        // TODO: test validations
    }

    /**
     * Delete a checkpoint firewall data source
     *
     * Delete a checkpoint firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCheckpointFirewallTest() throws ApiException {
        String id = null;
        api.deleteCheckpointFirewall(id);
        // TODO: test validations
    }

    /**
     * Delete a cisco switch data source
     *
     * Delete a cisco switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCiscoSwitchTest() throws ApiException {
        String id = null;
        api.deleteCiscoSwitch(id);
        // TODO: test validations
    }

    /**
     * Delete a dell switch data source
     *
     * Delete a data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDellSwitchTest() throws ApiException {
        String id = null;
        api.deleteDellSwitch(id);
        // TODO: test validations
    }

    /**
     * Delete a hp oneview data source
     *
     * Delete a hp oneview data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHpovManagerTest() throws ApiException {
        String id = null;
        api.deleteHpovManager(id);
        // TODO: test validations
    }

    /**
     * Delete a hpvc manager data source
     *
     * Delete a hpvc manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHpvcManagerTest() throws ApiException {
        String id = null;
        api.deleteHpvcManager(id);
        // TODO: test validations
    }

    /**
     * Delete a juniper switch data source
     *
     * Delete a juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJuniperSwitchTest() throws ApiException {
        String id = null;
        api.deleteJuniperSwitch(id);
        // TODO: test validations
    }

    /**
     * Delete a nsx-v manager data source
     *
     * Delete a nsx-v manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNsxvManagerTest() throws ApiException {
        String id = null;
        api.deleteNsxvManager(id);
        // TODO: test validations
    }

    /**
     * Delete a panorama firewall data source
     *
     * Delete a panorama firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePanoramaFirewallTest() throws ApiException {
        String id = null;
        api.deletePanoramaFirewall(id);
        // TODO: test validations
    }

    /**
     * Delete an ucs manager data source
     *
     * Delete an ucs manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUcsManagerTest() throws ApiException {
        String id = null;
        api.deleteUcsManager(id);
        // TODO: test validations
    }

    /**
     * Delete a vCenter data source
     *
     * Delete a data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVcenterTest() throws ApiException {
        String id = null;
        api.deleteVcenter(id);
        // TODO: test validations
    }

    /**
     * Disable an arista switch data source
     *
     * Disable an arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableAristaSwitchTest() throws ApiException {
        String id = null;
        api.disableAristaSwitch(id);
        // TODO: test validations
    }

    /**
     * Disable a brocade switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableBrocadeSwitchTest() throws ApiException {
        String id = null;
        api.disableBrocadeSwitch(id);
        // TODO: test validations
    }

    /**
     * Disable a checkpoint firewall data source
     *
     * Disable a checkpoint firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableCheckpointFirewallTest() throws ApiException {
        String id = null;
        api.disableCheckpointFirewall(id);
        // TODO: test validations
    }

    /**
     * Disable a cisco switch data source
     *
     * Disable a cisco switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableCiscoSwitchTest() throws ApiException {
        String id = null;
        api.disableCiscoSwitch(id);
        // TODO: test validations
    }

    /**
     * Disable a dell switch data source
     *
     * Disable a dell switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableDellSwitchTest() throws ApiException {
        String id = null;
        api.disableDellSwitch(id);
        // TODO: test validations
    }

    /**
     * Disable a hp oneview data source
     *
     * Disable a hp oneview data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableHpovManagerTest() throws ApiException {
        String id = null;
        api.disableHpovManager(id);
        // TODO: test validations
    }

    /**
     * Disable a hpvc manager data source
     *
     * Disable a hpvc manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableHpvcManagerTest() throws ApiException {
        String id = null;
        api.disableHpvcManager(id);
        // TODO: test validations
    }

    /**
     * Disable a juniper switch data source
     *
     * Disable a juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableJuniperSwitchTest() throws ApiException {
        String id = null;
        api.disableJuniperSwitch(id);
        // TODO: test validations
    }

    /**
     * Disable a nsx-v manager data source
     *
     * Disable a nsx-v manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableNsxvManagerTest() throws ApiException {
        String id = null;
        api.disableNsxvManager(id);
        // TODO: test validations
    }

    /**
     * Disable a panorama firewall data source
     *
     * Disable a panorama firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disablePanoramaFirewallTest() throws ApiException {
        String id = null;
        api.disablePanoramaFirewall(id);
        // TODO: test validations
    }

    /**
     * Disable an ucs manager data source
     *
     * Disable an ucs manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUcsManagerTest() throws ApiException {
        String id = null;
        api.disableUcsManager(id);
        // TODO: test validations
    }

    /**
     * Disable a vCenter data source
     *
     * Disable a vCenter data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableVcenterTest() throws ApiException {
        String id = null;
        api.disableVcenter(id);
        // TODO: test validations
    }

    /**
     * Enable an arista switch data source
     *
     * Enable an arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableAristaSwitchTest() throws ApiException {
        String id = null;
        api.enableAristaSwitch(id);
        // TODO: test validations
    }

    /**
     * Enable a brocade switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableBrocadeSwitchTest() throws ApiException {
        String id = null;
        api.enableBrocadeSwitch(id);
        // TODO: test validations
    }

    /**
     * Enable a checkpoint firewall data source
     *
     * Enable a checkpoint firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableCheckpointFirewallTest() throws ApiException {
        String id = null;
        api.enableCheckpointFirewall(id);
        // TODO: test validations
    }

    /**
     * Enable a cisco switch data source
     *
     * Enable a cisco switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableCiscoSwitchTest() throws ApiException {
        String id = null;
        api.enableCiscoSwitch(id);
        // TODO: test validations
    }

    /**
     * Enable a dell switch data source
     *
     * Enable a dell switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableDellSwitchTest() throws ApiException {
        String id = null;
        api.enableDellSwitch(id);
        // TODO: test validations
    }

    /**
     * Enable a hp oneview data source
     *
     * Enable a hp oneview data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableHpovManagerTest() throws ApiException {
        String id = null;
        api.enableHpovManager(id);
        // TODO: test validations
    }

    /**
     * Enable a hpvc manager data source
     *
     * Enable a hpvc manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableHpvcManagerTest() throws ApiException {
        String id = null;
        api.enableHpvcManager(id);
        // TODO: test validations
    }

    /**
     * Enable a juniper switch data source
     *
     * Enable a juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableJuniperSwitchTest() throws ApiException {
        String id = null;
        api.enableJuniperSwitch(id);
        // TODO: test validations
    }

    /**
     * Enable a nsx-v manager data source
     *
     * Enable a nsx-v manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableNsxvManagerTest() throws ApiException {
        String id = null;
        api.enableNsxvManager(id);
        // TODO: test validations
    }

    /**
     * Enable a panorama firewall data source
     *
     * Enable a panorama firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enablePanoramaFirewallTest() throws ApiException {
        String id = null;
        api.enablePanoramaFirewall(id);
        // TODO: test validations
    }

    /**
     * Enable an ucs manager data source
     *
     * Enable an ucs manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUcsManagerTest() throws ApiException {
        String id = null;
        api.enableUcsManager(id);
        // TODO: test validations
    }

    /**
     * Enable a vCenter data source
     *
     * Enable a vCenter data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableVcenterTest() throws ApiException {
        String id = null;
        api.enableVcenter(id);
        // TODO: test validations
    }

    /**
     * Show arista switch data source details
     *
     * Show arista switch data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAristaSwitchTest() throws ApiException {
        String id = null;
        AristaSwitchDataSource response = api.getAristaSwitch(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for arista switch data source
     *
     * Show snmp config for arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAristaSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getAristaSwitchSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show brocade switch data source details
     *
     * Show brocade switch data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrocadeSwitchTest() throws ApiException {
        String id = null;
        BrocadeSwitchDataSource response = api.getBrocadeSwitch(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for brocade switch data source
     *
     * Show snmp config for brocade switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBrocadeSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getBrocadeSwitchSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show checkpoint firewall data source details
     *
     * Show checkpoint firewall data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCheckpointFirewallTest() throws ApiException {
        String id = null;
        CheckpointFirewallDataSource response = api.getCheckpointFirewall(id);
        // TODO: test validations
    }

    /**
     * Show cisco switch data source details
     *
     * Show cisco switch data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCiscoSwitchTest() throws ApiException {
        String id = null;
        CiscoSwitchDataSource response = api.getCiscoSwitch(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for cisco switch data source
     *
     * Show snmp config for cisco switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCiscoSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getCiscoSwitchSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show dell switch data source details
     *
     * Get a dell switch data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDellSwitchTest() throws ApiException {
        String id = null;
        DellSwitchDataSource response = api.getDellSwitch(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for dell switch data source
     *
     * Show snmp config for dell switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDellSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getDellSwitchSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show hp oneview data source details
     *
     * Show hp oneview data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHpovManagerTest() throws ApiException {
        String id = null;
        HPOneViewManagerDataSource response = api.getHpovManager(id);
        // TODO: test validations
    }

    /**
     * Show hpvc data source details
     *
     * Show hpvc data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHpvcManagerTest() throws ApiException {
        String id = null;
        HPVCManagerDataSource response = api.getHpvcManager(id);
        // TODO: test validations
    }

    /**
     * Show juniper switch data source details
     *
     * Show juniper switch data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJuniperSwitchTest() throws ApiException {
        String id = null;
        JuniperSwitchDataSource response = api.getJuniperSwitch(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for juniper switch data source
     *
     * Show snmp config for juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJuniperSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getJuniperSwitchSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show nsx controller-cluster details
     *
     * Show nsx controller-cluster details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNsxvControllerClusterTest() throws ApiException {
        String id = null;
        NSXControllerDataCollection response = api.getNsxvControllerCluster(id);
        // TODO: test validations
    }

    /**
     * Show nsx-v manager data source details
     *
     * Show nsx-v manager data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNsxvManagerTest() throws ApiException {
        String id = null;
        NSXVManagerDataSource response = api.getNsxvManager(id);
        // TODO: test validations
    }

    /**
     * Show panorama firewall data source details
     *
     * Show panorama firewall data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPanoramaFirewallTest() throws ApiException {
        String id = null;
        PanFirewallDataSource response = api.getPanoramaFirewall(id);
        // TODO: test validations
    }

    /**
     * Show ucs manager data source details
     *
     * Show ucs manager data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUcsManagerTest() throws ApiException {
        String id = null;
        UCSManagerDataSource response = api.getUcsManager(id);
        // TODO: test validations
    }

    /**
     * Show snmp config for ucs fabric interconnects
     *
     * Show snmp config for ucs fabric interconnects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUcsSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig response = api.getUcsSnmpConfig(id);
        // TODO: test validations
    }

    /**
     * Show vCenter data source details
     *
     * Show vCenter data source details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVcenterTest() throws ApiException {
        String id = null;
        VCenterDataSource response = api.getVcenter(id);
        // TODO: test validations
    }

    /**
     * List arista switch data sources
     *
     * List arista switch data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAristaSwitchesTest() throws ApiException {
        DataSourceListResponse response = api.listAristaSwitches();
        // TODO: test validations
    }

    /**
     * List brocade switch data sources
     *
     * List brocade switch data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBrocadeSwitchesTest() throws ApiException {
        DataSourceListResponse response = api.listBrocadeSwitches();
        // TODO: test validations
    }

    /**
     * List checkpoint firewall data sources
     *
     * List checkpoint firewall data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCheckpointFirewallsTest() throws ApiException {
        DataSourceListResponse response = api.listCheckpointFirewalls();
        // TODO: test validations
    }

    /**
     * List cisco switch data sources
     *
     * List cisco switch data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCiscoSwitchesTest() throws ApiException {
        DataSourceListResponse response = api.listCiscoSwitches();
        // TODO: test validations
    }

    /**
     * List dell switch data sources
     *
     * List dell switch data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDellSwitchesTest() throws ApiException {
        DataSourceListResponse response = api.listDellSwitches();
        // TODO: test validations
    }

    /**
     * List hp oneview manager data sources
     *
     * List hp oneview manager data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHpovManagersTest() throws ApiException {
        DataSourceListResponse response = api.listHpovManagers();
        // TODO: test validations
    }

    /**
     * List hpvc manager data sources
     *
     * List hpvc manager data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHpvcManagersTest() throws ApiException {
        DataSourceListResponse response = api.listHpvcManagers();
        // TODO: test validations
    }

    /**
     * List juniper switch data sources
     *
     * List juniper switch data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJuniperSwitchesTest() throws ApiException {
        DataSourceListResponse response = api.listJuniperSwitches();
        // TODO: test validations
    }

    /**
     * List nsx-v manager data sources
     *
     * List nsx-v manager data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNsxvManagersTest() throws ApiException {
        DataSourceListResponse response = api.listNsxvManagers();
        // TODO: test validations
    }

    /**
     * List panorama firewall data sources
     *
     * List panorama firewall data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPanoramaFirewallsTest() throws ApiException {
        DataSourceListResponse response = api.listPanoramaFirewalls();
        // TODO: test validations
    }

    /**
     * List ucs manager data sources
     *
     * List ucs manager data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUcsManagersTest() throws ApiException {
        DataSourceListResponse response = api.listUcsManagers();
        // TODO: test validations
    }

    /**
     * List vCenter data sources
     *
     * List vCenter data sources
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVcentersTest() throws ApiException {
        DataSourceListResponse response = api.listVcenters();
        // TODO: test validations
    }

    /**
     * Update an arista switch data source
     *
     * Update an switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAristaSwitchTest() throws ApiException {
        String id = null;
        AristaSwitchDataSource aristaSwitchDataSource = null;
        AristaSwitchDataSource response = api.updateAristaSwitch(id, aristaSwitchDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for arista switch data source
     *
     * Update snmp config for arista switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAristaSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateAristaSwitchSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update a brocade switch data source
     *
     * Update a brocade switch data source. Only credentials, nickname and notes can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrocadeSwitchTest() throws ApiException {
        String id = null;
        BrocadeSwitchDataSource brocadeSwitchDataSource = null;
        BrocadeSwitchDataSource response = api.updateBrocadeSwitch(id, brocadeSwitchDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for brocade switch data source
     *
     * Update snmp config for brocade switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBrocadeSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateBrocadeSwitchSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update a checkpoint firewall data source
     *
     * Update a checkpoint firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCheckpointFirewallTest() throws ApiException {
        String id = null;
        CheckpointFirewallDataSource checkpointFirewallDataSource = null;
        CheckpointFirewallDataSource response = api.updateCheckpointFirewall(id, checkpointFirewallDataSource);
        // TODO: test validations
    }

    /**
     * Update a cisco switch data source
     *
     * Update a cisco switch data source. Only credentials, nickname and notes can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCiscoSwitchTest() throws ApiException {
        String id = null;
        CiscoSwitchDataSource ciscoSwitchDataSource = null;
        CiscoSwitchDataSource response = api.updateCiscoSwitch(id, ciscoSwitchDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for cisco switch data source
     *
     * Update snmp config for cisco switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCiscoSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateCiscoSwitchSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update a dell switch data source
     *
     * Update a dell switch data source. Only credentials, nickname and notes can be updated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDellSwitchTest() throws ApiException {
        String id = null;
        DellSwitchDataSource dellSwitchDataSource = null;
        DellSwitchDataSource response = api.updateDellSwitch(id, dellSwitchDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for dell switch data source
     *
     * Update snmp config for dell switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDellSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateDellSwitchSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update a hp oneview data source
     *
     * Update a hp oneview data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHpovManagerTest() throws ApiException {
        String id = null;
        HPOneViewManagerDataSource hpOneViewManagerDataSource = null;
        HPOneViewManagerDataSource response = api.updateHpovManager(id, hpOneViewManagerDataSource);
        // TODO: test validations
    }

    /**
     * Update a hpvc manager data source
     *
     * Update a hpvc manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHpvcManagerTest() throws ApiException {
        String id = null;
        HPVCManagerDataSource hpVCManagerDataSource = null;
        HPVCManagerDataSource response = api.updateHpvcManager(id, hpVCManagerDataSource);
        // TODO: test validations
    }

    /**
     * Update a juniper switch data source
     *
     * Update a juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJuniperSwitchTest() throws ApiException {
        String id = null;
        JuniperSwitchDataSource juniperSwitchDataSource = null;
        JuniperSwitchDataSource response = api.updateJuniperSwitch(id, juniperSwitchDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for a juniper switch data source
     *
     * Update snmp config for a juniper switch data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJuniperSwitchSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateJuniperSwitchSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update nsx controller-cluster details
     *
     * Update nsx controller-cluster details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNsxvControllerClusterTest() throws ApiException {
        String id = null;
        NSXControllerDataCollection nsXControllerDataCollection = null;
        NSXControllerDataCollection response = api.updateNsxvControllerCluster(id, nsXControllerDataCollection);
        // TODO: test validations
    }

    /**
     * Update a nsx-v manager data source
     *
     * Update a nsx-v manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNsxvManagerTest() throws ApiException {
        String id = null;
        NSXVManagerDataSource nsXVManagerDataSource = null;
        NSXVManagerDataSource response = api.updateNsxvManager(id, nsXVManagerDataSource);
        // TODO: test validations
    }

    /**
     * Update a panorama firewall data source
     *
     * Update a panorama firewall data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePanoramaFirewallTest() throws ApiException {
        String id = null;
        PanFirewallDataSource panFirewallDataSource = null;
        PanFirewallDataSource response = api.updatePanoramaFirewall(id, panFirewallDataSource);
        // TODO: test validations
    }

    /**
     * Update an ucs manager data source
     *
     * Update an ucs manager data source
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUcsManagerTest() throws ApiException {
        String id = null;
        UCSManagerDataSource ucSManagerDataSource = null;
        UCSManagerDataSource response = api.updateUcsManager(id, ucSManagerDataSource);
        // TODO: test validations
    }

    /**
     * Update snmp config for ucs fabric interconnects
     *
     * Update snmp config for ucs fabric interconnects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUcsSnmpConfigTest() throws ApiException {
        String id = null;
        SNMPConfig snMPConfig = null;
        SNMPConfig response = api.updateUcsSnmpConfig(id, snMPConfig);
        // TODO: test validations
    }

    /**
     * Update a vCenter data source.
     *
     * Update a vcenter data source. Only nickname, notes and credentials can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVcenterTest() throws ApiException {
        String id = null;
        VCenterDataSource vcenterDataSource = null;
        VCenterDataSource response = api.updateVcenter(id, vcenterDataSource);
        // TODO: test validations
    }

}
