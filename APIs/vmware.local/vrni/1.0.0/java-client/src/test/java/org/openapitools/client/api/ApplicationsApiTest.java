/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ApplicationRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.PagedListResponse;
import org.openapitools.client.model.Tier;
import org.openapitools.client.model.TierListResponse;
import org.openapitools.client.model.TierRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationsApi
 */
@Disabled
public class ApplicationsApiTest {

    private final ApplicationsApi api = new ApplicationsApi();

    /**
     * Create an application
     *
     * Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single application. An application name is unique and should not conflict with another application name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addApplicationTest() throws ApiException {
        ApplicationRequest applicationRequest = null;
        Application response = api.addApplication(applicationRequest);
        // TODO: test validations
    }

    /**
     * Create tier in application
     *
     * Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTierTest() throws ApiException {
        String id = null;
        TierRequest tierRequest = null;
        api.addTier(id, tierRequest);
        // TODO: test validations
    }

    /**
     * Delete an application
     *
     * Deleting an application deletes all the tiers of the application along with the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String id = null;
        api.deleteApplication(id);
        // TODO: test validations
    }

    /**
     * Delete tier
     *
     * Delete tier of an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTierTest() throws ApiException {
        String id = null;
        String tierId = null;
        api.deleteTier(id, tierId);
        // TODO: test validations
    }

    /**
     * Show application details
     *
     * Show application details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTest() throws ApiException {
        String id = null;
        Application response = api.getApplication(id);
        // TODO: test validations
    }

    /**
     * Show tier details
     *
     * Show tier details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationTierTest() throws ApiException {
        String id = null;
        String tierId = null;
        api.getApplicationTier(id, tierId);
        // TODO: test validations
    }

    /**
     * Show tier details
     *
     * Show tier details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTierTest() throws ApiException {
        String tierId = null;
        String authorization = null;
        api.getTier(tierId, authorization);
        // TODO: test validations
    }

    /**
     * List tiers of an application
     *
     * List tiers of an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationTiersTest() throws ApiException {
        String id = null;
        TierListResponse response = api.listApplicationTiers(id);
        // TODO: test validations
    }

    /**
     * List applications
     *
     * List applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        BigDecimal size = null;
        String cursor = null;
        BigDecimal startTime = null;
        BigDecimal endTime = null;
        PagedListResponse response = api.listApplications(size, cursor, startTime, endTime);
        // TODO: test validations
    }

}
