/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseEntity;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.RuleSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseFirewall
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseFirewall extends BaseEntity {
  public static final String SERIALIZED_NAME_EXCLUSIONS = "exclusions";
  @SerializedName(SERIALIZED_NAME_EXCLUSIONS)
  private List<Reference> exclusions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIREWALL_RULES = "firewall_rules";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULES)
  private List<RuleSet> firewallRules = new ArrayList<>();

  public BaseFirewall() {
    this.entityType = this.getClass().getSimpleName();
  }

  public BaseFirewall exclusions(List<Reference> exclusions) {
    this.exclusions = exclusions;
    return this;
  }

  public BaseFirewall addExclusionsItem(Reference exclusionsItem) {
    if (this.exclusions == null) {
      this.exclusions = new ArrayList<>();
    }
    this.exclusions.add(exclusionsItem);
    return this;
  }

  /**
   * Get exclusions
   * @return exclusions
   */
  @javax.annotation.Nullable
  public List<Reference> getExclusions() {
    return exclusions;
  }

  public void setExclusions(List<Reference> exclusions) {
    this.exclusions = exclusions;
  }


  public BaseFirewall firewallRules(List<RuleSet> firewallRules) {
    this.firewallRules = firewallRules;
    return this;
  }

  public BaseFirewall addFirewallRulesItem(RuleSet firewallRulesItem) {
    if (this.firewallRules == null) {
      this.firewallRules = new ArrayList<>();
    }
    this.firewallRules.add(firewallRulesItem);
    return this;
  }

  /**
   * Get firewallRules
   * @return firewallRules
   */
  @javax.annotation.Nullable
  public List<RuleSet> getFirewallRules() {
    return firewallRules;
  }

  public void setFirewallRules(List<RuleSet> firewallRules) {
    this.firewallRules = firewallRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseFirewall baseFirewall = (BaseFirewall) o;
    return Objects.equals(this.exclusions, baseFirewall.exclusions) &&
        Objects.equals(this.firewallRules, baseFirewall.firewallRules) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exclusions, firewallRules, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseFirewall {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    exclusions: ").append(toIndentedString(exclusions)).append("\n");
    sb.append("    firewallRules: ").append(toIndentedString(firewallRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("exclusions");
    openapiFields.add("firewall_rules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseFirewall
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseFirewall.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseFirewall is not found in the empty JSON string", BaseFirewall.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("entity_type").getAsString();
      switch (discriminatorValue) {
        case "EC2Firewall":
          EC2Firewall.validateJsonElement(jsonElement);
          break;
        case "NSXDistributedFirewall":
          NSXDistributedFirewall.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `entity_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseFirewall given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseFirewall
   * @throws IOException if the JSON string is invalid with respect to BaseFirewall
   */
  public static BaseFirewall fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseFirewall.class);
  }

  /**
   * Convert an instance of BaseFirewall to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

