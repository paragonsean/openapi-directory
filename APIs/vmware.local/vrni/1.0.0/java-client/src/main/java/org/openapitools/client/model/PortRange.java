/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PortRange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PortRange {
  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_IANA_NAME = "iana_name";
  @SerializedName(SERIALIZED_NAME_IANA_NAME)
  private String ianaName;

  public static final String SERIALIZED_NAME_IANA_PORT_DISPLAY = "iana_port_display";
  @SerializedName(SERIALIZED_NAME_IANA_PORT_DISPLAY)
  private String ianaPortDisplay;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public PortRange() {
  }

  public PortRange display(String display) {
    this.display = display;
    return this;
  }

  /**
   * Get display
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }


  public PortRange end(Integer end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nullable
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public PortRange ianaName(String ianaName) {
    this.ianaName = ianaName;
    return this;
  }

  /**
   * Get ianaName
   * @return ianaName
   */
  @javax.annotation.Nullable
  public String getIanaName() {
    return ianaName;
  }

  public void setIanaName(String ianaName) {
    this.ianaName = ianaName;
  }


  public PortRange ianaPortDisplay(String ianaPortDisplay) {
    this.ianaPortDisplay = ianaPortDisplay;
    return this;
  }

  /**
   * Get ianaPortDisplay
   * @return ianaPortDisplay
   */
  @javax.annotation.Nullable
  public String getIanaPortDisplay() {
    return ianaPortDisplay;
  }

  public void setIanaPortDisplay(String ianaPortDisplay) {
    this.ianaPortDisplay = ianaPortDisplay;
  }


  public PortRange start(Integer start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nullable
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortRange portRange = (PortRange) o;
    return Objects.equals(this.display, portRange.display) &&
        Objects.equals(this.end, portRange.end) &&
        Objects.equals(this.ianaName, portRange.ianaName) &&
        Objects.equals(this.ianaPortDisplay, portRange.ianaPortDisplay) &&
        Objects.equals(this.start, portRange.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(display, end, ianaName, ianaPortDisplay, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortRange {\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    ianaName: ").append(toIndentedString(ianaName)).append("\n");
    sb.append("    ianaPortDisplay: ").append(toIndentedString(ianaPortDisplay)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display");
    openapiFields.add("end");
    openapiFields.add("iana_name");
    openapiFields.add("iana_port_display");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PortRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortRange is not found in the empty JSON string", PortRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PortRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("iana_name") != null && !jsonObj.get("iana_name").isJsonNull()) && !jsonObj.get("iana_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iana_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iana_name").toString()));
      }
      if ((jsonObj.get("iana_port_display") != null && !jsonObj.get("iana_port_display").isJsonNull()) && !jsonObj.get("iana_port_display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iana_port_display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iana_port_display").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortRange.class));

       return (TypeAdapter<T>) new TypeAdapter<PortRange>() {
           @Override
           public void write(JsonWriter out, PortRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PortRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PortRange
   * @throws IOException if the JSON string is invalid with respect to PortRange
   */
  public static PortRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortRange.class);
  }

  /**
   * Convert an instance of PortRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

