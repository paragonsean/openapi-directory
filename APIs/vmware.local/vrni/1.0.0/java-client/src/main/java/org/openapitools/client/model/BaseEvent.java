/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseEntity;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseEvent extends BaseEntity {
  /**
   * Gets or Sets adminState
   */
  @JsonAdapter(AdminStateEnum.Adapter.class)
  public enum AdminStateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    AdminStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdminStateEnum fromValue(String value) {
      for (AdminStateEnum b : AdminStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdminStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdminStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdminStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADMIN_STATE = "admin_state";
  @SerializedName(SERIALIZED_NAME_ADMIN_STATE)
  private AdminStateEnum adminState;

  public static final String SERIALIZED_NAME_ANCHOR_ENTITIES = "anchor_entities";
  @SerializedName(SERIALIZED_NAME_ANCHOR_ENTITIES)
  private List<Reference> anchorEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_EVENT_TAGS = "event_tags";
  @SerializedName(SERIALIZED_NAME_EVENT_TAGS)
  private List<String> eventTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_TIME_EPOCH_MS = "event_time_epoch_ms";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME_EPOCH_MS)
  private Long eventTimeEpochMs;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RELATED_ENTITIES = "related_entities";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITIES)
  private List<Reference> relatedEntities = new ArrayList<>();

  public BaseEvent() {
    this.entityType = this.getClass().getSimpleName();
  }

  public BaseEvent adminState(AdminStateEnum adminState) {
    this.adminState = adminState;
    return this;
  }

  /**
   * Get adminState
   * @return adminState
   */
  @javax.annotation.Nullable
  public AdminStateEnum getAdminState() {
    return adminState;
  }

  public void setAdminState(AdminStateEnum adminState) {
    this.adminState = adminState;
  }


  public BaseEvent anchorEntities(List<Reference> anchorEntities) {
    this.anchorEntities = anchorEntities;
    return this;
  }

  public BaseEvent addAnchorEntitiesItem(Reference anchorEntitiesItem) {
    if (this.anchorEntities == null) {
      this.anchorEntities = new ArrayList<>();
    }
    this.anchorEntities.add(anchorEntitiesItem);
    return this;
  }

  /**
   * Get anchorEntities
   * @return anchorEntities
   */
  @javax.annotation.Nullable
  public List<Reference> getAnchorEntities() {
    return anchorEntities;
  }

  public void setAnchorEntities(List<Reference> anchorEntities) {
    this.anchorEntities = anchorEntities;
  }


  public BaseEvent archived(Boolean archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }

  public void setArchived(Boolean archived) {
    this.archived = archived;
  }


  public BaseEvent eventTags(List<String> eventTags) {
    this.eventTags = eventTags;
    return this;
  }

  public BaseEvent addEventTagsItem(String eventTagsItem) {
    if (this.eventTags == null) {
      this.eventTags = new ArrayList<>();
    }
    this.eventTags.add(eventTagsItem);
    return this;
  }

  /**
   * Get eventTags
   * @return eventTags
   */
  @javax.annotation.Nullable
  public List<String> getEventTags() {
    return eventTags;
  }

  public void setEventTags(List<String> eventTags) {
    this.eventTags = eventTags;
  }


  public BaseEvent eventTimeEpochMs(Long eventTimeEpochMs) {
    this.eventTimeEpochMs = eventTimeEpochMs;
    return this;
  }

  /**
   * Get eventTimeEpochMs
   * @return eventTimeEpochMs
   */
  @javax.annotation.Nullable
  public Long getEventTimeEpochMs() {
    return eventTimeEpochMs;
  }

  public void setEventTimeEpochMs(Long eventTimeEpochMs) {
    this.eventTimeEpochMs = eventTimeEpochMs;
  }


  public BaseEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public BaseEvent relatedEntities(List<Reference> relatedEntities) {
    this.relatedEntities = relatedEntities;
    return this;
  }

  public BaseEvent addRelatedEntitiesItem(Reference relatedEntitiesItem) {
    if (this.relatedEntities == null) {
      this.relatedEntities = new ArrayList<>();
    }
    this.relatedEntities.add(relatedEntitiesItem);
    return this;
  }

  /**
   * Get relatedEntities
   * @return relatedEntities
   */
  @javax.annotation.Nullable
  public List<Reference> getRelatedEntities() {
    return relatedEntities;
  }

  public void setRelatedEntities(List<Reference> relatedEntities) {
    this.relatedEntities = relatedEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseEvent baseEvent = (BaseEvent) o;
    return Objects.equals(this.adminState, baseEvent.adminState) &&
        Objects.equals(this.anchorEntities, baseEvent.anchorEntities) &&
        Objects.equals(this.archived, baseEvent.archived) &&
        Objects.equals(this.eventTags, baseEvent.eventTags) &&
        Objects.equals(this.eventTimeEpochMs, baseEvent.eventTimeEpochMs) &&
        Objects.equals(this.message, baseEvent.message) &&
        Objects.equals(this.relatedEntities, baseEvent.relatedEntities) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminState, anchorEntities, archived, eventTags, eventTimeEpochMs, message, relatedEntities, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    adminState: ").append(toIndentedString(adminState)).append("\n");
    sb.append("    anchorEntities: ").append(toIndentedString(anchorEntities)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    eventTags: ").append(toIndentedString(eventTags)).append("\n");
    sb.append("    eventTimeEpochMs: ").append(toIndentedString(eventTimeEpochMs)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    relatedEntities: ").append(toIndentedString(relatedEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("admin_state");
    openapiFields.add("anchor_entities");
    openapiFields.add("archived");
    openapiFields.add("event_tags");
    openapiFields.add("event_time_epoch_ms");
    openapiFields.add("message");
    openapiFields.add("related_entities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseEvent is not found in the empty JSON string", BaseEvent.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("entity_type").getAsString();
      switch (discriminatorValue) {
        case "ProblemEvent":
          ProblemEvent.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `entity_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseEvent
   * @throws IOException if the JSON string is invalid with respect to BaseEvent
   */
  public static BaseEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseEvent.class);
  }

  /**
   * Convert an instance of BaseEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

