/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BaseNSXManager;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.IpV4Address;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NSXVManager
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NSXVManager extends BaseNSXManager {
  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private IpV4Address ipAddress;

  public static final String SERIALIZED_NAME_PRIMARY_NSX_MANAGER = "primary_nsx_manager";
  @SerializedName(SERIALIZED_NAME_PRIMARY_NSX_MANAGER)
  private Reference primaryNsxManager;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VM = "vm";
  @SerializedName(SERIALIZED_NAME_VM)
  private Reference vm;

  public NSXVManager() {
    this.entityType = this.getClass().getSimpleName();
  }

  public NSXVManager fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Get fqdn
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public NSXVManager ipAddress(IpV4Address ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public IpV4Address getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(IpV4Address ipAddress) {
    this.ipAddress = ipAddress;
  }


  public NSXVManager primaryNsxManager(Reference primaryNsxManager) {
    this.primaryNsxManager = primaryNsxManager;
    return this;
  }

  /**
   * Get primaryNsxManager
   * @return primaryNsxManager
   */
  @javax.annotation.Nullable
  public Reference getPrimaryNsxManager() {
    return primaryNsxManager;
  }

  public void setPrimaryNsxManager(Reference primaryNsxManager) {
    this.primaryNsxManager = primaryNsxManager;
  }


  public NSXVManager role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public NSXVManager version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public NSXVManager vm(Reference vm) {
    this.vm = vm;
    return this;
  }

  /**
   * Get vm
   * @return vm
   */
  @javax.annotation.Nullable
  public Reference getVm() {
    return vm;
  }

  public void setVm(Reference vm) {
    this.vm = vm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NSXVManager nsXVManager = (NSXVManager) o;
    return Objects.equals(this.fqdn, nsXVManager.fqdn) &&
        Objects.equals(this.ipAddress, nsXVManager.ipAddress) &&
        Objects.equals(this.primaryNsxManager, nsXVManager.primaryNsxManager) &&
        Objects.equals(this.role, nsXVManager.role) &&
        Objects.equals(this.version, nsXVManager.version) &&
        Objects.equals(this.vm, nsXVManager.vm) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fqdn, ipAddress, primaryNsxManager, role, version, vm, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NSXVManager {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    primaryNsxManager: ").append(toIndentedString(primaryNsxManager)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vm: ").append(toIndentedString(vm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("fqdn");
    openapiFields.add("ip_address");
    openapiFields.add("primary_nsx_manager");
    openapiFields.add("role");
    openapiFields.add("version");
    openapiFields.add("vm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NSXVManager
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NSXVManager.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NSXVManager is not found in the empty JSON string", NSXVManager.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NSXVManager.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NSXVManager` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NSXVManager.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NSXVManager' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NSXVManager> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NSXVManager.class));

       return (TypeAdapter<T>) new TypeAdapter<NSXVManager>() {
           @Override
           public void write(JsonWriter out, NSXVManager value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NSXVManager read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NSXVManager given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NSXVManager
   * @throws IOException if the JSON string is invalid with respect to NSXVManager
   */
  public static NSXVManager fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NSXVManager.class);
  }

  /**
   * Convert an instance of NSXVManager to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

