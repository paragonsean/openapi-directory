/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(org.openapitools.client.model.Application.class, new TypeSelector<org.openapitools.client.model.Application>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Application> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Application", org.openapitools.client.model.Application.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.AristaSwitchDataSource.class, new TypeSelector<org.openapitools.client.model.AristaSwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.AristaSwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AristaSwitchDataSource", org.openapitools.client.model.AristaSwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseDataSource.class, new TypeSelector<org.openapitools.client.model.BaseDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AristaSwitchDataSource", org.openapitools.client.model.AristaSwitchDataSource.class);
                        classByDiscriminatorValue.put("BrocadeSwitchDataSource", org.openapitools.client.model.BrocadeSwitchDataSource.class);
                        classByDiscriminatorValue.put("CheckpointFirewallDataSource", org.openapitools.client.model.CheckpointFirewallDataSource.class);
                        classByDiscriminatorValue.put("CiscoSwitchDataSource", org.openapitools.client.model.CiscoSwitchDataSource.class);
                        classByDiscriminatorValue.put("DellSwitchDataSource", org.openapitools.client.model.DellSwitchDataSource.class);
                        classByDiscriminatorValue.put("HPOneViewManagerDataSource", org.openapitools.client.model.HPOneViewManagerDataSource.class);
                        classByDiscriminatorValue.put("HPOneViewManagerDataSourceRequest", org.openapitools.client.model.HPOneViewManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("HPVCManagerDataSource", org.openapitools.client.model.HPVCManagerDataSource.class);
                        classByDiscriminatorValue.put("HPVCManagerDataSourceRequest", org.openapitools.client.model.HPVCManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("JuniperSwitchDataSource", org.openapitools.client.model.JuniperSwitchDataSource.class);
                        classByDiscriminatorValue.put("NSXVManagerDataSource", org.openapitools.client.model.NSXVManagerDataSource.class);
                        classByDiscriminatorValue.put("PanFirewallDataSource", org.openapitools.client.model.PanFirewallDataSource.class);
                        classByDiscriminatorValue.put("SwitchDataSource", org.openapitools.client.model.SwitchDataSource.class);
                        classByDiscriminatorValue.put("UCSManagerDataSource", org.openapitools.client.model.UCSManagerDataSource.class);
                        classByDiscriminatorValue.put("UCSManagerDataSourceRequest", org.openapitools.client.model.UCSManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("VCenterDataSource", org.openapitools.client.model.VCenterDataSource.class);
                        classByDiscriminatorValue.put("BaseDataSource", org.openapitools.client.model.BaseDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseEntity.class, new TypeSelector<org.openapitools.client.model.BaseEntity>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseEntity> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Application", org.openapitools.client.model.Application.class);
                        classByDiscriminatorValue.put("BaseEvent", org.openapitools.client.model.BaseEvent.class);
                        classByDiscriminatorValue.put("BaseFirewall", org.openapitools.client.model.BaseFirewall.class);
                        classByDiscriminatorValue.put("BaseFirewallRule", org.openapitools.client.model.BaseFirewallRule.class);
                        classByDiscriminatorValue.put("BaseIPSet", org.openapitools.client.model.BaseIPSet.class);
                        classByDiscriminatorValue.put("BaseL2Network", org.openapitools.client.model.BaseL2Network.class);
                        classByDiscriminatorValue.put("BaseManager", org.openapitools.client.model.BaseManager.class);
                        classByDiscriminatorValue.put("BaseNSXManager", org.openapitools.client.model.BaseNSXManager.class);
                        classByDiscriminatorValue.put("BaseSecurityGroup", org.openapitools.client.model.BaseSecurityGroup.class);
                        classByDiscriminatorValue.put("BaseService", org.openapitools.client.model.BaseService.class);
                        classByDiscriminatorValue.put("BaseServiceGroup", org.openapitools.client.model.BaseServiceGroup.class);
                        classByDiscriminatorValue.put("BaseVirtualMachine", org.openapitools.client.model.BaseVirtualMachine.class);
                        classByDiscriminatorValue.put("BaseVnic", org.openapitools.client.model.BaseVnic.class);
                        classByDiscriminatorValue.put("Cluster", org.openapitools.client.model.Cluster.class);
                        classByDiscriminatorValue.put("Datastore", org.openapitools.client.model.Datastore.class);
                        classByDiscriminatorValue.put("DistributedVirtualPortgroup", org.openapitools.client.model.DistributedVirtualPortgroup.class);
                        classByDiscriminatorValue.put("DistributedVirtualSwitch", org.openapitools.client.model.DistributedVirtualSwitch.class);
                        classByDiscriminatorValue.put("EC2Firewall", org.openapitools.client.model.EC2Firewall.class);
                        classByDiscriminatorValue.put("EC2IPSet", org.openapitools.client.model.EC2IPSet.class);
                        classByDiscriminatorValue.put("EC2Instance", org.openapitools.client.model.EC2Instance.class);
                        classByDiscriminatorValue.put("EC2NetworkInterface", org.openapitools.client.model.EC2NetworkInterface.class);
                        classByDiscriminatorValue.put("EC2SGFirewallRule", org.openapitools.client.model.EC2SGFirewallRule.class);
                        classByDiscriminatorValue.put("EC2SecurityGroup", org.openapitools.client.model.EC2SecurityGroup.class);
                        classByDiscriminatorValue.put("EC2Service", org.openapitools.client.model.EC2Service.class);
                        classByDiscriminatorValue.put("Flow", org.openapitools.client.model.Flow.class);
                        classByDiscriminatorValue.put("Folder", org.openapitools.client.model.Folder.class);
                        classByDiscriminatorValue.put("Group", org.openapitools.client.model.Group.class);
                        classByDiscriminatorValue.put("Host", org.openapitools.client.model.Host.class);
                        classByDiscriminatorValue.put("NSXDistributedFirewall", org.openapitools.client.model.NSXDistributedFirewall.class);
                        classByDiscriminatorValue.put("NSXFirewallRule", org.openapitools.client.model.NSXFirewallRule.class);
                        classByDiscriminatorValue.put("NSXIPSet", org.openapitools.client.model.NSXIPSet.class);
                        classByDiscriminatorValue.put("NSXRedirectRule", org.openapitools.client.model.NSXRedirectRule.class);
                        classByDiscriminatorValue.put("NSXSecurityGroup", org.openapitools.client.model.NSXSecurityGroup.class);
                        classByDiscriminatorValue.put("NSXService", org.openapitools.client.model.NSXService.class);
                        classByDiscriminatorValue.put("NSXServiceGroup", org.openapitools.client.model.NSXServiceGroup.class);
                        classByDiscriminatorValue.put("NSXVManager", org.openapitools.client.model.NSXVManager.class);
                        classByDiscriminatorValue.put("ProblemEvent", org.openapitools.client.model.ProblemEvent.class);
                        classByDiscriminatorValue.put("ResourcePool", org.openapitools.client.model.ResourcePool.class);
                        classByDiscriminatorValue.put("SecurityTag", org.openapitools.client.model.SecurityTag.class);
                        classByDiscriminatorValue.put("Tier", org.openapitools.client.model.Tier.class);
                        classByDiscriminatorValue.put("VCDatacenter", org.openapitools.client.model.VCDatacenter.class);
                        classByDiscriminatorValue.put("VCenterManager", org.openapitools.client.model.VCenterManager.class);
                        classByDiscriminatorValue.put("VPC", org.openapitools.client.model.VPC.class);
                        classByDiscriminatorValue.put("VirtualMachine", org.openapitools.client.model.VirtualMachine.class);
                        classByDiscriminatorValue.put("VlanL2Network", org.openapitools.client.model.VlanL2Network.class);
                        classByDiscriminatorValue.put("Vmknic", org.openapitools.client.model.Vmknic.class);
                        classByDiscriminatorValue.put("Vnic", org.openapitools.client.model.Vnic.class);
                        classByDiscriminatorValue.put("VxlanLayer2Network", org.openapitools.client.model.VxlanLayer2Network.class);
                        classByDiscriminatorValue.put("BaseEntity", org.openapitools.client.model.BaseEntity.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseEvent.class, new TypeSelector<org.openapitools.client.model.BaseEvent>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseEvent> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ProblemEvent", org.openapitools.client.model.ProblemEvent.class);
                        classByDiscriminatorValue.put("BaseEvent", org.openapitools.client.model.BaseEvent.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseFirewall.class, new TypeSelector<org.openapitools.client.model.BaseFirewall>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseFirewall> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Firewall", org.openapitools.client.model.EC2Firewall.class);
                        classByDiscriminatorValue.put("NSXDistributedFirewall", org.openapitools.client.model.NSXDistributedFirewall.class);
                        classByDiscriminatorValue.put("BaseFirewall", org.openapitools.client.model.BaseFirewall.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseFirewallRule.class, new TypeSelector<org.openapitools.client.model.BaseFirewallRule>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseFirewallRule> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2SGFirewallRule", org.openapitools.client.model.EC2SGFirewallRule.class);
                        classByDiscriminatorValue.put("NSXFirewallRule", org.openapitools.client.model.NSXFirewallRule.class);
                        classByDiscriminatorValue.put("NSXRedirectRule", org.openapitools.client.model.NSXRedirectRule.class);
                        classByDiscriminatorValue.put("BaseFirewallRule", org.openapitools.client.model.BaseFirewallRule.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseIPSet.class, new TypeSelector<org.openapitools.client.model.BaseIPSet>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseIPSet> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2IPSet", org.openapitools.client.model.EC2IPSet.class);
                        classByDiscriminatorValue.put("NSXIPSet", org.openapitools.client.model.NSXIPSet.class);
                        classByDiscriminatorValue.put("BaseIPSet", org.openapitools.client.model.BaseIPSet.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseL2Network.class, new TypeSelector<org.openapitools.client.model.BaseL2Network>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseL2Network> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VlanL2Network", org.openapitools.client.model.VlanL2Network.class);
                        classByDiscriminatorValue.put("VxlanLayer2Network", org.openapitools.client.model.VxlanLayer2Network.class);
                        classByDiscriminatorValue.put("BaseL2Network", org.openapitools.client.model.BaseL2Network.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseManager.class, new TypeSelector<org.openapitools.client.model.BaseManager>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseManager> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("BaseNSXManager", org.openapitools.client.model.BaseNSXManager.class);
                        classByDiscriminatorValue.put("NSXVManager", org.openapitools.client.model.NSXVManager.class);
                        classByDiscriminatorValue.put("VCenterManager", org.openapitools.client.model.VCenterManager.class);
                        classByDiscriminatorValue.put("BaseManager", org.openapitools.client.model.BaseManager.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseNSXManager.class, new TypeSelector<org.openapitools.client.model.BaseNSXManager>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseNSXManager> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXVManager", org.openapitools.client.model.NSXVManager.class);
                        classByDiscriminatorValue.put("BaseNSXManager", org.openapitools.client.model.BaseNSXManager.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseSecurityGroup.class, new TypeSelector<org.openapitools.client.model.BaseSecurityGroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseSecurityGroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2SecurityGroup", org.openapitools.client.model.EC2SecurityGroup.class);
                        classByDiscriminatorValue.put("NSXSecurityGroup", org.openapitools.client.model.NSXSecurityGroup.class);
                        classByDiscriminatorValue.put("BaseSecurityGroup", org.openapitools.client.model.BaseSecurityGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseService.class, new TypeSelector<org.openapitools.client.model.BaseService>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseService> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Service", org.openapitools.client.model.EC2Service.class);
                        classByDiscriminatorValue.put("NSXService", org.openapitools.client.model.NSXService.class);
                        classByDiscriminatorValue.put("BaseService", org.openapitools.client.model.BaseService.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseServiceGroup.class, new TypeSelector<org.openapitools.client.model.BaseServiceGroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseServiceGroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXServiceGroup", org.openapitools.client.model.NSXServiceGroup.class);
                        classByDiscriminatorValue.put("BaseServiceGroup", org.openapitools.client.model.BaseServiceGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseVirtualMachine.class, new TypeSelector<org.openapitools.client.model.BaseVirtualMachine>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseVirtualMachine> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Instance", org.openapitools.client.model.EC2Instance.class);
                        classByDiscriminatorValue.put("VirtualMachine", org.openapitools.client.model.VirtualMachine.class);
                        classByDiscriminatorValue.put("BaseVirtualMachine", org.openapitools.client.model.BaseVirtualMachine.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BaseVnic.class, new TypeSelector<org.openapitools.client.model.BaseVnic>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BaseVnic> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2NetworkInterface", org.openapitools.client.model.EC2NetworkInterface.class);
                        classByDiscriminatorValue.put("Vnic", org.openapitools.client.model.Vnic.class);
                        classByDiscriminatorValue.put("BaseVnic", org.openapitools.client.model.BaseVnic.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.BrocadeSwitchDataSource.class, new TypeSelector<org.openapitools.client.model.BrocadeSwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.BrocadeSwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("BrocadeSwitchDataSource", org.openapitools.client.model.BrocadeSwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.CheckpointFirewallDataSource.class, new TypeSelector<org.openapitools.client.model.CheckpointFirewallDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.CheckpointFirewallDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CheckpointFirewallDataSource", org.openapitools.client.model.CheckpointFirewallDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.CiscoSwitchDataSource.class, new TypeSelector<org.openapitools.client.model.CiscoSwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.CiscoSwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CiscoSwitchDataSource", org.openapitools.client.model.CiscoSwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Cluster.class, new TypeSelector<org.openapitools.client.model.Cluster>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Cluster> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Cluster", org.openapitools.client.model.Cluster.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Datastore.class, new TypeSelector<org.openapitools.client.model.Datastore>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Datastore> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Datastore", org.openapitools.client.model.Datastore.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DellSwitchDataSource.class, new TypeSelector<org.openapitools.client.model.DellSwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DellSwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DellSwitchDataSource", org.openapitools.client.model.DellSwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DistributedVirtualPortgroup.class, new TypeSelector<org.openapitools.client.model.DistributedVirtualPortgroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DistributedVirtualPortgroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DistributedVirtualPortgroup", org.openapitools.client.model.DistributedVirtualPortgroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.DistributedVirtualSwitch.class, new TypeSelector<org.openapitools.client.model.DistributedVirtualSwitch>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.DistributedVirtualSwitch> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DistributedVirtualSwitch", org.openapitools.client.model.DistributedVirtualSwitch.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2Firewall.class, new TypeSelector<org.openapitools.client.model.EC2Firewall>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2Firewall> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Firewall", org.openapitools.client.model.EC2Firewall.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2IPSet.class, new TypeSelector<org.openapitools.client.model.EC2IPSet>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2IPSet> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2IPSet", org.openapitools.client.model.EC2IPSet.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2Instance.class, new TypeSelector<org.openapitools.client.model.EC2Instance>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2Instance> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Instance", org.openapitools.client.model.EC2Instance.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2NetworkInterface.class, new TypeSelector<org.openapitools.client.model.EC2NetworkInterface>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2NetworkInterface> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2NetworkInterface", org.openapitools.client.model.EC2NetworkInterface.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2SGFirewallRule.class, new TypeSelector<org.openapitools.client.model.EC2SGFirewallRule>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2SGFirewallRule> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2SGFirewallRule", org.openapitools.client.model.EC2SGFirewallRule.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2SecurityGroup.class, new TypeSelector<org.openapitools.client.model.EC2SecurityGroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2SecurityGroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2SecurityGroup", org.openapitools.client.model.EC2SecurityGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.EC2Service.class, new TypeSelector<org.openapitools.client.model.EC2Service>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.EC2Service> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EC2Service", org.openapitools.client.model.EC2Service.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Flow.class, new TypeSelector<org.openapitools.client.model.Flow>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Flow> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Flow", org.openapitools.client.model.Flow.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Folder.class, new TypeSelector<org.openapitools.client.model.Folder>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Folder> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Folder", org.openapitools.client.model.Folder.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Group.class, new TypeSelector<org.openapitools.client.model.Group>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Group> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("BaseSecurityGroup", org.openapitools.client.model.BaseSecurityGroup.class);
                        classByDiscriminatorValue.put("BaseServiceGroup", org.openapitools.client.model.BaseServiceGroup.class);
                        classByDiscriminatorValue.put("EC2SecurityGroup", org.openapitools.client.model.EC2SecurityGroup.class);
                        classByDiscriminatorValue.put("NSXSecurityGroup", org.openapitools.client.model.NSXSecurityGroup.class);
                        classByDiscriminatorValue.put("NSXServiceGroup", org.openapitools.client.model.NSXServiceGroup.class);
                        classByDiscriminatorValue.put("Group", org.openapitools.client.model.Group.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.HPOneViewManagerDataSource.class, new TypeSelector<org.openapitools.client.model.HPOneViewManagerDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.HPOneViewManagerDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("HPOneViewManagerDataSource", org.openapitools.client.model.HPOneViewManagerDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.HPOneViewManagerDataSourceRequest.class, new TypeSelector<org.openapitools.client.model.HPOneViewManagerDataSourceRequest>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.HPOneViewManagerDataSourceRequest> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("HPOneViewManagerDataSourceRequest", org.openapitools.client.model.HPOneViewManagerDataSourceRequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.HPVCManagerDataSource.class, new TypeSelector<org.openapitools.client.model.HPVCManagerDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.HPVCManagerDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("HPVCManagerDataSource", org.openapitools.client.model.HPVCManagerDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.HPVCManagerDataSourceRequest.class, new TypeSelector<org.openapitools.client.model.HPVCManagerDataSourceRequest>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.HPVCManagerDataSourceRequest> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("HPVCManagerDataSourceRequest", org.openapitools.client.model.HPVCManagerDataSourceRequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Host.class, new TypeSelector<org.openapitools.client.model.Host>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Host> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Host", org.openapitools.client.model.Host.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.JuniperSwitchDataSource.class, new TypeSelector<org.openapitools.client.model.JuniperSwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.JuniperSwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("JuniperSwitchDataSource", org.openapitools.client.model.JuniperSwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXDistributedFirewall.class, new TypeSelector<org.openapitools.client.model.NSXDistributedFirewall>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXDistributedFirewall> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXDistributedFirewall", org.openapitools.client.model.NSXDistributedFirewall.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXFirewallRule.class, new TypeSelector<org.openapitools.client.model.NSXFirewallRule>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXFirewallRule> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXFirewallRule", org.openapitools.client.model.NSXFirewallRule.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXIPSet.class, new TypeSelector<org.openapitools.client.model.NSXIPSet>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXIPSet> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXIPSet", org.openapitools.client.model.NSXIPSet.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXRedirectRule.class, new TypeSelector<org.openapitools.client.model.NSXRedirectRule>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXRedirectRule> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXRedirectRule", org.openapitools.client.model.NSXRedirectRule.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXSecurityGroup.class, new TypeSelector<org.openapitools.client.model.NSXSecurityGroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXSecurityGroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXSecurityGroup", org.openapitools.client.model.NSXSecurityGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXService.class, new TypeSelector<org.openapitools.client.model.NSXService>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXService> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXService", org.openapitools.client.model.NSXService.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXServiceGroup.class, new TypeSelector<org.openapitools.client.model.NSXServiceGroup>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXServiceGroup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXServiceGroup", org.openapitools.client.model.NSXServiceGroup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXVManager.class, new TypeSelector<org.openapitools.client.model.NSXVManager>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXVManager> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXVManager", org.openapitools.client.model.NSXVManager.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.NSXVManagerDataSource.class, new TypeSelector<org.openapitools.client.model.NSXVManagerDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.NSXVManagerDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("NSXVManagerDataSource", org.openapitools.client.model.NSXVManagerDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.PanFirewallDataSource.class, new TypeSelector<org.openapitools.client.model.PanFirewallDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.PanFirewallDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("PanFirewallDataSource", org.openapitools.client.model.PanFirewallDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ProblemEvent.class, new TypeSelector<org.openapitools.client.model.ProblemEvent>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ProblemEvent> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ProblemEvent", org.openapitools.client.model.ProblemEvent.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.ResourcePool.class, new TypeSelector<org.openapitools.client.model.ResourcePool>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.ResourcePool> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ResourcePool", org.openapitools.client.model.ResourcePool.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SecurityTag.class, new TypeSelector<org.openapitools.client.model.SecurityTag>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SecurityTag> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SecurityTag", org.openapitools.client.model.SecurityTag.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.SwitchDataSource.class, new TypeSelector<org.openapitools.client.model.SwitchDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.SwitchDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("AristaSwitchDataSource", org.openapitools.client.model.AristaSwitchDataSource.class);
                        classByDiscriminatorValue.put("BrocadeSwitchDataSource", org.openapitools.client.model.BrocadeSwitchDataSource.class);
                        classByDiscriminatorValue.put("CheckpointFirewallDataSource", org.openapitools.client.model.CheckpointFirewallDataSource.class);
                        classByDiscriminatorValue.put("CiscoSwitchDataSource", org.openapitools.client.model.CiscoSwitchDataSource.class);
                        classByDiscriminatorValue.put("DellSwitchDataSource", org.openapitools.client.model.DellSwitchDataSource.class);
                        classByDiscriminatorValue.put("HPOneViewManagerDataSource", org.openapitools.client.model.HPOneViewManagerDataSource.class);
                        classByDiscriminatorValue.put("HPOneViewManagerDataSourceRequest", org.openapitools.client.model.HPOneViewManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("HPVCManagerDataSource", org.openapitools.client.model.HPVCManagerDataSource.class);
                        classByDiscriminatorValue.put("HPVCManagerDataSourceRequest", org.openapitools.client.model.HPVCManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("JuniperSwitchDataSource", org.openapitools.client.model.JuniperSwitchDataSource.class);
                        classByDiscriminatorValue.put("PanFirewallDataSource", org.openapitools.client.model.PanFirewallDataSource.class);
                        classByDiscriminatorValue.put("UCSManagerDataSource", org.openapitools.client.model.UCSManagerDataSource.class);
                        classByDiscriminatorValue.put("UCSManagerDataSourceRequest", org.openapitools.client.model.UCSManagerDataSourceRequest.class);
                        classByDiscriminatorValue.put("SwitchDataSource", org.openapitools.client.model.SwitchDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Tier.class, new TypeSelector<org.openapitools.client.model.Tier>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Tier> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Tier", org.openapitools.client.model.Tier.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.UCSManagerDataSource.class, new TypeSelector<org.openapitools.client.model.UCSManagerDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.UCSManagerDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UCSManagerDataSource", org.openapitools.client.model.UCSManagerDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.UCSManagerDataSourceRequest.class, new TypeSelector<org.openapitools.client.model.UCSManagerDataSourceRequest>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.UCSManagerDataSourceRequest> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("UCSManagerDataSourceRequest", org.openapitools.client.model.UCSManagerDataSourceRequest.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VCDatacenter.class, new TypeSelector<org.openapitools.client.model.VCDatacenter>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VCDatacenter> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VCDatacenter", org.openapitools.client.model.VCDatacenter.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VCenterDataSource.class, new TypeSelector<org.openapitools.client.model.VCenterDataSource>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VCenterDataSource> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VCenterDataSource", org.openapitools.client.model.VCenterDataSource.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VCenterManager.class, new TypeSelector<org.openapitools.client.model.VCenterManager>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VCenterManager> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VCenterManager", org.openapitools.client.model.VCenterManager.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VPC.class, new TypeSelector<org.openapitools.client.model.VPC>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VPC> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VPC", org.openapitools.client.model.VPC.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VirtualMachine.class, new TypeSelector<org.openapitools.client.model.VirtualMachine>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VirtualMachine> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VirtualMachine", org.openapitools.client.model.VirtualMachine.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VlanL2Network.class, new TypeSelector<org.openapitools.client.model.VlanL2Network>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VlanL2Network> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VlanL2Network", org.openapitools.client.model.VlanL2Network.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Vmknic.class, new TypeSelector<org.openapitools.client.model.Vmknic>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Vmknic> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Vmknic", org.openapitools.client.model.Vmknic.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.Vnic.class, new TypeSelector<org.openapitools.client.model.Vnic>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.Vnic> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Vnic", org.openapitools.client.model.Vnic.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
                .registerTypeSelector(org.openapitools.client.model.VxlanLayer2Network.class, new TypeSelector<org.openapitools.client.model.VxlanLayer2Network>() {
                    @Override
                    public Class<? extends org.openapitools.client.model.VxlanLayer2Network> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("VxlanLayer2Network", org.openapitools.client.model.VxlanLayer2Network.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "entity_type"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ApiError.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Application.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ApplicationRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.AristaSwitchDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.AristaSwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BaseDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BrocadeSwitchDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.BrocadeSwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CheckpointFirewallDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CheckpointFirewallDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CiscoSwitchDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.CiscoSwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Cluster.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DataSourceEntityId.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DataSourceListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DatasourceHealth.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Datastore.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DellSwitchDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DellSwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DistributedVirtualPortgroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.DistributedVirtualSwitch.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Domain.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2Firewall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2IPSet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2Instance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2NetworkInterface.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2SGFirewallRule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2SecurityGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EC2Service.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EntityId.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EntityIdWithTime.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.EntityName.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ErrorDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Flow.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Folder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.GroupMembershipCriteria.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.HPOneViewManagerDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.HPOneViewManagerDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.HPVCManagerDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.HPVCManagerDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Host.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IpAddressMembershipCriteria.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IpAddressRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IpNumericRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.IpV4Address.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.JuniperSwitchDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.JuniperSwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.MicroSecGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXControllerDataCollection.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXDistributedFirewall.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXFirewallRule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXIPSet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXRedirectRule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXSecurityGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXService.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXServiceGroup.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXVManager.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXVManagerDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NSXVManagerDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NameRequestParam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NamesRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NamesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Node.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NodeId.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.NodeListResult.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PagedListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PagedListResponseWithTime.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PanFirewallDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PanFirewallDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PasswordCredentials.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.PortRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ProblemEvent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RecommendedRule.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RecommendedRules.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RecommendedRulesRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Reference.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.ResourcePool.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.RuleSet.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SNMP2cConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SNMP3Config.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SNMPConfig.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchMembershipCriteria.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SearchRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SecurityTag.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SimpleListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SimplePortRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SortByClause.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.SwitchDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Tier.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.TierListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.TierRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.TimeRange.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Token.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.UCSManagerDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.UCSManagerDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.UserCredential.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VCDatacenter.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VCenterDataSource.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VCenterDataSourceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VCenterManager.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VPC.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VersionResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VirtualMachine.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Vlan.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VlanL2Network.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Vmknic.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.Vnic.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new org.openapitools.client.model.VxlanLayer2Network.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
