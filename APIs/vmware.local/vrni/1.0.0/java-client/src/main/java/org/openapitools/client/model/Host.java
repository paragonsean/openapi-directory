/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseEntity;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Host
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Host extends BaseEntity {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private Reference cluster;

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "connection_state";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private String connectionState;

  public static final String SERIALIZED_NAME_DATASTORES = "datastores";
  @SerializedName(SERIALIZED_NAME_DATASTORES)
  private List<Reference> datastores = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAINTENANCE_MODE = "maintenance_mode";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_MODE)
  private String maintenanceMode;

  public static final String SERIALIZED_NAME_NSX_MANAGER = "nsx_manager";
  @SerializedName(SERIALIZED_NAME_NSX_MANAGER)
  private Reference nsxManager;

  public static final String SERIALIZED_NAME_SERVICE_TAG = "service_tag";
  @SerializedName(SERIALIZED_NAME_SERVICE_TAG)
  private String serviceTag;

  public static final String SERIALIZED_NAME_VCENTER_MANAGER = "vcenter_manager";
  @SerializedName(SERIALIZED_NAME_VCENTER_MANAGER)
  private Reference vcenterManager;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private String vendorId;

  public static final String SERIALIZED_NAME_VM_COUNT = "vm_count";
  @SerializedName(SERIALIZED_NAME_VM_COUNT)
  private Integer vmCount;

  public static final String SERIALIZED_NAME_VMKNICS = "vmknics";
  @SerializedName(SERIALIZED_NAME_VMKNICS)
  private List<Reference> vmknics = new ArrayList<>();

  public Host() {
    this.entityType = this.getClass().getSimpleName();
  }

  public Host cluster(Reference cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public Reference getCluster() {
    return cluster;
  }

  public void setCluster(Reference cluster) {
    this.cluster = cluster;
  }


  public Host connectionState(String connectionState) {
    this.connectionState = connectionState;
    return this;
  }

  /**
   * Get connectionState
   * @return connectionState
   */
  @javax.annotation.Nullable
  public String getConnectionState() {
    return connectionState;
  }

  public void setConnectionState(String connectionState) {
    this.connectionState = connectionState;
  }


  public Host datastores(List<Reference> datastores) {
    this.datastores = datastores;
    return this;
  }

  public Host addDatastoresItem(Reference datastoresItem) {
    if (this.datastores == null) {
      this.datastores = new ArrayList<>();
    }
    this.datastores.add(datastoresItem);
    return this;
  }

  /**
   * Get datastores
   * @return datastores
   */
  @javax.annotation.Nullable
  public List<Reference> getDatastores() {
    return datastores;
  }

  public void setDatastores(List<Reference> datastores) {
    this.datastores = datastores;
  }


  public Host maintenanceMode(String maintenanceMode) {
    this.maintenanceMode = maintenanceMode;
    return this;
  }

  /**
   * Get maintenanceMode
   * @return maintenanceMode
   */
  @javax.annotation.Nullable
  public String getMaintenanceMode() {
    return maintenanceMode;
  }

  public void setMaintenanceMode(String maintenanceMode) {
    this.maintenanceMode = maintenanceMode;
  }


  public Host nsxManager(Reference nsxManager) {
    this.nsxManager = nsxManager;
    return this;
  }

  /**
   * Get nsxManager
   * @return nsxManager
   */
  @javax.annotation.Nullable
  public Reference getNsxManager() {
    return nsxManager;
  }

  public void setNsxManager(Reference nsxManager) {
    this.nsxManager = nsxManager;
  }


  public Host serviceTag(String serviceTag) {
    this.serviceTag = serviceTag;
    return this;
  }

  /**
   * Get serviceTag
   * @return serviceTag
   */
  @javax.annotation.Nullable
  public String getServiceTag() {
    return serviceTag;
  }

  public void setServiceTag(String serviceTag) {
    this.serviceTag = serviceTag;
  }


  public Host vcenterManager(Reference vcenterManager) {
    this.vcenterManager = vcenterManager;
    return this;
  }

  /**
   * Get vcenterManager
   * @return vcenterManager
   */
  @javax.annotation.Nullable
  public Reference getVcenterManager() {
    return vcenterManager;
  }

  public void setVcenterManager(Reference vcenterManager) {
    this.vcenterManager = vcenterManager;
  }


  public Host vendorId(String vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Get vendorId
   * @return vendorId
   */
  @javax.annotation.Nullable
  public String getVendorId() {
    return vendorId;
  }

  public void setVendorId(String vendorId) {
    this.vendorId = vendorId;
  }


  public Host vmCount(Integer vmCount) {
    this.vmCount = vmCount;
    return this;
  }

  /**
   * Get vmCount
   * @return vmCount
   */
  @javax.annotation.Nullable
  public Integer getVmCount() {
    return vmCount;
  }

  public void setVmCount(Integer vmCount) {
    this.vmCount = vmCount;
  }


  public Host vmknics(List<Reference> vmknics) {
    this.vmknics = vmknics;
    return this;
  }

  public Host addVmknicsItem(Reference vmknicsItem) {
    if (this.vmknics == null) {
      this.vmknics = new ArrayList<>();
    }
    this.vmknics.add(vmknicsItem);
    return this;
  }

  /**
   * Get vmknics
   * @return vmknics
   */
  @javax.annotation.Nullable
  public List<Reference> getVmknics() {
    return vmknics;
  }

  public void setVmknics(List<Reference> vmknics) {
    this.vmknics = vmknics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Host host = (Host) o;
    return Objects.equals(this.cluster, host.cluster) &&
        Objects.equals(this.connectionState, host.connectionState) &&
        Objects.equals(this.datastores, host.datastores) &&
        Objects.equals(this.maintenanceMode, host.maintenanceMode) &&
        Objects.equals(this.nsxManager, host.nsxManager) &&
        Objects.equals(this.serviceTag, host.serviceTag) &&
        Objects.equals(this.vcenterManager, host.vcenterManager) &&
        Objects.equals(this.vendorId, host.vendorId) &&
        Objects.equals(this.vmCount, host.vmCount) &&
        Objects.equals(this.vmknics, host.vmknics) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, connectionState, datastores, maintenanceMode, nsxManager, serviceTag, vcenterManager, vendorId, vmCount, vmknics, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Host {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    datastores: ").append(toIndentedString(datastores)).append("\n");
    sb.append("    maintenanceMode: ").append(toIndentedString(maintenanceMode)).append("\n");
    sb.append("    nsxManager: ").append(toIndentedString(nsxManager)).append("\n");
    sb.append("    serviceTag: ").append(toIndentedString(serviceTag)).append("\n");
    sb.append("    vcenterManager: ").append(toIndentedString(vcenterManager)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vmCount: ").append(toIndentedString(vmCount)).append("\n");
    sb.append("    vmknics: ").append(toIndentedString(vmknics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("cluster");
    openapiFields.add("connection_state");
    openapiFields.add("datastores");
    openapiFields.add("maintenance_mode");
    openapiFields.add("nsx_manager");
    openapiFields.add("service_tag");
    openapiFields.add("vcenter_manager");
    openapiFields.add("vendor_id");
    openapiFields.add("vm_count");
    openapiFields.add("vmknics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Host
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Host.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Host is not found in the empty JSON string", Host.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Host.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Host` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Host.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Host' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Host> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Host.class));

       return (TypeAdapter<T>) new TypeAdapter<Host>() {
           @Override
           public void write(JsonWriter out, Host value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Host read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Host given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Host
   * @throws IOException if the JSON string is invalid with respect to Host
   */
  public static Host fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Host.class);
  }

  /**
   * Convert an instance of Host to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

