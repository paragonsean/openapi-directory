/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EntityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseEntity {
  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  protected EntityType entityType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public BaseEntity() {
    this.entityType = this.getClass().getSimpleName();
  }

  public BaseEntity entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public BaseEntity entityType(EntityType entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityType getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityType entityType) {
    this.entityType = entityType;
  }


  public BaseEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseEntity baseEntity = (BaseEntity) o;
    return Objects.equals(this.entityId, baseEntity.entityId) &&
        Objects.equals(this.entityType, baseEntity.entityType) &&
        Objects.equals(this.name, baseEntity.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityId, entityType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseEntity {\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseEntity is not found in the empty JSON string", BaseEntity.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("entity_type").getAsString();
      switch (discriminatorValue) {
        case "Application":
          Application.validateJsonElement(jsonElement);
          break;
        case "BaseEvent":
          BaseEvent.validateJsonElement(jsonElement);
          break;
        case "BaseFirewall":
          BaseFirewall.validateJsonElement(jsonElement);
          break;
        case "BaseFirewallRule":
          BaseFirewallRule.validateJsonElement(jsonElement);
          break;
        case "BaseIPSet":
          BaseIPSet.validateJsonElement(jsonElement);
          break;
        case "BaseL2Network":
          BaseL2Network.validateJsonElement(jsonElement);
          break;
        case "BaseManager":
          BaseManager.validateJsonElement(jsonElement);
          break;
        case "BaseNSXManager":
          BaseNSXManager.validateJsonElement(jsonElement);
          break;
        case "BaseSecurityGroup":
          BaseSecurityGroup.validateJsonElement(jsonElement);
          break;
        case "BaseService":
          BaseService.validateJsonElement(jsonElement);
          break;
        case "BaseServiceGroup":
          BaseServiceGroup.validateJsonElement(jsonElement);
          break;
        case "BaseVirtualMachine":
          BaseVirtualMachine.validateJsonElement(jsonElement);
          break;
        case "BaseVnic":
          BaseVnic.validateJsonElement(jsonElement);
          break;
        case "Cluster":
          Cluster.validateJsonElement(jsonElement);
          break;
        case "Datastore":
          Datastore.validateJsonElement(jsonElement);
          break;
        case "DistributedVirtualPortgroup":
          DistributedVirtualPortgroup.validateJsonElement(jsonElement);
          break;
        case "DistributedVirtualSwitch":
          DistributedVirtualSwitch.validateJsonElement(jsonElement);
          break;
        case "EC2Firewall":
          EC2Firewall.validateJsonElement(jsonElement);
          break;
        case "EC2IPSet":
          EC2IPSet.validateJsonElement(jsonElement);
          break;
        case "EC2Instance":
          EC2Instance.validateJsonElement(jsonElement);
          break;
        case "EC2NetworkInterface":
          EC2NetworkInterface.validateJsonElement(jsonElement);
          break;
        case "EC2SGFirewallRule":
          EC2SGFirewallRule.validateJsonElement(jsonElement);
          break;
        case "EC2SecurityGroup":
          EC2SecurityGroup.validateJsonElement(jsonElement);
          break;
        case "EC2Service":
          EC2Service.validateJsonElement(jsonElement);
          break;
        case "Flow":
          Flow.validateJsonElement(jsonElement);
          break;
        case "Folder":
          Folder.validateJsonElement(jsonElement);
          break;
        case "Group":
          Group.validateJsonElement(jsonElement);
          break;
        case "Host":
          Host.validateJsonElement(jsonElement);
          break;
        case "NSXDistributedFirewall":
          NSXDistributedFirewall.validateJsonElement(jsonElement);
          break;
        case "NSXFirewallRule":
          NSXFirewallRule.validateJsonElement(jsonElement);
          break;
        case "NSXIPSet":
          NSXIPSet.validateJsonElement(jsonElement);
          break;
        case "NSXRedirectRule":
          NSXRedirectRule.validateJsonElement(jsonElement);
          break;
        case "NSXSecurityGroup":
          NSXSecurityGroup.validateJsonElement(jsonElement);
          break;
        case "NSXService":
          NSXService.validateJsonElement(jsonElement);
          break;
        case "NSXServiceGroup":
          NSXServiceGroup.validateJsonElement(jsonElement);
          break;
        case "NSXVManager":
          NSXVManager.validateJsonElement(jsonElement);
          break;
        case "ProblemEvent":
          ProblemEvent.validateJsonElement(jsonElement);
          break;
        case "ResourcePool":
          ResourcePool.validateJsonElement(jsonElement);
          break;
        case "SecurityTag":
          SecurityTag.validateJsonElement(jsonElement);
          break;
        case "Tier":
          Tier.validateJsonElement(jsonElement);
          break;
        case "VCDatacenter":
          VCDatacenter.validateJsonElement(jsonElement);
          break;
        case "VCenterManager":
          VCenterManager.validateJsonElement(jsonElement);
          break;
        case "VPC":
          VPC.validateJsonElement(jsonElement);
          break;
        case "VirtualMachine":
          VirtualMachine.validateJsonElement(jsonElement);
          break;
        case "VlanL2Network":
          VlanL2Network.validateJsonElement(jsonElement);
          break;
        case "Vmknic":
          Vmknic.validateJsonElement(jsonElement);
          break;
        case "Vnic":
          Vnic.validateJsonElement(jsonElement);
          break;
        case "VxlanLayer2Network":
          VxlanLayer2Network.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `entity_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseEntity
   * @throws IOException if the JSON string is invalid with respect to BaseEntity
   */
  public static BaseEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseEntity.class);
  }

  /**
   * Convert an instance of BaseEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

