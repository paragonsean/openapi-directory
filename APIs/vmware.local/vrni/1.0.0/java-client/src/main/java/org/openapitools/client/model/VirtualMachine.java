/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseVirtualMachine;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.IpV4Address;
import org.openapitools.client.model.Reference;
import org.openapitools.client.model.RuleSet;
import org.openapitools.client.model.Vlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualMachine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachine extends BaseVirtualMachine {
  public static final String SERIALIZED_NAME_APPLIED_TO_DESTINATION_RULES = "applied_to_destination_rules";
  @SerializedName(SERIALIZED_NAME_APPLIED_TO_DESTINATION_RULES)
  private List<RuleSet> appliedToDestinationRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLIED_TO_SOURCE_RULES = "applied_to_source_rules";
  @SerializedName(SERIALIZED_NAME_APPLIED_TO_SOURCE_RULES)
  private List<RuleSet> appliedToSourceRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private Reference cluster;

  public static final String SERIALIZED_NAME_DATACENTER = "datacenter";
  @SerializedName(SERIALIZED_NAME_DATACENTER)
  private Reference datacenter;

  public static final String SERIALIZED_NAME_DATASTORES = "datastores";
  @SerializedName(SERIALIZED_NAME_DATASTORES)
  private List<Reference> datastores = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_INVERSION_RULES = "destination_inversion_rules";
  @SerializedName(SERIALIZED_NAME_DESTINATION_INVERSION_RULES)
  private List<RuleSet> destinationInversionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOLDERS = "folders";
  @SerializedName(SERIALIZED_NAME_FOLDERS)
  private List<Reference> folders = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private Reference host;

  public static final String SERIALIZED_NAME_LAYER2_NETWORKS = "layer2_networks";
  @SerializedName(SERIALIZED_NAME_LAYER2_NETWORKS)
  private List<Reference> layer2Networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_NSX_MANAGER = "nsx_manager";
  @SerializedName(SERIALIZED_NAME_NSX_MANAGER)
  private Reference nsxManager;

  public static final String SERIALIZED_NAME_RESOURCE_POOL = "resource_pool";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL)
  private Reference resourcePool;

  public static final String SERIALIZED_NAME_SECURITY_TAGS = "security_tags";
  @SerializedName(SERIALIZED_NAME_SECURITY_TAGS)
  private List<Reference> securityTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_INVERSION_RULES = "source_inversion_rules";
  @SerializedName(SERIALIZED_NAME_SOURCE_INVERSION_RULES)
  private List<RuleSet> sourceInversionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_VCENTER_MANAGER = "vcenter_manager";
  @SerializedName(SERIALIZED_NAME_VCENTER_MANAGER)
  private Reference vcenterManager;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private String vendorId;

  public static final String SERIALIZED_NAME_VLANS = "vlans";
  @SerializedName(SERIALIZED_NAME_VLANS)
  private List<Vlan> vlans = new ArrayList<>();

  public VirtualMachine() {
    this.entityType = this.getClass().getSimpleName();
  }

  public VirtualMachine appliedToDestinationRules(List<RuleSet> appliedToDestinationRules) {
    this.appliedToDestinationRules = appliedToDestinationRules;
    return this;
  }

  public VirtualMachine addAppliedToDestinationRulesItem(RuleSet appliedToDestinationRulesItem) {
    if (this.appliedToDestinationRules == null) {
      this.appliedToDestinationRules = new ArrayList<>();
    }
    this.appliedToDestinationRules.add(appliedToDestinationRulesItem);
    return this;
  }

  /**
   * Get appliedToDestinationRules
   * @return appliedToDestinationRules
   */
  @javax.annotation.Nullable
  public List<RuleSet> getAppliedToDestinationRules() {
    return appliedToDestinationRules;
  }

  public void setAppliedToDestinationRules(List<RuleSet> appliedToDestinationRules) {
    this.appliedToDestinationRules = appliedToDestinationRules;
  }


  public VirtualMachine appliedToSourceRules(List<RuleSet> appliedToSourceRules) {
    this.appliedToSourceRules = appliedToSourceRules;
    return this;
  }

  public VirtualMachine addAppliedToSourceRulesItem(RuleSet appliedToSourceRulesItem) {
    if (this.appliedToSourceRules == null) {
      this.appliedToSourceRules = new ArrayList<>();
    }
    this.appliedToSourceRules.add(appliedToSourceRulesItem);
    return this;
  }

  /**
   * Get appliedToSourceRules
   * @return appliedToSourceRules
   */
  @javax.annotation.Nullable
  public List<RuleSet> getAppliedToSourceRules() {
    return appliedToSourceRules;
  }

  public void setAppliedToSourceRules(List<RuleSet> appliedToSourceRules) {
    this.appliedToSourceRules = appliedToSourceRules;
  }


  public VirtualMachine cluster(Reference cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Get cluster
   * @return cluster
   */
  @javax.annotation.Nullable
  public Reference getCluster() {
    return cluster;
  }

  public void setCluster(Reference cluster) {
    this.cluster = cluster;
  }


  public VirtualMachine datacenter(Reference datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  /**
   * Get datacenter
   * @return datacenter
   */
  @javax.annotation.Nullable
  public Reference getDatacenter() {
    return datacenter;
  }

  public void setDatacenter(Reference datacenter) {
    this.datacenter = datacenter;
  }


  public VirtualMachine datastores(List<Reference> datastores) {
    this.datastores = datastores;
    return this;
  }

  public VirtualMachine addDatastoresItem(Reference datastoresItem) {
    if (this.datastores == null) {
      this.datastores = new ArrayList<>();
    }
    this.datastores.add(datastoresItem);
    return this;
  }

  /**
   * Get datastores
   * @return datastores
   */
  @javax.annotation.Nullable
  public List<Reference> getDatastores() {
    return datastores;
  }

  public void setDatastores(List<Reference> datastores) {
    this.datastores = datastores;
  }


  public VirtualMachine destinationInversionRules(List<RuleSet> destinationInversionRules) {
    this.destinationInversionRules = destinationInversionRules;
    return this;
  }

  public VirtualMachine addDestinationInversionRulesItem(RuleSet destinationInversionRulesItem) {
    if (this.destinationInversionRules == null) {
      this.destinationInversionRules = new ArrayList<>();
    }
    this.destinationInversionRules.add(destinationInversionRulesItem);
    return this;
  }

  /**
   * Get destinationInversionRules
   * @return destinationInversionRules
   */
  @javax.annotation.Nullable
  public List<RuleSet> getDestinationInversionRules() {
    return destinationInversionRules;
  }

  public void setDestinationInversionRules(List<RuleSet> destinationInversionRules) {
    this.destinationInversionRules = destinationInversionRules;
  }


  public VirtualMachine folders(List<Reference> folders) {
    this.folders = folders;
    return this;
  }

  public VirtualMachine addFoldersItem(Reference foldersItem) {
    if (this.folders == null) {
      this.folders = new ArrayList<>();
    }
    this.folders.add(foldersItem);
    return this;
  }

  /**
   * Get folders
   * @return folders
   */
  @javax.annotation.Nullable
  public List<Reference> getFolders() {
    return folders;
  }

  public void setFolders(List<Reference> folders) {
    this.folders = folders;
  }


  public VirtualMachine host(Reference host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public Reference getHost() {
    return host;
  }

  public void setHost(Reference host) {
    this.host = host;
  }


  public VirtualMachine layer2Networks(List<Reference> layer2Networks) {
    this.layer2Networks = layer2Networks;
    return this;
  }

  public VirtualMachine addLayer2NetworksItem(Reference layer2NetworksItem) {
    if (this.layer2Networks == null) {
      this.layer2Networks = new ArrayList<>();
    }
    this.layer2Networks.add(layer2NetworksItem);
    return this;
  }

  /**
   * Get layer2Networks
   * @return layer2Networks
   */
  @javax.annotation.Nullable
  public List<Reference> getLayer2Networks() {
    return layer2Networks;
  }

  public void setLayer2Networks(List<Reference> layer2Networks) {
    this.layer2Networks = layer2Networks;
  }


  public VirtualMachine nsxManager(Reference nsxManager) {
    this.nsxManager = nsxManager;
    return this;
  }

  /**
   * Get nsxManager
   * @return nsxManager
   */
  @javax.annotation.Nullable
  public Reference getNsxManager() {
    return nsxManager;
  }

  public void setNsxManager(Reference nsxManager) {
    this.nsxManager = nsxManager;
  }


  public VirtualMachine resourcePool(Reference resourcePool) {
    this.resourcePool = resourcePool;
    return this;
  }

  /**
   * Get resourcePool
   * @return resourcePool
   */
  @javax.annotation.Nullable
  public Reference getResourcePool() {
    return resourcePool;
  }

  public void setResourcePool(Reference resourcePool) {
    this.resourcePool = resourcePool;
  }


  public VirtualMachine securityTags(List<Reference> securityTags) {
    this.securityTags = securityTags;
    return this;
  }

  public VirtualMachine addSecurityTagsItem(Reference securityTagsItem) {
    if (this.securityTags == null) {
      this.securityTags = new ArrayList<>();
    }
    this.securityTags.add(securityTagsItem);
    return this;
  }

  /**
   * Get securityTags
   * @return securityTags
   */
  @javax.annotation.Nullable
  public List<Reference> getSecurityTags() {
    return securityTags;
  }

  public void setSecurityTags(List<Reference> securityTags) {
    this.securityTags = securityTags;
  }


  public VirtualMachine sourceInversionRules(List<RuleSet> sourceInversionRules) {
    this.sourceInversionRules = sourceInversionRules;
    return this;
  }

  public VirtualMachine addSourceInversionRulesItem(RuleSet sourceInversionRulesItem) {
    if (this.sourceInversionRules == null) {
      this.sourceInversionRules = new ArrayList<>();
    }
    this.sourceInversionRules.add(sourceInversionRulesItem);
    return this;
  }

  /**
   * Get sourceInversionRules
   * @return sourceInversionRules
   */
  @javax.annotation.Nullable
  public List<RuleSet> getSourceInversionRules() {
    return sourceInversionRules;
  }

  public void setSourceInversionRules(List<RuleSet> sourceInversionRules) {
    this.sourceInversionRules = sourceInversionRules;
  }


  public VirtualMachine vcenterManager(Reference vcenterManager) {
    this.vcenterManager = vcenterManager;
    return this;
  }

  /**
   * Get vcenterManager
   * @return vcenterManager
   */
  @javax.annotation.Nullable
  public Reference getVcenterManager() {
    return vcenterManager;
  }

  public void setVcenterManager(Reference vcenterManager) {
    this.vcenterManager = vcenterManager;
  }


  public VirtualMachine vendorId(String vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * Get vendorId
   * @return vendorId
   */
  @javax.annotation.Nullable
  public String getVendorId() {
    return vendorId;
  }

  public void setVendorId(String vendorId) {
    this.vendorId = vendorId;
  }


  public VirtualMachine vlans(List<Vlan> vlans) {
    this.vlans = vlans;
    return this;
  }

  public VirtualMachine addVlansItem(Vlan vlansItem) {
    if (this.vlans == null) {
      this.vlans = new ArrayList<>();
    }
    this.vlans.add(vlansItem);
    return this;
  }

  /**
   * Get vlans
   * @return vlans
   */
  @javax.annotation.Nullable
  public List<Vlan> getVlans() {
    return vlans;
  }

  public void setVlans(List<Vlan> vlans) {
    this.vlans = vlans;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachine virtualMachine = (VirtualMachine) o;
    return Objects.equals(this.appliedToDestinationRules, virtualMachine.appliedToDestinationRules) &&
        Objects.equals(this.appliedToSourceRules, virtualMachine.appliedToSourceRules) &&
        Objects.equals(this.cluster, virtualMachine.cluster) &&
        Objects.equals(this.datacenter, virtualMachine.datacenter) &&
        Objects.equals(this.datastores, virtualMachine.datastores) &&
        Objects.equals(this.destinationInversionRules, virtualMachine.destinationInversionRules) &&
        Objects.equals(this.folders, virtualMachine.folders) &&
        Objects.equals(this.host, virtualMachine.host) &&
        Objects.equals(this.layer2Networks, virtualMachine.layer2Networks) &&
        Objects.equals(this.nsxManager, virtualMachine.nsxManager) &&
        Objects.equals(this.resourcePool, virtualMachine.resourcePool) &&
        Objects.equals(this.securityTags, virtualMachine.securityTags) &&
        Objects.equals(this.sourceInversionRules, virtualMachine.sourceInversionRules) &&
        Objects.equals(this.vcenterManager, virtualMachine.vcenterManager) &&
        Objects.equals(this.vendorId, virtualMachine.vendorId) &&
        Objects.equals(this.vlans, virtualMachine.vlans) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedToDestinationRules, appliedToSourceRules, cluster, datacenter, datastores, destinationInversionRules, folders, host, layer2Networks, nsxManager, resourcePool, securityTags, sourceInversionRules, vcenterManager, vendorId, vlans, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachine {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    appliedToDestinationRules: ").append(toIndentedString(appliedToDestinationRules)).append("\n");
    sb.append("    appliedToSourceRules: ").append(toIndentedString(appliedToSourceRules)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    datacenter: ").append(toIndentedString(datacenter)).append("\n");
    sb.append("    datastores: ").append(toIndentedString(datastores)).append("\n");
    sb.append("    destinationInversionRules: ").append(toIndentedString(destinationInversionRules)).append("\n");
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    layer2Networks: ").append(toIndentedString(layer2Networks)).append("\n");
    sb.append("    nsxManager: ").append(toIndentedString(nsxManager)).append("\n");
    sb.append("    resourcePool: ").append(toIndentedString(resourcePool)).append("\n");
    sb.append("    securityTags: ").append(toIndentedString(securityTags)).append("\n");
    sb.append("    sourceInversionRules: ").append(toIndentedString(sourceInversionRules)).append("\n");
    sb.append("    vcenterManager: ").append(toIndentedString(vcenterManager)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vlans: ").append(toIndentedString(vlans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("default_gateway");
    openapiFields.add("destination_firewall_rules");
    openapiFields.add("ip_addresses");
    openapiFields.add("ip_sets");
    openapiFields.add("security_groups");
    openapiFields.add("source_firewall_rules");
    openapiFields.add("vnics");
    openapiFields.add("applied_to_destination_rules");
    openapiFields.add("applied_to_source_rules");
    openapiFields.add("cluster");
    openapiFields.add("datacenter");
    openapiFields.add("datastores");
    openapiFields.add("destination_inversion_rules");
    openapiFields.add("folders");
    openapiFields.add("host");
    openapiFields.add("layer2_networks");
    openapiFields.add("nsx_manager");
    openapiFields.add("resource_pool");
    openapiFields.add("security_tags");
    openapiFields.add("source_inversion_rules");
    openapiFields.add("vcenter_manager");
    openapiFields.add("vendor_id");
    openapiFields.add("vlans");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachine is not found in the empty JSON string", VirtualMachine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachine.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachine>() {
           @Override
           public void write(JsonWriter out, VirtualMachine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachine
   * @throws IOException if the JSON string is invalid with respect to VirtualMachine
   */
  public static VirtualMachine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachine.class);
  }

  /**
   * Convert an instance of VirtualMachine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

