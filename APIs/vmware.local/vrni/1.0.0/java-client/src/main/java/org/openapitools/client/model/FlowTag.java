/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FlowTag
 */
@JsonAdapter(FlowTag.Adapter.class)
public enum FlowTag {
  
  TRAFFIC_TYPE_UNKNOWN("TAG_TRAFFIC_TYPE_UNKNOWN"),
  
  INTERNET_TRAFFIC("TAG_INTERNET_TRAFFIC"),
  
  EAST_WEST_TRAFFIC("TAG_EAST_WEST_TRAFFIC"),
  
  VM_VM_TRAFFIC("TAG_VM_VM_TRAFFIC"),
  
  VM_PHY_TRAFFIC("TAG_VM_PHY_TRAFFIC"),
  
  PHY_PHY_TRAFFIC("TAG_PHY_PHY_TRAFFIC"),
  
  SRC_IP_VMKNIC("TAG_SRC_IP_VMKNIC"),
  
  DST_IP_VMKNIC("TAG_DST_IP_VMKNIC"),
  
  SRC_IP_VM("TAG_SRC_IP_VM"),
  
  DST_IP_VM("TAG_DST_IP_VM"),
  
  SRC_IP_INTERNET("TAG_SRC_IP_INTERNET"),
  
  DST_IP_INTERNET("TAG_DST_IP_INTERNET"),
  
  SRC_IP_PHYSICAL("TAG_SRC_IP_PHYSICAL"),
  
  DST_IP_PHYSICAL("TAG_DST_IP_PHYSICAL"),
  
  SAME_HOST("TAG_SAME_HOST"),
  
  DIFF_HOST("TAG_DIFF_HOST"),
  
  SHARED_SERVICE("TAG_SHARED_SERVICE"),
  
  NOT_SHARED_SERVICE("TAG_NOT_SHARED_SERVICE"),
  
  NETWORK_SWITCHED("TAG_NETWORK_SWITCHED"),
  
  NETWORK_ROUTED("TAG_NETWORK_ROUTED"),
  
  NETWORK_UNKNOWN("TAG_NETWORK_UNKNOWN"),
  
  SRC_IP_VTEP("TAG_SRC_IP_VTEP"),
  
  DST_IP_VTEP("TAG_DST_IP_VTEP"),
  
  UNICAST("TAG_UNICAST"),
  
  BROADCAST("TAG_BROADCAST"),
  
  MULTICAST("TAG_MULTICAST"),
  
  SRC_IP_LINK_LOCAL("TAG_SRC_IP_LINK_LOCAL"),
  
  DST_IP_LINK_LOCAL("TAG_DST_IP_LINK_LOCAL"),
  
  SRC_IP_CLASS_E("TAG_SRC_IP_CLASS_E"),
  
  DST_IP_CLASS_E("TAG_DST_IP_CLASS_E"),
  
  SRC_IP_CLASS_A_RESERVED("TAG_SRC_IP_CLASS_A_RESERVED"),
  
  DST_IP_CLASS_A_RESERVED("TAG_DST_IP_CLASS_A_RESERVED"),
  
  INVALID_IP_PACKETS("TAG_INVALID_IP_PACKETS"),
  
  NOT_ANALYZED("TAG_NOT_ANALYZED"),
  
  GENERIC_INTERNET_SRC_IP("TAG_GENERIC_INTERNET_SRC_IP"),
  
  SNAT_DNAT_FLOW("TAG_SNAT_DNAT_FLOW"),
  
  MULTINICS("TAG_MULTINICS"),
  
  SRC_VC("TAG_SRC_VC"),
  
  DST_VC("TAG_DST_VC"),
  
  SRC_AWS("TAG_SRC_AWS"),
  
  DST_AWS("TAG_DST_AWS"),
  
  WITHIN_DC("TAG_WITHIN_DC"),
  
  DIFF_DC("TAG_DIFF_DC"),
  
  WITHIN_VPC("TAG_WITHIN_VPC"),
  
  DIFF_VPC("TAG_DIFF_VPC");

  private String value;

  FlowTag(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FlowTag fromValue(String value) {
    for (FlowTag b : FlowTag.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FlowTag> {
    @Override
    public void write(final JsonWriter jsonWriter, final FlowTag enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FlowTag read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FlowTag.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FlowTag.fromValue(value);
  }
}

