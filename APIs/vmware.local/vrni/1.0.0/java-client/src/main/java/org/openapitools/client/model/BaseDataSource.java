/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataSourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BaseDataSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseDataSource {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled = true;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  protected DataSourceType entityType;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PROXY_ID = "proxy_id";
  @SerializedName(SERIALIZED_NAME_PROXY_ID)
  private String proxyId;

  public BaseDataSource() {
    this.entityType = this.getClass().getSimpleName();
  }

  public BaseDataSource enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public BaseDataSource entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public BaseDataSource entityType(DataSourceType entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public DataSourceType getEntityType() {
    return entityType;
  }

  public void setEntityType(DataSourceType entityType) {
    this.entityType = entityType;
  }


  public BaseDataSource fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Get fqdn
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public BaseDataSource ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public BaseDataSource nickname(String nickname) {
    this.nickname = nickname;
    return this;
  }

  /**
   * Get nickname
   * @return nickname
   */
  @javax.annotation.Nullable
  public String getNickname() {
    return nickname;
  }

  public void setNickname(String nickname) {
    this.nickname = nickname;
  }


  public BaseDataSource notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public BaseDataSource proxyId(String proxyId) {
    this.proxyId = proxyId;
    return this;
  }

  /**
   * proxy vm which should register this vcenter
   * @return proxyId
   */
  @javax.annotation.Nullable
  public String getProxyId() {
    return proxyId;
  }

  public void setProxyId(String proxyId) {
    this.proxyId = proxyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseDataSource baseDataSource = (BaseDataSource) o;
    return Objects.equals(this.enabled, baseDataSource.enabled) &&
        Objects.equals(this.entityId, baseDataSource.entityId) &&
        Objects.equals(this.entityType, baseDataSource.entityType) &&
        Objects.equals(this.fqdn, baseDataSource.fqdn) &&
        Objects.equals(this.ip, baseDataSource.ip) &&
        Objects.equals(this.nickname, baseDataSource.nickname) &&
        Objects.equals(this.notes, baseDataSource.notes) &&
        Objects.equals(this.proxyId, baseDataSource.proxyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, entityId, entityType, fqdn, ip, nickname, notes, proxyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseDataSource {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    proxyId: ").append(toIndentedString(proxyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("fqdn");
    openapiFields.add("ip");
    openapiFields.add("nickname");
    openapiFields.add("notes");
    openapiFields.add("proxy_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseDataSource is not found in the empty JSON string", BaseDataSource.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("entity_type").getAsString();
      switch (discriminatorValue) {
        case "AristaSwitchDataSource":
          AristaSwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "BrocadeSwitchDataSource":
          BrocadeSwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "CheckpointFirewallDataSource":
          CheckpointFirewallDataSource.validateJsonElement(jsonElement);
          break;
        case "CiscoSwitchDataSource":
          CiscoSwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "DellSwitchDataSource":
          DellSwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "HPOneViewManagerDataSource":
          HPOneViewManagerDataSource.validateJsonElement(jsonElement);
          break;
        case "HPOneViewManagerDataSourceRequest":
          HPOneViewManagerDataSourceRequest.validateJsonElement(jsonElement);
          break;
        case "HPVCManagerDataSource":
          HPVCManagerDataSource.validateJsonElement(jsonElement);
          break;
        case "HPVCManagerDataSourceRequest":
          HPVCManagerDataSourceRequest.validateJsonElement(jsonElement);
          break;
        case "JuniperSwitchDataSource":
          JuniperSwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "NSXVManagerDataSource":
          NSXVManagerDataSource.validateJsonElement(jsonElement);
          break;
        case "PanFirewallDataSource":
          PanFirewallDataSource.validateJsonElement(jsonElement);
          break;
        case "SwitchDataSource":
          SwitchDataSource.validateJsonElement(jsonElement);
          break;
        case "UCSManagerDataSource":
          UCSManagerDataSource.validateJsonElement(jsonElement);
          break;
        case "UCSManagerDataSourceRequest":
          UCSManagerDataSourceRequest.validateJsonElement(jsonElement);
          break;
        case "VCenterDataSource":
          VCenterDataSource.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `entity_type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseDataSource
   * @throws IOException if the JSON string is invalid with respect to BaseDataSource
   */
  public static BaseDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseDataSource.class);
  }

  /**
   * Convert an instance of BaseDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

