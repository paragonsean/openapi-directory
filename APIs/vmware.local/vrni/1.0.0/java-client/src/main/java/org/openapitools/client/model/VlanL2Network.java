/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseL2Network;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VlanL2Network
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VlanL2Network extends BaseL2Network {
  public static final String SERIALIZED_NAME_DISTRIBUTED_VIRTUAL_PORTGROUPS = "distributed_virtual_portgroups";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTED_VIRTUAL_PORTGROUPS)
  private List<Reference> distributedVirtualPortgroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTED_VIRTUAL_SWITCHES = "distributed_virtual_switches";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTED_VIRTUAL_SWITCHES)
  private List<Reference> distributedVirtualSwitches = new ArrayList<>();

  public static final String SERIALIZED_NAME_VLAN_ID = "vlan_id";
  @SerializedName(SERIALIZED_NAME_VLAN_ID)
  private String vlanId;

  public VlanL2Network() {
    this.entityType = this.getClass().getSimpleName();
  }

  public VlanL2Network distributedVirtualPortgroups(List<Reference> distributedVirtualPortgroups) {
    this.distributedVirtualPortgroups = distributedVirtualPortgroups;
    return this;
  }

  public VlanL2Network addDistributedVirtualPortgroupsItem(Reference distributedVirtualPortgroupsItem) {
    if (this.distributedVirtualPortgroups == null) {
      this.distributedVirtualPortgroups = new ArrayList<>();
    }
    this.distributedVirtualPortgroups.add(distributedVirtualPortgroupsItem);
    return this;
  }

  /**
   * Get distributedVirtualPortgroups
   * @return distributedVirtualPortgroups
   */
  @javax.annotation.Nullable
  public List<Reference> getDistributedVirtualPortgroups() {
    return distributedVirtualPortgroups;
  }

  public void setDistributedVirtualPortgroups(List<Reference> distributedVirtualPortgroups) {
    this.distributedVirtualPortgroups = distributedVirtualPortgroups;
  }


  public VlanL2Network distributedVirtualSwitches(List<Reference> distributedVirtualSwitches) {
    this.distributedVirtualSwitches = distributedVirtualSwitches;
    return this;
  }

  public VlanL2Network addDistributedVirtualSwitchesItem(Reference distributedVirtualSwitchesItem) {
    if (this.distributedVirtualSwitches == null) {
      this.distributedVirtualSwitches = new ArrayList<>();
    }
    this.distributedVirtualSwitches.add(distributedVirtualSwitchesItem);
    return this;
  }

  /**
   * Get distributedVirtualSwitches
   * @return distributedVirtualSwitches
   */
  @javax.annotation.Nullable
  public List<Reference> getDistributedVirtualSwitches() {
    return distributedVirtualSwitches;
  }

  public void setDistributedVirtualSwitches(List<Reference> distributedVirtualSwitches) {
    this.distributedVirtualSwitches = distributedVirtualSwitches;
  }


  public VlanL2Network vlanId(String vlanId) {
    this.vlanId = vlanId;
    return this;
  }

  /**
   * Get vlanId
   * @return vlanId
   */
  @javax.annotation.Nullable
  public String getVlanId() {
    return vlanId;
  }

  public void setVlanId(String vlanId) {
    this.vlanId = vlanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VlanL2Network vlanL2Network = (VlanL2Network) o;
    return Objects.equals(this.distributedVirtualPortgroups, vlanL2Network.distributedVirtualPortgroups) &&
        Objects.equals(this.distributedVirtualSwitches, vlanL2Network.distributedVirtualSwitches) &&
        Objects.equals(this.vlanId, vlanL2Network.vlanId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributedVirtualPortgroups, distributedVirtualSwitches, vlanId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VlanL2Network {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    distributedVirtualPortgroups: ").append(toIndentedString(distributedVirtualPortgroups)).append("\n");
    sb.append("    distributedVirtualSwitches: ").append(toIndentedString(distributedVirtualSwitches)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("gateways");
    openapiFields.add("network_addresses");
    openapiFields.add("distributed_virtual_portgroups");
    openapiFields.add("distributed_virtual_switches");
    openapiFields.add("vlan_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VlanL2Network
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VlanL2Network.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VlanL2Network is not found in the empty JSON string", VlanL2Network.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VlanL2Network.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VlanL2Network` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VlanL2Network.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VlanL2Network' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VlanL2Network> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VlanL2Network.class));

       return (TypeAdapter<T>) new TypeAdapter<VlanL2Network>() {
           @Override
           public void write(JsonWriter out, VlanL2Network value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VlanL2Network read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VlanL2Network given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VlanL2Network
   * @throws IOException if the JSON string is invalid with respect to VlanL2Network
   */
  public static VlanL2Network fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VlanL2Network.class);
  }

  /**
   * Convert an instance of VlanL2Network to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

