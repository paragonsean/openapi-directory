/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SNMP2cConfig;
import org.openapitools.client.model.SNMP3Config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SNMPConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SNMPConfig {
  public static final String SERIALIZED_NAME_CONFIG_SNMP2C = "config_snmp_2c";
  @SerializedName(SERIALIZED_NAME_CONFIG_SNMP2C)
  private SNMP2cConfig configSnmp2c;

  public static final String SERIALIZED_NAME_CONFIG_SNMP3 = "config_snmp_3";
  @SerializedName(SERIALIZED_NAME_CONFIG_SNMP3)
  private SNMP3Config configSnmp3;

  public static final String SERIALIZED_NAME_SNMP_ENABLED = "snmp_enabled";
  @SerializedName(SERIALIZED_NAME_SNMP_ENABLED)
  private Boolean snmpEnabled = false;

  /**
   * Gets or Sets snmpVersion
   */
  @JsonAdapter(SnmpVersionEnum.Adapter.class)
  public enum SnmpVersionEnum {
    V2C("v2c"),
    
    V3("v3");

    private String value;

    SnmpVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SnmpVersionEnum fromValue(String value) {
      for (SnmpVersionEnum b : SnmpVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SnmpVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SnmpVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SnmpVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SnmpVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SnmpVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SNMP_VERSION = "snmp_version";
  @SerializedName(SERIALIZED_NAME_SNMP_VERSION)
  private SnmpVersionEnum snmpVersion;

  public SNMPConfig() {
  }

  public SNMPConfig configSnmp2c(SNMP2cConfig configSnmp2c) {
    this.configSnmp2c = configSnmp2c;
    return this;
  }

  /**
   * Get configSnmp2c
   * @return configSnmp2c
   */
  @javax.annotation.Nullable
  public SNMP2cConfig getConfigSnmp2c() {
    return configSnmp2c;
  }

  public void setConfigSnmp2c(SNMP2cConfig configSnmp2c) {
    this.configSnmp2c = configSnmp2c;
  }


  public SNMPConfig configSnmp3(SNMP3Config configSnmp3) {
    this.configSnmp3 = configSnmp3;
    return this;
  }

  /**
   * Get configSnmp3
   * @return configSnmp3
   */
  @javax.annotation.Nullable
  public SNMP3Config getConfigSnmp3() {
    return configSnmp3;
  }

  public void setConfigSnmp3(SNMP3Config configSnmp3) {
    this.configSnmp3 = configSnmp3;
  }


  public SNMPConfig snmpEnabled(Boolean snmpEnabled) {
    this.snmpEnabled = snmpEnabled;
    return this;
  }

  /**
   * Get snmpEnabled
   * @return snmpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSnmpEnabled() {
    return snmpEnabled;
  }

  public void setSnmpEnabled(Boolean snmpEnabled) {
    this.snmpEnabled = snmpEnabled;
  }


  public SNMPConfig snmpVersion(SnmpVersionEnum snmpVersion) {
    this.snmpVersion = snmpVersion;
    return this;
  }

  /**
   * Get snmpVersion
   * @return snmpVersion
   */
  @javax.annotation.Nullable
  public SnmpVersionEnum getSnmpVersion() {
    return snmpVersion;
  }

  public void setSnmpVersion(SnmpVersionEnum snmpVersion) {
    this.snmpVersion = snmpVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SNMPConfig snMPConfig = (SNMPConfig) o;
    return Objects.equals(this.configSnmp2c, snMPConfig.configSnmp2c) &&
        Objects.equals(this.configSnmp3, snMPConfig.configSnmp3) &&
        Objects.equals(this.snmpEnabled, snMPConfig.snmpEnabled) &&
        Objects.equals(this.snmpVersion, snMPConfig.snmpVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configSnmp2c, configSnmp3, snmpEnabled, snmpVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SNMPConfig {\n");
    sb.append("    configSnmp2c: ").append(toIndentedString(configSnmp2c)).append("\n");
    sb.append("    configSnmp3: ").append(toIndentedString(configSnmp3)).append("\n");
    sb.append("    snmpEnabled: ").append(toIndentedString(snmpEnabled)).append("\n");
    sb.append("    snmpVersion: ").append(toIndentedString(snmpVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config_snmp_2c");
    openapiFields.add("config_snmp_3");
    openapiFields.add("snmp_enabled");
    openapiFields.add("snmp_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SNMPConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SNMPConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SNMPConfig is not found in the empty JSON string", SNMPConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SNMPConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SNMPConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config_snmp_2c`
      if (jsonObj.get("config_snmp_2c") != null && !jsonObj.get("config_snmp_2c").isJsonNull()) {
        SNMP2cConfig.validateJsonElement(jsonObj.get("config_snmp_2c"));
      }
      // validate the optional field `config_snmp_3`
      if (jsonObj.get("config_snmp_3") != null && !jsonObj.get("config_snmp_3").isJsonNull()) {
        SNMP3Config.validateJsonElement(jsonObj.get("config_snmp_3"));
      }
      if ((jsonObj.get("snmp_version") != null && !jsonObj.get("snmp_version").isJsonNull()) && !jsonObj.get("snmp_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snmp_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snmp_version").toString()));
      }
      // validate the optional field `snmp_version`
      if (jsonObj.get("snmp_version") != null && !jsonObj.get("snmp_version").isJsonNull()) {
        SnmpVersionEnum.validateJsonElement(jsonObj.get("snmp_version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SNMPConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SNMPConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SNMPConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SNMPConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SNMPConfig>() {
           @Override
           public void write(JsonWriter out, SNMPConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SNMPConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SNMPConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SNMPConfig
   * @throws IOException if the JSON string is invalid with respect to SNMPConfig
   */
  public static SNMPConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SNMPConfig.class);
  }

  /**
   * Convert an instance of SNMPConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

