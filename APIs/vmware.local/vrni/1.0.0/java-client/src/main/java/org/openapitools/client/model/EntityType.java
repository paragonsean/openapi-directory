/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EntityType
 */
@JsonAdapter(EntityType.Adapter.class)
public enum EntityType {
  
  VIRTUAL_MACHINE("VirtualMachine"),
  
  EC2_INSTANCE("EC2Instance"),
  
  HOST("Host"),
  
  VNIC("Vnic"),
  
  VMKNIC("Vmknic"),
  
  VXLAN_LAYER2_NETWORK("VxlanLayer2Network"),
  
  VLAN_L2_NETWORK("VlanL2Network"),
  
  CLUSTER("Cluster"),
  
  SECURITY_TAG("SecurityTag"),
  
  RESOURCE_POOL("ResourcePool"),
  
  NSXIP_SET("NSXIPSet"),
  
  EC2_IP_SET("EC2IPSet"),
  
  NSX_SECURITY_GROUP("NSXSecurityGroup"),
  
  EC2_SECURITY_GROUP("EC2SecurityGroup"),
  
  FLOW("Flow"),
  
  PROBLEM_EVENT("ProblemEvent"),
  
  APPLICATION("Application"),
  
  TIER("Tier"),
  
  NSX_FIREWALL_RULE("NSXFirewallRule"),
  
  EC2_SG_FIREWALL_RULE("EC2SGFirewallRule"),
  
  NSX_REDIRECT_RULE("NSXRedirectRule"),
  
  V_CENTER_MANAGER("VCenterManager"),
  
  NSXV_MANAGER("NSXVManager"),
  
  NSX_SERVICE("NSXService"),
  
  EC2_SERVICE("EC2Service"),
  
  VPC("VPC"),
  
  NSX_DISTRIBUTED_FIREWALL("NSXDistributedFirewall"),
  
  EC2_FIREWALL("EC2Firewall"),
  
  NSX_SERVICE_GROUP("NSXServiceGroup"),
  
  DISTRIBUTED_VIRTUAL_SWITCH("DistributedVirtualSwitch"),
  
  DISTRIBUTED_VIRTUAL_PORTGROUP("DistributedVirtualPortgroup"),
  
  VC_DATACENTER("VCDatacenter"),
  
  DATASTORE("Datastore"),
  
  FOLDER("Folder");

  private String value;

  EntityType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EntityType fromValue(String value) {
    for (EntityType b : EntityType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EntityType> {
    @Override
    public void write(final JsonWriter jsonWriter, final EntityType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EntityType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EntityType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    EntityType.fromValue(value);
  }
}

