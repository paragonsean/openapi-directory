/*
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BaseFirewallRule;
import org.openapitools.client.model.EC2FirewallDirection;
import org.openapitools.client.model.EntityType;
import org.openapitools.client.model.FirewallAction;
import org.openapitools.client.model.PortRange;
import org.openapitools.client.model.Reference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EC2SGFirewallRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:01:28.864194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EC2SGFirewallRule extends BaseFirewallRule {
  public static final String SERIALIZED_NAME_DIRECTION = "direction";
  @SerializedName(SERIALIZED_NAME_DIRECTION)
  private EC2FirewallDirection direction;

  public static final String SERIALIZED_NAME_OWNER_SECURITY_GROUP = "owner_security_group";
  @SerializedName(SERIALIZED_NAME_OWNER_SECURITY_GROUP)
  private Reference ownerSecurityGroup;

  public static final String SERIALIZED_NAME_VPC = "vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private Reference vpc;

  public EC2SGFirewallRule() {
    this.entityType = this.getClass().getSimpleName();
  }

  public EC2SGFirewallRule direction(EC2FirewallDirection direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Get direction
   * @return direction
   */
  @javax.annotation.Nullable
  public EC2FirewallDirection getDirection() {
    return direction;
  }

  public void setDirection(EC2FirewallDirection direction) {
    this.direction = direction;
  }


  public EC2SGFirewallRule ownerSecurityGroup(Reference ownerSecurityGroup) {
    this.ownerSecurityGroup = ownerSecurityGroup;
    return this;
  }

  /**
   * Get ownerSecurityGroup
   * @return ownerSecurityGroup
   */
  @javax.annotation.Nullable
  public Reference getOwnerSecurityGroup() {
    return ownerSecurityGroup;
  }

  public void setOwnerSecurityGroup(Reference ownerSecurityGroup) {
    this.ownerSecurityGroup = ownerSecurityGroup;
  }


  public EC2SGFirewallRule vpc(Reference vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * Get vpc
   * @return vpc
   */
  @javax.annotation.Nullable
  public Reference getVpc() {
    return vpc;
  }

  public void setVpc(Reference vpc) {
    this.vpc = vpc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EC2SGFirewallRule ec2SGFirewallRule = (EC2SGFirewallRule) o;
    return Objects.equals(this.direction, ec2SGFirewallRule.direction) &&
        Objects.equals(this.ownerSecurityGroup, ec2SGFirewallRule.ownerSecurityGroup) &&
        Objects.equals(this.vpc, ec2SGFirewallRule.vpc) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, ownerSecurityGroup, vpc, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EC2SGFirewallRule {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    ownerSecurityGroup: ").append(toIndentedString(ownerSecurityGroup)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("name");
    openapiFields.add("action");
    openapiFields.add("destination_any");
    openapiFields.add("destination_inversion");
    openapiFields.add("destinations");
    openapiFields.add("disabled");
    openapiFields.add("port_ranges");
    openapiFields.add("rule_id");
    openapiFields.add("section_id");
    openapiFields.add("section_name");
    openapiFields.add("sequence_number");
    openapiFields.add("service_any");
    openapiFields.add("services");
    openapiFields.add("source_any");
    openapiFields.add("source_inversion");
    openapiFields.add("sources");
    openapiFields.add("direction");
    openapiFields.add("owner_security_group");
    openapiFields.add("vpc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EC2SGFirewallRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EC2SGFirewallRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EC2SGFirewallRule is not found in the empty JSON string", EC2SGFirewallRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EC2SGFirewallRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EC2SGFirewallRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EC2SGFirewallRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EC2SGFirewallRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EC2SGFirewallRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EC2SGFirewallRule.class));

       return (TypeAdapter<T>) new TypeAdapter<EC2SGFirewallRule>() {
           @Override
           public void write(JsonWriter out, EC2SGFirewallRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EC2SGFirewallRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EC2SGFirewallRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EC2SGFirewallRule
   * @throws IOException if the JSON string is invalid with respect to EC2SGFirewallRule
   */
  public static EC2SGFirewallRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EC2SGFirewallRule.class);
  }

  /**
   * Convert an instance of EC2SGFirewallRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

