/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VRealizeNetworkInsightApiReference);
  }
}(this, function(expect, VRealizeNetworkInsightApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VirtualMachine', function() {
    it('should create an instance of VirtualMachine', function() {
      // uncomment below and update the code to test VirtualMachine
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be.a(VRealizeNetworkInsightApiReference.VirtualMachine);
    });

    it('should have the property appliedToDestinationRules (base name: "applied_to_destination_rules")', function() {
      // uncomment below and update the code to test the property appliedToDestinationRules
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property appliedToSourceRules (base name: "applied_to_source_rules")', function() {
      // uncomment below and update the code to test the property appliedToSourceRules
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property cluster (base name: "cluster")', function() {
      // uncomment below and update the code to test the property cluster
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property datacenter (base name: "datacenter")', function() {
      // uncomment below and update the code to test the property datacenter
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property datastores (base name: "datastores")', function() {
      // uncomment below and update the code to test the property datastores
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property destinationInversionRules (base name: "destination_inversion_rules")', function() {
      // uncomment below and update the code to test the property destinationInversionRules
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property folders (base name: "folders")', function() {
      // uncomment below and update the code to test the property folders
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property host (base name: "host")', function() {
      // uncomment below and update the code to test the property host
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property layer2Networks (base name: "layer2_networks")', function() {
      // uncomment below and update the code to test the property layer2Networks
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property nsxManager (base name: "nsx_manager")', function() {
      // uncomment below and update the code to test the property nsxManager
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property resourcePool (base name: "resource_pool")', function() {
      // uncomment below and update the code to test the property resourcePool
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property securityTags (base name: "security_tags")', function() {
      // uncomment below and update the code to test the property securityTags
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property sourceInversionRules (base name: "source_inversion_rules")', function() {
      // uncomment below and update the code to test the property sourceInversionRules
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property vcenterManager (base name: "vcenter_manager")', function() {
      // uncomment below and update the code to test the property vcenterManager
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property vendorId (base name: "vendor_id")', function() {
      // uncomment below and update the code to test the property vendorId
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

    it('should have the property vlans (base name: "vlans")', function() {
      // uncomment below and update the code to test the property vlans
      //var instance = new VRealizeNetworkInsightApiReference.VirtualMachine();
      //expect(instance).to.be();
    });

  });

}));
