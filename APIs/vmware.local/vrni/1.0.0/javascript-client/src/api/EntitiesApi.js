/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import BaseFirewallRule from '../model/BaseFirewallRule';
import BaseIPSet from '../model/BaseIPSet';
import BaseL2Network from '../model/BaseL2Network';
import BaseNSXManager from '../model/BaseNSXManager';
import BaseSecurityGroup from '../model/BaseSecurityGroup';
import BaseService from '../model/BaseService';
import BaseServiceGroup from '../model/BaseServiceGroup';
import BaseVirtualMachine from '../model/BaseVirtualMachine';
import BaseVnic from '../model/BaseVnic';
import Cluster from '../model/Cluster';
import Datastore from '../model/Datastore';
import DistributedVirtualPortgroup from '../model/DistributedVirtualPortgroup';
import DistributedVirtualSwitch from '../model/DistributedVirtualSwitch';
import EntityName from '../model/EntityName';
import Flow from '../model/Flow';
import Folder from '../model/Folder';
import Host from '../model/Host';
import NamesRequest from '../model/NamesRequest';
import NamesResponse from '../model/NamesResponse';
import PagedListResponseWithTime from '../model/PagedListResponseWithTime';
import ProblemEvent from '../model/ProblemEvent';
import SecurityTag from '../model/SecurityTag';
import VCDatacenter from '../model/VCDatacenter';
import VCenterManager from '../model/VCenterManager';
import Vmknic from '../model/Vmknic';

/**
* Entities service.
* @module api/EntitiesApi
* @version 1.0.0
*/
export default class EntitiesApi {

    /**
    * Constructs a new EntitiesApi. 
    * @alias module:api/EntitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCluster operation.
     * @callback module:api/EntitiesApi~getClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cluster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show cluster details
     * Show cluster details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cluster}
     */
    getCluster(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCluster");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'name', 'nsx_manager', 'num_cpu_cores', 'num_datastores', 'num_hosts', 'total_cpus', 'total_memory', 'vcenter_manager', 'vendor_id'];
      let returnType = Cluster;
      return this.apiClient.callApi(
        '/entities/clusters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatacenter operation.
     * @callback module:api/EntitiesApi~getDatacenterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VCDatacenter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vCenter datacenter details
     * Show vCenter datacenter details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getDatacenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VCDatacenter}
     */
    getDatacenter(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatacenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'name', 'vcenter_manager', 'vendor_id'];
      let returnType = VCDatacenter;
      return this.apiClient.callApi(
        '/entities/vc-datacenters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatastore operation.
     * @callback module:api/EntitiesApi~getDatastoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Datastore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show datastore details
     * Show datastore details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getDatastoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Datastore}
     */
    getDatastore(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDatastore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'name', 'vcenter_manager', 'vendor_id'];
      let returnType = Datastore;
      return this.apiClient.callApi(
        '/entities/datastores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistributedVirtualPortgroup operation.
     * @callback module:api/EntitiesApi~getDistributedVirtualPortgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributedVirtualPortgroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show distributed virtual portgroup details
     * Show distributed virtual portgroup details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getDistributedVirtualPortgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributedVirtualPortgroup}
     */
    getDistributedVirtualPortgroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistributedVirtualPortgroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'distributed_virtual_switch', 'entity_id', 'entity_type', 'name', 'vcenter_manager', 'vendor_id'];
      let returnType = DistributedVirtualPortgroup;
      return this.apiClient.callApi(
        '/entities/distributed-virtual-portgroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistributedVirtualSwitch operation.
     * @callback module:api/EntitiesApi~getDistributedVirtualSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributedVirtualSwitch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show distributed virtual switch details
     * Show distributed virtual switch details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getDistributedVirtualSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributedVirtualSwitch}
     */
    getDistributedVirtualSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDistributedVirtualSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'hosts', 'name', 'vcenter_manager', 'vendor_id'];
      let returnType = DistributedVirtualSwitch;
      return this.apiClient.callApi(
        '/entities/distributed-virtual-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewall operation.
     * @callback module:api/EntitiesApi~getFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseFirewallRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show firewall details
     * Show firewall details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseFirewallRule}
     */
    getFirewall(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'exclusions', 'firewall_rules', 'name'];
      let returnType = BaseFirewallRule;
      return this.apiClient.callApi(
        '/entities/firewalls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirewallRule operation.
     * @callback module:api/EntitiesApi~getFirewallRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show firewall rule details
     * Show firewall rule details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getFirewallRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getFirewallRule(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFirewallRule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['action', 'application/json', 'destination_any', 'destination_inversion', 'destinations', 'direction', 'disabled', 'entity_id', 'entity_type', 'logging_enabled', 'name', 'nsx_managers', 'port_ranges', 'rule_id', 'scope', 'section_id', 'section_name', 'sequence_number', 'service_any', 'services', 'source_any', 'source_inversion', 'sources'];
      let returnType = null;
      return this.apiClient.callApi(
        '/entities/firewall-rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlow operation.
     * @callback module:api/EntitiesApi~getFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Flow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show flow details
     * Show flow details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Flow}
     */
    getFlow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFlow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'destination_folders', 'destination_ip', 'destination_ip_sets', 'destination_security_groups', 'destination_security_tags', 'destination_vm_tags', 'entity_id', 'entity_type', 'firewall_action', 'flow_tag', 'name', 'port', 'protocol', 'source_folders', 'source_ip', 'source_ip_sets', 'source_security_groups', 'source_security_tags', 'source_vm_tags', 'traffic_type', 'within_host'];
      let returnType = Flow;
      return this.apiClient.callApi(
        '/entities/flows/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlows operation.
     * @callback module:api/EntitiesApi~getFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List flows
     * List flows
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~getFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    getFlows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFolder operation.
     * @callback module:api/EntitiesApi~getFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Folder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show folder details
     * Show folder details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Folder}
     */
    getFolder(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFolder");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'name', 'vcenter_manager', 'vendor_id'];
      let returnType = Folder;
      return this.apiClient.callApi(
        '/entities/folders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHost operation.
     * @callback module:api/EntitiesApi~getHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Host} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show host details
     * Show host details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Host}
     */
    getHost(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cluster', 'connection_state', 'datastores', 'entity_id', 'entity_type', 'maintenance_mode', 'name', 'nsx_manager', 'service_tag', 'vcenter_manager', 'vendor_id', 'vm_count', 'vmknics'];
      let returnType = Host;
      return this.apiClient.callApi(
        '/entities/hosts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIPSet operation.
     * @callback module:api/EntitiesApi~getIPSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseIPSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show ip set details
     * Show ip set details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getIPSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseIPSet}
     */
    getIPSet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIPSet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'direct_destination_rules', 'direct_source_rules', 'entity_id', 'entity_type', 'indirect_destination_rules', 'indirect_source_rules', 'ip_addresses', 'ip_numeric_ranges', 'ip_ranges', 'name', 'nsx_managers', 'parent_security_groups', 'scope', 'translated_vm_count', 'vendor', 'vendor_id'];
      let returnType = BaseIPSet;
      return this.apiClient.callApi(
        '/entities/ip-sets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLayer2Network operation.
     * @callback module:api/EntitiesApi~getLayer2NetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseL2Network} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show layer2 network details
     * Show layer2 network details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getLayer2NetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseL2Network}
     */
    getLayer2Network(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLayer2Network");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'gateways', 'name', 'network_addresses', 'nsx_managers', 'scope', 'segment_id', 'vteps'];
      let returnType = BaseL2Network;
      return this.apiClient.callApi(
        '/entities/layer2-networks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNSXManager operation.
     * @callback module:api/EntitiesApi~getNSXManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseNSXManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show nsx manager details
     * Show nsx manager details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getNSXManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseNSXManager}
     */
    getNSXManager(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNSXManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'ip_address', 'name', 'role', 'version'];
      let returnType = BaseNSXManager;
      return this.apiClient.callApi(
        '/entities/nsx-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getName operation.
     * @callback module:api/EntitiesApi~getNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityName} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get name of an entity
     * Get name of an entity
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityName}
     */
    getName(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getName");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityName;
      return this.apiClient.callApi(
        '/entities/names/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNames operation.
     * @callback module:api/EntitiesApi~getNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get names for entities
     * Get names for entities.Limit of 1000 entities in a single request.
     * @param {module:model/NamesRequest} namesRequest Names Request
     * @param {module:api/EntitiesApi~getNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamesResponse}
     */
    getNames(namesRequest, callback) {
      let postBody = namesRequest;
      // verify the required parameter 'namesRequest' is set
      if (namesRequest === undefined || namesRequest === null) {
        throw new Error("Missing the required parameter 'namesRequest' when calling getNames");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamesResponse;
      return this.apiClient.callApi(
        '/entities/names', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProblemEvent operation.
     * @callback module:api/EntitiesApi~getProblemEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show problem details
     * Show problem event details.
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getProblemEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProblemEvent(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProblemEvent");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['admin_state', 'anchor_entities', 'application/json', 'archived', 'entity_id', 'entity_type', 'event_tags', 'event_time_epoch_ms', 'message', 'name', 'related_entities', 'severity'];
      let returnType = null;
      return this.apiClient.callApi(
        '/entities/problems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityGroup operation.
     * @callback module:api/EntitiesApi~getSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseSecurityGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show security group details
     * Show security group details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseSecurityGroup}
     */
    getSecurityGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'direct_destination_rules', 'direct_members', 'direct_source_rules', 'entity_id', 'entity_type', 'excluded_members', 'indirect_destination_rules', 'indirect_source_rules', 'ip_sets', 'members', 'name', 'nsx_managers', 'parents', 'scope', 'security_tags', 'translated_vm_count', 'vendor_id'];
      let returnType = BaseSecurityGroup;
      return this.apiClient.callApi(
        '/entities/security-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityTag operation.
     * @callback module:api/EntitiesApi~getSecurityTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show security tag details
     * Show security tag details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getSecurityTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityTag}
     */
    getSecurityTag(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSecurityTag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'description', 'direct_security_groups', 'entity_id', 'entity_type', 'name', 'nsx_manager', 'security_groups', 'vendor_id'];
      let returnType = SecurityTag;
      return this.apiClient.callApi(
        '/entities/security-tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/EntitiesApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show service details
     * Show service details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseService}
     */
    getService(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getService");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'name', 'nsx_managers', 'port_ranges', 'protocol', 'scope', 'vendor_id'];
      let returnType = BaseService;
      return this.apiClient.callApi(
        '/entities/services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceGroup operation.
     * @callback module:api/EntitiesApi~getServiceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseServiceGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show service group details
     * Show service group details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getServiceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseServiceGroup}
     */
    getServiceGroup(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getServiceGroup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'members', 'name', 'nsx_managers', 'scope', 'vendor_id'];
      let returnType = BaseServiceGroup;
      return this.apiClient.callApi(
        '/entities/service-groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVcenterManager operation.
     * @callback module:api/EntitiesApi~getVcenterManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VCenterManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vCenter manager details
     * Show vCenter manager details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getVcenterManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VCenterManager}
     */
    getVcenterManager(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVcenterManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'ip_address', 'name'];
      let returnType = VCenterManager;
      return this.apiClient.callApi(
        '/entities/vcenter-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVm operation.
     * @callback module:api/EntitiesApi~getVmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseVirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vm details
     * Show vm details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getVmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseVirtualMachine}
     */
    getVm(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVm");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'applied_to_destination_rules', 'applied_to_source_rules', 'cluster', 'datacenter', 'datastores', 'default_gateway', 'destination_firewall_rules', 'destination_inversion_rules', 'entity_id', 'entity_type', 'folders', 'host', 'ip_addresses', 'ip_sets', 'layer2_networks', 'name', 'nsx_manager', 'resource_pool', 'security_groups', 'security_tags', 'source_firewall_rules', 'source_inversion_rules', 'vcenter_manager', 'vendor_id', 'vlans', 'vnics'];
      let returnType = BaseVirtualMachine;
      return this.apiClient.callApi(
        '/entities/vms/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVmknic operation.
     * @callback module:api/EntitiesApi~getVmknicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vmknic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vmknic details
     * Show vmknic details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getVmknicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vmknic}
     */
    getVmknic(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVmknic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'host', 'ip_addresses', 'layer2_network', 'name', 'vlan'];
      let returnType = Vmknic;
      return this.apiClient.callApi(
        '/entities/vmknics/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVnic operation.
     * @callback module:api/EntitiesApi~getVnicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseVnic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vnic details
     * Show vnic details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {Number} [time] time in epoch seconds
     * @param {module:api/EntitiesApi~getVnicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseVnic}
     */
    getVnic(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVnic");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'time': opts['time']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'entity_id', 'entity_type', 'ip_addresses', 'layer2_network', 'name', 'vlan', 'vm'];
      let returnType = BaseVnic;
      return this.apiClient.callApi(
        '/entities/vnics/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/EntitiesApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List clusters
     * List clusters
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listClusters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatacenters operation.
     * @callback module:api/EntitiesApi~listDatacentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vCenter datacenters
     * List vCenter datacenters
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listDatacentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listDatacenters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/vc-datacenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatastores operation.
     * @callback module:api/EntitiesApi~listDatastoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List datastores
     * List datastores
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listDatastoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listDatastores(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/datastores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributedVirtualPortgroups operation.
     * @callback module:api/EntitiesApi~listDistributedVirtualPortgroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List distributed virtual portgroups
     * List distributed virtual portgroups
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listDistributedVirtualPortgroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listDistributedVirtualPortgroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/distributed-virtual-portgroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributedVirtualSwitches operation.
     * @callback module:api/EntitiesApi~listDistributedVirtualSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List distributed virtual switches
     * List distributed virtual switches
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listDistributedVirtualSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listDistributedVirtualSwitches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/distributed-virtual-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewallRules operation.
     * @callback module:api/EntitiesApi~listFirewallRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List firewall rules
     * List firewall rules
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listFirewallRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listFirewallRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/firewall-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFirewalls operation.
     * @callback module:api/EntitiesApi~listFirewallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List firewalls
     * List firewalls
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listFirewallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listFirewalls(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/firewalls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFolders operation.
     * @callback module:api/EntitiesApi~listFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List folders
     * List folders
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listFolders(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHosts operation.
     * @callback module:api/EntitiesApi~listHostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hosts
     * List hosts
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listHosts(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIPSets operation.
     * @callback module:api/EntitiesApi~listIPSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ip sets
     * List ip sets
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listIPSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listIPSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/ip-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLayer2Networks operation.
     * @callback module:api/EntitiesApi~listLayer2NetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List layer2 networks
     * List layer2 networks
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listLayer2NetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listLayer2Networks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/layer2-networks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNSXManagers operation.
     * @callback module:api/EntitiesApi~listNSXManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List nsx managers
     * List nsx managers
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listNSXManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listNSXManagers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/nsx-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProblemEvents operation.
     * @callback module:api/EntitiesApi~listProblemEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List problems
     * List problem events.
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listProblemEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listProblemEvents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/problems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityGroups operation.
     * @callback module:api/EntitiesApi~listSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List security groups
     * List security groups
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listSecurityGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/security-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityTags operation.
     * @callback module:api/EntitiesApi~listSecurityTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List security tags
     * List security tags
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listSecurityTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listSecurityTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/security-tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceGroups operation.
     * @callback module:api/EntitiesApi~listServiceGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List service groups
     * List service groups
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listServiceGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listServiceGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/service-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/EntitiesApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List services
     * List services
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listServices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVcenterManagers operation.
     * @callback module:api/EntitiesApi~listVcenterManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vCenter managers
     * List vCenter managers
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listVcenterManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listVcenterManagers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/vcenter-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVmknics operation.
     * @callback module:api/EntitiesApi~listVmknicsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vmknics
     * List vmknics
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listVmknicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listVmknics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/vmknics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVms operation.
     * @callback module:api/EntitiesApi~listVmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vms
     * List vms
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listVmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listVms(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/vms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVnics operation.
     * @callback module:api/EntitiesApi~listVnicsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponseWithTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vnics
     * List vnics
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/EntitiesApi~listVnicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponseWithTime}
     */
    listVnics(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'cursor', 'end_time', 'results', 'start_time', 'total_count'];
      let returnType = PagedListResponseWithTime;
      return this.apiClient.callApi(
        '/entities/vnics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
