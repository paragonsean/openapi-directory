/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import AristaSwitchDataSource from '../model/AristaSwitchDataSource';
import AristaSwitchDataSourceRequest from '../model/AristaSwitchDataSourceRequest';
import BrocadeSwitchDataSource from '../model/BrocadeSwitchDataSource';
import BrocadeSwitchDataSourceRequest from '../model/BrocadeSwitchDataSourceRequest';
import CheckpointFirewallDataSource from '../model/CheckpointFirewallDataSource';
import CheckpointFirewallDataSourceRequest from '../model/CheckpointFirewallDataSourceRequest';
import CiscoSwitchDataSource from '../model/CiscoSwitchDataSource';
import CiscoSwitchDataSourceRequest from '../model/CiscoSwitchDataSourceRequest';
import DataSourceListResponse from '../model/DataSourceListResponse';
import DellSwitchDataSource from '../model/DellSwitchDataSource';
import DellSwitchDataSourceRequest from '../model/DellSwitchDataSourceRequest';
import HPOneViewManagerDataSource from '../model/HPOneViewManagerDataSource';
import HPOneViewManagerDataSourceRequest from '../model/HPOneViewManagerDataSourceRequest';
import HPVCManagerDataSource from '../model/HPVCManagerDataSource';
import HPVCManagerDataSourceRequest from '../model/HPVCManagerDataSourceRequest';
import JuniperSwitchDataSource from '../model/JuniperSwitchDataSource';
import JuniperSwitchDataSourceRequest from '../model/JuniperSwitchDataSourceRequest';
import NSXControllerDataCollection from '../model/NSXControllerDataCollection';
import NSXVManagerDataSource from '../model/NSXVManagerDataSource';
import NSXVManagerDataSourceRequest from '../model/NSXVManagerDataSourceRequest';
import PanFirewallDataSource from '../model/PanFirewallDataSource';
import PanFirewallDataSourceRequest from '../model/PanFirewallDataSourceRequest';
import SNMPConfig from '../model/SNMPConfig';
import SwitchDataSource from '../model/SwitchDataSource';
import UCSManagerDataSource from '../model/UCSManagerDataSource';
import UCSManagerDataSourceRequest from '../model/UCSManagerDataSourceRequest';
import VCenterDataSource from '../model/VCenterDataSource';
import VCenterDataSourceRequest from '../model/VCenterDataSourceRequest';

/**
* DataSources service.
* @module api/DataSourcesApi
* @version 1.0.0
*/
export default class DataSourcesApi {

    /**
    * Constructs a new DataSourcesApi. 
    * @alias module:api/DataSourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAristaSwitch operation.
     * @callback module:api/DataSourcesApi~addAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AristaSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an arista switch data source
     * Add arista switch data source
     * @param {Object} opts Optional parameters
     * @param {module:model/AristaSwitchDataSourceRequest} [aristaSwitchDataSourceRequest] Add a cisco switch as datasource
     * @param {module:api/DataSourcesApi~addAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AristaSwitchDataSource}
     */
    addAristaSwitch(opts, callback) {
      opts = opts || {};
      let postBody = opts['aristaSwitchDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AristaSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/arista-switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~addBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrocadeSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a brocade switch data source
     * Add brocade switch as a data source
     * @param {Object} opts Optional parameters
     * @param {module:model/BrocadeSwitchDataSourceRequest} [brocadeSwitchDataSourceRequest] 
     * @param {module:api/DataSourcesApi~addBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrocadeSwitchDataSource}
     */
    addBrocadeSwitch(opts, callback) {
      opts = opts || {};
      let postBody = opts['brocadeSwitchDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BrocadeSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~addCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckpointFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a checkpoint firewall
     * Add checkpoint firewall as data source
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckpointFirewallDataSourceRequest} [checkpointFirewallDataSourceRequest] Add a vSec Checkpoint firewall as data source
     * @param {module:api/DataSourcesApi~addCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckpointFirewallDataSource}
     */
    addCheckpointFirewall(opts, callback) {
      opts = opts || {};
      let postBody = opts['checkpointFirewallDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckpointFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~addCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiscoSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a cisco switch data source
     * Add cisco switch as data source. User must provide one of ip or fqdn field in the request body. Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     * @param {Object} opts Optional parameters
     * @param {module:model/CiscoSwitchDataSourceRequest} [ciscoSwitchDataSourceRequest] Add a cisco switch as datasource.
     * @param {module:api/DataSourcesApi~addCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiscoSwitchDataSource}
     */
    addCiscoSwitch(opts, callback) {
      opts = opts || {};
      let postBody = opts['ciscoSwitchDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CiscoSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDellSwitch operation.
     * @callback module:api/DataSourcesApi~addDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DellSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dell switch data source
     * Add a dell switch as data source
     * @param {Object} opts Optional parameters
     * @param {module:model/DellSwitchDataSourceRequest} [dellSwitchDataSourceRequest] 
     * @param {module:api/DataSourcesApi~addDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DellSwitchDataSource}
     */
    addDellSwitch(opts, callback) {
      opts = opts || {};
      let postBody = opts['dellSwitchDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DellSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/dell-switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addHpovManager operation.
     * @callback module:api/DataSourcesApi~addHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPOneViewManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hp oneview manager data source
     * Add a hp oneview manager data source
     * @param {Object} opts Optional parameters
     * @param {module:model/HPOneViewManagerDataSourceRequest} [hPOneViewManagerDataSourceRequest] 
     * @param {module:api/DataSourcesApi~addHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPOneViewManagerDataSource}
     */
    addHpovManager(opts, callback) {
      opts = opts || {};
      let postBody = opts['hPOneViewManagerDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HPOneViewManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addHpvcManager operation.
     * @callback module:api/DataSourcesApi~addHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPVCManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a hpvc manager data source
     * Add hpvc manager data source
     * @param {Object} opts Optional parameters
     * @param {module:model/HPVCManagerDataSourceRequest} [hPVCManagerDataSourceRequest] Add a switch as datasource
     * @param {module:api/DataSourcesApi~addHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPVCManagerDataSource}
     */
    addHpvcManager(opts, callback) {
      opts = opts || {};
      let postBody = opts['hPVCManagerDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HPVCManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~addJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JuniperSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a juniper switch as data source
     * Add switch Datasource
     * @param {Object} opts Optional parameters
     * @param {module:model/JuniperSwitchDataSourceRequest} [juniperSwitchDataSourceRequest] Add a cisco switch as datasource
     * @param {module:api/DataSourcesApi~addJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JuniperSwitchDataSource}
     */
    addJuniperSwitch(opts, callback) {
      opts = opts || {};
      let postBody = opts['juniperSwitchDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JuniperSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addNsxvManagerDatasource operation.
     * @callback module:api/DataSourcesApi~addNsxvManagerDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NSXVManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a nsx-v manager data source
     * Add a nsx-v manager data source
     * @param {Object} opts Optional parameters
     * @param {module:model/NSXVManagerDataSourceRequest} [nSXVManagerDataSourceRequest] 
     * @param {module:api/DataSourcesApi~addNsxvManagerDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NSXVManagerDataSource}
     */
    addNsxvManagerDatasource(opts, callback) {
      opts = opts || {};
      let postBody = opts['nSXVManagerDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NSXVManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~addPanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PanFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create panorama firewall data source
     * Add panorama firewall as data source
     * @param {Object} opts Optional parameters
     * @param {module:model/PanFirewallDataSourceRequest} [panFirewallDataSourceRequest] Add a panorama firewall as datasource
     * @param {module:api/DataSourcesApi~addPanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PanFirewallDataSource}
     */
    addPanoramaFirewall(opts, callback) {
      opts = opts || {};
      let postBody = opts['panFirewallDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PanFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addUcsManager operation.
     * @callback module:api/DataSourcesApi~addUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UCSManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ucs manager data source
     * Add an ucs manager as data source
     * @param {Object} opts Optional parameters
     * @param {module:model/UCSManagerDataSourceRequest} [uCSManagerDataSourceRequest] 
     * @param {module:api/DataSourcesApi~addUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UCSManagerDataSource}
     */
    addUcsManager(opts, callback) {
      opts = opts || {};
      let postBody = opts['uCSManagerDataSourceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UCSManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addVcenterDatasource operation.
     * @callback module:api/DataSourcesApi~addVcenterDatasourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VCenterDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a vCenter data source
     * Add a vcenter data source. User must provide one of ip or fqdn field in the request body. Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
     * @param {module:model/VCenterDataSourceRequest} vCenterDataSourceRequest VCenter Credentials
     * @param {module:api/DataSourcesApi~addVcenterDatasourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VCenterDataSource}
     */
    addVcenterDatasource(vCenterDataSourceRequest, callback) {
      let postBody = vCenterDataSourceRequest;
      // verify the required parameter 'vCenterDataSourceRequest' is set
      if (vCenterDataSourceRequest === undefined || vCenterDataSourceRequest === null) {
        throw new Error("Missing the required parameter 'vCenterDataSourceRequest' when calling addVcenterDatasource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'credentials', 'enabled', 'entity_id', 'entity_type', 'fqdn', 'ip', 'nickname', 'notes', 'proxy_id'];
      let returnType = VCenterDataSource;
      return this.apiClient.callApi(
        '/data-sources/vcenters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAristaSwitch operation.
     * @callback module:api/DataSourcesApi~deleteAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an arista switch data source
     * Delete an arista switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAristaSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAristaSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~deleteBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a brocade switch data source
     * Delete a brocade switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBrocadeSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBrocadeSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~deleteCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a checkpoint firewall data source
     * Delete a checkpoint firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCheckpointFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCheckpointFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~deleteCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cisco switch data source
     * Delete a cisco switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCiscoSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCiscoSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDellSwitch operation.
     * @callback module:api/DataSourcesApi~deleteDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dell switch data source
     * Delete a data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDellSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDellSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHpovManager operation.
     * @callback module:api/DataSourcesApi~deleteHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hp oneview data source
     * Delete a hp oneview data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHpovManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHpovManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHpvcManager operation.
     * @callback module:api/DataSourcesApi~deleteHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hpvc manager data source
     * Delete a hpvc manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHpvcManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHpvcManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~deleteJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a juniper switch data source
     * Delete a juniper switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteJuniperSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteJuniperSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNsxvManager operation.
     * @callback module:api/DataSourcesApi~deleteNsxvManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a nsx-v manager data source
     * Delete a nsx-v manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteNsxvManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNsxvManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNsxvManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~deletePanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a panorama firewall data source
     * Delete a panorama firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deletePanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePanoramaFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePanoramaFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUcsManager operation.
     * @callback module:api/DataSourcesApi~deleteUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an ucs manager data source
     * Delete an ucs manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUcsManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUcsManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVcenter operation.
     * @callback module:api/DataSourcesApi~deleteVcenterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a vCenter data source
     * Delete a data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~deleteVcenterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVcenter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVcenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/vcenters/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableAristaSwitch operation.
     * @callback module:api/DataSourcesApi~disableAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an arista switch data source
     * Disable an arista switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableAristaSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableAristaSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~disableBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a brocade switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableBrocadeSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableBrocadeSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~disableCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a checkpoint firewall data source
     * Disable a checkpoint firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableCheckpointFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableCheckpointFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~disableCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a cisco switch data source
     * Disable a cisco switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableCiscoSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableCiscoSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableDellSwitch operation.
     * @callback module:api/DataSourcesApi~disableDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a dell switch data source
     * Disable a dell switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableDellSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableDellSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableHpovManager operation.
     * @callback module:api/DataSourcesApi~disableHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a hp oneview data source
     * Disable a hp oneview data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableHpovManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableHpovManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableHpvcManager operation.
     * @callback module:api/DataSourcesApi~disableHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a hpvc manager data source
     * Disable a hpvc manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableHpvcManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableHpvcManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~disableJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a juniper switch data source
     * Disable a juniper switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableJuniperSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableJuniperSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableNsxvManager operation.
     * @callback module:api/DataSourcesApi~disableNsxvManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a nsx-v manager data source
     * Disable a nsx-v manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableNsxvManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableNsxvManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableNsxvManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disablePanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~disablePanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a panorama firewall data source
     * Disable a panorama firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disablePanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disablePanoramaFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disablePanoramaFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableUcsManager operation.
     * @callback module:api/DataSourcesApi~disableUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable an ucs manager data source
     * Disable an ucs manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableUcsManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableUcsManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableVcenter operation.
     * @callback module:api/DataSourcesApi~disableVcenterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a vCenter data source
     * Disable a vCenter data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~disableVcenterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableVcenter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableVcenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/vcenters/{id}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableAristaSwitch operation.
     * @callback module:api/DataSourcesApi~enableAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable an arista switch data source
     * Enable an arista switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableAristaSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableAristaSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~enableBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a brocade switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableBrocadeSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableBrocadeSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~enableCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a checkpoint firewall data source
     * Enable a checkpoint firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableCheckpointFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableCheckpointFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~enableCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a cisco switch data source
     * Enable a cisco switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableCiscoSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableCiscoSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableDellSwitch operation.
     * @callback module:api/DataSourcesApi~enableDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a dell switch data source
     * Enable a dell switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableDellSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableDellSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableHpovManager operation.
     * @callback module:api/DataSourcesApi~enableHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a hp oneview data source
     * Enable a hp oneview data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableHpovManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableHpovManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableHpvcManager operation.
     * @callback module:api/DataSourcesApi~enableHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a hpvc manager data source
     * Enable a hpvc manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableHpvcManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableHpvcManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~enableJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a juniper switch data source
     * Enable a juniper switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableJuniperSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableJuniperSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableNsxvManager operation.
     * @callback module:api/DataSourcesApi~enableNsxvManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a nsx-v manager data source
     * Enable a nsx-v manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableNsxvManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableNsxvManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableNsxvManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enablePanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~enablePanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a panorama firewall data source
     * Enable a panorama firewall data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enablePanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enablePanoramaFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enablePanoramaFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableUcsManager operation.
     * @callback module:api/DataSourcesApi~enableUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable an ucs manager data source
     * Enable an ucs manager data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableUcsManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableUcsManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableVcenter operation.
     * @callback module:api/DataSourcesApi~enableVcenterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a vCenter data source
     * Enable a vCenter data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~enableVcenterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableVcenter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableVcenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/data-sources/vcenters/{id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAristaSwitch operation.
     * @callback module:api/DataSourcesApi~getAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AristaSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show arista switch data source details
     * Show arista switch data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AristaSwitchDataSource}
     */
    getAristaSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAristaSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AristaSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAristaSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getAristaSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for arista switch data source
     * Show snmp config for arista switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getAristaSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getAristaSwitchSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAristaSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~getBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrocadeSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show brocade switch data source details
     * Show brocade switch data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrocadeSwitchDataSource}
     */
    getBrocadeSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBrocadeSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BrocadeSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBrocadeSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getBrocadeSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for brocade switch data source
     * Show snmp config for brocade switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getBrocadeSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getBrocadeSwitchSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBrocadeSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~getCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckpointFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show checkpoint firewall data source details
     * Show checkpoint firewall data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckpointFirewallDataSource}
     */
    getCheckpointFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCheckpointFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckpointFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~getCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiscoSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show cisco switch data source details
     * Show cisco switch data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiscoSwitchDataSource}
     */
    getCiscoSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCiscoSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CiscoSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCiscoSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getCiscoSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for cisco switch data source
     * Show snmp config for cisco switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getCiscoSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getCiscoSwitchSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCiscoSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDellSwitch operation.
     * @callback module:api/DataSourcesApi~getDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DellSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show dell switch data source details
     * Get a dell switch data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DellSwitchDataSource}
     */
    getDellSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDellSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DellSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDellSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getDellSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for dell switch data source
     * Show snmp config for dell switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getDellSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getDellSwitchSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDellSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHpovManager operation.
     * @callback module:api/DataSourcesApi~getHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPOneViewManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show hp oneview data source details
     * Show hp oneview data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPOneViewManagerDataSource}
     */
    getHpovManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHpovManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HPOneViewManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHpvcManager operation.
     * @callback module:api/DataSourcesApi~getHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPVCManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show hpvc data source details
     * Show hpvc data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPVCManagerDataSource}
     */
    getHpvcManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHpvcManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HPVCManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~getJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JuniperSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show juniper switch data source details
     * Show juniper switch data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JuniperSwitchDataSource}
     */
    getJuniperSwitch(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJuniperSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JuniperSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJuniperSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getJuniperSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for juniper switch data source
     * Show snmp config for juniper switch data source
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getJuniperSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getJuniperSwitchSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJuniperSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNsxvControllerCluster operation.
     * @callback module:api/DataSourcesApi~getNsxvControllerClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NSXControllerDataCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show nsx controller-cluster details
     * Show nsx controller-cluster details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getNsxvControllerClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NSXControllerDataCollection}
     */
    getNsxvControllerCluster(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNsxvControllerCluster");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NSXControllerDataCollection;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}/controller-cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNsxvManager operation.
     * @callback module:api/DataSourcesApi~getNsxvManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NSXVManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show nsx-v manager data source details
     * Show nsx-v manager data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getNsxvManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NSXVManagerDataSource}
     */
    getNsxvManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNsxvManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NSXVManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~getPanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PanFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show panorama firewall data source details
     * Show panorama firewall data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getPanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PanFirewallDataSource}
     */
    getPanoramaFirewall(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPanoramaFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PanFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUcsManager operation.
     * @callback module:api/DataSourcesApi~getUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UCSManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show ucs manager data source details
     * Show ucs manager data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UCSManagerDataSource}
     */
    getUcsManager(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUcsManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UCSManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUcsSnmpConfig operation.
     * @callback module:api/DataSourcesApi~getUcsSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show snmp config for ucs fabric interconnects
     * Show snmp config for ucs fabric interconnects
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getUcsSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    getUcsSnmpConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUcsSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}/snmp-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVcenter operation.
     * @callback module:api/DataSourcesApi~getVcenterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VCenterDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show vCenter data source details
     * Show vCenter data source details
     * @param {String} id entity id
     * @param {module:api/DataSourcesApi~getVcenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VCenterDataSource}
     */
    getVcenter(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVcenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'credentials', 'enabled', 'entity_id', 'entity_type', 'fqdn', 'ip', 'nickname', 'notes', 'proxy_id'];
      let returnType = VCenterDataSource;
      return this.apiClient.callApi(
        '/data-sources/vcenters/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAristaSwitches operation.
     * @callback module:api/DataSourcesApi~listAristaSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List arista switch data sources
     * List arista switch data sources
     * @param {module:api/DataSourcesApi~listAristaSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listAristaSwitches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/arista-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrocadeSwitches operation.
     * @callback module:api/DataSourcesApi~listBrocadeSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List brocade switch data sources
     * List brocade switch data sources
     * @param {module:api/DataSourcesApi~listBrocadeSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listBrocadeSwitches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCheckpointFirewalls operation.
     * @callback module:api/DataSourcesApi~listCheckpointFirewallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List checkpoint firewall data sources
     * List checkpoint firewall data sources
     * @param {module:api/DataSourcesApi~listCheckpointFirewallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listCheckpointFirewalls(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCiscoSwitches operation.
     * @callback module:api/DataSourcesApi~listCiscoSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List cisco switch data sources
     * List cisco switch data sources
     * @param {module:api/DataSourcesApi~listCiscoSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listCiscoSwitches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDellSwitches operation.
     * @callback module:api/DataSourcesApi~listDellSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List dell switch data sources
     * List dell switch data sources
     * @param {module:api/DataSourcesApi~listDellSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listDellSwitches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/dell-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHpovManagers operation.
     * @callback module:api/DataSourcesApi~listHpovManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hp oneview manager data sources
     * List hp oneview manager data sources
     * @param {module:api/DataSourcesApi~listHpovManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listHpovManagers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listHpvcManagers operation.
     * @callback module:api/DataSourcesApi~listHpvcManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List hpvc manager data sources
     * List hpvc manager data sources
     * @param {module:api/DataSourcesApi~listHpvcManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listHpvcManagers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJuniperSwitches operation.
     * @callback module:api/DataSourcesApi~listJuniperSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List juniper switch data sources
     * List juniper switch data sources
     * @param {module:api/DataSourcesApi~listJuniperSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listJuniperSwitches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNsxvManagers operation.
     * @callback module:api/DataSourcesApi~listNsxvManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List nsx-v manager data sources
     * List nsx-v manager data sources
     * @param {module:api/DataSourcesApi~listNsxvManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listNsxvManagers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPanoramaFirewalls operation.
     * @callback module:api/DataSourcesApi~listPanoramaFirewallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List panorama firewall data sources
     * List panorama firewall data sources
     * @param {module:api/DataSourcesApi~listPanoramaFirewallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listPanoramaFirewalls(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUcsManagers operation.
     * @callback module:api/DataSourcesApi~listUcsManagersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ucs manager data sources
     * List ucs manager data sources
     * @param {module:api/DataSourcesApi~listUcsManagersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listUcsManagers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVcenters operation.
     * @callback module:api/DataSourcesApi~listVcentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSourceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List vCenter data sources
     * List vCenter data sources
     * @param {module:api/DataSourcesApi~listVcentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSourceListResponse}
     */
    listVcenters(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'results', 'total_count'];
      let returnType = DataSourceListResponse;
      return this.apiClient.callApi(
        '/data-sources/vcenters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAristaSwitch operation.
     * @callback module:api/DataSourcesApi~updateAristaSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AristaSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an arista switch data source
     * Update an switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/AristaSwitchDataSource} [aristaSwitchDataSource] 
     * @param {module:api/DataSourcesApi~updateAristaSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AristaSwitchDataSource}
     */
    updateAristaSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['aristaSwitchDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAristaSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AristaSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAristaSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateAristaSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for arista switch data source
     * Update snmp config for arista switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateAristaSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateAristaSwitchSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAristaSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/arista-switches/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrocadeSwitch operation.
     * @callback module:api/DataSourcesApi~updateBrocadeSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BrocadeSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a brocade switch data source
     * Update a brocade switch data source. Only credentials, nickname and notes can be updated.
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/BrocadeSwitchDataSource} [brocadeSwitchDataSource] 
     * @param {module:api/DataSourcesApi~updateBrocadeSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BrocadeSwitchDataSource}
     */
    updateBrocadeSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['brocadeSwitchDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBrocadeSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BrocadeSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBrocadeSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateBrocadeSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for brocade switch data source
     * Update snmp config for brocade switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateBrocadeSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateBrocadeSwitchSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBrocadeSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/brocade-switches/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCheckpointFirewall operation.
     * @callback module:api/DataSourcesApi~updateCheckpointFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckpointFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a checkpoint firewall data source
     * Update a checkpoint firewall data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/CheckpointFirewallDataSource} [checkpointFirewallDataSource] 
     * @param {module:api/DataSourcesApi~updateCheckpointFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckpointFirewallDataSource}
     */
    updateCheckpointFirewall(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['checkpointFirewallDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCheckpointFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckpointFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/checkpoint-firewalls/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCiscoSwitch operation.
     * @callback module:api/DataSourcesApi~updateCiscoSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CiscoSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a cisco switch data source
     * Update a cisco switch data source. Only credentials, nickname and notes can be updated.
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/CiscoSwitchDataSource} [ciscoSwitchDataSource] 
     * @param {module:api/DataSourcesApi~updateCiscoSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CiscoSwitchDataSource}
     */
    updateCiscoSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ciscoSwitchDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCiscoSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CiscoSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCiscoSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateCiscoSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for cisco switch data source
     * Update snmp config for cisco switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateCiscoSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateCiscoSwitchSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCiscoSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/cisco-switches/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDellSwitch operation.
     * @callback module:api/DataSourcesApi~updateDellSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DellSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dell switch data source
     * Update a dell switch data source. Only credentials, nickname and notes can be updated
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/DellSwitchDataSource} [dellSwitchDataSource] 
     * @param {module:api/DataSourcesApi~updateDellSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DellSwitchDataSource}
     */
    updateDellSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['dellSwitchDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDellSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DellSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDellSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateDellSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for dell switch data source
     * Update snmp config for dell switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateDellSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateDellSwitchSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateDellSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/dell-switches/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHpovManager operation.
     * @callback module:api/DataSourcesApi~updateHpovManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPOneViewManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a hp oneview data source
     * Update a hp oneview data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/HPOneViewManagerDataSource} [hPOneViewManagerDataSource] 
     * @param {module:api/DataSourcesApi~updateHpovManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPOneViewManagerDataSource}
     */
    updateHpovManager(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['hPOneViewManagerDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHpovManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HPOneViewManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpov-managers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHpvcManager operation.
     * @callback module:api/DataSourcesApi~updateHpvcManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HPVCManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a hpvc manager data source
     * Update a hpvc manager data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/HPVCManagerDataSource} [hPVCManagerDataSource] 
     * @param {module:api/DataSourcesApi~updateHpvcManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HPVCManagerDataSource}
     */
    updateHpvcManager(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['hPVCManagerDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHpvcManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HPVCManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/hpvc-managers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJuniperSwitch operation.
     * @callback module:api/DataSourcesApi~updateJuniperSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JuniperSwitchDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a juniper switch data source
     * Update a juniper switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/JuniperSwitchDataSource} [juniperSwitchDataSource] 
     * @param {module:api/DataSourcesApi~updateJuniperSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JuniperSwitchDataSource}
     */
    updateJuniperSwitch(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['juniperSwitchDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateJuniperSwitch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JuniperSwitchDataSource;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJuniperSwitchSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateJuniperSwitchSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for a juniper switch data source
     * Update snmp config for a juniper switch data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateJuniperSwitchSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateJuniperSwitchSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateJuniperSwitchSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/juniper-switches/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNsxvControllerCluster operation.
     * @callback module:api/DataSourcesApi~updateNsxvControllerClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NSXControllerDataCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update nsx controller-cluster details
     * Update nsx controller-cluster details
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/NSXControllerDataCollection} [nSXControllerDataCollection] 
     * @param {module:api/DataSourcesApi~updateNsxvControllerClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NSXControllerDataCollection}
     */
    updateNsxvControllerCluster(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['nSXControllerDataCollection'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNsxvControllerCluster");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NSXControllerDataCollection;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}/controller-cluster', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNsxvManager operation.
     * @callback module:api/DataSourcesApi~updateNsxvManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NSXVManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a nsx-v manager data source
     * Update a nsx-v manager data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/NSXVManagerDataSource} [nSXVManagerDataSource] 
     * @param {module:api/DataSourcesApi~updateNsxvManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NSXVManagerDataSource}
     */
    updateNsxvManager(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['nSXVManagerDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNsxvManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NSXVManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/nsxv-managers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePanoramaFirewall operation.
     * @callback module:api/DataSourcesApi~updatePanoramaFirewallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PanFirewallDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a panorama firewall data source
     * Update a panorama firewall data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/PanFirewallDataSource} [panFirewallDataSource] 
     * @param {module:api/DataSourcesApi~updatePanoramaFirewallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PanFirewallDataSource}
     */
    updatePanoramaFirewall(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['panFirewallDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePanoramaFirewall");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PanFirewallDataSource;
      return this.apiClient.callApi(
        '/data-sources/panorama-firewalls/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUcsManager operation.
     * @callback module:api/DataSourcesApi~updateUcsManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UCSManagerDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an ucs manager data source
     * Update an ucs manager data source
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/UCSManagerDataSource} [uCSManagerDataSource] 
     * @param {module:api/DataSourcesApi~updateUcsManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UCSManagerDataSource}
     */
    updateUcsManager(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['uCSManagerDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUcsManager");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UCSManagerDataSource;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUcsSnmpConfig operation.
     * @callback module:api/DataSourcesApi~updateUcsSnmpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SNMPConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update snmp config for ucs fabric interconnects
     * Update snmp config for ucs fabric interconnects
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/SNMPConfig} [sNMPConfig] 
     * @param {module:api/DataSourcesApi~updateUcsSnmpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SNMPConfig}
     */
    updateUcsSnmpConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['sNMPConfig'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUcsSnmpConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SNMPConfig;
      return this.apiClient.callApi(
        '/data-sources/ucs-managers/{id}/snmp-config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVcenter operation.
     * @callback module:api/DataSourcesApi~updateVcenterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VCenterDataSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a vCenter data source.
     * Update a vcenter data source. Only nickname, notes and credentials can be updated.
     * @param {String} id entity id
     * @param {Object} opts Optional parameters
     * @param {module:model/VCenterDataSource} [vCenterDataSource] 
     * @param {module:api/DataSourcesApi~updateVcenterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VCenterDataSource}
     */
    updateVcenter(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['vCenterDataSource'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateVcenter");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VCenterDataSource;
      return this.apiClient.callApi(
        '/data-sources/vcenters/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
