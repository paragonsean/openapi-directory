/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import Application from '../model/Application';
import ApplicationRequest from '../model/ApplicationRequest';
import PagedListResponse from '../model/PagedListResponse';
import Tier from '../model/Tier';
import TierListResponse from '../model/TierListResponse';
import TierRequest from '../model/TierRequest';

/**
* Applications service.
* @module api/ApplicationsApi
* @version 1.0.0
*/
export default class ApplicationsApi {

    /**
    * Constructs a new ApplicationsApi. 
    * @alias module:api/ApplicationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addApplication operation.
     * @callback module:api/ApplicationsApi~addApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an application
     * Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single application. An application name is unique and should not conflict with another application name.
     * @param {module:model/ApplicationRequest} applicationRequest 
     * @param {module:api/ApplicationsApi~addApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    addApplication(applicationRequest, callback) {
      let postBody = applicationRequest;
      // verify the required parameter 'applicationRequest' is set
      if (applicationRequest === undefined || applicationRequest === null) {
        throw new Error("Missing the required parameter 'applicationRequest' when calling addApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'create_time', 'created_by', 'entity_id', 'entity_type', 'last_modified_by', 'last_modified_time', 'name'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/groups/applications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTier operation.
     * @callback module:api/ApplicationsApi~addTierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tier in application
     * Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
     * @param {String} id entity id
     * @param {module:model/TierRequest} tierRequest 
     * @param {module:api/ApplicationsApi~addTierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTier(id, tierRequest, callback) {
      let postBody = tierRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTier");
      }
      // verify the required parameter 'tierRequest' is set
      if (tierRequest === undefined || tierRequest === null) {
        throw new Error("Missing the required parameter 'tierRequest' when calling addTier");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application', 'application/json', 'entity_id', 'entity_type', 'group_membership_criteria', 'name'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/applications/{id}/tiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/ApplicationsApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an application
     * Deleting an application deletes all the tiers of the application along with the application
     * @param {String} id entity id
     * @param {module:api/ApplicationsApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApplication(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApplication");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/applications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTier operation.
     * @callback module:api/ApplicationsApi~deleteTierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete tier
     * Delete tier of an application
     * @param {String} id entity id
     * @param {String} tierId 
     * @param {module:api/ApplicationsApi~deleteTierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTier(id, tierId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTier");
      }
      // verify the required parameter 'tierId' is set
      if (tierId === undefined || tierId === null) {
        throw new Error("Missing the required parameter 'tierId' when calling deleteTier");
      }

      let pathParams = {
        'id': id,
        'tier-id': tierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/applications/{id}/tiers/{tier-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/ApplicationsApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show application details
     * Show application details
     * @param {String} id entity id
     * @param {module:api/ApplicationsApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    getApplication(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApplication");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'create_time', 'created_by', 'entity_id', 'entity_type', 'last_modified_by', 'last_modified_time', 'name'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/groups/applications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationTier operation.
     * @callback module:api/ApplicationsApi~getApplicationTierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show tier details
     * Show tier details
     * @param {String} id entity id
     * @param {String} tierId 
     * @param {module:api/ApplicationsApi~getApplicationTierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApplicationTier(id, tierId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApplicationTier");
      }
      // verify the required parameter 'tierId' is set
      if (tierId === undefined || tierId === null) {
        throw new Error("Missing the required parameter 'tierId' when calling getApplicationTier");
      }

      let pathParams = {
        'id': id,
        'tier-id': tierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application', 'application/json', 'entity_id', 'entity_type', 'group_membership_criteria', 'name'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/applications/{id}/tiers/{tier-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTier operation.
     * @callback module:api/ApplicationsApi~getTierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show tier details
     * Show tier details
     * @param {String} tierId 
     * @param {String} authorization Authorization Header
     * @param {module:api/ApplicationsApi~getTierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTier(tierId, authorization, callback) {
      let postBody = null;
      // verify the required parameter 'tierId' is set
      if (tierId === undefined || tierId === null) {
        throw new Error("Missing the required parameter 'tierId' when calling getTier");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTier");
      }

      let pathParams = {
        'tier-id': tierId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application', 'application/json', 'entity_id', 'entity_type', 'group_membership_criteria', 'name'];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/tiers/{tier-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplicationTiers operation.
     * @callback module:api/ApplicationsApi~listApplicationTiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TierListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tiers of an application
     * List tiers of an application
     * @param {String} id entity id
     * @param {module:api/ApplicationsApi~listApplicationTiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TierListResponse}
     */
    listApplicationTiers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listApplicationTiers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'results'];
      let returnType = TierListResponse;
      return this.apiClient.callApi(
        '/groups/applications/{id}/tiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/ApplicationsApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List applications
     * List applications
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 10)] page size of results
     * @param {String} [cursor] cursor from previous response
     * @param {Number} [startTime] start time for query in epoch seconds
     * @param {Number} [endTime] end time for query in epoch seconds
     * @param {module:api/ApplicationsApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedListResponse}
     */
    listApplications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'size': opts['size'],
        'cursor': opts['cursor'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'results', 'total_count'];
      let returnType = PagedListResponse;
      return this.apiClient.callApi(
        '/groups/applications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
