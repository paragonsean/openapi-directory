/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeType from './NodeType';

/**
 * The Node model module.
 * @module model/Node
 * @version 1.0.0
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * @alias module:model/Node
     */
    constructor() { 
        
        Node.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Node();

            if (data.hasOwnProperty('entity_type')) {
                obj['entity_type'] = NodeType.constructFromObject(data['entity_type']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('node_id')) {
                obj['node_id'] = ApiClient.convertToType(data['node_id'], 'String');
            }
            if (data.hasOwnProperty('node_type')) {
                obj['node_type'] = ApiClient.convertToType(data['node_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Node</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Node</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip_address'] && !(typeof data['ip_address'] === 'string' || data['ip_address'] instanceof String)) {
            throw new Error("Expected the field `ip_address` to be a primitive type in the JSON string but got " + data['ip_address']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['node_id'] && !(typeof data['node_id'] === 'string' || data['node_id'] instanceof String)) {
            throw new Error("Expected the field `node_id` to be a primitive type in the JSON string but got " + data['node_id']);
        }
        // ensure the json data is a string
        if (data['node_type'] && !(typeof data['node_type'] === 'string' || data['node_type'] instanceof String)) {
            throw new Error("Expected the field `node_type` to be a primitive type in the JSON string but got " + data['node_type']);
        }

        return true;
    }


}



/**
 * @member {module:model/NodeType} entity_type
 */
Node.prototype['entity_type'] = undefined;

/**
 * @member {String} id
 */
Node.prototype['id'] = undefined;

/**
 * @member {String} ip_address
 */
Node.prototype['ip_address'] = undefined;

/**
 * @member {String} name
 */
Node.prototype['name'] = undefined;

/**
 * @member {String} node_id
 */
Node.prototype['node_id'] = undefined;

/**
 * @member {module:model/Node.NodeTypeEnum} node_type
 */
Node.prototype['node_type'] = undefined;





/**
 * Allowed values for the <code>node_type</code> property.
 * @enum {String}
 * @readonly
 */
Node['NodeTypeEnum'] = {

    /**
     * value: "PROXY_VM"
     * @const
     */
    "PROXY_VM": "PROXY_VM",

    /**
     * value: "PLATFORM_VM"
     * @const
     */
    "PLATFORM_VM": "PLATFORM_VM"
};



export default Node;

