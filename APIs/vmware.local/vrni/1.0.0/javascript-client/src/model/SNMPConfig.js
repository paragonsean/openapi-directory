/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SNMP2cConfig from './SNMP2cConfig';
import SNMP3Config from './SNMP3Config';

/**
 * The SNMPConfig model module.
 * @module model/SNMPConfig
 * @version 1.0.0
 */
class SNMPConfig {
    /**
     * Constructs a new <code>SNMPConfig</code>.
     * @alias module:model/SNMPConfig
     */
    constructor() { 
        
        SNMPConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['snmp_enabled'] = false;
    }

    /**
     * Constructs a <code>SNMPConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SNMPConfig} obj Optional instance to populate.
     * @return {module:model/SNMPConfig} The populated <code>SNMPConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SNMPConfig();

            if (data.hasOwnProperty('config_snmp_2c')) {
                obj['config_snmp_2c'] = SNMP2cConfig.constructFromObject(data['config_snmp_2c']);
            }
            if (data.hasOwnProperty('config_snmp_3')) {
                obj['config_snmp_3'] = SNMP3Config.constructFromObject(data['config_snmp_3']);
            }
            if (data.hasOwnProperty('snmp_enabled')) {
                obj['snmp_enabled'] = ApiClient.convertToType(data['snmp_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('snmp_version')) {
                obj['snmp_version'] = ApiClient.convertToType(data['snmp_version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SNMPConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SNMPConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config_snmp_2c`
        if (data['config_snmp_2c']) { // data not null
          SNMP2cConfig.validateJSON(data['config_snmp_2c']);
        }
        // validate the optional field `config_snmp_3`
        if (data['config_snmp_3']) { // data not null
          SNMP3Config.validateJSON(data['config_snmp_3']);
        }
        // ensure the json data is a string
        if (data['snmp_version'] && !(typeof data['snmp_version'] === 'string' || data['snmp_version'] instanceof String)) {
            throw new Error("Expected the field `snmp_version` to be a primitive type in the JSON string but got " + data['snmp_version']);
        }

        return true;
    }


}



/**
 * @member {module:model/SNMP2cConfig} config_snmp_2c
 */
SNMPConfig.prototype['config_snmp_2c'] = undefined;

/**
 * @member {module:model/SNMP3Config} config_snmp_3
 */
SNMPConfig.prototype['config_snmp_3'] = undefined;

/**
 * @member {Boolean} snmp_enabled
 * @default false
 */
SNMPConfig.prototype['snmp_enabled'] = false;

/**
 * @member {module:model/SNMPConfig.SnmpVersionEnum} snmp_version
 */
SNMPConfig.prototype['snmp_version'] = undefined;





/**
 * Allowed values for the <code>snmp_version</code> property.
 * @enum {String}
 * @readonly
 */
SNMPConfig['SnmpVersionEnum'] = {

    /**
     * value: "v2c"
     * @const
     */
    "v2c": "v2c",

    /**
     * value: "v3"
     * @const
     */
    "v3": "v3"
};



export default SNMPConfig;

