/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseEvent from './BaseEvent';
import EntityType from './EntityType';
import Reference from './Reference';

/**
 * The ProblemEvent model module.
 * @module model/ProblemEvent
 * @version 1.0.0
 */
class ProblemEvent {
    /**
     * Constructs a new <code>ProblemEvent</code>.
     * @alias module:model/ProblemEvent
     * @extends module:model/BaseEvent
     * @implements module:model/BaseEvent
     */
    constructor() { 
        BaseEvent.initialize(this);
        ProblemEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProblemEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProblemEvent} obj Optional instance to populate.
     * @return {module:model/ProblemEvent} The populated <code>ProblemEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProblemEvent();
            BaseEvent.constructFromObject(data, obj);
            BaseEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('event_close_time_epoch_ms')) {
                obj['event_close_time_epoch_ms'] = ApiClient.convertToType(data['event_close_time_epoch_ms'], 'Number');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProblemEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProblemEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * @member {Number} event_close_time_epoch_ms
 */
ProblemEvent.prototype['event_close_time_epoch_ms'] = undefined;

/**
 * @member {module:model/ProblemEvent.SeverityEnum} severity
 */
ProblemEvent.prototype['severity'] = undefined;


// Implement BaseEvent interface:
/**
 * @member {String} entity_id
 */
BaseEvent.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseEvent.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseEvent.prototype['name'] = undefined;
/**
 * @member {module:model/BaseEvent.AdminStateEnum} admin_state
 */
BaseEvent.prototype['admin_state'] = undefined;
/**
 * @member {Array.<module:model/Reference>} anchor_entities
 */
BaseEvent.prototype['anchor_entities'] = undefined;
/**
 * @member {Boolean} archived
 */
BaseEvent.prototype['archived'] = undefined;
/**
 * @member {Array.<String>} event_tags
 */
BaseEvent.prototype['event_tags'] = undefined;
/**
 * @member {Number} event_time_epoch_ms
 */
BaseEvent.prototype['event_time_epoch_ms'] = undefined;
/**
 * @member {String} message
 */
BaseEvent.prototype['message'] = undefined;
/**
 * @member {Array.<module:model/Reference>} related_entities
 */
BaseEvent.prototype['related_entities'] = undefined;



/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
ProblemEvent['SeverityEnum'] = {

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL",

    /**
     * value: "MODERATE"
     * @const
     */
    "MODERATE": "MODERATE",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO"
};



export default ProblemEvent;

