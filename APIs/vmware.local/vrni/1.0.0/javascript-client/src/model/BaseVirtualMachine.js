/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseEntity from './BaseEntity';
import EntityType from './EntityType';
import IpV4Address from './IpV4Address';
import Reference from './Reference';
import RuleSet from './RuleSet';

/**
 * The BaseVirtualMachine model module.
 * @module model/BaseVirtualMachine
 * @version 1.0.0
 */
class BaseVirtualMachine {
    /**
     * Constructs a new <code>BaseVirtualMachine</code>.
     * @alias module:model/BaseVirtualMachine
     * @extends module:model/BaseEntity
     * @implements module:model/BaseEntity
     */
    constructor() { 
        BaseEntity.initialize(this);
        BaseVirtualMachine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseVirtualMachine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseVirtualMachine} obj Optional instance to populate.
     * @return {module:model/BaseVirtualMachine} The populated <code>BaseVirtualMachine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseVirtualMachine();
            BaseEntity.constructFromObject(data, obj);
            BaseEntity.constructFromObject(data, obj);

            if (data.hasOwnProperty('default_gateway')) {
                obj['default_gateway'] = ApiClient.convertToType(data['default_gateway'], 'String');
            }
            if (data.hasOwnProperty('destination_firewall_rules')) {
                obj['destination_firewall_rules'] = ApiClient.convertToType(data['destination_firewall_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('ip_addresses')) {
                obj['ip_addresses'] = ApiClient.convertToType(data['ip_addresses'], [IpV4Address]);
            }
            if (data.hasOwnProperty('ip_sets')) {
                obj['ip_sets'] = ApiClient.convertToType(data['ip_sets'], [Reference]);
            }
            if (data.hasOwnProperty('security_groups')) {
                obj['security_groups'] = ApiClient.convertToType(data['security_groups'], [Reference]);
            }
            if (data.hasOwnProperty('source_firewall_rules')) {
                obj['source_firewall_rules'] = ApiClient.convertToType(data['source_firewall_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('vnics')) {
                obj['vnics'] = ApiClient.convertToType(data['vnics'], [Reference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseVirtualMachine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseVirtualMachine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default_gateway'] && !(typeof data['default_gateway'] === 'string' || data['default_gateway'] instanceof String)) {
            throw new Error("Expected the field `default_gateway` to be a primitive type in the JSON string but got " + data['default_gateway']);
        }
        if (data['destination_firewall_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destination_firewall_rules'])) {
                throw new Error("Expected the field `destination_firewall_rules` to be an array in the JSON data but got " + data['destination_firewall_rules']);
            }
            // validate the optional field `destination_firewall_rules` (array)
            for (const item of data['destination_firewall_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        if (data['ip_addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ip_addresses'])) {
                throw new Error("Expected the field `ip_addresses` to be an array in the JSON data but got " + data['ip_addresses']);
            }
            // validate the optional field `ip_addresses` (array)
            for (const item of data['ip_addresses']) {
                IpV4Address.validateJSON(item);
            };
        }
        if (data['ip_sets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ip_sets'])) {
                throw new Error("Expected the field `ip_sets` to be an array in the JSON data but got " + data['ip_sets']);
            }
            // validate the optional field `ip_sets` (array)
            for (const item of data['ip_sets']) {
                Reference.validateJSON(item);
            };
        }
        if (data['security_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['security_groups'])) {
                throw new Error("Expected the field `security_groups` to be an array in the JSON data but got " + data['security_groups']);
            }
            // validate the optional field `security_groups` (array)
            for (const item of data['security_groups']) {
                Reference.validateJSON(item);
            };
        }
        if (data['source_firewall_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['source_firewall_rules'])) {
                throw new Error("Expected the field `source_firewall_rules` to be an array in the JSON data but got " + data['source_firewall_rules']);
            }
            // validate the optional field `source_firewall_rules` (array)
            for (const item of data['source_firewall_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        if (data['vnics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vnics'])) {
                throw new Error("Expected the field `vnics` to be an array in the JSON data but got " + data['vnics']);
            }
            // validate the optional field `vnics` (array)
            for (const item of data['vnics']) {
                Reference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} default_gateway
 */
BaseVirtualMachine.prototype['default_gateway'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} destination_firewall_rules
 */
BaseVirtualMachine.prototype['destination_firewall_rules'] = undefined;

/**
 * @member {Array.<module:model/IpV4Address>} ip_addresses
 */
BaseVirtualMachine.prototype['ip_addresses'] = undefined;

/**
 * @member {Array.<module:model/Reference>} ip_sets
 */
BaseVirtualMachine.prototype['ip_sets'] = undefined;

/**
 * @member {Array.<module:model/Reference>} security_groups
 */
BaseVirtualMachine.prototype['security_groups'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} source_firewall_rules
 */
BaseVirtualMachine.prototype['source_firewall_rules'] = undefined;

/**
 * @member {Array.<module:model/Reference>} vnics
 */
BaseVirtualMachine.prototype['vnics'] = undefined;


// Implement BaseEntity interface:
/**
 * @member {String} entity_id
 */
BaseEntity.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseEntity.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseEntity.prototype['name'] = undefined;




export default BaseVirtualMachine;

