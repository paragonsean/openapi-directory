/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSourceType from './DataSourceType';

/**
 * The BaseDataSource model module.
 * @module model/BaseDataSource
 * @version 1.0.0
 */
class BaseDataSource {
    /**
     * Constructs a new <code>BaseDataSource</code>.
     * @alias module:model/BaseDataSource
     */
    constructor() { 
        
        BaseDataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['enabled'] = true;
    }

    /**
     * Constructs a <code>BaseDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseDataSource} obj Optional instance to populate.
     * @return {module:model/BaseDataSource} The populated <code>BaseDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseDataSource();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('entity_type')) {
                obj['entity_type'] = DataSourceType.constructFromObject(data['entity_type']);
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('nickname')) {
                obj['nickname'] = ApiClient.convertToType(data['nickname'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('proxy_id')) {
                obj['proxy_id'] = ApiClient.convertToType(data['proxy_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseDataSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['nickname'] && !(typeof data['nickname'] === 'string' || data['nickname'] instanceof String)) {
            throw new Error("Expected the field `nickname` to be a primitive type in the JSON string but got " + data['nickname']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['proxy_id'] && !(typeof data['proxy_id'] === 'string' || data['proxy_id'] instanceof String)) {
            throw new Error("Expected the field `proxy_id` to be a primitive type in the JSON string but got " + data['proxy_id']);
        }

        return true;
    }


}



/**
 * @member {Boolean} enabled
 * @default true
 */
BaseDataSource.prototype['enabled'] = true;

/**
 * @member {String} entity_id
 */
BaseDataSource.prototype['entity_id'] = undefined;

/**
 * @member {module:model/DataSourceType} entity_type
 */
BaseDataSource.prototype['entity_type'] = undefined;

/**
 * @member {String} fqdn
 */
BaseDataSource.prototype['fqdn'] = undefined;

/**
 * @member {String} ip
 */
BaseDataSource.prototype['ip'] = undefined;

/**
 * @member {String} nickname
 */
BaseDataSource.prototype['nickname'] = undefined;

/**
 * @member {String} notes
 */
BaseDataSource.prototype['notes'] = undefined;

/**
 * proxy vm which should register this vcenter
 * @member {String} proxy_id
 */
BaseDataSource.prototype['proxy_id'] = undefined;






export default BaseDataSource;

