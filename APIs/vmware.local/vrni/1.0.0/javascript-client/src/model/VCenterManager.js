/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseManager from './BaseManager';
import EntityType from './EntityType';
import IpV4Address from './IpV4Address';
import Reference from './Reference';

/**
 * The VCenterManager model module.
 * @module model/VCenterManager
 * @version 1.0.0
 */
class VCenterManager {
    /**
     * Constructs a new <code>VCenterManager</code>.
     * @alias module:model/VCenterManager
     * @extends module:model/BaseManager
     * @implements module:model/BaseManager
     */
    constructor() { 
        BaseManager.initialize(this);
        VCenterManager.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VCenterManager</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VCenterManager} obj Optional instance to populate.
     * @return {module:model/VCenterManager} The populated <code>VCenterManager</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VCenterManager();
            BaseManager.constructFromObject(data, obj);
            BaseManager.constructFromObject(data, obj);

            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = IpV4Address.constructFromObject(data['ip_address']);
            }
            if (data.hasOwnProperty('nsx_manager')) {
                obj['nsx_manager'] = Reference.constructFromObject(data['nsx_manager']);
            }
            if (data.hasOwnProperty('vm')) {
                obj['vm'] = Reference.constructFromObject(data['vm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VCenterManager</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VCenterManager</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // validate the optional field `ip_address`
        if (data['ip_address']) { // data not null
          IpV4Address.validateJSON(data['ip_address']);
        }
        // validate the optional field `nsx_manager`
        if (data['nsx_manager']) { // data not null
          Reference.validateJSON(data['nsx_manager']);
        }
        // validate the optional field `vm`
        if (data['vm']) { // data not null
          Reference.validateJSON(data['vm']);
        }

        return true;
    }


}



/**
 * @member {String} fqdn
 */
VCenterManager.prototype['fqdn'] = undefined;

/**
 * @member {module:model/IpV4Address} ip_address
 */
VCenterManager.prototype['ip_address'] = undefined;

/**
 * @member {module:model/Reference} nsx_manager
 */
VCenterManager.prototype['nsx_manager'] = undefined;

/**
 * @member {module:model/Reference} vm
 */
VCenterManager.prototype['vm'] = undefined;


// Implement BaseManager interface:
/**
 * @member {String} entity_id
 */
BaseManager.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseManager.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseManager.prototype['name'] = undefined;




export default VCenterManager;

