/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SNMP3Config model module.
 * @module model/SNMP3Config
 * @version 1.0.0
 */
class SNMP3Config {
    /**
     * Constructs a new <code>SNMP3Config</code>.
     * @alias module:model/SNMP3Config
     */
    constructor() { 
        
        SNMP3Config.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SNMP3Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SNMP3Config} obj Optional instance to populate.
     * @return {module:model/SNMP3Config} The populated <code>SNMP3Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SNMP3Config();

            if (data.hasOwnProperty('authentication_password')) {
                obj['authentication_password'] = ApiClient.convertToType(data['authentication_password'], 'String');
            }
            if (data.hasOwnProperty('authentication_type')) {
                obj['authentication_type'] = ApiClient.convertToType(data['authentication_type'], 'String');
            }
            if (data.hasOwnProperty('context_name')) {
                obj['context_name'] = ApiClient.convertToType(data['context_name'], 'String');
            }
            if (data.hasOwnProperty('privacy_password')) {
                obj['privacy_password'] = ApiClient.convertToType(data['privacy_password'], 'String');
            }
            if (data.hasOwnProperty('privacy_type')) {
                obj['privacy_type'] = ApiClient.convertToType(data['privacy_type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SNMP3Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SNMP3Config</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authentication_password'] && !(typeof data['authentication_password'] === 'string' || data['authentication_password'] instanceof String)) {
            throw new Error("Expected the field `authentication_password` to be a primitive type in the JSON string but got " + data['authentication_password']);
        }
        // ensure the json data is a string
        if (data['authentication_type'] && !(typeof data['authentication_type'] === 'string' || data['authentication_type'] instanceof String)) {
            throw new Error("Expected the field `authentication_type` to be a primitive type in the JSON string but got " + data['authentication_type']);
        }
        // ensure the json data is a string
        if (data['context_name'] && !(typeof data['context_name'] === 'string' || data['context_name'] instanceof String)) {
            throw new Error("Expected the field `context_name` to be a primitive type in the JSON string but got " + data['context_name']);
        }
        // ensure the json data is a string
        if (data['privacy_password'] && !(typeof data['privacy_password'] === 'string' || data['privacy_password'] instanceof String)) {
            throw new Error("Expected the field `privacy_password` to be a primitive type in the JSON string but got " + data['privacy_password']);
        }
        // ensure the json data is a string
        if (data['privacy_type'] && !(typeof data['privacy_type'] === 'string' || data['privacy_type'] instanceof String)) {
            throw new Error("Expected the field `privacy_type` to be a primitive type in the JSON string but got " + data['privacy_type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {String} authentication_password
 */
SNMP3Config.prototype['authentication_password'] = undefined;

/**
 * @member {module:model/SNMP3Config.AuthenticationTypeEnum} authentication_type
 */
SNMP3Config.prototype['authentication_type'] = undefined;

/**
 * @member {String} context_name
 */
SNMP3Config.prototype['context_name'] = undefined;

/**
 * @member {String} privacy_password
 */
SNMP3Config.prototype['privacy_password'] = undefined;

/**
 * @member {module:model/SNMP3Config.PrivacyTypeEnum} privacy_type
 */
SNMP3Config.prototype['privacy_type'] = undefined;

/**
 * @member {String} username
 */
SNMP3Config.prototype['username'] = undefined;





/**
 * Allowed values for the <code>authentication_type</code> property.
 * @enum {String}
 * @readonly
 */
SNMP3Config['AuthenticationTypeEnum'] = {

    /**
     * value: "NO_AUTH"
     * @const
     */
    "NO_AUTH": "NO_AUTH",

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "SHA"
     * @const
     */
    "SHA": "SHA"
};


/**
 * Allowed values for the <code>privacy_type</code> property.
 * @enum {String}
 * @readonly
 */
SNMP3Config['PrivacyTypeEnum'] = {

    /**
     * value: "AES"
     * @const
     */
    "AES": "AES",

    /**
     * value: "DES"
     * @const
     */
    "DES": "DES",

    /**
     * value: "AES128"
     * @const
     */
    "AES128": "AES128",

    /**
     * value: "AES192"
     * @const
     */
    "AES192": "AES192",

    /**
     * value: "AES256"
     * @const
     */
    "AES256": "AES256",

    /**
     * value: "3DES"
     * @const
     */
    "3DES": "3DES",

    /**
     * value: "NO_PRIV"
     * @const
     */
    "NO_PRIV": "NO_PRIV"
};



export default SNMP3Config;

