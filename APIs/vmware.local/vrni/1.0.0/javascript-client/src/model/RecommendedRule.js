/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Reference from './Reference';
import SimplePortRange from './SimplePortRange';

/**
 * The RecommendedRule model module.
 * @module model/RecommendedRule
 * @version 1.0.0
 */
class RecommendedRule {
    /**
     * Constructs a new <code>RecommendedRule</code>.
     * @alias module:model/RecommendedRule
     */
    constructor() { 
        
        RecommendedRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecommendedRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendedRule} obj Optional instance to populate.
     * @return {module:model/RecommendedRule} The populated <code>RecommendedRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendedRule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [Reference]);
            }
            if (data.hasOwnProperty('port_ranges')) {
                obj['port_ranges'] = ApiClient.convertToType(data['port_ranges'], [SimplePortRange]);
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = ApiClient.convertToType(data['protocols'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Reference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendedRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendedRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                Reference.validateJSON(item);
            };
        }
        if (data['port_ranges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['port_ranges'])) {
                throw new Error("Expected the field `port_ranges` to be an array in the JSON data but got " + data['port_ranges']);
            }
            // validate the optional field `port_ranges` (array)
            for (const item of data['port_ranges']) {
                SimplePortRange.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocols'])) {
            throw new Error("Expected the field `protocols` to be an array in the JSON data but got " + data['protocols']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                Reference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/RecommendedRule.ActionEnum} action
 */
RecommendedRule.prototype['action'] = undefined;

/**
 * @member {Array.<module:model/Reference>} destinations
 */
RecommendedRule.prototype['destinations'] = undefined;

/**
 * @member {Array.<module:model/SimplePortRange>} port_ranges
 */
RecommendedRule.prototype['port_ranges'] = undefined;

/**
 * @member {Array.<String>} protocols
 */
RecommendedRule.prototype['protocols'] = undefined;

/**
 * @member {Array.<module:model/Reference>} sources
 */
RecommendedRule.prototype['sources'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
RecommendedRule['ActionEnum'] = {

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW",

    /**
     * value: "DROP"
     * @const
     */
    "DROP": "DROP"
};



export default RecommendedRule;

