/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseDataSource from './BaseDataSource';
import DataSourceType from './DataSourceType';
import PasswordCredentials from './PasswordCredentials';

/**
 * The NSXVManagerDataSource model module.
 * @module model/NSXVManagerDataSource
 * @version 1.0.0
 */
class NSXVManagerDataSource {
    /**
     * Constructs a new <code>NSXVManagerDataSource</code>.
     * @alias module:model/NSXVManagerDataSource
     * @extends module:model/BaseDataSource
     * @implements module:model/BaseDataSource
     */
    constructor() { 
        BaseDataSource.initialize(this);
        NSXVManagerDataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['central_cli_enabled'] = false;
        obj['ipfix_enabled'] = false;
    }

    /**
     * Constructs a <code>NSXVManagerDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NSXVManagerDataSource} obj Optional instance to populate.
     * @return {module:model/NSXVManagerDataSource} The populated <code>NSXVManagerDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NSXVManagerDataSource();
            BaseDataSource.constructFromObject(data, obj);
            BaseDataSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('central_cli_enabled')) {
                obj['central_cli_enabled'] = ApiClient.convertToType(data['central_cli_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = PasswordCredentials.constructFromObject(data['credentials']);
            }
            if (data.hasOwnProperty('ipfix_enabled')) {
                obj['ipfix_enabled'] = ApiClient.convertToType(data['ipfix_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('vcenter_id')) {
                obj['vcenter_id'] = ApiClient.convertToType(data['vcenter_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NSXVManagerDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NSXVManagerDataSource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `credentials`
        if (data['credentials']) { // data not null
          PasswordCredentials.validateJSON(data['credentials']);
        }
        // ensure the json data is a string
        if (data['vcenter_id'] && !(typeof data['vcenter_id'] === 'string' || data['vcenter_id'] instanceof String)) {
            throw new Error("Expected the field `vcenter_id` to be a primitive type in the JSON string but got " + data['vcenter_id']);
        }

        return true;
    }


}



/**
 * @member {Boolean} central_cli_enabled
 * @default false
 */
NSXVManagerDataSource.prototype['central_cli_enabled'] = false;

/**
 * @member {module:model/PasswordCredentials} credentials
 */
NSXVManagerDataSource.prototype['credentials'] = undefined;

/**
 * @member {Boolean} ipfix_enabled
 * @default false
 */
NSXVManagerDataSource.prototype['ipfix_enabled'] = false;

/**
 * Associated vcenter data source entity Id
 * @member {String} vcenter_id
 */
NSXVManagerDataSource.prototype['vcenter_id'] = undefined;


// Implement BaseDataSource interface:
/**
 * @member {Boolean} enabled
 * @default true
 */
BaseDataSource.prototype['enabled'] = true;
/**
 * @member {String} entity_id
 */
BaseDataSource.prototype['entity_id'] = undefined;
/**
 * @member {module:model/DataSourceType} entity_type
 */
BaseDataSource.prototype['entity_type'] = undefined;
/**
 * @member {String} fqdn
 */
BaseDataSource.prototype['fqdn'] = undefined;
/**
 * @member {String} ip
 */
BaseDataSource.prototype['ip'] = undefined;
/**
 * @member {String} nickname
 */
BaseDataSource.prototype['nickname'] = undefined;
/**
 * @member {String} notes
 */
BaseDataSource.prototype['notes'] = undefined;
/**
 * proxy vm which should register this vcenter
 * @member {String} proxy_id
 */
BaseDataSource.prototype['proxy_id'] = undefined;




export default NSXVManagerDataSource;

