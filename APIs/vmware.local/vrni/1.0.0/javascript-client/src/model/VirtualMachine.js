/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseVirtualMachine from './BaseVirtualMachine';
import EntityType from './EntityType';
import IpV4Address from './IpV4Address';
import Reference from './Reference';
import RuleSet from './RuleSet';
import Vlan from './Vlan';

/**
 * The VirtualMachine model module.
 * @module model/VirtualMachine
 * @version 1.0.0
 */
class VirtualMachine {
    /**
     * Constructs a new <code>VirtualMachine</code>.
     * @alias module:model/VirtualMachine
     * @extends module:model/BaseVirtualMachine
     * @implements module:model/BaseVirtualMachine
     */
    constructor() { 
        BaseVirtualMachine.initialize(this);
        VirtualMachine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualMachine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachine} obj Optional instance to populate.
     * @return {module:model/VirtualMachine} The populated <code>VirtualMachine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachine();
            BaseVirtualMachine.constructFromObject(data, obj);
            BaseVirtualMachine.constructFromObject(data, obj);

            if (data.hasOwnProperty('applied_to_destination_rules')) {
                obj['applied_to_destination_rules'] = ApiClient.convertToType(data['applied_to_destination_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('applied_to_source_rules')) {
                obj['applied_to_source_rules'] = ApiClient.convertToType(data['applied_to_source_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = Reference.constructFromObject(data['cluster']);
            }
            if (data.hasOwnProperty('datacenter')) {
                obj['datacenter'] = Reference.constructFromObject(data['datacenter']);
            }
            if (data.hasOwnProperty('datastores')) {
                obj['datastores'] = ApiClient.convertToType(data['datastores'], [Reference]);
            }
            if (data.hasOwnProperty('destination_inversion_rules')) {
                obj['destination_inversion_rules'] = ApiClient.convertToType(data['destination_inversion_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('folders')) {
                obj['folders'] = ApiClient.convertToType(data['folders'], [Reference]);
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = Reference.constructFromObject(data['host']);
            }
            if (data.hasOwnProperty('layer2_networks')) {
                obj['layer2_networks'] = ApiClient.convertToType(data['layer2_networks'], [Reference]);
            }
            if (data.hasOwnProperty('nsx_manager')) {
                obj['nsx_manager'] = Reference.constructFromObject(data['nsx_manager']);
            }
            if (data.hasOwnProperty('resource_pool')) {
                obj['resource_pool'] = Reference.constructFromObject(data['resource_pool']);
            }
            if (data.hasOwnProperty('security_tags')) {
                obj['security_tags'] = ApiClient.convertToType(data['security_tags'], [Reference]);
            }
            if (data.hasOwnProperty('source_inversion_rules')) {
                obj['source_inversion_rules'] = ApiClient.convertToType(data['source_inversion_rules'], [RuleSet]);
            }
            if (data.hasOwnProperty('vcenter_manager')) {
                obj['vcenter_manager'] = Reference.constructFromObject(data['vcenter_manager']);
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'String');
            }
            if (data.hasOwnProperty('vlans')) {
                obj['vlans'] = ApiClient.convertToType(data['vlans'], [Vlan]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachine</code>.
     */
    static validateJSON(data) {
        if (data['applied_to_destination_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applied_to_destination_rules'])) {
                throw new Error("Expected the field `applied_to_destination_rules` to be an array in the JSON data but got " + data['applied_to_destination_rules']);
            }
            // validate the optional field `applied_to_destination_rules` (array)
            for (const item of data['applied_to_destination_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        if (data['applied_to_source_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applied_to_source_rules'])) {
                throw new Error("Expected the field `applied_to_source_rules` to be an array in the JSON data but got " + data['applied_to_source_rules']);
            }
            // validate the optional field `applied_to_source_rules` (array)
            for (const item of data['applied_to_source_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        // validate the optional field `cluster`
        if (data['cluster']) { // data not null
          Reference.validateJSON(data['cluster']);
        }
        // validate the optional field `datacenter`
        if (data['datacenter']) { // data not null
          Reference.validateJSON(data['datacenter']);
        }
        if (data['datastores']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['datastores'])) {
                throw new Error("Expected the field `datastores` to be an array in the JSON data but got " + data['datastores']);
            }
            // validate the optional field `datastores` (array)
            for (const item of data['datastores']) {
                Reference.validateJSON(item);
            };
        }
        if (data['destination_inversion_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destination_inversion_rules'])) {
                throw new Error("Expected the field `destination_inversion_rules` to be an array in the JSON data but got " + data['destination_inversion_rules']);
            }
            // validate the optional field `destination_inversion_rules` (array)
            for (const item of data['destination_inversion_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        if (data['folders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['folders'])) {
                throw new Error("Expected the field `folders` to be an array in the JSON data but got " + data['folders']);
            }
            // validate the optional field `folders` (array)
            for (const item of data['folders']) {
                Reference.validateJSON(item);
            };
        }
        // validate the optional field `host`
        if (data['host']) { // data not null
          Reference.validateJSON(data['host']);
        }
        if (data['layer2_networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layer2_networks'])) {
                throw new Error("Expected the field `layer2_networks` to be an array in the JSON data but got " + data['layer2_networks']);
            }
            // validate the optional field `layer2_networks` (array)
            for (const item of data['layer2_networks']) {
                Reference.validateJSON(item);
            };
        }
        // validate the optional field `nsx_manager`
        if (data['nsx_manager']) { // data not null
          Reference.validateJSON(data['nsx_manager']);
        }
        // validate the optional field `resource_pool`
        if (data['resource_pool']) { // data not null
          Reference.validateJSON(data['resource_pool']);
        }
        if (data['security_tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['security_tags'])) {
                throw new Error("Expected the field `security_tags` to be an array in the JSON data but got " + data['security_tags']);
            }
            // validate the optional field `security_tags` (array)
            for (const item of data['security_tags']) {
                Reference.validateJSON(item);
            };
        }
        if (data['source_inversion_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['source_inversion_rules'])) {
                throw new Error("Expected the field `source_inversion_rules` to be an array in the JSON data but got " + data['source_inversion_rules']);
            }
            // validate the optional field `source_inversion_rules` (array)
            for (const item of data['source_inversion_rules']) {
                RuleSet.validateJSON(item);
            };
        }
        // validate the optional field `vcenter_manager`
        if (data['vcenter_manager']) { // data not null
          Reference.validateJSON(data['vcenter_manager']);
        }
        // ensure the json data is a string
        if (data['vendor_id'] && !(typeof data['vendor_id'] === 'string' || data['vendor_id'] instanceof String)) {
            throw new Error("Expected the field `vendor_id` to be a primitive type in the JSON string but got " + data['vendor_id']);
        }
        if (data['vlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vlans'])) {
                throw new Error("Expected the field `vlans` to be an array in the JSON data but got " + data['vlans']);
            }
            // validate the optional field `vlans` (array)
            for (const item of data['vlans']) {
                Vlan.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/RuleSet>} applied_to_destination_rules
 */
VirtualMachine.prototype['applied_to_destination_rules'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} applied_to_source_rules
 */
VirtualMachine.prototype['applied_to_source_rules'] = undefined;

/**
 * @member {module:model/Reference} cluster
 */
VirtualMachine.prototype['cluster'] = undefined;

/**
 * @member {module:model/Reference} datacenter
 */
VirtualMachine.prototype['datacenter'] = undefined;

/**
 * @member {Array.<module:model/Reference>} datastores
 */
VirtualMachine.prototype['datastores'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} destination_inversion_rules
 */
VirtualMachine.prototype['destination_inversion_rules'] = undefined;

/**
 * @member {Array.<module:model/Reference>} folders
 */
VirtualMachine.prototype['folders'] = undefined;

/**
 * @member {module:model/Reference} host
 */
VirtualMachine.prototype['host'] = undefined;

/**
 * @member {Array.<module:model/Reference>} layer2_networks
 */
VirtualMachine.prototype['layer2_networks'] = undefined;

/**
 * @member {module:model/Reference} nsx_manager
 */
VirtualMachine.prototype['nsx_manager'] = undefined;

/**
 * @member {module:model/Reference} resource_pool
 */
VirtualMachine.prototype['resource_pool'] = undefined;

/**
 * @member {Array.<module:model/Reference>} security_tags
 */
VirtualMachine.prototype['security_tags'] = undefined;

/**
 * @member {Array.<module:model/RuleSet>} source_inversion_rules
 */
VirtualMachine.prototype['source_inversion_rules'] = undefined;

/**
 * @member {module:model/Reference} vcenter_manager
 */
VirtualMachine.prototype['vcenter_manager'] = undefined;

/**
 * @member {String} vendor_id
 */
VirtualMachine.prototype['vendor_id'] = undefined;

/**
 * @member {Array.<module:model/Vlan>} vlans
 */
VirtualMachine.prototype['vlans'] = undefined;


// Implement BaseVirtualMachine interface:
/**
 * @member {String} entity_id
 */
BaseVirtualMachine.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseVirtualMachine.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseVirtualMachine.prototype['name'] = undefined;
/**
 * @member {String} default_gateway
 */
BaseVirtualMachine.prototype['default_gateway'] = undefined;
/**
 * @member {Array.<module:model/RuleSet>} destination_firewall_rules
 */
BaseVirtualMachine.prototype['destination_firewall_rules'] = undefined;
/**
 * @member {Array.<module:model/IpV4Address>} ip_addresses
 */
BaseVirtualMachine.prototype['ip_addresses'] = undefined;
/**
 * @member {Array.<module:model/Reference>} ip_sets
 */
BaseVirtualMachine.prototype['ip_sets'] = undefined;
/**
 * @member {Array.<module:model/Reference>} security_groups
 */
BaseVirtualMachine.prototype['security_groups'] = undefined;
/**
 * @member {Array.<module:model/RuleSet>} source_firewall_rules
 */
BaseVirtualMachine.prototype['source_firewall_rules'] = undefined;
/**
 * @member {Array.<module:model/Reference>} vnics
 */
BaseVirtualMachine.prototype['vnics'] = undefined;




export default VirtualMachine;

