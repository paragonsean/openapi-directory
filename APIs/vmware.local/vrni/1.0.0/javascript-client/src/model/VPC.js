/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseEntity from './BaseEntity';
import EntityType from './EntityType';
import IpV4Address from './IpV4Address';

/**
 * The VPC model module.
 * @module model/VPC
 * @version 1.0.0
 */
class VPC {
    /**
     * Constructs a new <code>VPC</code>.
     * @alias module:model/VPC
     * @extends module:model/BaseEntity
     * @implements module:model/BaseEntity
     */
    constructor() { 
        BaseEntity.initialize(this);
        VPC.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VPC</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VPC} obj Optional instance to populate.
     * @return {module:model/VPC} The populated <code>VPC</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VPC();
            BaseEntity.constructFromObject(data, obj);
            BaseEntity.constructFromObject(data, obj);

            if (data.hasOwnProperty('cidr_block')) {
                obj['cidr_block'] = IpV4Address.constructFromObject(data['cidr_block']);
            }
            if (data.hasOwnProperty('default_vpc')) {
                obj['default_vpc'] = ApiClient.convertToType(data['default_vpc'], 'Boolean');
            }
            if (data.hasOwnProperty('last_synched_time')) {
                obj['last_synched_time'] = ApiClient.convertToType(data['last_synched_time'], 'Number');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VPC</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VPC</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cidr_block`
        if (data['cidr_block']) { // data not null
          IpV4Address.validateJSON(data['cidr_block']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['vendor_id'] && !(typeof data['vendor_id'] === 'string' || data['vendor_id'] instanceof String)) {
            throw new Error("Expected the field `vendor_id` to be a primitive type in the JSON string but got " + data['vendor_id']);
        }

        return true;
    }


}



/**
 * @member {module:model/IpV4Address} cidr_block
 */
VPC.prototype['cidr_block'] = undefined;

/**
 * @member {Boolean} default_vpc
 */
VPC.prototype['default_vpc'] = undefined;

/**
 * @member {Number} last_synched_time
 */
VPC.prototype['last_synched_time'] = undefined;

/**
 * @member {String} region
 */
VPC.prototype['region'] = undefined;

/**
 * @member {String} state
 */
VPC.prototype['state'] = undefined;

/**
 * @member {String} vendor_id
 */
VPC.prototype['vendor_id'] = undefined;


// Implement BaseEntity interface:
/**
 * @member {String} entity_id
 */
BaseEntity.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseEntity.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseEntity.prototype['name'] = undefined;




export default VPC;

