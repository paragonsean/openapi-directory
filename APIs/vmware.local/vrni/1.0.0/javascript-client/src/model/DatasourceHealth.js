/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatasourceHealth model module.
 * @module model/DatasourceHealth
 * @version 1.0.0
 */
class DatasourceHealth {
    /**
     * Constructs a new <code>DatasourceHealth</code>.
     * Datasource Health state
     * @alias module:model/DatasourceHealth
     */
    constructor() { 
        
        DatasourceHealth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatasourceHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatasourceHealth} obj Optional instance to populate.
     * @return {module:model/DatasourceHealth} The populated <code>DatasourceHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatasourceHealth();

            if (data.hasOwnProperty('health_error_code')) {
                obj['health_error_code'] = ApiClient.convertToType(data['health_error_code'], 'String');
            }
            if (data.hasOwnProperty('health_message')) {
                obj['health_message'] = ApiClient.convertToType(data['health_message'], 'String');
            }
            if (data.hasOwnProperty('health_status')) {
                obj['health_status'] = ApiClient.convertToType(data['health_status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatasourceHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatasourceHealth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['health_error_code'] && !(typeof data['health_error_code'] === 'string' || data['health_error_code'] instanceof String)) {
            throw new Error("Expected the field `health_error_code` to be a primitive type in the JSON string but got " + data['health_error_code']);
        }
        // ensure the json data is a string
        if (data['health_message'] && !(typeof data['health_message'] === 'string' || data['health_message'] instanceof String)) {
            throw new Error("Expected the field `health_message` to be a primitive type in the JSON string but got " + data['health_message']);
        }
        // ensure the json data is a string
        if (data['health_status'] && !(typeof data['health_status'] === 'string' || data['health_status'] instanceof String)) {
            throw new Error("Expected the field `health_status` to be a primitive type in the JSON string but got " + data['health_status']);
        }

        return true;
    }


}



/**
 * @member {String} health_error_code
 */
DatasourceHealth.prototype['health_error_code'] = undefined;

/**
 * @member {String} health_message
 */
DatasourceHealth.prototype['health_message'] = undefined;

/**
 * @member {module:model/DatasourceHealth.HealthStatusEnum} health_status
 */
DatasourceHealth.prototype['health_status'] = undefined;





/**
 * Allowed values for the <code>health_status</code> property.
 * @enum {String}
 * @readonly
 */
DatasourceHealth['HealthStatusEnum'] = {

    /**
     * value: "HEALTHY"
     * @const
     */
    "HEALTHY": "HEALTHY",

    /**
     * value: "HEALTHY_WITH_WARNINGS"
     * @const
     */
    "HEALTHY_WITH_WARNINGS": "HEALTHY_WITH_WARNINGS",

    /**
     * value: "UNHEALTHY"
     * @const
     */
    "UNHEALTHY": "UNHEALTHY"
};



export default DatasourceHealth;

