/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseEntity from './BaseEntity';
import EntityType from './EntityType';
import Reference from './Reference';

/**
 * The BaseEvent model module.
 * @module model/BaseEvent
 * @version 1.0.0
 */
class BaseEvent {
    /**
     * Constructs a new <code>BaseEvent</code>.
     * @alias module:model/BaseEvent
     * @extends module:model/BaseEntity
     * @implements module:model/BaseEntity
     */
    constructor() { 
        BaseEntity.initialize(this);
        BaseEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseEvent} obj Optional instance to populate.
     * @return {module:model/BaseEvent} The populated <code>BaseEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseEvent();
            BaseEntity.constructFromObject(data, obj);
            BaseEntity.constructFromObject(data, obj);

            if (data.hasOwnProperty('admin_state')) {
                obj['admin_state'] = ApiClient.convertToType(data['admin_state'], 'String');
            }
            if (data.hasOwnProperty('anchor_entities')) {
                obj['anchor_entities'] = ApiClient.convertToType(data['anchor_entities'], [Reference]);
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('event_tags')) {
                obj['event_tags'] = ApiClient.convertToType(data['event_tags'], ['String']);
            }
            if (data.hasOwnProperty('event_time_epoch_ms')) {
                obj['event_time_epoch_ms'] = ApiClient.convertToType(data['event_time_epoch_ms'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('related_entities')) {
                obj['related_entities'] = ApiClient.convertToType(data['related_entities'], [Reference]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['admin_state'] && !(typeof data['admin_state'] === 'string' || data['admin_state'] instanceof String)) {
            throw new Error("Expected the field `admin_state` to be a primitive type in the JSON string but got " + data['admin_state']);
        }
        if (data['anchor_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['anchor_entities'])) {
                throw new Error("Expected the field `anchor_entities` to be an array in the JSON data but got " + data['anchor_entities']);
            }
            // validate the optional field `anchor_entities` (array)
            for (const item of data['anchor_entities']) {
                Reference.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['event_tags'])) {
            throw new Error("Expected the field `event_tags` to be an array in the JSON data but got " + data['event_tags']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['related_entities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['related_entities'])) {
                throw new Error("Expected the field `related_entities` to be an array in the JSON data but got " + data['related_entities']);
            }
            // validate the optional field `related_entities` (array)
            for (const item of data['related_entities']) {
                Reference.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/BaseEvent.AdminStateEnum} admin_state
 */
BaseEvent.prototype['admin_state'] = undefined;

/**
 * @member {Array.<module:model/Reference>} anchor_entities
 */
BaseEvent.prototype['anchor_entities'] = undefined;

/**
 * @member {Boolean} archived
 */
BaseEvent.prototype['archived'] = undefined;

/**
 * @member {Array.<String>} event_tags
 */
BaseEvent.prototype['event_tags'] = undefined;

/**
 * @member {Number} event_time_epoch_ms
 */
BaseEvent.prototype['event_time_epoch_ms'] = undefined;

/**
 * @member {String} message
 */
BaseEvent.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/Reference>} related_entities
 */
BaseEvent.prototype['related_entities'] = undefined;


// Implement BaseEntity interface:
/**
 * @member {String} entity_id
 */
BaseEntity.prototype['entity_id'] = undefined;
/**
 * @member {module:model/EntityType} entity_type
 */
BaseEntity.prototype['entity_type'] = undefined;
/**
 * @member {String} name
 */
BaseEntity.prototype['name'] = undefined;



/**
 * Allowed values for the <code>admin_state</code> property.
 * @enum {String}
 * @readonly
 */
BaseEvent['AdminStateEnum'] = {

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default BaseEvent;

