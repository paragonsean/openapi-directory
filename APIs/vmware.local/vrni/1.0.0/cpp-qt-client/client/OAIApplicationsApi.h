/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationsApi_H
#define OAI_OAIApplicationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIApplication.h"
#include "OAIApplicationRequest.h"
#include "OAIPagedListResponse.h"
#include "OAITier.h"
#include "OAITierListResponse.h"
#include "OAITierRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationsApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationsApi(const int timeOut = 0);
    ~OAIApplicationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_application_request OAIApplicationRequest [required]
    */
    virtual void addApplication(const OAIApplicationRequest &oai_application_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_tier_request OAITierRequest [required]
    */
    virtual void addTier(const QString &id, const OAITierRequest &oai_tier_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteApplication(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tier_id QString [required]
    */
    virtual void deleteTier(const QString &id, const QString &tier_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getApplication(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tier_id QString [required]
    */
    virtual void getApplicationTier(const QString &id, const QString &tier_id);

    /**
    * @param[in]  tier_id QString [required]
    * @param[in]  authorization QString [required]
    */
    virtual void getTier(const QString &tier_id, const QString &authorization);

    /**
    * @param[in]  id QString [required]
    */
    virtual void listApplicationTiers(const QString &id);

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listApplications(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addApplicationCallback(OAIHttpRequestWorker *worker);
    void addTierCallback(OAIHttpRequestWorker *worker);
    void deleteApplicationCallback(OAIHttpRequestWorker *worker);
    void deleteTierCallback(OAIHttpRequestWorker *worker);
    void getApplicationCallback(OAIHttpRequestWorker *worker);
    void getApplicationTierCallback(OAIHttpRequestWorker *worker);
    void getTierCallback(OAIHttpRequestWorker *worker);
    void listApplicationTiersCallback(OAIHttpRequestWorker *worker);
    void listApplicationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addApplicationSignal(OAIApplication summary);
    void addTierSignal();
    void deleteApplicationSignal();
    void deleteTierSignal();
    void getApplicationSignal(OAIApplication summary);
    void getApplicationTierSignal();
    void getTierSignal();
    void listApplicationTiersSignal(OAITierListResponse summary);
    void listApplicationsSignal(OAIPagedListResponse summary);


    void addApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void addTierSignalFull(OAIHttpRequestWorker *worker);
    void deleteApplicationSignalFull(OAIHttpRequestWorker *worker);
    void deleteTierSignalFull(OAIHttpRequestWorker *worker);
    void getApplicationSignalFull(OAIHttpRequestWorker *worker, OAIApplication summary);
    void getApplicationTierSignalFull(OAIHttpRequestWorker *worker);
    void getTierSignalFull(OAIHttpRequestWorker *worker);
    void listApplicationTiersSignalFull(OAIHttpRequestWorker *worker, OAITierListResponse summary);
    void listApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponse summary);

    Q_DECL_DEPRECATED_X("Use addApplicationSignalError() instead")
    void addApplicationSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addApplicationSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTierSignalError() instead")
    void addTierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addTierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalError() instead")
    void deleteApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTierSignalError() instead")
    void deleteTierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSignalError() instead")
    void getApplicationSignalE(OAIApplication summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSignalError(OAIApplication summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTierSignalError() instead")
    void getApplicationTierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTierSignalError() instead")
    void getTierSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTierSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationTiersSignalError() instead")
    void listApplicationTiersSignalE(OAITierListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationTiersSignalError(OAITierListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationsSignalError() instead")
    void listApplicationsSignalE(OAIPagedListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationsSignalError(OAIPagedListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addApplicationSignalErrorFull() instead")
    void addApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTierSignalErrorFull() instead")
    void addTierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApplicationSignalErrorFull() instead")
    void deleteApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTierSignalErrorFull() instead")
    void deleteTierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSignalErrorFull() instead")
    void getApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationTierSignalErrorFull() instead")
    void getApplicationTierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationTierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTierSignalErrorFull() instead")
    void getTierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationTiersSignalErrorFull() instead")
    void listApplicationTiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationTiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listApplicationsSignalErrorFull() instead")
    void listApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
