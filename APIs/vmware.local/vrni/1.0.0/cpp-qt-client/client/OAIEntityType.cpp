/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityType::OAIEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityType::OAIEntityType() {
    this->initializeModel();
}

OAIEntityType::~OAIEntityType() {}

void OAIEntityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VirtualMachine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VIRTUALMACHINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2Instance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Host", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::HOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vnic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VNIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Vmknic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VMKNIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VxlanLayer2Network", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VXLANLAYER2NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VlanL2Network", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VLANL2NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cluster", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::CLUSTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecurityTag", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::SECURITYTAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResourcePool", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::RESOURCEPOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXIPSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXIPSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2IPSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2IPSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXSecurityGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXSECURITYGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2SecurityGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2SECURITYGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Flow", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::FLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ProblemEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::PROBLEMEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Application", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::APPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Tier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::TIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXFirewallRule", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXFIREWALLRULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2SGFirewallRule", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2SGFIREWALLRULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXRedirectRule", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXREDIRECTRULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCenterManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VCENTERMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXVManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXVMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2Service", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VPC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VPC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXDistributedFirewall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXDISTRIBUTEDFIREWALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EC2Firewall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::EC2FIREWALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXServiceGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::NSXSERVICEGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DistributedVirtualSwitch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::DISTRIBUTEDVIRTUALSWITCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DistributedVirtualPortgroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::DISTRIBUTEDVIRTUALPORTGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCDatacenter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::VCDATACENTER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Datastore", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::DATASTORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Folder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntityType::FOLDER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntityType::VIRTUALMACHINE:
            val = "VirtualMachine";
            break;
        case eOAIEntityType::EC2INSTANCE:
            val = "EC2Instance";
            break;
        case eOAIEntityType::HOST:
            val = "Host";
            break;
        case eOAIEntityType::VNIC:
            val = "Vnic";
            break;
        case eOAIEntityType::VMKNIC:
            val = "Vmknic";
            break;
        case eOAIEntityType::VXLANLAYER2NETWORK:
            val = "VxlanLayer2Network";
            break;
        case eOAIEntityType::VLANL2NETWORK:
            val = "VlanL2Network";
            break;
        case eOAIEntityType::CLUSTER:
            val = "Cluster";
            break;
        case eOAIEntityType::SECURITYTAG:
            val = "SecurityTag";
            break;
        case eOAIEntityType::RESOURCEPOOL:
            val = "ResourcePool";
            break;
        case eOAIEntityType::NSXIPSET:
            val = "NSXIPSet";
            break;
        case eOAIEntityType::EC2IPSET:
            val = "EC2IPSet";
            break;
        case eOAIEntityType::NSXSECURITYGROUP:
            val = "NSXSecurityGroup";
            break;
        case eOAIEntityType::EC2SECURITYGROUP:
            val = "EC2SecurityGroup";
            break;
        case eOAIEntityType::FLOW:
            val = "Flow";
            break;
        case eOAIEntityType::PROBLEMEVENT:
            val = "ProblemEvent";
            break;
        case eOAIEntityType::APPLICATION:
            val = "Application";
            break;
        case eOAIEntityType::TIER:
            val = "Tier";
            break;
        case eOAIEntityType::NSXFIREWALLRULE:
            val = "NSXFirewallRule";
            break;
        case eOAIEntityType::EC2SGFIREWALLRULE:
            val = "EC2SGFirewallRule";
            break;
        case eOAIEntityType::NSXREDIRECTRULE:
            val = "NSXRedirectRule";
            break;
        case eOAIEntityType::VCENTERMANAGER:
            val = "VCenterManager";
            break;
        case eOAIEntityType::NSXVMANAGER:
            val = "NSXVManager";
            break;
        case eOAIEntityType::NSXSERVICE:
            val = "NSXService";
            break;
        case eOAIEntityType::EC2SERVICE:
            val = "EC2Service";
            break;
        case eOAIEntityType::VPC:
            val = "VPC";
            break;
        case eOAIEntityType::NSXDISTRIBUTEDFIREWALL:
            val = "NSXDistributedFirewall";
            break;
        case eOAIEntityType::EC2FIREWALL:
            val = "EC2Firewall";
            break;
        case eOAIEntityType::NSXSERVICEGROUP:
            val = "NSXServiceGroup";
            break;
        case eOAIEntityType::DISTRIBUTEDVIRTUALSWITCH:
            val = "DistributedVirtualSwitch";
            break;
        case eOAIEntityType::DISTRIBUTEDVIRTUALPORTGROUP:
            val = "DistributedVirtualPortgroup";
            break;
        case eOAIEntityType::VCDATACENTER:
            val = "VCDatacenter";
            break;
        case eOAIEntityType::DATASTORE:
            val = "Datastore";
            break;
        case eOAIEntityType::FOLDER:
            val = "Folder";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntityType::eOAIEntityType OAIEntityType::getValue() const {
    return m_value;
}

void OAIEntityType::setValue(const OAIEntityType::eOAIEntityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
