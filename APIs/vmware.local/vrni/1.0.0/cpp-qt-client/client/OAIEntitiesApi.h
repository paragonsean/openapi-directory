/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEntitiesApi_H
#define OAI_OAIEntitiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIBaseFirewallRule.h"
#include "OAIBaseIPSet.h"
#include "OAIBaseL2Network.h"
#include "OAIBaseNSXManager.h"
#include "OAIBaseSecurityGroup.h"
#include "OAIBaseService.h"
#include "OAIBaseServiceGroup.h"
#include "OAIBaseVirtualMachine.h"
#include "OAIBaseVnic.h"
#include "OAICluster.h"
#include "OAIDatastore.h"
#include "OAIDistributedVirtualPortgroup.h"
#include "OAIDistributedVirtualSwitch.h"
#include "OAIEntityName.h"
#include "OAIFlow.h"
#include "OAIFolder.h"
#include "OAIHost.h"
#include "OAINamesRequest.h"
#include "OAINamesResponse.h"
#include "OAIPagedListResponseWithTime.h"
#include "OAIProblemEvent.h"
#include "OAISecurityTag.h"
#include "OAIVCDatacenter.h"
#include "OAIVCenterManager.h"
#include "OAIVmknic.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEntitiesApi : public QObject {
    Q_OBJECT

public:
    OAIEntitiesApi(const int timeOut = 0);
    ~OAIEntitiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getCluster(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getDatacenter(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getDatastore(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getDistributedVirtualPortgroup(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getDistributedVirtualSwitch(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getFirewall(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getFirewallRule(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getFlow(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void getFlows(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getFolder(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getHost(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getIPSet(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getLayer2Network(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getNSXManager(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getName(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  oai_names_request OAINamesRequest [required]
    */
    virtual void getNames(const OAINamesRequest &oai_names_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getProblemEvent(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getSecurityGroup(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getSecurityTag(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getService(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getServiceGroup(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getVcenterManager(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getVm(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getVmknic(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  time qint64 [optional]
    */
    virtual void getVnic(const QString &id, const ::OpenAPI::OptionalParam<qint64> &time = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listClusters(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listDatacenters(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listDatastores(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listDistributedVirtualPortgroups(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listDistributedVirtualSwitches(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listFirewallRules(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listFirewalls(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listFolders(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listHosts(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listIPSets(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listLayer2Networks(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listNSXManagers(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listProblemEvents(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listSecurityGroups(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listSecurityTags(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listServiceGroups(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listServices(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listVcenterManagers(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listVmknics(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listVms(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  size double [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  start_time double [optional]
    * @param[in]  end_time double [optional]
    */
    virtual void listVnics(const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &end_time = ::OpenAPI::OptionalParam<double>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getClusterCallback(OAIHttpRequestWorker *worker);
    void getDatacenterCallback(OAIHttpRequestWorker *worker);
    void getDatastoreCallback(OAIHttpRequestWorker *worker);
    void getDistributedVirtualPortgroupCallback(OAIHttpRequestWorker *worker);
    void getDistributedVirtualSwitchCallback(OAIHttpRequestWorker *worker);
    void getFirewallCallback(OAIHttpRequestWorker *worker);
    void getFirewallRuleCallback(OAIHttpRequestWorker *worker);
    void getFlowCallback(OAIHttpRequestWorker *worker);
    void getFlowsCallback(OAIHttpRequestWorker *worker);
    void getFolderCallback(OAIHttpRequestWorker *worker);
    void getHostCallback(OAIHttpRequestWorker *worker);
    void getIPSetCallback(OAIHttpRequestWorker *worker);
    void getLayer2NetworkCallback(OAIHttpRequestWorker *worker);
    void getNSXManagerCallback(OAIHttpRequestWorker *worker);
    void getNameCallback(OAIHttpRequestWorker *worker);
    void getNamesCallback(OAIHttpRequestWorker *worker);
    void getProblemEventCallback(OAIHttpRequestWorker *worker);
    void getSecurityGroupCallback(OAIHttpRequestWorker *worker);
    void getSecurityTagCallback(OAIHttpRequestWorker *worker);
    void getServiceCallback(OAIHttpRequestWorker *worker);
    void getServiceGroupCallback(OAIHttpRequestWorker *worker);
    void getVcenterManagerCallback(OAIHttpRequestWorker *worker);
    void getVmCallback(OAIHttpRequestWorker *worker);
    void getVmknicCallback(OAIHttpRequestWorker *worker);
    void getVnicCallback(OAIHttpRequestWorker *worker);
    void listClustersCallback(OAIHttpRequestWorker *worker);
    void listDatacentersCallback(OAIHttpRequestWorker *worker);
    void listDatastoresCallback(OAIHttpRequestWorker *worker);
    void listDistributedVirtualPortgroupsCallback(OAIHttpRequestWorker *worker);
    void listDistributedVirtualSwitchesCallback(OAIHttpRequestWorker *worker);
    void listFirewallRulesCallback(OAIHttpRequestWorker *worker);
    void listFirewallsCallback(OAIHttpRequestWorker *worker);
    void listFoldersCallback(OAIHttpRequestWorker *worker);
    void listHostsCallback(OAIHttpRequestWorker *worker);
    void listIPSetsCallback(OAIHttpRequestWorker *worker);
    void listLayer2NetworksCallback(OAIHttpRequestWorker *worker);
    void listNSXManagersCallback(OAIHttpRequestWorker *worker);
    void listProblemEventsCallback(OAIHttpRequestWorker *worker);
    void listSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void listSecurityTagsCallback(OAIHttpRequestWorker *worker);
    void listServiceGroupsCallback(OAIHttpRequestWorker *worker);
    void listServicesCallback(OAIHttpRequestWorker *worker);
    void listVcenterManagersCallback(OAIHttpRequestWorker *worker);
    void listVmknicsCallback(OAIHttpRequestWorker *worker);
    void listVmsCallback(OAIHttpRequestWorker *worker);
    void listVnicsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getClusterSignal(OAICluster summary);
    void getDatacenterSignal(OAIVCDatacenter summary);
    void getDatastoreSignal(OAIDatastore summary);
    void getDistributedVirtualPortgroupSignal(OAIDistributedVirtualPortgroup summary);
    void getDistributedVirtualSwitchSignal(OAIDistributedVirtualSwitch summary);
    void getFirewallSignal(OAIBaseFirewallRule summary);
    void getFirewallRuleSignal();
    void getFlowSignal(OAIFlow summary);
    void getFlowsSignal(OAIPagedListResponseWithTime summary);
    void getFolderSignal(OAIFolder summary);
    void getHostSignal(OAIHost summary);
    void getIPSetSignal(OAIBaseIPSet summary);
    void getLayer2NetworkSignal(OAIBaseL2Network summary);
    void getNSXManagerSignal(OAIBaseNSXManager summary);
    void getNameSignal(OAIEntityName summary);
    void getNamesSignal(OAINamesResponse summary);
    void getProblemEventSignal();
    void getSecurityGroupSignal(OAIBaseSecurityGroup summary);
    void getSecurityTagSignal(OAISecurityTag summary);
    void getServiceSignal(OAIBaseService summary);
    void getServiceGroupSignal(OAIBaseServiceGroup summary);
    void getVcenterManagerSignal(OAIVCenterManager summary);
    void getVmSignal(OAIBaseVirtualMachine summary);
    void getVmknicSignal(OAIVmknic summary);
    void getVnicSignal(OAIBaseVnic summary);
    void listClustersSignal(OAIPagedListResponseWithTime summary);
    void listDatacentersSignal(OAIPagedListResponseWithTime summary);
    void listDatastoresSignal(OAIPagedListResponseWithTime summary);
    void listDistributedVirtualPortgroupsSignal(OAIPagedListResponseWithTime summary);
    void listDistributedVirtualSwitchesSignal(OAIPagedListResponseWithTime summary);
    void listFirewallRulesSignal(OAIPagedListResponseWithTime summary);
    void listFirewallsSignal(OAIPagedListResponseWithTime summary);
    void listFoldersSignal(OAIPagedListResponseWithTime summary);
    void listHostsSignal(OAIPagedListResponseWithTime summary);
    void listIPSetsSignal(OAIPagedListResponseWithTime summary);
    void listLayer2NetworksSignal(OAIPagedListResponseWithTime summary);
    void listNSXManagersSignal(OAIPagedListResponseWithTime summary);
    void listProblemEventsSignal(OAIPagedListResponseWithTime summary);
    void listSecurityGroupsSignal(OAIPagedListResponseWithTime summary);
    void listSecurityTagsSignal(OAIPagedListResponseWithTime summary);
    void listServiceGroupsSignal(OAIPagedListResponseWithTime summary);
    void listServicesSignal(OAIPagedListResponseWithTime summary);
    void listVcenterManagersSignal(OAIPagedListResponseWithTime summary);
    void listVmknicsSignal(OAIPagedListResponseWithTime summary);
    void listVmsSignal(OAIPagedListResponseWithTime summary);
    void listVnicsSignal(OAIPagedListResponseWithTime summary);


    void getClusterSignalFull(OAIHttpRequestWorker *worker, OAICluster summary);
    void getDatacenterSignalFull(OAIHttpRequestWorker *worker, OAIVCDatacenter summary);
    void getDatastoreSignalFull(OAIHttpRequestWorker *worker, OAIDatastore summary);
    void getDistributedVirtualPortgroupSignalFull(OAIHttpRequestWorker *worker, OAIDistributedVirtualPortgroup summary);
    void getDistributedVirtualSwitchSignalFull(OAIHttpRequestWorker *worker, OAIDistributedVirtualSwitch summary);
    void getFirewallSignalFull(OAIHttpRequestWorker *worker, OAIBaseFirewallRule summary);
    void getFirewallRuleSignalFull(OAIHttpRequestWorker *worker);
    void getFlowSignalFull(OAIHttpRequestWorker *worker, OAIFlow summary);
    void getFlowsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void getFolderSignalFull(OAIHttpRequestWorker *worker, OAIFolder summary);
    void getHostSignalFull(OAIHttpRequestWorker *worker, OAIHost summary);
    void getIPSetSignalFull(OAIHttpRequestWorker *worker, OAIBaseIPSet summary);
    void getLayer2NetworkSignalFull(OAIHttpRequestWorker *worker, OAIBaseL2Network summary);
    void getNSXManagerSignalFull(OAIHttpRequestWorker *worker, OAIBaseNSXManager summary);
    void getNameSignalFull(OAIHttpRequestWorker *worker, OAIEntityName summary);
    void getNamesSignalFull(OAIHttpRequestWorker *worker, OAINamesResponse summary);
    void getProblemEventSignalFull(OAIHttpRequestWorker *worker);
    void getSecurityGroupSignalFull(OAIHttpRequestWorker *worker, OAIBaseSecurityGroup summary);
    void getSecurityTagSignalFull(OAIHttpRequestWorker *worker, OAISecurityTag summary);
    void getServiceSignalFull(OAIHttpRequestWorker *worker, OAIBaseService summary);
    void getServiceGroupSignalFull(OAIHttpRequestWorker *worker, OAIBaseServiceGroup summary);
    void getVcenterManagerSignalFull(OAIHttpRequestWorker *worker, OAIVCenterManager summary);
    void getVmSignalFull(OAIHttpRequestWorker *worker, OAIBaseVirtualMachine summary);
    void getVmknicSignalFull(OAIHttpRequestWorker *worker, OAIVmknic summary);
    void getVnicSignalFull(OAIHttpRequestWorker *worker, OAIBaseVnic summary);
    void listClustersSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listDatacentersSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listDatastoresSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listDistributedVirtualPortgroupsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listDistributedVirtualSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listFirewallRulesSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listFirewallsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listFoldersSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listHostsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listIPSetsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listLayer2NetworksSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listNSXManagersSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listProblemEventsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listSecurityTagsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listServiceGroupsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listServicesSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listVcenterManagersSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listVmknicsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listVmsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);
    void listVnicsSignalFull(OAIHttpRequestWorker *worker, OAIPagedListResponseWithTime summary);

    Q_DECL_DEPRECATED_X("Use getClusterSignalError() instead")
    void getClusterSignalE(OAICluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterSignalError(OAICluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatacenterSignalError() instead")
    void getDatacenterSignalE(OAIVCDatacenter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatacenterSignalError(OAIVCDatacenter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatastoreSignalError() instead")
    void getDatastoreSignalE(OAIDatastore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatastoreSignalError(OAIDatastore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributedVirtualPortgroupSignalError() instead")
    void getDistributedVirtualPortgroupSignalE(OAIDistributedVirtualPortgroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributedVirtualPortgroupSignalError(OAIDistributedVirtualPortgroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributedVirtualSwitchSignalError() instead")
    void getDistributedVirtualSwitchSignalE(OAIDistributedVirtualSwitch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributedVirtualSwitchSignalError(OAIDistributedVirtualSwitch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallSignalError() instead")
    void getFirewallSignalE(OAIBaseFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallSignalError(OAIBaseFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleSignalError() instead")
    void getFirewallRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlowSignalError() instead")
    void getFlowSignalE(OAIFlow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlowSignalError(OAIFlow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlowsSignalError() instead")
    void getFlowsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlowsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFolderSignalError() instead")
    void getFolderSignalE(OAIFolder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFolderSignalError(OAIFolder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostSignalError() instead")
    void getHostSignalE(OAIHost summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostSignalError(OAIHost summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIPSetSignalError() instead")
    void getIPSetSignalE(OAIBaseIPSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIPSetSignalError(OAIBaseIPSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLayer2NetworkSignalError() instead")
    void getLayer2NetworkSignalE(OAIBaseL2Network summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLayer2NetworkSignalError(OAIBaseL2Network summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNSXManagerSignalError() instead")
    void getNSXManagerSignalE(OAIBaseNSXManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNSXManagerSignalError(OAIBaseNSXManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameSignalError() instead")
    void getNameSignalE(OAIEntityName summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNameSignalError(OAIEntityName summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamesSignalError() instead")
    void getNamesSignalE(OAINamesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamesSignalError(OAINamesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProblemEventSignalError() instead")
    void getProblemEventSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProblemEventSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityGroupSignalError() instead")
    void getSecurityGroupSignalE(OAIBaseSecurityGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityGroupSignalError(OAIBaseSecurityGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityTagSignalError() instead")
    void getSecurityTagSignalE(OAISecurityTag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityTagSignalError(OAISecurityTag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceSignalError() instead")
    void getServiceSignalE(OAIBaseService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceSignalError(OAIBaseService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceGroupSignalError() instead")
    void getServiceGroupSignalE(OAIBaseServiceGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceGroupSignalError(OAIBaseServiceGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVcenterManagerSignalError() instead")
    void getVcenterManagerSignalE(OAIVCenterManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVcenterManagerSignalError(OAIVCenterManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVmSignalError() instead")
    void getVmSignalE(OAIBaseVirtualMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVmSignalError(OAIBaseVirtualMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVmknicSignalError() instead")
    void getVmknicSignalE(OAIVmknic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVmknicSignalError(OAIVmknic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVnicSignalError() instead")
    void getVnicSignalE(OAIBaseVnic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVnicSignalError(OAIBaseVnic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClustersSignalError() instead")
    void listClustersSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listClustersSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatacentersSignalError() instead")
    void listDatacentersSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatacentersSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatastoresSignalError() instead")
    void listDatastoresSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatastoresSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributedVirtualPortgroupsSignalError() instead")
    void listDistributedVirtualPortgroupsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributedVirtualPortgroupsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributedVirtualSwitchesSignalError() instead")
    void listDistributedVirtualSwitchesSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributedVirtualSwitchesSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRulesSignalError() instead")
    void listFirewallRulesSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRulesSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallsSignalError() instead")
    void listFirewallsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalError() instead")
    void listFoldersSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostsSignalError() instead")
    void listHostsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIPSetsSignalError() instead")
    void listIPSetsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIPSetsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLayer2NetworksSignalError() instead")
    void listLayer2NetworksSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLayer2NetworksSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNSXManagersSignalError() instead")
    void listNSXManagersSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNSXManagersSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProblemEventsSignalError() instead")
    void listProblemEventsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProblemEventsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecurityGroupsSignalError() instead")
    void listSecurityGroupsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecurityGroupsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecurityTagsSignalError() instead")
    void listSecurityTagsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecurityTagsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceGroupsSignalError() instead")
    void listServiceGroupsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceGroupsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalError() instead")
    void listServicesSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVcenterManagersSignalError() instead")
    void listVcenterManagersSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVcenterManagersSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVmknicsSignalError() instead")
    void listVmknicsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVmknicsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVmsSignalError() instead")
    void listVmsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVmsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVnicsSignalError() instead")
    void listVnicsSignalE(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVnicsSignalError(OAIPagedListResponseWithTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getClusterSignalErrorFull() instead")
    void getClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatacenterSignalErrorFull() instead")
    void getDatacenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatacenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatastoreSignalErrorFull() instead")
    void getDatastoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatastoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributedVirtualPortgroupSignalErrorFull() instead")
    void getDistributedVirtualPortgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributedVirtualPortgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributedVirtualSwitchSignalErrorFull() instead")
    void getDistributedVirtualSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributedVirtualSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallSignalErrorFull() instead")
    void getFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFirewallRuleSignalErrorFull() instead")
    void getFirewallRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFirewallRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlowSignalErrorFull() instead")
    void getFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlowsSignalErrorFull() instead")
    void getFlowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFolderSignalErrorFull() instead")
    void getFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHostSignalErrorFull() instead")
    void getHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIPSetSignalErrorFull() instead")
    void getIPSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIPSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLayer2NetworkSignalErrorFull() instead")
    void getLayer2NetworkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLayer2NetworkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNSXManagerSignalErrorFull() instead")
    void getNSXManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNSXManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNameSignalErrorFull() instead")
    void getNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNamesSignalErrorFull() instead")
    void getNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProblemEventSignalErrorFull() instead")
    void getProblemEventSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProblemEventSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityGroupSignalErrorFull() instead")
    void getSecurityGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSecurityTagSignalErrorFull() instead")
    void getSecurityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSecurityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceSignalErrorFull() instead")
    void getServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServiceGroupSignalErrorFull() instead")
    void getServiceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServiceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVcenterManagerSignalErrorFull() instead")
    void getVcenterManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVcenterManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVmSignalErrorFull() instead")
    void getVmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVmknicSignalErrorFull() instead")
    void getVmknicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVmknicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVnicSignalErrorFull() instead")
    void getVnicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVnicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listClustersSignalErrorFull() instead")
    void listClustersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listClustersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatacentersSignalErrorFull() instead")
    void listDatacentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatacentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDatastoresSignalErrorFull() instead")
    void listDatastoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDatastoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributedVirtualPortgroupsSignalErrorFull() instead")
    void listDistributedVirtualPortgroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributedVirtualPortgroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDistributedVirtualSwitchesSignalErrorFull() instead")
    void listDistributedVirtualSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDistributedVirtualSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallRulesSignalErrorFull() instead")
    void listFirewallRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFirewallsSignalErrorFull() instead")
    void listFirewallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFirewallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFoldersSignalErrorFull() instead")
    void listFoldersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFoldersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHostsSignalErrorFull() instead")
    void listHostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIPSetsSignalErrorFull() instead")
    void listIPSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIPSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLayer2NetworksSignalErrorFull() instead")
    void listLayer2NetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLayer2NetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNSXManagersSignalErrorFull() instead")
    void listNSXManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNSXManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProblemEventsSignalErrorFull() instead")
    void listProblemEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProblemEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecurityGroupsSignalErrorFull() instead")
    void listSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSecurityTagsSignalErrorFull() instead")
    void listSecurityTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSecurityTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceGroupsSignalErrorFull() instead")
    void listServiceGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServicesSignalErrorFull() instead")
    void listServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVcenterManagersSignalErrorFull() instead")
    void listVcenterManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVcenterManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVmknicsSignalErrorFull() instead")
    void listVmknicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVmknicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVmsSignalErrorFull() instead")
    void listVmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVnicsSignalErrorFull() instead")
    void listVnicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVnicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
