/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagedListResponseWithTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagedListResponseWithTime::OAIPagedListResponseWithTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagedListResponseWithTime::OAIPagedListResponseWithTime() {
    this->initializeModel();
}

OAIPagedListResponseWithTime::~OAIPagedListResponseWithTime() {}

void OAIPagedListResponseWithTime::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAIPagedListResponseWithTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagedListResponseWithTime::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAIPagedListResponseWithTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagedListResponseWithTime::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QString OAIPagedListResponseWithTime::getCursor() const {
    return m_cursor;
}
void OAIPagedListResponseWithTime::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIPagedListResponseWithTime::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIPagedListResponseWithTime::is_cursor_Valid() const{
    return m_cursor_isValid;
}

qint64 OAIPagedListResponseWithTime::getEndTime() const {
    return m_end_time;
}
void OAIPagedListResponseWithTime::setEndTime(const qint64 &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPagedListResponseWithTime::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPagedListResponseWithTime::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIEntityIdWithTime> OAIPagedListResponseWithTime::getResults() const {
    return m_results;
}
void OAIPagedListResponseWithTime::setResults(const QList<OAIEntityIdWithTime> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPagedListResponseWithTime::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPagedListResponseWithTime::is_results_Valid() const{
    return m_results_isValid;
}

qint64 OAIPagedListResponseWithTime::getStartTime() const {
    return m_start_time;
}
void OAIPagedListResponseWithTime::setStartTime(const qint64 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPagedListResponseWithTime::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPagedListResponseWithTime::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIPagedListResponseWithTime::getTotalCount() const {
    return m_total_count;
}
void OAIPagedListResponseWithTime::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIPagedListResponseWithTime::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIPagedListResponseWithTime::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAIPagedListResponseWithTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagedListResponseWithTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
