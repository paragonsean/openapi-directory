/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINSXService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINSXService::OAINSXService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINSXService::OAINSXService() {
    this->initializeModel();
}

OAINSXService::~OAINSXService() {}

void OAINSXService::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_ranges_isSet = false;
    m_port_ranges_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_nsx_managers_isSet = false;
    m_nsx_managers_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAINSXService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINSXService::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_port_ranges_isValid = ::OpenAPI::fromJsonValue(m_port_ranges, json[QString("port_ranges")]);
    m_port_ranges_isSet = !json[QString("port_ranges")].isNull() && m_port_ranges_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_nsx_managers_isValid = ::OpenAPI::fromJsonValue(m_nsx_managers, json[QString("nsx_managers")]);
    m_nsx_managers_isSet = !json[QString("nsx_managers")].isNull() && m_nsx_managers_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAINSXService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINSXService::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_ranges.size() > 0) {
        obj.insert(QString("port_ranges"), ::OpenAPI::toJsonValue(m_port_ranges));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_nsx_managers.size() > 0) {
        obj.insert(QString("nsx_managers"), ::OpenAPI::toJsonValue(m_nsx_managers));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QString OAINSXService::getEntityId() const {
    return m_entity_id;
}
void OAINSXService::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAINSXService::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAINSXService::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAINSXService::getEntityType() const {
    return m_entity_type;
}
void OAINSXService::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAINSXService::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAINSXService::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAINSXService::getName() const {
    return m_name;
}
void OAINSXService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINSXService::is_name_Set() const{
    return m_name_isSet;
}

bool OAINSXService::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPortRange> OAINSXService::getPortRanges() const {
    return m_port_ranges;
}
void OAINSXService::setPortRanges(const QList<OAIPortRange> &port_ranges) {
    m_port_ranges = port_ranges;
    m_port_ranges_isSet = true;
}

bool OAINSXService::is_port_ranges_Set() const{
    return m_port_ranges_isSet;
}

bool OAINSXService::is_port_ranges_Valid() const{
    return m_port_ranges_isValid;
}

QString OAINSXService::getProtocol() const {
    return m_protocol;
}
void OAINSXService::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAINSXService::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAINSXService::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QList<OAIReference> OAINSXService::getNsxManagers() const {
    return m_nsx_managers;
}
void OAINSXService::setNsxManagers(const QList<OAIReference> &nsx_managers) {
    m_nsx_managers = nsx_managers;
    m_nsx_managers_isSet = true;
}

bool OAINSXService::is_nsx_managers_Set() const{
    return m_nsx_managers_isSet;
}

bool OAINSXService::is_nsx_managers_Valid() const{
    return m_nsx_managers_isValid;
}

OAIScopeEnum OAINSXService::getScope() const {
    return m_scope;
}
void OAINSXService::setScope(const OAIScopeEnum &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAINSXService::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAINSXService::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAINSXService::getVendorId() const {
    return m_vendor_id;
}
void OAINSXService::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAINSXService::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAINSXService::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAINSXService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINSXService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
