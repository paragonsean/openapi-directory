/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetaEntityType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetaEntityType::OAIMetaEntityType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetaEntityType::OAIMetaEntityType() {
    this->initializeModel();
}

OAIMetaEntityType::~OAIMetaEntityType() {}

void OAIMetaEntityType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMetaEntityType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMetaEntityType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Group", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseSecurityGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASESECURITYGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseEvent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEEVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseVirtualMachine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEVIRTUALMACHINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseFirewallRule", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEFIREWALLRULE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseIPSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEIPSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseL2Network", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEL2NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseNSXManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASENSXMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseFirewall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEFIREWALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASESERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseServiceGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASESERVICEGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaseVnic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetaEntityType::BASEVNIC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMetaEntityType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMetaEntityType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMetaEntityType::GROUP:
            val = "Group";
            break;
        case eOAIMetaEntityType::BASESECURITYGROUP:
            val = "BaseSecurityGroup";
            break;
        case eOAIMetaEntityType::BASEEVENT:
            val = "BaseEvent";
            break;
        case eOAIMetaEntityType::BASEVIRTUALMACHINE:
            val = "BaseVirtualMachine";
            break;
        case eOAIMetaEntityType::BASEFIREWALLRULE:
            val = "BaseFirewallRule";
            break;
        case eOAIMetaEntityType::BASEIPSET:
            val = "BaseIPSet";
            break;
        case eOAIMetaEntityType::BASEL2NETWORK:
            val = "BaseL2Network";
            break;
        case eOAIMetaEntityType::BASEMANAGER:
            val = "BaseManager";
            break;
        case eOAIMetaEntityType::BASENSXMANAGER:
            val = "BaseNSXManager";
            break;
        case eOAIMetaEntityType::BASEFIREWALL:
            val = "BaseFirewall";
            break;
        case eOAIMetaEntityType::BASESERVICE:
            val = "BaseService";
            break;
        case eOAIMetaEntityType::BASESERVICEGROUP:
            val = "BaseServiceGroup";
            break;
        case eOAIMetaEntityType::BASEVNIC:
            val = "BaseVnic";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMetaEntityType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMetaEntityType::eOAIMetaEntityType OAIMetaEntityType::getValue() const {
    return m_value;
}

void OAIMetaEntityType::setValue(const OAIMetaEntityType::eOAIMetaEntityType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMetaEntityType::isSet() const {
    
    return m_value_isSet;
}

bool OAIMetaEntityType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
