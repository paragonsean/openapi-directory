/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHost.h
 *
 * 
 */

#ifndef OAIHost_H
#define OAIHost_H

#include <QJsonObject>

#include "OAIBaseEntity.h"
#include "OAIEntityType.h"
#include "OAIReference.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReference;

class OAIHost : public OAIObject {
public:
    OAIHost();
    OAIHost(QString json);
    ~OAIHost() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    OAIEntityType getEntityType() const;
    void setEntityType(const OAIEntityType &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIReference getCluster() const;
    void setCluster(const OAIReference &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    QString getConnectionState() const;
    void setConnectionState(const QString &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QList<OAIReference> getDatastores() const;
    void setDatastores(const QList<OAIReference> &datastores);
    bool is_datastores_Set() const;
    bool is_datastores_Valid() const;

    QString getMaintenanceMode() const;
    void setMaintenanceMode(const QString &maintenance_mode);
    bool is_maintenance_mode_Set() const;
    bool is_maintenance_mode_Valid() const;

    OAIReference getNsxManager() const;
    void setNsxManager(const OAIReference &nsx_manager);
    bool is_nsx_manager_Set() const;
    bool is_nsx_manager_Valid() const;

    QString getServiceTag() const;
    void setServiceTag(const QString &service_tag);
    bool is_service_tag_Set() const;
    bool is_service_tag_Valid() const;

    OAIReference getVcenterManager() const;
    void setVcenterManager(const OAIReference &vcenter_manager);
    bool is_vcenter_manager_Set() const;
    bool is_vcenter_manager_Valid() const;

    QString getVendorId() const;
    void setVendorId(const QString &vendor_id);
    bool is_vendor_id_Set() const;
    bool is_vendor_id_Valid() const;

    qint32 getVmCount() const;
    void setVmCount(const qint32 &vm_count);
    bool is_vm_count_Set() const;
    bool is_vm_count_Valid() const;

    QList<OAIReference> getVmknics() const;
    void setVmknics(const QList<OAIReference> &vmknics);
    bool is_vmknics_Set() const;
    bool is_vmknics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    OAIEntityType m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIReference m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    QString m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QList<OAIReference> m_datastores;
    bool m_datastores_isSet;
    bool m_datastores_isValid;

    QString m_maintenance_mode;
    bool m_maintenance_mode_isSet;
    bool m_maintenance_mode_isValid;

    OAIReference m_nsx_manager;
    bool m_nsx_manager_isSet;
    bool m_nsx_manager_isValid;

    QString m_service_tag;
    bool m_service_tag_isSet;
    bool m_service_tag_isValid;

    OAIReference m_vcenter_manager;
    bool m_vcenter_manager_isSet;
    bool m_vcenter_manager_isValid;

    QString m_vendor_id;
    bool m_vendor_id_isSet;
    bool m_vendor_id_isValid;

    qint32 m_vm_count;
    bool m_vm_count_isSet;
    bool m_vm_count_isValid;

    QList<OAIReference> m_vmknics;
    bool m_vmknics_isSet;
    bool m_vmknics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHost)

#endif // OAIHost_H
