/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachine::OAIVirtualMachine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachine::OAIVirtualMachine() {
    this->initializeModel();
}

OAIVirtualMachine::~OAIVirtualMachine() {}

void OAIVirtualMachine::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_destination_firewall_rules_isSet = false;
    m_destination_firewall_rules_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_ip_sets_isSet = false;
    m_ip_sets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_source_firewall_rules_isSet = false;
    m_source_firewall_rules_isValid = false;

    m_vnics_isSet = false;
    m_vnics_isValid = false;

    m_applied_to_destination_rules_isSet = false;
    m_applied_to_destination_rules_isValid = false;

    m_applied_to_source_rules_isSet = false;
    m_applied_to_source_rules_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_datacenter_isSet = false;
    m_datacenter_isValid = false;

    m_datastores_isSet = false;
    m_datastores_isValid = false;

    m_destination_inversion_rules_isSet = false;
    m_destination_inversion_rules_isValid = false;

    m_folders_isSet = false;
    m_folders_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_layer2_networks_isSet = false;
    m_layer2_networks_isValid = false;

    m_nsx_manager_isSet = false;
    m_nsx_manager_isValid = false;

    m_resource_pool_isSet = false;
    m_resource_pool_isValid = false;

    m_security_tags_isSet = false;
    m_security_tags_isValid = false;

    m_source_inversion_rules_isSet = false;
    m_source_inversion_rules_isValid = false;

    m_vcenter_manager_isSet = false;
    m_vcenter_manager_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_vlans_isSet = false;
    m_vlans_isValid = false;
}

void OAIVirtualMachine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachine::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("default_gateway")]);
    m_default_gateway_isSet = !json[QString("default_gateway")].isNull() && m_default_gateway_isValid;

    m_destination_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_destination_firewall_rules, json[QString("destination_firewall_rules")]);
    m_destination_firewall_rules_isSet = !json[QString("destination_firewall_rules")].isNull() && m_destination_firewall_rules_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ip_addresses")]);
    m_ip_addresses_isSet = !json[QString("ip_addresses")].isNull() && m_ip_addresses_isValid;

    m_ip_sets_isValid = ::OpenAPI::fromJsonValue(m_ip_sets, json[QString("ip_sets")]);
    m_ip_sets_isSet = !json[QString("ip_sets")].isNull() && m_ip_sets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("security_groups")]);
    m_security_groups_isSet = !json[QString("security_groups")].isNull() && m_security_groups_isValid;

    m_source_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_source_firewall_rules, json[QString("source_firewall_rules")]);
    m_source_firewall_rules_isSet = !json[QString("source_firewall_rules")].isNull() && m_source_firewall_rules_isValid;

    m_vnics_isValid = ::OpenAPI::fromJsonValue(m_vnics, json[QString("vnics")]);
    m_vnics_isSet = !json[QString("vnics")].isNull() && m_vnics_isValid;

    m_applied_to_destination_rules_isValid = ::OpenAPI::fromJsonValue(m_applied_to_destination_rules, json[QString("applied_to_destination_rules")]);
    m_applied_to_destination_rules_isSet = !json[QString("applied_to_destination_rules")].isNull() && m_applied_to_destination_rules_isValid;

    m_applied_to_source_rules_isValid = ::OpenAPI::fromJsonValue(m_applied_to_source_rules, json[QString("applied_to_source_rules")]);
    m_applied_to_source_rules_isSet = !json[QString("applied_to_source_rules")].isNull() && m_applied_to_source_rules_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_datacenter_isValid = ::OpenAPI::fromJsonValue(m_datacenter, json[QString("datacenter")]);
    m_datacenter_isSet = !json[QString("datacenter")].isNull() && m_datacenter_isValid;

    m_datastores_isValid = ::OpenAPI::fromJsonValue(m_datastores, json[QString("datastores")]);
    m_datastores_isSet = !json[QString("datastores")].isNull() && m_datastores_isValid;

    m_destination_inversion_rules_isValid = ::OpenAPI::fromJsonValue(m_destination_inversion_rules, json[QString("destination_inversion_rules")]);
    m_destination_inversion_rules_isSet = !json[QString("destination_inversion_rules")].isNull() && m_destination_inversion_rules_isValid;

    m_folders_isValid = ::OpenAPI::fromJsonValue(m_folders, json[QString("folders")]);
    m_folders_isSet = !json[QString("folders")].isNull() && m_folders_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_layer2_networks_isValid = ::OpenAPI::fromJsonValue(m_layer2_networks, json[QString("layer2_networks")]);
    m_layer2_networks_isSet = !json[QString("layer2_networks")].isNull() && m_layer2_networks_isValid;

    m_nsx_manager_isValid = ::OpenAPI::fromJsonValue(m_nsx_manager, json[QString("nsx_manager")]);
    m_nsx_manager_isSet = !json[QString("nsx_manager")].isNull() && m_nsx_manager_isValid;

    m_resource_pool_isValid = ::OpenAPI::fromJsonValue(m_resource_pool, json[QString("resource_pool")]);
    m_resource_pool_isSet = !json[QString("resource_pool")].isNull() && m_resource_pool_isValid;

    m_security_tags_isValid = ::OpenAPI::fromJsonValue(m_security_tags, json[QString("security_tags")]);
    m_security_tags_isSet = !json[QString("security_tags")].isNull() && m_security_tags_isValid;

    m_source_inversion_rules_isValid = ::OpenAPI::fromJsonValue(m_source_inversion_rules, json[QString("source_inversion_rules")]);
    m_source_inversion_rules_isSet = !json[QString("source_inversion_rules")].isNull() && m_source_inversion_rules_isValid;

    m_vcenter_manager_isValid = ::OpenAPI::fromJsonValue(m_vcenter_manager, json[QString("vcenter_manager")]);
    m_vcenter_manager_isSet = !json[QString("vcenter_manager")].isNull() && m_vcenter_manager_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_vlans_isValid = ::OpenAPI::fromJsonValue(m_vlans, json[QString("vlans")]);
    m_vlans_isSet = !json[QString("vlans")].isNull() && m_vlans_isValid;
}

QString OAIVirtualMachine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachine::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_gateway_isSet) {
        obj.insert(QString("default_gateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_destination_firewall_rules.size() > 0) {
        obj.insert(QString("destination_firewall_rules"), ::OpenAPI::toJsonValue(m_destination_firewall_rules));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ip_addresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_ip_sets.size() > 0) {
        obj.insert(QString("ip_sets"), ::OpenAPI::toJsonValue(m_ip_sets));
    }
    if (m_security_groups.size() > 0) {
        obj.insert(QString("security_groups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_source_firewall_rules.size() > 0) {
        obj.insert(QString("source_firewall_rules"), ::OpenAPI::toJsonValue(m_source_firewall_rules));
    }
    if (m_vnics.size() > 0) {
        obj.insert(QString("vnics"), ::OpenAPI::toJsonValue(m_vnics));
    }
    if (m_applied_to_destination_rules.size() > 0) {
        obj.insert(QString("applied_to_destination_rules"), ::OpenAPI::toJsonValue(m_applied_to_destination_rules));
    }
    if (m_applied_to_source_rules.size() > 0) {
        obj.insert(QString("applied_to_source_rules"), ::OpenAPI::toJsonValue(m_applied_to_source_rules));
    }
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_datacenter.isSet()) {
        obj.insert(QString("datacenter"), ::OpenAPI::toJsonValue(m_datacenter));
    }
    if (m_datastores.size() > 0) {
        obj.insert(QString("datastores"), ::OpenAPI::toJsonValue(m_datastores));
    }
    if (m_destination_inversion_rules.size() > 0) {
        obj.insert(QString("destination_inversion_rules"), ::OpenAPI::toJsonValue(m_destination_inversion_rules));
    }
    if (m_folders.size() > 0) {
        obj.insert(QString("folders"), ::OpenAPI::toJsonValue(m_folders));
    }
    if (m_host.isSet()) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_layer2_networks.size() > 0) {
        obj.insert(QString("layer2_networks"), ::OpenAPI::toJsonValue(m_layer2_networks));
    }
    if (m_nsx_manager.isSet()) {
        obj.insert(QString("nsx_manager"), ::OpenAPI::toJsonValue(m_nsx_manager));
    }
    if (m_resource_pool.isSet()) {
        obj.insert(QString("resource_pool"), ::OpenAPI::toJsonValue(m_resource_pool));
    }
    if (m_security_tags.size() > 0) {
        obj.insert(QString("security_tags"), ::OpenAPI::toJsonValue(m_security_tags));
    }
    if (m_source_inversion_rules.size() > 0) {
        obj.insert(QString("source_inversion_rules"), ::OpenAPI::toJsonValue(m_source_inversion_rules));
    }
    if (m_vcenter_manager.isSet()) {
        obj.insert(QString("vcenter_manager"), ::OpenAPI::toJsonValue(m_vcenter_manager));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_vlans.size() > 0) {
        obj.insert(QString("vlans"), ::OpenAPI::toJsonValue(m_vlans));
    }
    return obj;
}

QString OAIVirtualMachine::getEntityId() const {
    return m_entity_id;
}
void OAIVirtualMachine::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIVirtualMachine::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIVirtualMachine::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIVirtualMachine::getEntityType() const {
    return m_entity_type;
}
void OAIVirtualMachine::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIVirtualMachine::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIVirtualMachine::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIVirtualMachine::getName() const {
    return m_name;
}
void OAIVirtualMachine::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVirtualMachine::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVirtualMachine::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVirtualMachine::getDefaultGateway() const {
    return m_default_gateway;
}
void OAIVirtualMachine::setDefaultGateway(const QString &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAIVirtualMachine::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAIVirtualMachine::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getDestinationFirewallRules() const {
    return m_destination_firewall_rules;
}
void OAIVirtualMachine::setDestinationFirewallRules(const QList<OAIRuleSet> &destination_firewall_rules) {
    m_destination_firewall_rules = destination_firewall_rules;
    m_destination_firewall_rules_isSet = true;
}

bool OAIVirtualMachine::is_destination_firewall_rules_Set() const{
    return m_destination_firewall_rules_isSet;
}

bool OAIVirtualMachine::is_destination_firewall_rules_Valid() const{
    return m_destination_firewall_rules_isValid;
}

QList<OAIIpV4Address> OAIVirtualMachine::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIVirtualMachine::setIpAddresses(const QList<OAIIpV4Address> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIVirtualMachine::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIVirtualMachine::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList<OAIReference> OAIVirtualMachine::getIpSets() const {
    return m_ip_sets;
}
void OAIVirtualMachine::setIpSets(const QList<OAIReference> &ip_sets) {
    m_ip_sets = ip_sets;
    m_ip_sets_isSet = true;
}

bool OAIVirtualMachine::is_ip_sets_Set() const{
    return m_ip_sets_isSet;
}

bool OAIVirtualMachine::is_ip_sets_Valid() const{
    return m_ip_sets_isValid;
}

QList<OAIReference> OAIVirtualMachine::getSecurityGroups() const {
    return m_security_groups;
}
void OAIVirtualMachine::setSecurityGroups(const QList<OAIReference> &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIVirtualMachine::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIVirtualMachine::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getSourceFirewallRules() const {
    return m_source_firewall_rules;
}
void OAIVirtualMachine::setSourceFirewallRules(const QList<OAIRuleSet> &source_firewall_rules) {
    m_source_firewall_rules = source_firewall_rules;
    m_source_firewall_rules_isSet = true;
}

bool OAIVirtualMachine::is_source_firewall_rules_Set() const{
    return m_source_firewall_rules_isSet;
}

bool OAIVirtualMachine::is_source_firewall_rules_Valid() const{
    return m_source_firewall_rules_isValid;
}

QList<OAIReference> OAIVirtualMachine::getVnics() const {
    return m_vnics;
}
void OAIVirtualMachine::setVnics(const QList<OAIReference> &vnics) {
    m_vnics = vnics;
    m_vnics_isSet = true;
}

bool OAIVirtualMachine::is_vnics_Set() const{
    return m_vnics_isSet;
}

bool OAIVirtualMachine::is_vnics_Valid() const{
    return m_vnics_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getAppliedToDestinationRules() const {
    return m_applied_to_destination_rules;
}
void OAIVirtualMachine::setAppliedToDestinationRules(const QList<OAIRuleSet> &applied_to_destination_rules) {
    m_applied_to_destination_rules = applied_to_destination_rules;
    m_applied_to_destination_rules_isSet = true;
}

bool OAIVirtualMachine::is_applied_to_destination_rules_Set() const{
    return m_applied_to_destination_rules_isSet;
}

bool OAIVirtualMachine::is_applied_to_destination_rules_Valid() const{
    return m_applied_to_destination_rules_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getAppliedToSourceRules() const {
    return m_applied_to_source_rules;
}
void OAIVirtualMachine::setAppliedToSourceRules(const QList<OAIRuleSet> &applied_to_source_rules) {
    m_applied_to_source_rules = applied_to_source_rules;
    m_applied_to_source_rules_isSet = true;
}

bool OAIVirtualMachine::is_applied_to_source_rules_Set() const{
    return m_applied_to_source_rules_isSet;
}

bool OAIVirtualMachine::is_applied_to_source_rules_Valid() const{
    return m_applied_to_source_rules_isValid;
}

OAIReference OAIVirtualMachine::getCluster() const {
    return m_cluster;
}
void OAIVirtualMachine::setCluster(const OAIReference &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIVirtualMachine::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIVirtualMachine::is_cluster_Valid() const{
    return m_cluster_isValid;
}

OAIReference OAIVirtualMachine::getDatacenter() const {
    return m_datacenter;
}
void OAIVirtualMachine::setDatacenter(const OAIReference &datacenter) {
    m_datacenter = datacenter;
    m_datacenter_isSet = true;
}

bool OAIVirtualMachine::is_datacenter_Set() const{
    return m_datacenter_isSet;
}

bool OAIVirtualMachine::is_datacenter_Valid() const{
    return m_datacenter_isValid;
}

QList<OAIReference> OAIVirtualMachine::getDatastores() const {
    return m_datastores;
}
void OAIVirtualMachine::setDatastores(const QList<OAIReference> &datastores) {
    m_datastores = datastores;
    m_datastores_isSet = true;
}

bool OAIVirtualMachine::is_datastores_Set() const{
    return m_datastores_isSet;
}

bool OAIVirtualMachine::is_datastores_Valid() const{
    return m_datastores_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getDestinationInversionRules() const {
    return m_destination_inversion_rules;
}
void OAIVirtualMachine::setDestinationInversionRules(const QList<OAIRuleSet> &destination_inversion_rules) {
    m_destination_inversion_rules = destination_inversion_rules;
    m_destination_inversion_rules_isSet = true;
}

bool OAIVirtualMachine::is_destination_inversion_rules_Set() const{
    return m_destination_inversion_rules_isSet;
}

bool OAIVirtualMachine::is_destination_inversion_rules_Valid() const{
    return m_destination_inversion_rules_isValid;
}

QList<OAIReference> OAIVirtualMachine::getFolders() const {
    return m_folders;
}
void OAIVirtualMachine::setFolders(const QList<OAIReference> &folders) {
    m_folders = folders;
    m_folders_isSet = true;
}

bool OAIVirtualMachine::is_folders_Set() const{
    return m_folders_isSet;
}

bool OAIVirtualMachine::is_folders_Valid() const{
    return m_folders_isValid;
}

OAIReference OAIVirtualMachine::getHost() const {
    return m_host;
}
void OAIVirtualMachine::setHost(const OAIReference &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIVirtualMachine::is_host_Set() const{
    return m_host_isSet;
}

bool OAIVirtualMachine::is_host_Valid() const{
    return m_host_isValid;
}

QList<OAIReference> OAIVirtualMachine::getLayer2Networks() const {
    return m_layer2_networks;
}
void OAIVirtualMachine::setLayer2Networks(const QList<OAIReference> &layer2_networks) {
    m_layer2_networks = layer2_networks;
    m_layer2_networks_isSet = true;
}

bool OAIVirtualMachine::is_layer2_networks_Set() const{
    return m_layer2_networks_isSet;
}

bool OAIVirtualMachine::is_layer2_networks_Valid() const{
    return m_layer2_networks_isValid;
}

OAIReference OAIVirtualMachine::getNsxManager() const {
    return m_nsx_manager;
}
void OAIVirtualMachine::setNsxManager(const OAIReference &nsx_manager) {
    m_nsx_manager = nsx_manager;
    m_nsx_manager_isSet = true;
}

bool OAIVirtualMachine::is_nsx_manager_Set() const{
    return m_nsx_manager_isSet;
}

bool OAIVirtualMachine::is_nsx_manager_Valid() const{
    return m_nsx_manager_isValid;
}

OAIReference OAIVirtualMachine::getResourcePool() const {
    return m_resource_pool;
}
void OAIVirtualMachine::setResourcePool(const OAIReference &resource_pool) {
    m_resource_pool = resource_pool;
    m_resource_pool_isSet = true;
}

bool OAIVirtualMachine::is_resource_pool_Set() const{
    return m_resource_pool_isSet;
}

bool OAIVirtualMachine::is_resource_pool_Valid() const{
    return m_resource_pool_isValid;
}

QList<OAIReference> OAIVirtualMachine::getSecurityTags() const {
    return m_security_tags;
}
void OAIVirtualMachine::setSecurityTags(const QList<OAIReference> &security_tags) {
    m_security_tags = security_tags;
    m_security_tags_isSet = true;
}

bool OAIVirtualMachine::is_security_tags_Set() const{
    return m_security_tags_isSet;
}

bool OAIVirtualMachine::is_security_tags_Valid() const{
    return m_security_tags_isValid;
}

QList<OAIRuleSet> OAIVirtualMachine::getSourceInversionRules() const {
    return m_source_inversion_rules;
}
void OAIVirtualMachine::setSourceInversionRules(const QList<OAIRuleSet> &source_inversion_rules) {
    m_source_inversion_rules = source_inversion_rules;
    m_source_inversion_rules_isSet = true;
}

bool OAIVirtualMachine::is_source_inversion_rules_Set() const{
    return m_source_inversion_rules_isSet;
}

bool OAIVirtualMachine::is_source_inversion_rules_Valid() const{
    return m_source_inversion_rules_isValid;
}

OAIReference OAIVirtualMachine::getVcenterManager() const {
    return m_vcenter_manager;
}
void OAIVirtualMachine::setVcenterManager(const OAIReference &vcenter_manager) {
    m_vcenter_manager = vcenter_manager;
    m_vcenter_manager_isSet = true;
}

bool OAIVirtualMachine::is_vcenter_manager_Set() const{
    return m_vcenter_manager_isSet;
}

bool OAIVirtualMachine::is_vcenter_manager_Valid() const{
    return m_vcenter_manager_isValid;
}

QString OAIVirtualMachine::getVendorId() const {
    return m_vendor_id;
}
void OAIVirtualMachine::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIVirtualMachine::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIVirtualMachine::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

QList<OAIVlan> OAIVirtualMachine::getVlans() const {
    return m_vlans;
}
void OAIVirtualMachine::setVlans(const QList<OAIVlan> &vlans) {
    m_vlans = vlans;
    m_vlans_isSet = true;
}

bool OAIVirtualMachine::is_vlans_Set() const{
    return m_vlans_isSet;
}

bool OAIVirtualMachine::is_vlans_Valid() const{
    return m_vlans_isValid;
}

bool OAIVirtualMachine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_to_destination_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_to_source_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_inversion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer2_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_inversion_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlans.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
