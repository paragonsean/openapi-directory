/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseDataSourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseDataSourceRequest::OAIBaseDataSourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseDataSourceRequest::OAIBaseDataSourceRequest() {
    this->initializeModel();
}

OAIBaseDataSourceRequest::~OAIBaseDataSourceRequest() {}

void OAIBaseDataSourceRequest::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_proxy_id_isSet = false;
    m_proxy_id_isValid = false;
}

void OAIBaseDataSourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseDataSourceRequest::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_proxy_id_isValid = ::OpenAPI::fromJsonValue(m_proxy_id, json[QString("proxy_id")]);
    m_proxy_id_isSet = !json[QString("proxy_id")].isNull() && m_proxy_id_isValid;
}

QString OAIBaseDataSourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseDataSourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_proxy_id_isSet) {
        obj.insert(QString("proxy_id"), ::OpenAPI::toJsonValue(m_proxy_id));
    }
    return obj;
}

bool OAIBaseDataSourceRequest::isEnabled() const {
    return m_enabled;
}
void OAIBaseDataSourceRequest::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBaseDataSourceRequest::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBaseDataSourceRequest::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIBaseDataSourceRequest::getFqdn() const {
    return m_fqdn;
}
void OAIBaseDataSourceRequest::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIBaseDataSourceRequest::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIBaseDataSourceRequest::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIBaseDataSourceRequest::getIp() const {
    return m_ip;
}
void OAIBaseDataSourceRequest::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIBaseDataSourceRequest::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIBaseDataSourceRequest::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIBaseDataSourceRequest::getNickname() const {
    return m_nickname;
}
void OAIBaseDataSourceRequest::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIBaseDataSourceRequest::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIBaseDataSourceRequest::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIBaseDataSourceRequest::getNotes() const {
    return m_notes;
}
void OAIBaseDataSourceRequest::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBaseDataSourceRequest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBaseDataSourceRequest::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIBaseDataSourceRequest::getProxyId() const {
    return m_proxy_id;
}
void OAIBaseDataSourceRequest::setProxyId(const QString &proxy_id) {
    m_proxy_id = proxy_id;
    m_proxy_id_isSet = true;
}

bool OAIBaseDataSourceRequest::is_proxy_id_Set() const{
    return m_proxy_id_isSet;
}

bool OAIBaseDataSourceRequest::is_proxy_id_Valid() const{
    return m_proxy_id_isValid;
}

bool OAIBaseDataSourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseDataSourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_nickname_isValid && m_proxy_id_isValid && true;
}

} // namespace OpenAPI
