/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVCenterManager.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVCenterManager::OAIVCenterManager(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVCenterManager::OAIVCenterManager() {
    this->initializeModel();
}

OAIVCenterManager::~OAIVCenterManager() {}

void OAIVCenterManager::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_nsx_manager_isSet = false;
    m_nsx_manager_isValid = false;

    m_vm_isSet = false;
    m_vm_isValid = false;
}

void OAIVCenterManager::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVCenterManager::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_nsx_manager_isValid = ::OpenAPI::fromJsonValue(m_nsx_manager, json[QString("nsx_manager")]);
    m_nsx_manager_isSet = !json[QString("nsx_manager")].isNull() && m_nsx_manager_isValid;

    m_vm_isValid = ::OpenAPI::fromJsonValue(m_vm, json[QString("vm")]);
    m_vm_isSet = !json[QString("vm")].isNull() && m_vm_isValid;
}

QString OAIVCenterManager::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVCenterManager::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_ip_address.isSet()) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_nsx_manager.isSet()) {
        obj.insert(QString("nsx_manager"), ::OpenAPI::toJsonValue(m_nsx_manager));
    }
    if (m_vm.isSet()) {
        obj.insert(QString("vm"), ::OpenAPI::toJsonValue(m_vm));
    }
    return obj;
}

QString OAIVCenterManager::getEntityId() const {
    return m_entity_id;
}
void OAIVCenterManager::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIVCenterManager::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIVCenterManager::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIVCenterManager::getEntityType() const {
    return m_entity_type;
}
void OAIVCenterManager::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIVCenterManager::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIVCenterManager::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIVCenterManager::getName() const {
    return m_name;
}
void OAIVCenterManager::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVCenterManager::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVCenterManager::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVCenterManager::getFqdn() const {
    return m_fqdn;
}
void OAIVCenterManager::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIVCenterManager::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIVCenterManager::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

OAIIpV4Address OAIVCenterManager::getIpAddress() const {
    return m_ip_address;
}
void OAIVCenterManager::setIpAddress(const OAIIpV4Address &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVCenterManager::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVCenterManager::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAIReference OAIVCenterManager::getNsxManager() const {
    return m_nsx_manager;
}
void OAIVCenterManager::setNsxManager(const OAIReference &nsx_manager) {
    m_nsx_manager = nsx_manager;
    m_nsx_manager_isSet = true;
}

bool OAIVCenterManager::is_nsx_manager_Set() const{
    return m_nsx_manager_isSet;
}

bool OAIVCenterManager::is_nsx_manager_Valid() const{
    return m_nsx_manager_isValid;
}

OAIReference OAIVCenterManager::getVm() const {
    return m_vm;
}
void OAIVCenterManager::setVm(const OAIReference &vm) {
    m_vm = vm;
    m_vm_isSet = true;
}

bool OAIVCenterManager::is_vm_Set() const{
    return m_vm_isSet;
}

bool OAIVCenterManager::is_vm_Valid() const{
    return m_vm_isValid;
}

bool OAIVCenterManager::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVCenterManager::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
