/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualMachine.h
 *
 * 
 */

#ifndef OAIVirtualMachine_H
#define OAIVirtualMachine_H

#include <QJsonObject>

#include "OAIBaseVirtualMachine.h"
#include "OAIEntityType.h"
#include "OAIIpV4Address.h"
#include "OAIReference.h"
#include "OAIRuleSet.h"
#include "OAIVlan.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleSet;
class OAIIpV4Address;
class OAIReference;
class OAIVlan;

class OAIVirtualMachine : public OAIObject {
public:
    OAIVirtualMachine();
    OAIVirtualMachine(QString json);
    ~OAIVirtualMachine() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    OAIEntityType getEntityType() const;
    void setEntityType(const OAIEntityType &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDefaultGateway() const;
    void setDefaultGateway(const QString &default_gateway);
    bool is_default_gateway_Set() const;
    bool is_default_gateway_Valid() const;

    QList<OAIRuleSet> getDestinationFirewallRules() const;
    void setDestinationFirewallRules(const QList<OAIRuleSet> &destination_firewall_rules);
    bool is_destination_firewall_rules_Set() const;
    bool is_destination_firewall_rules_Valid() const;

    QList<OAIIpV4Address> getIpAddresses() const;
    void setIpAddresses(const QList<OAIIpV4Address> &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    QList<OAIReference> getIpSets() const;
    void setIpSets(const QList<OAIReference> &ip_sets);
    bool is_ip_sets_Set() const;
    bool is_ip_sets_Valid() const;

    QList<OAIReference> getSecurityGroups() const;
    void setSecurityGroups(const QList<OAIReference> &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    QList<OAIRuleSet> getSourceFirewallRules() const;
    void setSourceFirewallRules(const QList<OAIRuleSet> &source_firewall_rules);
    bool is_source_firewall_rules_Set() const;
    bool is_source_firewall_rules_Valid() const;

    QList<OAIReference> getVnics() const;
    void setVnics(const QList<OAIReference> &vnics);
    bool is_vnics_Set() const;
    bool is_vnics_Valid() const;

    QList<OAIRuleSet> getAppliedToDestinationRules() const;
    void setAppliedToDestinationRules(const QList<OAIRuleSet> &applied_to_destination_rules);
    bool is_applied_to_destination_rules_Set() const;
    bool is_applied_to_destination_rules_Valid() const;

    QList<OAIRuleSet> getAppliedToSourceRules() const;
    void setAppliedToSourceRules(const QList<OAIRuleSet> &applied_to_source_rules);
    bool is_applied_to_source_rules_Set() const;
    bool is_applied_to_source_rules_Valid() const;

    OAIReference getCluster() const;
    void setCluster(const OAIReference &cluster);
    bool is_cluster_Set() const;
    bool is_cluster_Valid() const;

    OAIReference getDatacenter() const;
    void setDatacenter(const OAIReference &datacenter);
    bool is_datacenter_Set() const;
    bool is_datacenter_Valid() const;

    QList<OAIReference> getDatastores() const;
    void setDatastores(const QList<OAIReference> &datastores);
    bool is_datastores_Set() const;
    bool is_datastores_Valid() const;

    QList<OAIRuleSet> getDestinationInversionRules() const;
    void setDestinationInversionRules(const QList<OAIRuleSet> &destination_inversion_rules);
    bool is_destination_inversion_rules_Set() const;
    bool is_destination_inversion_rules_Valid() const;

    QList<OAIReference> getFolders() const;
    void setFolders(const QList<OAIReference> &folders);
    bool is_folders_Set() const;
    bool is_folders_Valid() const;

    OAIReference getHost() const;
    void setHost(const OAIReference &host);
    bool is_host_Set() const;
    bool is_host_Valid() const;

    QList<OAIReference> getLayer2Networks() const;
    void setLayer2Networks(const QList<OAIReference> &layer2_networks);
    bool is_layer2_networks_Set() const;
    bool is_layer2_networks_Valid() const;

    OAIReference getNsxManager() const;
    void setNsxManager(const OAIReference &nsx_manager);
    bool is_nsx_manager_Set() const;
    bool is_nsx_manager_Valid() const;

    OAIReference getResourcePool() const;
    void setResourcePool(const OAIReference &resource_pool);
    bool is_resource_pool_Set() const;
    bool is_resource_pool_Valid() const;

    QList<OAIReference> getSecurityTags() const;
    void setSecurityTags(const QList<OAIReference> &security_tags);
    bool is_security_tags_Set() const;
    bool is_security_tags_Valid() const;

    QList<OAIRuleSet> getSourceInversionRules() const;
    void setSourceInversionRules(const QList<OAIRuleSet> &source_inversion_rules);
    bool is_source_inversion_rules_Set() const;
    bool is_source_inversion_rules_Valid() const;

    OAIReference getVcenterManager() const;
    void setVcenterManager(const OAIReference &vcenter_manager);
    bool is_vcenter_manager_Set() const;
    bool is_vcenter_manager_Valid() const;

    QString getVendorId() const;
    void setVendorId(const QString &vendor_id);
    bool is_vendor_id_Set() const;
    bool is_vendor_id_Valid() const;

    QList<OAIVlan> getVlans() const;
    void setVlans(const QList<OAIVlan> &vlans);
    bool is_vlans_Set() const;
    bool is_vlans_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    OAIEntityType m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_default_gateway;
    bool m_default_gateway_isSet;
    bool m_default_gateway_isValid;

    QList<OAIRuleSet> m_destination_firewall_rules;
    bool m_destination_firewall_rules_isSet;
    bool m_destination_firewall_rules_isValid;

    QList<OAIIpV4Address> m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QList<OAIReference> m_ip_sets;
    bool m_ip_sets_isSet;
    bool m_ip_sets_isValid;

    QList<OAIReference> m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    QList<OAIRuleSet> m_source_firewall_rules;
    bool m_source_firewall_rules_isSet;
    bool m_source_firewall_rules_isValid;

    QList<OAIReference> m_vnics;
    bool m_vnics_isSet;
    bool m_vnics_isValid;

    QList<OAIRuleSet> m_applied_to_destination_rules;
    bool m_applied_to_destination_rules_isSet;
    bool m_applied_to_destination_rules_isValid;

    QList<OAIRuleSet> m_applied_to_source_rules;
    bool m_applied_to_source_rules_isSet;
    bool m_applied_to_source_rules_isValid;

    OAIReference m_cluster;
    bool m_cluster_isSet;
    bool m_cluster_isValid;

    OAIReference m_datacenter;
    bool m_datacenter_isSet;
    bool m_datacenter_isValid;

    QList<OAIReference> m_datastores;
    bool m_datastores_isSet;
    bool m_datastores_isValid;

    QList<OAIRuleSet> m_destination_inversion_rules;
    bool m_destination_inversion_rules_isSet;
    bool m_destination_inversion_rules_isValid;

    QList<OAIReference> m_folders;
    bool m_folders_isSet;
    bool m_folders_isValid;

    OAIReference m_host;
    bool m_host_isSet;
    bool m_host_isValid;

    QList<OAIReference> m_layer2_networks;
    bool m_layer2_networks_isSet;
    bool m_layer2_networks_isValid;

    OAIReference m_nsx_manager;
    bool m_nsx_manager_isSet;
    bool m_nsx_manager_isValid;

    OAIReference m_resource_pool;
    bool m_resource_pool_isSet;
    bool m_resource_pool_isValid;

    QList<OAIReference> m_security_tags;
    bool m_security_tags_isSet;
    bool m_security_tags_isValid;

    QList<OAIRuleSet> m_source_inversion_rules;
    bool m_source_inversion_rules_isSet;
    bool m_source_inversion_rules_isValid;

    OAIReference m_vcenter_manager;
    bool m_vcenter_manager_isSet;
    bool m_vcenter_manager_isValid;

    QString m_vendor_id;
    bool m_vendor_id_isSet;
    bool m_vendor_id_isValid;

    QList<OAIVlan> m_vlans;
    bool m_vlans_isSet;
    bool m_vlans_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualMachine)

#endif // OAIVirtualMachine_H
