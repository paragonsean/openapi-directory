/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSourceType::OAIDataSourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSourceType::OAIDataSourceType() {
    this->initializeModel();
}

OAIDataSourceType::~OAIDataSourceType() {}

void OAIDataSourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataSourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataSourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CiscoSwitchDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::CISCOSWITCHDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DellSwitchDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::DELLSWITCHDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AristaSwitchDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::ARISTASWITCHDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BrocadeSwitchDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::BROCADESWITCHDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JuniperSwitchDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::JUNIPERSWITCHDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VCenterDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::VCENTERDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NSXVManagerDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::NSXVMANAGERDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UCSManagerDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::UCSMANAGERDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HPVCManagerDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::HPVCMANAGERDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HPOneViewDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::HPONEVIEWDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PanFirewallDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::PANFIREWALLDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckpointFirewallDataSource", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataSourceType::CHECKPOINTFIREWALLDATASOURCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataSourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataSourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataSourceType::CISCOSWITCHDATASOURCE:
            val = "CiscoSwitchDataSource";
            break;
        case eOAIDataSourceType::DELLSWITCHDATASOURCE:
            val = "DellSwitchDataSource";
            break;
        case eOAIDataSourceType::ARISTASWITCHDATASOURCE:
            val = "AristaSwitchDataSource";
            break;
        case eOAIDataSourceType::BROCADESWITCHDATASOURCE:
            val = "BrocadeSwitchDataSource";
            break;
        case eOAIDataSourceType::JUNIPERSWITCHDATASOURCE:
            val = "JuniperSwitchDataSource";
            break;
        case eOAIDataSourceType::VCENTERDATASOURCE:
            val = "VCenterDataSource";
            break;
        case eOAIDataSourceType::NSXVMANAGERDATASOURCE:
            val = "NSXVManagerDataSource";
            break;
        case eOAIDataSourceType::UCSMANAGERDATASOURCE:
            val = "UCSManagerDataSource";
            break;
        case eOAIDataSourceType::HPVCMANAGERDATASOURCE:
            val = "HPVCManagerDataSource";
            break;
        case eOAIDataSourceType::HPONEVIEWDATASOURCE:
            val = "HPOneViewDataSource";
            break;
        case eOAIDataSourceType::PANFIREWALLDATASOURCE:
            val = "PanFirewallDataSource";
            break;
        case eOAIDataSourceType::CHECKPOINTFIREWALLDATASOURCE:
            val = "CheckpointFirewallDataSource";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataSourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataSourceType::eOAIDataSourceType OAIDataSourceType::getValue() const {
    return m_value;
}

void OAIDataSourceType::setValue(const OAIDataSourceType::eOAIDataSourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataSourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataSourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
