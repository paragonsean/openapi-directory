/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataSourcesApi_H
#define OAI_OAIDataSourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIAristaSwitchDataSource.h"
#include "OAIAristaSwitchDataSourceRequest.h"
#include "OAIBrocadeSwitchDataSource.h"
#include "OAIBrocadeSwitchDataSourceRequest.h"
#include "OAICheckpointFirewallDataSource.h"
#include "OAICheckpointFirewallDataSourceRequest.h"
#include "OAICiscoSwitchDataSource.h"
#include "OAICiscoSwitchDataSourceRequest.h"
#include "OAIDataSourceListResponse.h"
#include "OAIDellSwitchDataSource.h"
#include "OAIDellSwitchDataSourceRequest.h"
#include "OAIHPOneViewManagerDataSource.h"
#include "OAIHPOneViewManagerDataSourceRequest.h"
#include "OAIHPVCManagerDataSource.h"
#include "OAIHPVCManagerDataSourceRequest.h"
#include "OAIJuniperSwitchDataSource.h"
#include "OAIJuniperSwitchDataSourceRequest.h"
#include "OAINSXControllerDataCollection.h"
#include "OAINSXVManagerDataSource.h"
#include "OAINSXVManagerDataSourceRequest.h"
#include "OAIPanFirewallDataSource.h"
#include "OAIPanFirewallDataSourceRequest.h"
#include "OAISNMPConfig.h"
#include "OAIUCSManagerDataSource.h"
#include "OAIUCSManagerDataSourceRequest.h"
#include "OAIVCenterDataSource.h"
#include "OAIVCenterDataSourceRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataSourcesApi : public QObject {
    Q_OBJECT

public:
    OAIDataSourcesApi(const int timeOut = 0);
    ~OAIDataSourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_arista_switch_data_source_request OAIAristaSwitchDataSourceRequest [optional]
    */
    virtual void addAristaSwitch(const ::OpenAPI::OptionalParam<OAIAristaSwitchDataSourceRequest> &oai_arista_switch_data_source_request = ::OpenAPI::OptionalParam<OAIAristaSwitchDataSourceRequest>());

    /**
    * @param[in]  oai_brocade_switch_data_source_request OAIBrocadeSwitchDataSourceRequest [optional]
    */
    virtual void addBrocadeSwitch(const ::OpenAPI::OptionalParam<OAIBrocadeSwitchDataSourceRequest> &oai_brocade_switch_data_source_request = ::OpenAPI::OptionalParam<OAIBrocadeSwitchDataSourceRequest>());

    /**
    * @param[in]  oai_checkpoint_firewall_data_source_request OAICheckpointFirewallDataSourceRequest [optional]
    */
    virtual void addCheckpointFirewall(const ::OpenAPI::OptionalParam<OAICheckpointFirewallDataSourceRequest> &oai_checkpoint_firewall_data_source_request = ::OpenAPI::OptionalParam<OAICheckpointFirewallDataSourceRequest>());

    /**
    * @param[in]  oai_cisco_switch_data_source_request OAICiscoSwitchDataSourceRequest [optional]
    */
    virtual void addCiscoSwitch(const ::OpenAPI::OptionalParam<OAICiscoSwitchDataSourceRequest> &oai_cisco_switch_data_source_request = ::OpenAPI::OptionalParam<OAICiscoSwitchDataSourceRequest>());

    /**
    * @param[in]  oai_dell_switch_data_source_request OAIDellSwitchDataSourceRequest [optional]
    */
    virtual void addDellSwitch(const ::OpenAPI::OptionalParam<OAIDellSwitchDataSourceRequest> &oai_dell_switch_data_source_request = ::OpenAPI::OptionalParam<OAIDellSwitchDataSourceRequest>());

    /**
    * @param[in]  oaihp_one_view_manager_data_source_request OAIHPOneViewManagerDataSourceRequest [optional]
    */
    virtual void addHpovManager(const ::OpenAPI::OptionalParam<OAIHPOneViewManagerDataSourceRequest> &oaihp_one_view_manager_data_source_request = ::OpenAPI::OptionalParam<OAIHPOneViewManagerDataSourceRequest>());

    /**
    * @param[in]  oaihpvc_manager_data_source_request OAIHPVCManagerDataSourceRequest [optional]
    */
    virtual void addHpvcManager(const ::OpenAPI::OptionalParam<OAIHPVCManagerDataSourceRequest> &oaihpvc_manager_data_source_request = ::OpenAPI::OptionalParam<OAIHPVCManagerDataSourceRequest>());

    /**
    * @param[in]  oai_juniper_switch_data_source_request OAIJuniperSwitchDataSourceRequest [optional]
    */
    virtual void addJuniperSwitch(const ::OpenAPI::OptionalParam<OAIJuniperSwitchDataSourceRequest> &oai_juniper_switch_data_source_request = ::OpenAPI::OptionalParam<OAIJuniperSwitchDataSourceRequest>());

    /**
    * @param[in]  oainsxv_manager_data_source_request OAINSXVManagerDataSourceRequest [optional]
    */
    virtual void addNsxvManagerDatasource(const ::OpenAPI::OptionalParam<OAINSXVManagerDataSourceRequest> &oainsxv_manager_data_source_request = ::OpenAPI::OptionalParam<OAINSXVManagerDataSourceRequest>());

    /**
    * @param[in]  oai_pan_firewall_data_source_request OAIPanFirewallDataSourceRequest [optional]
    */
    virtual void addPanoramaFirewall(const ::OpenAPI::OptionalParam<OAIPanFirewallDataSourceRequest> &oai_pan_firewall_data_source_request = ::OpenAPI::OptionalParam<OAIPanFirewallDataSourceRequest>());

    /**
    * @param[in]  oaiucs_manager_data_source_request OAIUCSManagerDataSourceRequest [optional]
    */
    virtual void addUcsManager(const ::OpenAPI::OptionalParam<OAIUCSManagerDataSourceRequest> &oaiucs_manager_data_source_request = ::OpenAPI::OptionalParam<OAIUCSManagerDataSourceRequest>());

    /**
    * @param[in]  oaiv_center_data_source_request OAIVCenterDataSourceRequest [required]
    */
    virtual void addVcenterDatasource(const OAIVCenterDataSourceRequest &oaiv_center_data_source_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteAristaSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteBrocadeSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteCheckpointFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteCiscoSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteDellSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteHpovManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteHpvcManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteJuniperSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteNsxvManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deletePanoramaFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteUcsManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteVcenter(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableAristaSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableBrocadeSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableCheckpointFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableCiscoSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableDellSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableHpovManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableHpvcManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableJuniperSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableNsxvManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disablePanoramaFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableUcsManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void disableVcenter(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableAristaSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableBrocadeSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableCheckpointFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableCiscoSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableDellSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableHpovManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableHpvcManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableJuniperSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableNsxvManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enablePanoramaFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableUcsManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void enableVcenter(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAristaSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getAristaSwitchSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBrocadeSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getBrocadeSwitchSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCheckpointFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCiscoSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getCiscoSwitchSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDellSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getDellSwitchSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getHpovManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getHpvcManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getJuniperSwitch(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getJuniperSwitchSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getNsxvControllerCluster(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getNsxvManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPanoramaFirewall(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUcsManager(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUcsSnmpConfig(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getVcenter(const QString &id);


    virtual void listAristaSwitches();


    virtual void listBrocadeSwitches();


    virtual void listCheckpointFirewalls();


    virtual void listCiscoSwitches();


    virtual void listDellSwitches();


    virtual void listHpovManagers();


    virtual void listHpvcManagers();


    virtual void listJuniperSwitches();


    virtual void listNsxvManagers();


    virtual void listPanoramaFirewalls();


    virtual void listUcsManagers();


    virtual void listVcenters();

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_arista_switch_data_source OAIAristaSwitchDataSource [optional]
    */
    virtual void updateAristaSwitch(const QString &id, const ::OpenAPI::OptionalParam<OAIAristaSwitchDataSource> &oai_arista_switch_data_source = ::OpenAPI::OptionalParam<OAIAristaSwitchDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateAristaSwitchSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_brocade_switch_data_source OAIBrocadeSwitchDataSource [optional]
    */
    virtual void updateBrocadeSwitch(const QString &id, const ::OpenAPI::OptionalParam<OAIBrocadeSwitchDataSource> &oai_brocade_switch_data_source = ::OpenAPI::OptionalParam<OAIBrocadeSwitchDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateBrocadeSwitchSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_checkpoint_firewall_data_source OAICheckpointFirewallDataSource [optional]
    */
    virtual void updateCheckpointFirewall(const QString &id, const ::OpenAPI::OptionalParam<OAICheckpointFirewallDataSource> &oai_checkpoint_firewall_data_source = ::OpenAPI::OptionalParam<OAICheckpointFirewallDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_cisco_switch_data_source OAICiscoSwitchDataSource [optional]
    */
    virtual void updateCiscoSwitch(const QString &id, const ::OpenAPI::OptionalParam<OAICiscoSwitchDataSource> &oai_cisco_switch_data_source = ::OpenAPI::OptionalParam<OAICiscoSwitchDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateCiscoSwitchSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_dell_switch_data_source OAIDellSwitchDataSource [optional]
    */
    virtual void updateDellSwitch(const QString &id, const ::OpenAPI::OptionalParam<OAIDellSwitchDataSource> &oai_dell_switch_data_source = ::OpenAPI::OptionalParam<OAIDellSwitchDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateDellSwitchSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaihp_one_view_manager_data_source OAIHPOneViewManagerDataSource [optional]
    */
    virtual void updateHpovManager(const QString &id, const ::OpenAPI::OptionalParam<OAIHPOneViewManagerDataSource> &oaihp_one_view_manager_data_source = ::OpenAPI::OptionalParam<OAIHPOneViewManagerDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaihpvc_manager_data_source OAIHPVCManagerDataSource [optional]
    */
    virtual void updateHpvcManager(const QString &id, const ::OpenAPI::OptionalParam<OAIHPVCManagerDataSource> &oaihpvc_manager_data_source = ::OpenAPI::OptionalParam<OAIHPVCManagerDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_juniper_switch_data_source OAIJuniperSwitchDataSource [optional]
    */
    virtual void updateJuniperSwitch(const QString &id, const ::OpenAPI::OptionalParam<OAIJuniperSwitchDataSource> &oai_juniper_switch_data_source = ::OpenAPI::OptionalParam<OAIJuniperSwitchDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateJuniperSwitchSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oainsx_controller_data_collection OAINSXControllerDataCollection [optional]
    */
    virtual void updateNsxvControllerCluster(const QString &id, const ::OpenAPI::OptionalParam<OAINSXControllerDataCollection> &oainsx_controller_data_collection = ::OpenAPI::OptionalParam<OAINSXControllerDataCollection>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oainsxv_manager_data_source OAINSXVManagerDataSource [optional]
    */
    virtual void updateNsxvManager(const QString &id, const ::OpenAPI::OptionalParam<OAINSXVManagerDataSource> &oainsxv_manager_data_source = ::OpenAPI::OptionalParam<OAINSXVManagerDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_pan_firewall_data_source OAIPanFirewallDataSource [optional]
    */
    virtual void updatePanoramaFirewall(const QString &id, const ::OpenAPI::OptionalParam<OAIPanFirewallDataSource> &oai_pan_firewall_data_source = ::OpenAPI::OptionalParam<OAIPanFirewallDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaiucs_manager_data_source OAIUCSManagerDataSource [optional]
    */
    virtual void updateUcsManager(const QString &id, const ::OpenAPI::OptionalParam<OAIUCSManagerDataSource> &oaiucs_manager_data_source = ::OpenAPI::OptionalParam<OAIUCSManagerDataSource>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaisnmp_config OAISNMPConfig [optional]
    */
    virtual void updateUcsSnmpConfig(const QString &id, const ::OpenAPI::OptionalParam<OAISNMPConfig> &oaisnmp_config = ::OpenAPI::OptionalParam<OAISNMPConfig>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaiv_center_data_source OAIVCenterDataSource [optional]
    */
    virtual void updateVcenter(const QString &id, const ::OpenAPI::OptionalParam<OAIVCenterDataSource> &oaiv_center_data_source = ::OpenAPI::OptionalParam<OAIVCenterDataSource>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void addBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void addCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void addCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void addDellSwitchCallback(OAIHttpRequestWorker *worker);
    void addHpovManagerCallback(OAIHttpRequestWorker *worker);
    void addHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void addJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void addNsxvManagerDatasourceCallback(OAIHttpRequestWorker *worker);
    void addPanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void addUcsManagerCallback(OAIHttpRequestWorker *worker);
    void addVcenterDatasourceCallback(OAIHttpRequestWorker *worker);
    void deleteAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void deleteBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void deleteCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void deleteCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void deleteDellSwitchCallback(OAIHttpRequestWorker *worker);
    void deleteHpovManagerCallback(OAIHttpRequestWorker *worker);
    void deleteHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void deleteJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void deleteNsxvManagerCallback(OAIHttpRequestWorker *worker);
    void deletePanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void deleteUcsManagerCallback(OAIHttpRequestWorker *worker);
    void deleteVcenterCallback(OAIHttpRequestWorker *worker);
    void disableAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void disableBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void disableCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void disableCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void disableDellSwitchCallback(OAIHttpRequestWorker *worker);
    void disableHpovManagerCallback(OAIHttpRequestWorker *worker);
    void disableHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void disableJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void disableNsxvManagerCallback(OAIHttpRequestWorker *worker);
    void disablePanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void disableUcsManagerCallback(OAIHttpRequestWorker *worker);
    void disableVcenterCallback(OAIHttpRequestWorker *worker);
    void enableAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void enableBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void enableCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void enableCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void enableDellSwitchCallback(OAIHttpRequestWorker *worker);
    void enableHpovManagerCallback(OAIHttpRequestWorker *worker);
    void enableHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void enableJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void enableNsxvManagerCallback(OAIHttpRequestWorker *worker);
    void enablePanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void enableUcsManagerCallback(OAIHttpRequestWorker *worker);
    void enableVcenterCallback(OAIHttpRequestWorker *worker);
    void getAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void getAristaSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void getBrocadeSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void getCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void getCiscoSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getDellSwitchCallback(OAIHttpRequestWorker *worker);
    void getDellSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getHpovManagerCallback(OAIHttpRequestWorker *worker);
    void getHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void getJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void getJuniperSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getNsxvControllerClusterCallback(OAIHttpRequestWorker *worker);
    void getNsxvManagerCallback(OAIHttpRequestWorker *worker);
    void getPanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void getUcsManagerCallback(OAIHttpRequestWorker *worker);
    void getUcsSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void getVcenterCallback(OAIHttpRequestWorker *worker);
    void listAristaSwitchesCallback(OAIHttpRequestWorker *worker);
    void listBrocadeSwitchesCallback(OAIHttpRequestWorker *worker);
    void listCheckpointFirewallsCallback(OAIHttpRequestWorker *worker);
    void listCiscoSwitchesCallback(OAIHttpRequestWorker *worker);
    void listDellSwitchesCallback(OAIHttpRequestWorker *worker);
    void listHpovManagersCallback(OAIHttpRequestWorker *worker);
    void listHpvcManagersCallback(OAIHttpRequestWorker *worker);
    void listJuniperSwitchesCallback(OAIHttpRequestWorker *worker);
    void listNsxvManagersCallback(OAIHttpRequestWorker *worker);
    void listPanoramaFirewallsCallback(OAIHttpRequestWorker *worker);
    void listUcsManagersCallback(OAIHttpRequestWorker *worker);
    void listVcentersCallback(OAIHttpRequestWorker *worker);
    void updateAristaSwitchCallback(OAIHttpRequestWorker *worker);
    void updateAristaSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateBrocadeSwitchCallback(OAIHttpRequestWorker *worker);
    void updateBrocadeSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateCheckpointFirewallCallback(OAIHttpRequestWorker *worker);
    void updateCiscoSwitchCallback(OAIHttpRequestWorker *worker);
    void updateCiscoSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateDellSwitchCallback(OAIHttpRequestWorker *worker);
    void updateDellSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateHpovManagerCallback(OAIHttpRequestWorker *worker);
    void updateHpvcManagerCallback(OAIHttpRequestWorker *worker);
    void updateJuniperSwitchCallback(OAIHttpRequestWorker *worker);
    void updateJuniperSwitchSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateNsxvControllerClusterCallback(OAIHttpRequestWorker *worker);
    void updateNsxvManagerCallback(OAIHttpRequestWorker *worker);
    void updatePanoramaFirewallCallback(OAIHttpRequestWorker *worker);
    void updateUcsManagerCallback(OAIHttpRequestWorker *worker);
    void updateUcsSnmpConfigCallback(OAIHttpRequestWorker *worker);
    void updateVcenterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAristaSwitchSignal(OAIAristaSwitchDataSource summary);
    void addBrocadeSwitchSignal(OAIBrocadeSwitchDataSource summary);
    void addCheckpointFirewallSignal(OAICheckpointFirewallDataSource summary);
    void addCiscoSwitchSignal(OAICiscoSwitchDataSource summary);
    void addDellSwitchSignal(OAIDellSwitchDataSource summary);
    void addHpovManagerSignal(OAIHPOneViewManagerDataSource summary);
    void addHpvcManagerSignal(OAIHPVCManagerDataSource summary);
    void addJuniperSwitchSignal(OAIJuniperSwitchDataSource summary);
    void addNsxvManagerDatasourceSignal(OAINSXVManagerDataSource summary);
    void addPanoramaFirewallSignal(OAIPanFirewallDataSource summary);
    void addUcsManagerSignal(OAIUCSManagerDataSource summary);
    void addVcenterDatasourceSignal(OAIVCenterDataSource summary);
    void deleteAristaSwitchSignal();
    void deleteBrocadeSwitchSignal();
    void deleteCheckpointFirewallSignal();
    void deleteCiscoSwitchSignal();
    void deleteDellSwitchSignal();
    void deleteHpovManagerSignal();
    void deleteHpvcManagerSignal();
    void deleteJuniperSwitchSignal();
    void deleteNsxvManagerSignal();
    void deletePanoramaFirewallSignal();
    void deleteUcsManagerSignal();
    void deleteVcenterSignal();
    void disableAristaSwitchSignal();
    void disableBrocadeSwitchSignal();
    void disableCheckpointFirewallSignal();
    void disableCiscoSwitchSignal();
    void disableDellSwitchSignal();
    void disableHpovManagerSignal();
    void disableHpvcManagerSignal();
    void disableJuniperSwitchSignal();
    void disableNsxvManagerSignal();
    void disablePanoramaFirewallSignal();
    void disableUcsManagerSignal();
    void disableVcenterSignal();
    void enableAristaSwitchSignal();
    void enableBrocadeSwitchSignal();
    void enableCheckpointFirewallSignal();
    void enableCiscoSwitchSignal();
    void enableDellSwitchSignal();
    void enableHpovManagerSignal();
    void enableHpvcManagerSignal();
    void enableJuniperSwitchSignal();
    void enableNsxvManagerSignal();
    void enablePanoramaFirewallSignal();
    void enableUcsManagerSignal();
    void enableVcenterSignal();
    void getAristaSwitchSignal(OAIAristaSwitchDataSource summary);
    void getAristaSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void getBrocadeSwitchSignal(OAIBrocadeSwitchDataSource summary);
    void getBrocadeSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void getCheckpointFirewallSignal(OAICheckpointFirewallDataSource summary);
    void getCiscoSwitchSignal(OAICiscoSwitchDataSource summary);
    void getCiscoSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void getDellSwitchSignal(OAIDellSwitchDataSource summary);
    void getDellSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void getHpovManagerSignal(OAIHPOneViewManagerDataSource summary);
    void getHpvcManagerSignal(OAIHPVCManagerDataSource summary);
    void getJuniperSwitchSignal(OAIJuniperSwitchDataSource summary);
    void getJuniperSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void getNsxvControllerClusterSignal(OAINSXControllerDataCollection summary);
    void getNsxvManagerSignal(OAINSXVManagerDataSource summary);
    void getPanoramaFirewallSignal(OAIPanFirewallDataSource summary);
    void getUcsManagerSignal(OAIUCSManagerDataSource summary);
    void getUcsSnmpConfigSignal(OAISNMPConfig summary);
    void getVcenterSignal(OAIVCenterDataSource summary);
    void listAristaSwitchesSignal(OAIDataSourceListResponse summary);
    void listBrocadeSwitchesSignal(OAIDataSourceListResponse summary);
    void listCheckpointFirewallsSignal(OAIDataSourceListResponse summary);
    void listCiscoSwitchesSignal(OAIDataSourceListResponse summary);
    void listDellSwitchesSignal(OAIDataSourceListResponse summary);
    void listHpovManagersSignal(OAIDataSourceListResponse summary);
    void listHpvcManagersSignal(OAIDataSourceListResponse summary);
    void listJuniperSwitchesSignal(OAIDataSourceListResponse summary);
    void listNsxvManagersSignal(OAIDataSourceListResponse summary);
    void listPanoramaFirewallsSignal(OAIDataSourceListResponse summary);
    void listUcsManagersSignal(OAIDataSourceListResponse summary);
    void listVcentersSignal(OAIDataSourceListResponse summary);
    void updateAristaSwitchSignal(OAIAristaSwitchDataSource summary);
    void updateAristaSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void updateBrocadeSwitchSignal(OAIBrocadeSwitchDataSource summary);
    void updateBrocadeSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void updateCheckpointFirewallSignal(OAICheckpointFirewallDataSource summary);
    void updateCiscoSwitchSignal(OAICiscoSwitchDataSource summary);
    void updateCiscoSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void updateDellSwitchSignal(OAIDellSwitchDataSource summary);
    void updateDellSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void updateHpovManagerSignal(OAIHPOneViewManagerDataSource summary);
    void updateHpvcManagerSignal(OAIHPVCManagerDataSource summary);
    void updateJuniperSwitchSignal(OAIJuniperSwitchDataSource summary);
    void updateJuniperSwitchSnmpConfigSignal(OAISNMPConfig summary);
    void updateNsxvControllerClusterSignal(OAINSXControllerDataCollection summary);
    void updateNsxvManagerSignal(OAINSXVManagerDataSource summary);
    void updatePanoramaFirewallSignal(OAIPanFirewallDataSource summary);
    void updateUcsManagerSignal(OAIUCSManagerDataSource summary);
    void updateUcsSnmpConfigSignal(OAISNMPConfig summary);
    void updateVcenterSignal(OAIVCenterDataSource summary);


    void addAristaSwitchSignalFull(OAIHttpRequestWorker *worker, OAIAristaSwitchDataSource summary);
    void addBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker, OAIBrocadeSwitchDataSource summary);
    void addCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker, OAICheckpointFirewallDataSource summary);
    void addCiscoSwitchSignalFull(OAIHttpRequestWorker *worker, OAICiscoSwitchDataSource summary);
    void addDellSwitchSignalFull(OAIHttpRequestWorker *worker, OAIDellSwitchDataSource summary);
    void addHpovManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPOneViewManagerDataSource summary);
    void addHpvcManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPVCManagerDataSource summary);
    void addJuniperSwitchSignalFull(OAIHttpRequestWorker *worker, OAIJuniperSwitchDataSource summary);
    void addNsxvManagerDatasourceSignalFull(OAIHttpRequestWorker *worker, OAINSXVManagerDataSource summary);
    void addPanoramaFirewallSignalFull(OAIHttpRequestWorker *worker, OAIPanFirewallDataSource summary);
    void addUcsManagerSignalFull(OAIHttpRequestWorker *worker, OAIUCSManagerDataSource summary);
    void addVcenterDatasourceSignalFull(OAIHttpRequestWorker *worker, OAIVCenterDataSource summary);
    void deleteAristaSwitchSignalFull(OAIHttpRequestWorker *worker);
    void deleteBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker);
    void deleteCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker);
    void deleteCiscoSwitchSignalFull(OAIHttpRequestWorker *worker);
    void deleteDellSwitchSignalFull(OAIHttpRequestWorker *worker);
    void deleteHpovManagerSignalFull(OAIHttpRequestWorker *worker);
    void deleteHpvcManagerSignalFull(OAIHttpRequestWorker *worker);
    void deleteJuniperSwitchSignalFull(OAIHttpRequestWorker *worker);
    void deleteNsxvManagerSignalFull(OAIHttpRequestWorker *worker);
    void deletePanoramaFirewallSignalFull(OAIHttpRequestWorker *worker);
    void deleteUcsManagerSignalFull(OAIHttpRequestWorker *worker);
    void deleteVcenterSignalFull(OAIHttpRequestWorker *worker);
    void disableAristaSwitchSignalFull(OAIHttpRequestWorker *worker);
    void disableBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker);
    void disableCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker);
    void disableCiscoSwitchSignalFull(OAIHttpRequestWorker *worker);
    void disableDellSwitchSignalFull(OAIHttpRequestWorker *worker);
    void disableHpovManagerSignalFull(OAIHttpRequestWorker *worker);
    void disableHpvcManagerSignalFull(OAIHttpRequestWorker *worker);
    void disableJuniperSwitchSignalFull(OAIHttpRequestWorker *worker);
    void disableNsxvManagerSignalFull(OAIHttpRequestWorker *worker);
    void disablePanoramaFirewallSignalFull(OAIHttpRequestWorker *worker);
    void disableUcsManagerSignalFull(OAIHttpRequestWorker *worker);
    void disableVcenterSignalFull(OAIHttpRequestWorker *worker);
    void enableAristaSwitchSignalFull(OAIHttpRequestWorker *worker);
    void enableBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker);
    void enableCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker);
    void enableCiscoSwitchSignalFull(OAIHttpRequestWorker *worker);
    void enableDellSwitchSignalFull(OAIHttpRequestWorker *worker);
    void enableHpovManagerSignalFull(OAIHttpRequestWorker *worker);
    void enableHpvcManagerSignalFull(OAIHttpRequestWorker *worker);
    void enableJuniperSwitchSignalFull(OAIHttpRequestWorker *worker);
    void enableNsxvManagerSignalFull(OAIHttpRequestWorker *worker);
    void enablePanoramaFirewallSignalFull(OAIHttpRequestWorker *worker);
    void enableUcsManagerSignalFull(OAIHttpRequestWorker *worker);
    void enableVcenterSignalFull(OAIHttpRequestWorker *worker);
    void getAristaSwitchSignalFull(OAIHttpRequestWorker *worker, OAIAristaSwitchDataSource summary);
    void getAristaSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker, OAIBrocadeSwitchDataSource summary);
    void getBrocadeSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker, OAICheckpointFirewallDataSource summary);
    void getCiscoSwitchSignalFull(OAIHttpRequestWorker *worker, OAICiscoSwitchDataSource summary);
    void getCiscoSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getDellSwitchSignalFull(OAIHttpRequestWorker *worker, OAIDellSwitchDataSource summary);
    void getDellSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getHpovManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPOneViewManagerDataSource summary);
    void getHpvcManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPVCManagerDataSource summary);
    void getJuniperSwitchSignalFull(OAIHttpRequestWorker *worker, OAIJuniperSwitchDataSource summary);
    void getJuniperSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getNsxvControllerClusterSignalFull(OAIHttpRequestWorker *worker, OAINSXControllerDataCollection summary);
    void getNsxvManagerSignalFull(OAIHttpRequestWorker *worker, OAINSXVManagerDataSource summary);
    void getPanoramaFirewallSignalFull(OAIHttpRequestWorker *worker, OAIPanFirewallDataSource summary);
    void getUcsManagerSignalFull(OAIHttpRequestWorker *worker, OAIUCSManagerDataSource summary);
    void getUcsSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void getVcenterSignalFull(OAIHttpRequestWorker *worker, OAIVCenterDataSource summary);
    void listAristaSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listBrocadeSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listCheckpointFirewallsSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listCiscoSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listDellSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listHpovManagersSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listHpvcManagersSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listJuniperSwitchesSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listNsxvManagersSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listPanoramaFirewallsSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listUcsManagersSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void listVcentersSignalFull(OAIHttpRequestWorker *worker, OAIDataSourceListResponse summary);
    void updateAristaSwitchSignalFull(OAIHttpRequestWorker *worker, OAIAristaSwitchDataSource summary);
    void updateAristaSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateBrocadeSwitchSignalFull(OAIHttpRequestWorker *worker, OAIBrocadeSwitchDataSource summary);
    void updateBrocadeSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateCheckpointFirewallSignalFull(OAIHttpRequestWorker *worker, OAICheckpointFirewallDataSource summary);
    void updateCiscoSwitchSignalFull(OAIHttpRequestWorker *worker, OAICiscoSwitchDataSource summary);
    void updateCiscoSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateDellSwitchSignalFull(OAIHttpRequestWorker *worker, OAIDellSwitchDataSource summary);
    void updateDellSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateHpovManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPOneViewManagerDataSource summary);
    void updateHpvcManagerSignalFull(OAIHttpRequestWorker *worker, OAIHPVCManagerDataSource summary);
    void updateJuniperSwitchSignalFull(OAIHttpRequestWorker *worker, OAIJuniperSwitchDataSource summary);
    void updateJuniperSwitchSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateNsxvControllerClusterSignalFull(OAIHttpRequestWorker *worker, OAINSXControllerDataCollection summary);
    void updateNsxvManagerSignalFull(OAIHttpRequestWorker *worker, OAINSXVManagerDataSource summary);
    void updatePanoramaFirewallSignalFull(OAIHttpRequestWorker *worker, OAIPanFirewallDataSource summary);
    void updateUcsManagerSignalFull(OAIHttpRequestWorker *worker, OAIUCSManagerDataSource summary);
    void updateUcsSnmpConfigSignalFull(OAIHttpRequestWorker *worker, OAISNMPConfig summary);
    void updateVcenterSignalFull(OAIHttpRequestWorker *worker, OAIVCenterDataSource summary);

    Q_DECL_DEPRECATED_X("Use addAristaSwitchSignalError() instead")
    void addAristaSwitchSignalE(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAristaSwitchSignalError(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addBrocadeSwitchSignalError() instead")
    void addBrocadeSwitchSignalE(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addBrocadeSwitchSignalError(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCheckpointFirewallSignalError() instead")
    void addCheckpointFirewallSignalE(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCheckpointFirewallSignalError(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCiscoSwitchSignalError() instead")
    void addCiscoSwitchSignalE(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCiscoSwitchSignalError(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDellSwitchSignalError() instead")
    void addDellSwitchSignalE(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDellSwitchSignalError(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addHpovManagerSignalError() instead")
    void addHpovManagerSignalE(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addHpovManagerSignalError(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addHpvcManagerSignalError() instead")
    void addHpvcManagerSignalE(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addHpvcManagerSignalError(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addJuniperSwitchSignalError() instead")
    void addJuniperSwitchSignalE(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addJuniperSwitchSignalError(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addNsxvManagerDatasourceSignalError() instead")
    void addNsxvManagerDatasourceSignalE(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addNsxvManagerDatasourceSignalError(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPanoramaFirewallSignalError() instead")
    void addPanoramaFirewallSignalE(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addPanoramaFirewallSignalError(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUcsManagerSignalError() instead")
    void addUcsManagerSignalE(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addUcsManagerSignalError(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVcenterDatasourceSignalError() instead")
    void addVcenterDatasourceSignalE(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addVcenterDatasourceSignalError(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAristaSwitchSignalError() instead")
    void deleteAristaSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAristaSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBrocadeSwitchSignalError() instead")
    void deleteBrocadeSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBrocadeSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCheckpointFirewallSignalError() instead")
    void deleteCheckpointFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCheckpointFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCiscoSwitchSignalError() instead")
    void deleteCiscoSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCiscoSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDellSwitchSignalError() instead")
    void deleteDellSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDellSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHpovManagerSignalError() instead")
    void deleteHpovManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHpovManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHpvcManagerSignalError() instead")
    void deleteHpvcManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHpvcManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJuniperSwitchSignalError() instead")
    void deleteJuniperSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJuniperSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNsxvManagerSignalError() instead")
    void deleteNsxvManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNsxvManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePanoramaFirewallSignalError() instead")
    void deletePanoramaFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePanoramaFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUcsManagerSignalError() instead")
    void deleteUcsManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUcsManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVcenterSignalError() instead")
    void deleteVcenterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVcenterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAristaSwitchSignalError() instead")
    void disableAristaSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableAristaSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableBrocadeSwitchSignalError() instead")
    void disableBrocadeSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableBrocadeSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCheckpointFirewallSignalError() instead")
    void disableCheckpointFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableCheckpointFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCiscoSwitchSignalError() instead")
    void disableCiscoSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableCiscoSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDellSwitchSignalError() instead")
    void disableDellSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableDellSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHpovManagerSignalError() instead")
    void disableHpovManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableHpovManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHpvcManagerSignalError() instead")
    void disableHpvcManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableHpvcManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableJuniperSwitchSignalError() instead")
    void disableJuniperSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableJuniperSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableNsxvManagerSignalError() instead")
    void disableNsxvManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableNsxvManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disablePanoramaFirewallSignalError() instead")
    void disablePanoramaFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disablePanoramaFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableUcsManagerSignalError() instead")
    void disableUcsManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableUcsManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableVcenterSignalError() instead")
    void disableVcenterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableVcenterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAristaSwitchSignalError() instead")
    void enableAristaSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableAristaSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableBrocadeSwitchSignalError() instead")
    void enableBrocadeSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableBrocadeSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCheckpointFirewallSignalError() instead")
    void enableCheckpointFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableCheckpointFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCiscoSwitchSignalError() instead")
    void enableCiscoSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableCiscoSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDellSwitchSignalError() instead")
    void enableDellSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableDellSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHpovManagerSignalError() instead")
    void enableHpovManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableHpovManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHpvcManagerSignalError() instead")
    void enableHpvcManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableHpvcManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableJuniperSwitchSignalError() instead")
    void enableJuniperSwitchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableJuniperSwitchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableNsxvManagerSignalError() instead")
    void enableNsxvManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableNsxvManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePanoramaFirewallSignalError() instead")
    void enablePanoramaFirewallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enablePanoramaFirewallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUcsManagerSignalError() instead")
    void enableUcsManagerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableUcsManagerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableVcenterSignalError() instead")
    void enableVcenterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableVcenterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAristaSwitchSignalError() instead")
    void getAristaSwitchSignalE(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAristaSwitchSignalError(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAristaSwitchSnmpConfigSignalError() instead")
    void getAristaSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAristaSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrocadeSwitchSignalError() instead")
    void getBrocadeSwitchSignalE(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrocadeSwitchSignalError(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrocadeSwitchSnmpConfigSignalError() instead")
    void getBrocadeSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrocadeSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCheckpointFirewallSignalError() instead")
    void getCheckpointFirewallSignalE(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCheckpointFirewallSignalError(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCiscoSwitchSignalError() instead")
    void getCiscoSwitchSignalE(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCiscoSwitchSignalError(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCiscoSwitchSnmpConfigSignalError() instead")
    void getCiscoSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCiscoSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDellSwitchSignalError() instead")
    void getDellSwitchSignalE(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDellSwitchSignalError(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDellSwitchSnmpConfigSignalError() instead")
    void getDellSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDellSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHpovManagerSignalError() instead")
    void getHpovManagerSignalE(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHpovManagerSignalError(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHpvcManagerSignalError() instead")
    void getHpvcManagerSignalE(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHpvcManagerSignalError(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJuniperSwitchSignalError() instead")
    void getJuniperSwitchSignalE(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJuniperSwitchSignalError(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJuniperSwitchSnmpConfigSignalError() instead")
    void getJuniperSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJuniperSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNsxvControllerClusterSignalError() instead")
    void getNsxvControllerClusterSignalE(OAINSXControllerDataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNsxvControllerClusterSignalError(OAINSXControllerDataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNsxvManagerSignalError() instead")
    void getNsxvManagerSignalE(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNsxvManagerSignalError(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPanoramaFirewallSignalError() instead")
    void getPanoramaFirewallSignalE(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPanoramaFirewallSignalError(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUcsManagerSignalError() instead")
    void getUcsManagerSignalE(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUcsManagerSignalError(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUcsSnmpConfigSignalError() instead")
    void getUcsSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUcsSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVcenterSignalError() instead")
    void getVcenterSignalE(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVcenterSignalError(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAristaSwitchesSignalError() instead")
    void listAristaSwitchesSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAristaSwitchesSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBrocadeSwitchesSignalError() instead")
    void listBrocadeSwitchesSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBrocadeSwitchesSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckpointFirewallsSignalError() instead")
    void listCheckpointFirewallsSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckpointFirewallsSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCiscoSwitchesSignalError() instead")
    void listCiscoSwitchesSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCiscoSwitchesSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDellSwitchesSignalError() instead")
    void listDellSwitchesSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDellSwitchesSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHpovManagersSignalError() instead")
    void listHpovManagersSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHpovManagersSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHpvcManagersSignalError() instead")
    void listHpvcManagersSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHpvcManagersSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJuniperSwitchesSignalError() instead")
    void listJuniperSwitchesSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listJuniperSwitchesSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNsxvManagersSignalError() instead")
    void listNsxvManagersSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNsxvManagersSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPanoramaFirewallsSignalError() instead")
    void listPanoramaFirewallsSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPanoramaFirewallsSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUcsManagersSignalError() instead")
    void listUcsManagersSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUcsManagersSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVcentersSignalError() instead")
    void listVcentersSignalE(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVcentersSignalError(OAIDataSourceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAristaSwitchSignalError() instead")
    void updateAristaSwitchSignalE(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAristaSwitchSignalError(OAIAristaSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAristaSwitchSnmpConfigSignalError() instead")
    void updateAristaSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAristaSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBrocadeSwitchSignalError() instead")
    void updateBrocadeSwitchSignalE(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBrocadeSwitchSignalError(OAIBrocadeSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBrocadeSwitchSnmpConfigSignalError() instead")
    void updateBrocadeSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBrocadeSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckpointFirewallSignalError() instead")
    void updateCheckpointFirewallSignalE(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckpointFirewallSignalError(OAICheckpointFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCiscoSwitchSignalError() instead")
    void updateCiscoSwitchSignalE(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCiscoSwitchSignalError(OAICiscoSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCiscoSwitchSnmpConfigSignalError() instead")
    void updateCiscoSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCiscoSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDellSwitchSignalError() instead")
    void updateDellSwitchSignalE(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDellSwitchSignalError(OAIDellSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDellSwitchSnmpConfigSignalError() instead")
    void updateDellSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDellSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHpovManagerSignalError() instead")
    void updateHpovManagerSignalE(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHpovManagerSignalError(OAIHPOneViewManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHpvcManagerSignalError() instead")
    void updateHpvcManagerSignalE(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHpvcManagerSignalError(OAIHPVCManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJuniperSwitchSignalError() instead")
    void updateJuniperSwitchSignalE(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJuniperSwitchSignalError(OAIJuniperSwitchDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJuniperSwitchSnmpConfigSignalError() instead")
    void updateJuniperSwitchSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJuniperSwitchSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNsxvControllerClusterSignalError() instead")
    void updateNsxvControllerClusterSignalE(OAINSXControllerDataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNsxvControllerClusterSignalError(OAINSXControllerDataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNsxvManagerSignalError() instead")
    void updateNsxvManagerSignalE(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNsxvManagerSignalError(OAINSXVManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePanoramaFirewallSignalError() instead")
    void updatePanoramaFirewallSignalE(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePanoramaFirewallSignalError(OAIPanFirewallDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUcsManagerSignalError() instead")
    void updateUcsManagerSignalE(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUcsManagerSignalError(OAIUCSManagerDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUcsSnmpConfigSignalError() instead")
    void updateUcsSnmpConfigSignalE(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUcsSnmpConfigSignalError(OAISNMPConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVcenterSignalError() instead")
    void updateVcenterSignalE(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVcenterSignalError(OAIVCenterDataSource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAristaSwitchSignalErrorFull() instead")
    void addAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addBrocadeSwitchSignalErrorFull() instead")
    void addBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCheckpointFirewallSignalErrorFull() instead")
    void addCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCiscoSwitchSignalErrorFull() instead")
    void addCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDellSwitchSignalErrorFull() instead")
    void addDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addHpovManagerSignalErrorFull() instead")
    void addHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addHpvcManagerSignalErrorFull() instead")
    void addHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addJuniperSwitchSignalErrorFull() instead")
    void addJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addNsxvManagerDatasourceSignalErrorFull() instead")
    void addNsxvManagerDatasourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addNsxvManagerDatasourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPanoramaFirewallSignalErrorFull() instead")
    void addPanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUcsManagerSignalErrorFull() instead")
    void addUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addVcenterDatasourceSignalErrorFull() instead")
    void addVcenterDatasourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVcenterDatasourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAristaSwitchSignalErrorFull() instead")
    void deleteAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBrocadeSwitchSignalErrorFull() instead")
    void deleteBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCheckpointFirewallSignalErrorFull() instead")
    void deleteCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCiscoSwitchSignalErrorFull() instead")
    void deleteCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDellSwitchSignalErrorFull() instead")
    void deleteDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHpovManagerSignalErrorFull() instead")
    void deleteHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHpvcManagerSignalErrorFull() instead")
    void deleteHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJuniperSwitchSignalErrorFull() instead")
    void deleteJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNsxvManagerSignalErrorFull() instead")
    void deleteNsxvManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNsxvManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePanoramaFirewallSignalErrorFull() instead")
    void deletePanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUcsManagerSignalErrorFull() instead")
    void deleteUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVcenterSignalErrorFull() instead")
    void deleteVcenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVcenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableAristaSwitchSignalErrorFull() instead")
    void disableAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableBrocadeSwitchSignalErrorFull() instead")
    void disableBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCheckpointFirewallSignalErrorFull() instead")
    void disableCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableCiscoSwitchSignalErrorFull() instead")
    void disableCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDellSwitchSignalErrorFull() instead")
    void disableDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHpovManagerSignalErrorFull() instead")
    void disableHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableHpvcManagerSignalErrorFull() instead")
    void disableHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableJuniperSwitchSignalErrorFull() instead")
    void disableJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableNsxvManagerSignalErrorFull() instead")
    void disableNsxvManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableNsxvManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disablePanoramaFirewallSignalErrorFull() instead")
    void disablePanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disablePanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableUcsManagerSignalErrorFull() instead")
    void disableUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableVcenterSignalErrorFull() instead")
    void disableVcenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableVcenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableAristaSwitchSignalErrorFull() instead")
    void enableAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableBrocadeSwitchSignalErrorFull() instead")
    void enableBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCheckpointFirewallSignalErrorFull() instead")
    void enableCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCiscoSwitchSignalErrorFull() instead")
    void enableCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDellSwitchSignalErrorFull() instead")
    void enableDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHpovManagerSignalErrorFull() instead")
    void enableHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHpvcManagerSignalErrorFull() instead")
    void enableHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableJuniperSwitchSignalErrorFull() instead")
    void enableJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableNsxvManagerSignalErrorFull() instead")
    void enableNsxvManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableNsxvManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enablePanoramaFirewallSignalErrorFull() instead")
    void enablePanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enablePanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableUcsManagerSignalErrorFull() instead")
    void enableUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableVcenterSignalErrorFull() instead")
    void enableVcenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableVcenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAristaSwitchSignalErrorFull() instead")
    void getAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAristaSwitchSnmpConfigSignalErrorFull() instead")
    void getAristaSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAristaSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrocadeSwitchSignalErrorFull() instead")
    void getBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBrocadeSwitchSnmpConfigSignalErrorFull() instead")
    void getBrocadeSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBrocadeSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCheckpointFirewallSignalErrorFull() instead")
    void getCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCiscoSwitchSignalErrorFull() instead")
    void getCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCiscoSwitchSnmpConfigSignalErrorFull() instead")
    void getCiscoSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCiscoSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDellSwitchSignalErrorFull() instead")
    void getDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDellSwitchSnmpConfigSignalErrorFull() instead")
    void getDellSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDellSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHpovManagerSignalErrorFull() instead")
    void getHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHpvcManagerSignalErrorFull() instead")
    void getHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJuniperSwitchSignalErrorFull() instead")
    void getJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJuniperSwitchSnmpConfigSignalErrorFull() instead")
    void getJuniperSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJuniperSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNsxvControllerClusterSignalErrorFull() instead")
    void getNsxvControllerClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNsxvControllerClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNsxvManagerSignalErrorFull() instead")
    void getNsxvManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNsxvManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPanoramaFirewallSignalErrorFull() instead")
    void getPanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUcsManagerSignalErrorFull() instead")
    void getUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUcsSnmpConfigSignalErrorFull() instead")
    void getUcsSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUcsSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVcenterSignalErrorFull() instead")
    void getVcenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVcenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAristaSwitchesSignalErrorFull() instead")
    void listAristaSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAristaSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBrocadeSwitchesSignalErrorFull() instead")
    void listBrocadeSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBrocadeSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCheckpointFirewallsSignalErrorFull() instead")
    void listCheckpointFirewallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCheckpointFirewallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCiscoSwitchesSignalErrorFull() instead")
    void listCiscoSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCiscoSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDellSwitchesSignalErrorFull() instead")
    void listDellSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDellSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHpovManagersSignalErrorFull() instead")
    void listHpovManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHpovManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHpvcManagersSignalErrorFull() instead")
    void listHpvcManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHpvcManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJuniperSwitchesSignalErrorFull() instead")
    void listJuniperSwitchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listJuniperSwitchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNsxvManagersSignalErrorFull() instead")
    void listNsxvManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNsxvManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPanoramaFirewallsSignalErrorFull() instead")
    void listPanoramaFirewallsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPanoramaFirewallsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUcsManagersSignalErrorFull() instead")
    void listUcsManagersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUcsManagersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVcentersSignalErrorFull() instead")
    void listVcentersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVcentersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAristaSwitchSignalErrorFull() instead")
    void updateAristaSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAristaSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAristaSwitchSnmpConfigSignalErrorFull() instead")
    void updateAristaSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAristaSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBrocadeSwitchSignalErrorFull() instead")
    void updateBrocadeSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBrocadeSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBrocadeSwitchSnmpConfigSignalErrorFull() instead")
    void updateBrocadeSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBrocadeSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCheckpointFirewallSignalErrorFull() instead")
    void updateCheckpointFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCheckpointFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCiscoSwitchSignalErrorFull() instead")
    void updateCiscoSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCiscoSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCiscoSwitchSnmpConfigSignalErrorFull() instead")
    void updateCiscoSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCiscoSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDellSwitchSignalErrorFull() instead")
    void updateDellSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDellSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDellSwitchSnmpConfigSignalErrorFull() instead")
    void updateDellSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDellSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHpovManagerSignalErrorFull() instead")
    void updateHpovManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHpovManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHpvcManagerSignalErrorFull() instead")
    void updateHpvcManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHpvcManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJuniperSwitchSignalErrorFull() instead")
    void updateJuniperSwitchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJuniperSwitchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJuniperSwitchSnmpConfigSignalErrorFull() instead")
    void updateJuniperSwitchSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJuniperSwitchSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNsxvControllerClusterSignalErrorFull() instead")
    void updateNsxvControllerClusterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNsxvControllerClusterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNsxvManagerSignalErrorFull() instead")
    void updateNsxvManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNsxvManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePanoramaFirewallSignalErrorFull() instead")
    void updatePanoramaFirewallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePanoramaFirewallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUcsManagerSignalErrorFull() instead")
    void updateUcsManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUcsManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUcsSnmpConfigSignalErrorFull() instead")
    void updateUcsSnmpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUcsSnmpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVcenterSignalErrorFull() instead")
    void updateVcenterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVcenterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
