/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBaseVirtualMachine.h
 *
 * 
 */

#ifndef OAIBaseVirtualMachine_H
#define OAIBaseVirtualMachine_H

#include <QJsonObject>

#include "OAIBaseEntity.h"
#include "OAIEntityType.h"
#include "OAIIpV4Address.h"
#include "OAIReference.h"
#include "OAIRuleSet.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleSet;
class OAIIpV4Address;
class OAIReference;

class OAIBaseVirtualMachine : public OAIObject {
public:
    OAIBaseVirtualMachine();
    OAIBaseVirtualMachine(QString json);
    ~OAIBaseVirtualMachine() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEntityId() const;
    void setEntityId(const QString &entity_id);
    bool is_entity_id_Set() const;
    bool is_entity_id_Valid() const;

    OAIEntityType getEntityType() const;
    void setEntityType(const OAIEntityType &entity_type);
    bool is_entity_type_Set() const;
    bool is_entity_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDefaultGateway() const;
    void setDefaultGateway(const QString &default_gateway);
    bool is_default_gateway_Set() const;
    bool is_default_gateway_Valid() const;

    QList<OAIRuleSet> getDestinationFirewallRules() const;
    void setDestinationFirewallRules(const QList<OAIRuleSet> &destination_firewall_rules);
    bool is_destination_firewall_rules_Set() const;
    bool is_destination_firewall_rules_Valid() const;

    QList<OAIIpV4Address> getIpAddresses() const;
    void setIpAddresses(const QList<OAIIpV4Address> &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    QList<OAIReference> getIpSets() const;
    void setIpSets(const QList<OAIReference> &ip_sets);
    bool is_ip_sets_Set() const;
    bool is_ip_sets_Valid() const;

    QList<OAIReference> getSecurityGroups() const;
    void setSecurityGroups(const QList<OAIReference> &security_groups);
    bool is_security_groups_Set() const;
    bool is_security_groups_Valid() const;

    QList<OAIRuleSet> getSourceFirewallRules() const;
    void setSourceFirewallRules(const QList<OAIRuleSet> &source_firewall_rules);
    bool is_source_firewall_rules_Set() const;
    bool is_source_firewall_rules_Valid() const;

    QList<OAIReference> getVnics() const;
    void setVnics(const QList<OAIReference> &vnics);
    bool is_vnics_Set() const;
    bool is_vnics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_entity_id;
    bool m_entity_id_isSet;
    bool m_entity_id_isValid;

    OAIEntityType m_entity_type;
    bool m_entity_type_isSet;
    bool m_entity_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_default_gateway;
    bool m_default_gateway_isSet;
    bool m_default_gateway_isValid;

    QList<OAIRuleSet> m_destination_firewall_rules;
    bool m_destination_firewall_rules_isSet;
    bool m_destination_firewall_rules_isValid;

    QList<OAIIpV4Address> m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QList<OAIReference> m_ip_sets;
    bool m_ip_sets_isSet;
    bool m_ip_sets_isValid;

    QList<OAIReference> m_security_groups;
    bool m_security_groups_isSet;
    bool m_security_groups_isValid;

    QList<OAIRuleSet> m_source_firewall_rules;
    bool m_source_firewall_rules_isSet;
    bool m_source_firewall_rules_isValid;

    QList<OAIReference> m_vnics;
    bool m_vnics_isSet;
    bool m_vnics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBaseVirtualMachine)

#endif // OAIBaseVirtualMachine_H
