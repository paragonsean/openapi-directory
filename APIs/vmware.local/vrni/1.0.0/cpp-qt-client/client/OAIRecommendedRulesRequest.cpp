/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedRulesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedRulesRequest::OAIRecommendedRulesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedRulesRequest::OAIRecommendedRulesRequest() {
    this->initializeModel();
}

OAIRecommendedRulesRequest::~OAIRecommendedRulesRequest() {}

void OAIRecommendedRulesRequest::initializeModel() {

    m_group_1_isSet = false;
    m_group_1_isValid = false;

    m_group_2_isSet = false;
    m_group_2_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;
}

void OAIRecommendedRulesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedRulesRequest::fromJsonObject(QJsonObject json) {

    m_group_1_isValid = ::OpenAPI::fromJsonValue(m_group_1, json[QString("group_1")]);
    m_group_1_isSet = !json[QString("group_1")].isNull() && m_group_1_isValid;

    m_group_2_isValid = ::OpenAPI::fromJsonValue(m_group_2, json[QString("group_2")]);
    m_group_2_isSet = !json[QString("group_2")].isNull() && m_group_2_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("time_range")]);
    m_time_range_isSet = !json[QString("time_range")].isNull() && m_time_range_isValid;
}

QString OAIRecommendedRulesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedRulesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_group_1.isSet()) {
        obj.insert(QString("group_1"), ::OpenAPI::toJsonValue(m_group_1));
    }
    if (m_group_2.isSet()) {
        obj.insert(QString("group_2"), ::OpenAPI::toJsonValue(m_group_2));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("time_range"), ::OpenAPI::toJsonValue(m_time_range));
    }
    return obj;
}

OAIMicroSecGroup OAIRecommendedRulesRequest::getGroup1() const {
    return m_group_1;
}
void OAIRecommendedRulesRequest::setGroup1(const OAIMicroSecGroup &group_1) {
    m_group_1 = group_1;
    m_group_1_isSet = true;
}

bool OAIRecommendedRulesRequest::is_group_1_Set() const{
    return m_group_1_isSet;
}

bool OAIRecommendedRulesRequest::is_group_1_Valid() const{
    return m_group_1_isValid;
}

OAIMicroSecGroup OAIRecommendedRulesRequest::getGroup2() const {
    return m_group_2;
}
void OAIRecommendedRulesRequest::setGroup2(const OAIMicroSecGroup &group_2) {
    m_group_2 = group_2;
    m_group_2_isSet = true;
}

bool OAIRecommendedRulesRequest::is_group_2_Set() const{
    return m_group_2_isSet;
}

bool OAIRecommendedRulesRequest::is_group_2_Valid() const{
    return m_group_2_isValid;
}

OAITimeRange OAIRecommendedRulesRequest::getTimeRange() const {
    return m_time_range;
}
void OAIRecommendedRulesRequest::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIRecommendedRulesRequest::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIRecommendedRulesRequest::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAIRecommendedRulesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedRulesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
