/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVPC.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVPC::OAIVPC(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVPC::OAIVPC() {
    this->initializeModel();
}

OAIVPC::~OAIVPC() {}

void OAIVPC::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_cidr_block_isSet = false;
    m_cidr_block_isValid = false;

    m_default_vpc_isSet = false;
    m_default_vpc_isValid = false;

    m_last_synched_time_isSet = false;
    m_last_synched_time_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIVPC::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVPC::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cidr_block, json[QString("cidr_block")]);
    m_cidr_block_isSet = !json[QString("cidr_block")].isNull() && m_cidr_block_isValid;

    m_default_vpc_isValid = ::OpenAPI::fromJsonValue(m_default_vpc, json[QString("default_vpc")]);
    m_default_vpc_isSet = !json[QString("default_vpc")].isNull() && m_default_vpc_isValid;

    m_last_synched_time_isValid = ::OpenAPI::fromJsonValue(m_last_synched_time, json[QString("last_synched_time")]);
    m_last_synched_time_isSet = !json[QString("last_synched_time")].isNull() && m_last_synched_time_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAIVPC::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVPC::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_cidr_block.isSet()) {
        obj.insert(QString("cidr_block"), ::OpenAPI::toJsonValue(m_cidr_block));
    }
    if (m_default_vpc_isSet) {
        obj.insert(QString("default_vpc"), ::OpenAPI::toJsonValue(m_default_vpc));
    }
    if (m_last_synched_time_isSet) {
        obj.insert(QString("last_synched_time"), ::OpenAPI::toJsonValue(m_last_synched_time));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QString OAIVPC::getEntityId() const {
    return m_entity_id;
}
void OAIVPC::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIVPC::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIVPC::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIVPC::getEntityType() const {
    return m_entity_type;
}
void OAIVPC::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIVPC::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIVPC::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIVPC::getName() const {
    return m_name;
}
void OAIVPC::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVPC::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVPC::is_name_Valid() const{
    return m_name_isValid;
}

OAIIpV4Address OAIVPC::getCidrBlock() const {
    return m_cidr_block;
}
void OAIVPC::setCidrBlock(const OAIIpV4Address &cidr_block) {
    m_cidr_block = cidr_block;
    m_cidr_block_isSet = true;
}

bool OAIVPC::is_cidr_block_Set() const{
    return m_cidr_block_isSet;
}

bool OAIVPC::is_cidr_block_Valid() const{
    return m_cidr_block_isValid;
}

bool OAIVPC::isDefaultVpc() const {
    return m_default_vpc;
}
void OAIVPC::setDefaultVpc(const bool &default_vpc) {
    m_default_vpc = default_vpc;
    m_default_vpc_isSet = true;
}

bool OAIVPC::is_default_vpc_Set() const{
    return m_default_vpc_isSet;
}

bool OAIVPC::is_default_vpc_Valid() const{
    return m_default_vpc_isValid;
}

qint64 OAIVPC::getLastSynchedTime() const {
    return m_last_synched_time;
}
void OAIVPC::setLastSynchedTime(const qint64 &last_synched_time) {
    m_last_synched_time = last_synched_time;
    m_last_synched_time_isSet = true;
}

bool OAIVPC::is_last_synched_time_Set() const{
    return m_last_synched_time_isSet;
}

bool OAIVPC::is_last_synched_time_Valid() const{
    return m_last_synched_time_isValid;
}

QString OAIVPC::getRegion() const {
    return m_region;
}
void OAIVPC::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIVPC::is_region_Set() const{
    return m_region_isSet;
}

bool OAIVPC::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIVPC::getState() const {
    return m_state;
}
void OAIVPC::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVPC::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVPC::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVPC::getVendorId() const {
    return m_vendor_id;
}
void OAIVPC::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIVPC::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIVPC::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIVPC::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_block.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_synched_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVPC::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
