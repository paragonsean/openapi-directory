/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowTag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowTag::OAIFlowTag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowTag::OAIFlowTag() {
    this->initializeModel();
}

OAIFlowTag::~OAIFlowTag() {}

void OAIFlowTag::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFlowTag::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFlowTag::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TAG_TRAFFIC_TYPE_UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::TRAFFIC_TYPE_UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_INTERNET_TRAFFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::INTERNET_TRAFFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_EAST_WEST_TRAFFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::EAST_WEST_TRAFFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_VM_VM_TRAFFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::VM_VM_TRAFFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_VM_PHY_TRAFFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::VM_PHY_TRAFFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_PHY_PHY_TRAFFIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::PHY_PHY_TRAFFIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_VMKNIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_VMKNIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_VMKNIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_VMKNIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_VM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_VM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_VM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_VM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_INTERNET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_INTERNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_INTERNET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_INTERNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_PHYSICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_PHYSICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_PHYSICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_PHYSICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SAME_HOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SAME_HOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DIFF_HOST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DIFF_HOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SHARED_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SHARED_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_NOT_SHARED_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::NOT_SHARED_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_NETWORK_SWITCHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::NETWORK_SWITCHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_NETWORK_ROUTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::NETWORK_ROUTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_NETWORK_UNKNOWN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::NETWORK_UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_VTEP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_VTEP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_VTEP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_VTEP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_UNICAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::UNICAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_BROADCAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::BROADCAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_MULTICAST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::MULTICAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_LINK_LOCAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_LINK_LOCAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_LINK_LOCAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_LINK_LOCAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_CLASS_E", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_CLASS_E;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_CLASS_E", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_CLASS_E;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_IP_CLASS_A_RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_IP_CLASS_A_RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_IP_CLASS_A_RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_IP_CLASS_A_RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_INVALID_IP_PACKETS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::INVALID_IP_PACKETS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_NOT_ANALYZED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::NOT_ANALYZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_GENERIC_INTERNET_SRC_IP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::GENERIC_INTERNET_SRC_IP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SNAT_DNAT_FLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SNAT_DNAT_FLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_MULTINICS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::MULTINICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_VC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_VC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_VC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_VC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_SRC_AWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::SRC_AWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DST_AWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DST_AWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_WITHIN_DC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::WITHIN_DC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DIFF_DC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DIFF_DC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_WITHIN_VPC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::WITHIN_VPC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TAG_DIFF_VPC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFlowTag::DIFF_VPC;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFlowTag::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFlowTag::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFlowTag::TRAFFIC_TYPE_UNKNOWN:
            val = "TAG_TRAFFIC_TYPE_UNKNOWN";
            break;
        case eOAIFlowTag::INTERNET_TRAFFIC:
            val = "TAG_INTERNET_TRAFFIC";
            break;
        case eOAIFlowTag::EAST_WEST_TRAFFIC:
            val = "TAG_EAST_WEST_TRAFFIC";
            break;
        case eOAIFlowTag::VM_VM_TRAFFIC:
            val = "TAG_VM_VM_TRAFFIC";
            break;
        case eOAIFlowTag::VM_PHY_TRAFFIC:
            val = "TAG_VM_PHY_TRAFFIC";
            break;
        case eOAIFlowTag::PHY_PHY_TRAFFIC:
            val = "TAG_PHY_PHY_TRAFFIC";
            break;
        case eOAIFlowTag::SRC_IP_VMKNIC:
            val = "TAG_SRC_IP_VMKNIC";
            break;
        case eOAIFlowTag::DST_IP_VMKNIC:
            val = "TAG_DST_IP_VMKNIC";
            break;
        case eOAIFlowTag::SRC_IP_VM:
            val = "TAG_SRC_IP_VM";
            break;
        case eOAIFlowTag::DST_IP_VM:
            val = "TAG_DST_IP_VM";
            break;
        case eOAIFlowTag::SRC_IP_INTERNET:
            val = "TAG_SRC_IP_INTERNET";
            break;
        case eOAIFlowTag::DST_IP_INTERNET:
            val = "TAG_DST_IP_INTERNET";
            break;
        case eOAIFlowTag::SRC_IP_PHYSICAL:
            val = "TAG_SRC_IP_PHYSICAL";
            break;
        case eOAIFlowTag::DST_IP_PHYSICAL:
            val = "TAG_DST_IP_PHYSICAL";
            break;
        case eOAIFlowTag::SAME_HOST:
            val = "TAG_SAME_HOST";
            break;
        case eOAIFlowTag::DIFF_HOST:
            val = "TAG_DIFF_HOST";
            break;
        case eOAIFlowTag::SHARED_SERVICE:
            val = "TAG_SHARED_SERVICE";
            break;
        case eOAIFlowTag::NOT_SHARED_SERVICE:
            val = "TAG_NOT_SHARED_SERVICE";
            break;
        case eOAIFlowTag::NETWORK_SWITCHED:
            val = "TAG_NETWORK_SWITCHED";
            break;
        case eOAIFlowTag::NETWORK_ROUTED:
            val = "TAG_NETWORK_ROUTED";
            break;
        case eOAIFlowTag::NETWORK_UNKNOWN:
            val = "TAG_NETWORK_UNKNOWN";
            break;
        case eOAIFlowTag::SRC_IP_VTEP:
            val = "TAG_SRC_IP_VTEP";
            break;
        case eOAIFlowTag::DST_IP_VTEP:
            val = "TAG_DST_IP_VTEP";
            break;
        case eOAIFlowTag::UNICAST:
            val = "TAG_UNICAST";
            break;
        case eOAIFlowTag::BROADCAST:
            val = "TAG_BROADCAST";
            break;
        case eOAIFlowTag::MULTICAST:
            val = "TAG_MULTICAST";
            break;
        case eOAIFlowTag::SRC_IP_LINK_LOCAL:
            val = "TAG_SRC_IP_LINK_LOCAL";
            break;
        case eOAIFlowTag::DST_IP_LINK_LOCAL:
            val = "TAG_DST_IP_LINK_LOCAL";
            break;
        case eOAIFlowTag::SRC_IP_CLASS_E:
            val = "TAG_SRC_IP_CLASS_E";
            break;
        case eOAIFlowTag::DST_IP_CLASS_E:
            val = "TAG_DST_IP_CLASS_E";
            break;
        case eOAIFlowTag::SRC_IP_CLASS_A_RESERVED:
            val = "TAG_SRC_IP_CLASS_A_RESERVED";
            break;
        case eOAIFlowTag::DST_IP_CLASS_A_RESERVED:
            val = "TAG_DST_IP_CLASS_A_RESERVED";
            break;
        case eOAIFlowTag::INVALID_IP_PACKETS:
            val = "TAG_INVALID_IP_PACKETS";
            break;
        case eOAIFlowTag::NOT_ANALYZED:
            val = "TAG_NOT_ANALYZED";
            break;
        case eOAIFlowTag::GENERIC_INTERNET_SRC_IP:
            val = "TAG_GENERIC_INTERNET_SRC_IP";
            break;
        case eOAIFlowTag::SNAT_DNAT_FLOW:
            val = "TAG_SNAT_DNAT_FLOW";
            break;
        case eOAIFlowTag::MULTINICS:
            val = "TAG_MULTINICS";
            break;
        case eOAIFlowTag::SRC_VC:
            val = "TAG_SRC_VC";
            break;
        case eOAIFlowTag::DST_VC:
            val = "TAG_DST_VC";
            break;
        case eOAIFlowTag::SRC_AWS:
            val = "TAG_SRC_AWS";
            break;
        case eOAIFlowTag::DST_AWS:
            val = "TAG_DST_AWS";
            break;
        case eOAIFlowTag::WITHIN_DC:
            val = "TAG_WITHIN_DC";
            break;
        case eOAIFlowTag::DIFF_DC:
            val = "TAG_DIFF_DC";
            break;
        case eOAIFlowTag::WITHIN_VPC:
            val = "TAG_WITHIN_VPC";
            break;
        case eOAIFlowTag::DIFF_VPC:
            val = "TAG_DIFF_VPC";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFlowTag::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFlowTag::eOAIFlowTag OAIFlowTag::getValue() const {
    return m_value;
}

void OAIFlowTag::setValue(const OAIFlowTag::eOAIFlowTag& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFlowTag::isSet() const {
    
    return m_value_isSet;
}

bool OAIFlowTag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
