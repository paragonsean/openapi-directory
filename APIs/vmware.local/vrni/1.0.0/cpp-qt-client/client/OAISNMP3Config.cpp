/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISNMP3Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISNMP3Config::OAISNMP3Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISNMP3Config::OAISNMP3Config() {
    this->initializeModel();
}

OAISNMP3Config::~OAISNMP3Config() {}

void OAISNMP3Config::initializeModel() {

    m_authentication_password_isSet = false;
    m_authentication_password_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_context_name_isSet = false;
    m_context_name_isValid = false;

    m_privacy_password_isSet = false;
    m_privacy_password_isValid = false;

    m_privacy_type_isSet = false;
    m_privacy_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAISNMP3Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISNMP3Config::fromJsonObject(QJsonObject json) {

    m_authentication_password_isValid = ::OpenAPI::fromJsonValue(m_authentication_password, json[QString("authentication_password")]);
    m_authentication_password_isSet = !json[QString("authentication_password")].isNull() && m_authentication_password_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authentication_type")]);
    m_authentication_type_isSet = !json[QString("authentication_type")].isNull() && m_authentication_type_isValid;

    m_context_name_isValid = ::OpenAPI::fromJsonValue(m_context_name, json[QString("context_name")]);
    m_context_name_isSet = !json[QString("context_name")].isNull() && m_context_name_isValid;

    m_privacy_password_isValid = ::OpenAPI::fromJsonValue(m_privacy_password, json[QString("privacy_password")]);
    m_privacy_password_isSet = !json[QString("privacy_password")].isNull() && m_privacy_password_isValid;

    m_privacy_type_isValid = ::OpenAPI::fromJsonValue(m_privacy_type, json[QString("privacy_type")]);
    m_privacy_type_isSet = !json[QString("privacy_type")].isNull() && m_privacy_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAISNMP3Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISNMP3Config::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_password_isSet) {
        obj.insert(QString("authentication_password"), ::OpenAPI::toJsonValue(m_authentication_password));
    }
    if (m_authentication_type_isSet) {
        obj.insert(QString("authentication_type"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_context_name_isSet) {
        obj.insert(QString("context_name"), ::OpenAPI::toJsonValue(m_context_name));
    }
    if (m_privacy_password_isSet) {
        obj.insert(QString("privacy_password"), ::OpenAPI::toJsonValue(m_privacy_password));
    }
    if (m_privacy_type_isSet) {
        obj.insert(QString("privacy_type"), ::OpenAPI::toJsonValue(m_privacy_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAISNMP3Config::getAuthenticationPassword() const {
    return m_authentication_password;
}
void OAISNMP3Config::setAuthenticationPassword(const QString &authentication_password) {
    m_authentication_password = authentication_password;
    m_authentication_password_isSet = true;
}

bool OAISNMP3Config::is_authentication_password_Set() const{
    return m_authentication_password_isSet;
}

bool OAISNMP3Config::is_authentication_password_Valid() const{
    return m_authentication_password_isValid;
}

QString OAISNMP3Config::getAuthenticationType() const {
    return m_authentication_type;
}
void OAISNMP3Config::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAISNMP3Config::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAISNMP3Config::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAISNMP3Config::getContextName() const {
    return m_context_name;
}
void OAISNMP3Config::setContextName(const QString &context_name) {
    m_context_name = context_name;
    m_context_name_isSet = true;
}

bool OAISNMP3Config::is_context_name_Set() const{
    return m_context_name_isSet;
}

bool OAISNMP3Config::is_context_name_Valid() const{
    return m_context_name_isValid;
}

QString OAISNMP3Config::getPrivacyPassword() const {
    return m_privacy_password;
}
void OAISNMP3Config::setPrivacyPassword(const QString &privacy_password) {
    m_privacy_password = privacy_password;
    m_privacy_password_isSet = true;
}

bool OAISNMP3Config::is_privacy_password_Set() const{
    return m_privacy_password_isSet;
}

bool OAISNMP3Config::is_privacy_password_Valid() const{
    return m_privacy_password_isValid;
}

QString OAISNMP3Config::getPrivacyType() const {
    return m_privacy_type;
}
void OAISNMP3Config::setPrivacyType(const QString &privacy_type) {
    m_privacy_type = privacy_type;
    m_privacy_type_isSet = true;
}

bool OAISNMP3Config::is_privacy_type_Set() const{
    return m_privacy_type_isSet;
}

bool OAISNMP3Config::is_privacy_type_Valid() const{
    return m_privacy_type_isValid;
}

QString OAISNMP3Config::getUsername() const {
    return m_username;
}
void OAISNMP3Config::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAISNMP3Config::is_username_Set() const{
    return m_username_isSet;
}

bool OAISNMP3Config::is_username_Valid() const{
    return m_username_isValid;
}

bool OAISNMP3Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISNMP3Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
