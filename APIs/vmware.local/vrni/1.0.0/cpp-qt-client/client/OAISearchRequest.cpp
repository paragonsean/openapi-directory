/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRequest::OAISearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRequest::OAISearchRequest() {
    this->initializeModel();
}

OAISearchRequest::~OAISearchRequest() {}

void OAISearchRequest::initializeModel() {

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;
}

void OAISearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRequest::fromJsonObject(QJsonObject json) {

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sort_by")]);
    m_sort_by_isSet = !json[QString("sort_by")].isNull() && m_sort_by_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("time_range")]);
    m_time_range_isSet = !json[QString("time_range")].isNull() && m_time_range_isValid;
}

QString OAISearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("sort_by"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_time_range.isSet()) {
        obj.insert(QString("time_range"), ::OpenAPI::toJsonValue(m_time_range));
    }
    return obj;
}

QString OAISearchRequest::getCursor() const {
    return m_cursor;
}
void OAISearchRequest::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAISearchRequest::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAISearchRequest::is_cursor_Valid() const{
    return m_cursor_isValid;
}

OAIAllEntityType OAISearchRequest::getEntityType() const {
    return m_entity_type;
}
void OAISearchRequest::setEntityType(const OAIAllEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAISearchRequest::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAISearchRequest::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAISearchRequest::getFilter() const {
    return m_filter;
}
void OAISearchRequest::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISearchRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISearchRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAISearchRequest::getSize() const {
    return m_size;
}
void OAISearchRequest::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISearchRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAISearchRequest::is_size_Valid() const{
    return m_size_isValid;
}

OAISortByClause OAISearchRequest::getSortBy() const {
    return m_sort_by;
}
void OAISearchRequest::setSortBy(const OAISortByClause &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAISearchRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAISearchRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAITimeRange OAISearchRequest::getTimeRange() const {
    return m_time_range;
}
void OAISearchRequest::setTimeRange(const OAITimeRange &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAISearchRequest::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAISearchRequest::is_time_range_Valid() const{
    return m_time_range_isValid;
}

bool OAISearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
