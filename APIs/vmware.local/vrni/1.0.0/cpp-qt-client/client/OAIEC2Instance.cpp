/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEC2Instance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEC2Instance::OAIEC2Instance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEC2Instance::OAIEC2Instance() {
    this->initializeModel();
}

OAIEC2Instance::~OAIEC2Instance() {}

void OAIEC2Instance::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_destination_firewall_rules_isSet = false;
    m_destination_firewall_rules_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_ip_sets_isSet = false;
    m_ip_sets_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;

    m_source_firewall_rules_isSet = false;
    m_source_firewall_rules_isValid = false;

    m_vnics_isSet = false;
    m_vnics_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;
}

void OAIEC2Instance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEC2Instance::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("default_gateway")]);
    m_default_gateway_isSet = !json[QString("default_gateway")].isNull() && m_default_gateway_isValid;

    m_destination_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_destination_firewall_rules, json[QString("destination_firewall_rules")]);
    m_destination_firewall_rules_isSet = !json[QString("destination_firewall_rules")].isNull() && m_destination_firewall_rules_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ip_addresses")]);
    m_ip_addresses_isSet = !json[QString("ip_addresses")].isNull() && m_ip_addresses_isValid;

    m_ip_sets_isValid = ::OpenAPI::fromJsonValue(m_ip_sets, json[QString("ip_sets")]);
    m_ip_sets_isSet = !json[QString("ip_sets")].isNull() && m_ip_sets_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("security_groups")]);
    m_security_groups_isSet = !json[QString("security_groups")].isNull() && m_security_groups_isValid;

    m_source_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_source_firewall_rules, json[QString("source_firewall_rules")]);
    m_source_firewall_rules_isSet = !json[QString("source_firewall_rules")].isNull() && m_source_firewall_rules_isValid;

    m_vnics_isValid = ::OpenAPI::fromJsonValue(m_vnics, json[QString("vnics")]);
    m_vnics_isSet = !json[QString("vnics")].isNull() && m_vnics_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("vpc")]);
    m_vpc_isSet = !json[QString("vpc")].isNull() && m_vpc_isValid;
}

QString OAIEC2Instance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEC2Instance::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_default_gateway_isSet) {
        obj.insert(QString("default_gateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_destination_firewall_rules.size() > 0) {
        obj.insert(QString("destination_firewall_rules"), ::OpenAPI::toJsonValue(m_destination_firewall_rules));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ip_addresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_ip_sets.size() > 0) {
        obj.insert(QString("ip_sets"), ::OpenAPI::toJsonValue(m_ip_sets));
    }
    if (m_security_groups.size() > 0) {
        obj.insert(QString("security_groups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    if (m_source_firewall_rules.size() > 0) {
        obj.insert(QString("source_firewall_rules"), ::OpenAPI::toJsonValue(m_source_firewall_rules));
    }
    if (m_vnics.size() > 0) {
        obj.insert(QString("vnics"), ::OpenAPI::toJsonValue(m_vnics));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_vpc.isSet()) {
        obj.insert(QString("vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    return obj;
}

QString OAIEC2Instance::getEntityId() const {
    return m_entity_id;
}
void OAIEC2Instance::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEC2Instance::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEC2Instance::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIEC2Instance::getEntityType() const {
    return m_entity_type;
}
void OAIEC2Instance::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEC2Instance::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEC2Instance::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEC2Instance::getName() const {
    return m_name;
}
void OAIEC2Instance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEC2Instance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEC2Instance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEC2Instance::getDefaultGateway() const {
    return m_default_gateway;
}
void OAIEC2Instance::setDefaultGateway(const QString &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAIEC2Instance::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAIEC2Instance::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QList<OAIRuleSet> OAIEC2Instance::getDestinationFirewallRules() const {
    return m_destination_firewall_rules;
}
void OAIEC2Instance::setDestinationFirewallRules(const QList<OAIRuleSet> &destination_firewall_rules) {
    m_destination_firewall_rules = destination_firewall_rules;
    m_destination_firewall_rules_isSet = true;
}

bool OAIEC2Instance::is_destination_firewall_rules_Set() const{
    return m_destination_firewall_rules_isSet;
}

bool OAIEC2Instance::is_destination_firewall_rules_Valid() const{
    return m_destination_firewall_rules_isValid;
}

QList<OAIIpV4Address> OAIEC2Instance::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIEC2Instance::setIpAddresses(const QList<OAIIpV4Address> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIEC2Instance::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIEC2Instance::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList<OAIReference> OAIEC2Instance::getIpSets() const {
    return m_ip_sets;
}
void OAIEC2Instance::setIpSets(const QList<OAIReference> &ip_sets) {
    m_ip_sets = ip_sets;
    m_ip_sets_isSet = true;
}

bool OAIEC2Instance::is_ip_sets_Set() const{
    return m_ip_sets_isSet;
}

bool OAIEC2Instance::is_ip_sets_Valid() const{
    return m_ip_sets_isValid;
}

QList<OAIReference> OAIEC2Instance::getSecurityGroups() const {
    return m_security_groups;
}
void OAIEC2Instance::setSecurityGroups(const QList<OAIReference> &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAIEC2Instance::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAIEC2Instance::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

QList<OAIRuleSet> OAIEC2Instance::getSourceFirewallRules() const {
    return m_source_firewall_rules;
}
void OAIEC2Instance::setSourceFirewallRules(const QList<OAIRuleSet> &source_firewall_rules) {
    m_source_firewall_rules = source_firewall_rules;
    m_source_firewall_rules_isSet = true;
}

bool OAIEC2Instance::is_source_firewall_rules_Set() const{
    return m_source_firewall_rules_isSet;
}

bool OAIEC2Instance::is_source_firewall_rules_Valid() const{
    return m_source_firewall_rules_isValid;
}

QList<OAIReference> OAIEC2Instance::getVnics() const {
    return m_vnics;
}
void OAIEC2Instance::setVnics(const QList<OAIReference> &vnics) {
    m_vnics = vnics;
    m_vnics_isSet = true;
}

bool OAIEC2Instance::is_vnics_Set() const{
    return m_vnics_isSet;
}

bool OAIEC2Instance::is_vnics_Valid() const{
    return m_vnics_isValid;
}

QString OAIEC2Instance::getRegion() const {
    return m_region;
}
void OAIEC2Instance::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIEC2Instance::is_region_Set() const{
    return m_region_isSet;
}

bool OAIEC2Instance::is_region_Valid() const{
    return m_region_isValid;
}

OAIReference OAIEC2Instance::getVpc() const {
    return m_vpc;
}
void OAIEC2Instance::setVpc(const OAIReference &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIEC2Instance::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIEC2Instance::is_vpc_Valid() const{
    return m_vpc_isValid;
}

bool OAIEC2Instance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vnics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEC2Instance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
