/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchMembershipCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchMembershipCriteria::OAISearchMembershipCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchMembershipCriteria::OAISearchMembershipCriteria() {
    this->initializeModel();
}

OAISearchMembershipCriteria::~OAISearchMembershipCriteria() {}

void OAISearchMembershipCriteria::initializeModel() {

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;
}

void OAISearchMembershipCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchMembershipCriteria::fromJsonObject(QJsonObject json) {

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;
}

QString OAISearchMembershipCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchMembershipCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    return obj;
}

OAIAllEntityType OAISearchMembershipCriteria::getEntityType() const {
    return m_entity_type;
}
void OAISearchMembershipCriteria::setEntityType(const OAIAllEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAISearchMembershipCriteria::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAISearchMembershipCriteria::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAISearchMembershipCriteria::getFilter() const {
    return m_filter;
}
void OAISearchMembershipCriteria::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISearchMembershipCriteria::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISearchMembershipCriteria::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAISearchMembershipCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchMembershipCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
