/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseEvent::OAIBaseEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseEvent::OAIBaseEvent() {
    this->initializeModel();
}

OAIBaseEvent::~OAIBaseEvent() {}

void OAIBaseEvent::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_admin_state_isSet = false;
    m_admin_state_isValid = false;

    m_anchor_entities_isSet = false;
    m_anchor_entities_isValid = false;

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_event_tags_isSet = false;
    m_event_tags_isValid = false;

    m_event_time_epoch_ms_isSet = false;
    m_event_time_epoch_ms_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_related_entities_isSet = false;
    m_related_entities_isValid = false;
}

void OAIBaseEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseEvent::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_admin_state_isValid = ::OpenAPI::fromJsonValue(m_admin_state, json[QString("admin_state")]);
    m_admin_state_isSet = !json[QString("admin_state")].isNull() && m_admin_state_isValid;

    m_anchor_entities_isValid = ::OpenAPI::fromJsonValue(m_anchor_entities, json[QString("anchor_entities")]);
    m_anchor_entities_isSet = !json[QString("anchor_entities")].isNull() && m_anchor_entities_isValid;

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_event_tags_isValid = ::OpenAPI::fromJsonValue(m_event_tags, json[QString("event_tags")]);
    m_event_tags_isSet = !json[QString("event_tags")].isNull() && m_event_tags_isValid;

    m_event_time_epoch_ms_isValid = ::OpenAPI::fromJsonValue(m_event_time_epoch_ms, json[QString("event_time_epoch_ms")]);
    m_event_time_epoch_ms_isSet = !json[QString("event_time_epoch_ms")].isNull() && m_event_time_epoch_ms_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_related_entities_isValid = ::OpenAPI::fromJsonValue(m_related_entities, json[QString("related_entities")]);
    m_related_entities_isSet = !json[QString("related_entities")].isNull() && m_related_entities_isValid;
}

QString OAIBaseEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_admin_state_isSet) {
        obj.insert(QString("admin_state"), ::OpenAPI::toJsonValue(m_admin_state));
    }
    if (m_anchor_entities.size() > 0) {
        obj.insert(QString("anchor_entities"), ::OpenAPI::toJsonValue(m_anchor_entities));
    }
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_event_tags.size() > 0) {
        obj.insert(QString("event_tags"), ::OpenAPI::toJsonValue(m_event_tags));
    }
    if (m_event_time_epoch_ms_isSet) {
        obj.insert(QString("event_time_epoch_ms"), ::OpenAPI::toJsonValue(m_event_time_epoch_ms));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_related_entities.size() > 0) {
        obj.insert(QString("related_entities"), ::OpenAPI::toJsonValue(m_related_entities));
    }
    return obj;
}

QString OAIBaseEvent::getEntityId() const {
    return m_entity_id;
}
void OAIBaseEvent::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIBaseEvent::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIBaseEvent::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIBaseEvent::getEntityType() const {
    return m_entity_type;
}
void OAIBaseEvent::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIBaseEvent::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIBaseEvent::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIBaseEvent::getName() const {
    return m_name;
}
void OAIBaseEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBaseEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBaseEvent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBaseEvent::getAdminState() const {
    return m_admin_state;
}
void OAIBaseEvent::setAdminState(const QString &admin_state) {
    m_admin_state = admin_state;
    m_admin_state_isSet = true;
}

bool OAIBaseEvent::is_admin_state_Set() const{
    return m_admin_state_isSet;
}

bool OAIBaseEvent::is_admin_state_Valid() const{
    return m_admin_state_isValid;
}

QList<OAIReference> OAIBaseEvent::getAnchorEntities() const {
    return m_anchor_entities;
}
void OAIBaseEvent::setAnchorEntities(const QList<OAIReference> &anchor_entities) {
    m_anchor_entities = anchor_entities;
    m_anchor_entities_isSet = true;
}

bool OAIBaseEvent::is_anchor_entities_Set() const{
    return m_anchor_entities_isSet;
}

bool OAIBaseEvent::is_anchor_entities_Valid() const{
    return m_anchor_entities_isValid;
}

bool OAIBaseEvent::isArchived() const {
    return m_archived;
}
void OAIBaseEvent::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIBaseEvent::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIBaseEvent::is_archived_Valid() const{
    return m_archived_isValid;
}

QList<QString> OAIBaseEvent::getEventTags() const {
    return m_event_tags;
}
void OAIBaseEvent::setEventTags(const QList<QString> &event_tags) {
    m_event_tags = event_tags;
    m_event_tags_isSet = true;
}

bool OAIBaseEvent::is_event_tags_Set() const{
    return m_event_tags_isSet;
}

bool OAIBaseEvent::is_event_tags_Valid() const{
    return m_event_tags_isValid;
}

qint64 OAIBaseEvent::getEventTimeEpochMs() const {
    return m_event_time_epoch_ms;
}
void OAIBaseEvent::setEventTimeEpochMs(const qint64 &event_time_epoch_ms) {
    m_event_time_epoch_ms = event_time_epoch_ms;
    m_event_time_epoch_ms_isSet = true;
}

bool OAIBaseEvent::is_event_time_epoch_ms_Set() const{
    return m_event_time_epoch_ms_isSet;
}

bool OAIBaseEvent::is_event_time_epoch_ms_Valid() const{
    return m_event_time_epoch_ms_isValid;
}

QString OAIBaseEvent::getMessage() const {
    return m_message;
}
void OAIBaseEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBaseEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBaseEvent::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIReference> OAIBaseEvent::getRelatedEntities() const {
    return m_related_entities;
}
void OAIBaseEvent::setRelatedEntities(const QList<OAIReference> &related_entities) {
    m_related_entities = related_entities;
    m_related_entities_isSet = true;
}

bool OAIBaseEvent::is_related_entities_Set() const{
    return m_related_entities_isSet;
}

bool OAIBaseEvent::is_related_entities_Valid() const{
    return m_related_entities_isValid;
}

bool OAIBaseEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anchor_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_epoch_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
