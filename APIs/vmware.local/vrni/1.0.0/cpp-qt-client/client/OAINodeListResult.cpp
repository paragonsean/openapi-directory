/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeListResult::OAINodeListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeListResult::OAINodeListResult() {
    this->initializeModel();
}

OAINodeListResult::~OAINodeListResult() {}

void OAINodeListResult::initializeModel() {

    m_results_isSet = false;
    m_results_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAINodeListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeListResult::fromJsonObject(QJsonObject json) {

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAINodeListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAINodeId> OAINodeListResult::getResults() const {
    return m_results;
}
void OAINodeListResult::setResults(const QList<OAINodeId> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAINodeListResult::is_results_Set() const{
    return m_results_isSet;
}

bool OAINodeListResult::is_results_Valid() const{
    return m_results_isValid;
}

qint32 OAINodeListResult::getTotalCount() const {
    return m_total_count;
}
void OAINodeListResult::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAINodeListResult::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAINodeListResult::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAINodeListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
