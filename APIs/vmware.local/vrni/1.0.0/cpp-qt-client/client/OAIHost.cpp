/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHost::OAIHost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHost::OAIHost() {
    this->initializeModel();
}

OAIHost::~OAIHost() {}

void OAIHost::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_datastores_isSet = false;
    m_datastores_isValid = false;

    m_maintenance_mode_isSet = false;
    m_maintenance_mode_isValid = false;

    m_nsx_manager_isSet = false;
    m_nsx_manager_isValid = false;

    m_service_tag_isSet = false;
    m_service_tag_isValid = false;

    m_vcenter_manager_isSet = false;
    m_vcenter_manager_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_vm_count_isSet = false;
    m_vm_count_isValid = false;

    m_vmknics_isSet = false;
    m_vmknics_isValid = false;
}

void OAIHost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHost::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("connection_state")]);
    m_connection_state_isSet = !json[QString("connection_state")].isNull() && m_connection_state_isValid;

    m_datastores_isValid = ::OpenAPI::fromJsonValue(m_datastores, json[QString("datastores")]);
    m_datastores_isSet = !json[QString("datastores")].isNull() && m_datastores_isValid;

    m_maintenance_mode_isValid = ::OpenAPI::fromJsonValue(m_maintenance_mode, json[QString("maintenance_mode")]);
    m_maintenance_mode_isSet = !json[QString("maintenance_mode")].isNull() && m_maintenance_mode_isValid;

    m_nsx_manager_isValid = ::OpenAPI::fromJsonValue(m_nsx_manager, json[QString("nsx_manager")]);
    m_nsx_manager_isSet = !json[QString("nsx_manager")].isNull() && m_nsx_manager_isValid;

    m_service_tag_isValid = ::OpenAPI::fromJsonValue(m_service_tag, json[QString("service_tag")]);
    m_service_tag_isSet = !json[QString("service_tag")].isNull() && m_service_tag_isValid;

    m_vcenter_manager_isValid = ::OpenAPI::fromJsonValue(m_vcenter_manager, json[QString("vcenter_manager")]);
    m_vcenter_manager_isSet = !json[QString("vcenter_manager")].isNull() && m_vcenter_manager_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_vm_count_isValid = ::OpenAPI::fromJsonValue(m_vm_count, json[QString("vm_count")]);
    m_vm_count_isSet = !json[QString("vm_count")].isNull() && m_vm_count_isValid;

    m_vmknics_isValid = ::OpenAPI::fromJsonValue(m_vmknics, json[QString("vmknics")]);
    m_vmknics_isSet = !json[QString("vmknics")].isNull() && m_vmknics_isValid;
}

QString OAIHost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHost::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_cluster.isSet()) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_connection_state_isSet) {
        obj.insert(QString("connection_state"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_datastores.size() > 0) {
        obj.insert(QString("datastores"), ::OpenAPI::toJsonValue(m_datastores));
    }
    if (m_maintenance_mode_isSet) {
        obj.insert(QString("maintenance_mode"), ::OpenAPI::toJsonValue(m_maintenance_mode));
    }
    if (m_nsx_manager.isSet()) {
        obj.insert(QString("nsx_manager"), ::OpenAPI::toJsonValue(m_nsx_manager));
    }
    if (m_service_tag_isSet) {
        obj.insert(QString("service_tag"), ::OpenAPI::toJsonValue(m_service_tag));
    }
    if (m_vcenter_manager.isSet()) {
        obj.insert(QString("vcenter_manager"), ::OpenAPI::toJsonValue(m_vcenter_manager));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_vm_count_isSet) {
        obj.insert(QString("vm_count"), ::OpenAPI::toJsonValue(m_vm_count));
    }
    if (m_vmknics.size() > 0) {
        obj.insert(QString("vmknics"), ::OpenAPI::toJsonValue(m_vmknics));
    }
    return obj;
}

QString OAIHost::getEntityId() const {
    return m_entity_id;
}
void OAIHost::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIHost::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIHost::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIHost::getEntityType() const {
    return m_entity_type;
}
void OAIHost::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIHost::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIHost::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIHost::getName() const {
    return m_name;
}
void OAIHost::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHost::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHost::is_name_Valid() const{
    return m_name_isValid;
}

OAIReference OAIHost::getCluster() const {
    return m_cluster;
}
void OAIHost::setCluster(const OAIReference &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIHost::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIHost::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIHost::getConnectionState() const {
    return m_connection_state;
}
void OAIHost::setConnectionState(const QString &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAIHost::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAIHost::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QList<OAIReference> OAIHost::getDatastores() const {
    return m_datastores;
}
void OAIHost::setDatastores(const QList<OAIReference> &datastores) {
    m_datastores = datastores;
    m_datastores_isSet = true;
}

bool OAIHost::is_datastores_Set() const{
    return m_datastores_isSet;
}

bool OAIHost::is_datastores_Valid() const{
    return m_datastores_isValid;
}

QString OAIHost::getMaintenanceMode() const {
    return m_maintenance_mode;
}
void OAIHost::setMaintenanceMode(const QString &maintenance_mode) {
    m_maintenance_mode = maintenance_mode;
    m_maintenance_mode_isSet = true;
}

bool OAIHost::is_maintenance_mode_Set() const{
    return m_maintenance_mode_isSet;
}

bool OAIHost::is_maintenance_mode_Valid() const{
    return m_maintenance_mode_isValid;
}

OAIReference OAIHost::getNsxManager() const {
    return m_nsx_manager;
}
void OAIHost::setNsxManager(const OAIReference &nsx_manager) {
    m_nsx_manager = nsx_manager;
    m_nsx_manager_isSet = true;
}

bool OAIHost::is_nsx_manager_Set() const{
    return m_nsx_manager_isSet;
}

bool OAIHost::is_nsx_manager_Valid() const{
    return m_nsx_manager_isValid;
}

QString OAIHost::getServiceTag() const {
    return m_service_tag;
}
void OAIHost::setServiceTag(const QString &service_tag) {
    m_service_tag = service_tag;
    m_service_tag_isSet = true;
}

bool OAIHost::is_service_tag_Set() const{
    return m_service_tag_isSet;
}

bool OAIHost::is_service_tag_Valid() const{
    return m_service_tag_isValid;
}

OAIReference OAIHost::getVcenterManager() const {
    return m_vcenter_manager;
}
void OAIHost::setVcenterManager(const OAIReference &vcenter_manager) {
    m_vcenter_manager = vcenter_manager;
    m_vcenter_manager_isSet = true;
}

bool OAIHost::is_vcenter_manager_Set() const{
    return m_vcenter_manager_isSet;
}

bool OAIHost::is_vcenter_manager_Valid() const{
    return m_vcenter_manager_isValid;
}

QString OAIHost::getVendorId() const {
    return m_vendor_id;
}
void OAIHost::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIHost::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIHost::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

qint32 OAIHost::getVmCount() const {
    return m_vm_count;
}
void OAIHost::setVmCount(const qint32 &vm_count) {
    m_vm_count = vm_count;
    m_vm_count_isSet = true;
}

bool OAIHost::is_vm_count_Set() const{
    return m_vm_count_isSet;
}

bool OAIHost::is_vm_count_Valid() const{
    return m_vm_count_isValid;
}

QList<OAIReference> OAIHost::getVmknics() const {
    return m_vmknics;
}
void OAIHost::setVmknics(const QList<OAIReference> &vmknics) {
    m_vmknics = vmknics;
    m_vmknics_isSet = true;
}

bool OAIHost::is_vmknics_Set() const{
    return m_vmknics_isSet;
}

bool OAIHost::is_vmknics_Valid() const{
    return m_vmknics_isValid;
}

bool OAIHost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmknics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
