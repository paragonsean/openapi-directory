/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINSXRedirectRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINSXRedirectRule::OAINSXRedirectRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINSXRedirectRule::OAINSXRedirectRule() {
    this->initializeModel();
}

OAINSXRedirectRule::~OAINSXRedirectRule() {}

void OAINSXRedirectRule::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_destination_any_isSet = false;
    m_destination_any_isValid = false;

    m_destination_inversion_isSet = false;
    m_destination_inversion_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_port_ranges_isSet = false;
    m_port_ranges_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_section_id_isSet = false;
    m_section_id_isValid = false;

    m_section_name_isSet = false;
    m_section_name_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_service_any_isSet = false;
    m_service_any_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_source_any_isSet = false;
    m_source_any_isValid = false;

    m_source_inversion_isSet = false;
    m_source_inversion_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_logging_enabled_isSet = false;
    m_logging_enabled_isValid = false;

    m_service_profile_isSet = false;
    m_service_profile_isValid = false;
}

void OAINSXRedirectRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINSXRedirectRule::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_destination_any_isValid = ::OpenAPI::fromJsonValue(m_destination_any, json[QString("destination_any")]);
    m_destination_any_isSet = !json[QString("destination_any")].isNull() && m_destination_any_isValid;

    m_destination_inversion_isValid = ::OpenAPI::fromJsonValue(m_destination_inversion, json[QString("destination_inversion")]);
    m_destination_inversion_isSet = !json[QString("destination_inversion")].isNull() && m_destination_inversion_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_port_ranges_isValid = ::OpenAPI::fromJsonValue(m_port_ranges, json[QString("port_ranges")]);
    m_port_ranges_isSet = !json[QString("port_ranges")].isNull() && m_port_ranges_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("rule_id")]);
    m_rule_id_isSet = !json[QString("rule_id")].isNull() && m_rule_id_isValid;

    m_section_id_isValid = ::OpenAPI::fromJsonValue(m_section_id, json[QString("section_id")]);
    m_section_id_isSet = !json[QString("section_id")].isNull() && m_section_id_isValid;

    m_section_name_isValid = ::OpenAPI::fromJsonValue(m_section_name, json[QString("section_name")]);
    m_section_name_isSet = !json[QString("section_name")].isNull() && m_section_name_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequence_number")]);
    m_sequence_number_isSet = !json[QString("sequence_number")].isNull() && m_sequence_number_isValid;

    m_service_any_isValid = ::OpenAPI::fromJsonValue(m_service_any, json[QString("service_any")]);
    m_service_any_isSet = !json[QString("service_any")].isNull() && m_service_any_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_source_any_isValid = ::OpenAPI::fromJsonValue(m_source_any, json[QString("source_any")]);
    m_source_any_isSet = !json[QString("source_any")].isNull() && m_source_any_isValid;

    m_source_inversion_isValid = ::OpenAPI::fromJsonValue(m_source_inversion, json[QString("source_inversion")]);
    m_source_inversion_isSet = !json[QString("source_inversion")].isNull() && m_source_inversion_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_logging_enabled, json[QString("logging_enabled")]);
    m_logging_enabled_isSet = !json[QString("logging_enabled")].isNull() && m_logging_enabled_isValid;

    m_service_profile_isValid = ::OpenAPI::fromJsonValue(m_service_profile, json[QString("service_profile")]);
    m_service_profile_isSet = !json[QString("service_profile")].isNull() && m_service_profile_isValid;
}

QString OAINSXRedirectRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINSXRedirectRule::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_destination_any_isSet) {
        obj.insert(QString("destination_any"), ::OpenAPI::toJsonValue(m_destination_any));
    }
    if (m_destination_inversion_isSet) {
        obj.insert(QString("destination_inversion"), ::OpenAPI::toJsonValue(m_destination_inversion));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_port_ranges.size() > 0) {
        obj.insert(QString("port_ranges"), ::OpenAPI::toJsonValue(m_port_ranges));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("rule_id"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_section_id_isSet) {
        obj.insert(QString("section_id"), ::OpenAPI::toJsonValue(m_section_id));
    }
    if (m_section_name_isSet) {
        obj.insert(QString("section_name"), ::OpenAPI::toJsonValue(m_section_name));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequence_number"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_service_any_isSet) {
        obj.insert(QString("service_any"), ::OpenAPI::toJsonValue(m_service_any));
    }
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_source_any_isSet) {
        obj.insert(QString("source_any"), ::OpenAPI::toJsonValue(m_source_any));
    }
    if (m_source_inversion_isSet) {
        obj.insert(QString("source_inversion"), ::OpenAPI::toJsonValue(m_source_inversion));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_direction.isSet()) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_logging_enabled_isSet) {
        obj.insert(QString("logging_enabled"), ::OpenAPI::toJsonValue(m_logging_enabled));
    }
    if (m_service_profile_isSet) {
        obj.insert(QString("service_profile"), ::OpenAPI::toJsonValue(m_service_profile));
    }
    return obj;
}

QString OAINSXRedirectRule::getEntityId() const {
    return m_entity_id;
}
void OAINSXRedirectRule::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAINSXRedirectRule::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAINSXRedirectRule::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAINSXRedirectRule::getEntityType() const {
    return m_entity_type;
}
void OAINSXRedirectRule::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAINSXRedirectRule::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAINSXRedirectRule::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAINSXRedirectRule::getName() const {
    return m_name;
}
void OAINSXRedirectRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINSXRedirectRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAINSXRedirectRule::is_name_Valid() const{
    return m_name_isValid;
}

OAIFirewallAction OAINSXRedirectRule::getAction() const {
    return m_action;
}
void OAINSXRedirectRule::setAction(const OAIFirewallAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAINSXRedirectRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAINSXRedirectRule::is_action_Valid() const{
    return m_action_isValid;
}

bool OAINSXRedirectRule::isDestinationAny() const {
    return m_destination_any;
}
void OAINSXRedirectRule::setDestinationAny(const bool &destination_any) {
    m_destination_any = destination_any;
    m_destination_any_isSet = true;
}

bool OAINSXRedirectRule::is_destination_any_Set() const{
    return m_destination_any_isSet;
}

bool OAINSXRedirectRule::is_destination_any_Valid() const{
    return m_destination_any_isValid;
}

bool OAINSXRedirectRule::isDestinationInversion() const {
    return m_destination_inversion;
}
void OAINSXRedirectRule::setDestinationInversion(const bool &destination_inversion) {
    m_destination_inversion = destination_inversion;
    m_destination_inversion_isSet = true;
}

bool OAINSXRedirectRule::is_destination_inversion_Set() const{
    return m_destination_inversion_isSet;
}

bool OAINSXRedirectRule::is_destination_inversion_Valid() const{
    return m_destination_inversion_isValid;
}

QList<OAIReference> OAINSXRedirectRule::getDestinations() const {
    return m_destinations;
}
void OAINSXRedirectRule::setDestinations(const QList<OAIReference> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAINSXRedirectRule::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAINSXRedirectRule::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAINSXRedirectRule::isDisabled() const {
    return m_disabled;
}
void OAINSXRedirectRule::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAINSXRedirectRule::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAINSXRedirectRule::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QList<OAIPortRange> OAINSXRedirectRule::getPortRanges() const {
    return m_port_ranges;
}
void OAINSXRedirectRule::setPortRanges(const QList<OAIPortRange> &port_ranges) {
    m_port_ranges = port_ranges;
    m_port_ranges_isSet = true;
}

bool OAINSXRedirectRule::is_port_ranges_Set() const{
    return m_port_ranges_isSet;
}

bool OAINSXRedirectRule::is_port_ranges_Valid() const{
    return m_port_ranges_isValid;
}

QString OAINSXRedirectRule::getRuleId() const {
    return m_rule_id;
}
void OAINSXRedirectRule::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAINSXRedirectRule::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAINSXRedirectRule::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAINSXRedirectRule::getSectionId() const {
    return m_section_id;
}
void OAINSXRedirectRule::setSectionId(const QString &section_id) {
    m_section_id = section_id;
    m_section_id_isSet = true;
}

bool OAINSXRedirectRule::is_section_id_Set() const{
    return m_section_id_isSet;
}

bool OAINSXRedirectRule::is_section_id_Valid() const{
    return m_section_id_isValid;
}

QString OAINSXRedirectRule::getSectionName() const {
    return m_section_name;
}
void OAINSXRedirectRule::setSectionName(const QString &section_name) {
    m_section_name = section_name;
    m_section_name_isSet = true;
}

bool OAINSXRedirectRule::is_section_name_Set() const{
    return m_section_name_isSet;
}

bool OAINSXRedirectRule::is_section_name_Valid() const{
    return m_section_name_isValid;
}

qint32 OAINSXRedirectRule::getSequenceNumber() const {
    return m_sequence_number;
}
void OAINSXRedirectRule::setSequenceNumber(const qint32 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAINSXRedirectRule::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAINSXRedirectRule::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAINSXRedirectRule::isServiceAny() const {
    return m_service_any;
}
void OAINSXRedirectRule::setServiceAny(const bool &service_any) {
    m_service_any = service_any;
    m_service_any_isSet = true;
}

bool OAINSXRedirectRule::is_service_any_Set() const{
    return m_service_any_isSet;
}

bool OAINSXRedirectRule::is_service_any_Valid() const{
    return m_service_any_isValid;
}

QList<OAIReference> OAINSXRedirectRule::getServices() const {
    return m_services;
}
void OAINSXRedirectRule::setServices(const QList<OAIReference> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAINSXRedirectRule::is_services_Set() const{
    return m_services_isSet;
}

bool OAINSXRedirectRule::is_services_Valid() const{
    return m_services_isValid;
}

bool OAINSXRedirectRule::isSourceAny() const {
    return m_source_any;
}
void OAINSXRedirectRule::setSourceAny(const bool &source_any) {
    m_source_any = source_any;
    m_source_any_isSet = true;
}

bool OAINSXRedirectRule::is_source_any_Set() const{
    return m_source_any_isSet;
}

bool OAINSXRedirectRule::is_source_any_Valid() const{
    return m_source_any_isValid;
}

bool OAINSXRedirectRule::isSourceInversion() const {
    return m_source_inversion;
}
void OAINSXRedirectRule::setSourceInversion(const bool &source_inversion) {
    m_source_inversion = source_inversion;
    m_source_inversion_isSet = true;
}

bool OAINSXRedirectRule::is_source_inversion_Set() const{
    return m_source_inversion_isSet;
}

bool OAINSXRedirectRule::is_source_inversion_Valid() const{
    return m_source_inversion_isValid;
}

QList<OAIReference> OAINSXRedirectRule::getSources() const {
    return m_sources;
}
void OAINSXRedirectRule::setSources(const QList<OAIReference> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAINSXRedirectRule::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAINSXRedirectRule::is_sources_Valid() const{
    return m_sources_isValid;
}

OAIFirewallDirection OAINSXRedirectRule::getDirection() const {
    return m_direction;
}
void OAINSXRedirectRule::setDirection(const OAIFirewallDirection &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAINSXRedirectRule::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAINSXRedirectRule::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAINSXRedirectRule::isLoggingEnabled() const {
    return m_logging_enabled;
}
void OAINSXRedirectRule::setLoggingEnabled(const bool &logging_enabled) {
    m_logging_enabled = logging_enabled;
    m_logging_enabled_isSet = true;
}

bool OAINSXRedirectRule::is_logging_enabled_Set() const{
    return m_logging_enabled_isSet;
}

bool OAINSXRedirectRule::is_logging_enabled_Valid() const{
    return m_logging_enabled_isValid;
}

QString OAINSXRedirectRule::getServiceProfile() const {
    return m_service_profile;
}
void OAINSXRedirectRule::setServiceProfile(const QString &service_profile) {
    m_service_profile = service_profile;
    m_service_profile_isSet = true;
}

bool OAINSXRedirectRule::is_service_profile_Set() const{
    return m_service_profile_isSet;
}

bool OAINSXRedirectRule::is_service_profile_Valid() const{
    return m_service_profile_isValid;
}

bool OAINSXRedirectRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_any_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_inversion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_any_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_any_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_inversion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINSXRedirectRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
