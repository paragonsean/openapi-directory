/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlow::OAIFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlow::OAIFlow() {
    this->initializeModel();
}

OAIFlow::~OAIFlow() {}

void OAIFlow::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_destination_cluster_isSet = false;
    m_destination_cluster_isValid = false;

    m_destination_datacenter_isSet = false;
    m_destination_datacenter_isValid = false;

    m_destination_folders_isSet = false;
    m_destination_folders_isValid = false;

    m_destination_host_isSet = false;
    m_destination_host_isValid = false;

    m_destination_ip_isSet = false;
    m_destination_ip_isValid = false;

    m_destination_ip_sets_isSet = false;
    m_destination_ip_sets_isValid = false;

    m_destination_l2_network_isSet = false;
    m_destination_l2_network_isValid = false;

    m_destination_resource_pool_isSet = false;
    m_destination_resource_pool_isValid = false;

    m_destination_security_groups_isSet = false;
    m_destination_security_groups_isValid = false;

    m_destination_security_tags_isSet = false;
    m_destination_security_tags_isValid = false;

    m_destination_vm_isSet = false;
    m_destination_vm_isValid = false;

    m_destination_vm_tags_isSet = false;
    m_destination_vm_tags_isValid = false;

    m_destination_vnic_isSet = false;
    m_destination_vnic_isValid = false;

    m_destination_vpc_isSet = false;
    m_destination_vpc_isValid = false;

    m_firewall_action_isSet = false;
    m_firewall_action_isValid = false;

    m_flow_tag_isSet = false;
    m_flow_tag_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_cluster_isSet = false;
    m_source_cluster_isValid = false;

    m_source_datacenter_isSet = false;
    m_source_datacenter_isValid = false;

    m_source_folders_isSet = false;
    m_source_folders_isValid = false;

    m_source_host_isSet = false;
    m_source_host_isValid = false;

    m_source_ip_isSet = false;
    m_source_ip_isValid = false;

    m_source_ip_sets_isSet = false;
    m_source_ip_sets_isValid = false;

    m_source_l2_network_isSet = false;
    m_source_l2_network_isValid = false;

    m_source_resource_pool_isSet = false;
    m_source_resource_pool_isValid = false;

    m_source_security_groups_isSet = false;
    m_source_security_groups_isValid = false;

    m_source_security_tags_isSet = false;
    m_source_security_tags_isValid = false;

    m_source_vm_isSet = false;
    m_source_vm_isValid = false;

    m_source_vm_tags_isSet = false;
    m_source_vm_tags_isValid = false;

    m_source_vnic_isSet = false;
    m_source_vnic_isValid = false;

    m_source_vpc_isSet = false;
    m_source_vpc_isValid = false;

    m_traffic_type_isSet = false;
    m_traffic_type_isValid = false;

    m_within_host_isSet = false;
    m_within_host_isValid = false;
}

void OAIFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlow::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_destination_cluster_isValid = ::OpenAPI::fromJsonValue(m_destination_cluster, json[QString("destination_cluster")]);
    m_destination_cluster_isSet = !json[QString("destination_cluster")].isNull() && m_destination_cluster_isValid;

    m_destination_datacenter_isValid = ::OpenAPI::fromJsonValue(m_destination_datacenter, json[QString("destination_datacenter")]);
    m_destination_datacenter_isSet = !json[QString("destination_datacenter")].isNull() && m_destination_datacenter_isValid;

    m_destination_folders_isValid = ::OpenAPI::fromJsonValue(m_destination_folders, json[QString("destination_folders")]);
    m_destination_folders_isSet = !json[QString("destination_folders")].isNull() && m_destination_folders_isValid;

    m_destination_host_isValid = ::OpenAPI::fromJsonValue(m_destination_host, json[QString("destination_host")]);
    m_destination_host_isSet = !json[QString("destination_host")].isNull() && m_destination_host_isValid;

    m_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_destination_ip, json[QString("destination_ip")]);
    m_destination_ip_isSet = !json[QString("destination_ip")].isNull() && m_destination_ip_isValid;

    m_destination_ip_sets_isValid = ::OpenAPI::fromJsonValue(m_destination_ip_sets, json[QString("destination_ip_sets")]);
    m_destination_ip_sets_isSet = !json[QString("destination_ip_sets")].isNull() && m_destination_ip_sets_isValid;

    m_destination_l2_network_isValid = ::OpenAPI::fromJsonValue(m_destination_l2_network, json[QString("destination_l2_network")]);
    m_destination_l2_network_isSet = !json[QString("destination_l2_network")].isNull() && m_destination_l2_network_isValid;

    m_destination_resource_pool_isValid = ::OpenAPI::fromJsonValue(m_destination_resource_pool, json[QString("destination_resource_pool")]);
    m_destination_resource_pool_isSet = !json[QString("destination_resource_pool")].isNull() && m_destination_resource_pool_isValid;

    m_destination_security_groups_isValid = ::OpenAPI::fromJsonValue(m_destination_security_groups, json[QString("destination_security_groups")]);
    m_destination_security_groups_isSet = !json[QString("destination_security_groups")].isNull() && m_destination_security_groups_isValid;

    m_destination_security_tags_isValid = ::OpenAPI::fromJsonValue(m_destination_security_tags, json[QString("destination_security_tags")]);
    m_destination_security_tags_isSet = !json[QString("destination_security_tags")].isNull() && m_destination_security_tags_isValid;

    m_destination_vm_isValid = ::OpenAPI::fromJsonValue(m_destination_vm, json[QString("destination_vm")]);
    m_destination_vm_isSet = !json[QString("destination_vm")].isNull() && m_destination_vm_isValid;

    m_destination_vm_tags_isValid = ::OpenAPI::fromJsonValue(m_destination_vm_tags, json[QString("destination_vm_tags")]);
    m_destination_vm_tags_isSet = !json[QString("destination_vm_tags")].isNull() && m_destination_vm_tags_isValid;

    m_destination_vnic_isValid = ::OpenAPI::fromJsonValue(m_destination_vnic, json[QString("destination_vnic")]);
    m_destination_vnic_isSet = !json[QString("destination_vnic")].isNull() && m_destination_vnic_isValid;

    m_destination_vpc_isValid = ::OpenAPI::fromJsonValue(m_destination_vpc, json[QString("destination_vpc")]);
    m_destination_vpc_isSet = !json[QString("destination_vpc")].isNull() && m_destination_vpc_isValid;

    m_firewall_action_isValid = ::OpenAPI::fromJsonValue(m_firewall_action, json[QString("firewall_action")]);
    m_firewall_action_isSet = !json[QString("firewall_action")].isNull() && m_firewall_action_isValid;

    m_flow_tag_isValid = ::OpenAPI::fromJsonValue(m_flow_tag, json[QString("flow_tag")]);
    m_flow_tag_isSet = !json[QString("flow_tag")].isNull() && m_flow_tag_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_cluster_isValid = ::OpenAPI::fromJsonValue(m_source_cluster, json[QString("source_cluster")]);
    m_source_cluster_isSet = !json[QString("source_cluster")].isNull() && m_source_cluster_isValid;

    m_source_datacenter_isValid = ::OpenAPI::fromJsonValue(m_source_datacenter, json[QString("source_datacenter")]);
    m_source_datacenter_isSet = !json[QString("source_datacenter")].isNull() && m_source_datacenter_isValid;

    m_source_folders_isValid = ::OpenAPI::fromJsonValue(m_source_folders, json[QString("source_folders")]);
    m_source_folders_isSet = !json[QString("source_folders")].isNull() && m_source_folders_isValid;

    m_source_host_isValid = ::OpenAPI::fromJsonValue(m_source_host, json[QString("source_host")]);
    m_source_host_isSet = !json[QString("source_host")].isNull() && m_source_host_isValid;

    m_source_ip_isValid = ::OpenAPI::fromJsonValue(m_source_ip, json[QString("source_ip")]);
    m_source_ip_isSet = !json[QString("source_ip")].isNull() && m_source_ip_isValid;

    m_source_ip_sets_isValid = ::OpenAPI::fromJsonValue(m_source_ip_sets, json[QString("source_ip_sets")]);
    m_source_ip_sets_isSet = !json[QString("source_ip_sets")].isNull() && m_source_ip_sets_isValid;

    m_source_l2_network_isValid = ::OpenAPI::fromJsonValue(m_source_l2_network, json[QString("source_l2_network")]);
    m_source_l2_network_isSet = !json[QString("source_l2_network")].isNull() && m_source_l2_network_isValid;

    m_source_resource_pool_isValid = ::OpenAPI::fromJsonValue(m_source_resource_pool, json[QString("source_resource_pool")]);
    m_source_resource_pool_isSet = !json[QString("source_resource_pool")].isNull() && m_source_resource_pool_isValid;

    m_source_security_groups_isValid = ::OpenAPI::fromJsonValue(m_source_security_groups, json[QString("source_security_groups")]);
    m_source_security_groups_isSet = !json[QString("source_security_groups")].isNull() && m_source_security_groups_isValid;

    m_source_security_tags_isValid = ::OpenAPI::fromJsonValue(m_source_security_tags, json[QString("source_security_tags")]);
    m_source_security_tags_isSet = !json[QString("source_security_tags")].isNull() && m_source_security_tags_isValid;

    m_source_vm_isValid = ::OpenAPI::fromJsonValue(m_source_vm, json[QString("source_vm")]);
    m_source_vm_isSet = !json[QString("source_vm")].isNull() && m_source_vm_isValid;

    m_source_vm_tags_isValid = ::OpenAPI::fromJsonValue(m_source_vm_tags, json[QString("source_vm_tags")]);
    m_source_vm_tags_isSet = !json[QString("source_vm_tags")].isNull() && m_source_vm_tags_isValid;

    m_source_vnic_isValid = ::OpenAPI::fromJsonValue(m_source_vnic, json[QString("source_vnic")]);
    m_source_vnic_isSet = !json[QString("source_vnic")].isNull() && m_source_vnic_isValid;

    m_source_vpc_isValid = ::OpenAPI::fromJsonValue(m_source_vpc, json[QString("source_vpc")]);
    m_source_vpc_isSet = !json[QString("source_vpc")].isNull() && m_source_vpc_isValid;

    m_traffic_type_isValid = ::OpenAPI::fromJsonValue(m_traffic_type, json[QString("traffic_type")]);
    m_traffic_type_isSet = !json[QString("traffic_type")].isNull() && m_traffic_type_isValid;

    m_within_host_isValid = ::OpenAPI::fromJsonValue(m_within_host, json[QString("within_host")]);
    m_within_host_isSet = !json[QString("within_host")].isNull() && m_within_host_isValid;
}

QString OAIFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_destination_cluster.isSet()) {
        obj.insert(QString("destination_cluster"), ::OpenAPI::toJsonValue(m_destination_cluster));
    }
    if (m_destination_datacenter.isSet()) {
        obj.insert(QString("destination_datacenter"), ::OpenAPI::toJsonValue(m_destination_datacenter));
    }
    if (m_destination_folders.size() > 0) {
        obj.insert(QString("destination_folders"), ::OpenAPI::toJsonValue(m_destination_folders));
    }
    if (m_destination_host.isSet()) {
        obj.insert(QString("destination_host"), ::OpenAPI::toJsonValue(m_destination_host));
    }
    if (m_destination_ip.isSet()) {
        obj.insert(QString("destination_ip"), ::OpenAPI::toJsonValue(m_destination_ip));
    }
    if (m_destination_ip_sets.size() > 0) {
        obj.insert(QString("destination_ip_sets"), ::OpenAPI::toJsonValue(m_destination_ip_sets));
    }
    if (m_destination_l2_network.isSet()) {
        obj.insert(QString("destination_l2_network"), ::OpenAPI::toJsonValue(m_destination_l2_network));
    }
    if (m_destination_resource_pool.isSet()) {
        obj.insert(QString("destination_resource_pool"), ::OpenAPI::toJsonValue(m_destination_resource_pool));
    }
    if (m_destination_security_groups.size() > 0) {
        obj.insert(QString("destination_security_groups"), ::OpenAPI::toJsonValue(m_destination_security_groups));
    }
    if (m_destination_security_tags.size() > 0) {
        obj.insert(QString("destination_security_tags"), ::OpenAPI::toJsonValue(m_destination_security_tags));
    }
    if (m_destination_vm.isSet()) {
        obj.insert(QString("destination_vm"), ::OpenAPI::toJsonValue(m_destination_vm));
    }
    if (m_destination_vm_tags.size() > 0) {
        obj.insert(QString("destination_vm_tags"), ::OpenAPI::toJsonValue(m_destination_vm_tags));
    }
    if (m_destination_vnic.isSet()) {
        obj.insert(QString("destination_vnic"), ::OpenAPI::toJsonValue(m_destination_vnic));
    }
    if (m_destination_vpc.isSet()) {
        obj.insert(QString("destination_vpc"), ::OpenAPI::toJsonValue(m_destination_vpc));
    }
    if (m_firewall_action.isSet()) {
        obj.insert(QString("firewall_action"), ::OpenAPI::toJsonValue(m_firewall_action));
    }
    if (m_flow_tag.size() > 0) {
        obj.insert(QString("flow_tag"), ::OpenAPI::toJsonValue(m_flow_tag));
    }
    if (m_port.isSet()) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_cluster.isSet()) {
        obj.insert(QString("source_cluster"), ::OpenAPI::toJsonValue(m_source_cluster));
    }
    if (m_source_datacenter.isSet()) {
        obj.insert(QString("source_datacenter"), ::OpenAPI::toJsonValue(m_source_datacenter));
    }
    if (m_source_folders.size() > 0) {
        obj.insert(QString("source_folders"), ::OpenAPI::toJsonValue(m_source_folders));
    }
    if (m_source_host.isSet()) {
        obj.insert(QString("source_host"), ::OpenAPI::toJsonValue(m_source_host));
    }
    if (m_source_ip.isSet()) {
        obj.insert(QString("source_ip"), ::OpenAPI::toJsonValue(m_source_ip));
    }
    if (m_source_ip_sets.size() > 0) {
        obj.insert(QString("source_ip_sets"), ::OpenAPI::toJsonValue(m_source_ip_sets));
    }
    if (m_source_l2_network.isSet()) {
        obj.insert(QString("source_l2_network"), ::OpenAPI::toJsonValue(m_source_l2_network));
    }
    if (m_source_resource_pool.isSet()) {
        obj.insert(QString("source_resource_pool"), ::OpenAPI::toJsonValue(m_source_resource_pool));
    }
    if (m_source_security_groups.size() > 0) {
        obj.insert(QString("source_security_groups"), ::OpenAPI::toJsonValue(m_source_security_groups));
    }
    if (m_source_security_tags.size() > 0) {
        obj.insert(QString("source_security_tags"), ::OpenAPI::toJsonValue(m_source_security_tags));
    }
    if (m_source_vm.isSet()) {
        obj.insert(QString("source_vm"), ::OpenAPI::toJsonValue(m_source_vm));
    }
    if (m_source_vm_tags.size() > 0) {
        obj.insert(QString("source_vm_tags"), ::OpenAPI::toJsonValue(m_source_vm_tags));
    }
    if (m_source_vnic.isSet()) {
        obj.insert(QString("source_vnic"), ::OpenAPI::toJsonValue(m_source_vnic));
    }
    if (m_source_vpc.isSet()) {
        obj.insert(QString("source_vpc"), ::OpenAPI::toJsonValue(m_source_vpc));
    }
    if (m_traffic_type.isSet()) {
        obj.insert(QString("traffic_type"), ::OpenAPI::toJsonValue(m_traffic_type));
    }
    if (m_within_host_isSet) {
        obj.insert(QString("within_host"), ::OpenAPI::toJsonValue(m_within_host));
    }
    return obj;
}

QString OAIFlow::getEntityId() const {
    return m_entity_id;
}
void OAIFlow::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIFlow::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIFlow::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIFlow::getEntityType() const {
    return m_entity_type;
}
void OAIFlow::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIFlow::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIFlow::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIFlow::getName() const {
    return m_name;
}
void OAIFlow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFlow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFlow::is_name_Valid() const{
    return m_name_isValid;
}

OAIReference OAIFlow::getDestinationCluster() const {
    return m_destination_cluster;
}
void OAIFlow::setDestinationCluster(const OAIReference &destination_cluster) {
    m_destination_cluster = destination_cluster;
    m_destination_cluster_isSet = true;
}

bool OAIFlow::is_destination_cluster_Set() const{
    return m_destination_cluster_isSet;
}

bool OAIFlow::is_destination_cluster_Valid() const{
    return m_destination_cluster_isValid;
}

OAIReference OAIFlow::getDestinationDatacenter() const {
    return m_destination_datacenter;
}
void OAIFlow::setDestinationDatacenter(const OAIReference &destination_datacenter) {
    m_destination_datacenter = destination_datacenter;
    m_destination_datacenter_isSet = true;
}

bool OAIFlow::is_destination_datacenter_Set() const{
    return m_destination_datacenter_isSet;
}

bool OAIFlow::is_destination_datacenter_Valid() const{
    return m_destination_datacenter_isValid;
}

QList<OAIReference> OAIFlow::getDestinationFolders() const {
    return m_destination_folders;
}
void OAIFlow::setDestinationFolders(const QList<OAIReference> &destination_folders) {
    m_destination_folders = destination_folders;
    m_destination_folders_isSet = true;
}

bool OAIFlow::is_destination_folders_Set() const{
    return m_destination_folders_isSet;
}

bool OAIFlow::is_destination_folders_Valid() const{
    return m_destination_folders_isValid;
}

OAIReference OAIFlow::getDestinationHost() const {
    return m_destination_host;
}
void OAIFlow::setDestinationHost(const OAIReference &destination_host) {
    m_destination_host = destination_host;
    m_destination_host_isSet = true;
}

bool OAIFlow::is_destination_host_Set() const{
    return m_destination_host_isSet;
}

bool OAIFlow::is_destination_host_Valid() const{
    return m_destination_host_isValid;
}

OAIIpV4Address OAIFlow::getDestinationIp() const {
    return m_destination_ip;
}
void OAIFlow::setDestinationIp(const OAIIpV4Address &destination_ip) {
    m_destination_ip = destination_ip;
    m_destination_ip_isSet = true;
}

bool OAIFlow::is_destination_ip_Set() const{
    return m_destination_ip_isSet;
}

bool OAIFlow::is_destination_ip_Valid() const{
    return m_destination_ip_isValid;
}

QList<OAIReference> OAIFlow::getDestinationIpSets() const {
    return m_destination_ip_sets;
}
void OAIFlow::setDestinationIpSets(const QList<OAIReference> &destination_ip_sets) {
    m_destination_ip_sets = destination_ip_sets;
    m_destination_ip_sets_isSet = true;
}

bool OAIFlow::is_destination_ip_sets_Set() const{
    return m_destination_ip_sets_isSet;
}

bool OAIFlow::is_destination_ip_sets_Valid() const{
    return m_destination_ip_sets_isValid;
}

OAIReference OAIFlow::getDestinationL2Network() const {
    return m_destination_l2_network;
}
void OAIFlow::setDestinationL2Network(const OAIReference &destination_l2_network) {
    m_destination_l2_network = destination_l2_network;
    m_destination_l2_network_isSet = true;
}

bool OAIFlow::is_destination_l2_network_Set() const{
    return m_destination_l2_network_isSet;
}

bool OAIFlow::is_destination_l2_network_Valid() const{
    return m_destination_l2_network_isValid;
}

OAIReference OAIFlow::getDestinationResourcePool() const {
    return m_destination_resource_pool;
}
void OAIFlow::setDestinationResourcePool(const OAIReference &destination_resource_pool) {
    m_destination_resource_pool = destination_resource_pool;
    m_destination_resource_pool_isSet = true;
}

bool OAIFlow::is_destination_resource_pool_Set() const{
    return m_destination_resource_pool_isSet;
}

bool OAIFlow::is_destination_resource_pool_Valid() const{
    return m_destination_resource_pool_isValid;
}

QList<OAIReference> OAIFlow::getDestinationSecurityGroups() const {
    return m_destination_security_groups;
}
void OAIFlow::setDestinationSecurityGroups(const QList<OAIReference> &destination_security_groups) {
    m_destination_security_groups = destination_security_groups;
    m_destination_security_groups_isSet = true;
}

bool OAIFlow::is_destination_security_groups_Set() const{
    return m_destination_security_groups_isSet;
}

bool OAIFlow::is_destination_security_groups_Valid() const{
    return m_destination_security_groups_isValid;
}

QList<OAIReference> OAIFlow::getDestinationSecurityTags() const {
    return m_destination_security_tags;
}
void OAIFlow::setDestinationSecurityTags(const QList<OAIReference> &destination_security_tags) {
    m_destination_security_tags = destination_security_tags;
    m_destination_security_tags_isSet = true;
}

bool OAIFlow::is_destination_security_tags_Set() const{
    return m_destination_security_tags_isSet;
}

bool OAIFlow::is_destination_security_tags_Valid() const{
    return m_destination_security_tags_isValid;
}

OAIReference OAIFlow::getDestinationVm() const {
    return m_destination_vm;
}
void OAIFlow::setDestinationVm(const OAIReference &destination_vm) {
    m_destination_vm = destination_vm;
    m_destination_vm_isSet = true;
}

bool OAIFlow::is_destination_vm_Set() const{
    return m_destination_vm_isSet;
}

bool OAIFlow::is_destination_vm_Valid() const{
    return m_destination_vm_isValid;
}

QList<QString> OAIFlow::getDestinationVmTags() const {
    return m_destination_vm_tags;
}
void OAIFlow::setDestinationVmTags(const QList<QString> &destination_vm_tags) {
    m_destination_vm_tags = destination_vm_tags;
    m_destination_vm_tags_isSet = true;
}

bool OAIFlow::is_destination_vm_tags_Set() const{
    return m_destination_vm_tags_isSet;
}

bool OAIFlow::is_destination_vm_tags_Valid() const{
    return m_destination_vm_tags_isValid;
}

OAIReference OAIFlow::getDestinationVnic() const {
    return m_destination_vnic;
}
void OAIFlow::setDestinationVnic(const OAIReference &destination_vnic) {
    m_destination_vnic = destination_vnic;
    m_destination_vnic_isSet = true;
}

bool OAIFlow::is_destination_vnic_Set() const{
    return m_destination_vnic_isSet;
}

bool OAIFlow::is_destination_vnic_Valid() const{
    return m_destination_vnic_isValid;
}

OAIReference OAIFlow::getDestinationVpc() const {
    return m_destination_vpc;
}
void OAIFlow::setDestinationVpc(const OAIReference &destination_vpc) {
    m_destination_vpc = destination_vpc;
    m_destination_vpc_isSet = true;
}

bool OAIFlow::is_destination_vpc_Set() const{
    return m_destination_vpc_isSet;
}

bool OAIFlow::is_destination_vpc_Valid() const{
    return m_destination_vpc_isValid;
}

OAIFirewallAction OAIFlow::getFirewallAction() const {
    return m_firewall_action;
}
void OAIFlow::setFirewallAction(const OAIFirewallAction &firewall_action) {
    m_firewall_action = firewall_action;
    m_firewall_action_isSet = true;
}

bool OAIFlow::is_firewall_action_Set() const{
    return m_firewall_action_isSet;
}

bool OAIFlow::is_firewall_action_Valid() const{
    return m_firewall_action_isValid;
}

QList<OAIFlowTag> OAIFlow::getFlowTag() const {
    return m_flow_tag;
}
void OAIFlow::setFlowTag(const QList<OAIFlowTag> &flow_tag) {
    m_flow_tag = flow_tag;
    m_flow_tag_isSet = true;
}

bool OAIFlow::is_flow_tag_Set() const{
    return m_flow_tag_isSet;
}

bool OAIFlow::is_flow_tag_Valid() const{
    return m_flow_tag_isValid;
}

OAIPortRange OAIFlow::getPort() const {
    return m_port;
}
void OAIFlow::setPort(const OAIPortRange &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIFlow::is_port_Set() const{
    return m_port_isSet;
}

bool OAIFlow::is_port_Valid() const{
    return m_port_isValid;
}

OAIProtocol OAIFlow::getProtocol() const {
    return m_protocol;
}
void OAIFlow::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIFlow::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIFlow::is_protocol_Valid() const{
    return m_protocol_isValid;
}

OAIReference OAIFlow::getSourceCluster() const {
    return m_source_cluster;
}
void OAIFlow::setSourceCluster(const OAIReference &source_cluster) {
    m_source_cluster = source_cluster;
    m_source_cluster_isSet = true;
}

bool OAIFlow::is_source_cluster_Set() const{
    return m_source_cluster_isSet;
}

bool OAIFlow::is_source_cluster_Valid() const{
    return m_source_cluster_isValid;
}

OAIReference OAIFlow::getSourceDatacenter() const {
    return m_source_datacenter;
}
void OAIFlow::setSourceDatacenter(const OAIReference &source_datacenter) {
    m_source_datacenter = source_datacenter;
    m_source_datacenter_isSet = true;
}

bool OAIFlow::is_source_datacenter_Set() const{
    return m_source_datacenter_isSet;
}

bool OAIFlow::is_source_datacenter_Valid() const{
    return m_source_datacenter_isValid;
}

QList<OAIReference> OAIFlow::getSourceFolders() const {
    return m_source_folders;
}
void OAIFlow::setSourceFolders(const QList<OAIReference> &source_folders) {
    m_source_folders = source_folders;
    m_source_folders_isSet = true;
}

bool OAIFlow::is_source_folders_Set() const{
    return m_source_folders_isSet;
}

bool OAIFlow::is_source_folders_Valid() const{
    return m_source_folders_isValid;
}

OAIReference OAIFlow::getSourceHost() const {
    return m_source_host;
}
void OAIFlow::setSourceHost(const OAIReference &source_host) {
    m_source_host = source_host;
    m_source_host_isSet = true;
}

bool OAIFlow::is_source_host_Set() const{
    return m_source_host_isSet;
}

bool OAIFlow::is_source_host_Valid() const{
    return m_source_host_isValid;
}

OAIIpV4Address OAIFlow::getSourceIp() const {
    return m_source_ip;
}
void OAIFlow::setSourceIp(const OAIIpV4Address &source_ip) {
    m_source_ip = source_ip;
    m_source_ip_isSet = true;
}

bool OAIFlow::is_source_ip_Set() const{
    return m_source_ip_isSet;
}

bool OAIFlow::is_source_ip_Valid() const{
    return m_source_ip_isValid;
}

QList<OAIReference> OAIFlow::getSourceIpSets() const {
    return m_source_ip_sets;
}
void OAIFlow::setSourceIpSets(const QList<OAIReference> &source_ip_sets) {
    m_source_ip_sets = source_ip_sets;
    m_source_ip_sets_isSet = true;
}

bool OAIFlow::is_source_ip_sets_Set() const{
    return m_source_ip_sets_isSet;
}

bool OAIFlow::is_source_ip_sets_Valid() const{
    return m_source_ip_sets_isValid;
}

OAIReference OAIFlow::getSourceL2Network() const {
    return m_source_l2_network;
}
void OAIFlow::setSourceL2Network(const OAIReference &source_l2_network) {
    m_source_l2_network = source_l2_network;
    m_source_l2_network_isSet = true;
}

bool OAIFlow::is_source_l2_network_Set() const{
    return m_source_l2_network_isSet;
}

bool OAIFlow::is_source_l2_network_Valid() const{
    return m_source_l2_network_isValid;
}

OAIReference OAIFlow::getSourceResourcePool() const {
    return m_source_resource_pool;
}
void OAIFlow::setSourceResourcePool(const OAIReference &source_resource_pool) {
    m_source_resource_pool = source_resource_pool;
    m_source_resource_pool_isSet = true;
}

bool OAIFlow::is_source_resource_pool_Set() const{
    return m_source_resource_pool_isSet;
}

bool OAIFlow::is_source_resource_pool_Valid() const{
    return m_source_resource_pool_isValid;
}

QList<OAIReference> OAIFlow::getSourceSecurityGroups() const {
    return m_source_security_groups;
}
void OAIFlow::setSourceSecurityGroups(const QList<OAIReference> &source_security_groups) {
    m_source_security_groups = source_security_groups;
    m_source_security_groups_isSet = true;
}

bool OAIFlow::is_source_security_groups_Set() const{
    return m_source_security_groups_isSet;
}

bool OAIFlow::is_source_security_groups_Valid() const{
    return m_source_security_groups_isValid;
}

QList<OAIReference> OAIFlow::getSourceSecurityTags() const {
    return m_source_security_tags;
}
void OAIFlow::setSourceSecurityTags(const QList<OAIReference> &source_security_tags) {
    m_source_security_tags = source_security_tags;
    m_source_security_tags_isSet = true;
}

bool OAIFlow::is_source_security_tags_Set() const{
    return m_source_security_tags_isSet;
}

bool OAIFlow::is_source_security_tags_Valid() const{
    return m_source_security_tags_isValid;
}

OAIReference OAIFlow::getSourceVm() const {
    return m_source_vm;
}
void OAIFlow::setSourceVm(const OAIReference &source_vm) {
    m_source_vm = source_vm;
    m_source_vm_isSet = true;
}

bool OAIFlow::is_source_vm_Set() const{
    return m_source_vm_isSet;
}

bool OAIFlow::is_source_vm_Valid() const{
    return m_source_vm_isValid;
}

QList<QString> OAIFlow::getSourceVmTags() const {
    return m_source_vm_tags;
}
void OAIFlow::setSourceVmTags(const QList<QString> &source_vm_tags) {
    m_source_vm_tags = source_vm_tags;
    m_source_vm_tags_isSet = true;
}

bool OAIFlow::is_source_vm_tags_Set() const{
    return m_source_vm_tags_isSet;
}

bool OAIFlow::is_source_vm_tags_Valid() const{
    return m_source_vm_tags_isValid;
}

OAIReference OAIFlow::getSourceVnic() const {
    return m_source_vnic;
}
void OAIFlow::setSourceVnic(const OAIReference &source_vnic) {
    m_source_vnic = source_vnic;
    m_source_vnic_isSet = true;
}

bool OAIFlow::is_source_vnic_Set() const{
    return m_source_vnic_isSet;
}

bool OAIFlow::is_source_vnic_Valid() const{
    return m_source_vnic_isValid;
}

OAIReference OAIFlow::getSourceVpc() const {
    return m_source_vpc;
}
void OAIFlow::setSourceVpc(const OAIReference &source_vpc) {
    m_source_vpc = source_vpc;
    m_source_vpc_isSet = true;
}

bool OAIFlow::is_source_vpc_Set() const{
    return m_source_vpc_isSet;
}

bool OAIFlow::is_source_vpc_Valid() const{
    return m_source_vpc_isValid;
}

OAIFlowTrafficType OAIFlow::getTrafficType() const {
    return m_traffic_type;
}
void OAIFlow::setTrafficType(const OAIFlowTrafficType &traffic_type) {
    m_traffic_type = traffic_type;
    m_traffic_type_isSet = true;
}

bool OAIFlow::is_traffic_type_Set() const{
    return m_traffic_type_isSet;
}

bool OAIFlow::is_traffic_type_Valid() const{
    return m_traffic_type_isValid;
}

bool OAIFlow::isWithinHost() const {
    return m_within_host;
}
void OAIFlow::setWithinHost(const bool &within_host) {
    m_within_host = within_host;
    m_within_host_isSet = true;
}

bool OAIFlow::is_within_host_Set() const{
    return m_within_host_isSet;
}

bool OAIFlow::is_within_host_Valid() const{
    return m_within_host_isValid;
}

bool OAIFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_datacenter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_ip_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_l2_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_resource_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_security_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_vm_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_vnic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_tag.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_datacenter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_folders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_host.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_ip_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_l2_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_security_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vnic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vpc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_within_host_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
