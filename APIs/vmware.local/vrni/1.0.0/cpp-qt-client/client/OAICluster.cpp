/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICluster::OAICluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICluster::OAICluster() {
    this->initializeModel();
}

OAICluster::~OAICluster() {}

void OAICluster::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nsx_manager_isSet = false;
    m_nsx_manager_isValid = false;

    m_num_cpu_cores_isSet = false;
    m_num_cpu_cores_isValid = false;

    m_num_datastores_isSet = false;
    m_num_datastores_isValid = false;

    m_num_hosts_isSet = false;
    m_num_hosts_isValid = false;

    m_total_cpus_isSet = false;
    m_total_cpus_isValid = false;

    m_total_memory_isSet = false;
    m_total_memory_isValid = false;

    m_vcenter_manager_isSet = false;
    m_vcenter_manager_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAICluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICluster::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nsx_manager_isValid = ::OpenAPI::fromJsonValue(m_nsx_manager, json[QString("nsx_manager")]);
    m_nsx_manager_isSet = !json[QString("nsx_manager")].isNull() && m_nsx_manager_isValid;

    m_num_cpu_cores_isValid = ::OpenAPI::fromJsonValue(m_num_cpu_cores, json[QString("num_cpu_cores")]);
    m_num_cpu_cores_isSet = !json[QString("num_cpu_cores")].isNull() && m_num_cpu_cores_isValid;

    m_num_datastores_isValid = ::OpenAPI::fromJsonValue(m_num_datastores, json[QString("num_datastores")]);
    m_num_datastores_isSet = !json[QString("num_datastores")].isNull() && m_num_datastores_isValid;

    m_num_hosts_isValid = ::OpenAPI::fromJsonValue(m_num_hosts, json[QString("num_hosts")]);
    m_num_hosts_isSet = !json[QString("num_hosts")].isNull() && m_num_hosts_isValid;

    m_total_cpus_isValid = ::OpenAPI::fromJsonValue(m_total_cpus, json[QString("total_cpus")]);
    m_total_cpus_isSet = !json[QString("total_cpus")].isNull() && m_total_cpus_isValid;

    m_total_memory_isValid = ::OpenAPI::fromJsonValue(m_total_memory, json[QString("total_memory")]);
    m_total_memory_isSet = !json[QString("total_memory")].isNull() && m_total_memory_isValid;

    m_vcenter_manager_isValid = ::OpenAPI::fromJsonValue(m_vcenter_manager, json[QString("vcenter_manager")]);
    m_vcenter_manager_isSet = !json[QString("vcenter_manager")].isNull() && m_vcenter_manager_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAICluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICluster::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nsx_manager.isSet()) {
        obj.insert(QString("nsx_manager"), ::OpenAPI::toJsonValue(m_nsx_manager));
    }
    if (m_num_cpu_cores_isSet) {
        obj.insert(QString("num_cpu_cores"), ::OpenAPI::toJsonValue(m_num_cpu_cores));
    }
    if (m_num_datastores_isSet) {
        obj.insert(QString("num_datastores"), ::OpenAPI::toJsonValue(m_num_datastores));
    }
    if (m_num_hosts_isSet) {
        obj.insert(QString("num_hosts"), ::OpenAPI::toJsonValue(m_num_hosts));
    }
    if (m_total_cpus_isSet) {
        obj.insert(QString("total_cpus"), ::OpenAPI::toJsonValue(m_total_cpus));
    }
    if (m_total_memory_isSet) {
        obj.insert(QString("total_memory"), ::OpenAPI::toJsonValue(m_total_memory));
    }
    if (m_vcenter_manager.isSet()) {
        obj.insert(QString("vcenter_manager"), ::OpenAPI::toJsonValue(m_vcenter_manager));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QString OAICluster::getEntityId() const {
    return m_entity_id;
}
void OAICluster::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAICluster::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAICluster::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAICluster::getEntityType() const {
    return m_entity_type;
}
void OAICluster::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAICluster::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAICluster::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAICluster::getName() const {
    return m_name;
}
void OAICluster::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICluster::is_name_Set() const{
    return m_name_isSet;
}

bool OAICluster::is_name_Valid() const{
    return m_name_isValid;
}

OAIReference OAICluster::getNsxManager() const {
    return m_nsx_manager;
}
void OAICluster::setNsxManager(const OAIReference &nsx_manager) {
    m_nsx_manager = nsx_manager;
    m_nsx_manager_isSet = true;
}

bool OAICluster::is_nsx_manager_Set() const{
    return m_nsx_manager_isSet;
}

bool OAICluster::is_nsx_manager_Valid() const{
    return m_nsx_manager_isValid;
}

qint32 OAICluster::getNumCpuCores() const {
    return m_num_cpu_cores;
}
void OAICluster::setNumCpuCores(const qint32 &num_cpu_cores) {
    m_num_cpu_cores = num_cpu_cores;
    m_num_cpu_cores_isSet = true;
}

bool OAICluster::is_num_cpu_cores_Set() const{
    return m_num_cpu_cores_isSet;
}

bool OAICluster::is_num_cpu_cores_Valid() const{
    return m_num_cpu_cores_isValid;
}

qint32 OAICluster::getNumDatastores() const {
    return m_num_datastores;
}
void OAICluster::setNumDatastores(const qint32 &num_datastores) {
    m_num_datastores = num_datastores;
    m_num_datastores_isSet = true;
}

bool OAICluster::is_num_datastores_Set() const{
    return m_num_datastores_isSet;
}

bool OAICluster::is_num_datastores_Valid() const{
    return m_num_datastores_isValid;
}

qint32 OAICluster::getNumHosts() const {
    return m_num_hosts;
}
void OAICluster::setNumHosts(const qint32 &num_hosts) {
    m_num_hosts = num_hosts;
    m_num_hosts_isSet = true;
}

bool OAICluster::is_num_hosts_Set() const{
    return m_num_hosts_isSet;
}

bool OAICluster::is_num_hosts_Valid() const{
    return m_num_hosts_isValid;
}

qint32 OAICluster::getTotalCpus() const {
    return m_total_cpus;
}
void OAICluster::setTotalCpus(const qint32 &total_cpus) {
    m_total_cpus = total_cpus;
    m_total_cpus_isSet = true;
}

bool OAICluster::is_total_cpus_Set() const{
    return m_total_cpus_isSet;
}

bool OAICluster::is_total_cpus_Valid() const{
    return m_total_cpus_isValid;
}

qint64 OAICluster::getTotalMemory() const {
    return m_total_memory;
}
void OAICluster::setTotalMemory(const qint64 &total_memory) {
    m_total_memory = total_memory;
    m_total_memory_isSet = true;
}

bool OAICluster::is_total_memory_Set() const{
    return m_total_memory_isSet;
}

bool OAICluster::is_total_memory_Valid() const{
    return m_total_memory_isValid;
}

OAIReference OAICluster::getVcenterManager() const {
    return m_vcenter_manager;
}
void OAICluster::setVcenterManager(const OAIReference &vcenter_manager) {
    m_vcenter_manager = vcenter_manager;
    m_vcenter_manager_isSet = true;
}

bool OAICluster::is_vcenter_manager_Set() const{
    return m_vcenter_manager_isSet;
}

bool OAICluster::is_vcenter_manager_Valid() const{
    return m_vcenter_manager_isValid;
}

QString OAICluster::getVendorId() const {
    return m_vendor_id;
}
void OAICluster::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAICluster::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAICluster::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAICluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_cpu_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_datastores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_hosts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cpus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_manager.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
