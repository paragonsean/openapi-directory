/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEC2IPSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEC2IPSet::OAIEC2IPSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEC2IPSet::OAIEC2IPSet() {
    this->initializeModel();
}

OAIEC2IPSet::~OAIEC2IPSet() {}

void OAIEC2IPSet::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_direct_destination_rules_isSet = false;
    m_direct_destination_rules_isValid = false;

    m_direct_source_rules_isSet = false;
    m_direct_source_rules_isValid = false;

    m_indirect_destination_rules_isSet = false;
    m_indirect_destination_rules_isValid = false;

    m_indirect_source_rules_isSet = false;
    m_indirect_source_rules_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_ip_numeric_ranges_isSet = false;
    m_ip_numeric_ranges_isValid = false;

    m_ip_ranges_isSet = false;
    m_ip_ranges_isValid = false;

    m_parent_security_groups_isSet = false;
    m_parent_security_groups_isValid = false;

    m_translated_vm_count_isSet = false;
    m_translated_vm_count_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIEC2IPSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEC2IPSet::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_direct_destination_rules_isValid = ::OpenAPI::fromJsonValue(m_direct_destination_rules, json[QString("direct_destination_rules")]);
    m_direct_destination_rules_isSet = !json[QString("direct_destination_rules")].isNull() && m_direct_destination_rules_isValid;

    m_direct_source_rules_isValid = ::OpenAPI::fromJsonValue(m_direct_source_rules, json[QString("direct_source_rules")]);
    m_direct_source_rules_isSet = !json[QString("direct_source_rules")].isNull() && m_direct_source_rules_isValid;

    m_indirect_destination_rules_isValid = ::OpenAPI::fromJsonValue(m_indirect_destination_rules, json[QString("indirect_destination_rules")]);
    m_indirect_destination_rules_isSet = !json[QString("indirect_destination_rules")].isNull() && m_indirect_destination_rules_isValid;

    m_indirect_source_rules_isValid = ::OpenAPI::fromJsonValue(m_indirect_source_rules, json[QString("indirect_source_rules")]);
    m_indirect_source_rules_isSet = !json[QString("indirect_source_rules")].isNull() && m_indirect_source_rules_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ip_addresses")]);
    m_ip_addresses_isSet = !json[QString("ip_addresses")].isNull() && m_ip_addresses_isValid;

    m_ip_numeric_ranges_isValid = ::OpenAPI::fromJsonValue(m_ip_numeric_ranges, json[QString("ip_numeric_ranges")]);
    m_ip_numeric_ranges_isSet = !json[QString("ip_numeric_ranges")].isNull() && m_ip_numeric_ranges_isValid;

    m_ip_ranges_isValid = ::OpenAPI::fromJsonValue(m_ip_ranges, json[QString("ip_ranges")]);
    m_ip_ranges_isSet = !json[QString("ip_ranges")].isNull() && m_ip_ranges_isValid;

    m_parent_security_groups_isValid = ::OpenAPI::fromJsonValue(m_parent_security_groups, json[QString("parent_security_groups")]);
    m_parent_security_groups_isSet = !json[QString("parent_security_groups")].isNull() && m_parent_security_groups_isValid;

    m_translated_vm_count_isValid = ::OpenAPI::fromJsonValue(m_translated_vm_count, json[QString("translated_vm_count")]);
    m_translated_vm_count_isSet = !json[QString("translated_vm_count")].isNull() && m_translated_vm_count_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAIEC2IPSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEC2IPSet::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_direct_destination_rules.size() > 0) {
        obj.insert(QString("direct_destination_rules"), ::OpenAPI::toJsonValue(m_direct_destination_rules));
    }
    if (m_direct_source_rules.size() > 0) {
        obj.insert(QString("direct_source_rules"), ::OpenAPI::toJsonValue(m_direct_source_rules));
    }
    if (m_indirect_destination_rules.size() > 0) {
        obj.insert(QString("indirect_destination_rules"), ::OpenAPI::toJsonValue(m_indirect_destination_rules));
    }
    if (m_indirect_source_rules.size() > 0) {
        obj.insert(QString("indirect_source_rules"), ::OpenAPI::toJsonValue(m_indirect_source_rules));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ip_addresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_ip_numeric_ranges.size() > 0) {
        obj.insert(QString("ip_numeric_ranges"), ::OpenAPI::toJsonValue(m_ip_numeric_ranges));
    }
    if (m_ip_ranges.size() > 0) {
        obj.insert(QString("ip_ranges"), ::OpenAPI::toJsonValue(m_ip_ranges));
    }
    if (m_parent_security_groups.size() > 0) {
        obj.insert(QString("parent_security_groups"), ::OpenAPI::toJsonValue(m_parent_security_groups));
    }
    if (m_translated_vm_count_isSet) {
        obj.insert(QString("translated_vm_count"), ::OpenAPI::toJsonValue(m_translated_vm_count));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

QString OAIEC2IPSet::getEntityId() const {
    return m_entity_id;
}
void OAIEC2IPSet::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEC2IPSet::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEC2IPSet::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAIEC2IPSet::getEntityType() const {
    return m_entity_type;
}
void OAIEC2IPSet::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEC2IPSet::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEC2IPSet::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEC2IPSet::getName() const {
    return m_name;
}
void OAIEC2IPSet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEC2IPSet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEC2IPSet::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRuleSet> OAIEC2IPSet::getDirectDestinationRules() const {
    return m_direct_destination_rules;
}
void OAIEC2IPSet::setDirectDestinationRules(const QList<OAIRuleSet> &direct_destination_rules) {
    m_direct_destination_rules = direct_destination_rules;
    m_direct_destination_rules_isSet = true;
}

bool OAIEC2IPSet::is_direct_destination_rules_Set() const{
    return m_direct_destination_rules_isSet;
}

bool OAIEC2IPSet::is_direct_destination_rules_Valid() const{
    return m_direct_destination_rules_isValid;
}

QList<OAIRuleSet> OAIEC2IPSet::getDirectSourceRules() const {
    return m_direct_source_rules;
}
void OAIEC2IPSet::setDirectSourceRules(const QList<OAIRuleSet> &direct_source_rules) {
    m_direct_source_rules = direct_source_rules;
    m_direct_source_rules_isSet = true;
}

bool OAIEC2IPSet::is_direct_source_rules_Set() const{
    return m_direct_source_rules_isSet;
}

bool OAIEC2IPSet::is_direct_source_rules_Valid() const{
    return m_direct_source_rules_isValid;
}

QList<OAIRuleSet> OAIEC2IPSet::getIndirectDestinationRules() const {
    return m_indirect_destination_rules;
}
void OAIEC2IPSet::setIndirectDestinationRules(const QList<OAIRuleSet> &indirect_destination_rules) {
    m_indirect_destination_rules = indirect_destination_rules;
    m_indirect_destination_rules_isSet = true;
}

bool OAIEC2IPSet::is_indirect_destination_rules_Set() const{
    return m_indirect_destination_rules_isSet;
}

bool OAIEC2IPSet::is_indirect_destination_rules_Valid() const{
    return m_indirect_destination_rules_isValid;
}

QList<OAIRuleSet> OAIEC2IPSet::getIndirectSourceRules() const {
    return m_indirect_source_rules;
}
void OAIEC2IPSet::setIndirectSourceRules(const QList<OAIRuleSet> &indirect_source_rules) {
    m_indirect_source_rules = indirect_source_rules;
    m_indirect_source_rules_isSet = true;
}

bool OAIEC2IPSet::is_indirect_source_rules_Set() const{
    return m_indirect_source_rules_isSet;
}

bool OAIEC2IPSet::is_indirect_source_rules_Valid() const{
    return m_indirect_source_rules_isValid;
}

QList<OAIIpV4Address> OAIEC2IPSet::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIEC2IPSet::setIpAddresses(const QList<OAIIpV4Address> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIEC2IPSet::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIEC2IPSet::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QList<OAIIpNumericRange> OAIEC2IPSet::getIpNumericRanges() const {
    return m_ip_numeric_ranges;
}
void OAIEC2IPSet::setIpNumericRanges(const QList<OAIIpNumericRange> &ip_numeric_ranges) {
    m_ip_numeric_ranges = ip_numeric_ranges;
    m_ip_numeric_ranges_isSet = true;
}

bool OAIEC2IPSet::is_ip_numeric_ranges_Set() const{
    return m_ip_numeric_ranges_isSet;
}

bool OAIEC2IPSet::is_ip_numeric_ranges_Valid() const{
    return m_ip_numeric_ranges_isValid;
}

QList<OAIIpAddressRange> OAIEC2IPSet::getIpRanges() const {
    return m_ip_ranges;
}
void OAIEC2IPSet::setIpRanges(const QList<OAIIpAddressRange> &ip_ranges) {
    m_ip_ranges = ip_ranges;
    m_ip_ranges_isSet = true;
}

bool OAIEC2IPSet::is_ip_ranges_Set() const{
    return m_ip_ranges_isSet;
}

bool OAIEC2IPSet::is_ip_ranges_Valid() const{
    return m_ip_ranges_isValid;
}

QList<OAIReference> OAIEC2IPSet::getParentSecurityGroups() const {
    return m_parent_security_groups;
}
void OAIEC2IPSet::setParentSecurityGroups(const QList<OAIReference> &parent_security_groups) {
    m_parent_security_groups = parent_security_groups;
    m_parent_security_groups_isSet = true;
}

bool OAIEC2IPSet::is_parent_security_groups_Set() const{
    return m_parent_security_groups_isSet;
}

bool OAIEC2IPSet::is_parent_security_groups_Valid() const{
    return m_parent_security_groups_isValid;
}

qint32 OAIEC2IPSet::getTranslatedVmCount() const {
    return m_translated_vm_count;
}
void OAIEC2IPSet::setTranslatedVmCount(const qint32 &translated_vm_count) {
    m_translated_vm_count = translated_vm_count;
    m_translated_vm_count_isSet = true;
}

bool OAIEC2IPSet::is_translated_vm_count_Set() const{
    return m_translated_vm_count_isSet;
}

bool OAIEC2IPSet::is_translated_vm_count_Valid() const{
    return m_translated_vm_count_isValid;
}

QString OAIEC2IPSet::getVendor() const {
    return m_vendor;
}
void OAIEC2IPSet::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIEC2IPSet::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIEC2IPSet::is_vendor_Valid() const{
    return m_vendor_isValid;
}

QString OAIEC2IPSet::getVendorId() const {
    return m_vendor_id;
}
void OAIEC2IPSet::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIEC2IPSet::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIEC2IPSet::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIEC2IPSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_destination_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_source_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indirect_destination_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indirect_source_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_numeric_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_security_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_vm_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEC2IPSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
