/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINSXSecurityGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINSXSecurityGroup::OAINSXSecurityGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINSXSecurityGroup::OAINSXSecurityGroup() {
    this->initializeModel();
}

OAINSXSecurityGroup::~OAINSXSecurityGroup() {}

void OAINSXSecurityGroup::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_direct_destination_rules_isSet = false;
    m_direct_destination_rules_isValid = false;

    m_direct_members_isSet = false;
    m_direct_members_isValid = false;

    m_direct_source_rules_isSet = false;
    m_direct_source_rules_isValid = false;

    m_excluded_members_isSet = false;
    m_excluded_members_isValid = false;

    m_indirect_destination_rules_isSet = false;
    m_indirect_destination_rules_isValid = false;

    m_indirect_source_rules_isSet = false;
    m_indirect_source_rules_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_translated_vm_count_isSet = false;
    m_translated_vm_count_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_ip_sets_isSet = false;
    m_ip_sets_isValid = false;

    m_nsx_managers_isSet = false;
    m_nsx_managers_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_security_tags_isSet = false;
    m_security_tags_isValid = false;
}

void OAINSXSecurityGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINSXSecurityGroup::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_direct_destination_rules_isValid = ::OpenAPI::fromJsonValue(m_direct_destination_rules, json[QString("direct_destination_rules")]);
    m_direct_destination_rules_isSet = !json[QString("direct_destination_rules")].isNull() && m_direct_destination_rules_isValid;

    m_direct_members_isValid = ::OpenAPI::fromJsonValue(m_direct_members, json[QString("direct_members")]);
    m_direct_members_isSet = !json[QString("direct_members")].isNull() && m_direct_members_isValid;

    m_direct_source_rules_isValid = ::OpenAPI::fromJsonValue(m_direct_source_rules, json[QString("direct_source_rules")]);
    m_direct_source_rules_isSet = !json[QString("direct_source_rules")].isNull() && m_direct_source_rules_isValid;

    m_excluded_members_isValid = ::OpenAPI::fromJsonValue(m_excluded_members, json[QString("excluded_members")]);
    m_excluded_members_isSet = !json[QString("excluded_members")].isNull() && m_excluded_members_isValid;

    m_indirect_destination_rules_isValid = ::OpenAPI::fromJsonValue(m_indirect_destination_rules, json[QString("indirect_destination_rules")]);
    m_indirect_destination_rules_isSet = !json[QString("indirect_destination_rules")].isNull() && m_indirect_destination_rules_isValid;

    m_indirect_source_rules_isValid = ::OpenAPI::fromJsonValue(m_indirect_source_rules, json[QString("indirect_source_rules")]);
    m_indirect_source_rules_isSet = !json[QString("indirect_source_rules")].isNull() && m_indirect_source_rules_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_translated_vm_count_isValid = ::OpenAPI::fromJsonValue(m_translated_vm_count, json[QString("translated_vm_count")]);
    m_translated_vm_count_isSet = !json[QString("translated_vm_count")].isNull() && m_translated_vm_count_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_ip_sets_isValid = ::OpenAPI::fromJsonValue(m_ip_sets, json[QString("ip_sets")]);
    m_ip_sets_isSet = !json[QString("ip_sets")].isNull() && m_ip_sets_isValid;

    m_nsx_managers_isValid = ::OpenAPI::fromJsonValue(m_nsx_managers, json[QString("nsx_managers")]);
    m_nsx_managers_isSet = !json[QString("nsx_managers")].isNull() && m_nsx_managers_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_security_tags_isValid = ::OpenAPI::fromJsonValue(m_security_tags, json[QString("security_tags")]);
    m_security_tags_isSet = !json[QString("security_tags")].isNull() && m_security_tags_isValid;
}

QString OAINSXSecurityGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINSXSecurityGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_direct_destination_rules.size() > 0) {
        obj.insert(QString("direct_destination_rules"), ::OpenAPI::toJsonValue(m_direct_destination_rules));
    }
    if (m_direct_members.size() > 0) {
        obj.insert(QString("direct_members"), ::OpenAPI::toJsonValue(m_direct_members));
    }
    if (m_direct_source_rules.size() > 0) {
        obj.insert(QString("direct_source_rules"), ::OpenAPI::toJsonValue(m_direct_source_rules));
    }
    if (m_excluded_members.size() > 0) {
        obj.insert(QString("excluded_members"), ::OpenAPI::toJsonValue(m_excluded_members));
    }
    if (m_indirect_destination_rules.size() > 0) {
        obj.insert(QString("indirect_destination_rules"), ::OpenAPI::toJsonValue(m_indirect_destination_rules));
    }
    if (m_indirect_source_rules.size() > 0) {
        obj.insert(QString("indirect_source_rules"), ::OpenAPI::toJsonValue(m_indirect_source_rules));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_translated_vm_count_isSet) {
        obj.insert(QString("translated_vm_count"), ::OpenAPI::toJsonValue(m_translated_vm_count));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_ip_sets.size() > 0) {
        obj.insert(QString("ip_sets"), ::OpenAPI::toJsonValue(m_ip_sets));
    }
    if (m_nsx_managers.size() > 0) {
        obj.insert(QString("nsx_managers"), ::OpenAPI::toJsonValue(m_nsx_managers));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_security_tags.size() > 0) {
        obj.insert(QString("security_tags"), ::OpenAPI::toJsonValue(m_security_tags));
    }
    return obj;
}

QString OAINSXSecurityGroup::getEntityId() const {
    return m_entity_id;
}
void OAINSXSecurityGroup::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAINSXSecurityGroup::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAINSXSecurityGroup::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAINSXSecurityGroup::getEntityType() const {
    return m_entity_type;
}
void OAINSXSecurityGroup::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAINSXSecurityGroup::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAINSXSecurityGroup::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAINSXSecurityGroup::getName() const {
    return m_name;
}
void OAINSXSecurityGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINSXSecurityGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAINSXSecurityGroup::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getMembers() const {
    return m_members;
}
void OAINSXSecurityGroup::setMembers(const QList<OAIReference> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAINSXSecurityGroup::is_members_Set() const{
    return m_members_isSet;
}

bool OAINSXSecurityGroup::is_members_Valid() const{
    return m_members_isValid;
}

QList<OAIRuleSet> OAINSXSecurityGroup::getDirectDestinationRules() const {
    return m_direct_destination_rules;
}
void OAINSXSecurityGroup::setDirectDestinationRules(const QList<OAIRuleSet> &direct_destination_rules) {
    m_direct_destination_rules = direct_destination_rules;
    m_direct_destination_rules_isSet = true;
}

bool OAINSXSecurityGroup::is_direct_destination_rules_Set() const{
    return m_direct_destination_rules_isSet;
}

bool OAINSXSecurityGroup::is_direct_destination_rules_Valid() const{
    return m_direct_destination_rules_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getDirectMembers() const {
    return m_direct_members;
}
void OAINSXSecurityGroup::setDirectMembers(const QList<OAIReference> &direct_members) {
    m_direct_members = direct_members;
    m_direct_members_isSet = true;
}

bool OAINSXSecurityGroup::is_direct_members_Set() const{
    return m_direct_members_isSet;
}

bool OAINSXSecurityGroup::is_direct_members_Valid() const{
    return m_direct_members_isValid;
}

QList<OAIRuleSet> OAINSXSecurityGroup::getDirectSourceRules() const {
    return m_direct_source_rules;
}
void OAINSXSecurityGroup::setDirectSourceRules(const QList<OAIRuleSet> &direct_source_rules) {
    m_direct_source_rules = direct_source_rules;
    m_direct_source_rules_isSet = true;
}

bool OAINSXSecurityGroup::is_direct_source_rules_Set() const{
    return m_direct_source_rules_isSet;
}

bool OAINSXSecurityGroup::is_direct_source_rules_Valid() const{
    return m_direct_source_rules_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getExcludedMembers() const {
    return m_excluded_members;
}
void OAINSXSecurityGroup::setExcludedMembers(const QList<OAIReference> &excluded_members) {
    m_excluded_members = excluded_members;
    m_excluded_members_isSet = true;
}

bool OAINSXSecurityGroup::is_excluded_members_Set() const{
    return m_excluded_members_isSet;
}

bool OAINSXSecurityGroup::is_excluded_members_Valid() const{
    return m_excluded_members_isValid;
}

QList<OAIRuleSet> OAINSXSecurityGroup::getIndirectDestinationRules() const {
    return m_indirect_destination_rules;
}
void OAINSXSecurityGroup::setIndirectDestinationRules(const QList<OAIRuleSet> &indirect_destination_rules) {
    m_indirect_destination_rules = indirect_destination_rules;
    m_indirect_destination_rules_isSet = true;
}

bool OAINSXSecurityGroup::is_indirect_destination_rules_Set() const{
    return m_indirect_destination_rules_isSet;
}

bool OAINSXSecurityGroup::is_indirect_destination_rules_Valid() const{
    return m_indirect_destination_rules_isValid;
}

QList<OAIRuleSet> OAINSXSecurityGroup::getIndirectSourceRules() const {
    return m_indirect_source_rules;
}
void OAINSXSecurityGroup::setIndirectSourceRules(const QList<OAIRuleSet> &indirect_source_rules) {
    m_indirect_source_rules = indirect_source_rules;
    m_indirect_source_rules_isSet = true;
}

bool OAINSXSecurityGroup::is_indirect_source_rules_Set() const{
    return m_indirect_source_rules_isSet;
}

bool OAINSXSecurityGroup::is_indirect_source_rules_Valid() const{
    return m_indirect_source_rules_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getParents() const {
    return m_parents;
}
void OAINSXSecurityGroup::setParents(const QList<OAIReference> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAINSXSecurityGroup::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAINSXSecurityGroup::is_parents_Valid() const{
    return m_parents_isValid;
}

qint32 OAINSXSecurityGroup::getTranslatedVmCount() const {
    return m_translated_vm_count;
}
void OAINSXSecurityGroup::setTranslatedVmCount(const qint32 &translated_vm_count) {
    m_translated_vm_count = translated_vm_count;
    m_translated_vm_count_isSet = true;
}

bool OAINSXSecurityGroup::is_translated_vm_count_Set() const{
    return m_translated_vm_count_isSet;
}

bool OAINSXSecurityGroup::is_translated_vm_count_Valid() const{
    return m_translated_vm_count_isValid;
}

QString OAINSXSecurityGroup::getVendorId() const {
    return m_vendor_id;
}
void OAINSXSecurityGroup::setVendorId(const QString &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAINSXSecurityGroup::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAINSXSecurityGroup::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getIpSets() const {
    return m_ip_sets;
}
void OAINSXSecurityGroup::setIpSets(const QList<OAIReference> &ip_sets) {
    m_ip_sets = ip_sets;
    m_ip_sets_isSet = true;
}

bool OAINSXSecurityGroup::is_ip_sets_Set() const{
    return m_ip_sets_isSet;
}

bool OAINSXSecurityGroup::is_ip_sets_Valid() const{
    return m_ip_sets_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getNsxManagers() const {
    return m_nsx_managers;
}
void OAINSXSecurityGroup::setNsxManagers(const QList<OAIReference> &nsx_managers) {
    m_nsx_managers = nsx_managers;
    m_nsx_managers_isSet = true;
}

bool OAINSXSecurityGroup::is_nsx_managers_Set() const{
    return m_nsx_managers_isSet;
}

bool OAINSXSecurityGroup::is_nsx_managers_Valid() const{
    return m_nsx_managers_isValid;
}

OAIScopeEnum OAINSXSecurityGroup::getScope() const {
    return m_scope;
}
void OAINSXSecurityGroup::setScope(const OAIScopeEnum &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAINSXSecurityGroup::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAINSXSecurityGroup::is_scope_Valid() const{
    return m_scope_isValid;
}

QList<OAIReference> OAINSXSecurityGroup::getSecurityTags() const {
    return m_security_tags;
}
void OAINSXSecurityGroup::setSecurityTags(const QList<OAIReference> &security_tags) {
    m_security_tags = security_tags;
    m_security_tags_isSet = true;
}

bool OAINSXSecurityGroup::is_security_tags_Set() const{
    return m_security_tags_isSet;
}

bool OAINSXSecurityGroup::is_security_tags_Valid() const{
    return m_security_tags_isValid;
}

bool OAINSXSecurityGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_destination_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_source_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indirect_destination_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indirect_source_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_translated_vm_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_managers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINSXSecurityGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
