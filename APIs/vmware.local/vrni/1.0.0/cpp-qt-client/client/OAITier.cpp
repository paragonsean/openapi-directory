/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITier::OAITier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITier::OAITier() {
    this->initializeModel();
}

OAITier::~OAITier() {}

void OAITier::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_application_isSet = false;
    m_application_isValid = false;

    m_group_membership_criteria_isSet = false;
    m_group_membership_criteria_isValid = false;
}

void OAITier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITier::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entity_id")]);
    m_entity_id_isSet = !json[QString("entity_id")].isNull() && m_entity_id_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entity_type")]);
    m_entity_type_isSet = !json[QString("entity_type")].isNull() && m_entity_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_group_membership_criteria_isValid = ::OpenAPI::fromJsonValue(m_group_membership_criteria, json[QString("group_membership_criteria")]);
    m_group_membership_criteria_isSet = !json[QString("group_membership_criteria")].isNull() && m_group_membership_criteria_isValid;
}

QString OAITier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITier::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entity_id"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_type.isSet()) {
        obj.insert(QString("entity_type"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_group_membership_criteria.size() > 0) {
        obj.insert(QString("group_membership_criteria"), ::OpenAPI::toJsonValue(m_group_membership_criteria));
    }
    return obj;
}

QString OAITier::getEntityId() const {
    return m_entity_id;
}
void OAITier::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAITier::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAITier::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

OAIEntityType OAITier::getEntityType() const {
    return m_entity_type;
}
void OAITier::setEntityType(const OAIEntityType &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAITier::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAITier::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAITier::getName() const {
    return m_name;
}
void OAITier::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITier::is_name_Set() const{
    return m_name_isSet;
}

bool OAITier::is_name_Valid() const{
    return m_name_isValid;
}

OAIReference OAITier::getApplication() const {
    return m_application;
}
void OAITier::setApplication(const OAIReference &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAITier::is_application_Set() const{
    return m_application_isSet;
}

bool OAITier::is_application_Valid() const{
    return m_application_isValid;
}

QList<OAIGroupMembershipCriteria> OAITier::getGroupMembershipCriteria() const {
    return m_group_membership_criteria;
}
void OAITier::setGroupMembershipCriteria(const QList<OAIGroupMembershipCriteria> &group_membership_criteria) {
    m_group_membership_criteria = group_membership_criteria;
    m_group_membership_criteria_isSet = true;
}

bool OAITier::is_group_membership_criteria_Set() const{
    return m_group_membership_criteria_isSet;
}

bool OAITier::is_group_membership_criteria_Valid() const{
    return m_group_membership_criteria_isValid;
}

bool OAITier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_membership_criteria.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
