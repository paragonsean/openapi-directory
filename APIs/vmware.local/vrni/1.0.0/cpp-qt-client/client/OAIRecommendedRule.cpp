/**
 * vRealize Network Insight API Reference
 * vRealize Network Insight API Reference
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedRule::OAIRecommendedRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedRule::OAIRecommendedRule() {
    this->initializeModel();
}

OAIRecommendedRule::~OAIRecommendedRule() {}

void OAIRecommendedRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_port_ranges_isSet = false;
    m_port_ranges_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIRecommendedRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_port_ranges_isValid = ::OpenAPI::fromJsonValue(m_port_ranges, json[QString("port_ranges")]);
    m_port_ranges_isSet = !json[QString("port_ranges")].isNull() && m_port_ranges_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIRecommendedRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_port_ranges.size() > 0) {
        obj.insert(QString("port_ranges"), ::OpenAPI::toJsonValue(m_port_ranges));
    }
    if (m_protocols.size() > 0) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIRecommendedRule::getAction() const {
    return m_action;
}
void OAIRecommendedRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRecommendedRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRecommendedRule::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIReference> OAIRecommendedRule::getDestinations() const {
    return m_destinations;
}
void OAIRecommendedRule::setDestinations(const QList<OAIReference> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIRecommendedRule::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIRecommendedRule::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QList<OAISimplePortRange> OAIRecommendedRule::getPortRanges() const {
    return m_port_ranges;
}
void OAIRecommendedRule::setPortRanges(const QList<OAISimplePortRange> &port_ranges) {
    m_port_ranges = port_ranges;
    m_port_ranges_isSet = true;
}

bool OAIRecommendedRule::is_port_ranges_Set() const{
    return m_port_ranges_isSet;
}

bool OAIRecommendedRule::is_port_ranges_Valid() const{
    return m_port_ranges_isValid;
}

QList<QString> OAIRecommendedRule::getProtocols() const {
    return m_protocols;
}
void OAIRecommendedRule::setProtocols(const QList<QString> &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIRecommendedRule::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIRecommendedRule::is_protocols_Valid() const{
    return m_protocols_isValid;
}

QList<OAIReference> OAIRecommendedRule::getSources() const {
    return m_sources;
}
void OAIRecommendedRule::setSources(const QList<OAIReference> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIRecommendedRule::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIRecommendedRule::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIRecommendedRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
