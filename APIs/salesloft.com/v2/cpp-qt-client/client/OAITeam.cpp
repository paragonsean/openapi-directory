/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam::OAITeam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam::OAITeam() {
    this->initializeModel();
}

OAITeam::~OAITeam() {}

void OAITeam::initializeModel() {

    m__private_fields_isSet = false;
    m__private_fields_isValid = false;

    m_allow_automated_email_steps_isSet = false;
    m_allow_automated_email_steps_isValid = false;

    m_call_recording_disabled_isSet = false;
    m_call_recording_disabled_isValid = false;

    m_click_tracking_default_isSet = false;
    m_click_tracking_default_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_tracking_domain_isSet = false;
    m_custom_tracking_domain_isValid = false;

    m_deactivated_isSet = false;
    m_deactivated_isValid = false;

    m_dispositions_required_isSet = false;
    m_dispositions_required_isValid = false;

    m_email_daily_limit_isSet = false;
    m_email_daily_limit_isValid = false;

    m_group_privacy_setting_isSet = false;
    m_group_privacy_setting_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_limit_isSet = false;
    m_license_limit_isValid = false;

    m_local_dial_enabled_isSet = false;
    m_local_dial_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_plan_features_isSet = false;
    m_plan_features_isValid = false;

    m_record_by_default_isSet = false;
    m_record_by_default_isValid = false;

    m_sentiments_required_isSet = false;
    m_sentiments_required_isValid = false;

    m_team_visibility_default_isSet = false;
    m_team_visibility_default_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITeam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam::fromJsonObject(QJsonObject json) {

    m__private_fields_isValid = ::OpenAPI::fromJsonValue(m__private_fields, json[QString("_private_fields")]);
    m__private_fields_isSet = !json[QString("_private_fields")].isNull() && m__private_fields_isValid;

    m_allow_automated_email_steps_isValid = ::OpenAPI::fromJsonValue(m_allow_automated_email_steps, json[QString("allow_automated_email_steps")]);
    m_allow_automated_email_steps_isSet = !json[QString("allow_automated_email_steps")].isNull() && m_allow_automated_email_steps_isValid;

    m_call_recording_disabled_isValid = ::OpenAPI::fromJsonValue(m_call_recording_disabled, json[QString("call_recording_disabled")]);
    m_call_recording_disabled_isSet = !json[QString("call_recording_disabled")].isNull() && m_call_recording_disabled_isValid;

    m_click_tracking_default_isValid = ::OpenAPI::fromJsonValue(m_click_tracking_default, json[QString("click_tracking_default")]);
    m_click_tracking_default_isSet = !json[QString("click_tracking_default")].isNull() && m_click_tracking_default_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_tracking_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_tracking_domain, json[QString("custom_tracking_domain")]);
    m_custom_tracking_domain_isSet = !json[QString("custom_tracking_domain")].isNull() && m_custom_tracking_domain_isValid;

    m_deactivated_isValid = ::OpenAPI::fromJsonValue(m_deactivated, json[QString("deactivated")]);
    m_deactivated_isSet = !json[QString("deactivated")].isNull() && m_deactivated_isValid;

    m_dispositions_required_isValid = ::OpenAPI::fromJsonValue(m_dispositions_required, json[QString("dispositions_required")]);
    m_dispositions_required_isSet = !json[QString("dispositions_required")].isNull() && m_dispositions_required_isValid;

    m_email_daily_limit_isValid = ::OpenAPI::fromJsonValue(m_email_daily_limit, json[QString("email_daily_limit")]);
    m_email_daily_limit_isSet = !json[QString("email_daily_limit")].isNull() && m_email_daily_limit_isValid;

    m_group_privacy_setting_isValid = ::OpenAPI::fromJsonValue(m_group_privacy_setting, json[QString("group_privacy_setting")]);
    m_group_privacy_setting_isSet = !json[QString("group_privacy_setting")].isNull() && m_group_privacy_setting_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_limit_isValid = ::OpenAPI::fromJsonValue(m_license_limit, json[QString("license_limit")]);
    m_license_limit_isSet = !json[QString("license_limit")].isNull() && m_license_limit_isValid;

    m_local_dial_enabled_isValid = ::OpenAPI::fromJsonValue(m_local_dial_enabled, json[QString("local_dial_enabled")]);
    m_local_dial_enabled_isSet = !json[QString("local_dial_enabled")].isNull() && m_local_dial_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_plan_features_isValid = ::OpenAPI::fromJsonValue(m_plan_features, json[QString("plan_features")]);
    m_plan_features_isSet = !json[QString("plan_features")].isNull() && m_plan_features_isValid;

    m_record_by_default_isValid = ::OpenAPI::fromJsonValue(m_record_by_default, json[QString("record_by_default")]);
    m_record_by_default_isSet = !json[QString("record_by_default")].isNull() && m_record_by_default_isValid;

    m_sentiments_required_isValid = ::OpenAPI::fromJsonValue(m_sentiments_required, json[QString("sentiments_required")]);
    m_sentiments_required_isSet = !json[QString("sentiments_required")].isNull() && m_sentiments_required_isValid;

    m_team_visibility_default_isValid = ::OpenAPI::fromJsonValue(m_team_visibility_default, json[QString("team_visibility_default")]);
    m_team_visibility_default_isSet = !json[QString("team_visibility_default")].isNull() && m_team_visibility_default_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITeam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam::asJsonObject() const {
    QJsonObject obj;
    if (m__private_fields_isSet) {
        obj.insert(QString("_private_fields"), ::OpenAPI::toJsonValue(m__private_fields));
    }
    if (m_allow_automated_email_steps_isSet) {
        obj.insert(QString("allow_automated_email_steps"), ::OpenAPI::toJsonValue(m_allow_automated_email_steps));
    }
    if (m_call_recording_disabled_isSet) {
        obj.insert(QString("call_recording_disabled"), ::OpenAPI::toJsonValue(m_call_recording_disabled));
    }
    if (m_click_tracking_default_isSet) {
        obj.insert(QString("click_tracking_default"), ::OpenAPI::toJsonValue(m_click_tracking_default));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_tracking_domain_isSet) {
        obj.insert(QString("custom_tracking_domain"), ::OpenAPI::toJsonValue(m_custom_tracking_domain));
    }
    if (m_deactivated_isSet) {
        obj.insert(QString("deactivated"), ::OpenAPI::toJsonValue(m_deactivated));
    }
    if (m_dispositions_required_isSet) {
        obj.insert(QString("dispositions_required"), ::OpenAPI::toJsonValue(m_dispositions_required));
    }
    if (m_email_daily_limit_isSet) {
        obj.insert(QString("email_daily_limit"), ::OpenAPI::toJsonValue(m_email_daily_limit));
    }
    if (m_group_privacy_setting_isSet) {
        obj.insert(QString("group_privacy_setting"), ::OpenAPI::toJsonValue(m_group_privacy_setting));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_limit_isSet) {
        obj.insert(QString("license_limit"), ::OpenAPI::toJsonValue(m_license_limit));
    }
    if (m_local_dial_enabled_isSet) {
        obj.insert(QString("local_dial_enabled"), ::OpenAPI::toJsonValue(m_local_dial_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_plan_features_isSet) {
        obj.insert(QString("plan_features"), ::OpenAPI::toJsonValue(m_plan_features));
    }
    if (m_record_by_default_isSet) {
        obj.insert(QString("record_by_default"), ::OpenAPI::toJsonValue(m_record_by_default));
    }
    if (m_sentiments_required_isSet) {
        obj.insert(QString("sentiments_required"), ::OpenAPI::toJsonValue(m_sentiments_required));
    }
    if (m_team_visibility_default_isSet) {
        obj.insert(QString("team_visibility_default"), ::OpenAPI::toJsonValue(m_team_visibility_default));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIObject OAITeam::getPrivateFields() const {
    return m__private_fields;
}
void OAITeam::setPrivateFields(const OAIObject &_private_fields) {
    m__private_fields = _private_fields;
    m__private_fields_isSet = true;
}

bool OAITeam::is__private_fields_Set() const{
    return m__private_fields_isSet;
}

bool OAITeam::is__private_fields_Valid() const{
    return m__private_fields_isValid;
}

bool OAITeam::isAllowAutomatedEmailSteps() const {
    return m_allow_automated_email_steps;
}
void OAITeam::setAllowAutomatedEmailSteps(const bool &allow_automated_email_steps) {
    m_allow_automated_email_steps = allow_automated_email_steps;
    m_allow_automated_email_steps_isSet = true;
}

bool OAITeam::is_allow_automated_email_steps_Set() const{
    return m_allow_automated_email_steps_isSet;
}

bool OAITeam::is_allow_automated_email_steps_Valid() const{
    return m_allow_automated_email_steps_isValid;
}

bool OAITeam::isCallRecordingDisabled() const {
    return m_call_recording_disabled;
}
void OAITeam::setCallRecordingDisabled(const bool &call_recording_disabled) {
    m_call_recording_disabled = call_recording_disabled;
    m_call_recording_disabled_isSet = true;
}

bool OAITeam::is_call_recording_disabled_Set() const{
    return m_call_recording_disabled_isSet;
}

bool OAITeam::is_call_recording_disabled_Valid() const{
    return m_call_recording_disabled_isValid;
}

bool OAITeam::isClickTrackingDefault() const {
    return m_click_tracking_default;
}
void OAITeam::setClickTrackingDefault(const bool &click_tracking_default) {
    m_click_tracking_default = click_tracking_default;
    m_click_tracking_default_isSet = true;
}

bool OAITeam::is_click_tracking_default_Set() const{
    return m_click_tracking_default_isSet;
}

bool OAITeam::is_click_tracking_default_Valid() const{
    return m_click_tracking_default_isValid;
}

QDateTime OAITeam::getCreatedAt() const {
    return m_created_at;
}
void OAITeam::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITeam::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITeam::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITeam::getCustomTrackingDomain() const {
    return m_custom_tracking_domain;
}
void OAITeam::setCustomTrackingDomain(const QString &custom_tracking_domain) {
    m_custom_tracking_domain = custom_tracking_domain;
    m_custom_tracking_domain_isSet = true;
}

bool OAITeam::is_custom_tracking_domain_Set() const{
    return m_custom_tracking_domain_isSet;
}

bool OAITeam::is_custom_tracking_domain_Valid() const{
    return m_custom_tracking_domain_isValid;
}

bool OAITeam::isDeactivated() const {
    return m_deactivated;
}
void OAITeam::setDeactivated(const bool &deactivated) {
    m_deactivated = deactivated;
    m_deactivated_isSet = true;
}

bool OAITeam::is_deactivated_Set() const{
    return m_deactivated_isSet;
}

bool OAITeam::is_deactivated_Valid() const{
    return m_deactivated_isValid;
}

bool OAITeam::isDispositionsRequired() const {
    return m_dispositions_required;
}
void OAITeam::setDispositionsRequired(const bool &dispositions_required) {
    m_dispositions_required = dispositions_required;
    m_dispositions_required_isSet = true;
}

bool OAITeam::is_dispositions_required_Set() const{
    return m_dispositions_required_isSet;
}

bool OAITeam::is_dispositions_required_Valid() const{
    return m_dispositions_required_isValid;
}

qint32 OAITeam::getEmailDailyLimit() const {
    return m_email_daily_limit;
}
void OAITeam::setEmailDailyLimit(const qint32 &email_daily_limit) {
    m_email_daily_limit = email_daily_limit;
    m_email_daily_limit_isSet = true;
}

bool OAITeam::is_email_daily_limit_Set() const{
    return m_email_daily_limit_isSet;
}

bool OAITeam::is_email_daily_limit_Valid() const{
    return m_email_daily_limit_isValid;
}

QString OAITeam::getGroupPrivacySetting() const {
    return m_group_privacy_setting;
}
void OAITeam::setGroupPrivacySetting(const QString &group_privacy_setting) {
    m_group_privacy_setting = group_privacy_setting;
    m_group_privacy_setting_isSet = true;
}

bool OAITeam::is_group_privacy_setting_Set() const{
    return m_group_privacy_setting_isSet;
}

bool OAITeam::is_group_privacy_setting_Valid() const{
    return m_group_privacy_setting_isValid;
}

qint32 OAITeam::getId() const {
    return m_id;
}
void OAITeam::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeam::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeam::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAITeam::getLicenseLimit() const {
    return m_license_limit;
}
void OAITeam::setLicenseLimit(const qint32 &license_limit) {
    m_license_limit = license_limit;
    m_license_limit_isSet = true;
}

bool OAITeam::is_license_limit_Set() const{
    return m_license_limit_isSet;
}

bool OAITeam::is_license_limit_Valid() const{
    return m_license_limit_isValid;
}

bool OAITeam::isLocalDialEnabled() const {
    return m_local_dial_enabled;
}
void OAITeam::setLocalDialEnabled(const bool &local_dial_enabled) {
    m_local_dial_enabled = local_dial_enabled;
    m_local_dial_enabled_isSet = true;
}

bool OAITeam::is_local_dial_enabled_Set() const{
    return m_local_dial_enabled_isSet;
}

bool OAITeam::is_local_dial_enabled_Valid() const{
    return m_local_dial_enabled_isValid;
}

QString OAITeam::getName() const {
    return m_name;
}
void OAITeam::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeam::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeam::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeam::getPlan() const {
    return m_plan;
}
void OAITeam::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAITeam::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAITeam::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIObject OAITeam::getPlanFeatures() const {
    return m_plan_features;
}
void OAITeam::setPlanFeatures(const OAIObject &plan_features) {
    m_plan_features = plan_features;
    m_plan_features_isSet = true;
}

bool OAITeam::is_plan_features_Set() const{
    return m_plan_features_isSet;
}

bool OAITeam::is_plan_features_Valid() const{
    return m_plan_features_isValid;
}

bool OAITeam::isRecordByDefault() const {
    return m_record_by_default;
}
void OAITeam::setRecordByDefault(const bool &record_by_default) {
    m_record_by_default = record_by_default;
    m_record_by_default_isSet = true;
}

bool OAITeam::is_record_by_default_Set() const{
    return m_record_by_default_isSet;
}

bool OAITeam::is_record_by_default_Valid() const{
    return m_record_by_default_isValid;
}

bool OAITeam::isSentimentsRequired() const {
    return m_sentiments_required;
}
void OAITeam::setSentimentsRequired(const bool &sentiments_required) {
    m_sentiments_required = sentiments_required;
    m_sentiments_required_isSet = true;
}

bool OAITeam::is_sentiments_required_Set() const{
    return m_sentiments_required_isSet;
}

bool OAITeam::is_sentiments_required_Valid() const{
    return m_sentiments_required_isValid;
}

QString OAITeam::getTeamVisibilityDefault() const {
    return m_team_visibility_default;
}
void OAITeam::setTeamVisibilityDefault(const QString &team_visibility_default) {
    m_team_visibility_default = team_visibility_default;
    m_team_visibility_default_isSet = true;
}

bool OAITeam::is_team_visibility_default_Set() const{
    return m_team_visibility_default_isSet;
}

bool OAITeam::is_team_visibility_default_Valid() const{
    return m_team_visibility_default_isValid;
}

QDateTime OAITeam::getUpdatedAt() const {
    return m_updated_at;
}
void OAITeam::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITeam::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITeam::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITeam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__private_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_automated_email_steps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_recording_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tracking_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_tracking_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deactivated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispositions_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_daily_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_privacy_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_dial_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiments_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_visibility_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
