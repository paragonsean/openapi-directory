/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_bouncing_isSet = false;
    m_bouncing_isValid = false;

    m_cadences_isSet = false;
    m_cadences_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_contact_restrictions_isSet = false;
    m_contact_restrictions_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crm_id_isSet = false;
    m_crm_id_isValid = false;

    m_crm_object_type_isSet = false;
    m_crm_object_type_isValid = false;

    m_crm_url_isSet = false;
    m_crm_url_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_do_not_contact_isSet = false;
    m_do_not_contact_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_eu_resident_isSet = false;
    m_eu_resident_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_full_email_address_isSet = false;
    m_full_email_address_isValid = false;

    m_home_phone_isSet = false;
    m_home_phone_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_isSet = false;
    m_import_isValid = false;

    m_job_seniority_isSet = false;
    m_job_seniority_isValid = false;

    m_last_completed_step_isSet = false;
    m_last_completed_step_isValid = false;

    m_last_completed_step_cadence_isSet = false;
    m_last_completed_step_cadence_isValid = false;

    m_last_contacted_at_isSet = false;
    m_last_contacted_at_isValid = false;

    m_last_contacted_by_isSet = false;
    m_last_contacted_by_isValid = false;

    m_last_contacted_type_isSet = false;
    m_last_contacted_type_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_replied_at_isSet = false;
    m_last_replied_at_isValid = false;

    m_linkedin_url_isSet = false;
    m_linkedin_url_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_locale_utc_offset_isSet = false;
    m_locale_utc_offset_isValid = false;

    m_mobile_phone_isSet = false;
    m_mobile_phone_isValid = false;

    m_most_recent_cadence_isSet = false;
    m_most_recent_cadence_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_owner_crm_id_isSet = false;
    m_owner_crm_id_isValid = false;

    m_person_company_industry_isSet = false;
    m_person_company_industry_isValid = false;

    m_person_company_name_isSet = false;
    m_person_company_name_isValid = false;

    m_person_company_website_isSet = false;
    m_person_company_website_isValid = false;

    m_person_stage_isSet = false;
    m_person_stage_isValid = false;

    m_personal_email_address_isSet = false;
    m_personal_email_address_isValid = false;

    m_personal_website_isSet = false;
    m_personal_website_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_phone_extension_isSet = false;
    m_phone_extension_isValid = false;

    m_secondary_email_address_isSet = false;
    m_secondary_email_address_isValid = false;

    m_starred_isSet = false;
    m_starred_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_twitter_handle_isSet = false;
    m_twitter_handle_isValid = false;

    m_untouched_isSet = false;
    m_untouched_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_work_city_isSet = false;
    m_work_city_isValid = false;

    m_work_country_isSet = false;
    m_work_country_isValid = false;

    m_work_state_isSet = false;
    m_work_state_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_bouncing_isValid = ::OpenAPI::fromJsonValue(m_bouncing, json[QString("bouncing")]);
    m_bouncing_isSet = !json[QString("bouncing")].isNull() && m_bouncing_isValid;

    m_cadences_isValid = ::OpenAPI::fromJsonValue(m_cadences, json[QString("cadences")]);
    m_cadences_isSet = !json[QString("cadences")].isNull() && m_cadences_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_contact_restrictions_isValid = ::OpenAPI::fromJsonValue(m_contact_restrictions, json[QString("contact_restrictions")]);
    m_contact_restrictions_isSet = !json[QString("contact_restrictions")].isNull() && m_contact_restrictions_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crm_id_isValid = ::OpenAPI::fromJsonValue(m_crm_id, json[QString("crm_id")]);
    m_crm_id_isSet = !json[QString("crm_id")].isNull() && m_crm_id_isValid;

    m_crm_object_type_isValid = ::OpenAPI::fromJsonValue(m_crm_object_type, json[QString("crm_object_type")]);
    m_crm_object_type_isSet = !json[QString("crm_object_type")].isNull() && m_crm_object_type_isValid;

    m_crm_url_isValid = ::OpenAPI::fromJsonValue(m_crm_url, json[QString("crm_url")]);
    m_crm_url_isSet = !json[QString("crm_url")].isNull() && m_crm_url_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_do_not_contact_isValid = ::OpenAPI::fromJsonValue(m_do_not_contact, json[QString("do_not_contact")]);
    m_do_not_contact_isSet = !json[QString("do_not_contact")].isNull() && m_do_not_contact_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_eu_resident_isValid = ::OpenAPI::fromJsonValue(m_eu_resident, json[QString("eu_resident")]);
    m_eu_resident_isSet = !json[QString("eu_resident")].isNull() && m_eu_resident_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_full_email_address_isValid = ::OpenAPI::fromJsonValue(m_full_email_address, json[QString("full_email_address")]);
    m_full_email_address_isSet = !json[QString("full_email_address")].isNull() && m_full_email_address_isValid;

    m_home_phone_isValid = ::OpenAPI::fromJsonValue(m_home_phone, json[QString("home_phone")]);
    m_home_phone_isSet = !json[QString("home_phone")].isNull() && m_home_phone_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_isValid = ::OpenAPI::fromJsonValue(m_import, json[QString("import")]);
    m_import_isSet = !json[QString("import")].isNull() && m_import_isValid;

    m_job_seniority_isValid = ::OpenAPI::fromJsonValue(m_job_seniority, json[QString("job_seniority")]);
    m_job_seniority_isSet = !json[QString("job_seniority")].isNull() && m_job_seniority_isValid;

    m_last_completed_step_isValid = ::OpenAPI::fromJsonValue(m_last_completed_step, json[QString("last_completed_step")]);
    m_last_completed_step_isSet = !json[QString("last_completed_step")].isNull() && m_last_completed_step_isValid;

    m_last_completed_step_cadence_isValid = ::OpenAPI::fromJsonValue(m_last_completed_step_cadence, json[QString("last_completed_step_cadence")]);
    m_last_completed_step_cadence_isSet = !json[QString("last_completed_step_cadence")].isNull() && m_last_completed_step_cadence_isValid;

    m_last_contacted_at_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_at, json[QString("last_contacted_at")]);
    m_last_contacted_at_isSet = !json[QString("last_contacted_at")].isNull() && m_last_contacted_at_isValid;

    m_last_contacted_by_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_by, json[QString("last_contacted_by")]);
    m_last_contacted_by_isSet = !json[QString("last_contacted_by")].isNull() && m_last_contacted_by_isValid;

    m_last_contacted_type_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_type, json[QString("last_contacted_type")]);
    m_last_contacted_type_isSet = !json[QString("last_contacted_type")].isNull() && m_last_contacted_type_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_last_replied_at_isValid = ::OpenAPI::fromJsonValue(m_last_replied_at, json[QString("last_replied_at")]);
    m_last_replied_at_isSet = !json[QString("last_replied_at")].isNull() && m_last_replied_at_isValid;

    m_linkedin_url_isValid = ::OpenAPI::fromJsonValue(m_linkedin_url, json[QString("linkedin_url")]);
    m_linkedin_url_isSet = !json[QString("linkedin_url")].isNull() && m_linkedin_url_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_locale_utc_offset_isValid = ::OpenAPI::fromJsonValue(m_locale_utc_offset, json[QString("locale_utc_offset")]);
    m_locale_utc_offset_isSet = !json[QString("locale_utc_offset")].isNull() && m_locale_utc_offset_isValid;

    m_mobile_phone_isValid = ::OpenAPI::fromJsonValue(m_mobile_phone, json[QString("mobile_phone")]);
    m_mobile_phone_isSet = !json[QString("mobile_phone")].isNull() && m_mobile_phone_isValid;

    m_most_recent_cadence_isValid = ::OpenAPI::fromJsonValue(m_most_recent_cadence, json[QString("most_recent_cadence")]);
    m_most_recent_cadence_isSet = !json[QString("most_recent_cadence")].isNull() && m_most_recent_cadence_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_owner_crm_id_isValid = ::OpenAPI::fromJsonValue(m_owner_crm_id, json[QString("owner_crm_id")]);
    m_owner_crm_id_isSet = !json[QString("owner_crm_id")].isNull() && m_owner_crm_id_isValid;

    m_person_company_industry_isValid = ::OpenAPI::fromJsonValue(m_person_company_industry, json[QString("person_company_industry")]);
    m_person_company_industry_isSet = !json[QString("person_company_industry")].isNull() && m_person_company_industry_isValid;

    m_person_company_name_isValid = ::OpenAPI::fromJsonValue(m_person_company_name, json[QString("person_company_name")]);
    m_person_company_name_isSet = !json[QString("person_company_name")].isNull() && m_person_company_name_isValid;

    m_person_company_website_isValid = ::OpenAPI::fromJsonValue(m_person_company_website, json[QString("person_company_website")]);
    m_person_company_website_isSet = !json[QString("person_company_website")].isNull() && m_person_company_website_isValid;

    m_person_stage_isValid = ::OpenAPI::fromJsonValue(m_person_stage, json[QString("person_stage")]);
    m_person_stage_isSet = !json[QString("person_stage")].isNull() && m_person_stage_isValid;

    m_personal_email_address_isValid = ::OpenAPI::fromJsonValue(m_personal_email_address, json[QString("personal_email_address")]);
    m_personal_email_address_isSet = !json[QString("personal_email_address")].isNull() && m_personal_email_address_isValid;

    m_personal_website_isValid = ::OpenAPI::fromJsonValue(m_personal_website, json[QString("personal_website")]);
    m_personal_website_isSet = !json[QString("personal_website")].isNull() && m_personal_website_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_phone_extension_isValid = ::OpenAPI::fromJsonValue(m_phone_extension, json[QString("phone_extension")]);
    m_phone_extension_isSet = !json[QString("phone_extension")].isNull() && m_phone_extension_isValid;

    m_secondary_email_address_isValid = ::OpenAPI::fromJsonValue(m_secondary_email_address, json[QString("secondary_email_address")]);
    m_secondary_email_address_isSet = !json[QString("secondary_email_address")].isNull() && m_secondary_email_address_isValid;

    m_starred_isValid = ::OpenAPI::fromJsonValue(m_starred, json[QString("starred")]);
    m_starred_isSet = !json[QString("starred")].isNull() && m_starred_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("success_count")]);
    m_success_count_isSet = !json[QString("success_count")].isNull() && m_success_count_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_twitter_handle_isValid = ::OpenAPI::fromJsonValue(m_twitter_handle, json[QString("twitter_handle")]);
    m_twitter_handle_isSet = !json[QString("twitter_handle")].isNull() && m_twitter_handle_isValid;

    m_untouched_isValid = ::OpenAPI::fromJsonValue(m_untouched, json[QString("untouched")]);
    m_untouched_isSet = !json[QString("untouched")].isNull() && m_untouched_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_work_city_isValid = ::OpenAPI::fromJsonValue(m_work_city, json[QString("work_city")]);
    m_work_city_isSet = !json[QString("work_city")].isNull() && m_work_city_isValid;

    m_work_country_isValid = ::OpenAPI::fromJsonValue(m_work_country, json[QString("work_country")]);
    m_work_country_isSet = !json[QString("work_country")].isNull() && m_work_country_isValid;

    m_work_state_isValid = ::OpenAPI::fromJsonValue(m_work_state, json[QString("work_state")]);
    m_work_state_isSet = !json[QString("work_state")].isNull() && m_work_state_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_account.isSet()) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_bouncing_isSet) {
        obj.insert(QString("bouncing"), ::OpenAPI::toJsonValue(m_bouncing));
    }
    if (m_cadences.size() > 0) {
        obj.insert(QString("cadences"), ::OpenAPI::toJsonValue(m_cadences));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_contact_restrictions.size() > 0) {
        obj.insert(QString("contact_restrictions"), ::OpenAPI::toJsonValue(m_contact_restrictions));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crm_id_isSet) {
        obj.insert(QString("crm_id"), ::OpenAPI::toJsonValue(m_crm_id));
    }
    if (m_crm_object_type_isSet) {
        obj.insert(QString("crm_object_type"), ::OpenAPI::toJsonValue(m_crm_object_type));
    }
    if (m_crm_url_isSet) {
        obj.insert(QString("crm_url"), ::OpenAPI::toJsonValue(m_crm_url));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_do_not_contact_isSet) {
        obj.insert(QString("do_not_contact"), ::OpenAPI::toJsonValue(m_do_not_contact));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_eu_resident_isSet) {
        obj.insert(QString("eu_resident"), ::OpenAPI::toJsonValue(m_eu_resident));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_full_email_address_isSet) {
        obj.insert(QString("full_email_address"), ::OpenAPI::toJsonValue(m_full_email_address));
    }
    if (m_home_phone_isSet) {
        obj.insert(QString("home_phone"), ::OpenAPI::toJsonValue(m_home_phone));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import.isSet()) {
        obj.insert(QString("import"), ::OpenAPI::toJsonValue(m_import));
    }
    if (m_job_seniority_isSet) {
        obj.insert(QString("job_seniority"), ::OpenAPI::toJsonValue(m_job_seniority));
    }
    if (m_last_completed_step.isSet()) {
        obj.insert(QString("last_completed_step"), ::OpenAPI::toJsonValue(m_last_completed_step));
    }
    if (m_last_completed_step_cadence.isSet()) {
        obj.insert(QString("last_completed_step_cadence"), ::OpenAPI::toJsonValue(m_last_completed_step_cadence));
    }
    if (m_last_contacted_at_isSet) {
        obj.insert(QString("last_contacted_at"), ::OpenAPI::toJsonValue(m_last_contacted_at));
    }
    if (m_last_contacted_by.isSet()) {
        obj.insert(QString("last_contacted_by"), ::OpenAPI::toJsonValue(m_last_contacted_by));
    }
    if (m_last_contacted_type_isSet) {
        obj.insert(QString("last_contacted_type"), ::OpenAPI::toJsonValue(m_last_contacted_type));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_replied_at_isSet) {
        obj.insert(QString("last_replied_at"), ::OpenAPI::toJsonValue(m_last_replied_at));
    }
    if (m_linkedin_url_isSet) {
        obj.insert(QString("linkedin_url"), ::OpenAPI::toJsonValue(m_linkedin_url));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_locale_utc_offset_isSet) {
        obj.insert(QString("locale_utc_offset"), ::OpenAPI::toJsonValue(m_locale_utc_offset));
    }
    if (m_mobile_phone_isSet) {
        obj.insert(QString("mobile_phone"), ::OpenAPI::toJsonValue(m_mobile_phone));
    }
    if (m_most_recent_cadence.isSet()) {
        obj.insert(QString("most_recent_cadence"), ::OpenAPI::toJsonValue(m_most_recent_cadence));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_owner_crm_id_isSet) {
        obj.insert(QString("owner_crm_id"), ::OpenAPI::toJsonValue(m_owner_crm_id));
    }
    if (m_person_company_industry_isSet) {
        obj.insert(QString("person_company_industry"), ::OpenAPI::toJsonValue(m_person_company_industry));
    }
    if (m_person_company_name_isSet) {
        obj.insert(QString("person_company_name"), ::OpenAPI::toJsonValue(m_person_company_name));
    }
    if (m_person_company_website_isSet) {
        obj.insert(QString("person_company_website"), ::OpenAPI::toJsonValue(m_person_company_website));
    }
    if (m_person_stage.isSet()) {
        obj.insert(QString("person_stage"), ::OpenAPI::toJsonValue(m_person_stage));
    }
    if (m_personal_email_address_isSet) {
        obj.insert(QString("personal_email_address"), ::OpenAPI::toJsonValue(m_personal_email_address));
    }
    if (m_personal_website_isSet) {
        obj.insert(QString("personal_website"), ::OpenAPI::toJsonValue(m_personal_website));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_phone_extension_isSet) {
        obj.insert(QString("phone_extension"), ::OpenAPI::toJsonValue(m_phone_extension));
    }
    if (m_secondary_email_address_isSet) {
        obj.insert(QString("secondary_email_address"), ::OpenAPI::toJsonValue(m_secondary_email_address));
    }
    if (m_starred_isSet) {
        obj.insert(QString("starred"), ::OpenAPI::toJsonValue(m_starred));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("success_count"), ::OpenAPI::toJsonValue(m_success_count));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_twitter_handle_isSet) {
        obj.insert(QString("twitter_handle"), ::OpenAPI::toJsonValue(m_twitter_handle));
    }
    if (m_untouched_isSet) {
        obj.insert(QString("untouched"), ::OpenAPI::toJsonValue(m_untouched));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_work_city_isSet) {
        obj.insert(QString("work_city"), ::OpenAPI::toJsonValue(m_work_city));
    }
    if (m_work_country_isSet) {
        obj.insert(QString("work_country"), ::OpenAPI::toJsonValue(m_work_country));
    }
    if (m_work_state_isSet) {
        obj.insert(QString("work_state"), ::OpenAPI::toJsonValue(m_work_state));
    }
    return obj;
}

OAIEmbeddedResource OAIPerson::getAccount() const {
    return m_account;
}
void OAIPerson::setAccount(const OAIEmbeddedResource &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIPerson::is_account_Set() const{
    return m_account_isSet;
}

bool OAIPerson::is_account_Valid() const{
    return m_account_isValid;
}

bool OAIPerson::isBouncing() const {
    return m_bouncing;
}
void OAIPerson::setBouncing(const bool &bouncing) {
    m_bouncing = bouncing;
    m_bouncing_isSet = true;
}

bool OAIPerson::is_bouncing_Set() const{
    return m_bouncing_isSet;
}

bool OAIPerson::is_bouncing_Valid() const{
    return m_bouncing_isValid;
}

QList<OAIEmbeddedResource> OAIPerson::getCadences() const {
    return m_cadences;
}
void OAIPerson::setCadences(const QList<OAIEmbeddedResource> &cadences) {
    m_cadences = cadences;
    m_cadences_isSet = true;
}

bool OAIPerson::is_cadences_Set() const{
    return m_cadences_isSet;
}

bool OAIPerson::is_cadences_Valid() const{
    return m_cadences_isValid;
}

QString OAIPerson::getCity() const {
    return m_city;
}
void OAIPerson::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIPerson::is_city_Set() const{
    return m_city_isSet;
}

bool OAIPerson::is_city_Valid() const{
    return m_city_isValid;
}

QList<QString> OAIPerson::getContactRestrictions() const {
    return m_contact_restrictions;
}
void OAIPerson::setContactRestrictions(const QList<QString> &contact_restrictions) {
    m_contact_restrictions = contact_restrictions;
    m_contact_restrictions_isSet = true;
}

bool OAIPerson::is_contact_restrictions_Set() const{
    return m_contact_restrictions_isSet;
}

bool OAIPerson::is_contact_restrictions_Valid() const{
    return m_contact_restrictions_isValid;
}

QString OAIPerson::getCountry() const {
    return m_country;
}
void OAIPerson::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPerson::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPerson::is_country_Valid() const{
    return m_country_isValid;
}

OAIPersonCounts OAIPerson::getCounts() const {
    return m_counts;
}
void OAIPerson::setCounts(const OAIPersonCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIPerson::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIPerson::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAIPerson::getCreatedAt() const {
    return m_created_at;
}
void OAIPerson::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPerson::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPerson::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPerson::getCrmId() const {
    return m_crm_id;
}
void OAIPerson::setCrmId(const QString &crm_id) {
    m_crm_id = crm_id;
    m_crm_id_isSet = true;
}

bool OAIPerson::is_crm_id_Set() const{
    return m_crm_id_isSet;
}

bool OAIPerson::is_crm_id_Valid() const{
    return m_crm_id_isValid;
}

QString OAIPerson::getCrmObjectType() const {
    return m_crm_object_type;
}
void OAIPerson::setCrmObjectType(const QString &crm_object_type) {
    m_crm_object_type = crm_object_type;
    m_crm_object_type_isSet = true;
}

bool OAIPerson::is_crm_object_type_Set() const{
    return m_crm_object_type_isSet;
}

bool OAIPerson::is_crm_object_type_Valid() const{
    return m_crm_object_type_isValid;
}

QString OAIPerson::getCrmUrl() const {
    return m_crm_url;
}
void OAIPerson::setCrmUrl(const QString &crm_url) {
    m_crm_url = crm_url;
    m_crm_url_isSet = true;
}

bool OAIPerson::is_crm_url_Set() const{
    return m_crm_url_isSet;
}

bool OAIPerson::is_crm_url_Valid() const{
    return m_crm_url_isValid;
}

OAIObject OAIPerson::getCustomFields() const {
    return m_custom_fields;
}
void OAIPerson::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIPerson::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIPerson::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIPerson::getDisplayName() const {
    return m_display_name;
}
void OAIPerson::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPerson::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPerson::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIPerson::isDoNotContact() const {
    return m_do_not_contact;
}
void OAIPerson::setDoNotContact(const bool &do_not_contact) {
    m_do_not_contact = do_not_contact;
    m_do_not_contact_isSet = true;
}

bool OAIPerson::is_do_not_contact_Set() const{
    return m_do_not_contact_isSet;
}

bool OAIPerson::is_do_not_contact_Valid() const{
    return m_do_not_contact_isValid;
}

QString OAIPerson::getEmailAddress() const {
    return m_email_address;
}
void OAIPerson::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIPerson::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIPerson::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAIPerson::isEuResident() const {
    return m_eu_resident;
}
void OAIPerson::setEuResident(const bool &eu_resident) {
    m_eu_resident = eu_resident;
    m_eu_resident_isSet = true;
}

bool OAIPerson::is_eu_resident_Set() const{
    return m_eu_resident_isSet;
}

bool OAIPerson::is_eu_resident_Valid() const{
    return m_eu_resident_isValid;
}

QString OAIPerson::getFirstName() const {
    return m_first_name;
}
void OAIPerson::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPerson::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPerson::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPerson::getFullEmailAddress() const {
    return m_full_email_address;
}
void OAIPerson::setFullEmailAddress(const QString &full_email_address) {
    m_full_email_address = full_email_address;
    m_full_email_address_isSet = true;
}

bool OAIPerson::is_full_email_address_Set() const{
    return m_full_email_address_isSet;
}

bool OAIPerson::is_full_email_address_Valid() const{
    return m_full_email_address_isValid;
}

QString OAIPerson::getHomePhone() const {
    return m_home_phone;
}
void OAIPerson::setHomePhone(const QString &home_phone) {
    m_home_phone = home_phone;
    m_home_phone_isSet = true;
}

bool OAIPerson::is_home_phone_Set() const{
    return m_home_phone_isSet;
}

bool OAIPerson::is_home_phone_Valid() const{
    return m_home_phone_isValid;
}

qint32 OAIPerson::getId() const {
    return m_id;
}
void OAIPerson::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerson::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerson::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAIPerson::getImport() const {
    return m_import;
}
void OAIPerson::setImport(const OAIEmbeddedResource &import) {
    m_import = import;
    m_import_isSet = true;
}

bool OAIPerson::is_import_Set() const{
    return m_import_isSet;
}

bool OAIPerson::is_import_Valid() const{
    return m_import_isValid;
}

QString OAIPerson::getJobSeniority() const {
    return m_job_seniority;
}
void OAIPerson::setJobSeniority(const QString &job_seniority) {
    m_job_seniority = job_seniority;
    m_job_seniority_isSet = true;
}

bool OAIPerson::is_job_seniority_Set() const{
    return m_job_seniority_isSet;
}

bool OAIPerson::is_job_seniority_Valid() const{
    return m_job_seniority_isValid;
}

OAIEmbeddedResource OAIPerson::getLastCompletedStep() const {
    return m_last_completed_step;
}
void OAIPerson::setLastCompletedStep(const OAIEmbeddedResource &last_completed_step) {
    m_last_completed_step = last_completed_step;
    m_last_completed_step_isSet = true;
}

bool OAIPerson::is_last_completed_step_Set() const{
    return m_last_completed_step_isSet;
}

bool OAIPerson::is_last_completed_step_Valid() const{
    return m_last_completed_step_isValid;
}

OAIEmbeddedResource OAIPerson::getLastCompletedStepCadence() const {
    return m_last_completed_step_cadence;
}
void OAIPerson::setLastCompletedStepCadence(const OAIEmbeddedResource &last_completed_step_cadence) {
    m_last_completed_step_cadence = last_completed_step_cadence;
    m_last_completed_step_cadence_isSet = true;
}

bool OAIPerson::is_last_completed_step_cadence_Set() const{
    return m_last_completed_step_cadence_isSet;
}

bool OAIPerson::is_last_completed_step_cadence_Valid() const{
    return m_last_completed_step_cadence_isValid;
}

QDateTime OAIPerson::getLastContactedAt() const {
    return m_last_contacted_at;
}
void OAIPerson::setLastContactedAt(const QDateTime &last_contacted_at) {
    m_last_contacted_at = last_contacted_at;
    m_last_contacted_at_isSet = true;
}

bool OAIPerson::is_last_contacted_at_Set() const{
    return m_last_contacted_at_isSet;
}

bool OAIPerson::is_last_contacted_at_Valid() const{
    return m_last_contacted_at_isValid;
}

OAIEmbeddedResource OAIPerson::getLastContactedBy() const {
    return m_last_contacted_by;
}
void OAIPerson::setLastContactedBy(const OAIEmbeddedResource &last_contacted_by) {
    m_last_contacted_by = last_contacted_by;
    m_last_contacted_by_isSet = true;
}

bool OAIPerson::is_last_contacted_by_Set() const{
    return m_last_contacted_by_isSet;
}

bool OAIPerson::is_last_contacted_by_Valid() const{
    return m_last_contacted_by_isValid;
}

QString OAIPerson::getLastContactedType() const {
    return m_last_contacted_type;
}
void OAIPerson::setLastContactedType(const QString &last_contacted_type) {
    m_last_contacted_type = last_contacted_type;
    m_last_contacted_type_isSet = true;
}

bool OAIPerson::is_last_contacted_type_Set() const{
    return m_last_contacted_type_isSet;
}

bool OAIPerson::is_last_contacted_type_Valid() const{
    return m_last_contacted_type_isValid;
}

QString OAIPerson::getLastName() const {
    return m_last_name;
}
void OAIPerson::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPerson::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPerson::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDateTime OAIPerson::getLastRepliedAt() const {
    return m_last_replied_at;
}
void OAIPerson::setLastRepliedAt(const QDateTime &last_replied_at) {
    m_last_replied_at = last_replied_at;
    m_last_replied_at_isSet = true;
}

bool OAIPerson::is_last_replied_at_Set() const{
    return m_last_replied_at_isSet;
}

bool OAIPerson::is_last_replied_at_Valid() const{
    return m_last_replied_at_isValid;
}

QString OAIPerson::getLinkedinUrl() const {
    return m_linkedin_url;
}
void OAIPerson::setLinkedinUrl(const QString &linkedin_url) {
    m_linkedin_url = linkedin_url;
    m_linkedin_url_isSet = true;
}

bool OAIPerson::is_linkedin_url_Set() const{
    return m_linkedin_url_isSet;
}

bool OAIPerson::is_linkedin_url_Valid() const{
    return m_linkedin_url_isValid;
}

QString OAIPerson::getLocale() const {
    return m_locale;
}
void OAIPerson::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIPerson::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIPerson::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIPerson::getLocaleUtcOffset() const {
    return m_locale_utc_offset;
}
void OAIPerson::setLocaleUtcOffset(const qint32 &locale_utc_offset) {
    m_locale_utc_offset = locale_utc_offset;
    m_locale_utc_offset_isSet = true;
}

bool OAIPerson::is_locale_utc_offset_Set() const{
    return m_locale_utc_offset_isSet;
}

bool OAIPerson::is_locale_utc_offset_Valid() const{
    return m_locale_utc_offset_isValid;
}

QString OAIPerson::getMobilePhone() const {
    return m_mobile_phone;
}
void OAIPerson::setMobilePhone(const QString &mobile_phone) {
    m_mobile_phone = mobile_phone;
    m_mobile_phone_isSet = true;
}

bool OAIPerson::is_mobile_phone_Set() const{
    return m_mobile_phone_isSet;
}

bool OAIPerson::is_mobile_phone_Valid() const{
    return m_mobile_phone_isValid;
}

OAIEmbeddedResource OAIPerson::getMostRecentCadence() const {
    return m_most_recent_cadence;
}
void OAIPerson::setMostRecentCadence(const OAIEmbeddedResource &most_recent_cadence) {
    m_most_recent_cadence = most_recent_cadence;
    m_most_recent_cadence_isSet = true;
}

bool OAIPerson::is_most_recent_cadence_Set() const{
    return m_most_recent_cadence_isSet;
}

bool OAIPerson::is_most_recent_cadence_Valid() const{
    return m_most_recent_cadence_isValid;
}

OAIEmbeddedResource OAIPerson::getOwner() const {
    return m_owner;
}
void OAIPerson::setOwner(const OAIEmbeddedResource &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPerson::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPerson::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIPerson::getOwnerCrmId() const {
    return m_owner_crm_id;
}
void OAIPerson::setOwnerCrmId(const QString &owner_crm_id) {
    m_owner_crm_id = owner_crm_id;
    m_owner_crm_id_isSet = true;
}

bool OAIPerson::is_owner_crm_id_Set() const{
    return m_owner_crm_id_isSet;
}

bool OAIPerson::is_owner_crm_id_Valid() const{
    return m_owner_crm_id_isValid;
}

QString OAIPerson::getPersonCompanyIndustry() const {
    return m_person_company_industry;
}
void OAIPerson::setPersonCompanyIndustry(const QString &person_company_industry) {
    m_person_company_industry = person_company_industry;
    m_person_company_industry_isSet = true;
}

bool OAIPerson::is_person_company_industry_Set() const{
    return m_person_company_industry_isSet;
}

bool OAIPerson::is_person_company_industry_Valid() const{
    return m_person_company_industry_isValid;
}

QString OAIPerson::getPersonCompanyName() const {
    return m_person_company_name;
}
void OAIPerson::setPersonCompanyName(const QString &person_company_name) {
    m_person_company_name = person_company_name;
    m_person_company_name_isSet = true;
}

bool OAIPerson::is_person_company_name_Set() const{
    return m_person_company_name_isSet;
}

bool OAIPerson::is_person_company_name_Valid() const{
    return m_person_company_name_isValid;
}

QString OAIPerson::getPersonCompanyWebsite() const {
    return m_person_company_website;
}
void OAIPerson::setPersonCompanyWebsite(const QString &person_company_website) {
    m_person_company_website = person_company_website;
    m_person_company_website_isSet = true;
}

bool OAIPerson::is_person_company_website_Set() const{
    return m_person_company_website_isSet;
}

bool OAIPerson::is_person_company_website_Valid() const{
    return m_person_company_website_isValid;
}

OAIEmbeddedResource OAIPerson::getPersonStage() const {
    return m_person_stage;
}
void OAIPerson::setPersonStage(const OAIEmbeddedResource &person_stage) {
    m_person_stage = person_stage;
    m_person_stage_isSet = true;
}

bool OAIPerson::is_person_stage_Set() const{
    return m_person_stage_isSet;
}

bool OAIPerson::is_person_stage_Valid() const{
    return m_person_stage_isValid;
}

QString OAIPerson::getPersonalEmailAddress() const {
    return m_personal_email_address;
}
void OAIPerson::setPersonalEmailAddress(const QString &personal_email_address) {
    m_personal_email_address = personal_email_address;
    m_personal_email_address_isSet = true;
}

bool OAIPerson::is_personal_email_address_Set() const{
    return m_personal_email_address_isSet;
}

bool OAIPerson::is_personal_email_address_Valid() const{
    return m_personal_email_address_isValid;
}

QString OAIPerson::getPersonalWebsite() const {
    return m_personal_website;
}
void OAIPerson::setPersonalWebsite(const QString &personal_website) {
    m_personal_website = personal_website;
    m_personal_website_isSet = true;
}

bool OAIPerson::is_personal_website_Set() const{
    return m_personal_website_isSet;
}

bool OAIPerson::is_personal_website_Valid() const{
    return m_personal_website_isValid;
}

QString OAIPerson::getPhone() const {
    return m_phone;
}
void OAIPerson::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPerson::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPerson::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIPerson::getPhoneExtension() const {
    return m_phone_extension;
}
void OAIPerson::setPhoneExtension(const QString &phone_extension) {
    m_phone_extension = phone_extension;
    m_phone_extension_isSet = true;
}

bool OAIPerson::is_phone_extension_Set() const{
    return m_phone_extension_isSet;
}

bool OAIPerson::is_phone_extension_Valid() const{
    return m_phone_extension_isValid;
}

QString OAIPerson::getSecondaryEmailAddress() const {
    return m_secondary_email_address;
}
void OAIPerson::setSecondaryEmailAddress(const QString &secondary_email_address) {
    m_secondary_email_address = secondary_email_address;
    m_secondary_email_address_isSet = true;
}

bool OAIPerson::is_secondary_email_address_Set() const{
    return m_secondary_email_address_isSet;
}

bool OAIPerson::is_secondary_email_address_Valid() const{
    return m_secondary_email_address_isValid;
}

bool OAIPerson::isStarred() const {
    return m_starred;
}
void OAIPerson::setStarred(const bool &starred) {
    m_starred = starred;
    m_starred_isSet = true;
}

bool OAIPerson::is_starred_Set() const{
    return m_starred_isSet;
}

bool OAIPerson::is_starred_Valid() const{
    return m_starred_isValid;
}

QString OAIPerson::getState() const {
    return m_state;
}
void OAIPerson::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPerson::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPerson::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIPerson::getSuccessCount() const {
    return m_success_count;
}
void OAIPerson::setSuccessCount(const qint32 &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIPerson::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIPerson::is_success_count_Valid() const{
    return m_success_count_isValid;
}

QList<QString> OAIPerson::getTags() const {
    return m_tags;
}
void OAIPerson::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPerson::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPerson::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPerson::getTitle() const {
    return m_title;
}
void OAIPerson::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPerson::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPerson::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPerson::getTwitterHandle() const {
    return m_twitter_handle;
}
void OAIPerson::setTwitterHandle(const QString &twitter_handle) {
    m_twitter_handle = twitter_handle;
    m_twitter_handle_isSet = true;
}

bool OAIPerson::is_twitter_handle_Set() const{
    return m_twitter_handle_isSet;
}

bool OAIPerson::is_twitter_handle_Valid() const{
    return m_twitter_handle_isValid;
}

bool OAIPerson::isUntouched() const {
    return m_untouched;
}
void OAIPerson::setUntouched(const bool &untouched) {
    m_untouched = untouched;
    m_untouched_isSet = true;
}

bool OAIPerson::is_untouched_Set() const{
    return m_untouched_isSet;
}

bool OAIPerson::is_untouched_Valid() const{
    return m_untouched_isValid;
}

QDateTime OAIPerson::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPerson::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPerson::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPerson::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPerson::getWorkCity() const {
    return m_work_city;
}
void OAIPerson::setWorkCity(const QString &work_city) {
    m_work_city = work_city;
    m_work_city_isSet = true;
}

bool OAIPerson::is_work_city_Set() const{
    return m_work_city_isSet;
}

bool OAIPerson::is_work_city_Valid() const{
    return m_work_city_isValid;
}

QString OAIPerson::getWorkCountry() const {
    return m_work_country;
}
void OAIPerson::setWorkCountry(const QString &work_country) {
    m_work_country = work_country;
    m_work_country_isSet = true;
}

bool OAIPerson::is_work_country_Set() const{
    return m_work_country_isSet;
}

bool OAIPerson::is_work_country_Valid() const{
    return m_work_country_isValid;
}

QString OAIPerson::getWorkState() const {
    return m_work_state;
}
void OAIPerson::setWorkState(const QString &work_state) {
    m_work_state = work_state;
    m_work_state_isSet = true;
}

bool OAIPerson::is_work_state_Set() const{
    return m_work_state_isSet;
}

bool OAIPerson::is_work_state_Valid() const{
    return m_work_state_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bouncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_resident_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_seniority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_step_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_replied_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_utc_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_crm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_company_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_company_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_website_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_untouched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
