/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeetingSettingsApi_H
#define OAI_OAIMeetingSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMeetingSetting.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeetingSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIMeetingSettingsApi(const int timeOut = 0);
    ~OAIMeetingSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  allow_booking_on_behalf bool [optional]
    * @param[in]  allow_booking_overtime bool [optional]
    * @param[in]  allow_event_overlap bool [optional]
    * @param[in]  availability_limit qint32 [optional]
    * @param[in]  availability_limit_enabled bool [optional]
    * @param[in]  buffer_time_duration qint32 [optional]
    * @param[in]  calendar_type QString [optional]
    * @param[in]  default_meeting_length qint32 [optional]
    * @param[in]  description QString [optional]
    * @param[in]  enable_calendar_sync bool [optional]
    * @param[in]  enable_dynamic_location bool [optional]
    * @param[in]  location QString [optional]
    * @param[in]  primary_calendar_connection_failed bool [optional]
    * @param[in]  primary_calendar_id QString [optional]
    * @param[in]  primary_calendar_name QString [optional]
    * @param[in]  reschedule_meetings_enabled bool [optional]
    * @param[in]  schedule_buffer_enabled bool [optional]
    * @param[in]  schedule_delay qint32 [optional]
    * @param[in]  share_event_detail bool [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  times_available OAIObject [optional]
    * @param[in]  title QString [optional]
    */
    virtual void v2MeetingsSettingsIdJsonPut(const QString &id, const ::OpenAPI::OptionalParam<bool> &allow_booking_on_behalf = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_booking_overtime = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allow_event_overlap = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &availability_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &availability_limit_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &buffer_time_duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &calendar_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &default_meeting_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_calendar_sync = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_dynamic_location = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &primary_calendar_connection_failed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &primary_calendar_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &primary_calendar_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reschedule_meetings_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &schedule_buffer_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &schedule_delay = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &share_event_detail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &times_available = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2MeetingsSettingsIdJsonPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2MeetingsSettingsIdJsonPutSignal(OAIMeetingSetting summary);


    void v2MeetingsSettingsIdJsonPutSignalFull(OAIHttpRequestWorker *worker, OAIMeetingSetting summary);

    Q_DECL_DEPRECATED_X("Use v2MeetingsSettingsIdJsonPutSignalError() instead")
    void v2MeetingsSettingsIdJsonPutSignalE(OAIMeetingSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2MeetingsSettingsIdJsonPutSignalError(OAIMeetingSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2MeetingsSettingsIdJsonPutSignalErrorFull() instead")
    void v2MeetingsSettingsIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2MeetingsSettingsIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
