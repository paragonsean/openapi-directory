/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingSettingsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMeetingSettingsApi::OAIMeetingSettingsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMeetingSettingsApi::~OAIMeetingSettingsApi() {
}

void OAIMeetingSettingsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.salesloft.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v2MeetingsSettingsIdJsonPut", defaultConf);
    _serverIndices.insert("v2MeetingsSettingsIdJsonPut", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMeetingSettingsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMeetingSettingsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIMeetingSettingsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIMeetingSettingsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIMeetingSettingsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMeetingSettingsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMeetingSettingsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMeetingSettingsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMeetingSettingsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMeetingSettingsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMeetingSettingsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMeetingSettingsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMeetingSettingsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIMeetingSettingsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIMeetingSettingsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIMeetingSettingsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIMeetingSettingsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIMeetingSettingsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIMeetingSettingsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIMeetingSettingsApi::v2MeetingsSettingsIdJsonPut(const QString &id, const ::OpenAPI::OptionalParam<bool> &allow_booking_on_behalf, const ::OpenAPI::OptionalParam<bool> &allow_booking_overtime, const ::OpenAPI::OptionalParam<bool> &allow_event_overlap, const ::OpenAPI::OptionalParam<qint32> &availability_limit, const ::OpenAPI::OptionalParam<bool> &availability_limit_enabled, const ::OpenAPI::OptionalParam<qint32> &buffer_time_duration, const ::OpenAPI::OptionalParam<QString> &calendar_type, const ::OpenAPI::OptionalParam<qint32> &default_meeting_length, const ::OpenAPI::OptionalParam<QString> &description, const ::OpenAPI::OptionalParam<bool> &enable_calendar_sync, const ::OpenAPI::OptionalParam<bool> &enable_dynamic_location, const ::OpenAPI::OptionalParam<QString> &location, const ::OpenAPI::OptionalParam<bool> &primary_calendar_connection_failed, const ::OpenAPI::OptionalParam<QString> &primary_calendar_id, const ::OpenAPI::OptionalParam<QString> &primary_calendar_name, const ::OpenAPI::OptionalParam<bool> &reschedule_meetings_enabled, const ::OpenAPI::OptionalParam<bool> &schedule_buffer_enabled, const ::OpenAPI::OptionalParam<qint32> &schedule_delay, const ::OpenAPI::OptionalParam<bool> &share_event_detail, const ::OpenAPI::OptionalParam<QString> &time_zone, const ::OpenAPI::OptionalParam<OAIObject> &times_available, const ::OpenAPI::OptionalParam<QString> &title) {
    QString fullPath = QString(_serverConfigs["v2MeetingsSettingsIdJsonPut"][_serverIndices.value("v2MeetingsSettingsIdJsonPut")].URL()+"/v2/meetings/settings/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (allow_booking_on_behalf.hasValue())
    {
        input.add_var("allow_booking_on_behalf", ::OpenAPI::toStringValue(allow_booking_on_behalf.value()));
    }
    if (allow_booking_overtime.hasValue())
    {
        input.add_var("allow_booking_overtime", ::OpenAPI::toStringValue(allow_booking_overtime.value()));
    }
    if (allow_event_overlap.hasValue())
    {
        input.add_var("allow_event_overlap", ::OpenAPI::toStringValue(allow_event_overlap.value()));
    }
    if (availability_limit.hasValue())
    {
        input.add_var("availability_limit", ::OpenAPI::toStringValue(availability_limit.value()));
    }
    if (availability_limit_enabled.hasValue())
    {
        input.add_var("availability_limit_enabled", ::OpenAPI::toStringValue(availability_limit_enabled.value()));
    }
    if (buffer_time_duration.hasValue())
    {
        input.add_var("buffer_time_duration", ::OpenAPI::toStringValue(buffer_time_duration.value()));
    }
    if (calendar_type.hasValue())
    {
        input.add_var("calendar_type", ::OpenAPI::toStringValue(calendar_type.value()));
    }
    if (default_meeting_length.hasValue())
    {
        input.add_var("default_meeting_length", ::OpenAPI::toStringValue(default_meeting_length.value()));
    }
    if (description.hasValue())
    {
        input.add_var("description", ::OpenAPI::toStringValue(description.value()));
    }
    if (enable_calendar_sync.hasValue())
    {
        input.add_var("enable_calendar_sync", ::OpenAPI::toStringValue(enable_calendar_sync.value()));
    }
    if (enable_dynamic_location.hasValue())
    {
        input.add_var("enable_dynamic_location", ::OpenAPI::toStringValue(enable_dynamic_location.value()));
    }
    if (location.hasValue())
    {
        input.add_var("location", ::OpenAPI::toStringValue(location.value()));
    }
    if (primary_calendar_connection_failed.hasValue())
    {
        input.add_var("primary_calendar_connection_failed", ::OpenAPI::toStringValue(primary_calendar_connection_failed.value()));
    }
    if (primary_calendar_id.hasValue())
    {
        input.add_var("primary_calendar_id", ::OpenAPI::toStringValue(primary_calendar_id.value()));
    }
    if (primary_calendar_name.hasValue())
    {
        input.add_var("primary_calendar_name", ::OpenAPI::toStringValue(primary_calendar_name.value()));
    }
    if (reschedule_meetings_enabled.hasValue())
    {
        input.add_var("reschedule_meetings_enabled", ::OpenAPI::toStringValue(reschedule_meetings_enabled.value()));
    }
    if (schedule_buffer_enabled.hasValue())
    {
        input.add_var("schedule_buffer_enabled", ::OpenAPI::toStringValue(schedule_buffer_enabled.value()));
    }
    if (schedule_delay.hasValue())
    {
        input.add_var("schedule_delay", ::OpenAPI::toStringValue(schedule_delay.value()));
    }
    if (share_event_detail.hasValue())
    {
        input.add_var("share_event_detail", ::OpenAPI::toStringValue(share_event_detail.value()));
    }
    if (time_zone.hasValue())
    {
        input.add_var("time_zone", ::OpenAPI::toStringValue(time_zone.value()));
    }
    if (times_available.hasValue())
    {
        input.add_var("times_available", ::OpenAPI::toStringValue(times_available.value()));
    }
    if (title.hasValue())
    {
        input.add_var("title", ::OpenAPI::toStringValue(title.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMeetingSettingsApi::v2MeetingsSettingsIdJsonPutCallback);
    connect(this, &OAIMeetingSettingsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMeetingSettingsApi::v2MeetingsSettingsIdJsonPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMeetingSetting output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2MeetingsSettingsIdJsonPutSignal(output);
        Q_EMIT v2MeetingsSettingsIdJsonPutSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2MeetingsSettingsIdJsonPutSignalE(output, error_type, error_str);
        Q_EMIT v2MeetingsSettingsIdJsonPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2MeetingsSettingsIdJsonPutSignalError(output, error_type, error_str);
        Q_EMIT v2MeetingsSettingsIdJsonPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIMeetingSettingsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
