/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStep::OAIStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStep::OAIStep() {
    this->initializeModel();
}

OAIStep::~OAIStep() {}

void OAIStep::initializeModel() {

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multitouch_enabled_isSet = false;
    m_multitouch_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_step_number_isSet = false;
    m_step_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStep::fromJsonObject(QJsonObject json) {

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multitouch_enabled_isValid = ::OpenAPI::fromJsonValue(m_multitouch_enabled, json[QString("multitouch_enabled")]);
    m_multitouch_enabled_isSet = !json[QString("multitouch_enabled")].isNull() && m_multitouch_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_step_number_isValid = ::OpenAPI::fromJsonValue(m_step_number, json[QString("step_number")]);
    m_step_number_isSet = !json[QString("step_number")].isNull() && m_step_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStep::asJsonObject() const {
    QJsonObject obj;
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multitouch_enabled_isSet) {
        obj.insert(QString("multitouch_enabled"), ::OpenAPI::toJsonValue(m_multitouch_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_step_number_isSet) {
        obj.insert(QString("step_number"), ::OpenAPI::toJsonValue(m_step_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIEmbeddedResource OAIStep::getCadence() const {
    return m_cadence;
}
void OAIStep::setCadence(const OAIEmbeddedResource &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAIStep::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAIStep::is_cadence_Valid() const{
    return m_cadence_isValid;
}

QDateTime OAIStep::getCreatedAt() const {
    return m_created_at;
}
void OAIStep::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIStep::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIStep::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIStep::getDay() const {
    return m_day;
}
void OAIStep::setDay(const qint32 &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIStep::is_day_Set() const{
    return m_day_isSet;
}

bool OAIStep::is_day_Valid() const{
    return m_day_isValid;
}

OAIEmbeddedResource OAIStep::getDetails() const {
    return m_details;
}
void OAIStep::setDetails(const OAIEmbeddedResource &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIStep::is_details_Set() const{
    return m_details_isSet;
}

bool OAIStep::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIStep::isDisabled() const {
    return m_disabled;
}
void OAIStep::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIStep::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIStep::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIStep::getDisplayName() const {
    return m_display_name;
}
void OAIStep::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIStep::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIStep::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIStep::getId() const {
    return m_id;
}
void OAIStep::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStep::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStep::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIStep::isMultitouchEnabled() const {
    return m_multitouch_enabled;
}
void OAIStep::setMultitouchEnabled(const bool &multitouch_enabled) {
    m_multitouch_enabled = multitouch_enabled;
    m_multitouch_enabled_isSet = true;
}

bool OAIStep::is_multitouch_enabled_Set() const{
    return m_multitouch_enabled_isSet;
}

bool OAIStep::is_multitouch_enabled_Valid() const{
    return m_multitouch_enabled_isValid;
}

QString OAIStep::getName() const {
    return m_name;
}
void OAIStep::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStep::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStep::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStep::getStepNumber() const {
    return m_step_number;
}
void OAIStep::setStepNumber(const qint32 &step_number) {
    m_step_number = step_number;
    m_step_number_isSet = true;
}

bool OAIStep::is_step_number_Set() const{
    return m_step_number_isSet;
}

bool OAIStep::is_step_number_Valid() const{
    return m_step_number_isValid;
}

QString OAIStep::getType() const {
    return m_type;
}
void OAIStep::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStep::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStep::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIStep::getUpdatedAt() const {
    return m_updated_at;
}
void OAIStep::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIStep::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIStep::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multitouch_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
