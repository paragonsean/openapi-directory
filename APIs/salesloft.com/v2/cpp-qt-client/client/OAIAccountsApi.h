/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2AccountsIdJsonDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2AccountsIdJsonGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  name QString [required]
    * @param[in]  account_tier_id qint32 [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  city QString [optional]
    * @param[in]  company_stage_id qint32 [optional]
    * @param[in]  company_type QString [optional]
    * @param[in]  conversational_name QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  crm_id QString [optional]
    * @param[in]  crm_id_type QString [optional]
    * @param[in]  custom_fields QList<OAIObject> [optional]
    * @param[in]  description QString [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  founded QString [optional]
    * @param[in]  industry QString [optional]
    * @param[in]  linkedin_url QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  owner_id qint32 [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  revenue_range QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  street QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  twitter_handle QString [optional]
    * @param[in]  website QString [optional]
    */
    virtual void v2AccountsIdJsonPut(const QString &id, const QString &domain, const QString &name, const ::OpenAPI::OptionalParam<qint32> &account_tier_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &company_stage_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &company_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversational_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &custom_fields = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &founded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &linkedin_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &owner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revenue_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &twitter_handle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &website = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<qint32> [optional]
    * @param[in]  crm_id QList<QString> [optional]
    * @param[in]  tag QList<QString> [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  created_at QList<QString> [optional]
    * @param[in]  updated_at QList<QString> [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  website QList<QString> [optional]
    * @param[in]  archived bool [optional]
    * @param[in]  name QList<QString> [optional]
    * @param[in]  account_stage_id QList<qint32> [optional]
    * @param[in]  account_tier_id QList<qint32> [optional]
    * @param[in]  owner_id QList<QString> [optional]
    * @param[in]  owner_is_active bool [optional]
    * @param[in]  last_contacted OAIObject [optional]
    * @param[in]  custom_fields OAIObject [optional]
    * @param[in]  industry QList<QString> [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  owner_crm_id QList<QString> [optional]
    * @param[in]  locales QList<QString> [optional]
    * @param[in]  user_relationships OAIObject [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_paging_counts bool [optional]
    * @param[in]  limit_paging_counts bool [optional]
    */
    virtual void v2AccountsJsonGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &crm_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &tag = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &created_at = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &updated_at = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &website = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &account_stage_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &account_tier_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &owner_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &owner_is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIObject> &last_contacted = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &custom_fields = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QList<QString>> &industry = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &owner_crm_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &locales = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIObject> &user_relationships = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_paging_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &limit_paging_counts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  domain QString [required]
    * @param[in]  name QString [required]
    * @param[in]  account_tier_id qint32 [optional]
    * @param[in]  city QString [optional]
    * @param[in]  company_stage_id qint32 [optional]
    * @param[in]  company_type QString [optional]
    * @param[in]  conversational_name QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  crm_id QString [optional]
    * @param[in]  crm_id_type QString [optional]
    * @param[in]  custom_fields QList<OAIObject> [optional]
    * @param[in]  description QString [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  founded QString [optional]
    * @param[in]  industry QString [optional]
    * @param[in]  linkedin_url QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  owner_id qint32 [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  revenue_range QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  street QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  twitter_handle QString [optional]
    * @param[in]  website QString [optional]
    */
    virtual void v2AccountsJsonPost(const QString &domain, const QString &name, const ::OpenAPI::OptionalParam<qint32> &account_tier_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &company_stage_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &company_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversational_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &custom_fields = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &founded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &linkedin_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &owner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revenue_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &twitter_handle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &website = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2AccountsIdJsonDeleteCallback(OAIHttpRequestWorker *worker);
    void v2AccountsIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2AccountsIdJsonPutCallback(OAIHttpRequestWorker *worker);
    void v2AccountsJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2AccountsJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2AccountsIdJsonDeleteSignal();
    void v2AccountsIdJsonGetSignal(OAIAccount summary);
    void v2AccountsIdJsonPutSignal(OAIAccount summary);
    void v2AccountsJsonGetSignal(QList<OAIAccount> summary);
    void v2AccountsJsonPostSignal(OAIAccount summary);


    void v2AccountsIdJsonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v2AccountsIdJsonGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void v2AccountsIdJsonPutSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void v2AccountsJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void v2AccountsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);

    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonDeleteSignalError() instead")
    void v2AccountsIdJsonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonGetSignalError() instead")
    void v2AccountsIdJsonGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonPutSignalError() instead")
    void v2AccountsIdJsonPutSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonPutSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsJsonGetSignalError() instead")
    void v2AccountsJsonGetSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsJsonGetSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsJsonPostSignalError() instead")
    void v2AccountsJsonPostSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsJsonPostSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonDeleteSignalErrorFull() instead")
    void v2AccountsIdJsonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonGetSignalErrorFull() instead")
    void v2AccountsIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsIdJsonPutSignalErrorFull() instead")
    void v2AccountsIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsJsonGetSignalErrorFull() instead")
    void v2AccountsJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2AccountsJsonPostSignalErrorFull() instead")
    void v2AccountsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
