/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobData::OAIJobData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobData::OAIJobData() {
    this->initializeModel();
}

OAIJobData::~OAIJobData() {}

void OAIJobData::initializeModel() {

    m_bulk_job_isSet = false;
    m_bulk_job_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_record_isSet = false;
    m_record_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJobData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobData::fromJsonObject(QJsonObject json) {

    m_bulk_job_isValid = ::OpenAPI::fromJsonValue(m_bulk_job, json[QString("bulk_job")]);
    m_bulk_job_isSet = !json[QString("bulk_job")].isNull() && m_bulk_job_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("record")]);
    m_record_isSet = !json[QString("record")].isNull() && m_record_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJobData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobData::asJsonObject() const {
    QJsonObject obj;
    if (m_bulk_job_isSet) {
        obj.insert(QString("bulk_job"), ::OpenAPI::toJsonValue(m_bulk_job));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_record_isSet) {
        obj.insert(QString("record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIObject OAIJobData::getBulkJob() const {
    return m_bulk_job;
}
void OAIJobData::setBulkJob(const OAIObject &bulk_job) {
    m_bulk_job = bulk_job;
    m_bulk_job_isSet = true;
}

bool OAIJobData::is_bulk_job_Set() const{
    return m_bulk_job_isSet;
}

bool OAIJobData::is_bulk_job_Valid() const{
    return m_bulk_job_isValid;
}

QDateTime OAIJobData::getCreatedAt() const {
    return m_created_at;
}
void OAIJobData::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIJobData::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIJobData::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIJobData::getError() const {
    return m_error;
}
void OAIJobData::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIJobData::is_error_Set() const{
    return m_error_isSet;
}

bool OAIJobData::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAIJobData::getFinishedAt() const {
    return m_finished_at;
}
void OAIJobData::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIJobData::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIJobData::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

qint32 OAIJobData::getId() const {
    return m_id;
}
void OAIJobData::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobData::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIJobData::getRecord() const {
    return m_record;
}
void OAIJobData::setRecord(const OAIObject &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAIJobData::is_record_Set() const{
    return m_record_isSet;
}

bool OAIJobData::is_record_Valid() const{
    return m_record_isValid;
}

OAIObject OAIJobData::getResource() const {
    return m_resource;
}
void OAIJobData::setResource(const OAIObject &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIJobData::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIJobData::is_resource_Valid() const{
    return m_resource_isValid;
}

QDateTime OAIJobData::getStartedAt() const {
    return m_started_at;
}
void OAIJobData::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIJobData::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIJobData::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIJobData::getStatus() const {
    return m_status;
}
void OAIJobData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobData::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJobData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bulk_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
