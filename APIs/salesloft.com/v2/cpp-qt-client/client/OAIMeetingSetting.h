/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMeetingSetting.h
 *
 * 
 */

#ifndef OAIMeetingSetting_H
#define OAIMeetingSetting_H

#include <QJsonObject>

#include "OAIEmbeddedResource.h"
#include "OAIMeetingUrl.h"
#include "OAIObject.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMeetingUrl;
class OAIEmbeddedResource;

class OAIMeetingSetting : public OAIObject {
public:
    OAIMeetingSetting();
    OAIMeetingSetting(QString json);
    ~OAIMeetingSetting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMeetingUrl getActiveMeetingUrl() const;
    void setActiveMeetingUrl(const OAIMeetingUrl &active_meeting_url);
    bool is_active_meeting_url_Set() const;
    bool is_active_meeting_url_Valid() const;

    bool isAllowBookingOnBehalf() const;
    void setAllowBookingOnBehalf(const bool &allow_booking_on_behalf);
    bool is_allow_booking_on_behalf_Set() const;
    bool is_allow_booking_on_behalf_Valid() const;

    bool isAllowBookingOvertime() const;
    void setAllowBookingOvertime(const bool &allow_booking_overtime);
    bool is_allow_booking_overtime_Set() const;
    bool is_allow_booking_overtime_Valid() const;

    bool isAllowEventOverlap() const;
    void setAllowEventOverlap(const bool &allow_event_overlap);
    bool is_allow_event_overlap_Set() const;
    bool is_allow_event_overlap_Valid() const;

    qint32 getAvailabilityLimit() const;
    void setAvailabilityLimit(const qint32 &availability_limit);
    bool is_availability_limit_Set() const;
    bool is_availability_limit_Valid() const;

    bool isAvailabilityLimitEnabled() const;
    void setAvailabilityLimitEnabled(const bool &availability_limit_enabled);
    bool is_availability_limit_enabled_Set() const;
    bool is_availability_limit_enabled_Valid() const;

    qint32 getBufferTimeDuration() const;
    void setBufferTimeDuration(const qint32 &buffer_time_duration);
    bool is_buffer_time_duration_Set() const;
    bool is_buffer_time_duration_Valid() const;

    QString getCalendarType() const;
    void setCalendarType(const QString &calendar_type);
    bool is_calendar_type_Set() const;
    bool is_calendar_type_Valid() const;

    QDate getCreatedAt() const;
    void setCreatedAt(const QDate &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    qint32 getDefaultMeetingLength() const;
    void setDefaultMeetingLength(const qint32 &default_meeting_length);
    bool is_default_meeting_length_Set() const;
    bool is_default_meeting_length_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEmailAddress() const;
    void setEmailAddress(const QString &email_address);
    bool is_email_address_Set() const;
    bool is_email_address_Valid() const;

    bool isEnableCalendarSync() const;
    void setEnableCalendarSync(const bool &enable_calendar_sync);
    bool is_enable_calendar_sync_Set() const;
    bool is_enable_calendar_sync_Valid() const;

    bool isEnableDynamicLocation() const;
    void setEnableDynamicLocation(const bool &enable_dynamic_location);
    bool is_enable_dynamic_location_Set() const;
    bool is_enable_dynamic_location_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    bool isPrimaryCalendarConnectionFailed() const;
    void setPrimaryCalendarConnectionFailed(const bool &primary_calendar_connection_failed);
    bool is_primary_calendar_connection_failed_Set() const;
    bool is_primary_calendar_connection_failed_Valid() const;

    QString getPrimaryCalendarId() const;
    void setPrimaryCalendarId(const QString &primary_calendar_id);
    bool is_primary_calendar_id_Set() const;
    bool is_primary_calendar_id_Valid() const;

    QString getPrimaryCalendarName() const;
    void setPrimaryCalendarName(const QString &primary_calendar_name);
    bool is_primary_calendar_name_Set() const;
    bool is_primary_calendar_name_Valid() const;

    bool isRescheduleMeetingsEnabled() const;
    void setRescheduleMeetingsEnabled(const bool &reschedule_meetings_enabled);
    bool is_reschedule_meetings_enabled_Set() const;
    bool is_reschedule_meetings_enabled_Valid() const;

    bool isScheduleBufferEnabled() const;
    void setScheduleBufferEnabled(const bool &schedule_buffer_enabled);
    bool is_schedule_buffer_enabled_Set() const;
    bool is_schedule_buffer_enabled_Valid() const;

    qint32 getScheduleDelay() const;
    void setScheduleDelay(const qint32 &schedule_delay);
    bool is_schedule_delay_Set() const;
    bool is_schedule_delay_Valid() const;

    bool isShareEventDetail() const;
    void setShareEventDetail(const bool &share_event_detail);
    bool is_share_event_detail_Set() const;
    bool is_share_event_detail_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    OAIObject getTimesAvailable() const;
    void setTimesAvailable(const OAIObject &times_available);
    bool is_times_available_Set() const;
    bool is_times_available_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QDate getUpdatedAt() const;
    void setUpdatedAt(const QDate &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    OAIEmbeddedResource getUser() const;
    void setUser(const OAIEmbeddedResource &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAIObject getUserDetails() const;
    void setUserDetails(const OAIObject &user_details);
    bool is_user_details_Set() const;
    bool is_user_details_Valid() const;

    QString getUserSlug() const;
    void setUserSlug(const QString &user_slug);
    bool is_user_slug_Set() const;
    bool is_user_slug_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMeetingUrl m_active_meeting_url;
    bool m_active_meeting_url_isSet;
    bool m_active_meeting_url_isValid;

    bool m_allow_booking_on_behalf;
    bool m_allow_booking_on_behalf_isSet;
    bool m_allow_booking_on_behalf_isValid;

    bool m_allow_booking_overtime;
    bool m_allow_booking_overtime_isSet;
    bool m_allow_booking_overtime_isValid;

    bool m_allow_event_overlap;
    bool m_allow_event_overlap_isSet;
    bool m_allow_event_overlap_isValid;

    qint32 m_availability_limit;
    bool m_availability_limit_isSet;
    bool m_availability_limit_isValid;

    bool m_availability_limit_enabled;
    bool m_availability_limit_enabled_isSet;
    bool m_availability_limit_enabled_isValid;

    qint32 m_buffer_time_duration;
    bool m_buffer_time_duration_isSet;
    bool m_buffer_time_duration_isValid;

    QString m_calendar_type;
    bool m_calendar_type_isSet;
    bool m_calendar_type_isValid;

    QDate m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    qint32 m_default_meeting_length;
    bool m_default_meeting_length_isSet;
    bool m_default_meeting_length_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_email_address;
    bool m_email_address_isSet;
    bool m_email_address_isValid;

    bool m_enable_calendar_sync;
    bool m_enable_calendar_sync_isSet;
    bool m_enable_calendar_sync_isValid;

    bool m_enable_dynamic_location;
    bool m_enable_dynamic_location_isSet;
    bool m_enable_dynamic_location_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    bool m_primary_calendar_connection_failed;
    bool m_primary_calendar_connection_failed_isSet;
    bool m_primary_calendar_connection_failed_isValid;

    QString m_primary_calendar_id;
    bool m_primary_calendar_id_isSet;
    bool m_primary_calendar_id_isValid;

    QString m_primary_calendar_name;
    bool m_primary_calendar_name_isSet;
    bool m_primary_calendar_name_isValid;

    bool m_reschedule_meetings_enabled;
    bool m_reschedule_meetings_enabled_isSet;
    bool m_reschedule_meetings_enabled_isValid;

    bool m_schedule_buffer_enabled;
    bool m_schedule_buffer_enabled_isSet;
    bool m_schedule_buffer_enabled_isValid;

    qint32 m_schedule_delay;
    bool m_schedule_delay_isSet;
    bool m_schedule_delay_isValid;

    bool m_share_event_detail;
    bool m_share_event_detail_isSet;
    bool m_share_event_detail_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    OAIObject m_times_available;
    bool m_times_available_isSet;
    bool m_times_available_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QDate m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    OAIEmbeddedResource m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAIObject m_user_details;
    bool m_user_details_isSet;
    bool m_user_details_isValid;

    QString m_user_slug;
    bool m_user_slug_isSet;
    bool m_user_slug_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMeetingSetting)

#endif // OAIMeetingSetting_H
