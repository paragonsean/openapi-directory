/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamTemplate::OAITeamTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamTemplate::OAITeamTemplate() {
    this->initializeModel();
}

OAITeamTemplate::~OAITeamTemplate() {}

void OAITeamTemplate::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_preview_isSet = false;
    m_body_preview_isValid = false;

    m_click_tracking_enabled_isSet = false;
    m_click_tracking_enabled_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_at_isSet = false;
    m_last_modified_at_isValid = false;

    m_last_modified_user_isSet = false;
    m_last_modified_user_isValid = false;

    m_last_used_at_isSet = false;
    m_last_used_at_isValid = false;

    m_open_tracking_enabled_isSet = false;
    m_open_tracking_enabled_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAITeamTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamTemplate::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_preview_isValid = ::OpenAPI::fromJsonValue(m_body_preview, json[QString("body_preview")]);
    m_body_preview_isSet = !json[QString("body_preview")].isNull() && m_body_preview_isValid;

    m_click_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_click_tracking_enabled, json[QString("click_tracking_enabled")]);
    m_click_tracking_enabled_isSet = !json[QString("click_tracking_enabled")].isNull() && m_click_tracking_enabled_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_last_modified_at, json[QString("last_modified_at")]);
    m_last_modified_at_isSet = !json[QString("last_modified_at")].isNull() && m_last_modified_at_isValid;

    m_last_modified_user_isValid = ::OpenAPI::fromJsonValue(m_last_modified_user, json[QString("last_modified_user")]);
    m_last_modified_user_isSet = !json[QString("last_modified_user")].isNull() && m_last_modified_user_isValid;

    m_last_used_at_isValid = ::OpenAPI::fromJsonValue(m_last_used_at, json[QString("last_used_at")]);
    m_last_used_at_isSet = !json[QString("last_used_at")].isNull() && m_last_used_at_isValid;

    m_open_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_open_tracking_enabled, json[QString("open_tracking_enabled")]);
    m_open_tracking_enabled_isSet = !json[QString("open_tracking_enabled")].isNull() && m_open_tracking_enabled_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAITeamTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m__links_isSet) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_preview_isSet) {
        obj.insert(QString("body_preview"), ::OpenAPI::toJsonValue(m_body_preview));
    }
    if (m_click_tracking_enabled_isSet) {
        obj.insert(QString("click_tracking_enabled"), ::OpenAPI::toJsonValue(m_click_tracking_enabled));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_at_isSet) {
        obj.insert(QString("last_modified_at"), ::OpenAPI::toJsonValue(m_last_modified_at));
    }
    if (m_last_modified_user.isSet()) {
        obj.insert(QString("last_modified_user"), ::OpenAPI::toJsonValue(m_last_modified_user));
    }
    if (m_last_used_at_isSet) {
        obj.insert(QString("last_used_at"), ::OpenAPI::toJsonValue(m_last_used_at));
    }
    if (m_open_tracking_enabled_isSet) {
        obj.insert(QString("open_tracking_enabled"), ::OpenAPI::toJsonValue(m_open_tracking_enabled));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIObject OAITeamTemplate::getLinks() const {
    return m__links;
}
void OAITeamTemplate::setLinks(const OAIObject &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAITeamTemplate::is__links_Set() const{
    return m__links_isSet;
}

bool OAITeamTemplate::is__links_Valid() const{
    return m__links_isValid;
}

QDateTime OAITeamTemplate::getArchivedAt() const {
    return m_archived_at;
}
void OAITeamTemplate::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAITeamTemplate::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAITeamTemplate::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QString OAITeamTemplate::getBody() const {
    return m_body;
}
void OAITeamTemplate::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITeamTemplate::is_body_Set() const{
    return m_body_isSet;
}

bool OAITeamTemplate::is_body_Valid() const{
    return m_body_isValid;
}

QString OAITeamTemplate::getBodyPreview() const {
    return m_body_preview;
}
void OAITeamTemplate::setBodyPreview(const QString &body_preview) {
    m_body_preview = body_preview;
    m_body_preview_isSet = true;
}

bool OAITeamTemplate::is_body_preview_Set() const{
    return m_body_preview_isSet;
}

bool OAITeamTemplate::is_body_preview_Valid() const{
    return m_body_preview_isValid;
}

bool OAITeamTemplate::isClickTrackingEnabled() const {
    return m_click_tracking_enabled;
}
void OAITeamTemplate::setClickTrackingEnabled(const bool &click_tracking_enabled) {
    m_click_tracking_enabled = click_tracking_enabled;
    m_click_tracking_enabled_isSet = true;
}

bool OAITeamTemplate::is_click_tracking_enabled_Set() const{
    return m_click_tracking_enabled_isSet;
}

bool OAITeamTemplate::is_click_tracking_enabled_Valid() const{
    return m_click_tracking_enabled_isValid;
}

OAITeamTemplateCounts OAITeamTemplate::getCounts() const {
    return m_counts;
}
void OAITeamTemplate::setCounts(const OAITeamTemplateCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAITeamTemplate::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAITeamTemplate::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAITeamTemplate::getCreatedAt() const {
    return m_created_at;
}
void OAITeamTemplate::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITeamTemplate::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITeamTemplate::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITeamTemplate::getId() const {
    return m_id;
}
void OAITeamTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeamTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeamTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAITeamTemplate::getLastModifiedAt() const {
    return m_last_modified_at;
}
void OAITeamTemplate::setLastModifiedAt(const QDateTime &last_modified_at) {
    m_last_modified_at = last_modified_at;
    m_last_modified_at_isSet = true;
}

bool OAITeamTemplate::is_last_modified_at_Set() const{
    return m_last_modified_at_isSet;
}

bool OAITeamTemplate::is_last_modified_at_Valid() const{
    return m_last_modified_at_isValid;
}

OAIEmbeddedResource OAITeamTemplate::getLastModifiedUser() const {
    return m_last_modified_user;
}
void OAITeamTemplate::setLastModifiedUser(const OAIEmbeddedResource &last_modified_user) {
    m_last_modified_user = last_modified_user;
    m_last_modified_user_isSet = true;
}

bool OAITeamTemplate::is_last_modified_user_Set() const{
    return m_last_modified_user_isSet;
}

bool OAITeamTemplate::is_last_modified_user_Valid() const{
    return m_last_modified_user_isValid;
}

QDateTime OAITeamTemplate::getLastUsedAt() const {
    return m_last_used_at;
}
void OAITeamTemplate::setLastUsedAt(const QDateTime &last_used_at) {
    m_last_used_at = last_used_at;
    m_last_used_at_isSet = true;
}

bool OAITeamTemplate::is_last_used_at_Set() const{
    return m_last_used_at_isSet;
}

bool OAITeamTemplate::is_last_used_at_Valid() const{
    return m_last_used_at_isValid;
}

bool OAITeamTemplate::isOpenTrackingEnabled() const {
    return m_open_tracking_enabled;
}
void OAITeamTemplate::setOpenTrackingEnabled(const bool &open_tracking_enabled) {
    m_open_tracking_enabled = open_tracking_enabled;
    m_open_tracking_enabled_isSet = true;
}

bool OAITeamTemplate::is_open_tracking_enabled_Set() const{
    return m_open_tracking_enabled_isSet;
}

bool OAITeamTemplate::is_open_tracking_enabled_Valid() const{
    return m_open_tracking_enabled_isValid;
}

QString OAITeamTemplate::getSubject() const {
    return m_subject;
}
void OAITeamTemplate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITeamTemplate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITeamTemplate::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAITeamTemplate::getTags() const {
    return m_tags;
}
void OAITeamTemplate::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITeamTemplate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITeamTemplate::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAITeamTemplate::getTitle() const {
    return m_title;
}
void OAITeamTemplate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITeamTemplate::is_title_Set() const{
    return m_title_isSet;
}

bool OAITeamTemplate::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAITeamTemplate::getUpdatedAt() const {
    return m_updated_at;
}
void OAITeamTemplate::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITeamTemplate::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITeamTemplate::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAITeamTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
