/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICall::OAICall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICall::OAICall() {
    this->initializeModel();
}

OAICall::~OAICall() {}

void OAICall::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_called_person_isSet = false;
    m_called_person_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crm_activity_isSet = false;
    m_crm_activity_isValid = false;

    m_disposition_isSet = false;
    m_disposition_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_recordings_isSet = false;
    m_recordings_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICall::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_called_person_isValid = ::OpenAPI::fromJsonValue(m_called_person, json[QString("called_person")]);
    m_called_person_isSet = !json[QString("called_person")].isNull() && m_called_person_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crm_activity_isValid = ::OpenAPI::fromJsonValue(m_crm_activity, json[QString("crm_activity")]);
    m_crm_activity_isSet = !json[QString("crm_activity")].isNull() && m_crm_activity_isValid;

    m_disposition_isValid = ::OpenAPI::fromJsonValue(m_disposition, json[QString("disposition")]);
    m_disposition_isSet = !json[QString("disposition")].isNull() && m_disposition_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_recordings_isValid = ::OpenAPI::fromJsonValue(m_recordings, json[QString("recordings")]);
    m_recordings_isSet = !json[QString("recordings")].isNull() && m_recordings_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICall::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_called_person.isSet()) {
        obj.insert(QString("called_person"), ::OpenAPI::toJsonValue(m_called_person));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crm_activity.isSet()) {
        obj.insert(QString("crm_activity"), ::OpenAPI::toJsonValue(m_crm_activity));
    }
    if (m_disposition_isSet) {
        obj.insert(QString("disposition"), ::OpenAPI::toJsonValue(m_disposition));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_note.isSet()) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_recordings.size() > 0) {
        obj.insert(QString("recordings"), ::OpenAPI::toJsonValue(m_recordings));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_step.isSet()) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIEmbeddedResource OAICall::getAction() const {
    return m_action;
}
void OAICall::setAction(const OAIEmbeddedResource &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAICall::is_action_Set() const{
    return m_action_isSet;
}

bool OAICall::is_action_Valid() const{
    return m_action_isValid;
}

OAIEmbeddedResource OAICall::getCadence() const {
    return m_cadence;
}
void OAICall::setCadence(const OAIEmbeddedResource &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAICall::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAICall::is_cadence_Valid() const{
    return m_cadence_isValid;
}

OAIEmbeddedResource OAICall::getCalledPerson() const {
    return m_called_person;
}
void OAICall::setCalledPerson(const OAIEmbeddedResource &called_person) {
    m_called_person = called_person;
    m_called_person_isSet = true;
}

bool OAICall::is_called_person_Set() const{
    return m_called_person_isSet;
}

bool OAICall::is_called_person_Valid() const{
    return m_called_person_isValid;
}

QDateTime OAICall::getCreatedAt() const {
    return m_created_at;
}
void OAICall::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICall::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICall::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEmbeddedResource OAICall::getCrmActivity() const {
    return m_crm_activity;
}
void OAICall::setCrmActivity(const OAIEmbeddedResource &crm_activity) {
    m_crm_activity = crm_activity;
    m_crm_activity_isSet = true;
}

bool OAICall::is_crm_activity_Set() const{
    return m_crm_activity_isSet;
}

bool OAICall::is_crm_activity_Valid() const{
    return m_crm_activity_isValid;
}

QString OAICall::getDisposition() const {
    return m_disposition;
}
void OAICall::setDisposition(const QString &disposition) {
    m_disposition = disposition;
    m_disposition_isSet = true;
}

bool OAICall::is_disposition_Set() const{
    return m_disposition_isSet;
}

bool OAICall::is_disposition_Valid() const{
    return m_disposition_isValid;
}

qint32 OAICall::getDuration() const {
    return m_duration;
}
void OAICall::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICall::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICall::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAICall::getId() const {
    return m_id;
}
void OAICall::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICall::is_id_Set() const{
    return m_id_isSet;
}

bool OAICall::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAICall::getNote() const {
    return m_note;
}
void OAICall::setNote(const OAIEmbeddedResource &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICall::is_note_Set() const{
    return m_note_isSet;
}

bool OAICall::is_note_Valid() const{
    return m_note_isValid;
}

QList<OAIEmbeddedRecordingResource> OAICall::getRecordings() const {
    return m_recordings;
}
void OAICall::setRecordings(const QList<OAIEmbeddedRecordingResource> &recordings) {
    m_recordings = recordings;
    m_recordings_isSet = true;
}

bool OAICall::is_recordings_Set() const{
    return m_recordings_isSet;
}

bool OAICall::is_recordings_Valid() const{
    return m_recordings_isValid;
}

QString OAICall::getSentiment() const {
    return m_sentiment;
}
void OAICall::setSentiment(const QString &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAICall::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAICall::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

OAIEmbeddedResource OAICall::getStep() const {
    return m_step;
}
void OAICall::setStep(const OAIEmbeddedResource &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAICall::is_step_Set() const{
    return m_step_isSet;
}

bool OAICall::is_step_Valid() const{
    return m_step_isValid;
}

QString OAICall::getTo() const {
    return m_to;
}
void OAICall::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICall::is_to_Set() const{
    return m_to_isSet;
}

bool OAICall::is_to_Valid() const{
    return m_to_isValid;
}

QDateTime OAICall::getUpdatedAt() const {
    return m_updated_at;
}
void OAICall::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICall::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICall::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAICall::getUser() const {
    return m_user;
}
void OAICall::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICall::is_user_Set() const{
    return m_user_isSet;
}

bool OAICall::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_called_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disposition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recordings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICall::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
