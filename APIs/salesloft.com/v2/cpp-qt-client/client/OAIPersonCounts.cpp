/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonCounts::OAIPersonCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonCounts::OAIPersonCounts() {
    this->initializeModel();
}

OAIPersonCounts::~OAIPersonCounts() {}

void OAIPersonCounts::initializeModel() {

    m_calls_isSet = false;
    m_calls_isValid = false;

    m_emails_bounced_isSet = false;
    m_emails_bounced_isValid = false;

    m_emails_clicked_isSet = false;
    m_emails_clicked_isValid = false;

    m_emails_replied_to_isSet = false;
    m_emails_replied_to_isValid = false;

    m_emails_sent_isSet = false;
    m_emails_sent_isValid = false;

    m_emails_viewed_isSet = false;
    m_emails_viewed_isValid = false;
}

void OAIPersonCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonCounts::fromJsonObject(QJsonObject json) {

    m_calls_isValid = ::OpenAPI::fromJsonValue(m_calls, json[QString("calls")]);
    m_calls_isSet = !json[QString("calls")].isNull() && m_calls_isValid;

    m_emails_bounced_isValid = ::OpenAPI::fromJsonValue(m_emails_bounced, json[QString("emails_bounced")]);
    m_emails_bounced_isSet = !json[QString("emails_bounced")].isNull() && m_emails_bounced_isValid;

    m_emails_clicked_isValid = ::OpenAPI::fromJsonValue(m_emails_clicked, json[QString("emails_clicked")]);
    m_emails_clicked_isSet = !json[QString("emails_clicked")].isNull() && m_emails_clicked_isValid;

    m_emails_replied_to_isValid = ::OpenAPI::fromJsonValue(m_emails_replied_to, json[QString("emails_replied_to")]);
    m_emails_replied_to_isSet = !json[QString("emails_replied_to")].isNull() && m_emails_replied_to_isValid;

    m_emails_sent_isValid = ::OpenAPI::fromJsonValue(m_emails_sent, json[QString("emails_sent")]);
    m_emails_sent_isSet = !json[QString("emails_sent")].isNull() && m_emails_sent_isValid;

    m_emails_viewed_isValid = ::OpenAPI::fromJsonValue(m_emails_viewed, json[QString("emails_viewed")]);
    m_emails_viewed_isSet = !json[QString("emails_viewed")].isNull() && m_emails_viewed_isValid;
}

QString OAIPersonCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_calls_isSet) {
        obj.insert(QString("calls"), ::OpenAPI::toJsonValue(m_calls));
    }
    if (m_emails_bounced_isSet) {
        obj.insert(QString("emails_bounced"), ::OpenAPI::toJsonValue(m_emails_bounced));
    }
    if (m_emails_clicked_isSet) {
        obj.insert(QString("emails_clicked"), ::OpenAPI::toJsonValue(m_emails_clicked));
    }
    if (m_emails_replied_to_isSet) {
        obj.insert(QString("emails_replied_to"), ::OpenAPI::toJsonValue(m_emails_replied_to));
    }
    if (m_emails_sent_isSet) {
        obj.insert(QString("emails_sent"), ::OpenAPI::toJsonValue(m_emails_sent));
    }
    if (m_emails_viewed_isSet) {
        obj.insert(QString("emails_viewed"), ::OpenAPI::toJsonValue(m_emails_viewed));
    }
    return obj;
}

qint32 OAIPersonCounts::getCalls() const {
    return m_calls;
}
void OAIPersonCounts::setCalls(const qint32 &calls) {
    m_calls = calls;
    m_calls_isSet = true;
}

bool OAIPersonCounts::is_calls_Set() const{
    return m_calls_isSet;
}

bool OAIPersonCounts::is_calls_Valid() const{
    return m_calls_isValid;
}

qint32 OAIPersonCounts::getEmailsBounced() const {
    return m_emails_bounced;
}
void OAIPersonCounts::setEmailsBounced(const qint32 &emails_bounced) {
    m_emails_bounced = emails_bounced;
    m_emails_bounced_isSet = true;
}

bool OAIPersonCounts::is_emails_bounced_Set() const{
    return m_emails_bounced_isSet;
}

bool OAIPersonCounts::is_emails_bounced_Valid() const{
    return m_emails_bounced_isValid;
}

qint32 OAIPersonCounts::getEmailsClicked() const {
    return m_emails_clicked;
}
void OAIPersonCounts::setEmailsClicked(const qint32 &emails_clicked) {
    m_emails_clicked = emails_clicked;
    m_emails_clicked_isSet = true;
}

bool OAIPersonCounts::is_emails_clicked_Set() const{
    return m_emails_clicked_isSet;
}

bool OAIPersonCounts::is_emails_clicked_Valid() const{
    return m_emails_clicked_isValid;
}

qint32 OAIPersonCounts::getEmailsRepliedTo() const {
    return m_emails_replied_to;
}
void OAIPersonCounts::setEmailsRepliedTo(const qint32 &emails_replied_to) {
    m_emails_replied_to = emails_replied_to;
    m_emails_replied_to_isSet = true;
}

bool OAIPersonCounts::is_emails_replied_to_Set() const{
    return m_emails_replied_to_isSet;
}

bool OAIPersonCounts::is_emails_replied_to_Valid() const{
    return m_emails_replied_to_isValid;
}

qint32 OAIPersonCounts::getEmailsSent() const {
    return m_emails_sent;
}
void OAIPersonCounts::setEmailsSent(const qint32 &emails_sent) {
    m_emails_sent = emails_sent;
    m_emails_sent_isSet = true;
}

bool OAIPersonCounts::is_emails_sent_Set() const{
    return m_emails_sent_isSet;
}

bool OAIPersonCounts::is_emails_sent_Valid() const{
    return m_emails_sent_isValid;
}

qint32 OAIPersonCounts::getEmailsViewed() const {
    return m_emails_viewed;
}
void OAIPersonCounts::setEmailsViewed(const qint32 &emails_viewed) {
    m_emails_viewed = emails_viewed;
    m_emails_viewed_isSet = true;
}

bool OAIPersonCounts::is_emails_viewed_Set() const{
    return m_emails_viewed_isSet;
}

bool OAIPersonCounts::is_emails_viewed_Valid() const{
    return m_emails_viewed_isValid;
}

bool OAIPersonCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_bounced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_clicked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_replied_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails_viewed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
