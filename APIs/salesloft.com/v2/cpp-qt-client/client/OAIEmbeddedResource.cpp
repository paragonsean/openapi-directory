/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedResource::OAIEmbeddedResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedResource::OAIEmbeddedResource() {
    this->initializeModel();
}

OAIEmbeddedResource::~OAIEmbeddedResource() {}

void OAIEmbeddedResource::initializeModel() {

    m__href_isSet = false;
    m__href_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIEmbeddedResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedResource::fromJsonObject(QJsonObject json) {

    m__href_isValid = ::OpenAPI::fromJsonValue(m__href, json[QString("_href")]);
    m__href_isSet = !json[QString("_href")].isNull() && m__href_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIEmbeddedResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedResource::asJsonObject() const {
    QJsonObject obj;
    if (m__href_isSet) {
        obj.insert(QString("_href"), ::OpenAPI::toJsonValue(m__href));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIEmbeddedResource::getHref() const {
    return m__href;
}
void OAIEmbeddedResource::setHref(const QString &_href) {
    m__href = _href;
    m__href_isSet = true;
}

bool OAIEmbeddedResource::is__href_Set() const{
    return m__href_isSet;
}

bool OAIEmbeddedResource::is__href_Valid() const{
    return m__href_isValid;
}

qint32 OAIEmbeddedResource::getId() const {
    return m_id;
}
void OAIEmbeddedResource::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmbeddedResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmbeddedResource::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIEmbeddedResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
