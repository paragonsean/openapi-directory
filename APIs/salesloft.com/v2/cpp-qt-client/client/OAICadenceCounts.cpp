/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICadenceCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICadenceCounts::OAICadenceCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICadenceCounts::OAICadenceCounts() {
    this->initializeModel();
}

OAICadenceCounts::~OAICadenceCounts() {}

void OAICadenceCounts::initializeModel() {

    m_cadence_people_isSet = false;
    m_cadence_people_isValid = false;

    m_meetings_booked_isSet = false;
    m_meetings_booked_isValid = false;

    m_opportunities_created_isSet = false;
    m_opportunities_created_isValid = false;

    m_people_acted_on_count_isSet = false;
    m_people_acted_on_count_isValid = false;

    m_target_daily_people_isSet = false;
    m_target_daily_people_isValid = false;
}

void OAICadenceCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICadenceCounts::fromJsonObject(QJsonObject json) {

    m_cadence_people_isValid = ::OpenAPI::fromJsonValue(m_cadence_people, json[QString("cadence_people")]);
    m_cadence_people_isSet = !json[QString("cadence_people")].isNull() && m_cadence_people_isValid;

    m_meetings_booked_isValid = ::OpenAPI::fromJsonValue(m_meetings_booked, json[QString("meetings_booked")]);
    m_meetings_booked_isSet = !json[QString("meetings_booked")].isNull() && m_meetings_booked_isValid;

    m_opportunities_created_isValid = ::OpenAPI::fromJsonValue(m_opportunities_created, json[QString("opportunities_created")]);
    m_opportunities_created_isSet = !json[QString("opportunities_created")].isNull() && m_opportunities_created_isValid;

    m_people_acted_on_count_isValid = ::OpenAPI::fromJsonValue(m_people_acted_on_count, json[QString("people_acted_on_count")]);
    m_people_acted_on_count_isSet = !json[QString("people_acted_on_count")].isNull() && m_people_acted_on_count_isValid;

    m_target_daily_people_isValid = ::OpenAPI::fromJsonValue(m_target_daily_people, json[QString("target_daily_people")]);
    m_target_daily_people_isSet = !json[QString("target_daily_people")].isNull() && m_target_daily_people_isValid;
}

QString OAICadenceCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICadenceCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_cadence_people_isSet) {
        obj.insert(QString("cadence_people"), ::OpenAPI::toJsonValue(m_cadence_people));
    }
    if (m_meetings_booked_isSet) {
        obj.insert(QString("meetings_booked"), ::OpenAPI::toJsonValue(m_meetings_booked));
    }
    if (m_opportunities_created_isSet) {
        obj.insert(QString("opportunities_created"), ::OpenAPI::toJsonValue(m_opportunities_created));
    }
    if (m_people_acted_on_count_isSet) {
        obj.insert(QString("people_acted_on_count"), ::OpenAPI::toJsonValue(m_people_acted_on_count));
    }
    if (m_target_daily_people_isSet) {
        obj.insert(QString("target_daily_people"), ::OpenAPI::toJsonValue(m_target_daily_people));
    }
    return obj;
}

qint32 OAICadenceCounts::getCadencePeople() const {
    return m_cadence_people;
}
void OAICadenceCounts::setCadencePeople(const qint32 &cadence_people) {
    m_cadence_people = cadence_people;
    m_cadence_people_isSet = true;
}

bool OAICadenceCounts::is_cadence_people_Set() const{
    return m_cadence_people_isSet;
}

bool OAICadenceCounts::is_cadence_people_Valid() const{
    return m_cadence_people_isValid;
}

qint32 OAICadenceCounts::getMeetingsBooked() const {
    return m_meetings_booked;
}
void OAICadenceCounts::setMeetingsBooked(const qint32 &meetings_booked) {
    m_meetings_booked = meetings_booked;
    m_meetings_booked_isSet = true;
}

bool OAICadenceCounts::is_meetings_booked_Set() const{
    return m_meetings_booked_isSet;
}

bool OAICadenceCounts::is_meetings_booked_Valid() const{
    return m_meetings_booked_isValid;
}

qint32 OAICadenceCounts::getOpportunitiesCreated() const {
    return m_opportunities_created;
}
void OAICadenceCounts::setOpportunitiesCreated(const qint32 &opportunities_created) {
    m_opportunities_created = opportunities_created;
    m_opportunities_created_isSet = true;
}

bool OAICadenceCounts::is_opportunities_created_Set() const{
    return m_opportunities_created_isSet;
}

bool OAICadenceCounts::is_opportunities_created_Valid() const{
    return m_opportunities_created_isValid;
}

qint32 OAICadenceCounts::getPeopleActedOnCount() const {
    return m_people_acted_on_count;
}
void OAICadenceCounts::setPeopleActedOnCount(const qint32 &people_acted_on_count) {
    m_people_acted_on_count = people_acted_on_count;
    m_people_acted_on_count_isSet = true;
}

bool OAICadenceCounts::is_people_acted_on_count_Set() const{
    return m_people_acted_on_count_isSet;
}

bool OAICadenceCounts::is_people_acted_on_count_Valid() const{
    return m_people_acted_on_count_isValid;
}

qint32 OAICadenceCounts::getTargetDailyPeople() const {
    return m_target_daily_people;
}
void OAICadenceCounts::setTargetDailyPeople(const qint32 &target_daily_people) {
    m_target_daily_people = target_daily_people;
    m_target_daily_people_isSet = true;
}

bool OAICadenceCounts::is_target_daily_people_Set() const{
    return m_target_daily_people_isSet;
}

bool OAICadenceCounts::is_target_daily_people_Valid() const{
    return m_target_daily_people_isValid;
}

bool OAICadenceCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cadence_people_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meetings_booked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opportunities_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_acted_on_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_daily_people_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICadenceCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
