/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomFieldsApi_H
#define OAI_OAICustomFieldsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomField.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomFieldsApi : public QObject {
    Q_OBJECT

public:
    OAICustomFieldsApi(const int timeOut = 0);
    ~OAICustomFieldsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2CustomFieldsIdJsonDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2CustomFieldsIdJsonGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  field_type QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void v2CustomFieldsIdJsonPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &field_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<qint32> [optional]
    * @param[in]  field_type QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_paging_counts bool [optional]
    * @param[in]  limit_paging_counts bool [optional]
    */
    virtual void v2CustomFieldsJsonGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &field_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_paging_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &limit_paging_counts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  field_type QString [optional]
    */
    virtual void v2CustomFieldsJsonPost(const QString &name, const ::OpenAPI::OptionalParam<QString> &field_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2CustomFieldsIdJsonDeleteCallback(OAIHttpRequestWorker *worker);
    void v2CustomFieldsIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2CustomFieldsIdJsonPutCallback(OAIHttpRequestWorker *worker);
    void v2CustomFieldsJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2CustomFieldsJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2CustomFieldsIdJsonDeleteSignal();
    void v2CustomFieldsIdJsonGetSignal(OAICustomField summary);
    void v2CustomFieldsIdJsonPutSignal(OAICustomField summary);
    void v2CustomFieldsJsonGetSignal(QList<OAICustomField> summary);
    void v2CustomFieldsJsonPostSignal(OAICustomField summary);


    void v2CustomFieldsIdJsonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v2CustomFieldsIdJsonGetSignalFull(OAIHttpRequestWorker *worker, OAICustomField summary);
    void v2CustomFieldsIdJsonPutSignalFull(OAIHttpRequestWorker *worker, OAICustomField summary);
    void v2CustomFieldsJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomField> summary);
    void v2CustomFieldsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAICustomField summary);

    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonDeleteSignalError() instead")
    void v2CustomFieldsIdJsonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonGetSignalError() instead")
    void v2CustomFieldsIdJsonGetSignalE(OAICustomField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonGetSignalError(OAICustomField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonPutSignalError() instead")
    void v2CustomFieldsIdJsonPutSignalE(OAICustomField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonPutSignalError(OAICustomField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsJsonGetSignalError() instead")
    void v2CustomFieldsJsonGetSignalE(QList<OAICustomField> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsJsonGetSignalError(QList<OAICustomField> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsJsonPostSignalError() instead")
    void v2CustomFieldsJsonPostSignalE(OAICustomField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsJsonPostSignalError(OAICustomField summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonDeleteSignalErrorFull() instead")
    void v2CustomFieldsIdJsonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonGetSignalErrorFull() instead")
    void v2CustomFieldsIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsIdJsonPutSignalErrorFull() instead")
    void v2CustomFieldsIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsJsonGetSignalErrorFull() instead")
    void v2CustomFieldsJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2CustomFieldsJsonPostSignalErrorFull() instead")
    void v2CustomFieldsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2CustomFieldsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
