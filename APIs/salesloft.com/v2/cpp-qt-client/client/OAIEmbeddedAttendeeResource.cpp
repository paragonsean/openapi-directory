/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedAttendeeResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedAttendeeResource::OAIEmbeddedAttendeeResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedAttendeeResource::OAIEmbeddedAttendeeResource() {
    this->initializeModel();
}

OAIEmbeddedAttendeeResource::~OAIEmbeddedAttendeeResource() {}

void OAIEmbeddedAttendeeResource::initializeModel() {

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organizer_isSet = false;
    m_organizer_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_changed_isSet = false;
    m_status_changed_isValid = false;
}

void OAIEmbeddedAttendeeResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedAttendeeResource::fromJsonObject(QJsonObject json) {

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organizer_isValid = ::OpenAPI::fromJsonValue(m_organizer, json[QString("organizer")]);
    m_organizer_isSet = !json[QString("organizer")].isNull() && m_organizer_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_changed_isValid = ::OpenAPI::fromJsonValue(m_status_changed, json[QString("status_changed")]);
    m_status_changed_isSet = !json[QString("status_changed")].isNull() && m_status_changed_isValid;
}

QString OAIEmbeddedAttendeeResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedAttendeeResource::asJsonObject() const {
    QJsonObject obj;
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organizer_isSet) {
        obj.insert(QString("organizer"), ::OpenAPI::toJsonValue(m_organizer));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_changed_isSet) {
        obj.insert(QString("status_changed"), ::OpenAPI::toJsonValue(m_status_changed));
    }
    return obj;
}

QDate OAIEmbeddedAttendeeResource::getDeletedAt() const {
    return m_deleted_at;
}
void OAIEmbeddedAttendeeResource::setDeletedAt(const QDate &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIEmbeddedAttendeeResource::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAIEmbeddedAttendeeResource::getEmail() const {
    return m_email;
}
void OAIEmbeddedAttendeeResource::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmbeddedAttendeeResource::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEmbeddedAttendeeResource::getName() const {
    return m_name;
}
void OAIEmbeddedAttendeeResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEmbeddedAttendeeResource::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEmbeddedAttendeeResource::isOrganizer() const {
    return m_organizer;
}
void OAIEmbeddedAttendeeResource::setOrganizer(const bool &organizer) {
    m_organizer = organizer;
    m_organizer_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_organizer_Set() const{
    return m_organizer_isSet;
}

bool OAIEmbeddedAttendeeResource::is_organizer_Valid() const{
    return m_organizer_isValid;
}

QString OAIEmbeddedAttendeeResource::getStatus() const {
    return m_status;
}
void OAIEmbeddedAttendeeResource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEmbeddedAttendeeResource::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIEmbeddedAttendeeResource::isStatusChanged() const {
    return m_status_changed;
}
void OAIEmbeddedAttendeeResource::setStatusChanged(const bool &status_changed) {
    m_status_changed = status_changed;
    m_status_changed_isSet = true;
}

bool OAIEmbeddedAttendeeResource::is_status_changed_Set() const{
    return m_status_changed_isSet;
}

bool OAIEmbeddedAttendeeResource::is_status_changed_Valid() const{
    return m_status_changed_isValid;
}

bool OAIEmbeddedAttendeeResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_changed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedAttendeeResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
