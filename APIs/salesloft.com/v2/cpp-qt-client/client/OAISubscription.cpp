/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_callback_token_isSet = false;
    m_callback_token_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_callback_token_isValid = ::OpenAPI::fromJsonValue(m_callback_token, json[QString("callback_token")]);
    m_callback_token_isSet = !json[QString("callback_token")].isNull() && m_callback_token_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callback_url")]);
    m_callback_url_isSet = !json[QString("callback_url")].isNull() && m_callback_url_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenant_id")]);
    m_tenant_id_isSet = !json[QString("tenant_id")].isNull() && m_tenant_id_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("user_guid")]);
    m_user_guid_isSet = !json[QString("user_guid")].isNull() && m_user_guid_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_token_isSet) {
        obj.insert(QString("callback_token"), ::OpenAPI::toJsonValue(m_callback_token));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callback_url"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenant_id"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("user_guid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

QString OAISubscription::getCallbackToken() const {
    return m_callback_token;
}
void OAISubscription::setCallbackToken(const QString &callback_token) {
    m_callback_token = callback_token;
    m_callback_token_isSet = true;
}

bool OAISubscription::is_callback_token_Set() const{
    return m_callback_token_isSet;
}

bool OAISubscription::is_callback_token_Valid() const{
    return m_callback_token_isValid;
}

QString OAISubscription::getCallbackUrl() const {
    return m_callback_url;
}
void OAISubscription::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAISubscription::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAISubscription::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

bool OAISubscription::isEnabled() const {
    return m_enabled;
}
void OAISubscription::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISubscription::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISubscription::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISubscription::getEventType() const {
    return m_event_type;
}
void OAISubscription::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAISubscription::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAISubscription::is_event_type_Valid() const{
    return m_event_type_isValid;
}

qint32 OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISubscription::getTenantId() const {
    return m_tenant_id;
}
void OAISubscription::setTenantId(const qint32 &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAISubscription::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAISubscription::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAISubscription::getUserGuid() const {
    return m_user_guid;
}
void OAISubscription::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAISubscription::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAISubscription::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
