/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalendarEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalendarEvent::OAICalendarEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalendarEvent::OAICalendarEvent() {
    this->initializeModel();
}

OAICalendarEvent::~OAICalendarEvent() {}

void OAICalendarEvent::initializeModel() {

    m_all_day_isSet = false;
    m_all_day_isValid = false;

    m_attendees_isSet = false;
    m_attendees_isValid = false;

    m_body_html_isSet = false;
    m_body_html_isValid = false;

    m_busy_isSet = false;
    m_busy_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_canceled_at_isSet = false;
    m_canceled_at_isValid = false;

    m_conference_data_isSet = false;
    m_conference_data_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_html_link_isSet = false;
    m_html_link_isValid = false;

    m_i_cal_uid_isSet = false;
    m_i_cal_uid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_organizer_isSet = false;
    m_organizer_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAICalendarEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalendarEvent::fromJsonObject(QJsonObject json) {

    m_all_day_isValid = ::OpenAPI::fromJsonValue(m_all_day, json[QString("all_day")]);
    m_all_day_isSet = !json[QString("all_day")].isNull() && m_all_day_isValid;

    m_attendees_isValid = ::OpenAPI::fromJsonValue(m_attendees, json[QString("attendees")]);
    m_attendees_isSet = !json[QString("attendees")].isNull() && m_attendees_isValid;

    m_body_html_isValid = ::OpenAPI::fromJsonValue(m_body_html, json[QString("body_html")]);
    m_body_html_isSet = !json[QString("body_html")].isNull() && m_body_html_isValid;

    m_busy_isValid = ::OpenAPI::fromJsonValue(m_busy, json[QString("busy")]);
    m_busy_isSet = !json[QString("busy")].isNull() && m_busy_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendar_id")]);
    m_calendar_id_isSet = !json[QString("calendar_id")].isNull() && m_calendar_id_isValid;

    m_canceled_at_isValid = ::OpenAPI::fromJsonValue(m_canceled_at, json[QString("canceled_at")]);
    m_canceled_at_isSet = !json[QString("canceled_at")].isNull() && m_canceled_at_isValid;

    m_conference_data_isValid = ::OpenAPI::fromJsonValue(m_conference_data, json[QString("conference_data")]);
    m_conference_data_isSet = !json[QString("conference_data")].isNull() && m_conference_data_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extended_properties")]);
    m_extended_properties_isSet = !json[QString("extended_properties")].isNull() && m_extended_properties_isValid;

    m_html_link_isValid = ::OpenAPI::fromJsonValue(m_html_link, json[QString("html_link")]);
    m_html_link_isSet = !json[QString("html_link")].isNull() && m_html_link_isValid;

    m_i_cal_uid_isValid = ::OpenAPI::fromJsonValue(m_i_cal_uid, json[QString("i_cal_uid")]);
    m_i_cal_uid_isSet = !json[QString("i_cal_uid")].isNull() && m_i_cal_uid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_organizer_isValid = ::OpenAPI::fromJsonValue(m_organizer, json[QString("organizer")]);
    m_organizer_isSet = !json[QString("organizer")].isNull() && m_organizer_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenant_id")]);
    m_tenant_id_isSet = !json[QString("tenant_id")].isNull() && m_tenant_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("user_guid")]);
    m_user_guid_isSet = !json[QString("user_guid")].isNull() && m_user_guid_isValid;
}

QString OAICalendarEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalendarEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_all_day_isSet) {
        obj.insert(QString("all_day"), ::OpenAPI::toJsonValue(m_all_day));
    }
    if (m_attendees.size() > 0) {
        obj.insert(QString("attendees"), ::OpenAPI::toJsonValue(m_attendees));
    }
    if (m_body_html_isSet) {
        obj.insert(QString("body_html"), ::OpenAPI::toJsonValue(m_body_html));
    }
    if (m_busy_isSet) {
        obj.insert(QString("busy"), ::OpenAPI::toJsonValue(m_busy));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendar_id"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_canceled_at_isSet) {
        obj.insert(QString("canceled_at"), ::OpenAPI::toJsonValue(m_canceled_at));
    }
    if (m_conference_data_isSet) {
        obj.insert(QString("conference_data"), ::OpenAPI::toJsonValue(m_conference_data));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_extended_properties_isSet) {
        obj.insert(QString("extended_properties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_html_link_isSet) {
        obj.insert(QString("html_link"), ::OpenAPI::toJsonValue(m_html_link));
    }
    if (m_i_cal_uid_isSet) {
        obj.insert(QString("i_cal_uid"), ::OpenAPI::toJsonValue(m_i_cal_uid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_organizer_isSet) {
        obj.insert(QString("organizer"), ::OpenAPI::toJsonValue(m_organizer));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_recurring_isSet) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenant_id"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("user_guid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

bool OAICalendarEvent::isAllDay() const {
    return m_all_day;
}
void OAICalendarEvent::setAllDay(const bool &all_day) {
    m_all_day = all_day;
    m_all_day_isSet = true;
}

bool OAICalendarEvent::is_all_day_Set() const{
    return m_all_day_isSet;
}

bool OAICalendarEvent::is_all_day_Valid() const{
    return m_all_day_isValid;
}

QList<QJsonValue> OAICalendarEvent::getAttendees() const {
    return m_attendees;
}
void OAICalendarEvent::setAttendees(const QList<QJsonValue> &attendees) {
    m_attendees = attendees;
    m_attendees_isSet = true;
}

bool OAICalendarEvent::is_attendees_Set() const{
    return m_attendees_isSet;
}

bool OAICalendarEvent::is_attendees_Valid() const{
    return m_attendees_isValid;
}

QString OAICalendarEvent::getBodyHtml() const {
    return m_body_html;
}
void OAICalendarEvent::setBodyHtml(const QString &body_html) {
    m_body_html = body_html;
    m_body_html_isSet = true;
}

bool OAICalendarEvent::is_body_html_Set() const{
    return m_body_html_isSet;
}

bool OAICalendarEvent::is_body_html_Valid() const{
    return m_body_html_isValid;
}

bool OAICalendarEvent::isBusy() const {
    return m_busy;
}
void OAICalendarEvent::setBusy(const bool &busy) {
    m_busy = busy;
    m_busy_isSet = true;
}

bool OAICalendarEvent::is_busy_Set() const{
    return m_busy_isSet;
}

bool OAICalendarEvent::is_busy_Valid() const{
    return m_busy_isValid;
}

QString OAICalendarEvent::getCalendarId() const {
    return m_calendar_id;
}
void OAICalendarEvent::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAICalendarEvent::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAICalendarEvent::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QDateTime OAICalendarEvent::getCanceledAt() const {
    return m_canceled_at;
}
void OAICalendarEvent::setCanceledAt(const QDateTime &canceled_at) {
    m_canceled_at = canceled_at;
    m_canceled_at_isSet = true;
}

bool OAICalendarEvent::is_canceled_at_Set() const{
    return m_canceled_at_isSet;
}

bool OAICalendarEvent::is_canceled_at_Valid() const{
    return m_canceled_at_isValid;
}

OAIObject OAICalendarEvent::getConferenceData() const {
    return m_conference_data;
}
void OAICalendarEvent::setConferenceData(const OAIObject &conference_data) {
    m_conference_data = conference_data;
    m_conference_data_isSet = true;
}

bool OAICalendarEvent::is_conference_data_Set() const{
    return m_conference_data_isSet;
}

bool OAICalendarEvent::is_conference_data_Valid() const{
    return m_conference_data_isValid;
}

QDateTime OAICalendarEvent::getCreatedAt() const {
    return m_created_at;
}
void OAICalendarEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICalendarEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICalendarEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICalendarEvent::getCreator() const {
    return m_creator;
}
void OAICalendarEvent::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAICalendarEvent::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAICalendarEvent::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAICalendarEvent::getDescription() const {
    return m_description;
}
void OAICalendarEvent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICalendarEvent::is_description_Set() const{
    return m_description_isSet;
}

bool OAICalendarEvent::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICalendarEvent::getEndTime() const {
    return m_end_time;
}
void OAICalendarEvent::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICalendarEvent::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICalendarEvent::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIObject OAICalendarEvent::getExtendedProperties() const {
    return m_extended_properties;
}
void OAICalendarEvent::setExtendedProperties(const OAIObject &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAICalendarEvent::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAICalendarEvent::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAICalendarEvent::getHtmlLink() const {
    return m_html_link;
}
void OAICalendarEvent::setHtmlLink(const QString &html_link) {
    m_html_link = html_link;
    m_html_link_isSet = true;
}

bool OAICalendarEvent::is_html_link_Set() const{
    return m_html_link_isSet;
}

bool OAICalendarEvent::is_html_link_Valid() const{
    return m_html_link_isValid;
}

QString OAICalendarEvent::getICalUid() const {
    return m_i_cal_uid;
}
void OAICalendarEvent::setICalUid(const QString &i_cal_uid) {
    m_i_cal_uid = i_cal_uid;
    m_i_cal_uid_isSet = true;
}

bool OAICalendarEvent::is_i_cal_uid_Set() const{
    return m_i_cal_uid_isSet;
}

bool OAICalendarEvent::is_i_cal_uid_Valid() const{
    return m_i_cal_uid_isValid;
}

QString OAICalendarEvent::getId() const {
    return m_id;
}
void OAICalendarEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICalendarEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAICalendarEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICalendarEvent::getLocation() const {
    return m_location;
}
void OAICalendarEvent::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICalendarEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAICalendarEvent::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICalendarEvent::getOrganizer() const {
    return m_organizer;
}
void OAICalendarEvent::setOrganizer(const QString &organizer) {
    m_organizer = organizer;
    m_organizer_isSet = true;
}

bool OAICalendarEvent::is_organizer_Set() const{
    return m_organizer_isSet;
}

bool OAICalendarEvent::is_organizer_Valid() const{
    return m_organizer_isValid;
}

QString OAICalendarEvent::getProvider() const {
    return m_provider;
}
void OAICalendarEvent::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICalendarEvent::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICalendarEvent::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAICalendarEvent::isRecurring() const {
    return m_recurring;
}
void OAICalendarEvent::setRecurring(const bool &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAICalendarEvent::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAICalendarEvent::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QDateTime OAICalendarEvent::getStartTime() const {
    return m_start_time;
}
void OAICalendarEvent::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICalendarEvent::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICalendarEvent::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAICalendarEvent::getStatus() const {
    return m_status;
}
void OAICalendarEvent::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICalendarEvent::is_status_Set() const{
    return m_status_isSet;
}

bool OAICalendarEvent::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICalendarEvent::getTenantId() const {
    return m_tenant_id;
}
void OAICalendarEvent::setTenantId(const qint32 &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAICalendarEvent::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAICalendarEvent::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAICalendarEvent::getTitle() const {
    return m_title;
}
void OAICalendarEvent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICalendarEvent::is_title_Set() const{
    return m_title_isSet;
}

bool OAICalendarEvent::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAICalendarEvent::getUpdatedAt() const {
    return m_updated_at;
}
void OAICalendarEvent::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICalendarEvent::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICalendarEvent::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICalendarEvent::getUserGuid() const {
    return m_user_guid;
}
void OAICalendarEvent::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAICalendarEvent::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAICalendarEvent::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAICalendarEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_busy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conference_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_cal_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalendarEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
