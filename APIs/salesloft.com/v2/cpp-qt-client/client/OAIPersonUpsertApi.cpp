/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonUpsertApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPersonUpsertApi::OAIPersonUpsertApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPersonUpsertApi::~OAIPersonUpsertApi() {
}

void OAIPersonUpsertApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.salesloft.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v2PersonUpsertsJsonPost", defaultConf);
    _serverIndices.insert("v2PersonUpsertsJsonPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPersonUpsertApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPersonUpsertApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPersonUpsertApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPersonUpsertApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPersonUpsertApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPersonUpsertApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPersonUpsertApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPersonUpsertApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPersonUpsertApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPersonUpsertApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonUpsertApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPersonUpsertApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPersonUpsertApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPersonUpsertApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPersonUpsertApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPersonUpsertApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPersonUpsertApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPersonUpsertApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPersonUpsertApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPersonUpsertApi::v2PersonUpsertsJsonPost(const ::OpenAPI::OptionalParam<qint32> &account_id, const ::OpenAPI::OptionalParam<QString> &city, const ::OpenAPI::OptionalParam<QList<QString>> &contact_restrictions, const ::OpenAPI::OptionalParam<QString> &country, const ::OpenAPI::OptionalParam<QString> &crm_id, const ::OpenAPI::OptionalParam<QString> &crm_id_type, const ::OpenAPI::OptionalParam<OAIObject> &custom_fields, const ::OpenAPI::OptionalParam<bool> &do_not_contact, const ::OpenAPI::OptionalParam<QString> &email_address, const ::OpenAPI::OptionalParam<QString> &first_name, const ::OpenAPI::OptionalParam<QString> &home_phone, const ::OpenAPI::OptionalParam<qint32> &id, const ::OpenAPI::OptionalParam<qint32> &import_id, const ::OpenAPI::OptionalParam<QString> &job_seniority, const ::OpenAPI::OptionalParam<QString> &last_name, const ::OpenAPI::OptionalParam<QString> &linkedin_url, const ::OpenAPI::OptionalParam<QString> &locale, const ::OpenAPI::OptionalParam<QString> &mobile_phone, const ::OpenAPI::OptionalParam<qint32> &owner_id, const ::OpenAPI::OptionalParam<QString> &person_company_industry, const ::OpenAPI::OptionalParam<QString> &person_company_name, const ::OpenAPI::OptionalParam<QString> &person_company_website, const ::OpenAPI::OptionalParam<qint32> &person_stage_id, const ::OpenAPI::OptionalParam<QString> &personal_email_address, const ::OpenAPI::OptionalParam<QString> &personal_website, const ::OpenAPI::OptionalParam<QString> &phone, const ::OpenAPI::OptionalParam<QString> &phone_extension, const ::OpenAPI::OptionalParam<QString> &secondary_email_address, const ::OpenAPI::OptionalParam<QString> &state, const ::OpenAPI::OptionalParam<QList<QString>> &tags, const ::OpenAPI::OptionalParam<QString> &title, const ::OpenAPI::OptionalParam<QString> &twitter_handle, const ::OpenAPI::OptionalParam<QString> &upsert_key, const ::OpenAPI::OptionalParam<QString> &work_city, const ::OpenAPI::OptionalParam<QString> &work_country, const ::OpenAPI::OptionalParam<QString> &work_state) {
    QString fullPath = QString(_serverConfigs["v2PersonUpsertsJsonPost"][_serverIndices.value("v2PersonUpsertsJsonPost")].URL()+"/v2/person_upserts.json");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (account_id.hasValue())
    {
        input.add_var("account_id", ::OpenAPI::toStringValue(account_id.value()));
    }
    if (city.hasValue())
    {
        input.add_var("city", ::OpenAPI::toStringValue(city.value()));
    }
    if (contact_restrictions.hasValue())
    {
        input.add_var("contact_restrictions", ::OpenAPI::toStringValue(contact_restrictions.value()));
    }
    if (country.hasValue())
    {
        input.add_var("country", ::OpenAPI::toStringValue(country.value()));
    }
    if (crm_id.hasValue())
    {
        input.add_var("crm_id", ::OpenAPI::toStringValue(crm_id.value()));
    }
    if (crm_id_type.hasValue())
    {
        input.add_var("crm_id_type", ::OpenAPI::toStringValue(crm_id_type.value()));
    }
    if (custom_fields.hasValue())
    {
        input.add_var("custom_fields", ::OpenAPI::toStringValue(custom_fields.value()));
    }
    if (do_not_contact.hasValue())
    {
        input.add_var("do_not_contact", ::OpenAPI::toStringValue(do_not_contact.value()));
    }
    if (email_address.hasValue())
    {
        input.add_var("email_address", ::OpenAPI::toStringValue(email_address.value()));
    }
    if (first_name.hasValue())
    {
        input.add_var("first_name", ::OpenAPI::toStringValue(first_name.value()));
    }
    if (home_phone.hasValue())
    {
        input.add_var("home_phone", ::OpenAPI::toStringValue(home_phone.value()));
    }
    if (id.hasValue())
    {
        input.add_var("id", ::OpenAPI::toStringValue(id.value()));
    }
    if (import_id.hasValue())
    {
        input.add_var("import_id", ::OpenAPI::toStringValue(import_id.value()));
    }
    if (job_seniority.hasValue())
    {
        input.add_var("job_seniority", ::OpenAPI::toStringValue(job_seniority.value()));
    }
    if (last_name.hasValue())
    {
        input.add_var("last_name", ::OpenAPI::toStringValue(last_name.value()));
    }
    if (linkedin_url.hasValue())
    {
        input.add_var("linkedin_url", ::OpenAPI::toStringValue(linkedin_url.value()));
    }
    if (locale.hasValue())
    {
        input.add_var("locale", ::OpenAPI::toStringValue(locale.value()));
    }
    if (mobile_phone.hasValue())
    {
        input.add_var("mobile_phone", ::OpenAPI::toStringValue(mobile_phone.value()));
    }
    if (owner_id.hasValue())
    {
        input.add_var("owner_id", ::OpenAPI::toStringValue(owner_id.value()));
    }
    if (person_company_industry.hasValue())
    {
        input.add_var("person_company_industry", ::OpenAPI::toStringValue(person_company_industry.value()));
    }
    if (person_company_name.hasValue())
    {
        input.add_var("person_company_name", ::OpenAPI::toStringValue(person_company_name.value()));
    }
    if (person_company_website.hasValue())
    {
        input.add_var("person_company_website", ::OpenAPI::toStringValue(person_company_website.value()));
    }
    if (person_stage_id.hasValue())
    {
        input.add_var("person_stage_id", ::OpenAPI::toStringValue(person_stage_id.value()));
    }
    if (personal_email_address.hasValue())
    {
        input.add_var("personal_email_address", ::OpenAPI::toStringValue(personal_email_address.value()));
    }
    if (personal_website.hasValue())
    {
        input.add_var("personal_website", ::OpenAPI::toStringValue(personal_website.value()));
    }
    if (phone.hasValue())
    {
        input.add_var("phone", ::OpenAPI::toStringValue(phone.value()));
    }
    if (phone_extension.hasValue())
    {
        input.add_var("phone_extension", ::OpenAPI::toStringValue(phone_extension.value()));
    }
    if (secondary_email_address.hasValue())
    {
        input.add_var("secondary_email_address", ::OpenAPI::toStringValue(secondary_email_address.value()));
    }
    if (state.hasValue())
    {
        input.add_var("state", ::OpenAPI::toStringValue(state.value()));
    }
    if (tags.hasValue())
    {
        input.add_var("tags", ::OpenAPI::toStringValue(tags.value()));
    }
    if (title.hasValue())
    {
        input.add_var("title", ::OpenAPI::toStringValue(title.value()));
    }
    if (twitter_handle.hasValue())
    {
        input.add_var("twitter_handle", ::OpenAPI::toStringValue(twitter_handle.value()));
    }
    if (upsert_key.hasValue())
    {
        input.add_var("upsert_key", ::OpenAPI::toStringValue(upsert_key.value()));
    }
    if (work_city.hasValue())
    {
        input.add_var("work_city", ::OpenAPI::toStringValue(work_city.value()));
    }
    if (work_country.hasValue())
    {
        input.add_var("work_country", ::OpenAPI::toStringValue(work_country.value()));
    }
    if (work_state.hasValue())
    {
        input.add_var("work_state", ::OpenAPI::toStringValue(work_state.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPersonUpsertApi::v2PersonUpsertsJsonPostCallback);
    connect(this, &OAIPersonUpsertApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPersonUpsertApi::v2PersonUpsertsJsonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPersonUpsert output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2PersonUpsertsJsonPostSignal(output);
        Q_EMIT v2PersonUpsertsJsonPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2PersonUpsertsJsonPostSignalE(output, error_type, error_str);
        Q_EMIT v2PersonUpsertsJsonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2PersonUpsertsJsonPostSignalError(output, error_type, error_str);
        Q_EMIT v2PersonUpsertsJsonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPersonUpsertApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
