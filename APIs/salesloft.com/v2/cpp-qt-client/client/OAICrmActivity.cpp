/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrmActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrmActivity::OAICrmActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrmActivity::OAICrmActivity() {
    this->initializeModel();
}

OAICrmActivity::~OAICrmActivity() {}

void OAICrmActivity::initializeModel() {

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crm_id_isSet = false;
    m_crm_id_isValid = false;

    m_custom_crm_fields_isSet = false;
    m_custom_crm_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICrmActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrmActivity::fromJsonObject(QJsonObject json) {

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activity_type")]);
    m_activity_type_isSet = !json[QString("activity_type")].isNull() && m_activity_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crm_id_isValid = ::OpenAPI::fromJsonValue(m_crm_id, json[QString("crm_id")]);
    m_crm_id_isSet = !json[QString("crm_id")].isNull() && m_crm_id_isValid;

    m_custom_crm_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_crm_fields, json[QString("custom_crm_fields")]);
    m_custom_crm_fields_isSet = !json[QString("custom_crm_fields")].isNull() && m_custom_crm_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICrmActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrmActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_type_isSet) {
        obj.insert(QString("activity_type"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crm_id_isSet) {
        obj.insert(QString("crm_id"), ::OpenAPI::toJsonValue(m_crm_id));
    }
    if (m_custom_crm_fields_isSet) {
        obj.insert(QString("custom_crm_fields"), ::OpenAPI::toJsonValue(m_custom_crm_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAICrmActivity::getActivityType() const {
    return m_activity_type;
}
void OAICrmActivity::setActivityType(const QString &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAICrmActivity::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAICrmActivity::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

QDateTime OAICrmActivity::getCreatedAt() const {
    return m_created_at;
}
void OAICrmActivity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICrmActivity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICrmActivity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICrmActivity::getCrmId() const {
    return m_crm_id;
}
void OAICrmActivity::setCrmId(const QString &crm_id) {
    m_crm_id = crm_id;
    m_crm_id_isSet = true;
}

bool OAICrmActivity::is_crm_id_Set() const{
    return m_crm_id_isSet;
}

bool OAICrmActivity::is_crm_id_Valid() const{
    return m_crm_id_isValid;
}

OAIObject OAICrmActivity::getCustomCrmFields() const {
    return m_custom_crm_fields;
}
void OAICrmActivity::setCustomCrmFields(const OAIObject &custom_crm_fields) {
    m_custom_crm_fields = custom_crm_fields;
    m_custom_crm_fields_isSet = true;
}

bool OAICrmActivity::is_custom_crm_fields_Set() const{
    return m_custom_crm_fields_isSet;
}

bool OAICrmActivity::is_custom_crm_fields_Valid() const{
    return m_custom_crm_fields_isValid;
}

QString OAICrmActivity::getDescription() const {
    return m_description;
}
void OAICrmActivity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICrmActivity::is_description_Set() const{
    return m_description_isSet;
}

bool OAICrmActivity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICrmActivity::getError() const {
    return m_error;
}
void OAICrmActivity::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICrmActivity::is_error_Set() const{
    return m_error_isSet;
}

bool OAICrmActivity::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAICrmActivity::getId() const {
    return m_id;
}
void OAICrmActivity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICrmActivity::is_id_Set() const{
    return m_id_isSet;
}

bool OAICrmActivity::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAICrmActivity::getPerson() const {
    return m_person;
}
void OAICrmActivity::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAICrmActivity::is_person_Set() const{
    return m_person_isSet;
}

bool OAICrmActivity::is_person_Valid() const{
    return m_person_isValid;
}

QString OAICrmActivity::getSubject() const {
    return m_subject;
}
void OAICrmActivity::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICrmActivity::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICrmActivity::is_subject_Valid() const{
    return m_subject_isValid;
}

QDateTime OAICrmActivity::getUpdatedAt() const {
    return m_updated_at;
}
void OAICrmActivity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICrmActivity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICrmActivity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAICrmActivity::getUser() const {
    return m_user;
}
void OAICrmActivity::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICrmActivity::is_user_Set() const{
    return m_user_isSet;
}

bool OAICrmActivity::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICrmActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_crm_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrmActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
