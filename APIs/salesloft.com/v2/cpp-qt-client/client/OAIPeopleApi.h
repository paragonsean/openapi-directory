/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeopleApi_H
#define OAI_OAIPeopleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPerson.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeopleApi : public QObject {
    Q_OBJECT

public:
    OAIPeopleApi(const int timeOut = 0);
    ~OAIPeopleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2PeopleIdJsonDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2PeopleIdJsonGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  account_id qint32 [optional]
    * @param[in]  city QString [optional]
    * @param[in]  contact_restrictions QList<QString> [optional]
    * @param[in]  country QString [optional]
    * @param[in]  crm_id QString [optional]
    * @param[in]  crm_id_type QString [optional]
    * @param[in]  custom_fields OAIObject [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  email_address QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  home_phone QString [optional]
    * @param[in]  import_id qint32 [optional]
    * @param[in]  job_seniority QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  linkedin_url QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  mobile_phone QString [optional]
    * @param[in]  owner_id qint32 [optional]
    * @param[in]  person_company_industry QString [optional]
    * @param[in]  person_company_name QString [optional]
    * @param[in]  person_company_website QString [optional]
    * @param[in]  person_stage_id qint32 [optional]
    * @param[in]  personal_email_address QString [optional]
    * @param[in]  personal_website QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  phone_extension QString [optional]
    * @param[in]  secondary_email_address QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  title QString [optional]
    * @param[in]  twitter_handle QString [optional]
    * @param[in]  work_city QString [optional]
    * @param[in]  work_country QString [optional]
    * @param[in]  work_state QString [optional]
    */
    virtual void v2PeopleIdJsonPut(const QString &id, const ::OpenAPI::OptionalParam<qint32> &account_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contact_restrictions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &custom_fields = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &home_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &import_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &job_seniority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &linkedin_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mobile_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &owner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &person_company_industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &person_company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &person_company_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &person_stage_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &personal_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &personal_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_extension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secondary_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &twitter_handle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<qint32> [optional]
    * @param[in]  updated_at QList<QString> [optional]
    * @param[in]  email_addresses QList<QString> [optional]
    * @param[in]  owned_by_guid QList<QString> [optional]
    * @param[in]  person_stage_id QList<qint32> [optional]
    * @param[in]  crm_id QList<QString> [optional]
    * @param[in]  owner_crm_id QList<QString> [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  can_email bool [optional]
    * @param[in]  can_call bool [optional]
    * @param[in]  can_text bool [optional]
    * @param[in]  account_id QList<qint32> [optional]
    * @param[in]  custom_fields OAIObject [optional]
    * @param[in]  import_id QList<qint32> [optional]
    * @param[in]  job_seniority QList<QString> [optional]
    * @param[in]  tag_id QList<qint32> [optional]
    * @param[in]  owner_is_active bool [optional]
    * @param[in]  cadence_id QList<qint32> [optional]
    * @param[in]  starred_by_guid QList<QString> [optional]
    * @param[in]  replied bool [optional]
    * @param[in]  bounced bool [optional]
    * @param[in]  success bool [optional]
    * @param[in]  eu_resident bool [optional]
    * @param[in]  title QList<QString> [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  state QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  last_contacted OAIObject [optional]
    * @param[in]  created_at OAIObject [optional]
    * @param[in]  r_new bool [optional]
    * @param[in]  phone_number bool [optional]
    * @param[in]  locales QList<QString> [optional]
    * @param[in]  owner_id QList<qint32> [optional]
    * @param[in]  _query QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_paging_counts bool [optional]
    * @param[in]  limit_paging_counts bool [optional]
    */
    virtual void v2PeopleJsonGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &updated_at = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &email_addresses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &owned_by_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &person_stage_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &crm_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &owner_crm_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &can_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &can_call = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &can_text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &account_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAIObject> &custom_fields = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QList<qint32>> &import_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &job_seniority = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &tag_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<bool> &owner_is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<qint32>> &cadence_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &starred_by_guid = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &replied = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bounced = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &success = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &eu_resident = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &title = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIObject> &last_contacted = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &created_at = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &r_new = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &phone_number = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &locales = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &owner_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QString> &_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_paging_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &limit_paging_counts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  account_id qint32 [optional]
    * @param[in]  autotag_date bool [optional]
    * @param[in]  city QString [optional]
    * @param[in]  contact_restrictions QList<QString> [optional]
    * @param[in]  country QString [optional]
    * @param[in]  crm_id QString [optional]
    * @param[in]  crm_id_type QString [optional]
    * @param[in]  custom_fields OAIObject [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  email_address QString [optional]
    * @param[in]  first_name QString [optional]
    * @param[in]  home_phone QString [optional]
    * @param[in]  import_id qint32 [optional]
    * @param[in]  job_seniority QString [optional]
    * @param[in]  last_name QString [optional]
    * @param[in]  linkedin_url QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  mobile_phone QString [optional]
    * @param[in]  owner_id qint32 [optional]
    * @param[in]  person_company_industry QString [optional]
    * @param[in]  person_company_name QString [optional]
    * @param[in]  person_company_website QString [optional]
    * @param[in]  person_stage_id qint32 [optional]
    * @param[in]  personal_email_address QString [optional]
    * @param[in]  personal_website QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  phone_extension QString [optional]
    * @param[in]  secondary_email_address QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  title QString [optional]
    * @param[in]  twitter_handle QString [optional]
    * @param[in]  work_city QString [optional]
    * @param[in]  work_country QString [optional]
    * @param[in]  work_state QString [optional]
    */
    virtual void v2PeopleJsonPost(const ::OpenAPI::OptionalParam<qint32> &account_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &autotag_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contact_restrictions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &custom_fields = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &home_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &import_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &job_seniority = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &linkedin_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mobile_phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &owner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &person_company_industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &person_company_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &person_company_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &person_stage_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &personal_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &personal_website = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_extension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &secondary_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &twitter_handle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &work_state = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2PeopleIdJsonDeleteCallback(OAIHttpRequestWorker *worker);
    void v2PeopleIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2PeopleIdJsonPutCallback(OAIHttpRequestWorker *worker);
    void v2PeopleJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2PeopleJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2PeopleIdJsonDeleteSignal();
    void v2PeopleIdJsonGetSignal(OAIPerson summary);
    void v2PeopleIdJsonPutSignal(OAIPerson summary);
    void v2PeopleJsonGetSignal(QList<OAIPerson> summary);
    void v2PeopleJsonPostSignal(OAIPerson summary);


    void v2PeopleIdJsonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void v2PeopleIdJsonGetSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void v2PeopleIdJsonPutSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void v2PeopleJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPerson> summary);
    void v2PeopleJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);

    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonDeleteSignalError() instead")
    void v2PeopleIdJsonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonGetSignalError() instead")
    void v2PeopleIdJsonGetSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonGetSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonPutSignalError() instead")
    void v2PeopleIdJsonPutSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonPutSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleJsonGetSignalError() instead")
    void v2PeopleJsonGetSignalE(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleJsonGetSignalError(QList<OAIPerson> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleJsonPostSignalError() instead")
    void v2PeopleJsonPostSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleJsonPostSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonDeleteSignalErrorFull() instead")
    void v2PeopleIdJsonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonGetSignalErrorFull() instead")
    void v2PeopleIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleIdJsonPutSignalErrorFull() instead")
    void v2PeopleIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleJsonGetSignalErrorFull() instead")
    void v2PeopleJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2PeopleJsonPostSignalErrorFull() instead")
    void v2PeopleJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2PeopleJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
