/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailCounts::OAIEmailCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailCounts::OAIEmailCounts() {
    this->initializeModel();
}

OAIEmailCounts::~OAIEmailCounts() {}

void OAIEmailCounts::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_unique_devices_isSet = false;
    m_unique_devices_isValid = false;

    m_unique_locations_isSet = false;
    m_unique_locations_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIEmailCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailCounts::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_unique_devices_isValid = ::OpenAPI::fromJsonValue(m_unique_devices, json[QString("unique_devices")]);
    m_unique_devices_isSet = !json[QString("unique_devices")].isNull() && m_unique_devices_isValid;

    m_unique_locations_isValid = ::OpenAPI::fromJsonValue(m_unique_locations, json[QString("unique_locations")]);
    m_unique_locations_isSet = !json[QString("unique_locations")].isNull() && m_unique_locations_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIEmailCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments_isSet) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_replies_isSet) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_unique_devices_isSet) {
        obj.insert(QString("unique_devices"), ::OpenAPI::toJsonValue(m_unique_devices));
    }
    if (m_unique_locations_isSet) {
        obj.insert(QString("unique_locations"), ::OpenAPI::toJsonValue(m_unique_locations));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

qint32 OAIEmailCounts::getAttachments() const {
    return m_attachments;
}
void OAIEmailCounts::setAttachments(const qint32 &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIEmailCounts::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIEmailCounts::is_attachments_Valid() const{
    return m_attachments_isValid;
}

qint32 OAIEmailCounts::getClicks() const {
    return m_clicks;
}
void OAIEmailCounts::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIEmailCounts::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIEmailCounts::is_clicks_Valid() const{
    return m_clicks_isValid;
}

qint32 OAIEmailCounts::getReplies() const {
    return m_replies;
}
void OAIEmailCounts::setReplies(const qint32 &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIEmailCounts::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIEmailCounts::is_replies_Valid() const{
    return m_replies_isValid;
}

qint32 OAIEmailCounts::getUniqueDevices() const {
    return m_unique_devices;
}
void OAIEmailCounts::setUniqueDevices(const qint32 &unique_devices) {
    m_unique_devices = unique_devices;
    m_unique_devices_isSet = true;
}

bool OAIEmailCounts::is_unique_devices_Set() const{
    return m_unique_devices_isSet;
}

bool OAIEmailCounts::is_unique_devices_Valid() const{
    return m_unique_devices_isValid;
}

qint32 OAIEmailCounts::getUniqueLocations() const {
    return m_unique_locations;
}
void OAIEmailCounts::setUniqueLocations(const qint32 &unique_locations) {
    m_unique_locations = unique_locations;
    m_unique_locations_isSet = true;
}

bool OAIEmailCounts::is_unique_locations_Set() const{
    return m_unique_locations_isSet;
}

bool OAIEmailCounts::is_unique_locations_Valid() const{
    return m_unique_locations_isValid;
}

qint32 OAIEmailCounts::getViews() const {
    return m_views;
}
void OAIEmailCounts::setViews(const qint32 &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIEmailCounts::is_views_Set() const{
    return m_views_isSet;
}

bool OAIEmailCounts::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIEmailCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
