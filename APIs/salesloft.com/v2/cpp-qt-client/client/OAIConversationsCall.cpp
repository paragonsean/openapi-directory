/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationsCall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationsCall::OAIConversationsCall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationsCall::OAIConversationsCall() {
    this->initializeModel();
}

OAIConversationsCall::~OAIConversationsCall() {}

void OAIConversationsCall::initializeModel() {

    m_call_created_at_isSet = false;
    m_call_created_at_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAIConversationsCall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationsCall::fromJsonObject(QJsonObject json) {

    m_call_created_at_isValid = ::OpenAPI::fromJsonValue(m_call_created_at, json[QString("call_created_at")]);
    m_call_created_at_isSet = !json[QString("call_created_at")].isNull() && m_call_created_at_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("user_guid")]);
    m_user_guid_isSet = !json[QString("user_guid")].isNull() && m_user_guid_isValid;
}

QString OAIConversationsCall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationsCall::asJsonObject() const {
    QJsonObject obj;
    if (m_call_created_at_isSet) {
        obj.insert(QString("call_created_at"), ::OpenAPI::toJsonValue(m_call_created_at));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_recording_isSet) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("user_guid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

QString OAIConversationsCall::getCallCreatedAt() const {
    return m_call_created_at;
}
void OAIConversationsCall::setCallCreatedAt(const QString &call_created_at) {
    m_call_created_at = call_created_at;
    m_call_created_at_isSet = true;
}

bool OAIConversationsCall::is_call_created_at_Set() const{
    return m_call_created_at_isSet;
}

bool OAIConversationsCall::is_call_created_at_Valid() const{
    return m_call_created_at_isValid;
}

QString OAIConversationsCall::getDirection() const {
    return m_direction;
}
void OAIConversationsCall::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIConversationsCall::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIConversationsCall::is_direction_Valid() const{
    return m_direction_isValid;
}

double OAIConversationsCall::getDuration() const {
    return m_duration;
}
void OAIConversationsCall::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIConversationsCall::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIConversationsCall::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIConversationsCall::getFrom() const {
    return m_from;
}
void OAIConversationsCall::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIConversationsCall::is_from_Set() const{
    return m_from_isSet;
}

bool OAIConversationsCall::is_from_Valid() const{
    return m_from_isValid;
}

OAIObject OAIConversationsCall::getRecording() const {
    return m_recording;
}
void OAIConversationsCall::setRecording(const OAIObject &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAIConversationsCall::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAIConversationsCall::is_recording_Valid() const{
    return m_recording_isValid;
}

QString OAIConversationsCall::getTo() const {
    return m_to;
}
void OAIConversationsCall::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIConversationsCall::is_to_Set() const{
    return m_to_isSet;
}

bool OAIConversationsCall::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIConversationsCall::getUserGuid() const {
    return m_user_guid;
}
void OAIConversationsCall::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAIConversationsCall::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAIConversationsCall::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAIConversationsCall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationsCall::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
