/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeetingSetting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeetingSetting::OAIMeetingSetting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeetingSetting::OAIMeetingSetting() {
    this->initializeModel();
}

OAIMeetingSetting::~OAIMeetingSetting() {}

void OAIMeetingSetting::initializeModel() {

    m_active_meeting_url_isSet = false;
    m_active_meeting_url_isValid = false;

    m_allow_booking_on_behalf_isSet = false;
    m_allow_booking_on_behalf_isValid = false;

    m_allow_booking_overtime_isSet = false;
    m_allow_booking_overtime_isValid = false;

    m_allow_event_overlap_isSet = false;
    m_allow_event_overlap_isValid = false;

    m_availability_limit_isSet = false;
    m_availability_limit_isValid = false;

    m_availability_limit_enabled_isSet = false;
    m_availability_limit_enabled_isValid = false;

    m_buffer_time_duration_isSet = false;
    m_buffer_time_duration_isValid = false;

    m_calendar_type_isSet = false;
    m_calendar_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_default_meeting_length_isSet = false;
    m_default_meeting_length_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_enable_calendar_sync_isSet = false;
    m_enable_calendar_sync_isValid = false;

    m_enable_dynamic_location_isSet = false;
    m_enable_dynamic_location_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_primary_calendar_connection_failed_isSet = false;
    m_primary_calendar_connection_failed_isValid = false;

    m_primary_calendar_id_isSet = false;
    m_primary_calendar_id_isValid = false;

    m_primary_calendar_name_isSet = false;
    m_primary_calendar_name_isValid = false;

    m_reschedule_meetings_enabled_isSet = false;
    m_reschedule_meetings_enabled_isValid = false;

    m_schedule_buffer_enabled_isSet = false;
    m_schedule_buffer_enabled_isValid = false;

    m_schedule_delay_isSet = false;
    m_schedule_delay_isValid = false;

    m_share_event_detail_isSet = false;
    m_share_event_detail_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_times_available_isSet = false;
    m_times_available_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_details_isSet = false;
    m_user_details_isValid = false;

    m_user_slug_isSet = false;
    m_user_slug_isValid = false;
}

void OAIMeetingSetting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeetingSetting::fromJsonObject(QJsonObject json) {

    m_active_meeting_url_isValid = ::OpenAPI::fromJsonValue(m_active_meeting_url, json[QString("active_meeting_url")]);
    m_active_meeting_url_isSet = !json[QString("active_meeting_url")].isNull() && m_active_meeting_url_isValid;

    m_allow_booking_on_behalf_isValid = ::OpenAPI::fromJsonValue(m_allow_booking_on_behalf, json[QString("allow_booking_on_behalf")]);
    m_allow_booking_on_behalf_isSet = !json[QString("allow_booking_on_behalf")].isNull() && m_allow_booking_on_behalf_isValid;

    m_allow_booking_overtime_isValid = ::OpenAPI::fromJsonValue(m_allow_booking_overtime, json[QString("allow_booking_overtime")]);
    m_allow_booking_overtime_isSet = !json[QString("allow_booking_overtime")].isNull() && m_allow_booking_overtime_isValid;

    m_allow_event_overlap_isValid = ::OpenAPI::fromJsonValue(m_allow_event_overlap, json[QString("allow_event_overlap")]);
    m_allow_event_overlap_isSet = !json[QString("allow_event_overlap")].isNull() && m_allow_event_overlap_isValid;

    m_availability_limit_isValid = ::OpenAPI::fromJsonValue(m_availability_limit, json[QString("availability_limit")]);
    m_availability_limit_isSet = !json[QString("availability_limit")].isNull() && m_availability_limit_isValid;

    m_availability_limit_enabled_isValid = ::OpenAPI::fromJsonValue(m_availability_limit_enabled, json[QString("availability_limit_enabled")]);
    m_availability_limit_enabled_isSet = !json[QString("availability_limit_enabled")].isNull() && m_availability_limit_enabled_isValid;

    m_buffer_time_duration_isValid = ::OpenAPI::fromJsonValue(m_buffer_time_duration, json[QString("buffer_time_duration")]);
    m_buffer_time_duration_isSet = !json[QString("buffer_time_duration")].isNull() && m_buffer_time_duration_isValid;

    m_calendar_type_isValid = ::OpenAPI::fromJsonValue(m_calendar_type, json[QString("calendar_type")]);
    m_calendar_type_isSet = !json[QString("calendar_type")].isNull() && m_calendar_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_default_meeting_length_isValid = ::OpenAPI::fromJsonValue(m_default_meeting_length, json[QString("default_meeting_length")]);
    m_default_meeting_length_isSet = !json[QString("default_meeting_length")].isNull() && m_default_meeting_length_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_enable_calendar_sync_isValid = ::OpenAPI::fromJsonValue(m_enable_calendar_sync, json[QString("enable_calendar_sync")]);
    m_enable_calendar_sync_isSet = !json[QString("enable_calendar_sync")].isNull() && m_enable_calendar_sync_isValid;

    m_enable_dynamic_location_isValid = ::OpenAPI::fromJsonValue(m_enable_dynamic_location, json[QString("enable_dynamic_location")]);
    m_enable_dynamic_location_isSet = !json[QString("enable_dynamic_location")].isNull() && m_enable_dynamic_location_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_primary_calendar_connection_failed_isValid = ::OpenAPI::fromJsonValue(m_primary_calendar_connection_failed, json[QString("primary_calendar_connection_failed")]);
    m_primary_calendar_connection_failed_isSet = !json[QString("primary_calendar_connection_failed")].isNull() && m_primary_calendar_connection_failed_isValid;

    m_primary_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_primary_calendar_id, json[QString("primary_calendar_id")]);
    m_primary_calendar_id_isSet = !json[QString("primary_calendar_id")].isNull() && m_primary_calendar_id_isValid;

    m_primary_calendar_name_isValid = ::OpenAPI::fromJsonValue(m_primary_calendar_name, json[QString("primary_calendar_name")]);
    m_primary_calendar_name_isSet = !json[QString("primary_calendar_name")].isNull() && m_primary_calendar_name_isValid;

    m_reschedule_meetings_enabled_isValid = ::OpenAPI::fromJsonValue(m_reschedule_meetings_enabled, json[QString("reschedule_meetings_enabled")]);
    m_reschedule_meetings_enabled_isSet = !json[QString("reschedule_meetings_enabled")].isNull() && m_reschedule_meetings_enabled_isValid;

    m_schedule_buffer_enabled_isValid = ::OpenAPI::fromJsonValue(m_schedule_buffer_enabled, json[QString("schedule_buffer_enabled")]);
    m_schedule_buffer_enabled_isSet = !json[QString("schedule_buffer_enabled")].isNull() && m_schedule_buffer_enabled_isValid;

    m_schedule_delay_isValid = ::OpenAPI::fromJsonValue(m_schedule_delay, json[QString("schedule_delay")]);
    m_schedule_delay_isSet = !json[QString("schedule_delay")].isNull() && m_schedule_delay_isValid;

    m_share_event_detail_isValid = ::OpenAPI::fromJsonValue(m_share_event_detail, json[QString("share_event_detail")]);
    m_share_event_detail_isSet = !json[QString("share_event_detail")].isNull() && m_share_event_detail_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_times_available_isValid = ::OpenAPI::fromJsonValue(m_times_available, json[QString("times_available")]);
    m_times_available_isSet = !json[QString("times_available")].isNull() && m_times_available_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_details_isValid = ::OpenAPI::fromJsonValue(m_user_details, json[QString("user_details")]);
    m_user_details_isSet = !json[QString("user_details")].isNull() && m_user_details_isValid;

    m_user_slug_isValid = ::OpenAPI::fromJsonValue(m_user_slug, json[QString("user_slug")]);
    m_user_slug_isSet = !json[QString("user_slug")].isNull() && m_user_slug_isValid;
}

QString OAIMeetingSetting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeetingSetting::asJsonObject() const {
    QJsonObject obj;
    if (m_active_meeting_url.isSet()) {
        obj.insert(QString("active_meeting_url"), ::OpenAPI::toJsonValue(m_active_meeting_url));
    }
    if (m_allow_booking_on_behalf_isSet) {
        obj.insert(QString("allow_booking_on_behalf"), ::OpenAPI::toJsonValue(m_allow_booking_on_behalf));
    }
    if (m_allow_booking_overtime_isSet) {
        obj.insert(QString("allow_booking_overtime"), ::OpenAPI::toJsonValue(m_allow_booking_overtime));
    }
    if (m_allow_event_overlap_isSet) {
        obj.insert(QString("allow_event_overlap"), ::OpenAPI::toJsonValue(m_allow_event_overlap));
    }
    if (m_availability_limit_isSet) {
        obj.insert(QString("availability_limit"), ::OpenAPI::toJsonValue(m_availability_limit));
    }
    if (m_availability_limit_enabled_isSet) {
        obj.insert(QString("availability_limit_enabled"), ::OpenAPI::toJsonValue(m_availability_limit_enabled));
    }
    if (m_buffer_time_duration_isSet) {
        obj.insert(QString("buffer_time_duration"), ::OpenAPI::toJsonValue(m_buffer_time_duration));
    }
    if (m_calendar_type_isSet) {
        obj.insert(QString("calendar_type"), ::OpenAPI::toJsonValue(m_calendar_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_default_meeting_length_isSet) {
        obj.insert(QString("default_meeting_length"), ::OpenAPI::toJsonValue(m_default_meeting_length));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_enable_calendar_sync_isSet) {
        obj.insert(QString("enable_calendar_sync"), ::OpenAPI::toJsonValue(m_enable_calendar_sync));
    }
    if (m_enable_dynamic_location_isSet) {
        obj.insert(QString("enable_dynamic_location"), ::OpenAPI::toJsonValue(m_enable_dynamic_location));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_primary_calendar_connection_failed_isSet) {
        obj.insert(QString("primary_calendar_connection_failed"), ::OpenAPI::toJsonValue(m_primary_calendar_connection_failed));
    }
    if (m_primary_calendar_id_isSet) {
        obj.insert(QString("primary_calendar_id"), ::OpenAPI::toJsonValue(m_primary_calendar_id));
    }
    if (m_primary_calendar_name_isSet) {
        obj.insert(QString("primary_calendar_name"), ::OpenAPI::toJsonValue(m_primary_calendar_name));
    }
    if (m_reschedule_meetings_enabled_isSet) {
        obj.insert(QString("reschedule_meetings_enabled"), ::OpenAPI::toJsonValue(m_reschedule_meetings_enabled));
    }
    if (m_schedule_buffer_enabled_isSet) {
        obj.insert(QString("schedule_buffer_enabled"), ::OpenAPI::toJsonValue(m_schedule_buffer_enabled));
    }
    if (m_schedule_delay_isSet) {
        obj.insert(QString("schedule_delay"), ::OpenAPI::toJsonValue(m_schedule_delay));
    }
    if (m_share_event_detail_isSet) {
        obj.insert(QString("share_event_detail"), ::OpenAPI::toJsonValue(m_share_event_detail));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_times_available_isSet) {
        obj.insert(QString("times_available"), ::OpenAPI::toJsonValue(m_times_available));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_details_isSet) {
        obj.insert(QString("user_details"), ::OpenAPI::toJsonValue(m_user_details));
    }
    if (m_user_slug_isSet) {
        obj.insert(QString("user_slug"), ::OpenAPI::toJsonValue(m_user_slug));
    }
    return obj;
}

OAIMeetingUrl OAIMeetingSetting::getActiveMeetingUrl() const {
    return m_active_meeting_url;
}
void OAIMeetingSetting::setActiveMeetingUrl(const OAIMeetingUrl &active_meeting_url) {
    m_active_meeting_url = active_meeting_url;
    m_active_meeting_url_isSet = true;
}

bool OAIMeetingSetting::is_active_meeting_url_Set() const{
    return m_active_meeting_url_isSet;
}

bool OAIMeetingSetting::is_active_meeting_url_Valid() const{
    return m_active_meeting_url_isValid;
}

bool OAIMeetingSetting::isAllowBookingOnBehalf() const {
    return m_allow_booking_on_behalf;
}
void OAIMeetingSetting::setAllowBookingOnBehalf(const bool &allow_booking_on_behalf) {
    m_allow_booking_on_behalf = allow_booking_on_behalf;
    m_allow_booking_on_behalf_isSet = true;
}

bool OAIMeetingSetting::is_allow_booking_on_behalf_Set() const{
    return m_allow_booking_on_behalf_isSet;
}

bool OAIMeetingSetting::is_allow_booking_on_behalf_Valid() const{
    return m_allow_booking_on_behalf_isValid;
}

bool OAIMeetingSetting::isAllowBookingOvertime() const {
    return m_allow_booking_overtime;
}
void OAIMeetingSetting::setAllowBookingOvertime(const bool &allow_booking_overtime) {
    m_allow_booking_overtime = allow_booking_overtime;
    m_allow_booking_overtime_isSet = true;
}

bool OAIMeetingSetting::is_allow_booking_overtime_Set() const{
    return m_allow_booking_overtime_isSet;
}

bool OAIMeetingSetting::is_allow_booking_overtime_Valid() const{
    return m_allow_booking_overtime_isValid;
}

bool OAIMeetingSetting::isAllowEventOverlap() const {
    return m_allow_event_overlap;
}
void OAIMeetingSetting::setAllowEventOverlap(const bool &allow_event_overlap) {
    m_allow_event_overlap = allow_event_overlap;
    m_allow_event_overlap_isSet = true;
}

bool OAIMeetingSetting::is_allow_event_overlap_Set() const{
    return m_allow_event_overlap_isSet;
}

bool OAIMeetingSetting::is_allow_event_overlap_Valid() const{
    return m_allow_event_overlap_isValid;
}

qint32 OAIMeetingSetting::getAvailabilityLimit() const {
    return m_availability_limit;
}
void OAIMeetingSetting::setAvailabilityLimit(const qint32 &availability_limit) {
    m_availability_limit = availability_limit;
    m_availability_limit_isSet = true;
}

bool OAIMeetingSetting::is_availability_limit_Set() const{
    return m_availability_limit_isSet;
}

bool OAIMeetingSetting::is_availability_limit_Valid() const{
    return m_availability_limit_isValid;
}

bool OAIMeetingSetting::isAvailabilityLimitEnabled() const {
    return m_availability_limit_enabled;
}
void OAIMeetingSetting::setAvailabilityLimitEnabled(const bool &availability_limit_enabled) {
    m_availability_limit_enabled = availability_limit_enabled;
    m_availability_limit_enabled_isSet = true;
}

bool OAIMeetingSetting::is_availability_limit_enabled_Set() const{
    return m_availability_limit_enabled_isSet;
}

bool OAIMeetingSetting::is_availability_limit_enabled_Valid() const{
    return m_availability_limit_enabled_isValid;
}

qint32 OAIMeetingSetting::getBufferTimeDuration() const {
    return m_buffer_time_duration;
}
void OAIMeetingSetting::setBufferTimeDuration(const qint32 &buffer_time_duration) {
    m_buffer_time_duration = buffer_time_duration;
    m_buffer_time_duration_isSet = true;
}

bool OAIMeetingSetting::is_buffer_time_duration_Set() const{
    return m_buffer_time_duration_isSet;
}

bool OAIMeetingSetting::is_buffer_time_duration_Valid() const{
    return m_buffer_time_duration_isValid;
}

QString OAIMeetingSetting::getCalendarType() const {
    return m_calendar_type;
}
void OAIMeetingSetting::setCalendarType(const QString &calendar_type) {
    m_calendar_type = calendar_type;
    m_calendar_type_isSet = true;
}

bool OAIMeetingSetting::is_calendar_type_Set() const{
    return m_calendar_type_isSet;
}

bool OAIMeetingSetting::is_calendar_type_Valid() const{
    return m_calendar_type_isValid;
}

QDate OAIMeetingSetting::getCreatedAt() const {
    return m_created_at;
}
void OAIMeetingSetting::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMeetingSetting::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMeetingSetting::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIMeetingSetting::getDefaultMeetingLength() const {
    return m_default_meeting_length;
}
void OAIMeetingSetting::setDefaultMeetingLength(const qint32 &default_meeting_length) {
    m_default_meeting_length = default_meeting_length;
    m_default_meeting_length_isSet = true;
}

bool OAIMeetingSetting::is_default_meeting_length_Set() const{
    return m_default_meeting_length_isSet;
}

bool OAIMeetingSetting::is_default_meeting_length_Valid() const{
    return m_default_meeting_length_isValid;
}

QString OAIMeetingSetting::getDescription() const {
    return m_description;
}
void OAIMeetingSetting::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMeetingSetting::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMeetingSetting::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMeetingSetting::getEmailAddress() const {
    return m_email_address;
}
void OAIMeetingSetting::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIMeetingSetting::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIMeetingSetting::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAIMeetingSetting::isEnableCalendarSync() const {
    return m_enable_calendar_sync;
}
void OAIMeetingSetting::setEnableCalendarSync(const bool &enable_calendar_sync) {
    m_enable_calendar_sync = enable_calendar_sync;
    m_enable_calendar_sync_isSet = true;
}

bool OAIMeetingSetting::is_enable_calendar_sync_Set() const{
    return m_enable_calendar_sync_isSet;
}

bool OAIMeetingSetting::is_enable_calendar_sync_Valid() const{
    return m_enable_calendar_sync_isValid;
}

bool OAIMeetingSetting::isEnableDynamicLocation() const {
    return m_enable_dynamic_location;
}
void OAIMeetingSetting::setEnableDynamicLocation(const bool &enable_dynamic_location) {
    m_enable_dynamic_location = enable_dynamic_location;
    m_enable_dynamic_location_isSet = true;
}

bool OAIMeetingSetting::is_enable_dynamic_location_Set() const{
    return m_enable_dynamic_location_isSet;
}

bool OAIMeetingSetting::is_enable_dynamic_location_Valid() const{
    return m_enable_dynamic_location_isValid;
}

qint32 OAIMeetingSetting::getId() const {
    return m_id;
}
void OAIMeetingSetting::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMeetingSetting::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMeetingSetting::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMeetingSetting::getLocation() const {
    return m_location;
}
void OAIMeetingSetting::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMeetingSetting::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMeetingSetting::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIMeetingSetting::isPrimaryCalendarConnectionFailed() const {
    return m_primary_calendar_connection_failed;
}
void OAIMeetingSetting::setPrimaryCalendarConnectionFailed(const bool &primary_calendar_connection_failed) {
    m_primary_calendar_connection_failed = primary_calendar_connection_failed;
    m_primary_calendar_connection_failed_isSet = true;
}

bool OAIMeetingSetting::is_primary_calendar_connection_failed_Set() const{
    return m_primary_calendar_connection_failed_isSet;
}

bool OAIMeetingSetting::is_primary_calendar_connection_failed_Valid() const{
    return m_primary_calendar_connection_failed_isValid;
}

QString OAIMeetingSetting::getPrimaryCalendarId() const {
    return m_primary_calendar_id;
}
void OAIMeetingSetting::setPrimaryCalendarId(const QString &primary_calendar_id) {
    m_primary_calendar_id = primary_calendar_id;
    m_primary_calendar_id_isSet = true;
}

bool OAIMeetingSetting::is_primary_calendar_id_Set() const{
    return m_primary_calendar_id_isSet;
}

bool OAIMeetingSetting::is_primary_calendar_id_Valid() const{
    return m_primary_calendar_id_isValid;
}

QString OAIMeetingSetting::getPrimaryCalendarName() const {
    return m_primary_calendar_name;
}
void OAIMeetingSetting::setPrimaryCalendarName(const QString &primary_calendar_name) {
    m_primary_calendar_name = primary_calendar_name;
    m_primary_calendar_name_isSet = true;
}

bool OAIMeetingSetting::is_primary_calendar_name_Set() const{
    return m_primary_calendar_name_isSet;
}

bool OAIMeetingSetting::is_primary_calendar_name_Valid() const{
    return m_primary_calendar_name_isValid;
}

bool OAIMeetingSetting::isRescheduleMeetingsEnabled() const {
    return m_reschedule_meetings_enabled;
}
void OAIMeetingSetting::setRescheduleMeetingsEnabled(const bool &reschedule_meetings_enabled) {
    m_reschedule_meetings_enabled = reschedule_meetings_enabled;
    m_reschedule_meetings_enabled_isSet = true;
}

bool OAIMeetingSetting::is_reschedule_meetings_enabled_Set() const{
    return m_reschedule_meetings_enabled_isSet;
}

bool OAIMeetingSetting::is_reschedule_meetings_enabled_Valid() const{
    return m_reschedule_meetings_enabled_isValid;
}

bool OAIMeetingSetting::isScheduleBufferEnabled() const {
    return m_schedule_buffer_enabled;
}
void OAIMeetingSetting::setScheduleBufferEnabled(const bool &schedule_buffer_enabled) {
    m_schedule_buffer_enabled = schedule_buffer_enabled;
    m_schedule_buffer_enabled_isSet = true;
}

bool OAIMeetingSetting::is_schedule_buffer_enabled_Set() const{
    return m_schedule_buffer_enabled_isSet;
}

bool OAIMeetingSetting::is_schedule_buffer_enabled_Valid() const{
    return m_schedule_buffer_enabled_isValid;
}

qint32 OAIMeetingSetting::getScheduleDelay() const {
    return m_schedule_delay;
}
void OAIMeetingSetting::setScheduleDelay(const qint32 &schedule_delay) {
    m_schedule_delay = schedule_delay;
    m_schedule_delay_isSet = true;
}

bool OAIMeetingSetting::is_schedule_delay_Set() const{
    return m_schedule_delay_isSet;
}

bool OAIMeetingSetting::is_schedule_delay_Valid() const{
    return m_schedule_delay_isValid;
}

bool OAIMeetingSetting::isShareEventDetail() const {
    return m_share_event_detail;
}
void OAIMeetingSetting::setShareEventDetail(const bool &share_event_detail) {
    m_share_event_detail = share_event_detail;
    m_share_event_detail_isSet = true;
}

bool OAIMeetingSetting::is_share_event_detail_Set() const{
    return m_share_event_detail_isSet;
}

bool OAIMeetingSetting::is_share_event_detail_Valid() const{
    return m_share_event_detail_isValid;
}

QString OAIMeetingSetting::getTimeZone() const {
    return m_time_zone;
}
void OAIMeetingSetting::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIMeetingSetting::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIMeetingSetting::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

OAIObject OAIMeetingSetting::getTimesAvailable() const {
    return m_times_available;
}
void OAIMeetingSetting::setTimesAvailable(const OAIObject &times_available) {
    m_times_available = times_available;
    m_times_available_isSet = true;
}

bool OAIMeetingSetting::is_times_available_Set() const{
    return m_times_available_isSet;
}

bool OAIMeetingSetting::is_times_available_Valid() const{
    return m_times_available_isValid;
}

QString OAIMeetingSetting::getTitle() const {
    return m_title;
}
void OAIMeetingSetting::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMeetingSetting::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMeetingSetting::is_title_Valid() const{
    return m_title_isValid;
}

QDate OAIMeetingSetting::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMeetingSetting::setUpdatedAt(const QDate &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMeetingSetting::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMeetingSetting::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAIMeetingSetting::getUser() const {
    return m_user;
}
void OAIMeetingSetting::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMeetingSetting::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMeetingSetting::is_user_Valid() const{
    return m_user_isValid;
}

OAIObject OAIMeetingSetting::getUserDetails() const {
    return m_user_details;
}
void OAIMeetingSetting::setUserDetails(const OAIObject &user_details) {
    m_user_details = user_details;
    m_user_details_isSet = true;
}

bool OAIMeetingSetting::is_user_details_Set() const{
    return m_user_details_isSet;
}

bool OAIMeetingSetting::is_user_details_Valid() const{
    return m_user_details_isValid;
}

QString OAIMeetingSetting::getUserSlug() const {
    return m_user_slug;
}
void OAIMeetingSetting::setUserSlug(const QString &user_slug) {
    m_user_slug = user_slug;
    m_user_slug_isSet = true;
}

bool OAIMeetingSetting::is_user_slug_Set() const{
    return m_user_slug_isSet;
}

bool OAIMeetingSetting::is_user_slug_Valid() const{
    return m_user_slug_isValid;
}

bool OAIMeetingSetting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_meeting_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_booking_on_behalf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_booking_overtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_event_overlap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_limit_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffer_time_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_meeting_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_calendar_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dynamic_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_calendar_connection_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_calendar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reschedule_meetings_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_buffer_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_event_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeetingSetting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
