/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveFeedItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveFeedItem::OAILiveFeedItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveFeedItem::OAILiveFeedItem() {
    this->initializeModel();
}

OAILiveFeedItem::~OAILiveFeedItem() {}

void OAILiveFeedItem::initializeModel() {

    m_alert_metadata_isSet = false;
    m_alert_metadata_isValid = false;

    m_event_occurred_at_isSet = false;
    m_event_occurred_at_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_rollup_key_isSet = false;
    m_rollup_key_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAILiveFeedItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveFeedItem::fromJsonObject(QJsonObject json) {

    m_alert_metadata_isValid = ::OpenAPI::fromJsonValue(m_alert_metadata, json[QString("alert_metadata")]);
    m_alert_metadata_isSet = !json[QString("alert_metadata")].isNull() && m_alert_metadata_isValid;

    m_event_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_event_occurred_at, json[QString("event_occurred_at")]);
    m_event_occurred_at_isSet = !json[QString("event_occurred_at")].isNull() && m_event_occurred_at_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_rollup_key_isValid = ::OpenAPI::fromJsonValue(m_rollup_key, json[QString("rollup_key")]);
    m_rollup_key_isSet = !json[QString("rollup_key")].isNull() && m_rollup_key_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("user_guid")]);
    m_user_guid_isSet = !json[QString("user_guid")].isNull() && m_user_guid_isValid;
}

QString OAILiveFeedItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveFeedItem::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_metadata_isSet) {
        obj.insert(QString("alert_metadata"), ::OpenAPI::toJsonValue(m_alert_metadata));
    }
    if (m_event_occurred_at_isSet) {
        obj.insert(QString("event_occurred_at"), ::OpenAPI::toJsonValue(m_event_occurred_at));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_rollup_key_isSet) {
        obj.insert(QString("rollup_key"), ::OpenAPI::toJsonValue(m_rollup_key));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("user_guid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

OAIObject OAILiveFeedItem::getAlertMetadata() const {
    return m_alert_metadata;
}
void OAILiveFeedItem::setAlertMetadata(const OAIObject &alert_metadata) {
    m_alert_metadata = alert_metadata;
    m_alert_metadata_isSet = true;
}

bool OAILiveFeedItem::is_alert_metadata_Set() const{
    return m_alert_metadata_isSet;
}

bool OAILiveFeedItem::is_alert_metadata_Valid() const{
    return m_alert_metadata_isValid;
}

QDateTime OAILiveFeedItem::getEventOccurredAt() const {
    return m_event_occurred_at;
}
void OAILiveFeedItem::setEventOccurredAt(const QDateTime &event_occurred_at) {
    m_event_occurred_at = event_occurred_at;
    m_event_occurred_at_isSet = true;
}

bool OAILiveFeedItem::is_event_occurred_at_Set() const{
    return m_event_occurred_at_isSet;
}

bool OAILiveFeedItem::is_event_occurred_at_Valid() const{
    return m_event_occurred_at_isValid;
}

QString OAILiveFeedItem::getEventType() const {
    return m_event_type;
}
void OAILiveFeedItem::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAILiveFeedItem::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAILiveFeedItem::is_event_type_Valid() const{
    return m_event_type_isValid;
}

qint32 OAILiveFeedItem::getId() const {
    return m_id;
}
void OAILiveFeedItem::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILiveFeedItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAILiveFeedItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILiveFeedItem::getMessage() const {
    return m_message;
}
void OAILiveFeedItem::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAILiveFeedItem::is_message_Set() const{
    return m_message_isSet;
}

bool OAILiveFeedItem::is_message_Valid() const{
    return m_message_isValid;
}

OAIObject OAILiveFeedItem::getMetadata() const {
    return m_metadata;
}
void OAILiveFeedItem::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILiveFeedItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILiveFeedItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILiveFeedItem::getPath() const {
    return m_path;
}
void OAILiveFeedItem::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAILiveFeedItem::is_path_Set() const{
    return m_path_isSet;
}

bool OAILiveFeedItem::is_path_Valid() const{
    return m_path_isValid;
}

QString OAILiveFeedItem::getRollupKey() const {
    return m_rollup_key;
}
void OAILiveFeedItem::setRollupKey(const QString &rollup_key) {
    m_rollup_key = rollup_key;
    m_rollup_key_isSet = true;
}

bool OAILiveFeedItem::is_rollup_key_Set() const{
    return m_rollup_key_isSet;
}

bool OAILiveFeedItem::is_rollup_key_Valid() const{
    return m_rollup_key_isValid;
}

QString OAILiveFeedItem::getTitle() const {
    return m_title;
}
void OAILiveFeedItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAILiveFeedItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAILiveFeedItem::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILiveFeedItem::getUserGuid() const {
    return m_user_guid;
}
void OAILiveFeedItem::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAILiveFeedItem::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAILiveFeedItem::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAILiveFeedItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollup_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveFeedItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
