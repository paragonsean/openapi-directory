/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m__private_fields_isSet = false;
    m__private_fields_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_bcc_email_address_isSet = false;
    m_bcc_email_address_isValid = false;

    m_click_to_call_enabled_isSet = false;
    m_click_to_call_enabled_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crm_connected_isSet = false;
    m_crm_connected_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_client_configured_isSet = false;
    m_email_client_configured_isValid = false;

    m_email_client_email_address_isSet = false;
    m_email_client_email_address_isValid = false;

    m_email_signature_isSet = false;
    m_email_signature_isValid = false;

    m_email_signature_click_tracking_disabled_isSet = false;
    m_email_signature_click_tracking_disabled_isValid = false;

    m_email_signature_type_isSet = false;
    m_email_signature_type_isValid = false;

    m_external_feature_flags_isSet = false;
    m_external_feature_flags_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_from_address_isSet = false;
    m_from_address_isValid = false;

    m_full_email_address_isSet = false;
    m_full_email_address_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_guid_isSet = false;
    m_guid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_role_isSet = false;
    m_job_role_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_local_dial_enabled_isSet = false;
    m_local_dial_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_client_isSet = false;
    m_phone_client_isValid = false;

    m_phone_number_assignment_isSet = false;
    m_phone_number_assignment_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_sending_email_address_isSet = false;
    m_sending_email_address_isValid = false;

    m_slack_username_isSet = false;
    m_slack_username_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_admin_isSet = false;
    m_team_admin_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_twitter_handle_isSet = false;
    m_twitter_handle_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_work_country_isSet = false;
    m_work_country_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m__private_fields_isValid = ::OpenAPI::fromJsonValue(m__private_fields, json[QString("_private_fields")]);
    m__private_fields_isSet = !json[QString("_private_fields")].isNull() && m__private_fields_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_bcc_email_address_isValid = ::OpenAPI::fromJsonValue(m_bcc_email_address, json[QString("bcc_email_address")]);
    m_bcc_email_address_isSet = !json[QString("bcc_email_address")].isNull() && m_bcc_email_address_isValid;

    m_click_to_call_enabled_isValid = ::OpenAPI::fromJsonValue(m_click_to_call_enabled, json[QString("click_to_call_enabled")]);
    m_click_to_call_enabled_isSet = !json[QString("click_to_call_enabled")].isNull() && m_click_to_call_enabled_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crm_connected_isValid = ::OpenAPI::fromJsonValue(m_crm_connected, json[QString("crm_connected")]);
    m_crm_connected_isSet = !json[QString("crm_connected")].isNull() && m_crm_connected_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_client_configured_isValid = ::OpenAPI::fromJsonValue(m_email_client_configured, json[QString("email_client_configured")]);
    m_email_client_configured_isSet = !json[QString("email_client_configured")].isNull() && m_email_client_configured_isValid;

    m_email_client_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_client_email_address, json[QString("email_client_email_address")]);
    m_email_client_email_address_isSet = !json[QString("email_client_email_address")].isNull() && m_email_client_email_address_isValid;

    m_email_signature_isValid = ::OpenAPI::fromJsonValue(m_email_signature, json[QString("email_signature")]);
    m_email_signature_isSet = !json[QString("email_signature")].isNull() && m_email_signature_isValid;

    m_email_signature_click_tracking_disabled_isValid = ::OpenAPI::fromJsonValue(m_email_signature_click_tracking_disabled, json[QString("email_signature_click_tracking_disabled")]);
    m_email_signature_click_tracking_disabled_isSet = !json[QString("email_signature_click_tracking_disabled")].isNull() && m_email_signature_click_tracking_disabled_isValid;

    m_email_signature_type_isValid = ::OpenAPI::fromJsonValue(m_email_signature_type, json[QString("email_signature_type")]);
    m_email_signature_type_isSet = !json[QString("email_signature_type")].isNull() && m_email_signature_type_isValid;

    m_external_feature_flags_isValid = ::OpenAPI::fromJsonValue(m_external_feature_flags, json[QString("external_feature_flags")]);
    m_external_feature_flags_isSet = !json[QString("external_feature_flags")].isNull() && m_external_feature_flags_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_from_address_isValid = ::OpenAPI::fromJsonValue(m_from_address, json[QString("from_address")]);
    m_from_address_isSet = !json[QString("from_address")].isNull() && m_from_address_isValid;

    m_full_email_address_isValid = ::OpenAPI::fromJsonValue(m_full_email_address, json[QString("full_email_address")]);
    m_full_email_address_isSet = !json[QString("full_email_address")].isNull() && m_full_email_address_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_guid_isValid = ::OpenAPI::fromJsonValue(m_guid, json[QString("guid")]);
    m_guid_isSet = !json[QString("guid")].isNull() && m_guid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_role_isValid = ::OpenAPI::fromJsonValue(m_job_role, json[QString("job_role")]);
    m_job_role_isSet = !json[QString("job_role")].isNull() && m_job_role_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_local_dial_enabled_isValid = ::OpenAPI::fromJsonValue(m_local_dial_enabled, json[QString("local_dial_enabled")]);
    m_local_dial_enabled_isSet = !json[QString("local_dial_enabled")].isNull() && m_local_dial_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_client_isValid = ::OpenAPI::fromJsonValue(m_phone_client, json[QString("phone_client")]);
    m_phone_client_isSet = !json[QString("phone_client")].isNull() && m_phone_client_isValid;

    m_phone_number_assignment_isValid = ::OpenAPI::fromJsonValue(m_phone_number_assignment, json[QString("phone_number_assignment")]);
    m_phone_number_assignment_isSet = !json[QString("phone_number_assignment")].isNull() && m_phone_number_assignment_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_sending_email_address_isValid = ::OpenAPI::fromJsonValue(m_sending_email_address, json[QString("sending_email_address")]);
    m_sending_email_address_isSet = !json[QString("sending_email_address")].isNull() && m_sending_email_address_isValid;

    m_slack_username_isValid = ::OpenAPI::fromJsonValue(m_slack_username, json[QString("slack_username")]);
    m_slack_username_isSet = !json[QString("slack_username")].isNull() && m_slack_username_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_admin_isValid = ::OpenAPI::fromJsonValue(m_team_admin, json[QString("team_admin")]);
    m_team_admin_isSet = !json[QString("team_admin")].isNull() && m_team_admin_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_twitter_handle_isValid = ::OpenAPI::fromJsonValue(m_twitter_handle, json[QString("twitter_handle")]);
    m_twitter_handle_isSet = !json[QString("twitter_handle")].isNull() && m_twitter_handle_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_work_country_isValid = ::OpenAPI::fromJsonValue(m_work_country, json[QString("work_country")]);
    m_work_country_isSet = !json[QString("work_country")].isNull() && m_work_country_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m__private_fields_isSet) {
        obj.insert(QString("_private_fields"), ::OpenAPI::toJsonValue(m__private_fields));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_bcc_email_address_isSet) {
        obj.insert(QString("bcc_email_address"), ::OpenAPI::toJsonValue(m_bcc_email_address));
    }
    if (m_click_to_call_enabled_isSet) {
        obj.insert(QString("click_to_call_enabled"), ::OpenAPI::toJsonValue(m_click_to_call_enabled));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crm_connected_isSet) {
        obj.insert(QString("crm_connected"), ::OpenAPI::toJsonValue(m_crm_connected));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_client_configured_isSet) {
        obj.insert(QString("email_client_configured"), ::OpenAPI::toJsonValue(m_email_client_configured));
    }
    if (m_email_client_email_address_isSet) {
        obj.insert(QString("email_client_email_address"), ::OpenAPI::toJsonValue(m_email_client_email_address));
    }
    if (m_email_signature_isSet) {
        obj.insert(QString("email_signature"), ::OpenAPI::toJsonValue(m_email_signature));
    }
    if (m_email_signature_click_tracking_disabled_isSet) {
        obj.insert(QString("email_signature_click_tracking_disabled"), ::OpenAPI::toJsonValue(m_email_signature_click_tracking_disabled));
    }
    if (m_email_signature_type_isSet) {
        obj.insert(QString("email_signature_type"), ::OpenAPI::toJsonValue(m_email_signature_type));
    }
    if (m_external_feature_flags_isSet) {
        obj.insert(QString("external_feature_flags"), ::OpenAPI::toJsonValue(m_external_feature_flags));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_from_address_isSet) {
        obj.insert(QString("from_address"), ::OpenAPI::toJsonValue(m_from_address));
    }
    if (m_full_email_address_isSet) {
        obj.insert(QString("full_email_address"), ::OpenAPI::toJsonValue(m_full_email_address));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_guid_isSet) {
        obj.insert(QString("guid"), ::OpenAPI::toJsonValue(m_guid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_role_isSet) {
        obj.insert(QString("job_role"), ::OpenAPI::toJsonValue(m_job_role));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_local_dial_enabled_isSet) {
        obj.insert(QString("local_dial_enabled"), ::OpenAPI::toJsonValue(m_local_dial_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_client.isSet()) {
        obj.insert(QString("phone_client"), ::OpenAPI::toJsonValue(m_phone_client));
    }
    if (m_phone_number_assignment.isSet()) {
        obj.insert(QString("phone_number_assignment"), ::OpenAPI::toJsonValue(m_phone_number_assignment));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_sending_email_address_isSet) {
        obj.insert(QString("sending_email_address"), ::OpenAPI::toJsonValue(m_sending_email_address));
    }
    if (m_slack_username_isSet) {
        obj.insert(QString("slack_username"), ::OpenAPI::toJsonValue(m_slack_username));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_admin_isSet) {
        obj.insert(QString("team_admin"), ::OpenAPI::toJsonValue(m_team_admin));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_twitter_handle_isSet) {
        obj.insert(QString("twitter_handle"), ::OpenAPI::toJsonValue(m_twitter_handle));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_work_country_isSet) {
        obj.insert(QString("work_country"), ::OpenAPI::toJsonValue(m_work_country));
    }
    return obj;
}

OAIObject OAIUser::getPrivateFields() const {
    return m__private_fields;
}
void OAIUser::setPrivateFields(const OAIObject &_private_fields) {
    m__private_fields = _private_fields;
    m__private_fields_isSet = true;
}

bool OAIUser::is__private_fields_Set() const{
    return m__private_fields_isSet;
}

bool OAIUser::is__private_fields_Valid() const{
    return m__private_fields_isValid;
}

bool OAIUser::isActive() const {
    return m_active;
}
void OAIUser::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUser::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUser::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIUser::getBccEmailAddress() const {
    return m_bcc_email_address;
}
void OAIUser::setBccEmailAddress(const QString &bcc_email_address) {
    m_bcc_email_address = bcc_email_address;
    m_bcc_email_address_isSet = true;
}

bool OAIUser::is_bcc_email_address_Set() const{
    return m_bcc_email_address_isSet;
}

bool OAIUser::is_bcc_email_address_Valid() const{
    return m_bcc_email_address_isValid;
}

bool OAIUser::isClickToCallEnabled() const {
    return m_click_to_call_enabled;
}
void OAIUser::setClickToCallEnabled(const bool &click_to_call_enabled) {
    m_click_to_call_enabled = click_to_call_enabled;
    m_click_to_call_enabled_isSet = true;
}

bool OAIUser::is_click_to_call_enabled_Set() const{
    return m_click_to_call_enabled_isSet;
}

bool OAIUser::is_click_to_call_enabled_Valid() const{
    return m_click_to_call_enabled_isValid;
}

QDateTime OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIUser::isCrmConnected() const {
    return m_crm_connected;
}
void OAIUser::setCrmConnected(const bool &crm_connected) {
    m_crm_connected = crm_connected;
    m_crm_connected_isSet = true;
}

bool OAIUser::is_crm_connected_Set() const{
    return m_crm_connected_isSet;
}

bool OAIUser::is_crm_connected_Valid() const{
    return m_crm_connected_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUser::isEmailClientConfigured() const {
    return m_email_client_configured;
}
void OAIUser::setEmailClientConfigured(const bool &email_client_configured) {
    m_email_client_configured = email_client_configured;
    m_email_client_configured_isSet = true;
}

bool OAIUser::is_email_client_configured_Set() const{
    return m_email_client_configured_isSet;
}

bool OAIUser::is_email_client_configured_Valid() const{
    return m_email_client_configured_isValid;
}

QString OAIUser::getEmailClientEmailAddress() const {
    return m_email_client_email_address;
}
void OAIUser::setEmailClientEmailAddress(const QString &email_client_email_address) {
    m_email_client_email_address = email_client_email_address;
    m_email_client_email_address_isSet = true;
}

bool OAIUser::is_email_client_email_address_Set() const{
    return m_email_client_email_address_isSet;
}

bool OAIUser::is_email_client_email_address_Valid() const{
    return m_email_client_email_address_isValid;
}

QString OAIUser::getEmailSignature() const {
    return m_email_signature;
}
void OAIUser::setEmailSignature(const QString &email_signature) {
    m_email_signature = email_signature;
    m_email_signature_isSet = true;
}

bool OAIUser::is_email_signature_Set() const{
    return m_email_signature_isSet;
}

bool OAIUser::is_email_signature_Valid() const{
    return m_email_signature_isValid;
}

bool OAIUser::isEmailSignatureClickTrackingDisabled() const {
    return m_email_signature_click_tracking_disabled;
}
void OAIUser::setEmailSignatureClickTrackingDisabled(const bool &email_signature_click_tracking_disabled) {
    m_email_signature_click_tracking_disabled = email_signature_click_tracking_disabled;
    m_email_signature_click_tracking_disabled_isSet = true;
}

bool OAIUser::is_email_signature_click_tracking_disabled_Set() const{
    return m_email_signature_click_tracking_disabled_isSet;
}

bool OAIUser::is_email_signature_click_tracking_disabled_Valid() const{
    return m_email_signature_click_tracking_disabled_isValid;
}

QString OAIUser::getEmailSignatureType() const {
    return m_email_signature_type;
}
void OAIUser::setEmailSignatureType(const QString &email_signature_type) {
    m_email_signature_type = email_signature_type;
    m_email_signature_type_isSet = true;
}

bool OAIUser::is_email_signature_type_Set() const{
    return m_email_signature_type_isSet;
}

bool OAIUser::is_email_signature_type_Valid() const{
    return m_email_signature_type_isValid;
}

OAIObject OAIUser::getExternalFeatureFlags() const {
    return m_external_feature_flags;
}
void OAIUser::setExternalFeatureFlags(const OAIObject &external_feature_flags) {
    m_external_feature_flags = external_feature_flags;
    m_external_feature_flags_isSet = true;
}

bool OAIUser::is_external_feature_flags_Set() const{
    return m_external_feature_flags_isSet;
}

bool OAIUser::is_external_feature_flags_Valid() const{
    return m_external_feature_flags_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser::getFromAddress() const {
    return m_from_address;
}
void OAIUser::setFromAddress(const QString &from_address) {
    m_from_address = from_address;
    m_from_address_isSet = true;
}

bool OAIUser::is_from_address_Set() const{
    return m_from_address_isSet;
}

bool OAIUser::is_from_address_Valid() const{
    return m_from_address_isValid;
}

QString OAIUser::getFullEmailAddress() const {
    return m_full_email_address;
}
void OAIUser::setFullEmailAddress(const QString &full_email_address) {
    m_full_email_address = full_email_address;
    m_full_email_address_isSet = true;
}

bool OAIUser::is_full_email_address_Set() const{
    return m_full_email_address_isSet;
}

bool OAIUser::is_full_email_address_Valid() const{
    return m_full_email_address_isValid;
}

OAIEmbeddedResource OAIUser::getGroup() const {
    return m_group;
}
void OAIUser::setGroup(const OAIEmbeddedResource &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIUser::is_group_Set() const{
    return m_group_isSet;
}

bool OAIUser::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIUser::getGuid() const {
    return m_guid;
}
void OAIUser::setGuid(const QString &guid) {
    m_guid = guid;
    m_guid_isSet = true;
}

bool OAIUser::is_guid_Set() const{
    return m_guid_isSet;
}

bool OAIUser::is_guid_Valid() const{
    return m_guid_isValid;
}

qint32 OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getJobRole() const {
    return m_job_role;
}
void OAIUser::setJobRole(const QString &job_role) {
    m_job_role = job_role;
    m_job_role_isSet = true;
}

bool OAIUser::is_job_role_Set() const{
    return m_job_role_isSet;
}

bool OAIUser::is_job_role_Valid() const{
    return m_job_role_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIUser::isLocalDialEnabled() const {
    return m_local_dial_enabled;
}
void OAIUser::setLocalDialEnabled(const bool &local_dial_enabled) {
    m_local_dial_enabled = local_dial_enabled;
    m_local_dial_enabled_isSet = true;
}

bool OAIUser::is_local_dial_enabled_Set() const{
    return m_local_dial_enabled_isSet;
}

bool OAIUser::is_local_dial_enabled_Valid() const{
    return m_local_dial_enabled_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

OAIEmbeddedResource OAIUser::getPhoneClient() const {
    return m_phone_client;
}
void OAIUser::setPhoneClient(const OAIEmbeddedResource &phone_client) {
    m_phone_client = phone_client;
    m_phone_client_isSet = true;
}

bool OAIUser::is_phone_client_Set() const{
    return m_phone_client_isSet;
}

bool OAIUser::is_phone_client_Valid() const{
    return m_phone_client_isValid;
}

OAIEmbeddedResource OAIUser::getPhoneNumberAssignment() const {
    return m_phone_number_assignment;
}
void OAIUser::setPhoneNumberAssignment(const OAIEmbeddedResource &phone_number_assignment) {
    m_phone_number_assignment = phone_number_assignment;
    m_phone_number_assignment_isSet = true;
}

bool OAIUser::is_phone_number_assignment_Set() const{
    return m_phone_number_assignment_isSet;
}

bool OAIUser::is_phone_number_assignment_Valid() const{
    return m_phone_number_assignment_isValid;
}

OAIEmbeddedResource OAIUser::getRole() const {
    return m_role;
}
void OAIUser::setRole(const OAIEmbeddedResource &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUser::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIUser::getSendingEmailAddress() const {
    return m_sending_email_address;
}
void OAIUser::setSendingEmailAddress(const QString &sending_email_address) {
    m_sending_email_address = sending_email_address;
    m_sending_email_address_isSet = true;
}

bool OAIUser::is_sending_email_address_Set() const{
    return m_sending_email_address_isSet;
}

bool OAIUser::is_sending_email_address_Valid() const{
    return m_sending_email_address_isValid;
}

QString OAIUser::getSlackUsername() const {
    return m_slack_username;
}
void OAIUser::setSlackUsername(const QString &slack_username) {
    m_slack_username = slack_username;
    m_slack_username_isSet = true;
}

bool OAIUser::is_slack_username_Set() const{
    return m_slack_username_isSet;
}

bool OAIUser::is_slack_username_Valid() const{
    return m_slack_username_isValid;
}

OAIEmbeddedResource OAIUser::getTeam() const {
    return m_team;
}
void OAIUser::setTeam(const OAIEmbeddedResource &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIUser::is_team_Set() const{
    return m_team_isSet;
}

bool OAIUser::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIUser::isTeamAdmin() const {
    return m_team_admin;
}
void OAIUser::setTeamAdmin(const bool &team_admin) {
    m_team_admin = team_admin;
    m_team_admin_isSet = true;
}

bool OAIUser::is_team_admin_Set() const{
    return m_team_admin_isSet;
}

bool OAIUser::is_team_admin_Valid() const{
    return m_team_admin_isValid;
}

QString OAIUser::getTimeZone() const {
    return m_time_zone;
}
void OAIUser::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUser::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUser::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIUser::getTwitterHandle() const {
    return m_twitter_handle;
}
void OAIUser::setTwitterHandle(const QString &twitter_handle) {
    m_twitter_handle = twitter_handle;
    m_twitter_handle_isSet = true;
}

bool OAIUser::is_twitter_handle_Set() const{
    return m_twitter_handle_isSet;
}

bool OAIUser::is_twitter_handle_Valid() const{
    return m_twitter_handle_isValid;
}

QDateTime OAIUser::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUser::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUser::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUser::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIUser::getWorkCountry() const {
    return m_work_country;
}
void OAIUser::setWorkCountry(const QString &work_country) {
    m_work_country = work_country;
    m_work_country_isSet = true;
}

bool OAIUser::is_work_country_Set() const{
    return m_work_country_isSet;
}

bool OAIUser::is_work_country_Valid() const{
    return m_work_country_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__private_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcc_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_to_call_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_connected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_client_configured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_client_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_signature_click_tracking_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_signature_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_feature_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_dial_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slack_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_country_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
