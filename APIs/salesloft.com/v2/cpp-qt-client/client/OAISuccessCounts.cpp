/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccessCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccessCounts::OAISuccessCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccessCounts::OAISuccessCounts() {
    this->initializeModel();
}

OAISuccessCounts::~OAISuccessCounts() {}

void OAISuccessCounts::initializeModel() {

    m_total_calls_isSet = false;
    m_total_calls_isValid = false;

    m_total_emails_isSet = false;
    m_total_emails_isValid = false;

    m_total_other_touches_isSet = false;
    m_total_other_touches_isValid = false;
}

void OAISuccessCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccessCounts::fromJsonObject(QJsonObject json) {

    m_total_calls_isValid = ::OpenAPI::fromJsonValue(m_total_calls, json[QString("total_calls")]);
    m_total_calls_isSet = !json[QString("total_calls")].isNull() && m_total_calls_isValid;

    m_total_emails_isValid = ::OpenAPI::fromJsonValue(m_total_emails, json[QString("total_emails")]);
    m_total_emails_isSet = !json[QString("total_emails")].isNull() && m_total_emails_isValid;

    m_total_other_touches_isValid = ::OpenAPI::fromJsonValue(m_total_other_touches, json[QString("total_other_touches")]);
    m_total_other_touches_isSet = !json[QString("total_other_touches")].isNull() && m_total_other_touches_isValid;
}

QString OAISuccessCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccessCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_total_calls_isSet) {
        obj.insert(QString("total_calls"), ::OpenAPI::toJsonValue(m_total_calls));
    }
    if (m_total_emails_isSet) {
        obj.insert(QString("total_emails"), ::OpenAPI::toJsonValue(m_total_emails));
    }
    if (m_total_other_touches_isSet) {
        obj.insert(QString("total_other_touches"), ::OpenAPI::toJsonValue(m_total_other_touches));
    }
    return obj;
}

qint32 OAISuccessCounts::getTotalCalls() const {
    return m_total_calls;
}
void OAISuccessCounts::setTotalCalls(const qint32 &total_calls) {
    m_total_calls = total_calls;
    m_total_calls_isSet = true;
}

bool OAISuccessCounts::is_total_calls_Set() const{
    return m_total_calls_isSet;
}

bool OAISuccessCounts::is_total_calls_Valid() const{
    return m_total_calls_isValid;
}

qint32 OAISuccessCounts::getTotalEmails() const {
    return m_total_emails;
}
void OAISuccessCounts::setTotalEmails(const qint32 &total_emails) {
    m_total_emails = total_emails;
    m_total_emails_isSet = true;
}

bool OAISuccessCounts::is_total_emails_Set() const{
    return m_total_emails_isSet;
}

bool OAISuccessCounts::is_total_emails_Valid() const{
    return m_total_emails_isValid;
}

qint32 OAISuccessCounts::getTotalOtherTouches() const {
    return m_total_other_touches;
}
void OAISuccessCounts::setTotalOtherTouches(const qint32 &total_other_touches) {
    m_total_other_touches = total_other_touches;
    m_total_other_touches_isSet = true;
}

bool OAISuccessCounts::is_total_other_touches_Set() const{
    return m_total_other_touches_isSet;
}

bool OAISuccessCounts::is_total_other_touches_Valid() const{
    return m_total_other_touches_isValid;
}

bool OAISuccessCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_other_touches_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccessCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
