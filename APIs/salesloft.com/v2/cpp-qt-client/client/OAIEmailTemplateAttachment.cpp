/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailTemplateAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailTemplateAttachment::OAIEmailTemplateAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailTemplateAttachment::OAIEmailTemplateAttachment() {
    this->initializeModel();
}

OAIEmailTemplateAttachment::~OAIEmailTemplateAttachment() {}

void OAIEmailTemplateAttachment::initializeModel() {

    m_attachment_content_type_isSet = false;
    m_attachment_content_type_isValid = false;

    m_attachment_file_size_isSet = false;
    m_attachment_file_size_isValid = false;

    m_attachment_fingerprint_isSet = false;
    m_attachment_fingerprint_isValid = false;

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_email_template_isSet = false;
    m_email_template_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scanned_isSet = false;
    m_scanned_isValid = false;
}

void OAIEmailTemplateAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailTemplateAttachment::fromJsonObject(QJsonObject json) {

    m_attachment_content_type_isValid = ::OpenAPI::fromJsonValue(m_attachment_content_type, json[QString("attachment_content_type")]);
    m_attachment_content_type_isSet = !json[QString("attachment_content_type")].isNull() && m_attachment_content_type_isValid;

    m_attachment_file_size_isValid = ::OpenAPI::fromJsonValue(m_attachment_file_size, json[QString("attachment_file_size")]);
    m_attachment_file_size_isSet = !json[QString("attachment_file_size")].isNull() && m_attachment_file_size_isValid;

    m_attachment_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_attachment_fingerprint, json[QString("attachment_fingerprint")]);
    m_attachment_fingerprint_isSet = !json[QString("attachment_fingerprint")].isNull() && m_attachment_fingerprint_isValid;

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("attachment_id")]);
    m_attachment_id_isSet = !json[QString("attachment_id")].isNull() && m_attachment_id_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_email_template_isValid = ::OpenAPI::fromJsonValue(m_email_template, json[QString("email_template")]);
    m_email_template_isSet = !json[QString("email_template")].isNull() && m_email_template_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scanned_isValid = ::OpenAPI::fromJsonValue(m_scanned, json[QString("scanned")]);
    m_scanned_isSet = !json[QString("scanned")].isNull() && m_scanned_isValid;
}

QString OAIEmailTemplateAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailTemplateAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_content_type_isSet) {
        obj.insert(QString("attachment_content_type"), ::OpenAPI::toJsonValue(m_attachment_content_type));
    }
    if (m_attachment_file_size_isSet) {
        obj.insert(QString("attachment_file_size"), ::OpenAPI::toJsonValue(m_attachment_file_size));
    }
    if (m_attachment_fingerprint_isSet) {
        obj.insert(QString("attachment_fingerprint"), ::OpenAPI::toJsonValue(m_attachment_fingerprint));
    }
    if (m_attachment_id_isSet) {
        obj.insert(QString("attachment_id"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_email_template.isSet()) {
        obj.insert(QString("email_template"), ::OpenAPI::toJsonValue(m_email_template));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scanned_isSet) {
        obj.insert(QString("scanned"), ::OpenAPI::toJsonValue(m_scanned));
    }
    return obj;
}

QString OAIEmailTemplateAttachment::getAttachmentContentType() const {
    return m_attachment_content_type;
}
void OAIEmailTemplateAttachment::setAttachmentContentType(const QString &attachment_content_type) {
    m_attachment_content_type = attachment_content_type;
    m_attachment_content_type_isSet = true;
}

bool OAIEmailTemplateAttachment::is_attachment_content_type_Set() const{
    return m_attachment_content_type_isSet;
}

bool OAIEmailTemplateAttachment::is_attachment_content_type_Valid() const{
    return m_attachment_content_type_isValid;
}

qint32 OAIEmailTemplateAttachment::getAttachmentFileSize() const {
    return m_attachment_file_size;
}
void OAIEmailTemplateAttachment::setAttachmentFileSize(const qint32 &attachment_file_size) {
    m_attachment_file_size = attachment_file_size;
    m_attachment_file_size_isSet = true;
}

bool OAIEmailTemplateAttachment::is_attachment_file_size_Set() const{
    return m_attachment_file_size_isSet;
}

bool OAIEmailTemplateAttachment::is_attachment_file_size_Valid() const{
    return m_attachment_file_size_isValid;
}

qint32 OAIEmailTemplateAttachment::getAttachmentFingerprint() const {
    return m_attachment_fingerprint;
}
void OAIEmailTemplateAttachment::setAttachmentFingerprint(const qint32 &attachment_fingerprint) {
    m_attachment_fingerprint = attachment_fingerprint;
    m_attachment_fingerprint_isSet = true;
}

bool OAIEmailTemplateAttachment::is_attachment_fingerprint_Set() const{
    return m_attachment_fingerprint_isSet;
}

bool OAIEmailTemplateAttachment::is_attachment_fingerprint_Valid() const{
    return m_attachment_fingerprint_isValid;
}

qint32 OAIEmailTemplateAttachment::getAttachmentId() const {
    return m_attachment_id;
}
void OAIEmailTemplateAttachment::setAttachmentId(const qint32 &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAIEmailTemplateAttachment::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAIEmailTemplateAttachment::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

QString OAIEmailTemplateAttachment::getDownloadUrl() const {
    return m_download_url;
}
void OAIEmailTemplateAttachment::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIEmailTemplateAttachment::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIEmailTemplateAttachment::is_download_url_Valid() const{
    return m_download_url_isValid;
}

OAIEmbeddedResource OAIEmailTemplateAttachment::getEmailTemplate() const {
    return m_email_template;
}
void OAIEmailTemplateAttachment::setEmailTemplate(const OAIEmbeddedResource &email_template) {
    m_email_template = email_template;
    m_email_template_isSet = true;
}

bool OAIEmailTemplateAttachment::is_email_template_Set() const{
    return m_email_template_isSet;
}

bool OAIEmailTemplateAttachment::is_email_template_Valid() const{
    return m_email_template_isValid;
}

qint32 OAIEmailTemplateAttachment::getId() const {
    return m_id;
}
void OAIEmailTemplateAttachment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmailTemplateAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmailTemplateAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEmailTemplateAttachment::getName() const {
    return m_name;
}
void OAIEmailTemplateAttachment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEmailTemplateAttachment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEmailTemplateAttachment::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEmailTemplateAttachment::isScanned() const {
    return m_scanned;
}
void OAIEmailTemplateAttachment::setScanned(const bool &scanned) {
    m_scanned = scanned;
    m_scanned_isSet = true;
}

bool OAIEmailTemplateAttachment::is_scanned_Set() const{
    return m_scanned_isSet;
}

bool OAIEmailTemplateAttachment::is_scanned_Valid() const{
    return m_scanned_isValid;
}

bool OAIEmailTemplateAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scanned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailTemplateAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
