/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountUpsertApi_H
#define OAI_OAIAccountUpsertApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountUpsert.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountUpsertApi : public QObject {
    Q_OBJECT

public:
    OAIAccountUpsertApi(const int timeOut = 0);
    ~OAIAccountUpsertApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  name QString [required]
    * @param[in]  account_tier_id qint32 [optional]
    * @param[in]  city QString [optional]
    * @param[in]  company_stage_id qint32 [optional]
    * @param[in]  company_type QString [optional]
    * @param[in]  conversational_name QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  crm_id QString [optional]
    * @param[in]  crm_id_type QString [optional]
    * @param[in]  custom_fields QList<OAIObject> [optional]
    * @param[in]  description QString [optional]
    * @param[in]  do_not_contact bool [optional]
    * @param[in]  founded QString [optional]
    * @param[in]  id qint32 [optional]
    * @param[in]  industry QString [optional]
    * @param[in]  linkedin_url QString [optional]
    * @param[in]  locale QString [optional]
    * @param[in]  owner_id qint32 [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  revenue_range QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  street QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  twitter_handle QString [optional]
    * @param[in]  upsert_key QString [optional]
    * @param[in]  website QString [optional]
    */
    virtual void v2AccountUpsertsJsonPost(const QString &domain, const QString &name, const ::OpenAPI::OptionalParam<qint32> &account_tier_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &company_stage_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &company_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &conversational_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crm_id_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &custom_fields = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &do_not_contact = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &founded = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &linkedin_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &owner_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revenue_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &twitter_handle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upsert_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &website = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2AccountUpsertsJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2AccountUpsertsJsonPostSignal(OAIAccountUpsert summary);


    void v2AccountUpsertsJsonPostSignalFull(OAIHttpRequestWorker *worker, OAIAccountUpsert summary);

    Q_DECL_DEPRECATED_X("Use v2AccountUpsertsJsonPostSignalError() instead")
    void v2AccountUpsertsJsonPostSignalE(OAIAccountUpsert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountUpsertsJsonPostSignalError(OAIAccountUpsert summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2AccountUpsertsJsonPostSignalErrorFull() instead")
    void v2AccountUpsertsJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2AccountUpsertsJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
