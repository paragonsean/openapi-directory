/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITasksApi_H
#define OAI_OAITasksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIStep.h"
#include "OAITask.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITasksApi : public QObject {
    Q_OBJECT

public:
    OAITasksApi(const int timeOut = 0);
    ~OAITasksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void v2TasksIdJsonGet(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  current_state QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  due_date QString [optional]
    * @param[in]  is_logged bool [optional]
    * @param[in]  remind_at QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void v2TasksIdJsonPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &current_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &due_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_logged = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &remind_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QList<qint32> [optional]
    * @param[in]  user_id QList<qint32> [optional]
    * @param[in]  person_id QList<qint32> [optional]
    * @param[in]  account_id QList<qint32> [optional]
    * @param[in]  current_state QList<QString> [optional]
    * @param[in]  task_type QList<QString> [optional]
    * @param[in]  time_interval_filter QString [optional]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  locale QList<QString> [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  include_paging_counts bool [optional]
    * @param[in]  limit_paging_counts bool [optional]
    */
    virtual void v2TasksJsonGet(const ::OpenAPI::OptionalParam<QList<qint32>> &ids = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &user_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &person_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &account_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &current_state = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &task_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &time_interval_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &locale = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &include_paging_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &limit_paging_counts = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  current_state QString [required]
    * @param[in]  due_date QString [required]
    * @param[in]  person_id QString [required]
    * @param[in]  subject QString [required]
    * @param[in]  task_type QString [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  description QString [optional]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  remind_at QString [optional]
    */
    virtual void v2TasksJsonPost(const QString &current_state, const QString &due_date, const QString &person_id, const QString &subject, const QString &task_type, const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remind_at = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void v2TasksIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2TasksIdJsonPutCallback(OAIHttpRequestWorker *worker);
    void v2TasksJsonGetCallback(OAIHttpRequestWorker *worker);
    void v2TasksJsonPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void v2TasksIdJsonGetSignal(OAIStep summary);
    void v2TasksIdJsonPutSignal(OAITask summary);
    void v2TasksJsonGetSignal(QList<OAITask> summary);
    void v2TasksJsonPostSignal(OAITask summary);


    void v2TasksIdJsonGetSignalFull(OAIHttpRequestWorker *worker, OAIStep summary);
    void v2TasksIdJsonPutSignalFull(OAIHttpRequestWorker *worker, OAITask summary);
    void v2TasksJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITask> summary);
    void v2TasksJsonPostSignalFull(OAIHttpRequestWorker *worker, OAITask summary);

    Q_DECL_DEPRECATED_X("Use v2TasksIdJsonGetSignalError() instead")
    void v2TasksIdJsonGetSignalE(OAIStep summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksIdJsonGetSignalError(OAIStep summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksIdJsonPutSignalError() instead")
    void v2TasksIdJsonPutSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksIdJsonPutSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksJsonGetSignalError() instead")
    void v2TasksJsonGetSignalE(QList<OAITask> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksJsonGetSignalError(QList<OAITask> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksJsonPostSignalError() instead")
    void v2TasksJsonPostSignalE(OAITask summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksJsonPostSignalError(OAITask summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use v2TasksIdJsonGetSignalErrorFull() instead")
    void v2TasksIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksIdJsonPutSignalErrorFull() instead")
    void v2TasksIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksJsonGetSignalErrorFull() instead")
    void v2TasksJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2TasksJsonPostSignalErrorFull() instead")
    void v2TasksJsonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2TasksJsonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
