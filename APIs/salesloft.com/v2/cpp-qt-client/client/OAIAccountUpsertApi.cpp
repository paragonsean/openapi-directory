/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountUpsertApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAccountUpsertApi::OAIAccountUpsertApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAccountUpsertApi::~OAIAccountUpsertApi() {
}

void OAIAccountUpsertApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.salesloft.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("v2AccountUpsertsJsonPost", defaultConf);
    _serverIndices.insert("v2AccountUpsertsJsonPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAccountUpsertApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAccountUpsertApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAccountUpsertApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAccountUpsertApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAccountUpsertApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAccountUpsertApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAccountUpsertApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAccountUpsertApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAccountUpsertApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAccountUpsertApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountUpsertApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAccountUpsertApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAccountUpsertApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAccountUpsertApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAccountUpsertApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAccountUpsertApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAccountUpsertApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAccountUpsertApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAccountUpsertApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAccountUpsertApi::v2AccountUpsertsJsonPost(const QString &domain, const QString &name, const ::OpenAPI::OptionalParam<qint32> &account_tier_id, const ::OpenAPI::OptionalParam<QString> &city, const ::OpenAPI::OptionalParam<qint32> &company_stage_id, const ::OpenAPI::OptionalParam<QString> &company_type, const ::OpenAPI::OptionalParam<QString> &conversational_name, const ::OpenAPI::OptionalParam<QString> &country, const ::OpenAPI::OptionalParam<QString> &crm_id, const ::OpenAPI::OptionalParam<QString> &crm_id_type, const ::OpenAPI::OptionalParam<QList<OAIObject>> &custom_fields, const ::OpenAPI::OptionalParam<QString> &description, const ::OpenAPI::OptionalParam<bool> &do_not_contact, const ::OpenAPI::OptionalParam<QString> &founded, const ::OpenAPI::OptionalParam<qint32> &id, const ::OpenAPI::OptionalParam<QString> &industry, const ::OpenAPI::OptionalParam<QString> &linkedin_url, const ::OpenAPI::OptionalParam<QString> &locale, const ::OpenAPI::OptionalParam<qint32> &owner_id, const ::OpenAPI::OptionalParam<QString> &phone, const ::OpenAPI::OptionalParam<QString> &postal_code, const ::OpenAPI::OptionalParam<QString> &revenue_range, const ::OpenAPI::OptionalParam<QString> &size, const ::OpenAPI::OptionalParam<QString> &state, const ::OpenAPI::OptionalParam<QString> &street, const ::OpenAPI::OptionalParam<QList<QString>> &tags, const ::OpenAPI::OptionalParam<QString> &twitter_handle, const ::OpenAPI::OptionalParam<QString> &upsert_key, const ::OpenAPI::OptionalParam<QString> &website) {
    QString fullPath = QString(_serverConfigs["v2AccountUpsertsJsonPost"][_serverIndices.value("v2AccountUpsertsJsonPost")].URL()+"/v2/account_upserts.json");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (account_tier_id.hasValue())
    {
        input.add_var("account_tier_id", ::OpenAPI::toStringValue(account_tier_id.value()));
    }
    if (city.hasValue())
    {
        input.add_var("city", ::OpenAPI::toStringValue(city.value()));
    }
    if (company_stage_id.hasValue())
    {
        input.add_var("company_stage_id", ::OpenAPI::toStringValue(company_stage_id.value()));
    }
    if (company_type.hasValue())
    {
        input.add_var("company_type", ::OpenAPI::toStringValue(company_type.value()));
    }
    if (conversational_name.hasValue())
    {
        input.add_var("conversational_name", ::OpenAPI::toStringValue(conversational_name.value()));
    }
    if (country.hasValue())
    {
        input.add_var("country", ::OpenAPI::toStringValue(country.value()));
    }
    if (crm_id.hasValue())
    {
        input.add_var("crm_id", ::OpenAPI::toStringValue(crm_id.value()));
    }
    if (crm_id_type.hasValue())
    {
        input.add_var("crm_id_type", ::OpenAPI::toStringValue(crm_id_type.value()));
    }
    if (custom_fields.hasValue())
    {
        input.add_var("custom_fields", ::OpenAPI::toStringValue(custom_fields.value()));
    }
    if (description.hasValue())
    {
        input.add_var("description", ::OpenAPI::toStringValue(description.value()));
    }
    if (do_not_contact.hasValue())
    {
        input.add_var("do_not_contact", ::OpenAPI::toStringValue(do_not_contact.value()));
    }
    
    {
        input.add_var("domain", ::OpenAPI::toStringValue(domain));
    }
    if (founded.hasValue())
    {
        input.add_var("founded", ::OpenAPI::toStringValue(founded.value()));
    }
    if (id.hasValue())
    {
        input.add_var("id", ::OpenAPI::toStringValue(id.value()));
    }
    if (industry.hasValue())
    {
        input.add_var("industry", ::OpenAPI::toStringValue(industry.value()));
    }
    if (linkedin_url.hasValue())
    {
        input.add_var("linkedin_url", ::OpenAPI::toStringValue(linkedin_url.value()));
    }
    if (locale.hasValue())
    {
        input.add_var("locale", ::OpenAPI::toStringValue(locale.value()));
    }
    
    {
        input.add_var("name", ::OpenAPI::toStringValue(name));
    }
    if (owner_id.hasValue())
    {
        input.add_var("owner_id", ::OpenAPI::toStringValue(owner_id.value()));
    }
    if (phone.hasValue())
    {
        input.add_var("phone", ::OpenAPI::toStringValue(phone.value()));
    }
    if (postal_code.hasValue())
    {
        input.add_var("postal_code", ::OpenAPI::toStringValue(postal_code.value()));
    }
    if (revenue_range.hasValue())
    {
        input.add_var("revenue_range", ::OpenAPI::toStringValue(revenue_range.value()));
    }
    if (size.hasValue())
    {
        input.add_var("size", ::OpenAPI::toStringValue(size.value()));
    }
    if (state.hasValue())
    {
        input.add_var("state", ::OpenAPI::toStringValue(state.value()));
    }
    if (street.hasValue())
    {
        input.add_var("street", ::OpenAPI::toStringValue(street.value()));
    }
    if (tags.hasValue())
    {
        input.add_var("tags", ::OpenAPI::toStringValue(tags.value()));
    }
    if (twitter_handle.hasValue())
    {
        input.add_var("twitter_handle", ::OpenAPI::toStringValue(twitter_handle.value()));
    }
    if (upsert_key.hasValue())
    {
        input.add_var("upsert_key", ::OpenAPI::toStringValue(upsert_key.value()));
    }
    if (website.hasValue())
    {
        input.add_var("website", ::OpenAPI::toStringValue(website.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAccountUpsertApi::v2AccountUpsertsJsonPostCallback);
    connect(this, &OAIAccountUpsertApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAccountUpsertApi::v2AccountUpsertsJsonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAccountUpsert output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT v2AccountUpsertsJsonPostSignal(output);
        Q_EMIT v2AccountUpsertsJsonPostSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT v2AccountUpsertsJsonPostSignalE(output, error_type, error_str);
        Q_EMIT v2AccountUpsertsJsonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT v2AccountUpsertsJsonPostSignalError(output, error_type, error_str);
        Q_EMIT v2AccountUpsertsJsonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAccountUpsertApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
