/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallDataRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallDataRecord::OAICallDataRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallDataRecord::OAICallDataRecord() {
    this->initializeModel();
}

OAICallDataRecord::~OAICallDataRecord() {}

void OAICallDataRecord::initializeModel() {

    m_call_isSet = false;
    m_call_isValid = false;

    m_call_type_isSet = false;
    m_call_type_isValid = false;

    m_call_uuid_isSet = false;
    m_call_uuid_isValid = false;

    m_called_person_isSet = false;
    m_called_person_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICallDataRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallDataRecord::fromJsonObject(QJsonObject json) {

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_call_type_isValid = ::OpenAPI::fromJsonValue(m_call_type, json[QString("call_type")]);
    m_call_type_isSet = !json[QString("call_type")].isNull() && m_call_type_isValid;

    m_call_uuid_isValid = ::OpenAPI::fromJsonValue(m_call_uuid, json[QString("call_uuid")]);
    m_call_uuid_isSet = !json[QString("call_uuid")].isNull() && m_call_uuid_isValid;

    m_called_person_isValid = ::OpenAPI::fromJsonValue(m_called_person, json[QString("called_person")]);
    m_called_person_isSet = !json[QString("called_person")].isNull() && m_called_person_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICallDataRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallDataRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_call.isSet()) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_call_type_isSet) {
        obj.insert(QString("call_type"), ::OpenAPI::toJsonValue(m_call_type));
    }
    if (m_call_uuid_isSet) {
        obj.insert(QString("call_uuid"), ::OpenAPI::toJsonValue(m_call_uuid));
    }
    if (m_called_person.isSet()) {
        obj.insert(QString("called_person"), ::OpenAPI::toJsonValue(m_called_person));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_recording.isSet()) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIEmbeddedResource OAICallDataRecord::getCall() const {
    return m_call;
}
void OAICallDataRecord::setCall(const OAIEmbeddedResource &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAICallDataRecord::is_call_Set() const{
    return m_call_isSet;
}

bool OAICallDataRecord::is_call_Valid() const{
    return m_call_isValid;
}

QString OAICallDataRecord::getCallType() const {
    return m_call_type;
}
void OAICallDataRecord::setCallType(const QString &call_type) {
    m_call_type = call_type;
    m_call_type_isSet = true;
}

bool OAICallDataRecord::is_call_type_Set() const{
    return m_call_type_isSet;
}

bool OAICallDataRecord::is_call_type_Valid() const{
    return m_call_type_isValid;
}

QString OAICallDataRecord::getCallUuid() const {
    return m_call_uuid;
}
void OAICallDataRecord::setCallUuid(const QString &call_uuid) {
    m_call_uuid = call_uuid;
    m_call_uuid_isSet = true;
}

bool OAICallDataRecord::is_call_uuid_Set() const{
    return m_call_uuid_isSet;
}

bool OAICallDataRecord::is_call_uuid_Valid() const{
    return m_call_uuid_isValid;
}

OAIEmbeddedResource OAICallDataRecord::getCalledPerson() const {
    return m_called_person;
}
void OAICallDataRecord::setCalledPerson(const OAIEmbeddedResource &called_person) {
    m_called_person = called_person;
    m_called_person_isSet = true;
}

bool OAICallDataRecord::is_called_person_Set() const{
    return m_called_person_isSet;
}

bool OAICallDataRecord::is_called_person_Valid() const{
    return m_called_person_isValid;
}

QDateTime OAICallDataRecord::getCreatedAt() const {
    return m_created_at;
}
void OAICallDataRecord::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICallDataRecord::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICallDataRecord::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICallDataRecord::getDirection() const {
    return m_direction;
}
void OAICallDataRecord::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAICallDataRecord::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAICallDataRecord::is_direction_Valid() const{
    return m_direction_isValid;
}

qint32 OAICallDataRecord::getDuration() const {
    return m_duration;
}
void OAICallDataRecord::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICallDataRecord::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICallDataRecord::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAICallDataRecord::getFrom() const {
    return m_from;
}
void OAICallDataRecord::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICallDataRecord::is_from_Set() const{
    return m_from_isSet;
}

bool OAICallDataRecord::is_from_Valid() const{
    return m_from_isValid;
}

qint32 OAICallDataRecord::getId() const {
    return m_id;
}
void OAICallDataRecord::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICallDataRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAICallDataRecord::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedRecordingResource OAICallDataRecord::getRecording() const {
    return m_recording;
}
void OAICallDataRecord::setRecording(const OAIEmbeddedRecordingResource &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAICallDataRecord::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAICallDataRecord::is_recording_Valid() const{
    return m_recording_isValid;
}

QString OAICallDataRecord::getStatus() const {
    return m_status;
}
void OAICallDataRecord::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICallDataRecord::is_status_Set() const{
    return m_status_isSet;
}

bool OAICallDataRecord::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICallDataRecord::getTo() const {
    return m_to;
}
void OAICallDataRecord::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAICallDataRecord::is_to_Set() const{
    return m_to_isSet;
}

bool OAICallDataRecord::is_to_Valid() const{
    return m_to_isValid;
}

QDateTime OAICallDataRecord::getUpdatedAt() const {
    return m_updated_at;
}
void OAICallDataRecord::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICallDataRecord::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICallDataRecord::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAICallDataRecord::getUser() const {
    return m_user;
}
void OAICallDataRecord::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICallDataRecord::is_user_Set() const{
    return m_user_isSet;
}

bool OAICallDataRecord::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICallDataRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_called_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallDataRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
