/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_tier_isSet = false;
    m_account_tier_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_stage_isSet = false;
    m_company_stage_isValid = false;

    m_company_type_isSet = false;
    m_company_type_isValid = false;

    m_conversational_name_isSet = false;
    m_conversational_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_crm_id_isSet = false;
    m_crm_id_isValid = false;

    m_crm_object_type_isSet = false;
    m_crm_object_type_isValid = false;

    m_crm_url_isSet = false;
    m_crm_url_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_do_not_contact_isSet = false;
    m_do_not_contact_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_founded_isSet = false;
    m_founded_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_last_contacted_at_isSet = false;
    m_last_contacted_at_isValid = false;

    m_last_contacted_by_isSet = false;
    m_last_contacted_by_isValid = false;

    m_last_contacted_person_isSet = false;
    m_last_contacted_person_isValid = false;

    m_last_contacted_type_isSet = false;
    m_last_contacted_type_isValid = false;

    m_linkedin_url_isSet = false;
    m_linkedin_url_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_owner_crm_id_isSet = false;
    m_owner_crm_id_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_revenue_range_isSet = false;
    m_revenue_range_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_twitter_handle_isSet = false;
    m_twitter_handle_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_relationships_isSet = false;
    m_user_relationships_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_tier_isValid = ::OpenAPI::fromJsonValue(m_account_tier, json[QString("account_tier")]);
    m_account_tier_isSet = !json[QString("account_tier")].isNull() && m_account_tier_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_stage_isValid = ::OpenAPI::fromJsonValue(m_company_stage, json[QString("company_stage")]);
    m_company_stage_isSet = !json[QString("company_stage")].isNull() && m_company_stage_isValid;

    m_company_type_isValid = ::OpenAPI::fromJsonValue(m_company_type, json[QString("company_type")]);
    m_company_type_isSet = !json[QString("company_type")].isNull() && m_company_type_isValid;

    m_conversational_name_isValid = ::OpenAPI::fromJsonValue(m_conversational_name, json[QString("conversational_name")]);
    m_conversational_name_isSet = !json[QString("conversational_name")].isNull() && m_conversational_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_crm_id_isValid = ::OpenAPI::fromJsonValue(m_crm_id, json[QString("crm_id")]);
    m_crm_id_isSet = !json[QString("crm_id")].isNull() && m_crm_id_isValid;

    m_crm_object_type_isValid = ::OpenAPI::fromJsonValue(m_crm_object_type, json[QString("crm_object_type")]);
    m_crm_object_type_isSet = !json[QString("crm_object_type")].isNull() && m_crm_object_type_isValid;

    m_crm_url_isValid = ::OpenAPI::fromJsonValue(m_crm_url, json[QString("crm_url")]);
    m_crm_url_isSet = !json[QString("crm_url")].isNull() && m_crm_url_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_do_not_contact_isValid = ::OpenAPI::fromJsonValue(m_do_not_contact, json[QString("do_not_contact")]);
    m_do_not_contact_isSet = !json[QString("do_not_contact")].isNull() && m_do_not_contact_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_founded_isValid = ::OpenAPI::fromJsonValue(m_founded, json[QString("founded")]);
    m_founded_isSet = !json[QString("founded")].isNull() && m_founded_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("industry")]);
    m_industry_isSet = !json[QString("industry")].isNull() && m_industry_isValid;

    m_last_contacted_at_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_at, json[QString("last_contacted_at")]);
    m_last_contacted_at_isSet = !json[QString("last_contacted_at")].isNull() && m_last_contacted_at_isValid;

    m_last_contacted_by_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_by, json[QString("last_contacted_by")]);
    m_last_contacted_by_isSet = !json[QString("last_contacted_by")].isNull() && m_last_contacted_by_isValid;

    m_last_contacted_person_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_person, json[QString("last_contacted_person")]);
    m_last_contacted_person_isSet = !json[QString("last_contacted_person")].isNull() && m_last_contacted_person_isValid;

    m_last_contacted_type_isValid = ::OpenAPI::fromJsonValue(m_last_contacted_type, json[QString("last_contacted_type")]);
    m_last_contacted_type_isSet = !json[QString("last_contacted_type")].isNull() && m_last_contacted_type_isValid;

    m_linkedin_url_isValid = ::OpenAPI::fromJsonValue(m_linkedin_url, json[QString("linkedin_url")]);
    m_linkedin_url_isSet = !json[QString("linkedin_url")].isNull() && m_linkedin_url_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_owner_crm_id_isValid = ::OpenAPI::fromJsonValue(m_owner_crm_id, json[QString("owner_crm_id")]);
    m_owner_crm_id_isSet = !json[QString("owner_crm_id")].isNull() && m_owner_crm_id_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_revenue_range_isValid = ::OpenAPI::fromJsonValue(m_revenue_range, json[QString("revenue_range")]);
    m_revenue_range_isSet = !json[QString("revenue_range")].isNull() && m_revenue_range_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_twitter_handle_isValid = ::OpenAPI::fromJsonValue(m_twitter_handle, json[QString("twitter_handle")]);
    m_twitter_handle_isSet = !json[QString("twitter_handle")].isNull() && m_twitter_handle_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_relationships_isValid = ::OpenAPI::fromJsonValue(m_user_relationships, json[QString("user_relationships")]);
    m_user_relationships_isSet = !json[QString("user_relationships")].isNull() && m_user_relationships_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_tier.isSet()) {
        obj.insert(QString("account_tier"), ::OpenAPI::toJsonValue(m_account_tier));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_stage.isSet()) {
        obj.insert(QString("company_stage"), ::OpenAPI::toJsonValue(m_company_stage));
    }
    if (m_company_type_isSet) {
        obj.insert(QString("company_type"), ::OpenAPI::toJsonValue(m_company_type));
    }
    if (m_conversational_name_isSet) {
        obj.insert(QString("conversational_name"), ::OpenAPI::toJsonValue(m_conversational_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_crm_id_isSet) {
        obj.insert(QString("crm_id"), ::OpenAPI::toJsonValue(m_crm_id));
    }
    if (m_crm_object_type_isSet) {
        obj.insert(QString("crm_object_type"), ::OpenAPI::toJsonValue(m_crm_object_type));
    }
    if (m_crm_url_isSet) {
        obj.insert(QString("crm_url"), ::OpenAPI::toJsonValue(m_crm_url));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_do_not_contact_isSet) {
        obj.insert(QString("do_not_contact"), ::OpenAPI::toJsonValue(m_do_not_contact));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_founded_isSet) {
        obj.insert(QString("founded"), ::OpenAPI::toJsonValue(m_founded));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_industry_isSet) {
        obj.insert(QString("industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_last_contacted_at_isSet) {
        obj.insert(QString("last_contacted_at"), ::OpenAPI::toJsonValue(m_last_contacted_at));
    }
    if (m_last_contacted_by.isSet()) {
        obj.insert(QString("last_contacted_by"), ::OpenAPI::toJsonValue(m_last_contacted_by));
    }
    if (m_last_contacted_person.isSet()) {
        obj.insert(QString("last_contacted_person"), ::OpenAPI::toJsonValue(m_last_contacted_person));
    }
    if (m_last_contacted_type_isSet) {
        obj.insert(QString("last_contacted_type"), ::OpenAPI::toJsonValue(m_last_contacted_type));
    }
    if (m_linkedin_url_isSet) {
        obj.insert(QString("linkedin_url"), ::OpenAPI::toJsonValue(m_linkedin_url));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_owner_crm_id_isSet) {
        obj.insert(QString("owner_crm_id"), ::OpenAPI::toJsonValue(m_owner_crm_id));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_revenue_range_isSet) {
        obj.insert(QString("revenue_range"), ::OpenAPI::toJsonValue(m_revenue_range));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_twitter_handle_isSet) {
        obj.insert(QString("twitter_handle"), ::OpenAPI::toJsonValue(m_twitter_handle));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_relationships_isSet) {
        obj.insert(QString("user_relationships"), ::OpenAPI::toJsonValue(m_user_relationships));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIEmbeddedResource OAIAccount::getAccountTier() const {
    return m_account_tier;
}
void OAIAccount::setAccountTier(const OAIEmbeddedResource &account_tier) {
    m_account_tier = account_tier;
    m_account_tier_isSet = true;
}

bool OAIAccount::is_account_tier_Set() const{
    return m_account_tier_isSet;
}

bool OAIAccount::is_account_tier_Valid() const{
    return m_account_tier_isValid;
}

QDateTime OAIAccount::getArchivedAt() const {
    return m_archived_at;
}
void OAIAccount::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIAccount::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIAccount::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QString OAIAccount::getCity() const {
    return m_city;
}
void OAIAccount::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAccount::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAccount::is_city_Valid() const{
    return m_city_isValid;
}

OAIEmbeddedResource OAIAccount::getCompanyStage() const {
    return m_company_stage;
}
void OAIAccount::setCompanyStage(const OAIEmbeddedResource &company_stage) {
    m_company_stage = company_stage;
    m_company_stage_isSet = true;
}

bool OAIAccount::is_company_stage_Set() const{
    return m_company_stage_isSet;
}

bool OAIAccount::is_company_stage_Valid() const{
    return m_company_stage_isValid;
}

QString OAIAccount::getCompanyType() const {
    return m_company_type;
}
void OAIAccount::setCompanyType(const QString &company_type) {
    m_company_type = company_type;
    m_company_type_isSet = true;
}

bool OAIAccount::is_company_type_Set() const{
    return m_company_type_isSet;
}

bool OAIAccount::is_company_type_Valid() const{
    return m_company_type_isValid;
}

QString OAIAccount::getConversationalName() const {
    return m_conversational_name;
}
void OAIAccount::setConversationalName(const QString &conversational_name) {
    m_conversational_name = conversational_name;
    m_conversational_name_isSet = true;
}

bool OAIAccount::is_conversational_name_Set() const{
    return m_conversational_name_isSet;
}

bool OAIAccount::is_conversational_name_Valid() const{
    return m_conversational_name_isValid;
}

QString OAIAccount::getCountry() const {
    return m_country;
}
void OAIAccount::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccount::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccount::is_country_Valid() const{
    return m_country_isValid;
}

OAIEmbeddedAccountCounts OAIAccount::getCounts() const {
    return m_counts;
}
void OAIAccount::setCounts(const OAIEmbeddedAccountCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIAccount::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIAccount::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAIAccount::getCreatedAt() const {
    return m_created_at;
}
void OAIAccount::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccount::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccount::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEmbeddedResource OAIAccount::getCreator() const {
    return m_creator;
}
void OAIAccount::setCreator(const OAIEmbeddedResource &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIAccount::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIAccount::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIAccount::getCrmId() const {
    return m_crm_id;
}
void OAIAccount::setCrmId(const QString &crm_id) {
    m_crm_id = crm_id;
    m_crm_id_isSet = true;
}

bool OAIAccount::is_crm_id_Set() const{
    return m_crm_id_isSet;
}

bool OAIAccount::is_crm_id_Valid() const{
    return m_crm_id_isValid;
}

QString OAIAccount::getCrmObjectType() const {
    return m_crm_object_type;
}
void OAIAccount::setCrmObjectType(const QString &crm_object_type) {
    m_crm_object_type = crm_object_type;
    m_crm_object_type_isSet = true;
}

bool OAIAccount::is_crm_object_type_Set() const{
    return m_crm_object_type_isSet;
}

bool OAIAccount::is_crm_object_type_Valid() const{
    return m_crm_object_type_isValid;
}

QString OAIAccount::getCrmUrl() const {
    return m_crm_url;
}
void OAIAccount::setCrmUrl(const QString &crm_url) {
    m_crm_url = crm_url;
    m_crm_url_isSet = true;
}

bool OAIAccount::is_crm_url_Set() const{
    return m_crm_url_isSet;
}

bool OAIAccount::is_crm_url_Valid() const{
    return m_crm_url_isValid;
}

OAIObject OAIAccount::getCustomFields() const {
    return m_custom_fields;
}
void OAIAccount::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIAccount::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIAccount::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIAccount::getDescription() const {
    return m_description;
}
void OAIAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccount::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAccount::isDoNotContact() const {
    return m_do_not_contact;
}
void OAIAccount::setDoNotContact(const bool &do_not_contact) {
    m_do_not_contact = do_not_contact;
    m_do_not_contact_isSet = true;
}

bool OAIAccount::is_do_not_contact_Set() const{
    return m_do_not_contact_isSet;
}

bool OAIAccount::is_do_not_contact_Valid() const{
    return m_do_not_contact_isValid;
}

QString OAIAccount::getDomain() const {
    return m_domain;
}
void OAIAccount::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAccount::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAccount::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIAccount::getFounded() const {
    return m_founded;
}
void OAIAccount::setFounded(const QString &founded) {
    m_founded = founded;
    m_founded_isSet = true;
}

bool OAIAccount::is_founded_Set() const{
    return m_founded_isSet;
}

bool OAIAccount::is_founded_Valid() const{
    return m_founded_isValid;
}

qint32 OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccount::getIndustry() const {
    return m_industry;
}
void OAIAccount::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIAccount::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIAccount::is_industry_Valid() const{
    return m_industry_isValid;
}

QDateTime OAIAccount::getLastContactedAt() const {
    return m_last_contacted_at;
}
void OAIAccount::setLastContactedAt(const QDateTime &last_contacted_at) {
    m_last_contacted_at = last_contacted_at;
    m_last_contacted_at_isSet = true;
}

bool OAIAccount::is_last_contacted_at_Set() const{
    return m_last_contacted_at_isSet;
}

bool OAIAccount::is_last_contacted_at_Valid() const{
    return m_last_contacted_at_isValid;
}

OAIEmbeddedResource OAIAccount::getLastContactedBy() const {
    return m_last_contacted_by;
}
void OAIAccount::setLastContactedBy(const OAIEmbeddedResource &last_contacted_by) {
    m_last_contacted_by = last_contacted_by;
    m_last_contacted_by_isSet = true;
}

bool OAIAccount::is_last_contacted_by_Set() const{
    return m_last_contacted_by_isSet;
}

bool OAIAccount::is_last_contacted_by_Valid() const{
    return m_last_contacted_by_isValid;
}

OAIEmbeddedResource OAIAccount::getLastContactedPerson() const {
    return m_last_contacted_person;
}
void OAIAccount::setLastContactedPerson(const OAIEmbeddedResource &last_contacted_person) {
    m_last_contacted_person = last_contacted_person;
    m_last_contacted_person_isSet = true;
}

bool OAIAccount::is_last_contacted_person_Set() const{
    return m_last_contacted_person_isSet;
}

bool OAIAccount::is_last_contacted_person_Valid() const{
    return m_last_contacted_person_isValid;
}

QString OAIAccount::getLastContactedType() const {
    return m_last_contacted_type;
}
void OAIAccount::setLastContactedType(const QString &last_contacted_type) {
    m_last_contacted_type = last_contacted_type;
    m_last_contacted_type_isSet = true;
}

bool OAIAccount::is_last_contacted_type_Set() const{
    return m_last_contacted_type_isSet;
}

bool OAIAccount::is_last_contacted_type_Valid() const{
    return m_last_contacted_type_isValid;
}

QString OAIAccount::getLinkedinUrl() const {
    return m_linkedin_url;
}
void OAIAccount::setLinkedinUrl(const QString &linkedin_url) {
    m_linkedin_url = linkedin_url;
    m_linkedin_url_isSet = true;
}

bool OAIAccount::is_linkedin_url_Set() const{
    return m_linkedin_url_isSet;
}

bool OAIAccount::is_linkedin_url_Valid() const{
    return m_linkedin_url_isValid;
}

QString OAIAccount::getLocale() const {
    return m_locale;
}
void OAIAccount::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAccount::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAccount::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

OAIEmbeddedResource OAIAccount::getOwner() const {
    return m_owner;
}
void OAIAccount::setOwner(const OAIEmbeddedResource &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAccount::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAccount::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIAccount::getOwnerCrmId() const {
    return m_owner_crm_id;
}
void OAIAccount::setOwnerCrmId(const QString &owner_crm_id) {
    m_owner_crm_id = owner_crm_id;
    m_owner_crm_id_isSet = true;
}

bool OAIAccount::is_owner_crm_id_Set() const{
    return m_owner_crm_id_isSet;
}

bool OAIAccount::is_owner_crm_id_Valid() const{
    return m_owner_crm_id_isValid;
}

QString OAIAccount::getPhone() const {
    return m_phone;
}
void OAIAccount::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIAccount::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIAccount::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIAccount::getPostalCode() const {
    return m_postal_code;
}
void OAIAccount::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAccount::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAccount::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAccount::getRevenueRange() const {
    return m_revenue_range;
}
void OAIAccount::setRevenueRange(const QString &revenue_range) {
    m_revenue_range = revenue_range;
    m_revenue_range_isSet = true;
}

bool OAIAccount::is_revenue_range_Set() const{
    return m_revenue_range_isSet;
}

bool OAIAccount::is_revenue_range_Valid() const{
    return m_revenue_range_isValid;
}

QString OAIAccount::getSize() const {
    return m_size;
}
void OAIAccount::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAccount::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAccount::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAccount::getState() const {
    return m_state;
}
void OAIAccount::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccount::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccount::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAccount::getStreet() const {
    return m_street;
}
void OAIAccount::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAccount::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAccount::is_street_Valid() const{
    return m_street_isValid;
}

QList<QString> OAIAccount::getTags() const {
    return m_tags;
}
void OAIAccount::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAccount::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAccount::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAccount::getTwitterHandle() const {
    return m_twitter_handle;
}
void OAIAccount::setTwitterHandle(const QString &twitter_handle) {
    m_twitter_handle = twitter_handle;
    m_twitter_handle_isSet = true;
}

bool OAIAccount::is_twitter_handle_Set() const{
    return m_twitter_handle_isSet;
}

bool OAIAccount::is_twitter_handle_Valid() const{
    return m_twitter_handle_isValid;
}

QDateTime OAIAccount::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAccount::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAccount::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAccount::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIObject OAIAccount::getUserRelationships() const {
    return m_user_relationships;
}
void OAIAccount::setUserRelationships(const OAIObject &user_relationships) {
    m_user_relationships = user_relationships;
    m_user_relationships_isSet = true;
}

bool OAIAccount::is_user_relationships_Set() const{
    return m_user_relationships_isSet;
}

bool OAIAccount::is_user_relationships_Valid() const{
    return m_user_relationships_isValid;
}

QString OAIAccount::getWebsite() const {
    return m_website;
}
void OAIAccount::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIAccount::is_website_Set() const{
    return m_website_isSet;
}

bool OAIAccount::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversational_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_founded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_contacted_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_crm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revenue_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_relationships_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
