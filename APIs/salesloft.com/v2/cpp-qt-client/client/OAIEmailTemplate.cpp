/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailTemplate::OAIEmailTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailTemplate::OAIEmailTemplate() {
    this->initializeModel();
}

OAIEmailTemplate::~OAIEmailTemplate() {}

void OAIEmailTemplate::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_preview_isSet = false;
    m_body_preview_isValid = false;

    m_cadence_template_isSet = false;
    m_cadence_template_isValid = false;

    m_click_tracking_enabled_isSet = false;
    m_click_tracking_enabled_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_used_at_isSet = false;
    m_last_used_at_isValid = false;

    m_open_tracking_enabled_isSet = false;
    m_open_tracking_enabled_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_team_template_isSet = false;
    m_team_template_isValid = false;

    m_template_owner_isSet = false;
    m_template_owner_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIEmailTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailTemplate::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_preview_isValid = ::OpenAPI::fromJsonValue(m_body_preview, json[QString("body_preview")]);
    m_body_preview_isSet = !json[QString("body_preview")].isNull() && m_body_preview_isValid;

    m_cadence_template_isValid = ::OpenAPI::fromJsonValue(m_cadence_template, json[QString("cadence_template")]);
    m_cadence_template_isSet = !json[QString("cadence_template")].isNull() && m_cadence_template_isValid;

    m_click_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_click_tracking_enabled, json[QString("click_tracking_enabled")]);
    m_click_tracking_enabled_isSet = !json[QString("click_tracking_enabled")].isNull() && m_click_tracking_enabled_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_used_at_isValid = ::OpenAPI::fromJsonValue(m_last_used_at, json[QString("last_used_at")]);
    m_last_used_at_isSet = !json[QString("last_used_at")].isNull() && m_last_used_at_isValid;

    m_open_tracking_enabled_isValid = ::OpenAPI::fromJsonValue(m_open_tracking_enabled, json[QString("open_tracking_enabled")]);
    m_open_tracking_enabled_isSet = !json[QString("open_tracking_enabled")].isNull() && m_open_tracking_enabled_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_team_template_isValid = ::OpenAPI::fromJsonValue(m_team_template, json[QString("team_template")]);
    m_team_template_isSet = !json[QString("team_template")].isNull() && m_team_template_isValid;

    m_template_owner_isValid = ::OpenAPI::fromJsonValue(m_template_owner, json[QString("template_owner")]);
    m_template_owner_isSet = !json[QString("template_owner")].isNull() && m_template_owner_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIEmailTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m__links_isSet) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_preview_isSet) {
        obj.insert(QString("body_preview"), ::OpenAPI::toJsonValue(m_body_preview));
    }
    if (m_cadence_template_isSet) {
        obj.insert(QString("cadence_template"), ::OpenAPI::toJsonValue(m_cadence_template));
    }
    if (m_click_tracking_enabled_isSet) {
        obj.insert(QString("click_tracking_enabled"), ::OpenAPI::toJsonValue(m_click_tracking_enabled));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_used_at_isSet) {
        obj.insert(QString("last_used_at"), ::OpenAPI::toJsonValue(m_last_used_at));
    }
    if (m_open_tracking_enabled_isSet) {
        obj.insert(QString("open_tracking_enabled"), ::OpenAPI::toJsonValue(m_open_tracking_enabled));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_team_template.isSet()) {
        obj.insert(QString("team_template"), ::OpenAPI::toJsonValue(m_team_template));
    }
    if (m_template_owner.isSet()) {
        obj.insert(QString("template_owner"), ::OpenAPI::toJsonValue(m_template_owner));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIObject OAIEmailTemplate::getLinks() const {
    return m__links;
}
void OAIEmailTemplate::setLinks(const OAIObject &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIEmailTemplate::is__links_Set() const{
    return m__links_isSet;
}

bool OAIEmailTemplate::is__links_Valid() const{
    return m__links_isValid;
}

QDateTime OAIEmailTemplate::getArchivedAt() const {
    return m_archived_at;
}
void OAIEmailTemplate::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAIEmailTemplate::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAIEmailTemplate::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

QString OAIEmailTemplate::getBody() const {
    return m_body;
}
void OAIEmailTemplate::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIEmailTemplate::is_body_Set() const{
    return m_body_isSet;
}

bool OAIEmailTemplate::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIEmailTemplate::getBodyPreview() const {
    return m_body_preview;
}
void OAIEmailTemplate::setBodyPreview(const QString &body_preview) {
    m_body_preview = body_preview;
    m_body_preview_isSet = true;
}

bool OAIEmailTemplate::is_body_preview_Set() const{
    return m_body_preview_isSet;
}

bool OAIEmailTemplate::is_body_preview_Valid() const{
    return m_body_preview_isValid;
}

bool OAIEmailTemplate::isCadenceTemplate() const {
    return m_cadence_template;
}
void OAIEmailTemplate::setCadenceTemplate(const bool &cadence_template) {
    m_cadence_template = cadence_template;
    m_cadence_template_isSet = true;
}

bool OAIEmailTemplate::is_cadence_template_Set() const{
    return m_cadence_template_isSet;
}

bool OAIEmailTemplate::is_cadence_template_Valid() const{
    return m_cadence_template_isValid;
}

bool OAIEmailTemplate::isClickTrackingEnabled() const {
    return m_click_tracking_enabled;
}
void OAIEmailTemplate::setClickTrackingEnabled(const bool &click_tracking_enabled) {
    m_click_tracking_enabled = click_tracking_enabled;
    m_click_tracking_enabled_isSet = true;
}

bool OAIEmailTemplate::is_click_tracking_enabled_Set() const{
    return m_click_tracking_enabled_isSet;
}

bool OAIEmailTemplate::is_click_tracking_enabled_Valid() const{
    return m_click_tracking_enabled_isValid;
}

OAIEmailTemplateCounts OAIEmailTemplate::getCounts() const {
    return m_counts;
}
void OAIEmailTemplate::setCounts(const OAIEmailTemplateCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIEmailTemplate::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIEmailTemplate::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAIEmailTemplate::getCreatedAt() const {
    return m_created_at;
}
void OAIEmailTemplate::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEmailTemplate::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEmailTemplate::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIEmbeddedResource> OAIEmailTemplate::getGroups() const {
    return m_groups;
}
void OAIEmailTemplate::setGroups(const QList<OAIEmbeddedResource> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIEmailTemplate::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIEmailTemplate::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIEmailTemplate::getId() const {
    return m_id;
}
void OAIEmailTemplate::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEmailTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmailTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIEmailTemplate::getLastUsedAt() const {
    return m_last_used_at;
}
void OAIEmailTemplate::setLastUsedAt(const QDateTime &last_used_at) {
    m_last_used_at = last_used_at;
    m_last_used_at_isSet = true;
}

bool OAIEmailTemplate::is_last_used_at_Set() const{
    return m_last_used_at_isSet;
}

bool OAIEmailTemplate::is_last_used_at_Valid() const{
    return m_last_used_at_isValid;
}

bool OAIEmailTemplate::isOpenTrackingEnabled() const {
    return m_open_tracking_enabled;
}
void OAIEmailTemplate::setOpenTrackingEnabled(const bool &open_tracking_enabled) {
    m_open_tracking_enabled = open_tracking_enabled;
    m_open_tracking_enabled_isSet = true;
}

bool OAIEmailTemplate::is_open_tracking_enabled_Set() const{
    return m_open_tracking_enabled_isSet;
}

bool OAIEmailTemplate::is_open_tracking_enabled_Valid() const{
    return m_open_tracking_enabled_isValid;
}

bool OAIEmailTemplate::isShared() const {
    return m_shared;
}
void OAIEmailTemplate::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIEmailTemplate::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIEmailTemplate::is_shared_Valid() const{
    return m_shared_isValid;
}

QString OAIEmailTemplate::getSubject() const {
    return m_subject;
}
void OAIEmailTemplate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailTemplate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailTemplate::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAIEmailTemplate::getTags() const {
    return m_tags;
}
void OAIEmailTemplate::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEmailTemplate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEmailTemplate::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIEmbeddedResource OAIEmailTemplate::getTeamTemplate() const {
    return m_team_template;
}
void OAIEmailTemplate::setTeamTemplate(const OAIEmbeddedResource &team_template) {
    m_team_template = team_template;
    m_team_template_isSet = true;
}

bool OAIEmailTemplate::is_team_template_Set() const{
    return m_team_template_isSet;
}

bool OAIEmailTemplate::is_team_template_Valid() const{
    return m_team_template_isValid;
}

OAIEmbeddedResource OAIEmailTemplate::getTemplateOwner() const {
    return m_template_owner;
}
void OAIEmailTemplate::setTemplateOwner(const OAIEmbeddedResource &template_owner) {
    m_template_owner = template_owner;
    m_template_owner_isSet = true;
}

bool OAIEmailTemplate::is_template_owner_Set() const{
    return m_template_owner_isSet;
}

bool OAIEmailTemplate::is_template_owner_Valid() const{
    return m_template_owner_isValid;
}

QString OAIEmailTemplate::getTitle() const {
    return m_title;
}
void OAIEmailTemplate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEmailTemplate::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEmailTemplate::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIEmailTemplate::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEmailTemplate::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEmailTemplate::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEmailTemplate::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIEmailTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_tracking_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
