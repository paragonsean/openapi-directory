/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICadenceMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICadenceMembership::OAICadenceMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICadenceMembership::OAICadenceMembership() {
    this->initializeModel();
}

OAICadenceMembership::~OAICadenceMembership() {}

void OAICadenceMembership::initializeModel() {

    m_added_at_isSet = false;
    m_added_at_isValid = false;

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_currently_on_cadence_isSet = false;
    m_currently_on_cadence_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_action_isSet = false;
    m_latest_action_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_person_deleted_isSet = false;
    m_person_deleted_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAICadenceMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICadenceMembership::fromJsonObject(QJsonObject json) {

    m_added_at_isValid = ::OpenAPI::fromJsonValue(m_added_at, json[QString("added_at")]);
    m_added_at_isSet = !json[QString("added_at")].isNull() && m_added_at_isValid;

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("current_state")]);
    m_current_state_isSet = !json[QString("current_state")].isNull() && m_current_state_isValid;

    m_currently_on_cadence_isValid = ::OpenAPI::fromJsonValue(m_currently_on_cadence, json[QString("currently_on_cadence")]);
    m_currently_on_cadence_isSet = !json[QString("currently_on_cadence")].isNull() && m_currently_on_cadence_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_action_isValid = ::OpenAPI::fromJsonValue(m_latest_action, json[QString("latest_action")]);
    m_latest_action_isSet = !json[QString("latest_action")].isNull() && m_latest_action_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_person_deleted_isValid = ::OpenAPI::fromJsonValue(m_person_deleted, json[QString("person_deleted")]);
    m_person_deleted_isSet = !json[QString("person_deleted")].isNull() && m_person_deleted_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAICadenceMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICadenceMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_added_at_isSet) {
        obj.insert(QString("added_at"), ::OpenAPI::toJsonValue(m_added_at));
    }
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_state_isSet) {
        obj.insert(QString("current_state"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_currently_on_cadence_isSet) {
        obj.insert(QString("currently_on_cadence"), ::OpenAPI::toJsonValue(m_currently_on_cadence));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_action.isSet()) {
        obj.insert(QString("latest_action"), ::OpenAPI::toJsonValue(m_latest_action));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_person_deleted_isSet) {
        obj.insert(QString("person_deleted"), ::OpenAPI::toJsonValue(m_person_deleted));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAICadenceMembership::getAddedAt() const {
    return m_added_at;
}
void OAICadenceMembership::setAddedAt(const QDateTime &added_at) {
    m_added_at = added_at;
    m_added_at_isSet = true;
}

bool OAICadenceMembership::is_added_at_Set() const{
    return m_added_at_isSet;
}

bool OAICadenceMembership::is_added_at_Valid() const{
    return m_added_at_isValid;
}

OAIEmbeddedResource OAICadenceMembership::getCadence() const {
    return m_cadence;
}
void OAICadenceMembership::setCadence(const OAIEmbeddedResource &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAICadenceMembership::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAICadenceMembership::is_cadence_Valid() const{
    return m_cadence_isValid;
}

OAICadenceMembershipCounts OAICadenceMembership::getCounts() const {
    return m_counts;
}
void OAICadenceMembership::setCounts(const OAICadenceMembershipCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAICadenceMembership::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAICadenceMembership::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAICadenceMembership::getCreatedAt() const {
    return m_created_at;
}
void OAICadenceMembership::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICadenceMembership::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICadenceMembership::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICadenceMembership::getCurrentState() const {
    return m_current_state;
}
void OAICadenceMembership::setCurrentState(const QString &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAICadenceMembership::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAICadenceMembership::is_current_state_Valid() const{
    return m_current_state_isValid;
}

bool OAICadenceMembership::isCurrentlyOnCadence() const {
    return m_currently_on_cadence;
}
void OAICadenceMembership::setCurrentlyOnCadence(const bool &currently_on_cadence) {
    m_currently_on_cadence = currently_on_cadence;
    m_currently_on_cadence_isSet = true;
}

bool OAICadenceMembership::is_currently_on_cadence_Set() const{
    return m_currently_on_cadence_isSet;
}

bool OAICadenceMembership::is_currently_on_cadence_Valid() const{
    return m_currently_on_cadence_isValid;
}

qint32 OAICadenceMembership::getId() const {
    return m_id;
}
void OAICadenceMembership::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICadenceMembership::is_id_Set() const{
    return m_id_isSet;
}

bool OAICadenceMembership::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAICadenceMembership::getLatestAction() const {
    return m_latest_action;
}
void OAICadenceMembership::setLatestAction(const OAIEmbeddedResource &latest_action) {
    m_latest_action = latest_action;
    m_latest_action_isSet = true;
}

bool OAICadenceMembership::is_latest_action_Set() const{
    return m_latest_action_isSet;
}

bool OAICadenceMembership::is_latest_action_Valid() const{
    return m_latest_action_isValid;
}

OAIEmbeddedResource OAICadenceMembership::getPerson() const {
    return m_person;
}
void OAICadenceMembership::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAICadenceMembership::is_person_Set() const{
    return m_person_isSet;
}

bool OAICadenceMembership::is_person_Valid() const{
    return m_person_isValid;
}

bool OAICadenceMembership::isPersonDeleted() const {
    return m_person_deleted;
}
void OAICadenceMembership::setPersonDeleted(const bool &person_deleted) {
    m_person_deleted = person_deleted;
    m_person_deleted_isSet = true;
}

bool OAICadenceMembership::is_person_deleted_Set() const{
    return m_person_deleted_isSet;
}

bool OAICadenceMembership::is_person_deleted_Valid() const{
    return m_person_deleted_isValid;
}

QDateTime OAICadenceMembership::getUpdatedAt() const {
    return m_updated_at;
}
void OAICadenceMembership::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICadenceMembership::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICadenceMembership::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAICadenceMembership::getUser() const {
    return m_user;
}
void OAICadenceMembership::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICadenceMembership::is_user_Set() const{
    return m_user_isSet;
}

bool OAICadenceMembership::is_user_Valid() const{
    return m_user_isValid;
}

bool OAICadenceMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currently_on_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICadenceMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
