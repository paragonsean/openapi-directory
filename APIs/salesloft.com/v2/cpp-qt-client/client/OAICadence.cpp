/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICadence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICadence::OAICadence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICadence::OAICadence() {
    this->initializeModel();
}

OAICadence::~OAICadence() {}

void OAICadence::initializeModel() {

    m_added_stage_isSet = false;
    m_added_stage_isValid = false;

    m_archived_at_isSet = false;
    m_archived_at_isValid = false;

    m_bounced_stage_isSet = false;
    m_bounced_stage_isValid = false;

    m_cadence_framework_id_isSet = false;
    m_cadence_framework_id_isValid = false;

    m_cadence_function_isSet = false;
    m_cadence_function_isValid = false;

    m_cadence_priority_isSet = false;
    m_cadence_priority_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_external_identifier_isSet = false;
    m_external_identifier_isValid = false;

    m_finished_stage_isSet = false;
    m_finished_stage_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_opt_out_link_included_isSet = false;
    m_opt_out_link_included_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_remove_bounces_enabled_isSet = false;
    m_remove_bounces_enabled_isValid = false;

    m_remove_replies_enabled_isSet = false;
    m_remove_replies_enabled_isValid = false;

    m_replied_stage_isSet = false;
    m_replied_stage_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_team_cadence_isSet = false;
    m_team_cadence_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICadence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICadence::fromJsonObject(QJsonObject json) {

    m_added_stage_isValid = ::OpenAPI::fromJsonValue(m_added_stage, json[QString("added_stage")]);
    m_added_stage_isSet = !json[QString("added_stage")].isNull() && m_added_stage_isValid;

    m_archived_at_isValid = ::OpenAPI::fromJsonValue(m_archived_at, json[QString("archived_at")]);
    m_archived_at_isSet = !json[QString("archived_at")].isNull() && m_archived_at_isValid;

    m_bounced_stage_isValid = ::OpenAPI::fromJsonValue(m_bounced_stage, json[QString("bounced_stage")]);
    m_bounced_stage_isSet = !json[QString("bounced_stage")].isNull() && m_bounced_stage_isValid;

    m_cadence_framework_id_isValid = ::OpenAPI::fromJsonValue(m_cadence_framework_id, json[QString("cadence_framework_id")]);
    m_cadence_framework_id_isSet = !json[QString("cadence_framework_id")].isNull() && m_cadence_framework_id_isValid;

    m_cadence_function_isValid = ::OpenAPI::fromJsonValue(m_cadence_function, json[QString("cadence_function")]);
    m_cadence_function_isSet = !json[QString("cadence_function")].isNull() && m_cadence_function_isValid;

    m_cadence_priority_isValid = ::OpenAPI::fromJsonValue(m_cadence_priority, json[QString("cadence_priority")]);
    m_cadence_priority_isSet = !json[QString("cadence_priority")].isNull() && m_cadence_priority_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_external_identifier_isValid = ::OpenAPI::fromJsonValue(m_external_identifier, json[QString("external_identifier")]);
    m_external_identifier_isSet = !json[QString("external_identifier")].isNull() && m_external_identifier_isValid;

    m_finished_stage_isValid = ::OpenAPI::fromJsonValue(m_finished_stage, json[QString("finished_stage")]);
    m_finished_stage_isSet = !json[QString("finished_stage")].isNull() && m_finished_stage_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_opt_out_link_included_isValid = ::OpenAPI::fromJsonValue(m_opt_out_link_included, json[QString("opt_out_link_included")]);
    m_opt_out_link_included_isSet = !json[QString("opt_out_link_included")].isNull() && m_opt_out_link_included_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_remove_bounces_enabled_isValid = ::OpenAPI::fromJsonValue(m_remove_bounces_enabled, json[QString("remove_bounces_enabled")]);
    m_remove_bounces_enabled_isSet = !json[QString("remove_bounces_enabled")].isNull() && m_remove_bounces_enabled_isValid;

    m_remove_replies_enabled_isValid = ::OpenAPI::fromJsonValue(m_remove_replies_enabled, json[QString("remove_replies_enabled")]);
    m_remove_replies_enabled_isSet = !json[QString("remove_replies_enabled")].isNull() && m_remove_replies_enabled_isValid;

    m_replied_stage_isValid = ::OpenAPI::fromJsonValue(m_replied_stage, json[QString("replied_stage")]);
    m_replied_stage_isSet = !json[QString("replied_stage")].isNull() && m_replied_stage_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_team_cadence_isValid = ::OpenAPI::fromJsonValue(m_team_cadence, json[QString("team_cadence")]);
    m_team_cadence_isSet = !json[QString("team_cadence")].isNull() && m_team_cadence_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICadence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICadence::asJsonObject() const {
    QJsonObject obj;
    if (m_added_stage.isSet()) {
        obj.insert(QString("added_stage"), ::OpenAPI::toJsonValue(m_added_stage));
    }
    if (m_archived_at_isSet) {
        obj.insert(QString("archived_at"), ::OpenAPI::toJsonValue(m_archived_at));
    }
    if (m_bounced_stage.isSet()) {
        obj.insert(QString("bounced_stage"), ::OpenAPI::toJsonValue(m_bounced_stage));
    }
    if (m_cadence_framework_id_isSet) {
        obj.insert(QString("cadence_framework_id"), ::OpenAPI::toJsonValue(m_cadence_framework_id));
    }
    if (m_cadence_function_isSet) {
        obj.insert(QString("cadence_function"), ::OpenAPI::toJsonValue(m_cadence_function));
    }
    if (m_cadence_priority.isSet()) {
        obj.insert(QString("cadence_priority"), ::OpenAPI::toJsonValue(m_cadence_priority));
    }
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_external_identifier_isSet) {
        obj.insert(QString("external_identifier"), ::OpenAPI::toJsonValue(m_external_identifier));
    }
    if (m_finished_stage.isSet()) {
        obj.insert(QString("finished_stage"), ::OpenAPI::toJsonValue(m_finished_stage));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_opt_out_link_included_isSet) {
        obj.insert(QString("opt_out_link_included"), ::OpenAPI::toJsonValue(m_opt_out_link_included));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_remove_bounces_enabled_isSet) {
        obj.insert(QString("remove_bounces_enabled"), ::OpenAPI::toJsonValue(m_remove_bounces_enabled));
    }
    if (m_remove_replies_enabled_isSet) {
        obj.insert(QString("remove_replies_enabled"), ::OpenAPI::toJsonValue(m_remove_replies_enabled));
    }
    if (m_replied_stage.isSet()) {
        obj.insert(QString("replied_stage"), ::OpenAPI::toJsonValue(m_replied_stage));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_team_cadence_isSet) {
        obj.insert(QString("team_cadence"), ::OpenAPI::toJsonValue(m_team_cadence));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIEmbeddedResource OAICadence::getAddedStage() const {
    return m_added_stage;
}
void OAICadence::setAddedStage(const OAIEmbeddedResource &added_stage) {
    m_added_stage = added_stage;
    m_added_stage_isSet = true;
}

bool OAICadence::is_added_stage_Set() const{
    return m_added_stage_isSet;
}

bool OAICadence::is_added_stage_Valid() const{
    return m_added_stage_isValid;
}

QDateTime OAICadence::getArchivedAt() const {
    return m_archived_at;
}
void OAICadence::setArchivedAt(const QDateTime &archived_at) {
    m_archived_at = archived_at;
    m_archived_at_isSet = true;
}

bool OAICadence::is_archived_at_Set() const{
    return m_archived_at_isSet;
}

bool OAICadence::is_archived_at_Valid() const{
    return m_archived_at_isValid;
}

OAIEmbeddedResource OAICadence::getBouncedStage() const {
    return m_bounced_stage;
}
void OAICadence::setBouncedStage(const OAIEmbeddedResource &bounced_stage) {
    m_bounced_stage = bounced_stage;
    m_bounced_stage_isSet = true;
}

bool OAICadence::is_bounced_stage_Set() const{
    return m_bounced_stage_isSet;
}

bool OAICadence::is_bounced_stage_Valid() const{
    return m_bounced_stage_isValid;
}

qint32 OAICadence::getCadenceFrameworkId() const {
    return m_cadence_framework_id;
}
void OAICadence::setCadenceFrameworkId(const qint32 &cadence_framework_id) {
    m_cadence_framework_id = cadence_framework_id;
    m_cadence_framework_id_isSet = true;
}

bool OAICadence::is_cadence_framework_id_Set() const{
    return m_cadence_framework_id_isSet;
}

bool OAICadence::is_cadence_framework_id_Valid() const{
    return m_cadence_framework_id_isValid;
}

QString OAICadence::getCadenceFunction() const {
    return m_cadence_function;
}
void OAICadence::setCadenceFunction(const QString &cadence_function) {
    m_cadence_function = cadence_function;
    m_cadence_function_isSet = true;
}

bool OAICadence::is_cadence_function_Set() const{
    return m_cadence_function_isSet;
}

bool OAICadence::is_cadence_function_Valid() const{
    return m_cadence_function_isValid;
}

OAIEmbeddedResource OAICadence::getCadencePriority() const {
    return m_cadence_priority;
}
void OAICadence::setCadencePriority(const OAIEmbeddedResource &cadence_priority) {
    m_cadence_priority = cadence_priority;
    m_cadence_priority_isSet = true;
}

bool OAICadence::is_cadence_priority_Set() const{
    return m_cadence_priority_isSet;
}

bool OAICadence::is_cadence_priority_Valid() const{
    return m_cadence_priority_isValid;
}

OAICadenceCounts OAICadence::getCounts() const {
    return m_counts;
}
void OAICadence::setCounts(const OAICadenceCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAICadence::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAICadence::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAICadence::getCreatedAt() const {
    return m_created_at;
}
void OAICadence::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICadence::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICadence::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEmbeddedResource OAICadence::getCreator() const {
    return m_creator;
}
void OAICadence::setCreator(const OAIEmbeddedResource &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAICadence::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAICadence::is_creator_Valid() const{
    return m_creator_isValid;
}

bool OAICadence::isDraft() const {
    return m_draft;
}
void OAICadence::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAICadence::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAICadence::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAICadence::getExternalIdentifier() const {
    return m_external_identifier;
}
void OAICadence::setExternalIdentifier(const QString &external_identifier) {
    m_external_identifier = external_identifier;
    m_external_identifier_isSet = true;
}

bool OAICadence::is_external_identifier_Set() const{
    return m_external_identifier_isSet;
}

bool OAICadence::is_external_identifier_Valid() const{
    return m_external_identifier_isValid;
}

OAIEmbeddedResource OAICadence::getFinishedStage() const {
    return m_finished_stage;
}
void OAICadence::setFinishedStage(const OAIEmbeddedResource &finished_stage) {
    m_finished_stage = finished_stage;
    m_finished_stage_isSet = true;
}

bool OAICadence::is_finished_stage_Set() const{
    return m_finished_stage_isSet;
}

bool OAICadence::is_finished_stage_Valid() const{
    return m_finished_stage_isValid;
}

QList<OAIEmbeddedResource> OAICadence::getGroups() const {
    return m_groups;
}
void OAICadence::setGroups(const QList<OAIEmbeddedResource> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAICadence::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAICadence::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAICadence::getId() const {
    return m_id;
}
void OAICadence::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICadence::is_id_Set() const{
    return m_id_isSet;
}

bool OAICadence::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICadence::getName() const {
    return m_name;
}
void OAICadence::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICadence::is_name_Set() const{
    return m_name_isSet;
}

bool OAICadence::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICadence::isOptOutLinkIncluded() const {
    return m_opt_out_link_included;
}
void OAICadence::setOptOutLinkIncluded(const bool &opt_out_link_included) {
    m_opt_out_link_included = opt_out_link_included;
    m_opt_out_link_included_isSet = true;
}

bool OAICadence::is_opt_out_link_included_Set() const{
    return m_opt_out_link_included_isSet;
}

bool OAICadence::is_opt_out_link_included_Valid() const{
    return m_opt_out_link_included_isValid;
}

OAIEmbeddedResource OAICadence::getOwner() const {
    return m_owner;
}
void OAICadence::setOwner(const OAIEmbeddedResource &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAICadence::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAICadence::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAICadence::isRemoveBouncesEnabled() const {
    return m_remove_bounces_enabled;
}
void OAICadence::setRemoveBouncesEnabled(const bool &remove_bounces_enabled) {
    m_remove_bounces_enabled = remove_bounces_enabled;
    m_remove_bounces_enabled_isSet = true;
}

bool OAICadence::is_remove_bounces_enabled_Set() const{
    return m_remove_bounces_enabled_isSet;
}

bool OAICadence::is_remove_bounces_enabled_Valid() const{
    return m_remove_bounces_enabled_isValid;
}

bool OAICadence::isRemoveRepliesEnabled() const {
    return m_remove_replies_enabled;
}
void OAICadence::setRemoveRepliesEnabled(const bool &remove_replies_enabled) {
    m_remove_replies_enabled = remove_replies_enabled;
    m_remove_replies_enabled_isSet = true;
}

bool OAICadence::is_remove_replies_enabled_Set() const{
    return m_remove_replies_enabled_isSet;
}

bool OAICadence::is_remove_replies_enabled_Valid() const{
    return m_remove_replies_enabled_isValid;
}

OAIEmbeddedResource OAICadence::getRepliedStage() const {
    return m_replied_stage;
}
void OAICadence::setRepliedStage(const OAIEmbeddedResource &replied_stage) {
    m_replied_stage = replied_stage;
    m_replied_stage_isSet = true;
}

bool OAICadence::is_replied_stage_Set() const{
    return m_replied_stage_isSet;
}

bool OAICadence::is_replied_stage_Valid() const{
    return m_replied_stage_isValid;
}

bool OAICadence::isShared() const {
    return m_shared;
}
void OAICadence::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAICadence::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAICadence::is_shared_Valid() const{
    return m_shared_isValid;
}

QList<QString> OAICadence::getTags() const {
    return m_tags;
}
void OAICadence::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICadence::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICadence::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICadence::isTeamCadence() const {
    return m_team_cadence;
}
void OAICadence::setTeamCadence(const bool &team_cadence) {
    m_team_cadence = team_cadence;
    m_team_cadence_isSet = true;
}

bool OAICadence::is_team_cadence_Set() const{
    return m_team_cadence_isSet;
}

bool OAICadence::is_team_cadence_Valid() const{
    return m_team_cadence_isValid;
}

QDateTime OAICadence::getUpdatedAt() const {
    return m_updated_at;
}
void OAICadence::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICadence::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICadence::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICadence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_archived_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounced_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence_framework_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_link_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_bounces_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_replies_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replied_stage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_cadence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICadence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
