/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccess::OAISuccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccess::OAISuccess() {
    this->initializeModel();
}

OAISuccess::~OAISuccess() {}

void OAISuccess::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_latest_action_isSet = false;
    m_latest_action_isValid = false;

    m_latest_cadence_isSet = false;
    m_latest_cadence_isValid = false;

    m_latest_call_isSet = false;
    m_latest_call_isValid = false;

    m_latest_email_isSet = false;
    m_latest_email_isValid = false;

    m_latest_step_isSet = false;
    m_latest_step_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_succeeded_at_isSet = false;
    m_succeeded_at_isValid = false;

    m_success_window_started_at_isSet = false;
    m_success_window_started_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISuccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccess::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_latest_action_isValid = ::OpenAPI::fromJsonValue(m_latest_action, json[QString("latest_action")]);
    m_latest_action_isSet = !json[QString("latest_action")].isNull() && m_latest_action_isValid;

    m_latest_cadence_isValid = ::OpenAPI::fromJsonValue(m_latest_cadence, json[QString("latest_cadence")]);
    m_latest_cadence_isSet = !json[QString("latest_cadence")].isNull() && m_latest_cadence_isValid;

    m_latest_call_isValid = ::OpenAPI::fromJsonValue(m_latest_call, json[QString("latest_call")]);
    m_latest_call_isSet = !json[QString("latest_call")].isNull() && m_latest_call_isValid;

    m_latest_email_isValid = ::OpenAPI::fromJsonValue(m_latest_email, json[QString("latest_email")]);
    m_latest_email_isSet = !json[QString("latest_email")].isNull() && m_latest_email_isValid;

    m_latest_step_isValid = ::OpenAPI::fromJsonValue(m_latest_step, json[QString("latest_step")]);
    m_latest_step_isSet = !json[QString("latest_step")].isNull() && m_latest_step_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_succeeded_at_isValid = ::OpenAPI::fromJsonValue(m_succeeded_at, json[QString("succeeded_at")]);
    m_succeeded_at_isSet = !json[QString("succeeded_at")].isNull() && m_succeeded_at_isValid;

    m_success_window_started_at_isValid = ::OpenAPI::fromJsonValue(m_success_window_started_at, json[QString("success_window_started_at")]);
    m_success_window_started_at_isSet = !json[QString("success_window_started_at")].isNull() && m_success_window_started_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISuccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccess::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.isSet()) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_latest_action.isSet()) {
        obj.insert(QString("latest_action"), ::OpenAPI::toJsonValue(m_latest_action));
    }
    if (m_latest_cadence.isSet()) {
        obj.insert(QString("latest_cadence"), ::OpenAPI::toJsonValue(m_latest_cadence));
    }
    if (m_latest_call.isSet()) {
        obj.insert(QString("latest_call"), ::OpenAPI::toJsonValue(m_latest_call));
    }
    if (m_latest_email.isSet()) {
        obj.insert(QString("latest_email"), ::OpenAPI::toJsonValue(m_latest_email));
    }
    if (m_latest_step.isSet()) {
        obj.insert(QString("latest_step"), ::OpenAPI::toJsonValue(m_latest_step));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_succeeded_at_isSet) {
        obj.insert(QString("succeeded_at"), ::OpenAPI::toJsonValue(m_succeeded_at));
    }
    if (m_success_window_started_at_isSet) {
        obj.insert(QString("success_window_started_at"), ::OpenAPI::toJsonValue(m_success_window_started_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAISuccessCounts OAISuccess::getCounts() const {
    return m_counts;
}
void OAISuccess::setCounts(const OAISuccessCounts &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAISuccess::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAISuccess::is_counts_Valid() const{
    return m_counts_isValid;
}

QDateTime OAISuccess::getCreatedAt() const {
    return m_created_at;
}
void OAISuccess::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISuccess::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISuccess::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAISuccess::getId() const {
    return m_id;
}
void OAISuccess::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISuccess::is_id_Set() const{
    return m_id_isSet;
}

bool OAISuccess::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAISuccess::getLatestAction() const {
    return m_latest_action;
}
void OAISuccess::setLatestAction(const OAIEmbeddedResource &latest_action) {
    m_latest_action = latest_action;
    m_latest_action_isSet = true;
}

bool OAISuccess::is_latest_action_Set() const{
    return m_latest_action_isSet;
}

bool OAISuccess::is_latest_action_Valid() const{
    return m_latest_action_isValid;
}

OAIEmbeddedResource OAISuccess::getLatestCadence() const {
    return m_latest_cadence;
}
void OAISuccess::setLatestCadence(const OAIEmbeddedResource &latest_cadence) {
    m_latest_cadence = latest_cadence;
    m_latest_cadence_isSet = true;
}

bool OAISuccess::is_latest_cadence_Set() const{
    return m_latest_cadence_isSet;
}

bool OAISuccess::is_latest_cadence_Valid() const{
    return m_latest_cadence_isValid;
}

OAIEmbeddedResource OAISuccess::getLatestCall() const {
    return m_latest_call;
}
void OAISuccess::setLatestCall(const OAIEmbeddedResource &latest_call) {
    m_latest_call = latest_call;
    m_latest_call_isSet = true;
}

bool OAISuccess::is_latest_call_Set() const{
    return m_latest_call_isSet;
}

bool OAISuccess::is_latest_call_Valid() const{
    return m_latest_call_isValid;
}

OAIEmbeddedResource OAISuccess::getLatestEmail() const {
    return m_latest_email;
}
void OAISuccess::setLatestEmail(const OAIEmbeddedResource &latest_email) {
    m_latest_email = latest_email;
    m_latest_email_isSet = true;
}

bool OAISuccess::is_latest_email_Set() const{
    return m_latest_email_isSet;
}

bool OAISuccess::is_latest_email_Valid() const{
    return m_latest_email_isValid;
}

OAIEmbeddedResource OAISuccess::getLatestStep() const {
    return m_latest_step;
}
void OAISuccess::setLatestStep(const OAIEmbeddedResource &latest_step) {
    m_latest_step = latest_step;
    m_latest_step_isSet = true;
}

bool OAISuccess::is_latest_step_Set() const{
    return m_latest_step_isSet;
}

bool OAISuccess::is_latest_step_Valid() const{
    return m_latest_step_isValid;
}

OAIEmbeddedResource OAISuccess::getPerson() const {
    return m_person;
}
void OAISuccess::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAISuccess::is_person_Set() const{
    return m_person_isSet;
}

bool OAISuccess::is_person_Valid() const{
    return m_person_isValid;
}

QDateTime OAISuccess::getSucceededAt() const {
    return m_succeeded_at;
}
void OAISuccess::setSucceededAt(const QDateTime &succeeded_at) {
    m_succeeded_at = succeeded_at;
    m_succeeded_at_isSet = true;
}

bool OAISuccess::is_succeeded_at_Set() const{
    return m_succeeded_at_isSet;
}

bool OAISuccess::is_succeeded_at_Valid() const{
    return m_succeeded_at_isValid;
}

QDateTime OAISuccess::getSuccessWindowStartedAt() const {
    return m_success_window_started_at;
}
void OAISuccess::setSuccessWindowStartedAt(const QDateTime &success_window_started_at) {
    m_success_window_started_at = success_window_started_at;
    m_success_window_started_at_isSet = true;
}

bool OAISuccess::is_success_window_started_at_Set() const{
    return m_success_window_started_at_isSet;
}

bool OAISuccess::is_success_window_started_at_Valid() const{
    return m_success_window_started_at_isValid;
}

QDateTime OAISuccess::getUpdatedAt() const {
    return m_updated_at;
}
void OAISuccess::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISuccess::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISuccess::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAISuccess::getUser() const {
    return m_user;
}
void OAISuccess::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISuccess::is_user_Set() const{
    return m_user_isSet;
}

bool OAISuccess::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISuccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_succeeded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_window_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
