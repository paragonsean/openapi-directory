/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkJob::OAIBulkJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkJob::OAIBulkJob() {
    this->initializeModel();
}

OAIBulkJob::~OAIBulkJob() {}

void OAIBulkJob::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_marked_ready_at_isSet = false;
    m_marked_ready_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_processed_isSet = false;
    m_processed_isValid = false;

    m_ready_to_execute_isSet = false;
    m_ready_to_execute_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIBulkJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkJob::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finished_at")]);
    m_finished_at_isSet = !json[QString("finished_at")].isNull() && m_finished_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_marked_ready_at_isValid = ::OpenAPI::fromJsonValue(m_marked_ready_at, json[QString("marked_ready_at")]);
    m_marked_ready_at_isSet = !json[QString("marked_ready_at")].isNull() && m_marked_ready_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_processed_isValid = ::OpenAPI::fromJsonValue(m_processed, json[QString("processed")]);
    m_processed_isSet = !json[QString("processed")].isNull() && m_processed_isValid;

    m_ready_to_execute_isValid = ::OpenAPI::fromJsonValue(m_ready_to_execute, json[QString("ready_to_execute")]);
    m_ready_to_execute_isSet = !json[QString("ready_to_execute")].isNull() && m_ready_to_execute_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIBulkJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkJob::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_errors_isSet) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finished_at"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_marked_ready_at_isSet) {
        obj.insert(QString("marked_ready_at"), ::OpenAPI::toJsonValue(m_marked_ready_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_processed_isSet) {
        obj.insert(QString("processed"), ::OpenAPI::toJsonValue(m_processed));
    }
    if (m_ready_to_execute_isSet) {
        obj.insert(QString("ready_to_execute"), ::OpenAPI::toJsonValue(m_ready_to_execute));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIBulkJob::getCreatedAt() const {
    return m_created_at;
}
void OAIBulkJob::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBulkJob::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBulkJob::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIBulkJob::getErrors() const {
    return m_errors;
}
void OAIBulkJob::setErrors(const qint32 &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBulkJob::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBulkJob::is_errors_Valid() const{
    return m_errors_isValid;
}

QDateTime OAIBulkJob::getFinishedAt() const {
    return m_finished_at;
}
void OAIBulkJob::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAIBulkJob::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAIBulkJob::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

qint32 OAIBulkJob::getId() const {
    return m_id;
}
void OAIBulkJob::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBulkJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBulkJob::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIBulkJob::getMarkedReadyAt() const {
    return m_marked_ready_at;
}
void OAIBulkJob::setMarkedReadyAt(const QDateTime &marked_ready_at) {
    m_marked_ready_at = marked_ready_at;
    m_marked_ready_at_isSet = true;
}

bool OAIBulkJob::is_marked_ready_at_Set() const{
    return m_marked_ready_at_isSet;
}

bool OAIBulkJob::is_marked_ready_at_Valid() const{
    return m_marked_ready_at_isValid;
}

QString OAIBulkJob::getName() const {
    return m_name;
}
void OAIBulkJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBulkJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBulkJob::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBulkJob::getProcessed() const {
    return m_processed;
}
void OAIBulkJob::setProcessed(const qint32 &processed) {
    m_processed = processed;
    m_processed_isSet = true;
}

bool OAIBulkJob::is_processed_Set() const{
    return m_processed_isSet;
}

bool OAIBulkJob::is_processed_Valid() const{
    return m_processed_isValid;
}

bool OAIBulkJob::isReadyToExecute() const {
    return m_ready_to_execute;
}
void OAIBulkJob::setReadyToExecute(const bool &ready_to_execute) {
    m_ready_to_execute = ready_to_execute;
    m_ready_to_execute_isSet = true;
}

bool OAIBulkJob::is_ready_to_execute_Set() const{
    return m_ready_to_execute_isSet;
}

bool OAIBulkJob::is_ready_to_execute_Valid() const{
    return m_ready_to_execute_isValid;
}

QList<QJsonValue> OAIBulkJob::getScopes() const {
    return m_scopes;
}
void OAIBulkJob::setScopes(const QList<QJsonValue> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIBulkJob::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIBulkJob::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QDateTime OAIBulkJob::getStartedAt() const {
    return m_started_at;
}
void OAIBulkJob::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIBulkJob::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIBulkJob::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIBulkJob::getState() const {
    return m_state;
}
void OAIBulkJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBulkJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBulkJob::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIBulkJob::getTotal() const {
    return m_total;
}
void OAIBulkJob::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIBulkJob::is_total_Set() const{
    return m_total_isSet;
}

bool OAIBulkJob::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIBulkJob::getType() const {
    return m_type;
}
void OAIBulkJob::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBulkJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBulkJob::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIBulkJob::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBulkJob::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBulkJob::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBulkJob::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIBulkJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marked_ready_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ready_to_execute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
