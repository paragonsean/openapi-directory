/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailTemplateCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailTemplateCounts::OAIEmailTemplateCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailTemplateCounts::OAIEmailTemplateCounts() {
    this->initializeModel();
}

OAIEmailTemplateCounts::~OAIEmailTemplateCounts() {}

void OAIEmailTemplateCounts::initializeModel() {

    m_bounces_isSet = false;
    m_bounces_isValid = false;

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_sent_emails_isSet = false;
    m_sent_emails_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIEmailTemplateCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailTemplateCounts::fromJsonObject(QJsonObject json) {

    m_bounces_isValid = ::OpenAPI::fromJsonValue(m_bounces, json[QString("bounces")]);
    m_bounces_isSet = !json[QString("bounces")].isNull() && m_bounces_isValid;

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_sent_emails_isValid = ::OpenAPI::fromJsonValue(m_sent_emails, json[QString("sent_emails")]);
    m_sent_emails_isSet = !json[QString("sent_emails")].isNull() && m_sent_emails_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIEmailTemplateCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailTemplateCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_bounces_isSet) {
        obj.insert(QString("bounces"), ::OpenAPI::toJsonValue(m_bounces));
    }
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_replies_isSet) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_sent_emails_isSet) {
        obj.insert(QString("sent_emails"), ::OpenAPI::toJsonValue(m_sent_emails));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

qint32 OAIEmailTemplateCounts::getBounces() const {
    return m_bounces;
}
void OAIEmailTemplateCounts::setBounces(const qint32 &bounces) {
    m_bounces = bounces;
    m_bounces_isSet = true;
}

bool OAIEmailTemplateCounts::is_bounces_Set() const{
    return m_bounces_isSet;
}

bool OAIEmailTemplateCounts::is_bounces_Valid() const{
    return m_bounces_isValid;
}

qint32 OAIEmailTemplateCounts::getClicks() const {
    return m_clicks;
}
void OAIEmailTemplateCounts::setClicks(const qint32 &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIEmailTemplateCounts::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIEmailTemplateCounts::is_clicks_Valid() const{
    return m_clicks_isValid;
}

qint32 OAIEmailTemplateCounts::getReplies() const {
    return m_replies;
}
void OAIEmailTemplateCounts::setReplies(const qint32 &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIEmailTemplateCounts::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIEmailTemplateCounts::is_replies_Valid() const{
    return m_replies_isValid;
}

qint32 OAIEmailTemplateCounts::getSentEmails() const {
    return m_sent_emails;
}
void OAIEmailTemplateCounts::setSentEmails(const qint32 &sent_emails) {
    m_sent_emails = sent_emails;
    m_sent_emails_isSet = true;
}

bool OAIEmailTemplateCounts::is_sent_emails_Set() const{
    return m_sent_emails_isSet;
}

bool OAIEmailTemplateCounts::is_sent_emails_Valid() const{
    return m_sent_emails_isValid;
}

qint32 OAIEmailTemplateCounts::getViews() const {
    return m_views;
}
void OAIEmailTemplateCounts::setViews(const qint32 &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIEmailTemplateCounts::is_views_Set() const{
    return m_views_isSet;
}

bool OAIEmailTemplateCounts::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIEmailTemplateCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_emails_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailTemplateCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
