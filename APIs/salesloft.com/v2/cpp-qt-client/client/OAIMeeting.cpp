/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeeting::OAIMeeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeeting::OAIMeeting() {
    this->initializeModel();
}

OAIMeeting::~OAIMeeting() {}

void OAIMeeting::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_all_day_isSet = false;
    m_all_day_isValid = false;

    m_attendees_isSet = false;
    m_attendees_isValid = false;

    m_booked_by_meetings_settings_isSet = false;
    m_booked_by_meetings_settings_isValid = false;

    m_booked_by_user_isSet = false;
    m_booked_by_user_isValid = false;

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_calendar_type_isSet = false;
    m_calendar_type_isValid = false;

    m_canceled_at_isSet = false;
    m_canceled_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_crm_custom_fields_isSet = false;
    m_crm_custom_fields_isValid = false;

    m_crm_references_isSet = false;
    m_crm_references_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_guests_isSet = false;
    m_guests_isValid = false;

    m_i_cal_uid_isSet = false;
    m_i_cal_uid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_meeting_type_isSet = false;
    m_meeting_type_isValid = false;

    m_no_show_isSet = false;
    m_no_show_isValid = false;

    m_owned_by_meetings_settings_isSet = false;
    m_owned_by_meetings_settings_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_recipient_email_isSet = false;
    m_recipient_email_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_reschedule_status_isSet = false;
    m_reschedule_status_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_strict_attribution_isSet = false;
    m_strict_attribution_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIMeeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeeting::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_all_day_isValid = ::OpenAPI::fromJsonValue(m_all_day, json[QString("all_day")]);
    m_all_day_isSet = !json[QString("all_day")].isNull() && m_all_day_isValid;

    m_attendees_isValid = ::OpenAPI::fromJsonValue(m_attendees, json[QString("attendees")]);
    m_attendees_isSet = !json[QString("attendees")].isNull() && m_attendees_isValid;

    m_booked_by_meetings_settings_isValid = ::OpenAPI::fromJsonValue(m_booked_by_meetings_settings, json[QString("booked_by_meetings_settings")]);
    m_booked_by_meetings_settings_isSet = !json[QString("booked_by_meetings_settings")].isNull() && m_booked_by_meetings_settings_isValid;

    m_booked_by_user_isValid = ::OpenAPI::fromJsonValue(m_booked_by_user, json[QString("booked_by_user")]);
    m_booked_by_user_isSet = !json[QString("booked_by_user")].isNull() && m_booked_by_user_isValid;

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendar_id")]);
    m_calendar_id_isSet = !json[QString("calendar_id")].isNull() && m_calendar_id_isValid;

    m_calendar_type_isValid = ::OpenAPI::fromJsonValue(m_calendar_type, json[QString("calendar_type")]);
    m_calendar_type_isSet = !json[QString("calendar_type")].isNull() && m_calendar_type_isValid;

    m_canceled_at_isValid = ::OpenAPI::fromJsonValue(m_canceled_at, json[QString("canceled_at")]);
    m_canceled_at_isSet = !json[QString("canceled_at")].isNull() && m_canceled_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_crm_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_crm_custom_fields, json[QString("crm_custom_fields")]);
    m_crm_custom_fields_isSet = !json[QString("crm_custom_fields")].isNull() && m_crm_custom_fields_isValid;

    m_crm_references_isValid = ::OpenAPI::fromJsonValue(m_crm_references, json[QString("crm_references")]);
    m_crm_references_isSet = !json[QString("crm_references")].isNull() && m_crm_references_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("end_time")]);
    m_end_time_isSet = !json[QString("end_time")].isNull() && m_end_time_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("event_source")]);
    m_event_source_isSet = !json[QString("event_source")].isNull() && m_event_source_isValid;

    m_guests_isValid = ::OpenAPI::fromJsonValue(m_guests, json[QString("guests")]);
    m_guests_isSet = !json[QString("guests")].isNull() && m_guests_isValid;

    m_i_cal_uid_isValid = ::OpenAPI::fromJsonValue(m_i_cal_uid, json[QString("i_cal_uid")]);
    m_i_cal_uid_isSet = !json[QString("i_cal_uid")].isNull() && m_i_cal_uid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_meeting_type_isValid = ::OpenAPI::fromJsonValue(m_meeting_type, json[QString("meeting_type")]);
    m_meeting_type_isSet = !json[QString("meeting_type")].isNull() && m_meeting_type_isValid;

    m_no_show_isValid = ::OpenAPI::fromJsonValue(m_no_show, json[QString("no_show")]);
    m_no_show_isSet = !json[QString("no_show")].isNull() && m_no_show_isValid;

    m_owned_by_meetings_settings_isValid = ::OpenAPI::fromJsonValue(m_owned_by_meetings_settings, json[QString("owned_by_meetings_settings")]);
    m_owned_by_meetings_settings_isSet = !json[QString("owned_by_meetings_settings")].isNull() && m_owned_by_meetings_settings_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_recipient_email_isValid = ::OpenAPI::fromJsonValue(m_recipient_email, json[QString("recipient_email")]);
    m_recipient_email_isSet = !json[QString("recipient_email")].isNull() && m_recipient_email_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_reschedule_status_isValid = ::OpenAPI::fromJsonValue(m_reschedule_status, json[QString("reschedule_status")]);
    m_reschedule_status_isSet = !json[QString("reschedule_status")].isNull() && m_reschedule_status_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("start_time")]);
    m_start_time_isSet = !json[QString("start_time")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_strict_attribution_isValid = ::OpenAPI::fromJsonValue(m_strict_attribution, json[QString("strict_attribution")]);
    m_strict_attribution_isSet = !json[QString("strict_attribution")].isNull() && m_strict_attribution_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIMeeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeeting::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_all_day_isSet) {
        obj.insert(QString("all_day"), ::OpenAPI::toJsonValue(m_all_day));
    }
    if (m_attendees.size() > 0) {
        obj.insert(QString("attendees"), ::OpenAPI::toJsonValue(m_attendees));
    }
    if (m_booked_by_meetings_settings.isSet()) {
        obj.insert(QString("booked_by_meetings_settings"), ::OpenAPI::toJsonValue(m_booked_by_meetings_settings));
    }
    if (m_booked_by_user.isSet()) {
        obj.insert(QString("booked_by_user"), ::OpenAPI::toJsonValue(m_booked_by_user));
    }
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendar_id"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_calendar_type_isSet) {
        obj.insert(QString("calendar_type"), ::OpenAPI::toJsonValue(m_calendar_type));
    }
    if (m_canceled_at_isSet) {
        obj.insert(QString("canceled_at"), ::OpenAPI::toJsonValue(m_canceled_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_crm_custom_fields_isSet) {
        obj.insert(QString("crm_custom_fields"), ::OpenAPI::toJsonValue(m_crm_custom_fields));
    }
    if (m_crm_references_isSet) {
        obj.insert(QString("crm_references"), ::OpenAPI::toJsonValue(m_crm_references));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("end_time"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("event_source"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_guests.size() > 0) {
        obj.insert(QString("guests"), ::OpenAPI::toJsonValue(m_guests));
    }
    if (m_i_cal_uid_isSet) {
        obj.insert(QString("i_cal_uid"), ::OpenAPI::toJsonValue(m_i_cal_uid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_meeting_type_isSet) {
        obj.insert(QString("meeting_type"), ::OpenAPI::toJsonValue(m_meeting_type));
    }
    if (m_no_show_isSet) {
        obj.insert(QString("no_show"), ::OpenAPI::toJsonValue(m_no_show));
    }
    if (m_owned_by_meetings_settings.isSet()) {
        obj.insert(QString("owned_by_meetings_settings"), ::OpenAPI::toJsonValue(m_owned_by_meetings_settings));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_recipient_email_isSet) {
        obj.insert(QString("recipient_email"), ::OpenAPI::toJsonValue(m_recipient_email));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_reschedule_status_isSet) {
        obj.insert(QString("reschedule_status"), ::OpenAPI::toJsonValue(m_reschedule_status));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("start_time"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_step.isSet()) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_strict_attribution_isSet) {
        obj.insert(QString("strict_attribution"), ::OpenAPI::toJsonValue(m_strict_attribution));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIMeeting::getAccountId() const {
    return m_account_id;
}
void OAIMeeting::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMeeting::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMeeting::is_account_id_Valid() const{
    return m_account_id_isValid;
}

bool OAIMeeting::isAllDay() const {
    return m_all_day;
}
void OAIMeeting::setAllDay(const bool &all_day) {
    m_all_day = all_day;
    m_all_day_isSet = true;
}

bool OAIMeeting::is_all_day_Set() const{
    return m_all_day_isSet;
}

bool OAIMeeting::is_all_day_Valid() const{
    return m_all_day_isValid;
}

QList<OAIEmbeddedAttendeeResource> OAIMeeting::getAttendees() const {
    return m_attendees;
}
void OAIMeeting::setAttendees(const QList<OAIEmbeddedAttendeeResource> &attendees) {
    m_attendees = attendees;
    m_attendees_isSet = true;
}

bool OAIMeeting::is_attendees_Set() const{
    return m_attendees_isSet;
}

bool OAIMeeting::is_attendees_Valid() const{
    return m_attendees_isValid;
}

OAIEventMeetingSetting OAIMeeting::getBookedByMeetingsSettings() const {
    return m_booked_by_meetings_settings;
}
void OAIMeeting::setBookedByMeetingsSettings(const OAIEventMeetingSetting &booked_by_meetings_settings) {
    m_booked_by_meetings_settings = booked_by_meetings_settings;
    m_booked_by_meetings_settings_isSet = true;
}

bool OAIMeeting::is_booked_by_meetings_settings_Set() const{
    return m_booked_by_meetings_settings_isSet;
}

bool OAIMeeting::is_booked_by_meetings_settings_Valid() const{
    return m_booked_by_meetings_settings_isValid;
}

OAIEmbeddedResource OAIMeeting::getBookedByUser() const {
    return m_booked_by_user;
}
void OAIMeeting::setBookedByUser(const OAIEmbeddedResource &booked_by_user) {
    m_booked_by_user = booked_by_user;
    m_booked_by_user_isSet = true;
}

bool OAIMeeting::is_booked_by_user_Set() const{
    return m_booked_by_user_isSet;
}

bool OAIMeeting::is_booked_by_user_Valid() const{
    return m_booked_by_user_isValid;
}

OAIEmbeddedResource OAIMeeting::getCadence() const {
    return m_cadence;
}
void OAIMeeting::setCadence(const OAIEmbeddedResource &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAIMeeting::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAIMeeting::is_cadence_Valid() const{
    return m_cadence_isValid;
}

QString OAIMeeting::getCalendarId() const {
    return m_calendar_id;
}
void OAIMeeting::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAIMeeting::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAIMeeting::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAIMeeting::getCalendarType() const {
    return m_calendar_type;
}
void OAIMeeting::setCalendarType(const QString &calendar_type) {
    m_calendar_type = calendar_type;
    m_calendar_type_isSet = true;
}

bool OAIMeeting::is_calendar_type_Set() const{
    return m_calendar_type_isSet;
}

bool OAIMeeting::is_calendar_type_Valid() const{
    return m_calendar_type_isValid;
}

QDate OAIMeeting::getCanceledAt() const {
    return m_canceled_at;
}
void OAIMeeting::setCanceledAt(const QDate &canceled_at) {
    m_canceled_at = canceled_at;
    m_canceled_at_isSet = true;
}

bool OAIMeeting::is_canceled_at_Set() const{
    return m_canceled_at_isSet;
}

bool OAIMeeting::is_canceled_at_Valid() const{
    return m_canceled_at_isValid;
}

QDate OAIMeeting::getCreatedAt() const {
    return m_created_at;
}
void OAIMeeting::setCreatedAt(const QDate &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMeeting::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMeeting::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIMeeting::getCrmCustomFields() const {
    return m_crm_custom_fields;
}
void OAIMeeting::setCrmCustomFields(const OAIObject &crm_custom_fields) {
    m_crm_custom_fields = crm_custom_fields;
    m_crm_custom_fields_isSet = true;
}

bool OAIMeeting::is_crm_custom_fields_Set() const{
    return m_crm_custom_fields_isSet;
}

bool OAIMeeting::is_crm_custom_fields_Valid() const{
    return m_crm_custom_fields_isValid;
}

OAIObject OAIMeeting::getCrmReferences() const {
    return m_crm_references;
}
void OAIMeeting::setCrmReferences(const OAIObject &crm_references) {
    m_crm_references = crm_references;
    m_crm_references_isSet = true;
}

bool OAIMeeting::is_crm_references_Set() const{
    return m_crm_references_isSet;
}

bool OAIMeeting::is_crm_references_Valid() const{
    return m_crm_references_isValid;
}

QString OAIMeeting::getDescription() const {
    return m_description;
}
void OAIMeeting::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMeeting::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMeeting::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIMeeting::getEndTime() const {
    return m_end_time;
}
void OAIMeeting::setEndTime(const QDate &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMeeting::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMeeting::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMeeting::getEventId() const {
    return m_event_id;
}
void OAIMeeting::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIMeeting::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIMeeting::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIMeeting::getEventSource() const {
    return m_event_source;
}
void OAIMeeting::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIMeeting::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIMeeting::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QList<QString> OAIMeeting::getGuests() const {
    return m_guests;
}
void OAIMeeting::setGuests(const QList<QString> &guests) {
    m_guests = guests;
    m_guests_isSet = true;
}

bool OAIMeeting::is_guests_Set() const{
    return m_guests_isSet;
}

bool OAIMeeting::is_guests_Valid() const{
    return m_guests_isValid;
}

QString OAIMeeting::getICalUid() const {
    return m_i_cal_uid;
}
void OAIMeeting::setICalUid(const QString &i_cal_uid) {
    m_i_cal_uid = i_cal_uid;
    m_i_cal_uid_isSet = true;
}

bool OAIMeeting::is_i_cal_uid_Set() const{
    return m_i_cal_uid_isSet;
}

bool OAIMeeting::is_i_cal_uid_Valid() const{
    return m_i_cal_uid_isValid;
}

qint32 OAIMeeting::getId() const {
    return m_id;
}
void OAIMeeting::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMeeting::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMeeting::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMeeting::getLocation() const {
    return m_location;
}
void OAIMeeting::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMeeting::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMeeting::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMeeting::getMeetingType() const {
    return m_meeting_type;
}
void OAIMeeting::setMeetingType(const QString &meeting_type) {
    m_meeting_type = meeting_type;
    m_meeting_type_isSet = true;
}

bool OAIMeeting::is_meeting_type_Set() const{
    return m_meeting_type_isSet;
}

bool OAIMeeting::is_meeting_type_Valid() const{
    return m_meeting_type_isValid;
}

bool OAIMeeting::isNoShow() const {
    return m_no_show;
}
void OAIMeeting::setNoShow(const bool &no_show) {
    m_no_show = no_show;
    m_no_show_isSet = true;
}

bool OAIMeeting::is_no_show_Set() const{
    return m_no_show_isSet;
}

bool OAIMeeting::is_no_show_Valid() const{
    return m_no_show_isValid;
}

OAIEventMeetingSetting OAIMeeting::getOwnedByMeetingsSettings() const {
    return m_owned_by_meetings_settings;
}
void OAIMeeting::setOwnedByMeetingsSettings(const OAIEventMeetingSetting &owned_by_meetings_settings) {
    m_owned_by_meetings_settings = owned_by_meetings_settings;
    m_owned_by_meetings_settings_isSet = true;
}

bool OAIMeeting::is_owned_by_meetings_settings_Set() const{
    return m_owned_by_meetings_settings_isSet;
}

bool OAIMeeting::is_owned_by_meetings_settings_Valid() const{
    return m_owned_by_meetings_settings_isValid;
}

OAIEmbeddedResource OAIMeeting::getPerson() const {
    return m_person;
}
void OAIMeeting::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIMeeting::is_person_Set() const{
    return m_person_isSet;
}

bool OAIMeeting::is_person_Valid() const{
    return m_person_isValid;
}

QString OAIMeeting::getRecipientEmail() const {
    return m_recipient_email;
}
void OAIMeeting::setRecipientEmail(const QString &recipient_email) {
    m_recipient_email = recipient_email;
    m_recipient_email_isSet = true;
}

bool OAIMeeting::is_recipient_email_Set() const{
    return m_recipient_email_isSet;
}

bool OAIMeeting::is_recipient_email_Valid() const{
    return m_recipient_email_isValid;
}

QString OAIMeeting::getRecipientName() const {
    return m_recipient_name;
}
void OAIMeeting::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIMeeting::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIMeeting::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIMeeting::getRescheduleStatus() const {
    return m_reschedule_status;
}
void OAIMeeting::setRescheduleStatus(const QString &reschedule_status) {
    m_reschedule_status = reschedule_status;
    m_reschedule_status_isSet = true;
}

bool OAIMeeting::is_reschedule_status_Set() const{
    return m_reschedule_status_isSet;
}

bool OAIMeeting::is_reschedule_status_Valid() const{
    return m_reschedule_status_isValid;
}

QDate OAIMeeting::getStartTime() const {
    return m_start_time;
}
void OAIMeeting::setStartTime(const QDate &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMeeting::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMeeting::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMeeting::getStatus() const {
    return m_status;
}
void OAIMeeting::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMeeting::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMeeting::is_status_Valid() const{
    return m_status_isValid;
}

OAIEmbeddedResource OAIMeeting::getStep() const {
    return m_step;
}
void OAIMeeting::setStep(const OAIEmbeddedResource &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIMeeting::is_step_Set() const{
    return m_step_isSet;
}

bool OAIMeeting::is_step_Valid() const{
    return m_step_isValid;
}

bool OAIMeeting::isStrictAttribution() const {
    return m_strict_attribution;
}
void OAIMeeting::setStrictAttribution(const bool &strict_attribution) {
    m_strict_attribution = strict_attribution;
    m_strict_attribution_isSet = true;
}

bool OAIMeeting::is_strict_attribution_Set() const{
    return m_strict_attribution_isSet;
}

bool OAIMeeting::is_strict_attribution_Valid() const{
    return m_strict_attribution_isValid;
}

QString OAIMeeting::getTaskId() const {
    return m_task_id;
}
void OAIMeeting::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIMeeting::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIMeeting::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAIMeeting::getTitle() const {
    return m_title;
}
void OAIMeeting::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIMeeting::is_title_Set() const{
    return m_title_isSet;
}

bool OAIMeeting::is_title_Valid() const{
    return m_title_isValid;
}

QDate OAIMeeting::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMeeting::setUpdatedAt(const QDate &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMeeting::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMeeting::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIMeeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attendees.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booked_by_meetings_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_booked_by_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crm_references_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_cal_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meeting_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_show_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_meetings_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reschedule_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
