/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINote::OAINote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINote::OAINote() {
    this->initializeModel();
}

OAINote::~OAINote() {}

void OAINote::initializeModel() {

    m_associated_type_isSet = false;
    m_associated_type_isValid = false;

    m_associated_with_isSet = false;
    m_associated_with_isValid = false;

    m_call_isSet = false;
    m_call_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINote::fromJsonObject(QJsonObject json) {

    m_associated_type_isValid = ::OpenAPI::fromJsonValue(m_associated_type, json[QString("associated_type")]);
    m_associated_type_isSet = !json[QString("associated_type")].isNull() && m_associated_type_isValid;

    m_associated_with_isValid = ::OpenAPI::fromJsonValue(m_associated_with, json[QString("associated_with")]);
    m_associated_with_isSet = !json[QString("associated_with")].isNull() && m_associated_with_isValid;

    m_call_isValid = ::OpenAPI::fromJsonValue(m_call, json[QString("call")]);
    m_call_isSet = !json[QString("call")].isNull() && m_call_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINote::asJsonObject() const {
    QJsonObject obj;
    if (m_associated_type_isSet) {
        obj.insert(QString("associated_type"), ::OpenAPI::toJsonValue(m_associated_type));
    }
    if (m_associated_with.isSet()) {
        obj.insert(QString("associated_with"), ::OpenAPI::toJsonValue(m_associated_with));
    }
    if (m_call.isSet()) {
        obj.insert(QString("call"), ::OpenAPI::toJsonValue(m_call));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAINote::getAssociatedType() const {
    return m_associated_type;
}
void OAINote::setAssociatedType(const QString &associated_type) {
    m_associated_type = associated_type;
    m_associated_type_isSet = true;
}

bool OAINote::is_associated_type_Set() const{
    return m_associated_type_isSet;
}

bool OAINote::is_associated_type_Valid() const{
    return m_associated_type_isValid;
}

OAIEmbeddedResource OAINote::getAssociatedWith() const {
    return m_associated_with;
}
void OAINote::setAssociatedWith(const OAIEmbeddedResource &associated_with) {
    m_associated_with = associated_with;
    m_associated_with_isSet = true;
}

bool OAINote::is_associated_with_Set() const{
    return m_associated_with_isSet;
}

bool OAINote::is_associated_with_Valid() const{
    return m_associated_with_isValid;
}

OAIEmbeddedResource OAINote::getCall() const {
    return m_call;
}
void OAINote::setCall(const OAIEmbeddedResource &call) {
    m_call = call;
    m_call_isSet = true;
}

bool OAINote::is_call_Set() const{
    return m_call_isSet;
}

bool OAINote::is_call_Valid() const{
    return m_call_isValid;
}

QString OAINote::getContent() const {
    return m_content;
}
void OAINote::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAINote::is_content_Set() const{
    return m_content_isSet;
}

bool OAINote::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAINote::getCreatedAt() const {
    return m_created_at;
}
void OAINote::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINote::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINote::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAINote::getId() const {
    return m_id;
}
void OAINote::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINote::is_id_Set() const{
    return m_id_isSet;
}

bool OAINote::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAINote::getUpdatedAt() const {
    return m_updated_at;
}
void OAINote::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINote::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINote::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAINote::getUser() const {
    return m_user;
}
void OAINote::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINote::is_user_Set() const{
    return m_user_isSet;
}

bool OAINote::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associated_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_with.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINote::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
