/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_completed_by_isSet = false;
    m_completed_by_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_user_isSet = false;
    m_created_by_user_isValid = false;

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_due_at_isSet = false;
    m_due_at_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_remind_at_isSet = false;
    m_remind_at_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_completed_by_isValid = ::OpenAPI::fromJsonValue(m_completed_by, json[QString("completed_by")]);
    m_completed_by_isSet = !json[QString("completed_by")].isNull() && m_completed_by_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_user_isValid = ::OpenAPI::fromJsonValue(m_created_by_user, json[QString("created_by_user")]);
    m_created_by_user_isSet = !json[QString("created_by_user")].isNull() && m_created_by_user_isValid;

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("current_state")]);
    m_current_state_isSet = !json[QString("current_state")].isNull() && m_current_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_due_at_isValid = ::OpenAPI::fromJsonValue(m_due_at, json[QString("due_at")]);
    m_due_at_isSet = !json[QString("due_at")].isNull() && m_due_at_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_remind_at_isValid = ::OpenAPI::fromJsonValue(m_remind_at, json[QString("remind_at")]);
    m_remind_at_isSet = !json[QString("remind_at")].isNull() && m_remind_at_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("task_type")]);
    m_task_type_isSet = !json[QString("task_type")].isNull() && m_task_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_completed_by.isSet()) {
        obj.insert(QString("completed_by"), ::OpenAPI::toJsonValue(m_completed_by));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_user.isSet()) {
        obj.insert(QString("created_by_user"), ::OpenAPI::toJsonValue(m_created_by_user));
    }
    if (m_current_state_isSet) {
        obj.insert(QString("current_state"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_due_at_isSet) {
        obj.insert(QString("due_at"), ::OpenAPI::toJsonValue(m_due_at));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_remind_at_isSet) {
        obj.insert(QString("remind_at"), ::OpenAPI::toJsonValue(m_remind_at));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("task_type"), ::OpenAPI::toJsonValue(m_task_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAITask::getCompletedAt() const {
    return m_completed_at;
}
void OAITask::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAITask::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAITask::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

OAIEmbeddedResource OAITask::getCompletedBy() const {
    return m_completed_by;
}
void OAITask::setCompletedBy(const OAIEmbeddedResource &completed_by) {
    m_completed_by = completed_by;
    m_completed_by_isSet = true;
}

bool OAITask::is_completed_by_Set() const{
    return m_completed_by_isSet;
}

bool OAITask::is_completed_by_Valid() const{
    return m_completed_by_isValid;
}

QDateTime OAITask::getCreatedAt() const {
    return m_created_at;
}
void OAITask::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITask::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITask::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIEmbeddedResource OAITask::getCreatedByUser() const {
    return m_created_by_user;
}
void OAITask::setCreatedByUser(const OAIEmbeddedResource &created_by_user) {
    m_created_by_user = created_by_user;
    m_created_by_user_isSet = true;
}

bool OAITask::is_created_by_user_Set() const{
    return m_created_by_user_isSet;
}

bool OAITask::is_created_by_user_Valid() const{
    return m_created_by_user_isValid;
}

QString OAITask::getCurrentState() const {
    return m_current_state;
}
void OAITask::setCurrentState(const QString &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAITask::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAITask::is_current_state_Valid() const{
    return m_current_state_isValid;
}

QString OAITask::getDescription() const {
    return m_description;
}
void OAITask::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITask::is_description_Set() const{
    return m_description_isSet;
}

bool OAITask::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAITask::getDueAt() const {
    return m_due_at;
}
void OAITask::setDueAt(const QDateTime &due_at) {
    m_due_at = due_at;
    m_due_at_isSet = true;
}

bool OAITask::is_due_at_Set() const{
    return m_due_at_isSet;
}

bool OAITask::is_due_at_Valid() const{
    return m_due_at_isValid;
}

QDate OAITask::getDueDate() const {
    return m_due_date;
}
void OAITask::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAITask::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAITask::is_due_date_Valid() const{
    return m_due_date_isValid;
}

qint32 OAITask::getId() const {
    return m_id;
}
void OAITask::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITask::is_id_Set() const{
    return m_id_isSet;
}

bool OAITask::is_id_Valid() const{
    return m_id_isValid;
}

OAIEmbeddedResource OAITask::getPerson() const {
    return m_person;
}
void OAITask::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAITask::is_person_Set() const{
    return m_person_isSet;
}

bool OAITask::is_person_Valid() const{
    return m_person_isValid;
}

QDateTime OAITask::getRemindAt() const {
    return m_remind_at;
}
void OAITask::setRemindAt(const QDateTime &remind_at) {
    m_remind_at = remind_at;
    m_remind_at_isSet = true;
}

bool OAITask::is_remind_at_Set() const{
    return m_remind_at_isSet;
}

bool OAITask::is_remind_at_Valid() const{
    return m_remind_at_isValid;
}

QString OAITask::getSubject() const {
    return m_subject;
}
void OAITask::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITask::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITask::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAITask::getTaskType() const {
    return m_task_type;
}
void OAITask::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAITask::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAITask::is_task_type_Valid() const{
    return m_task_type_isValid;
}

QDateTime OAITask::getUpdatedAt() const {
    return m_updated_at;
}
void OAITask::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAITask::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAITask::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAITask::getUser() const {
    return m_user;
}
void OAITask::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITask::is_user_Set() const{
    return m_user_isSet;
}

bool OAITask::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remind_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
