/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityHistory::OAIActivityHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityHistory::OAIActivityHistory() {
    this->initializeModel();
}

OAIActivityHistory::~OAIActivityHistory() {}

void OAIActivityHistory::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dynamic_data_isSet = false;
    m_dynamic_data_isValid = false;

    m_failed_dynamic_resources_isSet = false;
    m_failed_dynamic_resources_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_occurred_at_isSet = false;
    m_occurred_at_isValid = false;

    m_pinned_at_isSet = false;
    m_pinned_at_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_static_data_isSet = false;
    m_static_data_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_guid_isSet = false;
    m_user_guid_isValid = false;
}

void OAIActivityHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityHistory::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dynamic_data_isValid = ::OpenAPI::fromJsonValue(m_dynamic_data, json[QString("dynamic_data")]);
    m_dynamic_data_isSet = !json[QString("dynamic_data")].isNull() && m_dynamic_data_isValid;

    m_failed_dynamic_resources_isValid = ::OpenAPI::fromJsonValue(m_failed_dynamic_resources, json[QString("failed_dynamic_resources")]);
    m_failed_dynamic_resources_isSet = !json[QString("failed_dynamic_resources")].isNull() && m_failed_dynamic_resources_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_occurred_at_isValid = ::OpenAPI::fromJsonValue(m_occurred_at, json[QString("occurred_at")]);
    m_occurred_at_isSet = !json[QString("occurred_at")].isNull() && m_occurred_at_isValid;

    m_pinned_at_isValid = ::OpenAPI::fromJsonValue(m_pinned_at, json[QString("pinned_at")]);
    m_pinned_at_isSet = !json[QString("pinned_at")].isNull() && m_pinned_at_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_static_data_isValid = ::OpenAPI::fromJsonValue(m_static_data, json[QString("static_data")]);
    m_static_data_isSet = !json[QString("static_data")].isNull() && m_static_data_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_guid_isValid = ::OpenAPI::fromJsonValue(m_user_guid, json[QString("user_guid")]);
    m_user_guid_isSet = !json[QString("user_guid")].isNull() && m_user_guid_isValid;
}

QString OAIActivityHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dynamic_data_isSet) {
        obj.insert(QString("dynamic_data"), ::OpenAPI::toJsonValue(m_dynamic_data));
    }
    if (m_failed_dynamic_resources_isSet) {
        obj.insert(QString("failed_dynamic_resources"), ::OpenAPI::toJsonValue(m_failed_dynamic_resources));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_occurred_at_isSet) {
        obj.insert(QString("occurred_at"), ::OpenAPI::toJsonValue(m_occurred_at));
    }
    if (m_pinned_at_isSet) {
        obj.insert(QString("pinned_at"), ::OpenAPI::toJsonValue(m_pinned_at));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_static_data_isSet) {
        obj.insert(QString("static_data"), ::OpenAPI::toJsonValue(m_static_data));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_guid_isSet) {
        obj.insert(QString("user_guid"), ::OpenAPI::toJsonValue(m_user_guid));
    }
    return obj;
}

QDateTime OAIActivityHistory::getCreatedAt() const {
    return m_created_at;
}
void OAIActivityHistory::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIActivityHistory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIActivityHistory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIActivityHistory::getDynamicData() const {
    return m_dynamic_data;
}
void OAIActivityHistory::setDynamicData(const OAIObject &dynamic_data) {
    m_dynamic_data = dynamic_data;
    m_dynamic_data_isSet = true;
}

bool OAIActivityHistory::is_dynamic_data_Set() const{
    return m_dynamic_data_isSet;
}

bool OAIActivityHistory::is_dynamic_data_Valid() const{
    return m_dynamic_data_isValid;
}

OAIObject OAIActivityHistory::getFailedDynamicResources() const {
    return m_failed_dynamic_resources;
}
void OAIActivityHistory::setFailedDynamicResources(const OAIObject &failed_dynamic_resources) {
    m_failed_dynamic_resources = failed_dynamic_resources;
    m_failed_dynamic_resources_isSet = true;
}

bool OAIActivityHistory::is_failed_dynamic_resources_Set() const{
    return m_failed_dynamic_resources_isSet;
}

bool OAIActivityHistory::is_failed_dynamic_resources_Valid() const{
    return m_failed_dynamic_resources_isValid;
}

qint32 OAIActivityHistory::getId() const {
    return m_id;
}
void OAIActivityHistory::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivityHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivityHistory::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIActivityHistory::getOccurredAt() const {
    return m_occurred_at;
}
void OAIActivityHistory::setOccurredAt(const QDateTime &occurred_at) {
    m_occurred_at = occurred_at;
    m_occurred_at_isSet = true;
}

bool OAIActivityHistory::is_occurred_at_Set() const{
    return m_occurred_at_isSet;
}

bool OAIActivityHistory::is_occurred_at_Valid() const{
    return m_occurred_at_isValid;
}

QDateTime OAIActivityHistory::getPinnedAt() const {
    return m_pinned_at;
}
void OAIActivityHistory::setPinnedAt(const QDateTime &pinned_at) {
    m_pinned_at = pinned_at;
    m_pinned_at_isSet = true;
}

bool OAIActivityHistory::is_pinned_at_Set() const{
    return m_pinned_at_isSet;
}

bool OAIActivityHistory::is_pinned_at_Valid() const{
    return m_pinned_at_isValid;
}

qint32 OAIActivityHistory::getResourceId() const {
    return m_resource_id;
}
void OAIActivityHistory::setResourceId(const qint32 &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIActivityHistory::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIActivityHistory::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

qint32 OAIActivityHistory::getResourceType() const {
    return m_resource_type;
}
void OAIActivityHistory::setResourceType(const qint32 &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIActivityHistory::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIActivityHistory::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIObject OAIActivityHistory::getStaticData() const {
    return m_static_data;
}
void OAIActivityHistory::setStaticData(const OAIObject &static_data) {
    m_static_data = static_data;
    m_static_data_isSet = true;
}

bool OAIActivityHistory::is_static_data_Set() const{
    return m_static_data_isSet;
}

bool OAIActivityHistory::is_static_data_Valid() const{
    return m_static_data_isValid;
}

QString OAIActivityHistory::getType() const {
    return m_type;
}
void OAIActivityHistory::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivityHistory::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivityHistory::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIActivityHistory::getUpdatedAt() const {
    return m_updated_at;
}
void OAIActivityHistory::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIActivityHistory::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIActivityHistory::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIActivityHistory::getUserGuid() const {
    return m_user_guid;
}
void OAIActivityHistory::setUserGuid(const QString &user_guid) {
    m_user_guid = user_guid;
    m_user_guid_isSet = true;
}

bool OAIActivityHistory::is_user_guid_Set() const{
    return m_user_guid_isSet;
}

bool OAIActivityHistory::is_user_guid_Valid() const{
    return m_user_guid_isValid;
}

bool OAIActivityHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_dynamic_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_occurred_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
