/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_action_details_isSet = false;
    m_action_details_isValid = false;

    m_cadence_isSet = false;
    m_cadence_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_due_isSet = false;
    m_due_isValid = false;

    m_due_on_isSet = false;
    m_due_on_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multitouch_group_id_isSet = false;
    m_multitouch_group_id_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_step_isSet = false;
    m_step_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_action_details_isValid = ::OpenAPI::fromJsonValue(m_action_details, json[QString("action_details")]);
    m_action_details_isSet = !json[QString("action_details")].isNull() && m_action_details_isValid;

    m_cadence_isValid = ::OpenAPI::fromJsonValue(m_cadence, json[QString("cadence")]);
    m_cadence_isSet = !json[QString("cadence")].isNull() && m_cadence_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_due_isValid = ::OpenAPI::fromJsonValue(m_due, json[QString("due")]);
    m_due_isSet = !json[QString("due")].isNull() && m_due_isValid;

    m_due_on_isValid = ::OpenAPI::fromJsonValue(m_due_on, json[QString("due_on")]);
    m_due_on_isSet = !json[QString("due_on")].isNull() && m_due_on_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multitouch_group_id_isValid = ::OpenAPI::fromJsonValue(m_multitouch_group_id, json[QString("multitouch_group_id")]);
    m_multitouch_group_id_isSet = !json[QString("multitouch_group_id")].isNull() && m_multitouch_group_id_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_step_isValid = ::OpenAPI::fromJsonValue(m_step, json[QString("step")]);
    m_step_isSet = !json[QString("step")].isNull() && m_step_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_details.isSet()) {
        obj.insert(QString("action_details"), ::OpenAPI::toJsonValue(m_action_details));
    }
    if (m_cadence.isSet()) {
        obj.insert(QString("cadence"), ::OpenAPI::toJsonValue(m_cadence));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_due_isSet) {
        obj.insert(QString("due"), ::OpenAPI::toJsonValue(m_due));
    }
    if (m_due_on_isSet) {
        obj.insert(QString("due_on"), ::OpenAPI::toJsonValue(m_due_on));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multitouch_group_id_isSet) {
        obj.insert(QString("multitouch_group_id"), ::OpenAPI::toJsonValue(m_multitouch_group_id));
    }
    if (m_person.isSet()) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_step.isSet()) {
        obj.insert(QString("step"), ::OpenAPI::toJsonValue(m_step));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIEmbeddedResource OAIAction::getActionDetails() const {
    return m_action_details;
}
void OAIAction::setActionDetails(const OAIEmbeddedResource &action_details) {
    m_action_details = action_details;
    m_action_details_isSet = true;
}

bool OAIAction::is_action_details_Set() const{
    return m_action_details_isSet;
}

bool OAIAction::is_action_details_Valid() const{
    return m_action_details_isValid;
}

OAIEmbeddedResource OAIAction::getCadence() const {
    return m_cadence;
}
void OAIAction::setCadence(const OAIEmbeddedResource &cadence) {
    m_cadence = cadence;
    m_cadence_isSet = true;
}

bool OAIAction::is_cadence_Set() const{
    return m_cadence_isSet;
}

bool OAIAction::is_cadence_Valid() const{
    return m_cadence_isValid;
}

QDateTime OAIAction::getCreatedAt() const {
    return m_created_at;
}
void OAIAction::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIAction::isDue() const {
    return m_due;
}
void OAIAction::setDue(const bool &due) {
    m_due = due;
    m_due_isSet = true;
}

bool OAIAction::is_due_Set() const{
    return m_due_isSet;
}

bool OAIAction::is_due_Valid() const{
    return m_due_isValid;
}

QDateTime OAIAction::getDueOn() const {
    return m_due_on;
}
void OAIAction::setDueOn(const QDateTime &due_on) {
    m_due_on = due_on;
    m_due_on_isSet = true;
}

bool OAIAction::is_due_on_Set() const{
    return m_due_on_isSet;
}

bool OAIAction::is_due_on_Valid() const{
    return m_due_on_isValid;
}

qint32 OAIAction::getId() const {
    return m_id;
}
void OAIAction::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAction::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAction::getMultitouchGroupId() const {
    return m_multitouch_group_id;
}
void OAIAction::setMultitouchGroupId(const qint32 &multitouch_group_id) {
    m_multitouch_group_id = multitouch_group_id;
    m_multitouch_group_id_isSet = true;
}

bool OAIAction::is_multitouch_group_id_Set() const{
    return m_multitouch_group_id_isSet;
}

bool OAIAction::is_multitouch_group_id_Valid() const{
    return m_multitouch_group_id_isValid;
}

OAIEmbeddedResource OAIAction::getPerson() const {
    return m_person;
}
void OAIAction::setPerson(const OAIEmbeddedResource &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIAction::is_person_Set() const{
    return m_person_isSet;
}

bool OAIAction::is_person_Valid() const{
    return m_person_isValid;
}

QString OAIAction::getStatus() const {
    return m_status;
}
void OAIAction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAction::is_status_Valid() const{
    return m_status_isValid;
}

OAIEmbeddedResource OAIAction::getStep() const {
    return m_step;
}
void OAIAction::setStep(const OAIEmbeddedResource &step) {
    m_step = step;
    m_step_isSet = true;
}

bool OAIAction::is_step_Set() const{
    return m_step_isSet;
}

bool OAIAction::is_step_Valid() const{
    return m_step_isValid;
}

QString OAIAction::getType() const {
    return m_type;
}
void OAIAction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAction::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIAction::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAction::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAction::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAction::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEmbeddedResource OAIAction::getUser() const {
    return m_user;
}
void OAIAction::setUser(const OAIEmbeddedResource &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAction::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAction::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cadence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multitouch_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
