/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SalesLoftPlatform);
  }
}(this, function(expect, SalesLoftPlatform) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SalesLoftPlatform.Meeting();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Meeting', function() {
    it('should create an instance of Meeting', function() {
      // uncomment below and update the code to test Meeting
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be.a(SalesLoftPlatform.Meeting);
    });

    it('should have the property accountId (base name: "account_id")', function() {
      // uncomment below and update the code to test the property accountId
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property allDay (base name: "all_day")', function() {
      // uncomment below and update the code to test the property allDay
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property attendees (base name: "attendees")', function() {
      // uncomment below and update the code to test the property attendees
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property bookedByMeetingsSettings (base name: "booked_by_meetings_settings")', function() {
      // uncomment below and update the code to test the property bookedByMeetingsSettings
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property bookedByUser (base name: "booked_by_user")', function() {
      // uncomment below and update the code to test the property bookedByUser
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property cadence (base name: "cadence")', function() {
      // uncomment below and update the code to test the property cadence
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property calendarId (base name: "calendar_id")', function() {
      // uncomment below and update the code to test the property calendarId
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property calendarType (base name: "calendar_type")', function() {
      // uncomment below and update the code to test the property calendarType
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property canceledAt (base name: "canceled_at")', function() {
      // uncomment below and update the code to test the property canceledAt
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property crmCustomFields (base name: "crm_custom_fields")', function() {
      // uncomment below and update the code to test the property crmCustomFields
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property crmReferences (base name: "crm_references")', function() {
      // uncomment below and update the code to test the property crmReferences
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "end_time")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "event_id")', function() {
      // uncomment below and update the code to test the property eventId
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property eventSource (base name: "event_source")', function() {
      // uncomment below and update the code to test the property eventSource
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property guests (base name: "guests")', function() {
      // uncomment below and update the code to test the property guests
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property iCalUid (base name: "i_cal_uid")', function() {
      // uncomment below and update the code to test the property iCalUid
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property meetingType (base name: "meeting_type")', function() {
      // uncomment below and update the code to test the property meetingType
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property noShow (base name: "no_show")', function() {
      // uncomment below and update the code to test the property noShow
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property ownedByMeetingsSettings (base name: "owned_by_meetings_settings")', function() {
      // uncomment below and update the code to test the property ownedByMeetingsSettings
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property person (base name: "person")', function() {
      // uncomment below and update the code to test the property person
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property recipientEmail (base name: "recipient_email")', function() {
      // uncomment below and update the code to test the property recipientEmail
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property recipientName (base name: "recipient_name")', function() {
      // uncomment below and update the code to test the property recipientName
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property rescheduleStatus (base name: "reschedule_status")', function() {
      // uncomment below and update the code to test the property rescheduleStatus
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "start_time")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property step (base name: "step")', function() {
      // uncomment below and update the code to test the property step
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property strictAttribution (base name: "strict_attribution")', function() {
      // uncomment below and update the code to test the property strictAttribution
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property taskId (base name: "task_id")', function() {
      // uncomment below and update the code to test the property taskId
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new SalesLoftPlatform.Meeting();
      //expect(instance).to.be();
    });

  });

}));
