/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SalesLoftPlatform);
  }
}(this, function(expect, SalesLoftPlatform) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SalesLoftPlatform.MeetingSetting();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MeetingSetting', function() {
    it('should create an instance of MeetingSetting', function() {
      // uncomment below and update the code to test MeetingSetting
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be.a(SalesLoftPlatform.MeetingSetting);
    });

    it('should have the property activeMeetingUrl (base name: "active_meeting_url")', function() {
      // uncomment below and update the code to test the property activeMeetingUrl
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property allowBookingOnBehalf (base name: "allow_booking_on_behalf")', function() {
      // uncomment below and update the code to test the property allowBookingOnBehalf
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property allowBookingOvertime (base name: "allow_booking_overtime")', function() {
      // uncomment below and update the code to test the property allowBookingOvertime
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property allowEventOverlap (base name: "allow_event_overlap")', function() {
      // uncomment below and update the code to test the property allowEventOverlap
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property availabilityLimit (base name: "availability_limit")', function() {
      // uncomment below and update the code to test the property availabilityLimit
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property availabilityLimitEnabled (base name: "availability_limit_enabled")', function() {
      // uncomment below and update the code to test the property availabilityLimitEnabled
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property bufferTimeDuration (base name: "buffer_time_duration")', function() {
      // uncomment below and update the code to test the property bufferTimeDuration
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property calendarType (base name: "calendar_type")', function() {
      // uncomment below and update the code to test the property calendarType
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property defaultMeetingLength (base name: "default_meeting_length")', function() {
      // uncomment below and update the code to test the property defaultMeetingLength
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property emailAddress (base name: "email_address")', function() {
      // uncomment below and update the code to test the property emailAddress
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property enableCalendarSync (base name: "enable_calendar_sync")', function() {
      // uncomment below and update the code to test the property enableCalendarSync
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property enableDynamicLocation (base name: "enable_dynamic_location")', function() {
      // uncomment below and update the code to test the property enableDynamicLocation
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property primaryCalendarConnectionFailed (base name: "primary_calendar_connection_failed")', function() {
      // uncomment below and update the code to test the property primaryCalendarConnectionFailed
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property primaryCalendarId (base name: "primary_calendar_id")', function() {
      // uncomment below and update the code to test the property primaryCalendarId
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property primaryCalendarName (base name: "primary_calendar_name")', function() {
      // uncomment below and update the code to test the property primaryCalendarName
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property rescheduleMeetingsEnabled (base name: "reschedule_meetings_enabled")', function() {
      // uncomment below and update the code to test the property rescheduleMeetingsEnabled
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property scheduleBufferEnabled (base name: "schedule_buffer_enabled")', function() {
      // uncomment below and update the code to test the property scheduleBufferEnabled
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property scheduleDelay (base name: "schedule_delay")', function() {
      // uncomment below and update the code to test the property scheduleDelay
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property shareEventDetail (base name: "share_event_detail")', function() {
      // uncomment below and update the code to test the property shareEventDetail
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "time_zone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property timesAvailable (base name: "times_available")', function() {
      // uncomment below and update the code to test the property timesAvailable
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property userDetails (base name: "user_details")', function() {
      // uncomment below and update the code to test the property userDetails
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

    it('should have the property userSlug (base name: "user_slug")', function() {
      // uncomment below and update the code to test the property userSlug
      //var instance = new SalesLoftPlatform.MeetingSetting();
      //expect(instance).to.be();
    });

  });

}));
