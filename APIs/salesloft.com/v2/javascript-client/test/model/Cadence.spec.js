/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SalesLoftPlatform);
  }
}(this, function(expect, SalesLoftPlatform) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SalesLoftPlatform.Cadence();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Cadence', function() {
    it('should create an instance of Cadence', function() {
      // uncomment below and update the code to test Cadence
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be.a(SalesLoftPlatform.Cadence);
    });

    it('should have the property addedStage (base name: "added_stage")', function() {
      // uncomment below and update the code to test the property addedStage
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property archivedAt (base name: "archived_at")', function() {
      // uncomment below and update the code to test the property archivedAt
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property bouncedStage (base name: "bounced_stage")', function() {
      // uncomment below and update the code to test the property bouncedStage
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property cadenceFrameworkId (base name: "cadence_framework_id")', function() {
      // uncomment below and update the code to test the property cadenceFrameworkId
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property cadenceFunction (base name: "cadence_function")', function() {
      // uncomment below and update the code to test the property cadenceFunction
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property cadencePriority (base name: "cadence_priority")', function() {
      // uncomment below and update the code to test the property cadencePriority
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property counts (base name: "counts")', function() {
      // uncomment below and update the code to test the property counts
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property draft (base name: "draft")', function() {
      // uncomment below and update the code to test the property draft
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property externalIdentifier (base name: "external_identifier")', function() {
      // uncomment below and update the code to test the property externalIdentifier
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property finishedStage (base name: "finished_stage")', function() {
      // uncomment below and update the code to test the property finishedStage
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property optOutLinkIncluded (base name: "opt_out_link_included")', function() {
      // uncomment below and update the code to test the property optOutLinkIncluded
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property removeBouncesEnabled (base name: "remove_bounces_enabled")', function() {
      // uncomment below and update the code to test the property removeBouncesEnabled
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property removeRepliesEnabled (base name: "remove_replies_enabled")', function() {
      // uncomment below and update the code to test the property removeRepliesEnabled
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property repliedStage (base name: "replied_stage")', function() {
      // uncomment below and update the code to test the property repliedStage
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property shared (base name: "shared")', function() {
      // uncomment below and update the code to test the property shared
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property teamCadence (base name: "team_cadence")', function() {
      // uncomment below and update the code to test the property teamCadence
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new SalesLoftPlatform.Cadence();
      //expect(instance).to.be();
    });

  });

}));
