/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CallDataRecord from '../model/CallDataRecord';

/**
* CallDataRecords service.
* @module api/CallDataRecordsApi
* @version v2
*/
export default class CallDataRecordsApi {

    /**
    * Constructs a new CallDataRecordsApi. 
    * @alias module:api/CallDataRecordsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2CallDataRecordsIdJsonGet operation.
     * @callback module:api/CallDataRecordsApi~v2CallDataRecordsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CallDataRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a call data record
     * Fetches a call data record, by ID only. 
     * @param {String} id CallDataRecord ID
     * @param {module:api/CallDataRecordsApi~v2CallDataRecordsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallDataRecord}
     */
    v2CallDataRecordsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CallDataRecordsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CallDataRecord;
      return this.apiClient.callApi(
        '/v2/call_data_records/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CallDataRecordsJsonGet operation.
     * @callback module:api/CallDataRecordsApi~v2CallDataRecordsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CallDataRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List call data records
     * Fetches multiple call data records. The records can be filtered, paged, and sorted according to the respective parameters.  Call data records are records of all inbound and outbound calls through Salesloft. A call data record may be associated with a call, but does not have to be. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of call data records to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Boolean} [hasCall] Return only call data records which have or do not have a call logged for them
     * @param {Array.<String>} [createdAt] Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<String>} [userGuid] Filters list to only include guids
     * @param {Array.<Number>} [personId] Filters list by person_id. Multiple person ids can be applied
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/CallDataRecordsApi~v2CallDataRecordsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CallDataRecord>}
     */
    v2CallDataRecordsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'has_call': opts['hasCall'],
        'created_at': this.apiClient.buildCollectionParam(opts['createdAt'], 'csv'),
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'user_guid': this.apiClient.buildCollectionParam(opts['userGuid'], 'csv'),
        'person_id': this.apiClient.buildCollectionParam(opts['personId'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CallDataRecord];
      return this.apiClient.callApi(
        '/v2/call_data_records.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
