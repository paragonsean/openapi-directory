/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MeetingSetting from '../model/MeetingSetting';

/**
* MeetingSettings service.
* @module api/MeetingSettingsApi
* @version v2
*/
export default class MeetingSettingsApi {

    /**
    * Constructs a new MeetingSettingsApi. 
    * @alias module:api/MeetingSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2MeetingsSettingsIdJsonPut operation.
     * @callback module:api/MeetingSettingsApi~v2MeetingsSettingsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MeetingSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a meeting setting
     * Updates a meeting setting, by ID only. 
     * @param {String} id MeetingSetting ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowBookingOnBehalf] Allow other team members to schedule on you behalf.
     * @param {Boolean} [allowBookingOvertime] Allow team members to insert available time outside your working hours.
     * @param {Boolean} [allowEventOverlap] Allow team members to double book events on your calendar.
     * @param {Number} [availabilityLimit] The number of days out the user allows a prospect to schedule a meeting
     * @param {Boolean} [availabilityLimitEnabled] If Availability Limits have been turned on
     * @param {Number} [bufferTimeDuration] Default buffer duration in minutes set by a user
     * @param {String} [calendarType] Calendar type
     * @param {Number} [defaultMeetingLength] Default meeting length in minutes set by the user
     * @param {String} [description] Default description of the meeting
     * @param {Boolean} [enableCalendarSync] Determines if a user enabled Calendar Sync feature
     * @param {Boolean} [enableDynamicLocation] Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
     * @param {String} [location] Default location of the meeting
     * @param {Boolean} [primaryCalendarConnectionFailed] Determines if the user lost calendar connection
     * @param {String} [primaryCalendarId] ID of the primary calendar
     * @param {String} [primaryCalendarName] Display name of the primary calendar
     * @param {Boolean} [rescheduleMeetingsEnabled] Determines if a user enabled reschedule meetings feature
     * @param {Boolean} [scheduleBufferEnabled] Determines if meetings are scheduled with a 15 minute buffer between them
     * @param {Number} [scheduleDelay] The number of hours in advance a user requires someone to a book a meeting with them
     * @param {Boolean} [shareEventDetail] Allow team members to see the details of events on your calendar.
     * @param {String} [timeZone] Time zone for current calendar
     * @param {Object.<String, Object>} [timesAvailable] Times available set by a user that can be used to book meetings
     * @param {String} [title] Default title of the meeting
     * @param {module:api/MeetingSettingsApi~v2MeetingsSettingsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MeetingSetting}
     */
    v2MeetingsSettingsIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2MeetingsSettingsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_booking_on_behalf': opts['allowBookingOnBehalf'],
        'allow_booking_overtime': opts['allowBookingOvertime'],
        'allow_event_overlap': opts['allowEventOverlap'],
        'availability_limit': opts['availabilityLimit'],
        'availability_limit_enabled': opts['availabilityLimitEnabled'],
        'buffer_time_duration': opts['bufferTimeDuration'],
        'calendar_type': opts['calendarType'],
        'default_meeting_length': opts['defaultMeetingLength'],
        'description': opts['description'],
        'enable_calendar_sync': opts['enableCalendarSync'],
        'enable_dynamic_location': opts['enableDynamicLocation'],
        'location': opts['location'],
        'primary_calendar_connection_failed': opts['primaryCalendarConnectionFailed'],
        'primary_calendar_id': opts['primaryCalendarId'],
        'primary_calendar_name': opts['primaryCalendarName'],
        'reschedule_meetings_enabled': opts['rescheduleMeetingsEnabled'],
        'schedule_buffer_enabled': opts['scheduleBufferEnabled'],
        'schedule_delay': opts['scheduleDelay'],
        'share_event_detail': opts['shareEventDetail'],
        'time_zone': opts['timeZone'],
        'times_available': opts['timesAvailable'],
        'title': opts['title']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = MeetingSetting;
      return this.apiClient.callApi(
        '/v2/meetings/settings/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
