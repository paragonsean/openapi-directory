/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Call from '../model/Call';

/**
* Calls service.
* @module api/CallsApi
* @version v2
*/
export default class CallsApi {

    /**
    * Constructs a new CallsApi. 
    * @alias module:api/CallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2ActivitiesCallsIdJsonGet operation.
     * @callback module:api/CallsApi~v2ActivitiesCallsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a call
     * Fetches a call, by ID only. 
     * @param {String} id Call ID
     * @param {module:api/CallsApi~v2ActivitiesCallsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    v2ActivitiesCallsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2ActivitiesCallsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/v2/activities/calls/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ActivitiesCallsJsonGet operation.
     * @callback module:api/CallsApi~v2ActivitiesCallsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Call>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List calls
     * Fetches multiple call records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of calls to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Array.<String>} [createdAt] Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<String>} [userGuid] Filters list to only include guids
     * @param {Array.<Number>} [personId] Filters calls by person_id. Multiple person ids can be applied
     * @param {Array.<String>} [sentiment] Filters calls by sentiment. Sentiment matches are exact and case sensitive. Multiple sentiments are allowed.
     * @param {Array.<String>} [disposition] Filters calls by disposition. Disposition matches are exact and case sensitive. Multiple dispositions are allowed.
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/CallsApi~v2ActivitiesCallsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Call>}
     */
    v2ActivitiesCallsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'created_at': this.apiClient.buildCollectionParam(opts['createdAt'], 'csv'),
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'user_guid': this.apiClient.buildCollectionParam(opts['userGuid'], 'csv'),
        'person_id': this.apiClient.buildCollectionParam(opts['personId'], 'csv'),
        'sentiment': this.apiClient.buildCollectionParam(opts['sentiment'], 'csv'),
        'disposition': this.apiClient.buildCollectionParam(opts['disposition'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Call];
      return this.apiClient.callApi(
        '/v2/activities/calls.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ActivitiesCallsJsonPost operation.
     * @callback module:api/CallsApi~v2ActivitiesCallsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a call
     * Creates a call. The parameters of this endpoint can be used to create an action and ensure that the CRM Task is mapped correctly. 
     * @param {Number} personId The ID of the person whom this call will be logged for
     * @param {Object} opts Optional parameters
     * @param {Number} [actionId] Action that this call is being logged for. This will validate that the action is still valid before completing it. The same action can never be successfully passed twice to this endpoint. The action must have a type of 'phone'. 
     * @param {Object.<String, Object>} [crmParams] CRM specific parameters. Some parameters are required on a per-team basis. Consume the CrmActivityFields endpoint to receive a list of valid parameters. The \\\"field\\\" property is passed as the key of this object, and the value of this object is the value that you would like to set.  If CrmActivityField has a non-null value, then that value must be submitted, or excluded from API calls, as these values are automatically applied. 
     * @param {String} [disposition] The disposition of the call. Can be required on a per-team basis. Must be present in the disposition list.
     * @param {Number} [duration] The length of the call, in seconds
     * @param {Array.<Number>} [linkedCallDataRecordIds] CallDataRecord associations that will become linked to the created call. It is possible to pass multiple CallDataRecord ids in this field; this can be used to represent multiple phone calls that made up a single call.  Any call data record that is used must not already be linked to a call. It is not possible to link a call data record to multiple calls, and it is not possible to re-assign a call data record to a different call. 
     * @param {String} [notes] Notes to log for the call. This is similar to the notes endpoint, but ensures that the notes get synced to the user's CRM
     * @param {String} [sentiment] The sentiment of the call. Can be required on a per-team basis. Must be present in the sentiment list.
     * @param {String} [to] The phone number that was called
     * @param {String} [userGuid] Guid of the user whom this call should be logged for. Defaults to the authenticated user. Only team admins can pass another user's guid
     * @param {module:api/CallsApi~v2ActivitiesCallsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    v2ActivitiesCallsJsonPost(personId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling v2ActivitiesCallsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action_id': opts['actionId'],
        'crm_params': opts['crmParams'],
        'disposition': opts['disposition'],
        'duration': opts['duration'],
        'linked_call_data_record_ids': this.apiClient.buildCollectionParam(opts['linkedCallDataRecordIds'], 'csv'),
        'notes': opts['notes'],
        'person_id': personId,
        'sentiment': opts['sentiment'],
        'to': opts['to'],
        'user_guid': opts['userGuid']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Call;
      return this.apiClient.callApi(
        '/v2/activities/calls.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
