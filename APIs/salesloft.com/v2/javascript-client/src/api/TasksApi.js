/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Step from '../model/Step';
import Task from '../model/Task';

/**
* Tasks service.
* @module api/TasksApi
* @version v2
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2TasksIdJsonGet operation.
     * @callback module:api/TasksApi~v2TasksIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Step} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a task
     * Fetches a task, by ID only. 
     * @param {String} id Task ID
     * @param {module:api/TasksApi~v2TasksIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Step}
     */
    v2TasksIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2TasksIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Step;
      return this.apiClient.callApi(
        '/v2/tasks/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2TasksIdJsonPut operation.
     * @callback module:api/TasksApi~v2TasksIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Task
     * Updates a task. 
     * @param {String} id Task ID
     * @param {Object} opts Optional parameters
     * @param {String} [currentState] Current state of the task, valid options are: completed
     * @param {String} [description] A description of the task recorded for person at completion time
     * @param {String} [dueDate] Date of when the Task is due, ISO-8601 date format required
     * @param {Boolean} [isLogged] A flag to indicate that the task should only be logged
     * @param {String} [remindAt] Datetime of when the user will be reminded of the task, ISO-8601 datetime format required
     * @param {String} [subject] Subject line of the task
     * @param {module:api/TasksApi~v2TasksIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    v2TasksIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2TasksIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'current_state': opts['currentState'],
        'description': opts['description'],
        'due_date': opts['dueDate'],
        'is_logged': opts['isLogged'],
        'remind_at': opts['remindAt'],
        'subject': opts['subject']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/v2/tasks/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2TasksJsonGet operation.
     * @callback module:api/TasksApi~v2TasksJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tasks
     * Fetches multiple task records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of tasks to fetch.
     * @param {Array.<Number>} [userId] Filters tasks by the user to which they are assigned.
     * @param {Array.<Number>} [personId] Filters tasks by the person to which they are associated.
     * @param {Array.<Number>} [accountId] Filters tasks by the account to which they are associated.
     * @param {Array.<String>} [currentState] Filters tasks by their current state. Valid current_states include: ['scheduled', 'completed'].
     * @param {Array.<String>} [taskType] Filters tasks by their task type. Valid task_types include: ['call', 'email', 'general'].
     * @param {String} [timeIntervalFilter] Filters tasks by time interval. Valid time_intervals include: ['overdue', 'today', 'tomorrow', 'this_week', 'next_week'].
     * @param {String} [idempotencyKey] Filters tasks by idempotency key.
     * @param {Array.<String>} [locale] Filters tasks by locale of the person to which they are associated.
     * @param {String} [sortBy] Key to sort on, must be one of: due_date, due_at. Defaults to due_date
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to ASC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/TasksApi~v2TasksJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Task>}
     */
    v2TasksJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'user_id': this.apiClient.buildCollectionParam(opts['userId'], 'csv'),
        'person_id': this.apiClient.buildCollectionParam(opts['personId'], 'csv'),
        'account_id': this.apiClient.buildCollectionParam(opts['accountId'], 'csv'),
        'current_state': this.apiClient.buildCollectionParam(opts['currentState'], 'csv'),
        'task_type': this.apiClient.buildCollectionParam(opts['taskType'], 'csv'),
        'time_interval_filter': opts['timeIntervalFilter'],
        'idempotency_key': opts['idempotencyKey'],
        'locale': this.apiClient.buildCollectionParam(opts['locale'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Task];
      return this.apiClient.callApi(
        '/v2/tasks.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2TasksJsonPost operation.
     * @callback module:api/TasksApi~v2TasksJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Task
     * Creates a task. 
     * @param {String} currentState Current state of the task, valid options are: scheduled
     * @param {String} dueDate Date of when the Task is due, ISO-8601 date format required
     * @param {String} personId ID of the person to be contacted
     * @param {String} subject Subject line of the task.
     * @param {String} taskType Task type, valid options are: call, email, general
     * @param {Number} userId ID of the user linked to the task
     * @param {Object} opts Optional parameters
     * @param {String} [description] A description of the task recorded for person at completion time
     * @param {String} [idempotencyKey] Establishes a unique identifier to prevent duplicates from being created
     * @param {String} [remindAt] Datetime of when the user will be reminded of the task, ISO-8601 datetime format required
     * @param {module:api/TasksApi~v2TasksJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Task}
     */
    v2TasksJsonPost(currentState, dueDate, personId, subject, taskType, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currentState' is set
      if (currentState === undefined || currentState === null) {
        throw new Error("Missing the required parameter 'currentState' when calling v2TasksJsonPost");
      }
      // verify the required parameter 'dueDate' is set
      if (dueDate === undefined || dueDate === null) {
        throw new Error("Missing the required parameter 'dueDate' when calling v2TasksJsonPost");
      }
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling v2TasksJsonPost");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling v2TasksJsonPost");
      }
      // verify the required parameter 'taskType' is set
      if (taskType === undefined || taskType === null) {
        throw new Error("Missing the required parameter 'taskType' when calling v2TasksJsonPost");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling v2TasksJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'current_state': currentState,
        'description': opts['description'],
        'due_date': dueDate,
        'idempotency_key': opts['idempotencyKey'],
        'person_id': personId,
        'remind_at': opts['remindAt'],
        'subject': subject,
        'task_type': taskType,
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Task;
      return this.apiClient.callApi(
        '/v2/tasks.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
