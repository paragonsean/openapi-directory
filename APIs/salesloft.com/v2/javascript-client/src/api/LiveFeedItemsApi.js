/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LiveFeedItem from '../model/LiveFeedItem';

/**
* LiveFeedItems service.
* @module api/LiveFeedItemsApi
* @version v2
*/
export default class LiveFeedItemsApi {

    /**
    * Constructs a new LiveFeedItemsApi. 
    * @alias module:api/LiveFeedItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2ThirdPartyLiveFeedItemsPost operation.
     * @callback module:api/LiveFeedItemsApi~v2ThirdPartyLiveFeedItemsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LiveFeedItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a live feed item
     * Creates a live feed item that can be sent to users. May only be used by whitelisted Frontend Integrations. Reference the Salesloft App Directory and Frontend Integrations sections for additional details.
     * @param {String} eventOccurredAt Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range. ---CUSTOM--- {\\\"keys\\\":[{\\\"description\\\":\\\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\",\\\"name\\\":\\\"gt\\\",\\\"type\\\":\\\"iso8601 string\\\"},{\\\"description\\\":\\\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\",\\\"name\\\":\\\"gte\\\",\\\"type\\\":\\\"iso8601 string\\\"},{\\\"description\\\":\\\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\",\\\"name\\\":\\\"lt\\\",\\\"type\\\":\\\"iso8601 string\\\"},{\\\"description\\\":\\\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\\\",\\\"name\\\":\\\"lte\\\",\\\"type\\\":\\\"iso8601 string\\\"}],\\\"type\\\":\\\"object\\\"} 
     * @param {String} idempotencyKey Uniquely provided string specific to this event. This should be a value which can't be duplicated between external systems, meaning that an id is not sufficient.
     * @param {String} message The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\\"received a package.\\\"). When live feed items are displayed to users, the subject's name is concatenated with the message and a joining space. Only <a> HTML tags with an \\\"href\\\" attribute are allowed. Other attributes and tags will be stripped.
     * @param {Number} subjectId The ID of the subject of the live feed item (i.e. the \\\"person\\\" id).
     * @param {String} subjectType The type of the subject of the live feed item. Currently only \\\"person\\\" is supported.
     * @param {String} userGuid The guid for the user that this live feed item should be shown to.
     * @param {module:api/LiveFeedItemsApi~v2ThirdPartyLiveFeedItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LiveFeedItem>}
     */
    v2ThirdPartyLiveFeedItemsPost(eventOccurredAt, idempotencyKey, message, subjectId, subjectType, userGuid, callback) {
      let postBody = null;
      // verify the required parameter 'eventOccurredAt' is set
      if (eventOccurredAt === undefined || eventOccurredAt === null) {
        throw new Error("Missing the required parameter 'eventOccurredAt' when calling v2ThirdPartyLiveFeedItemsPost");
      }
      // verify the required parameter 'idempotencyKey' is set
      if (idempotencyKey === undefined || idempotencyKey === null) {
        throw new Error("Missing the required parameter 'idempotencyKey' when calling v2ThirdPartyLiveFeedItemsPost");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling v2ThirdPartyLiveFeedItemsPost");
      }
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling v2ThirdPartyLiveFeedItemsPost");
      }
      // verify the required parameter 'subjectType' is set
      if (subjectType === undefined || subjectType === null) {
        throw new Error("Missing the required parameter 'subjectType' when calling v2ThirdPartyLiveFeedItemsPost");
      }
      // verify the required parameter 'userGuid' is set
      if (userGuid === undefined || userGuid === null) {
        throw new Error("Missing the required parameter 'userGuid' when calling v2ThirdPartyLiveFeedItemsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'event_occurred_at': eventOccurredAt,
        'idempotency_key': idempotencyKey,
        'message': message,
        'subject_id': subjectId,
        'subject_type': subjectType,
        'user_guid': userGuid
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = [LiveFeedItem];
      return this.apiClient.callApi(
        '/v2/third_party_live_feed_items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
