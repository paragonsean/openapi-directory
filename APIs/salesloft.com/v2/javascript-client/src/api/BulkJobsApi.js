/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkJob from '../model/BulkJob';

/**
* BulkJobs service.
* @module api/BulkJobsApi
* @version v2
*/
export default class BulkJobsApi {

    /**
    * Constructs a new BulkJobsApi. 
    * @alias module:api/BulkJobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2BulkJobsGet operation.
     * @callback module:api/BulkJobsApi~v2BulkJobsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BulkJob>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bulk jobs
     * Fetches multiple bulk job records. The records can be filtered, paged, and sorted according to the respective parameters.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [state] The state of the bulk job. Accepts multiple states. Each state must be one of: open, executing, done
     * @param {Object.<String, Object>} [id] Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {module:api/BulkJobsApi~v2BulkJobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BulkJob>}
     */
    v2BulkJobsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'state': this.apiClient.buildCollectionParam(opts['state'], 'csv'),
        'id': opts['id'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BulkJob];
      return this.apiClient.callApi(
        '/v2/bulk_jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2BulkJobsIdGet operation.
     * @callback module:api/BulkJobsApi~v2BulkJobsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a bulk job
     * Fetches a bulk job, by ID only.
     * @param {Number} id The id for the Bulk Job
     * @param {module:api/BulkJobsApi~v2BulkJobsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkJob}
     */
    v2BulkJobsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2BulkJobsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BulkJob;
      return this.apiClient.callApi(
        '/v2/bulk_jobs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2BulkJobsIdPut operation.
     * @callback module:api/BulkJobsApi~v2BulkJobsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bulk job
     * Updates a bulk job's name and / or marks a bulk job as 'ready_to_execute'.  May only be updated if the bulk job is still in an \"open\" state.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>. 
     * @param {Number} id The id for the bulk job to which the job data relates
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name for your bulk job
     * @param {Boolean} [readyToExecute] Whether the job is ready to be executed. Must be true or false.
     * @param {module:api/BulkJobsApi~v2BulkJobsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkJob}
     */
    v2BulkJobsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2BulkJobsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'ready_to_execute': opts['readyToExecute']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = BulkJob;
      return this.apiClient.callApi(
        '/v2/bulk_jobs/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2BulkJobsPost operation.
     * @callback module:api/BulkJobsApi~v2BulkJobsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bulk job
     * Creates a bulk job. The type of the bulk job must be included when created.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>. 
     * @param {String} type Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types.
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name for your bulk job
     * @param {module:api/BulkJobsApi~v2BulkJobsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkJob}
     */
    v2BulkJobsPost(type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling v2BulkJobsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'type': type
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = BulkJob;
      return this.apiClient.callApi(
        '/v2/bulk_jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
