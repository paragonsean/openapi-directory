/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';

/**
* Actions service.
* @module api/ActionsApi
* @version v2
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2ActionsIdJsonGet operation.
     * @callback module:api/ActionsApi~v2ActionsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an action
     * Fetches an action, by ID only. This endpoint will only return actions that are in_progress or pending_activity. Once an action is complete, the request for that action will return a 404 status code. 
     * @param {String} id Action ID
     * @param {module:api/ActionsApi~v2ActionsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    v2ActionsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2ActionsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/v2/actions/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ActionsJsonGet operation.
     * @callback module:api/ActionsApi~v2ActionsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Action>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List actions
     * Fetches multiple action records. The records can be filtered, paged, and sorted according to the respective parameters. Only actions that are currently \"in_progess\" will be returned by this endpoint.  If the requester is not an admin, this endpoint will only return actions belonging to the requester. If the request is an admin, this endpoint will return actions for the entire team. Additionaly, an admin may use the user_guid parameter to request actions that belong to specific users on the team. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of actions to fetch.
     * @param {Number} [stepId] Fetch actions by step ID
     * @param {String} [type] Filter actions by type
     * @param {Array.<String>} [dueOn] Equality filters that are applied to the due_on field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<String>} [userGuid] Filters actions by the user's guid. Multiple user guids can be applied. The user must be a team admin to filter other users' actions
     * @param {Array.<Number>} [personId] Filters actions by person_id. Multiple person ids can be applied
     * @param {Array.<Number>} [cadenceId] Filters actions by cadence_id. Multiple cadence ids can be applied
     * @param {Array.<Number>} [multitouchGroupId] Filters actions by multitouch_group_id. Multiple multitouch group ids can be applied
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/ActionsApi~v2ActionsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Action>}
     */
    v2ActionsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'step_id': opts['stepId'],
        'type': opts['type'],
        'due_on': this.apiClient.buildCollectionParam(opts['dueOn'], 'csv'),
        'user_guid': this.apiClient.buildCollectionParam(opts['userGuid'], 'csv'),
        'person_id': this.apiClient.buildCollectionParam(opts['personId'], 'csv'),
        'cadence_id': this.apiClient.buildCollectionParam(opts['cadenceId'], 'csv'),
        'multitouch_group_id': this.apiClient.buildCollectionParam(opts['multitouchGroupId'], 'csv'),
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Action];
      return this.apiClient.callApi(
        '/v2/actions.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
