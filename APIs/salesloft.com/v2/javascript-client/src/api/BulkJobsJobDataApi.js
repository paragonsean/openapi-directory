/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkJobResult from '../model/BulkJobResult';
import JobDataCreationResult from '../model/JobDataCreationResult';

/**
* BulkJobsJobData service.
* @module api/BulkJobsJobDataApi
* @version v2
*/
export default class BulkJobsJobDataApi {

    /**
    * Constructs a new BulkJobsJobDataApi. 
    * @alias module:api/BulkJobsJobDataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2BulkJobsBulkJobsIdJobDataGet operation.
     * @callback module:api/BulkJobsJobDataApi~v2BulkJobsBulkJobsIdJobDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BulkJobResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List job data for a bulk job
     * Fetches multiple job data records for a given bulk job. Pagination is not supported, but cursor based polling is via use of the `id[gt]` filter. Pass the last id seen (i.e. `id[gt]=1234`) in order to get the next batch of records.
     * @param {Number} bulkJobsId The id for the bulk job to which the job data relates
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [status] Filter by result status. Accepts multiple statuses. Each status must be one of pending, success, error, retrying
     * @param {Object.<String, Object>} [id] Filter by id using comparison operators. Only supports greater than (gt) comparison (i.e. id[gt]=123)
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {module:api/BulkJobsJobDataApi~v2BulkJobsBulkJobsIdJobDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BulkJobResult>}
     */
    v2BulkJobsBulkJobsIdJobDataGet(bulkJobsId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bulkJobsId' is set
      if (bulkJobsId === undefined || bulkJobsId === null) {
        throw new Error("Missing the required parameter 'bulkJobsId' when calling v2BulkJobsBulkJobsIdJobDataGet");
      }

      let pathParams = {
        'bulk_jobs_id': bulkJobsId
      };
      let queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'csv'),
        'id': opts['id'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BulkJobResult];
      return this.apiClient.callApi(
        '/v2/bulk_jobs/{bulk_jobs_id}/job_data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2BulkJobsBulkJobsIdJobDataPost operation.
     * @callback module:api/BulkJobsJobDataApi~v2BulkJobsBulkJobsIdJobDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDataCreationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create job data for a bulk job
     * Upload job data for the specified bulk job. Upload an array of objects, where element contains the parameters necessary to execute the individual calls. Each call to this endpoint can handle up to 5,000 records at a time. There is no limit to how many times you can create job data for a given bulk job.  For additional information on creating bulk jobs, the types of supported bulk jobs, and examples of the bulk job flow, visit the <a href=\"/bulk.html\" target=\"_blank\" rel=\"noopener noreferrer\">bulk job details page</a>. 
     * @param {Number} bulkJobsId The id for the bulk job to which the job data relates
     * @param {Array.<String>} data Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less.
     * @param {module:api/BulkJobsJobDataApi~v2BulkJobsBulkJobsIdJobDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDataCreationResult}
     */
    v2BulkJobsBulkJobsIdJobDataPost(bulkJobsId, data, callback) {
      let postBody = null;
      // verify the required parameter 'bulkJobsId' is set
      if (bulkJobsId === undefined || bulkJobsId === null) {
        throw new Error("Missing the required parameter 'bulkJobsId' when calling v2BulkJobsBulkJobsIdJobDataPost");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling v2BulkJobsBulkJobsIdJobDataPost");
      }

      let pathParams = {
        'bulk_jobs_id': bulkJobsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'data': this.apiClient.buildCollectionParam(data, 'csv')
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = JobDataCreationResult;
      return this.apiClient.callApi(
        '/v2/bulk_jobs/{bulk_jobs_id}/job_data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
