/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SavedListView from '../model/SavedListView';

/**
* SavedListViews service.
* @module api/SavedListViewsApi
* @version v2
*/
export default class SavedListViewsApi {

    /**
    * Constructs a new SavedListViewsApi. 
    * @alias module:api/SavedListViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2SavedListViewsIdJsonDelete operation.
     * @callback module:api/SavedListViewsApi~v2SavedListViewsIdJsonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a saved list view
     * Deletes a saved list view. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param {String} id Saved List View ID
     * @param {module:api/SavedListViewsApi~v2SavedListViewsIdJsonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2SavedListViewsIdJsonDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2SavedListViewsIdJsonDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/saved_list_views/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SavedListViewsIdJsonGet operation.
     * @callback module:api/SavedListViewsApi~v2SavedListViewsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedListView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a saved list view
     * Fetches a saved list view, by ID only. 
     * @param {String} id Saved List View ID
     * @param {module:api/SavedListViewsApi~v2SavedListViewsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedListView}
     */
    v2SavedListViewsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2SavedListViewsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SavedListView;
      return this.apiClient.callApi(
        '/v2/saved_list_views/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SavedListViewsIdJsonPut operation.
     * @callback module:api/SavedListViewsApi~v2SavedListViewsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedListView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a saved list view
     * Updates a saved list view. 
     * @param {String} id Saved List View ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isDefault] Whether the saved list view is the default
     * @param {String} [name] The name of the saved list view
     * @param {String} [viewParams] JSON object of list view parameters
     * @param {module:api/SavedListViewsApi~v2SavedListViewsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedListView}
     */
    v2SavedListViewsIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2SavedListViewsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'is_default': opts['isDefault'],
        'name': opts['name'],
        'view_params': opts['viewParams']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = SavedListView;
      return this.apiClient.callApi(
        '/v2/saved_list_views/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SavedListViewsJsonGet operation.
     * @callback module:api/SavedListViewsApi~v2SavedListViewsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SavedListView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List saved list views
     * Fetches multiple saved list view records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of saved list views to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {String} [view] Type of saved list views to fetch.
     * @param {String} [sortBy] Key to sort on, must be one of: name. Defaults to name
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/SavedListViewsApi~v2SavedListViewsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SavedListView>}
     */
    v2SavedListViewsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'view': opts['view'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SavedListView];
      return this.apiClient.callApi(
        '/v2/saved_list_views.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2SavedListViewsJsonPost operation.
     * @callback module:api/SavedListViewsApi~v2SavedListViewsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavedListView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a saved list view
     * Creates a saved list view. 
     * @param {String} name The name of the saved list view
     * @param {String} view The type of objects in the saved list view.  Value must be one of: people, companies, or recordings
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isDefault] Whether the saved list view is the default
     * @param {String} [viewParams] JSON object of list view parameters
     * @param {module:api/SavedListViewsApi~v2SavedListViewsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavedListView}
     */
    v2SavedListViewsJsonPost(name, view, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling v2SavedListViewsJsonPost");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling v2SavedListViewsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'is_default': opts['isDefault'],
        'name': name,
        'view': view,
        'view_params': opts['viewParams']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = SavedListView;
      return this.apiClient.callApi(
        '/v2/saved_list_views.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
