/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CadenceMembership from '../model/CadenceMembership';

/**
* CadenceMemberships service.
* @module api/CadenceMembershipsApi
* @version v2
*/
export default class CadenceMembershipsApi {

    /**
    * Constructs a new CadenceMembershipsApi. 
    * @alias module:api/CadenceMembershipsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2CadenceMembershipsIdJsonDelete operation.
     * @callback module:api/CadenceMembershipsApi~v2CadenceMembershipsIdJsonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cadence membership
     * Cadence Membership 
     * @param {String} id CadenceMembership ID
     * @param {module:api/CadenceMembershipsApi~v2CadenceMembershipsIdJsonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2CadenceMembershipsIdJsonDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CadenceMembershipsIdJsonDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/cadence_memberships/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CadenceMembershipsIdJsonGet operation.
     * @callback module:api/CadenceMembershipsApi~v2CadenceMembershipsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CadenceMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a cadence membership
     * Fetches a cadence membership, by ID only. 
     * @param {String} id CadenceMembership ID
     * @param {module:api/CadenceMembershipsApi~v2CadenceMembershipsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CadenceMembership}
     */
    v2CadenceMembershipsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CadenceMembershipsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CadenceMembership;
      return this.apiClient.callApi(
        '/v2/cadence_memberships/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CadenceMembershipsJsonGet operation.
     * @callback module:api/CadenceMembershipsApi~v2CadenceMembershipsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CadenceMembership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List cadence memberships
     * Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to the respective parameters. A cadence membership is the association between a person and their current and historical time on a cadence. Cadence membership records are mutable and change over time. If a person is added to a cadence and re-added to the same cadence in the future, there is a single membership record. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of cadence memberships to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Number} [personId] ID of the person to find cadence memberships for
     * @param {Number} [cadenceId] ID of the cadence to find cadence memberships for
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Boolean} [currentlyOnCadence] If true, return only cadence memberships for people currently on cadences.  If false, return cadence memberships for people who have been removed from or have completed a cadence.
     * @param {String} [sortBy] Key to sort on, must be one of: added_at, updated_at. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/CadenceMembershipsApi~v2CadenceMembershipsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CadenceMembership>}
     */
    v2CadenceMembershipsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'person_id': opts['personId'],
        'cadence_id': opts['cadenceId'],
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'currently_on_cadence': opts['currentlyOnCadence'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CadenceMembership];
      return this.apiClient.callApi(
        '/v2/cadence_memberships.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CadenceMembershipsJsonPost operation.
     * @callback module:api/CadenceMembershipsApi~v2CadenceMembershipsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CadenceMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a cadence membership
     * Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will default to the authenticated user, but can be set to any visible user on the authenticated team.  A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by the teammate, or the teammate has the Personal Cadence Admin permission. 
     * @param {Number} personId ID of the person to create a cadence membership for
     * @param {Number} cadenceId ID of the cadence to create a cadence membership for
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] ID of the user to create a cadence membership for. The associated cadence must be owned by the user, or it must be a team cadence
     * @param {Number} [stepId] ID of the step on which the person should start the cadence. Start on first step is the default behavior without this parameter.
     * @param {module:api/CadenceMembershipsApi~v2CadenceMembershipsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CadenceMembership}
     */
    v2CadenceMembershipsJsonPost(personId, cadenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling v2CadenceMembershipsJsonPost");
      }
      // verify the required parameter 'cadenceId' is set
      if (cadenceId === undefined || cadenceId === null) {
        throw new Error("Missing the required parameter 'cadenceId' when calling v2CadenceMembershipsJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'person_id': personId,
        'cadence_id': cadenceId,
        'user_id': opts['userId'],
        'step_id': opts['stepId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CadenceMembership;
      return this.apiClient.callApi(
        '/v2/cadence_memberships.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
