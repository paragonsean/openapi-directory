/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PendingEmail from '../model/PendingEmail';

/**
* PendingEmails service.
* @module api/PendingEmailsApi
* @version v2
*/
export default class PendingEmailsApi {

    /**
    * Constructs a new PendingEmailsApi. 
    * @alias module:api/PendingEmailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2PendingEmailsIdJsonPut operation.
     * @callback module:api/PendingEmailsApi~v2PendingEmailsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of an email sent by an External Email Client
     * Updates the status of an email sent by an External Email Client. Does not affect lofted emails. 
     * @param {String} id Email ID
     * @param {String} messageId The message id of the email that was sent
     * @param {String} status Delivery status of the email.  Valid statuses are 'sent' and 'failed'
     * @param {Object} opts Optional parameters
     * @param {String} [errorMessage] The error message indicating why the email failed to send
     * @param {String} [sentAt] The time that the email was actually sent in iso8601 format
     * @param {module:api/PendingEmailsApi~v2PendingEmailsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingEmail}
     */
    v2PendingEmailsIdJsonPut(id, messageId, status, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2PendingEmailsIdJsonPut");
      }
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling v2PendingEmailsIdJsonPut");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling v2PendingEmailsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'error_message': opts['errorMessage'],
        'message_id': messageId,
        'sent_at': opts['sentAt'],
        'status': status
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = PendingEmail;
      return this.apiClient.callApi(
        '/v2/pending_emails/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2PendingEmailsJsonGet operation.
     * @callback module:api/PendingEmailsApi~v2PendingEmailsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PendingEmail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a list of emails ready to be sent by an external email service. Only emails sent with an External Email Client will appear here.
     * Fetches a list of emails ready to be sent by an external email service. 
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/PendingEmailsApi~v2PendingEmailsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PendingEmail>}
     */
    v2PendingEmailsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PendingEmail];
      return this.apiClient.callApi(
        '/v2/pending_emails.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
