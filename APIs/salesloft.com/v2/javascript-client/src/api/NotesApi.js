/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Note from '../model/Note';
import Person from '../model/Person';

/**
* Notes service.
* @module api/NotesApi
* @version v2
*/
export default class NotesApi {

    /**
    * Constructs a new NotesApi. 
    * @alias module:api/NotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2NotesIdJsonDelete operation.
     * @callback module:api/NotesApi~v2NotesIdJsonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note
     * Deletes a note owned by authorized account. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     * @param {String} id Note ID
     * @param {module:api/NotesApi~v2NotesIdJsonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2NotesIdJsonDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2NotesIdJsonDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/notes/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NotesIdJsonGet operation.
     * @callback module:api/NotesApi~v2NotesIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a note
     * Fetches a note, by ID only. 
     * @param {String} id Note ID
     * @param {module:api/NotesApi~v2NotesIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    v2NotesIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2NotesIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v2/notes/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NotesIdJsonPut operation.
     * @callback module:api/NotesApi~v2NotesIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Person} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note
     * Updates a note. Any changes to the note or associated records will not reflect in your CRM. 
     * @param {String} id Note ID
     * @param {String} content The content of the note
     * @param {Object} opts Optional parameters
     * @param {Number} [callId] ID of the call with which the note is associated. The call cannot already have a note. If the note is associated to a call already, it will become associated to the requested call
     * @param {module:api/NotesApi~v2NotesIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Person}
     */
    v2NotesIdJsonPut(id, content, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2NotesIdJsonPut");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling v2NotesIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'call_id': opts['callId'],
        'content': content
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Person;
      return this.apiClient.callApi(
        '/v2/notes/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NotesJsonGet operation.
     * @callback module:api/NotesApi~v2NotesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Note>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes
     * Fetches multiple note records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param {Object} opts Optional parameters
     * @param {String} [associatedWithType] Case insensitive type of item with which the note is associated.  Value must be one of: person, account
     * @param {Number} [associatedWithId] ID of the item with which the note is associated.  The associated_with_type must also be present if this parameter is used
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Array.<Number>} [ids] IDs of notes to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/NotesApi~v2NotesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Note>}
     */
    v2NotesJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'associated_with_type': opts['associatedWithType'],
        'associated_with_id': opts['associatedWithId'],
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Note];
      return this.apiClient.callApi(
        '/v2/notes.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2NotesJsonPost operation.
     * @callback module:api/NotesApi~v2NotesJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a note
     * Creates a note. 
     * @param {Number} associatedWithId ID of the item with which the note is associated
     * @param {String} associatedWithType Case insensitive type of item with which the note is associated.  Value must be one of: person, account
     * @param {String} content The content of the note
     * @param {Object} opts Optional parameters
     * @param {Number} [callId] ID of the call with which the note is associated. The call cannot already have a note
     * @param {Boolean} [skipCrmSync] Boolean indicating if the CRM sync should be skipped.  No syncing will occur if true
     * @param {String} [subject] The subject of the note's crm activity, defaults to 'Note'
     * @param {String} [userGuid] The user to create the note for. Only team admins may create notes on behalf of other users. Defaults to the requesting user
     * @param {module:api/NotesApi~v2NotesJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    v2NotesJsonPost(associatedWithId, associatedWithType, content, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'associatedWithId' is set
      if (associatedWithId === undefined || associatedWithId === null) {
        throw new Error("Missing the required parameter 'associatedWithId' when calling v2NotesJsonPost");
      }
      // verify the required parameter 'associatedWithType' is set
      if (associatedWithType === undefined || associatedWithType === null) {
        throw new Error("Missing the required parameter 'associatedWithType' when calling v2NotesJsonPost");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling v2NotesJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'associated_with_id': associatedWithId,
        'associated_with_type': associatedWithType,
        'call_id': opts['callId'],
        'content': content,
        'skip_crm_sync': opts['skipCrmSync'],
        'subject': opts['subject'],
        'user_guid': opts['userGuid']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v2/notes.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
