/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Subscription from '../model/Subscription';

/**
* WebhookSubscriptions service.
* @module api/WebhookSubscriptionsApi
* @version v2
*/
export default class WebhookSubscriptionsApi {

    /**
    * Constructs a new WebhookSubscriptionsApi. 
    * @alias module:api/WebhookSubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2WebhookSubscriptionsGet operation.
     * @callback module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhook subscriptions
     * Fetches all of the customer's webhook subscriptions for your application.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enabled] Filters webhook subscriptions by whether is enabled or not.
     * @param {module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    v2WebhookSubscriptionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'enabled': opts['enabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/v2/webhook_subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2WebhookSubscriptionsIdDelete operation.
     * @callback module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook subscription
     * Deletes a webhook subscription. This operation is not reversible without contacting support. This operation can be called multiple times successfully.
     * @param {Number} id The id of the Webhook Subscription to delete
     * @param {module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2WebhookSubscriptionsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/webhook_subscriptions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2WebhookSubscriptionsIdGet operation.
     * @callback module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a webhook subscription
     * Fetches a webhook subscription, by ID only.
     * @param {Number} id The id for the Webhook Subscription
     * @param {module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    v2WebhookSubscriptionsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v2/webhook_subscriptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2WebhookSubscriptionsIdPut operation.
     * @callback module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook subscription
     * Updates a webhook subscription. Request must be made with a valid Oauth token or API key.
     * @param {Number} id The Webhook Suscription id to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} [enabled] Enable or disable the webhook subscription
     * @param {module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    v2WebhookSubscriptionsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2WebhookSubscriptionsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'enabled': opts['enabled']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v2/webhook_subscriptions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2WebhookSubscriptionsPost operation.
     * @callback module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook subscription
     * Creates a webhook subscription. Visit the <a href=\"/webhooks.html\" target=\"_blank\" rel=\"noopener noreferrer\">webhooks page</a> for additional details and a list of available webhooks. Request must be made with a valid Oauth token or API key.
     * @param {String} callbackToken Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft.
     * @param {String} callbackUrl URL for your callback handler
     * @param {String} eventType Type of event the subscription is for. Visit the \\\"Event Types\\\" section of the webhooks page to find a list of supported event types.
     * @param {module:api/WebhookSubscriptionsApi~v2WebhookSubscriptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    v2WebhookSubscriptionsPost(callbackToken, callbackUrl, eventType, callback) {
      let postBody = null;
      // verify the required parameter 'callbackToken' is set
      if (callbackToken === undefined || callbackToken === null) {
        throw new Error("Missing the required parameter 'callbackToken' when calling v2WebhookSubscriptionsPost");
      }
      // verify the required parameter 'callbackUrl' is set
      if (callbackUrl === undefined || callbackUrl === null) {
        throw new Error("Missing the required parameter 'callbackUrl' when calling v2WebhookSubscriptionsPost");
      }
      // verify the required parameter 'eventType' is set
      if (eventType === undefined || eventType === null) {
        throw new Error("Missing the required parameter 'eventType' when calling v2WebhookSubscriptionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'callback_token': callbackToken,
        'callback_url': callbackUrl,
        'event_type': eventType
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/v2/webhook_subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
