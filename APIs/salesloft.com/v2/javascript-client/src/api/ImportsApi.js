/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Import from '../model/Import';

/**
* Imports service.
* @module api/ImportsApi
* @version v2
*/
export default class ImportsApi {

    /**
    * Constructs a new ImportsApi. 
    * @alias module:api/ImportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2ImportsIdJsonDelete operation.
     * @callback module:api/ImportsApi~v2ImportsIdJsonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an import
     * Deletes an import, by ID only. The associated people can be deleted as part of the deletion process.  Admin users can access imports for the entire team, but non-admin users can only access their own imports. 
     * @param {String} id Import ID
     * @param {Object} opts Optional parameters
     * @param {String} [undo] Whether to delete people on this Import. Possible values are: [not present], all, single.  'single' will delete people who are only present in this Import. 'all' will delete people even if they are present in other Imports. Not specifying this parameter will not delete any people 
     * @param {module:api/ImportsApi~v2ImportsIdJsonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2ImportsIdJsonDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2ImportsIdJsonDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'undo': opts['undo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/imports/{id}.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ImportsIdJsonGet operation.
     * @callback module:api/ImportsApi~v2ImportsIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch an import
     * Fetches an import, by ID only.  Admin users can access imports for the entire team, but non-admin users can only access their own imports. 
     * @param {String} id Import ID
     * @param {module:api/ImportsApi~v2ImportsIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    v2ImportsIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2ImportsIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/v2/imports/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ImportsIdJsonPut operation.
     * @callback module:api/ImportsApi~v2ImportsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an import
     * Updates an import, by ID only.  Admin users can access imports for the entire team, but non-admin users can only access their own imports. 
     * @param {String} id Import ID
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name, recommended to be easily identifiable to a user
     * @param {Number} [userId] ID of the User that owns this Import
     * @param {module:api/ImportsApi~v2ImportsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    v2ImportsIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2ImportsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/v2/imports/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ImportsJsonGet operation.
     * @callback module:api/ImportsApi~v2ImportsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Import>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List imports
     * Fetches multiple imports. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of imports to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Array.<Number>} [userIds] ID of users to fetch imports for. Using this filter will return an empty array for non-admin users who request other user's imports
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at. Defaults to created_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/ImportsApi~v2ImportsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Import>}
     */
    v2ImportsJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'user_ids': this.apiClient.buildCollectionParam(opts['userIds'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Import];
      return this.apiClient.callApi(
        '/v2/imports.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2ImportsJsonPost operation.
     * @callback module:api/ImportsApi~v2ImportsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Import} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an import
     * Creates an import. 
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name, recommended to be easily identifiable to a user
     * @param {Number} [userId] ID of the User that owns this Import
     * @param {module:api/ImportsApi~v2ImportsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Import}
     */
    v2ImportsJsonPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Import;
      return this.apiClient.callApi(
        '/v2/imports.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
