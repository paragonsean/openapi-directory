/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import User from '../model/User';

/**
* Users service.
* @module api/UsersApi
* @version v2
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2UsersIdJsonGet operation.
     * @callback module:api/UsersApi~v2UsersIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a user
     * Fetches a user, by ID only. 
     * @param {String} id User ID
     * @param {module:api/UsersApi~v2UsersIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    v2UsersIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2UsersIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v2/users/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2UsersIdJsonPut operation.
     * @callback module:api/UsersApi~v2UsersIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user
     * Updates a user. 
     * @param {String} id User ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] Active status of the user's account
     * @param {Number} [groupId] Group assigned to the user
     * @param {String} [roleId] Role assigned to the user. Must be one of: Admin, User, or a custom role ID
     * @param {String} [workCountry] The user's work country (alpha-2 code)
     * @param {module:api/UsersApi~v2UsersIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    v2UsersIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2UsersIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'active': opts['active'],
        'group_id': opts['groupId'],
        'role_id': opts['roleId'],
        'work_country': opts['workCountry']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/v2/users/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2UsersJsonGet operation.
     * @callback module:api/UsersApi~v2UsersJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users
     * Non Admin: Lists only your user, or all on team depending on group visibility policy Team Admin: Lists users associated with your team 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of users to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Array.<String>} [guid] Filters list to only include guids
     * @param {Array.<String>} [groupId] Filters users by group_id.  An additional value of \"_is_null\" can be passed to filter users that are not in a group
     * @param {Array.<String>} [roleId] Filters users by role_id
     * @param {String} [search] Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email
     * @param {Boolean} [active] Filters users based on active attribute. Defaults to not applied
     * @param {Boolean} [visibleOnly] Defaults to true.  When true, only shows users that are actionable based on the team's privacy settings. When false, shows all users on the team, even if you can't take action on that user. Deactivated users are also included when false. 
     * @param {Number} [perPage] How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined
     * @param {Number} [page] The current page to fetch users from. Defaults to returning all users
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [hasCrmUser] Filters users based on if they have a crm user mapped or not.
     * @param {Array.<String>} [workCountry] Filters users based on assigned work_country.
     * @param {String} [sortBy] Key to sort on, must be one of: id, email, name, group, role. Defaults to id
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {module:api/UsersApi~v2UsersJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    v2UsersJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'guid': this.apiClient.buildCollectionParam(opts['guid'], 'csv'),
        'group_id': this.apiClient.buildCollectionParam(opts['groupId'], 'csv'),
        'role_id': this.apiClient.buildCollectionParam(opts['roleId'], 'csv'),
        'search': opts['search'],
        'active': opts['active'],
        'visible_only': opts['visibleOnly'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'has_crm_user': opts['hasCrmUser'],
        'work_country': this.apiClient.buildCollectionParam(opts['workCountry'], 'csv'),
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/v2/users.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
