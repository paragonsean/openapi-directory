/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Cadence from '../model/Cadence';

/**
* Cadences service.
* @module api/CadencesApi
* @version v2
*/
export default class CadencesApi {

    /**
    * Constructs a new CadencesApi. 
    * @alias module:api/CadencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2CadencesIdJsonGet operation.
     * @callback module:api/CadencesApi~v2CadencesIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cadence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a cadence
     * Fetches a cadence, by ID only. 
     * @param {String} id Cadence ID
     * @param {module:api/CadencesApi~v2CadencesIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cadence}
     */
    v2CadencesIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CadencesIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Cadence;
      return this.apiClient.callApi(
        '/v2/cadences/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CadencesJsonGet operation.
     * @callback module:api/CadencesApi~v2CadencesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Cadence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List cadences
     * Fetches multiple cadence records. The records can be filtered, paged, and sorted according to the respective parameters. 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of cadences to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Array.<String>} [updatedAt] Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]} 
     * @param {Boolean} [teamCadence] Filters cadences by whether they are a team cadence or not
     * @param {Boolean} [shared] Filters cadences by whether they are shared
     * @param {Array.<String>} [ownedByGuid] Filters cadences by the owner's guid. Multiple owner guids can be applied
     * @param {Boolean} [peopleAddable] Filters cadences by whether they are able to have people added to them
     * @param {Array.<String>} [name] Filters cadences by name
     * @param {String} [groupIds] Filters by group ids. Also supports group ids passed in as a JSON array string
     * @param {Boolean} [archived] Filters by whether the Cadences have been archived. Excluding this field will result in both archived and unarchived Cadences to return.
     * @param {String} [sortBy] Key to sort on, must be one of: created_at, updated_at, name. Defaults to updated_at
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {module:api/CadencesApi~v2CadencesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Cadence>}
     */
    v2CadencesJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'updated_at': this.apiClient.buildCollectionParam(opts['updatedAt'], 'csv'),
        'team_cadence': opts['teamCadence'],
        'shared': opts['shared'],
        'owned_by_guid': this.apiClient.buildCollectionParam(opts['ownedByGuid'], 'csv'),
        'people_addable': opts['peopleAddable'],
        'name': this.apiClient.buildCollectionParam(opts['name'], 'csv'),
        'group_ids': opts['groupIds'],
        'archived': opts['archived'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Cadence];
      return this.apiClient.callApi(
        '/v2/cadences.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
