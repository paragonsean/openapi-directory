/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LiveWebsiteTrackingParameter from '../model/LiveWebsiteTrackingParameter';

/**
* LiveWebsiteTrackingParameters service.
* @module api/LiveWebsiteTrackingParametersApi
* @version v2
*/
export default class LiveWebsiteTrackingParametersApi {

    /**
    * Constructs a new LiveWebsiteTrackingParametersApi. 
    * @alias module:api/LiveWebsiteTrackingParametersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2LiveWebsiteTrackingParametersJsonPost operation.
     * @callback module:api/LiveWebsiteTrackingParametersApi~v2LiveWebsiteTrackingParametersJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveWebsiteTrackingParameter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Live Website Tracking Parameter
     * Creates a Live Website Tracking parameter to identify a person 
     * @param {Number} personId The person to create the LiveWebsiteTrackingParameter for
     * @param {module:api/LiveWebsiteTrackingParametersApi~v2LiveWebsiteTrackingParametersJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveWebsiteTrackingParameter}
     */
    v2LiveWebsiteTrackingParametersJsonPost(personId, callback) {
      let postBody = null;
      // verify the required parameter 'personId' is set
      if (personId === undefined || personId === null) {
        throw new Error("Missing the required parameter 'personId' when calling v2LiveWebsiteTrackingParametersJsonPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'person_id': personId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = LiveWebsiteTrackingParameter;
      return this.apiClient.callApi(
        '/v2/live_website_tracking_parameters.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
