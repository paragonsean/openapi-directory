/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CrmUser from '../model/CrmUser';

/**
* CrmUsers service.
* @module api/CrmUsersApi
* @version v2
*/
export default class CrmUsersApi {

    /**
    * Constructs a new CrmUsersApi. 
    * @alias module:api/CrmUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2CrmUsersJsonGet operation.
     * @callback module:api/CrmUsersApi~v2CrmUsersJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CrmUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List crm users
     * Crm Users 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [ids] IDs of crm users to fetch. If a record can't be found, that record won't be returned and your request will be successful
     * @param {Array.<String>} [crmId] Filters crm users by crm_ids
     * @param {Array.<Number>} [userId] Filters crm users by user_ids
     * @param {Array.<String>} [userGuid] Filters crm users by user guids
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {Boolean} [limitPagingCounts] Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data
     * @param {String} [sortBy] Key to sort on, must be one of: id, updated_at. Defaults to id
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {module:api/CrmUsersApi~v2CrmUsersJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CrmUser>}
     */
    v2CrmUsersJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv'),
        'crm_id': this.apiClient.buildCollectionParam(opts['crmId'], 'csv'),
        'user_id': this.apiClient.buildCollectionParam(opts['userId'], 'csv'),
        'user_guid': this.apiClient.buildCollectionParam(opts['userGuid'], 'csv'),
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'limit_paging_counts': opts['limitPagingCounts'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CrmUser];
      return this.apiClient.callApi(
        '/v2/crm_users.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
