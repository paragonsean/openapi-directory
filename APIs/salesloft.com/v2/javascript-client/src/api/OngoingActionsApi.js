/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action from '../model/Action';

/**
* OngoingActions service.
* @module api/OngoingActionsApi
* @version v2
*/
export default class OngoingActionsApi {

    /**
    * Constructs a new OngoingActionsApi. 
    * @alias module:api/OngoingActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2OngoingActionsJsonPost operation.
     * @callback module:api/OngoingActionsApi~v2OngoingActionsJsonPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Action} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an ongoing action
     * Creates an ongoing action. An ongoing action is an action that is not yet completed, but progress has been made towards the completion. The user should not need to do anything for an ongoing action to be completed. An ongoing action can be later completed by creating an activity.  Ongoing actions are marked as status=pending_activity. 
     * @param {Object} opts Optional parameters
     * @param {Number} [actionId] Action that is being marked ongoing. This will validate that the action is still valid before modifying it. Ongoing actions can not be marked ongoing. 
     * @param {module:api/OngoingActionsApi~v2OngoingActionsJsonPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Action}
     */
    v2OngoingActionsJsonPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action_id': opts['actionId']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = Action;
      return this.apiClient.callApi(
        '/v2/ongoing_actions.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
