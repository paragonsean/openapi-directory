/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalendarEvent from '../model/CalendarEvent';

/**
* CalendarEvents service.
* @module api/CalendarEventsApi
* @version v2
*/
export default class CalendarEventsApi {

    /**
    * Constructs a new CalendarEventsApi. 
    * @alias module:api/CalendarEventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v2CalendarEventsGet operation.
     * @callback module:api/CalendarEventsApi~v2CalendarEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CalendarEvent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List calendar events
     * Returns all calendar events, paginated and filtered by the date.
     * @param {Object} opts Optional parameters
     * @param {Number} [perPage] How many records to show per page in the range [1, 100]. Defaults to 25
     * @param {Number} [page] The current page to fetch results from. Defaults to 1
     * @param {Boolean} [includePagingCounts] Whether to include total_pages and total_count in the metadata. Defaults to false
     * @param {String} [sortBy] Key to sort on, must be one of: start_time. Defaults to start_time
     * @param {String} [sortDirection] Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
     * @param {String} [startTime] Lower bound (inclusive) for a calendar event's end time to filter by. Must be in ISO 8601 format.  Example: `2022-02-14T10:12:59+00:00`. 
     * @param {String} [endTime] Upper bound (exclusive) for a calendar event's start time to filter by. Must be in ISO 8601 format.  Example: `2022-02-14T10:12:59+00:00`. 
     * @param {String} [userGuid] user_guid of the user who created or included as a guest to the event. 
     * @param {String} [calendarId] calendar_id of the user who created or included as a guest to the event. 
     * @param {module:api/CalendarEventsApi~v2CalendarEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CalendarEvent>}
     */
    v2CalendarEventsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'per_page': opts['perPage'],
        'page': opts['page'],
        'include_paging_counts': opts['includePagingCounts'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'user_guid': opts['userGuid'],
        'calendar_id': opts['calendarId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CalendarEvent];
      return this.apiClient.callApi(
        '/v2/calendar/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2CalendarEventsUpsertPost operation.
     * @callback module:api/CalendarEventsApi~v2CalendarEventsUpsertPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalendarEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert a calendar event
     *   Upserts a calendar event object.   Upsert key is a combination of `id` and `i_cal_uid` scoped to the given `calendar_id`.   Bulk operations:   This endpoint is used for bulk operations, see https://developers.salesloft.com/bulk.html for integration instructions.   Use `calendar/events/upsert` as an event type, and this spec as a data spec.   This endpoint should be used directly for the time sensitive calendar event updates. 
     * @param {String} calendarId   Calendar ID of the calendar event owner.   For the External Calendar connection use `external_{salesloft_user_guid}` format.   Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`. 
     * @param {Date} endTime   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: `2022-02-14T10:12:59+00:00`. 
     * @param {String} iCalUid   icalUID of the calendar event. Unique identifier for a calendar event across calendars.    Used as an upsert key. 
     * @param {String} id   Id of the calendar event, different for each occurrence in a recurring series.    Used as an upsert key. 
     * @param {Date} startTime   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: `2022-02-14T10:12:59+00:00`. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allDay] Should be set to `true` for all day calendar events.
     * @param {Object.<String, Object>} [attendees]   List of attendees of the calendar event.   Example:   ```     {       ...       \\\"attendees\\\": [         {           \\\"name\\\": \\\"Alice\\\",           \\\"email\\\": \\\"alice@example.com\\\",           \\\"status\\\": \\\"accepted\\\",           \\\"organizer\\\": true         },         {           \\\"name\\\": \\\"Bob\\\",           \\\"email\\\": \\\"bob@example.com\\\",           \\\"status\\\": \\\"needsAction\\\",           \\\"organizer\\\": false         }       ]     }   ```   `name`: full name of the attendee    `email`: email address of the attendee    `status`: one of the following - needsAction, accepted, tentative, declined    `organizer`: whether the attendee is the organizer of the calendar event 
     * @param {String} [canceledAt]   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.   Example: `2022-02-14T10:12:59+00:00`. 
     * @param {String} [description] Description of the calendar event
     * @param {String} [location] Location of the calendar event as free-form text.
     * @param {String} [organizer]   Email address of the organizer 
     * @param {Boolean} [recurring] Should be set to `true` if this is one of recurring series calendar event.
     * @param {String} [status]   Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.   Possible values: `confirmed`, `tentative`, `cancelled`.   Example: `confirmed`. 
     * @param {String} [title] Title of the calendar event
     * @param {String} [updatedAt]   Last modification time of the event in the ISO 8601 format with a time zone offset. The event will not be updated if the 'updated_at' timestamp from the payload is earlier than the one in the database.   Example: `2022-02-14T10:12:59+00:00`. 
     * @param {module:api/CalendarEventsApi~v2CalendarEventsUpsertPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalendarEvent}
     */
    v2CalendarEventsUpsertPost(calendarId, endTime, iCalUid, id, startTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'calendarId' is set
      if (calendarId === undefined || calendarId === null) {
        throw new Error("Missing the required parameter 'calendarId' when calling v2CalendarEventsUpsertPost");
      }
      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling v2CalendarEventsUpsertPost");
      }
      // verify the required parameter 'iCalUid' is set
      if (iCalUid === undefined || iCalUid === null) {
        throw new Error("Missing the required parameter 'iCalUid' when calling v2CalendarEventsUpsertPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2CalendarEventsUpsertPost");
      }
      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling v2CalendarEventsUpsertPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'all_day': opts['allDay'],
        'attendees': opts['attendees'],
        'calendar_id': calendarId,
        'canceled_at': opts['canceledAt'],
        'description': opts['description'],
        'end_time': endTime,
        'i_cal_uid': iCalUid,
        'id': id,
        'location': opts['location'],
        'organizer': opts['organizer'],
        'recurring': opts['recurring'],
        'start_time': startTime,
        'status': opts['status'],
        'title': opts['title'],
        'updated_at': opts['updatedAt']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['*/*'];
      let returnType = CalendarEvent;
      return this.apiClient.callApi(
        '/v2/calendar/events/upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
