/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedAccountCounts from './EmbeddedAccountCounts';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Account model module.
 * @module model/Account
 * @version v2
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('account_tier')) {
                obj['account_tier'] = EmbeddedResource.constructFromObject(data['account_tier']);
            }
            if (data.hasOwnProperty('archived_at')) {
                obj['archived_at'] = ApiClient.convertToType(data['archived_at'], 'Date');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('company_stage')) {
                obj['company_stage'] = EmbeddedResource.constructFromObject(data['company_stage']);
            }
            if (data.hasOwnProperty('company_type')) {
                obj['company_type'] = ApiClient.convertToType(data['company_type'], 'String');
            }
            if (data.hasOwnProperty('conversational_name')) {
                obj['conversational_name'] = ApiClient.convertToType(data['conversational_name'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = EmbeddedAccountCounts.constructFromObject(data['counts']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = EmbeddedResource.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('crm_id')) {
                obj['crm_id'] = ApiClient.convertToType(data['crm_id'], 'String');
            }
            if (data.hasOwnProperty('crm_object_type')) {
                obj['crm_object_type'] = ApiClient.convertToType(data['crm_object_type'], 'String');
            }
            if (data.hasOwnProperty('crm_url')) {
                obj['crm_url'] = ApiClient.convertToType(data['crm_url'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('do_not_contact')) {
                obj['do_not_contact'] = ApiClient.convertToType(data['do_not_contact'], 'Boolean');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('founded')) {
                obj['founded'] = ApiClient.convertToType(data['founded'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('last_contacted_at')) {
                obj['last_contacted_at'] = ApiClient.convertToType(data['last_contacted_at'], 'Date');
            }
            if (data.hasOwnProperty('last_contacted_by')) {
                obj['last_contacted_by'] = EmbeddedResource.constructFromObject(data['last_contacted_by']);
            }
            if (data.hasOwnProperty('last_contacted_person')) {
                obj['last_contacted_person'] = EmbeddedResource.constructFromObject(data['last_contacted_person']);
            }
            if (data.hasOwnProperty('last_contacted_type')) {
                obj['last_contacted_type'] = ApiClient.convertToType(data['last_contacted_type'], 'String');
            }
            if (data.hasOwnProperty('linkedin_url')) {
                obj['linkedin_url'] = ApiClient.convertToType(data['linkedin_url'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = EmbeddedResource.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('owner_crm_id')) {
                obj['owner_crm_id'] = ApiClient.convertToType(data['owner_crm_id'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('revenue_range')) {
                obj['revenue_range'] = ApiClient.convertToType(data['revenue_range'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('twitter_handle')) {
                obj['twitter_handle'] = ApiClient.convertToType(data['twitter_handle'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user_relationships')) {
                obj['user_relationships'] = ApiClient.convertToType(data['user_relationships'], Object);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account_tier`
        if (data['account_tier']) { // data not null
          EmbeddedResource.validateJSON(data['account_tier']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // validate the optional field `company_stage`
        if (data['company_stage']) { // data not null
          EmbeddedResource.validateJSON(data['company_stage']);
        }
        // ensure the json data is a string
        if (data['company_type'] && !(typeof data['company_type'] === 'string' || data['company_type'] instanceof String)) {
            throw new Error("Expected the field `company_type` to be a primitive type in the JSON string but got " + data['company_type']);
        }
        // ensure the json data is a string
        if (data['conversational_name'] && !(typeof data['conversational_name'] === 'string' || data['conversational_name'] instanceof String)) {
            throw new Error("Expected the field `conversational_name` to be a primitive type in the JSON string but got " + data['conversational_name']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `counts`
        if (data['counts']) { // data not null
          EmbeddedAccountCounts.validateJSON(data['counts']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          EmbeddedResource.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['crm_id'] && !(typeof data['crm_id'] === 'string' || data['crm_id'] instanceof String)) {
            throw new Error("Expected the field `crm_id` to be a primitive type in the JSON string but got " + data['crm_id']);
        }
        // ensure the json data is a string
        if (data['crm_object_type'] && !(typeof data['crm_object_type'] === 'string' || data['crm_object_type'] instanceof String)) {
            throw new Error("Expected the field `crm_object_type` to be a primitive type in the JSON string but got " + data['crm_object_type']);
        }
        // ensure the json data is a string
        if (data['crm_url'] && !(typeof data['crm_url'] === 'string' || data['crm_url'] instanceof String)) {
            throw new Error("Expected the field `crm_url` to be a primitive type in the JSON string but got " + data['crm_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['founded'] && !(typeof data['founded'] === 'string' || data['founded'] instanceof String)) {
            throw new Error("Expected the field `founded` to be a primitive type in the JSON string but got " + data['founded']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // validate the optional field `last_contacted_by`
        if (data['last_contacted_by']) { // data not null
          EmbeddedResource.validateJSON(data['last_contacted_by']);
        }
        // validate the optional field `last_contacted_person`
        if (data['last_contacted_person']) { // data not null
          EmbeddedResource.validateJSON(data['last_contacted_person']);
        }
        // ensure the json data is a string
        if (data['last_contacted_type'] && !(typeof data['last_contacted_type'] === 'string' || data['last_contacted_type'] instanceof String)) {
            throw new Error("Expected the field `last_contacted_type` to be a primitive type in the JSON string but got " + data['last_contacted_type']);
        }
        // ensure the json data is a string
        if (data['linkedin_url'] && !(typeof data['linkedin_url'] === 'string' || data['linkedin_url'] instanceof String)) {
            throw new Error("Expected the field `linkedin_url` to be a primitive type in the JSON string but got " + data['linkedin_url']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          EmbeddedResource.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['owner_crm_id'] && !(typeof data['owner_crm_id'] === 'string' || data['owner_crm_id'] instanceof String)) {
            throw new Error("Expected the field `owner_crm_id` to be a primitive type in the JSON string but got " + data['owner_crm_id']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['revenue_range'] && !(typeof data['revenue_range'] === 'string' || data['revenue_range'] instanceof String)) {
            throw new Error("Expected the field `revenue_range` to be a primitive type in the JSON string but got " + data['revenue_range']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['twitter_handle'] && !(typeof data['twitter_handle'] === 'string' || data['twitter_handle'] instanceof String)) {
            throw new Error("Expected the field `twitter_handle` to be a primitive type in the JSON string but got " + data['twitter_handle']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} account_tier
 */
Account.prototype['account_tier'] = undefined;

/**
 * Datetime of when the Account was archived, if archived
 * @member {Date} archived_at
 */
Account.prototype['archived_at'] = undefined;

/**
 * City
 * @member {String} city
 */
Account.prototype['city'] = undefined;

/**
 * @member {module:model/EmbeddedResource} company_stage
 */
Account.prototype['company_stage'] = undefined;

/**
 * Type of the Account's company
 * @member {String} company_type
 */
Account.prototype['company_type'] = undefined;

/**
 * Conversational name of the Account
 * @member {String} conversational_name
 */
Account.prototype['conversational_name'] = undefined;

/**
 * Country
 * @member {String} country
 */
Account.prototype['country'] = undefined;

/**
 * @member {module:model/EmbeddedAccountCounts} counts
 */
Account.prototype['counts'] = undefined;

/**
 * Datetime of when the Account was created
 * @member {Date} created_at
 */
Account.prototype['created_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} creator
 */
Account.prototype['creator'] = undefined;

/**
 * CRM ID
 * @member {String} crm_id
 */
Account.prototype['crm_id'] = undefined;

/**
 * CRM object type
 * @member {String} crm_object_type
 */
Account.prototype['crm_object_type'] = undefined;

/**
 * CRM url
 * @member {String} crm_url
 */
Account.prototype['crm_url'] = undefined;

/**
 * Custom fields are defined by the user's team. Only fields with values are presented in the API.
 * @member {Object} custom_fields
 */
Account.prototype['custom_fields'] = undefined;

/**
 * Description
 * @member {String} description
 */
Account.prototype['description'] = undefined;

/**
 * Whether this company has opted out of communications. Do not contact someone at this company when this is set to true
 * @member {Boolean} do_not_contact
 */
Account.prototype['do_not_contact'] = undefined;

/**
 * Website domain, not a fully qualified URI
 * @member {String} domain
 */
Account.prototype['domain'] = undefined;

/**
 * Date or year of founding
 * @member {String} founded
 */
Account.prototype['founded'] = undefined;

/**
 * ID of Account
 * @member {Number} id
 */
Account.prototype['id'] = undefined;

/**
 * Industry
 * @member {String} industry
 */
Account.prototype['industry'] = undefined;

/**
 * Datetime this Account was last contacted
 * @member {Date} last_contacted_at
 */
Account.prototype['last_contacted_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} last_contacted_by
 */
Account.prototype['last_contacted_by'] = undefined;

/**
 * @member {module:model/EmbeddedResource} last_contacted_person
 */
Account.prototype['last_contacted_person'] = undefined;

/**
 * The type of the last touch to this Account. Can be call, email, other
 * @member {String} last_contacted_type
 */
Account.prototype['last_contacted_type'] = undefined;

/**
 * Full LinkedIn url
 * @member {String} linkedin_url
 */
Account.prototype['linkedin_url'] = undefined;

/**
 * Time locale
 * @member {String} locale
 */
Account.prototype['locale'] = undefined;

/**
 * Account Full Name
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * @member {module:model/EmbeddedResource} owner
 */
Account.prototype['owner'] = undefined;

/**
 * Mapped owner field from the CRM
 * @member {String} owner_crm_id
 */
Account.prototype['owner_crm_id'] = undefined;

/**
 * Phone number without formatting
 * @member {String} phone
 */
Account.prototype['phone'] = undefined;

/**
 * Postal code
 * @member {String} postal_code
 */
Account.prototype['postal_code'] = undefined;

/**
 * Estimated revenue range
 * @member {String} revenue_range
 */
Account.prototype['revenue_range'] = undefined;

/**
 * Estimated number of people in employment
 * @member {String} size
 */
Account.prototype['size'] = undefined;

/**
 * State
 * @member {String} state
 */
Account.prototype['state'] = undefined;

/**
 * Street name and number
 * @member {String} street
 */
Account.prototype['street'] = undefined;

/**
 * All tags applied to this Account
 * @member {Array.<String>} tags
 */
Account.prototype['tags'] = undefined;

/**
 * Twitter handle, with @
 * @member {String} twitter_handle
 */
Account.prototype['twitter_handle'] = undefined;

/**
 * Datetime of when the Account was last updated
 * @member {Date} updated_at
 */
Account.prototype['updated_at'] = undefined;

/**
 * Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values
 * @member {Object} user_relationships
 */
Account.prototype['user_relationships'] = undefined;

/**
 * Website
 * @member {String} website
 */
Account.prototype['website'] = undefined;






export default Account;

