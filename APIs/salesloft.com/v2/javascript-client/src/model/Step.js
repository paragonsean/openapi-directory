/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Step model module.
 * @module model/Step
 * @version v2
 */
class Step {
    /**
     * Constructs a new <code>Step</code>.
     * @alias module:model/Step
     */
    constructor() { 
        
        Step.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Step</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Step} obj Optional instance to populate.
     * @return {module:model/Step} The populated <code>Step</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Step();

            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Number');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = EmbeddedResource.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('multitouch_enabled')) {
                obj['multitouch_enabled'] = ApiClient.convertToType(data['multitouch_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('step_number')) {
                obj['step_number'] = ApiClient.convertToType(data['step_number'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Step</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Step</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          EmbeddedResource.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} cadence
 */
Step.prototype['cadence'] = undefined;

/**
 * Datetime of when the Step was created
 * @member {Date} created_at
 */
Step.prototype['created_at'] = undefined;

/**
 * Day this step is associated with up
 * @member {Number} day
 */
Step.prototype['day'] = undefined;

/**
 * @member {module:model/EmbeddedResource} details
 */
Step.prototype['details'] = undefined;

/**
 * Whether this step is currently active
 * @member {Boolean} disabled
 */
Step.prototype['disabled'] = undefined;

/**
 * Display name of the step
 * @member {String} display_name
 */
Step.prototype['display_name'] = undefined;

/**
 * ID of Step
 * @member {Number} id
 */
Step.prototype['id'] = undefined;

/**
 * Whether this step is a multitouch cadence step
 * @member {Boolean} multitouch_enabled
 */
Step.prototype['multitouch_enabled'] = undefined;

/**
 * Name of the step
 * @member {String} name
 */
Step.prototype['name'] = undefined;

/**
 * The number of the step for this day
 * @member {Number} step_number
 */
Step.prototype['step_number'] = undefined;

/**
 * The type of the action scheduled by this step. Valid types are: email, phone, integration, other. New types may be added in the future. 
 * @member {String} type
 */
Step.prototype['type'] = undefined;

/**
 * Datetime of when the Step was last updated
 * @member {Date} updated_at
 */
Step.prototype['updated_at'] = undefined;






export default Step;

