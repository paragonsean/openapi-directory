/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';
import MeetingUrl from './MeetingUrl';

/**
 * The MeetingSetting model module.
 * @module model/MeetingSetting
 * @version v2
 */
class MeetingSetting {
    /**
     * Constructs a new <code>MeetingSetting</code>.
     * @alias module:model/MeetingSetting
     */
    constructor() { 
        
        MeetingSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MeetingSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeetingSetting} obj Optional instance to populate.
     * @return {module:model/MeetingSetting} The populated <code>MeetingSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeetingSetting();

            if (data.hasOwnProperty('active_meeting_url')) {
                obj['active_meeting_url'] = MeetingUrl.constructFromObject(data['active_meeting_url']);
            }
            if (data.hasOwnProperty('allow_booking_on_behalf')) {
                obj['allow_booking_on_behalf'] = ApiClient.convertToType(data['allow_booking_on_behalf'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_booking_overtime')) {
                obj['allow_booking_overtime'] = ApiClient.convertToType(data['allow_booking_overtime'], 'Boolean');
            }
            if (data.hasOwnProperty('allow_event_overlap')) {
                obj['allow_event_overlap'] = ApiClient.convertToType(data['allow_event_overlap'], 'Boolean');
            }
            if (data.hasOwnProperty('availability_limit')) {
                obj['availability_limit'] = ApiClient.convertToType(data['availability_limit'], 'Number');
            }
            if (data.hasOwnProperty('availability_limit_enabled')) {
                obj['availability_limit_enabled'] = ApiClient.convertToType(data['availability_limit_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('buffer_time_duration')) {
                obj['buffer_time_duration'] = ApiClient.convertToType(data['buffer_time_duration'], 'Number');
            }
            if (data.hasOwnProperty('calendar_type')) {
                obj['calendar_type'] = ApiClient.convertToType(data['calendar_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('default_meeting_length')) {
                obj['default_meeting_length'] = ApiClient.convertToType(data['default_meeting_length'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], 'String');
            }
            if (data.hasOwnProperty('enable_calendar_sync')) {
                obj['enable_calendar_sync'] = ApiClient.convertToType(data['enable_calendar_sync'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_dynamic_location')) {
                obj['enable_dynamic_location'] = ApiClient.convertToType(data['enable_dynamic_location'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('primary_calendar_connection_failed')) {
                obj['primary_calendar_connection_failed'] = ApiClient.convertToType(data['primary_calendar_connection_failed'], 'Boolean');
            }
            if (data.hasOwnProperty('primary_calendar_id')) {
                obj['primary_calendar_id'] = ApiClient.convertToType(data['primary_calendar_id'], 'String');
            }
            if (data.hasOwnProperty('primary_calendar_name')) {
                obj['primary_calendar_name'] = ApiClient.convertToType(data['primary_calendar_name'], 'String');
            }
            if (data.hasOwnProperty('reschedule_meetings_enabled')) {
                obj['reschedule_meetings_enabled'] = ApiClient.convertToType(data['reschedule_meetings_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('schedule_buffer_enabled')) {
                obj['schedule_buffer_enabled'] = ApiClient.convertToType(data['schedule_buffer_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('schedule_delay')) {
                obj['schedule_delay'] = ApiClient.convertToType(data['schedule_delay'], 'Number');
            }
            if (data.hasOwnProperty('share_event_detail')) {
                obj['share_event_detail'] = ApiClient.convertToType(data['share_event_detail'], 'Boolean');
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('times_available')) {
                obj['times_available'] = ApiClient.convertToType(data['times_available'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_details')) {
                obj['user_details'] = ApiClient.convertToType(data['user_details'], Object);
            }
            if (data.hasOwnProperty('user_slug')) {
                obj['user_slug'] = ApiClient.convertToType(data['user_slug'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeetingSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeetingSetting</code>.
     */
    static validateJSON(data) {
        // validate the optional field `active_meeting_url`
        if (data['active_meeting_url']) { // data not null
          MeetingUrl.validateJSON(data['active_meeting_url']);
        }
        // ensure the json data is a string
        if (data['calendar_type'] && !(typeof data['calendar_type'] === 'string' || data['calendar_type'] instanceof String)) {
            throw new Error("Expected the field `calendar_type` to be a primitive type in the JSON string but got " + data['calendar_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email_address'] && !(typeof data['email_address'] === 'string' || data['email_address'] instanceof String)) {
            throw new Error("Expected the field `email_address` to be a primitive type in the JSON string but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['primary_calendar_id'] && !(typeof data['primary_calendar_id'] === 'string' || data['primary_calendar_id'] instanceof String)) {
            throw new Error("Expected the field `primary_calendar_id` to be a primitive type in the JSON string but got " + data['primary_calendar_id']);
        }
        // ensure the json data is a string
        if (data['primary_calendar_name'] && !(typeof data['primary_calendar_name'] === 'string' || data['primary_calendar_name'] instanceof String)) {
            throw new Error("Expected the field `primary_calendar_name` to be a primitive type in the JSON string but got " + data['primary_calendar_name']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['user_slug'] && !(typeof data['user_slug'] === 'string' || data['user_slug'] instanceof String)) {
            throw new Error("Expected the field `user_slug` to be a primitive type in the JSON string but got " + data['user_slug']);
        }

        return true;
    }


}



/**
 * @member {module:model/MeetingUrl} active_meeting_url
 */
MeetingSetting.prototype['active_meeting_url'] = undefined;

/**
 * Allow other team members to schedule on you behalf.
 * @member {Boolean} allow_booking_on_behalf
 */
MeetingSetting.prototype['allow_booking_on_behalf'] = undefined;

/**
 * Allow team members to insert available time outside your working hours.
 * @member {Boolean} allow_booking_overtime
 */
MeetingSetting.prototype['allow_booking_overtime'] = undefined;

/**
 * Allow team members to double book events on your calendar.
 * @member {Boolean} allow_event_overlap
 */
MeetingSetting.prototype['allow_event_overlap'] = undefined;

/**
 * The number of days out the user allows a prospect to schedule a meeting
 * @member {Number} availability_limit
 */
MeetingSetting.prototype['availability_limit'] = undefined;

/**
 * If Availability Limits have been turned on
 * @member {Boolean} availability_limit_enabled
 */
MeetingSetting.prototype['availability_limit_enabled'] = undefined;

/**
 * Default buffer duration in minutes set by a user
 * @member {Number} buffer_time_duration
 */
MeetingSetting.prototype['buffer_time_duration'] = undefined;

/**
 * Calendar type
 * @member {String} calendar_type
 */
MeetingSetting.prototype['calendar_type'] = undefined;

/**
 * Datetime of when the MeetingSetting was created
 * @member {Date} created_at
 */
MeetingSetting.prototype['created_at'] = undefined;

/**
 * Default meeting length in minutes set by the user
 * @member {Number} default_meeting_length
 */
MeetingSetting.prototype['default_meeting_length'] = undefined;

/**
 * Default description of the meeting
 * @member {String} description
 */
MeetingSetting.prototype['description'] = undefined;

/**
 * Calendar owner's email address
 * @member {String} email_address
 */
MeetingSetting.prototype['email_address'] = undefined;

/**
 * Determines if a user enabled Calendar Sync feature
 * @member {Boolean} enable_calendar_sync
 */
MeetingSetting.prototype['enable_calendar_sync'] = undefined;

/**
 * Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)
 * @member {Boolean} enable_dynamic_location
 */
MeetingSetting.prototype['enable_dynamic_location'] = undefined;

/**
 * ID of the MeetingSetting
 * @member {Number} id
 */
MeetingSetting.prototype['id'] = undefined;

/**
 * Default location of the meeting
 * @member {String} location
 */
MeetingSetting.prototype['location'] = undefined;

/**
 * Gets true when any issue with fetching calendar occurs
 * @member {Boolean} primary_calendar_connection_failed
 */
MeetingSetting.prototype['primary_calendar_connection_failed'] = undefined;

/**
 * ID of the primary calendar
 * @member {String} primary_calendar_id
 */
MeetingSetting.prototype['primary_calendar_id'] = undefined;

/**
 * Display name of the primary calendar
 * @member {String} primary_calendar_name
 */
MeetingSetting.prototype['primary_calendar_name'] = undefined;

/**
 * Determines if a user enabled reschedule meetings feature
 * @member {Boolean} reschedule_meetings_enabled
 */
MeetingSetting.prototype['reschedule_meetings_enabled'] = undefined;

/**
 * Determines if meetings are scheduled with a 15 minute buffer between them
 * @member {Boolean} schedule_buffer_enabled
 */
MeetingSetting.prototype['schedule_buffer_enabled'] = undefined;

/**
 * The number of hours in advance a user requires someone to a book a meeting with them
 * @member {Number} schedule_delay
 */
MeetingSetting.prototype['schedule_delay'] = undefined;

/**
 * Allow team members to see the details of events on your calendar.
 * @member {Boolean} share_event_detail
 */
MeetingSetting.prototype['share_event_detail'] = undefined;

/**
 * Time zone for current calendar
 * @member {String} time_zone
 */
MeetingSetting.prototype['time_zone'] = undefined;

/**
 * Times available set by a user that can be used to book meetings
 * @member {Object} times_available
 */
MeetingSetting.prototype['times_available'] = undefined;

/**
 * Default title of the meeting
 * @member {String} title
 */
MeetingSetting.prototype['title'] = undefined;

/**
 * Datetime of when the MeetingSetting was last updated
 * @member {Date} updated_at
 */
MeetingSetting.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
MeetingSetting.prototype['user'] = undefined;

/**
 * User details
 * @member {Object} user_details
 */
MeetingSetting.prototype['user_details'] = undefined;

/**
 * User slug generated with a full name of the user
 * @member {String} user_slug
 */
MeetingSetting.prototype['user_slug'] = undefined;






export default MeetingSetting;

