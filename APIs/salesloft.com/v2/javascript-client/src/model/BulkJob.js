/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BulkJob model module.
 * @module model/BulkJob
 * @version v2
 */
class BulkJob {
    /**
     * Constructs a new <code>BulkJob</code>.
     * @alias module:model/BulkJob
     */
    constructor() { 
        
        BulkJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BulkJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BulkJob} obj Optional instance to populate.
     * @return {module:model/BulkJob} The populated <code>BulkJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BulkJob();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], 'Number');
            }
            if (data.hasOwnProperty('finished_at')) {
                obj['finished_at'] = ApiClient.convertToType(data['finished_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('marked_ready_at')) {
                obj['marked_ready_at'] = ApiClient.convertToType(data['marked_ready_at'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('processed')) {
                obj['processed'] = ApiClient.convertToType(data['processed'], 'Number');
            }
            if (data.hasOwnProperty('ready_to_execute')) {
                obj['ready_to_execute'] = ApiClient.convertToType(data['ready_to_execute'], 'Boolean');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], [Object]);
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BulkJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BulkJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * When this bulk job was created
 * @member {Date} created_at
 */
BulkJob.prototype['created_at'] = undefined;

/**
 * Number of errored records at the time of request for this Bulk Job
 * @member {Number} errors
 */
BulkJob.prototype['errors'] = undefined;

/**
 * When this bulk job finished processing
 * @member {Date} finished_at
 */
BulkJob.prototype['finished_at'] = undefined;

/**
 * ID of this Bulk Job
 * @member {Number} id
 */
BulkJob.prototype['id'] = undefined;

/**
 * When this bulk job was marked as ready to execute
 * @member {Date} marked_ready_at
 */
BulkJob.prototype['marked_ready_at'] = undefined;

/**
 * Name of this Bulk Job
 * @member {String} name
 */
BulkJob.prototype['name'] = undefined;

/**
 * Number of processed records at the time of request for this Bulk Job
 * @member {Number} processed
 */
BulkJob.prototype['processed'] = undefined;

/**
 * Whether the Bulk Job is ready to be executed
 * @member {Boolean} ready_to_execute
 */
BulkJob.prototype['ready_to_execute'] = undefined;

/**
 * Scopes
 * @member {Array.<Object>} scopes
 */
BulkJob.prototype['scopes'] = undefined;

/**
 * When this bulk job started processing. null until bulk job is done
 * @member {Date} started_at
 */
BulkJob.prototype['started_at'] = undefined;

/**
 * State of the Bulk Job.  Must be one of: open, executing, done.
 * @member {String} state
 */
BulkJob.prototype['state'] = undefined;

/**
 * Number of total records for this Bulk Job
 * @member {Number} total
 */
BulkJob.prototype['total'] = undefined;

/**
 * Type of the Bulk Job.
 * @member {String} type
 */
BulkJob.prototype['type'] = undefined;

/**
 * When this bulk job was updated
 * @member {Date} updated_at
 */
BulkJob.prototype['updated_at'] = undefined;






export default BulkJob;

