/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';

/**
 * The AccountUpsert model module.
 * @module model/AccountUpsert
 * @version v2
 */
class AccountUpsert {
    /**
     * Constructs a new <code>AccountUpsert</code>.
     * @alias module:model/AccountUpsert
     */
    constructor() { 
        
        AccountUpsert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountUpsert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountUpsert} obj Optional instance to populate.
     * @return {module:model/AccountUpsert} The populated <code>AccountUpsert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountUpsert();

            if (data.hasOwnProperty('account')) {
                obj['account'] = Account.constructFromObject(data['account']);
            }
            if (data.hasOwnProperty('upsert_type')) {
                obj['upsert_type'] = ApiClient.convertToType(data['upsert_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountUpsert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountUpsert</code>.
     */
    static validateJSON(data) {
        // validate the optional field `account`
        if (data['account']) { // data not null
          Account.validateJSON(data['account']);
        }
        // ensure the json data is a string
        if (data['upsert_type'] && !(typeof data['upsert_type'] === 'string' || data['upsert_type'] instanceof String)) {
            throw new Error("Expected the field `upsert_type` to be a primitive type in the JSON string but got " + data['upsert_type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Account} account
 */
AccountUpsert.prototype['account'] = undefined;

/**
 * The type of upsert. One of: create, update
 * @member {String} upsert_type
 */
AccountUpsert.prototype['upsert_type'] = undefined;






export default AccountUpsert;

