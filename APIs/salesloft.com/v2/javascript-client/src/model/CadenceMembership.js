/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CadenceMembershipCounts from './CadenceMembershipCounts';
import EmbeddedResource from './EmbeddedResource';

/**
 * The CadenceMembership model module.
 * @module model/CadenceMembership
 * @version v2
 */
class CadenceMembership {
    /**
     * Constructs a new <code>CadenceMembership</code>.
     * @alias module:model/CadenceMembership
     */
    constructor() { 
        
        CadenceMembership.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CadenceMembership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CadenceMembership} obj Optional instance to populate.
     * @return {module:model/CadenceMembership} The populated <code>CadenceMembership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CadenceMembership();

            if (data.hasOwnProperty('added_at')) {
                obj['added_at'] = ApiClient.convertToType(data['added_at'], 'Date');
            }
            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = CadenceMembershipCounts.constructFromObject(data['counts']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('current_state')) {
                obj['current_state'] = ApiClient.convertToType(data['current_state'], 'String');
            }
            if (data.hasOwnProperty('currently_on_cadence')) {
                obj['currently_on_cadence'] = ApiClient.convertToType(data['currently_on_cadence'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('latest_action')) {
                obj['latest_action'] = EmbeddedResource.constructFromObject(data['latest_action']);
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = EmbeddedResource.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('person_deleted')) {
                obj['person_deleted'] = ApiClient.convertToType(data['person_deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CadenceMembership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CadenceMembership</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // validate the optional field `counts`
        if (data['counts']) { // data not null
          CadenceMembershipCounts.validateJSON(data['counts']);
        }
        // ensure the json data is a string
        if (data['current_state'] && !(typeof data['current_state'] === 'string' || data['current_state'] instanceof String)) {
            throw new Error("Expected the field `current_state` to be a primitive type in the JSON string but got " + data['current_state']);
        }
        // validate the optional field `latest_action`
        if (data['latest_action']) { // data not null
          EmbeddedResource.validateJSON(data['latest_action']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          EmbeddedResource.validateJSON(data['person']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Datetime of when the person was last added to this cadence
 * @member {Date} added_at
 */
CadenceMembership.prototype['added_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence
 */
CadenceMembership.prototype['cadence'] = undefined;

/**
 * @member {module:model/CadenceMembershipCounts} counts
 */
CadenceMembership.prototype['counts'] = undefined;

/**
 * Datetime of when the person was first added to this cadence
 * @member {Date} created_at
 */
CadenceMembership.prototype['created_at'] = undefined;

/**
 * The current state of the person on the cadence. Possible values are:  processing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time  staged: The person is waiting for the first step in the cadence to occur  active: The cadence has begun processing this person and is still in the process, but idle  scheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur  completed: The cadence has been completed for this person  removed: The person was manually or automatically removed from the cadence  removed_no_action: The person was removed from the cadence before any action occurred  reassigned: The person's cadence execution was transferred to a different user, ending this user's interaction 
 * @member {String} current_state
 */
CadenceMembership.prototype['current_state'] = undefined;

/**
 * Whether the person is currently on the cadence
 * @member {Boolean} currently_on_cadence
 */
CadenceMembership.prototype['currently_on_cadence'] = undefined;

/**
 * Cadence membership ID
 * @member {Number} id
 */
CadenceMembership.prototype['id'] = undefined;

/**
 * @member {module:model/EmbeddedResource} latest_action
 */
CadenceMembership.prototype['latest_action'] = undefined;

/**
 * @member {module:model/EmbeddedResource} person
 */
CadenceMembership.prototype['person'] = undefined;

/**
 * Whether the associated person has since been deleted
 * @member {Boolean} person_deleted
 */
CadenceMembership.prototype['person_deleted'] = undefined;

/**
 * Datetime of when the record was last updated
 * @member {Date} updated_at
 */
CadenceMembership.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
CadenceMembership.prototype['user'] = undefined;






export default CadenceMembership;

