/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CrmActivityField model module.
 * @module model/CrmActivityField
 * @version v2
 */
class CrmActivityField {
    /**
     * Constructs a new <code>CrmActivityField</code>.
     * @alias module:model/CrmActivityField
     */
    constructor() { 
        
        CrmActivityField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CrmActivityField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CrmActivityField} obj Optional instance to populate.
     * @return {module:model/CrmActivityField} The populated <code>CrmActivityField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CrmActivityField();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crm_object_type')) {
                obj['crm_object_type'] = ApiClient.convertToType(data['crm_object_type'], 'String');
            }
            if (data.hasOwnProperty('field')) {
                obj['field'] = ApiClient.convertToType(data['field'], 'String');
            }
            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = ApiClient.convertToType(data['field_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('picklist_values')) {
                obj['picklist_values'] = ApiClient.convertToType(data['picklist_values'], Object);
            }
            if (data.hasOwnProperty('salesforce_object_type')) {
                obj['salesforce_object_type'] = ApiClient.convertToType(data['salesforce_object_type'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CrmActivityField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CrmActivityField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['crm_object_type'] && !(typeof data['crm_object_type'] === 'string' || data['crm_object_type'] instanceof String)) {
            throw new Error("Expected the field `crm_object_type` to be a primitive type in the JSON string but got " + data['crm_object_type']);
        }
        // ensure the json data is a string
        if (data['field'] && !(typeof data['field'] === 'string' || data['field'] instanceof String)) {
            throw new Error("Expected the field `field` to be a primitive type in the JSON string but got " + data['field']);
        }
        // ensure the json data is a string
        if (data['field_type'] && !(typeof data['field_type'] === 'string' || data['field_type'] instanceof String)) {
            throw new Error("Expected the field `field_type` to be a primitive type in the JSON string but got " + data['field_type']);
        }
        // ensure the json data is a string
        if (data['salesforce_object_type'] && !(typeof data['salesforce_object_type'] === 'string' || data['salesforce_object_type'] instanceof String)) {
            throw new Error("Expected the field `salesforce_object_type` to be a primitive type in the JSON string but got " + data['salesforce_object_type']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Datetime of when the CrmActivityField was created
 * @member {Date} created_at
 */
CrmActivityField.prototype['created_at'] = undefined;

/**
 * The CRM object type that this field maps to. Valid object types are CRM dependent: Task, Phonecall, Email. 
 * @member {String} crm_object_type
 */
CrmActivityField.prototype['crm_object_type'] = undefined;

/**
 * The CRM field name
 * @member {String} field
 */
CrmActivityField.prototype['field'] = undefined;

/**
 * The type of this field in your CRM. Certain field types can only accept structured input.
 * @member {String} field_type
 */
CrmActivityField.prototype['field_type'] = undefined;

/**
 * ID of CrmActivityField
 * @member {Number} id
 */
CrmActivityField.prototype['id'] = undefined;

/**
 * Valid picklist values, if present for this field. The format is {label => value}. If present, only values in the picklist structure can be used as a crm param. 
 * @member {Object} picklist_values
 */
CrmActivityField.prototype['picklist_values'] = undefined;

/**
 * The Salesforce object type that this field maps to. Valid object types are: Task. More object types may be added in the future. 
 * @member {String} salesforce_object_type
 */
CrmActivityField.prototype['salesforce_object_type'] = undefined;

/**
 * SalesLoft object that this field is mapped for. Valid sources are: email, phone
 * @member {String} source
 */
CrmActivityField.prototype['source'] = undefined;

/**
 * A human friendly title for this field
 * @member {String} title
 */
CrmActivityField.prototype['title'] = undefined;

/**
 * Datetime of when the CrmActivityField was last updated
 * @member {Date} updated_at
 */
CrmActivityField.prototype['updated_at'] = undefined;

/**
 * A value to always be written. This value does not need to be sent to other endpoints' crm params, but must be the exact value if sent. Email source fields will always have a value present. 
 * @member {String} value
 */
CrmActivityField.prototype['value'] = undefined;






export default CrmActivityField;

