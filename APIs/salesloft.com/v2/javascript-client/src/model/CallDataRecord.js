/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedRecordingResource from './EmbeddedRecordingResource';
import EmbeddedResource from './EmbeddedResource';

/**
 * The CallDataRecord model module.
 * @module model/CallDataRecord
 * @version v2
 */
class CallDataRecord {
    /**
     * Constructs a new <code>CallDataRecord</code>.
     * @alias module:model/CallDataRecord
     */
    constructor() { 
        
        CallDataRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallDataRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallDataRecord} obj Optional instance to populate.
     * @return {module:model/CallDataRecord} The populated <code>CallDataRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallDataRecord();

            if (data.hasOwnProperty('call')) {
                obj['call'] = EmbeddedResource.constructFromObject(data['call']);
            }
            if (data.hasOwnProperty('call_type')) {
                obj['call_type'] = ApiClient.convertToType(data['call_type'], 'String');
            }
            if (data.hasOwnProperty('call_uuid')) {
                obj['call_uuid'] = ApiClient.convertToType(data['call_uuid'], 'String');
            }
            if (data.hasOwnProperty('called_person')) {
                obj['called_person'] = EmbeddedResource.constructFromObject(data['called_person']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = EmbeddedRecordingResource.constructFromObject(data['recording']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallDataRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallDataRecord</code>.
     */
    static validateJSON(data) {
        // validate the optional field `call`
        if (data['call']) { // data not null
          EmbeddedResource.validateJSON(data['call']);
        }
        // ensure the json data is a string
        if (data['call_type'] && !(typeof data['call_type'] === 'string' || data['call_type'] instanceof String)) {
            throw new Error("Expected the field `call_type` to be a primitive type in the JSON string but got " + data['call_type']);
        }
        // ensure the json data is a string
        if (data['call_uuid'] && !(typeof data['call_uuid'] === 'string' || data['call_uuid'] instanceof String)) {
            throw new Error("Expected the field `call_uuid` to be a primitive type in the JSON string but got " + data['call_uuid']);
        }
        // validate the optional field `called_person`
        if (data['called_person']) { // data not null
          EmbeddedResource.validateJSON(data['called_person']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // validate the optional field `recording`
        if (data['recording']) { // data not null
          EmbeddedRecordingResource.validateJSON(data['recording']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} call
 */
CallDataRecord.prototype['call'] = undefined;

/**
 * Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time
 * @member {String} call_type
 */
CallDataRecord.prototype['call_type'] = undefined;

/**
 * UUID of the call. Legs of the same call will have the same call_uuid.
 * @member {String} call_uuid
 */
CallDataRecord.prototype['call_uuid'] = undefined;

/**
 * @member {module:model/EmbeddedResource} called_person
 */
CallDataRecord.prototype['called_person'] = undefined;

/**
 * Datetime of when the call was created
 * @member {Date} created_at
 */
CallDataRecord.prototype['created_at'] = undefined;

/**
 * Direction of the call. Can be one of: inbound, outbound
 * @member {String} direction
 */
CallDataRecord.prototype['direction'] = undefined;

/**
 * Length of the call in seconds
 * @member {Number} duration
 */
CallDataRecord.prototype['duration'] = undefined;

/**
 * Phone number that placed the call
 * @member {String} from
 */
CallDataRecord.prototype['from'] = undefined;

/**
 * ID of CallDataRecord
 * @member {Number} id
 */
CallDataRecord.prototype['id'] = undefined;

/**
 * @member {module:model/EmbeddedRecordingResource} recording
 */
CallDataRecord.prototype['recording'] = undefined;

/**
 * The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed
 * @member {String} status
 */
CallDataRecord.prototype['status'] = undefined;

/**
 * Phone number that received the call
 * @member {String} to
 */
CallDataRecord.prototype['to'] = undefined;

/**
 * Datetime of when the call was last updated
 * @member {Date} updated_at
 */
CallDataRecord.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
CallDataRecord.prototype['user'] = undefined;






export default CallDataRecord;

