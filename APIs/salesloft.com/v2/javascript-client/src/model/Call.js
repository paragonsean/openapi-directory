/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedRecordingResource from './EmbeddedRecordingResource';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Call model module.
 * @module model/Call
 * @version v2
 */
class Call {
    /**
     * Constructs a new <code>Call</code>.
     * @alias module:model/Call
     */
    constructor() { 
        
        Call.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Call</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Call} obj Optional instance to populate.
     * @return {module:model/Call} The populated <code>Call</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Call();

            if (data.hasOwnProperty('action')) {
                obj['action'] = EmbeddedResource.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('called_person')) {
                obj['called_person'] = EmbeddedResource.constructFromObject(data['called_person']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crm_activity')) {
                obj['crm_activity'] = EmbeddedResource.constructFromObject(data['crm_activity']);
            }
            if (data.hasOwnProperty('disposition')) {
                obj['disposition'] = ApiClient.convertToType(data['disposition'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = EmbeddedResource.constructFromObject(data['note']);
            }
            if (data.hasOwnProperty('recordings')) {
                obj['recordings'] = ApiClient.convertToType(data['recordings'], [EmbeddedRecordingResource]);
            }
            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = ApiClient.convertToType(data['sentiment'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = EmbeddedResource.constructFromObject(data['step']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Call</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Call</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          EmbeddedResource.validateJSON(data['action']);
        }
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // validate the optional field `called_person`
        if (data['called_person']) { // data not null
          EmbeddedResource.validateJSON(data['called_person']);
        }
        // validate the optional field `crm_activity`
        if (data['crm_activity']) { // data not null
          EmbeddedResource.validateJSON(data['crm_activity']);
        }
        // ensure the json data is a string
        if (data['disposition'] && !(typeof data['disposition'] === 'string' || data['disposition'] instanceof String)) {
            throw new Error("Expected the field `disposition` to be a primitive type in the JSON string but got " + data['disposition']);
        }
        // validate the optional field `note`
        if (data['note']) { // data not null
          EmbeddedResource.validateJSON(data['note']);
        }
        if (data['recordings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recordings'])) {
                throw new Error("Expected the field `recordings` to be an array in the JSON data but got " + data['recordings']);
            }
            // validate the optional field `recordings` (array)
            for (const item of data['recordings']) {
                EmbeddedRecordingResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sentiment'] && !(typeof data['sentiment'] === 'string' || data['sentiment'] instanceof String)) {
            throw new Error("Expected the field `sentiment` to be a primitive type in the JSON string but got " + data['sentiment']);
        }
        // validate the optional field `step`
        if (data['step']) { // data not null
          EmbeddedResource.validateJSON(data['step']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} action
 */
Call.prototype['action'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence
 */
Call.prototype['cadence'] = undefined;

/**
 * @member {module:model/EmbeddedResource} called_person
 */
Call.prototype['called_person'] = undefined;

/**
 * Datetime of when the call was created
 * @member {Date} created_at
 */
Call.prototype['created_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} crm_activity
 */
Call.prototype['crm_activity'] = undefined;

/**
 * Result of the call
 * @member {String} disposition
 */
Call.prototype['disposition'] = undefined;

/**
 * Length of the call in seconds
 * @member {Number} duration
 */
Call.prototype['duration'] = undefined;

/**
 * ID of Call
 * @member {Number} id
 */
Call.prototype['id'] = undefined;

/**
 * @member {module:model/EmbeddedResource} note
 */
Call.prototype['note'] = undefined;

/**
 * The recordings for this this call and their status
 * @member {Array.<module:model/EmbeddedRecordingResource>} recordings
 */
Call.prototype['recordings'] = undefined;

/**
 * Outcome of the conversation
 * @member {String} sentiment
 */
Call.prototype['sentiment'] = undefined;

/**
 * @member {module:model/EmbeddedResource} step
 */
Call.prototype['step'] = undefined;

/**
 * Phone number that received the call
 * @member {String} to
 */
Call.prototype['to'] = undefined;

/**
 * Datetime of when the call was last updated
 * @member {Date} updated_at
 */
Call.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
Call.prototype['user'] = undefined;






export default Call;

