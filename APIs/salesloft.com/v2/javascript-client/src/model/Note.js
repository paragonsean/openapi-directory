/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Note model module.
 * @module model/Note
 * @version v2
 */
class Note {
    /**
     * Constructs a new <code>Note</code>.
     * @alias module:model/Note
     */
    constructor() { 
        
        Note.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Note</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Note} obj Optional instance to populate.
     * @return {module:model/Note} The populated <code>Note</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Note();

            if (data.hasOwnProperty('associated_type')) {
                obj['associated_type'] = ApiClient.convertToType(data['associated_type'], 'String');
            }
            if (data.hasOwnProperty('associated_with')) {
                obj['associated_with'] = EmbeddedResource.constructFromObject(data['associated_with']);
            }
            if (data.hasOwnProperty('call')) {
                obj['call'] = EmbeddedResource.constructFromObject(data['call']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Note</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Note</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['associated_type'] && !(typeof data['associated_type'] === 'string' || data['associated_type'] instanceof String)) {
            throw new Error("Expected the field `associated_type` to be a primitive type in the JSON string but got " + data['associated_type']);
        }
        // validate the optional field `associated_with`
        if (data['associated_with']) { // data not null
          EmbeddedResource.validateJSON(data['associated_with']);
        }
        // validate the optional field `call`
        if (data['call']) { // data not null
          EmbeddedResource.validateJSON(data['call']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Type of associated resource ('person' or 'account')
 * @member {String} associated_type
 */
Note.prototype['associated_type'] = undefined;

/**
 * @member {module:model/EmbeddedResource} associated_with
 */
Note.prototype['associated_with'] = undefined;

/**
 * @member {module:model/EmbeddedResource} call
 */
Note.prototype['call'] = undefined;

/**
 * The content of the note
 * @member {String} content
 */
Note.prototype['content'] = undefined;

/**
 * Datetime of when the note was created
 * @member {Date} created_at
 */
Note.prototype['created_at'] = undefined;

/**
 * Note ID
 * @member {Number} id
 */
Note.prototype['id'] = undefined;

/**
 * Datetime of when the note was last updated
 * @member {Date} updated_at
 */
Note.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
Note.prototype['user'] = undefined;






export default Note;

