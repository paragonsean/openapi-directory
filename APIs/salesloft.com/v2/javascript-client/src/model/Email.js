/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailCounts from './EmailCounts';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Email model module.
 * @module model/Email
 * @version v2
 */
class Email {
    /**
     * Constructs a new <code>Email</code>.
     * @alias module:model/Email
     */
    constructor() { 
        
        Email.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Email</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Email} obj Optional instance to populate.
     * @return {module:model/Email} The populated <code>Email</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Email();

            if (data.hasOwnProperty('action')) {
                obj['action'] = EmbeddedResource.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('bounced')) {
                obj['bounced'] = ApiClient.convertToType(data['bounced'], 'Boolean');
            }
            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('click_tracking')) {
                obj['click_tracking'] = ApiClient.convertToType(data['click_tracking'], 'Boolean');
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = EmailCounts.constructFromObject(data['counts']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crm_activity')) {
                obj['crm_activity'] = EmbeddedResource.constructFromObject(data['crm_activity']);
            }
            if (data.hasOwnProperty('email_template')) {
                obj['email_template'] = EmbeddedResource.constructFromObject(data['email_template']);
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mailing')) {
                obj['mailing'] = EmbeddedResource.constructFromObject(data['mailing']);
            }
            if (data.hasOwnProperty('personalization')) {
                obj['personalization'] = ApiClient.convertToType(data['personalization'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = EmbeddedResource.constructFromObject(data['recipient']);
            }
            if (data.hasOwnProperty('recipient_email_address')) {
                obj['recipient_email_address'] = ApiClient.convertToType(data['recipient_email_address'], 'String');
            }
            if (data.hasOwnProperty('send_after')) {
                obj['send_after'] = ApiClient.convertToType(data['send_after'], 'Date');
            }
            if (data.hasOwnProperty('sent_at')) {
                obj['sent_at'] = ApiClient.convertToType(data['sent_at'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = EmbeddedResource.constructFromObject(data['step']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('task')) {
                obj['task'] = EmbeddedResource.constructFromObject(data['task']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('view_tracking')) {
                obj['view_tracking'] = ApiClient.convertToType(data['view_tracking'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Email</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Email</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          EmbeddedResource.validateJSON(data['action']);
        }
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // validate the optional field `counts`
        if (data['counts']) { // data not null
          EmailCounts.validateJSON(data['counts']);
        }
        // validate the optional field `crm_activity`
        if (data['crm_activity']) { // data not null
          EmbeddedResource.validateJSON(data['crm_activity']);
        }
        // validate the optional field `email_template`
        if (data['email_template']) { // data not null
          EmbeddedResource.validateJSON(data['email_template']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // validate the optional field `mailing`
        if (data['mailing']) { // data not null
          EmbeddedResource.validateJSON(data['mailing']);
        }
        // ensure the json data is a string
        if (data['personalization'] && !(typeof data['personalization'] === 'string' || data['personalization'] instanceof String)) {
            throw new Error("Expected the field `personalization` to be a primitive type in the JSON string but got " + data['personalization']);
        }
        // validate the optional field `recipient`
        if (data['recipient']) { // data not null
          EmbeddedResource.validateJSON(data['recipient']);
        }
        // ensure the json data is a string
        if (data['recipient_email_address'] && !(typeof data['recipient_email_address'] === 'string' || data['recipient_email_address'] instanceof String)) {
            throw new Error("Expected the field `recipient_email_address` to be a primitive type in the JSON string but got " + data['recipient_email_address']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `step`
        if (data['step']) { // data not null
          EmbeddedResource.validateJSON(data['step']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // validate the optional field `task`
        if (data['task']) { // data not null
          EmbeddedResource.validateJSON(data['task']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} action
 */
Email.prototype['action'] = undefined;

/**
 * Whether this email bounced
 * @member {Boolean} bounced
 */
Email.prototype['bounced'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence
 */
Email.prototype['cadence'] = undefined;

/**
 * Whether this email had click tracking enabled
 * @member {Boolean} click_tracking
 */
Email.prototype['click_tracking'] = undefined;

/**
 * @member {module:model/EmailCounts} counts
 */
Email.prototype['counts'] = undefined;

/**
 * Datetime of when the email was created
 * @member {Date} created_at
 */
Email.prototype['created_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} crm_activity
 */
Email.prototype['crm_activity'] = undefined;

/**
 * @member {module:model/EmbeddedResource} email_template
 */
Email.prototype['email_template'] = undefined;

/**
 * Error message of the email. This field has been determined sensitive and requires a specific scope to access it.
 * @member {String} error_message
 */
Email.prototype['error_message'] = undefined;

/**
 * Selected headers that are included if this email used them. Available keys are: cc, bcc
 * @member {Object} headers
 */
Email.prototype['headers'] = undefined;

/**
 * ID of Email
 * @member {Number} id
 */
Email.prototype['id'] = undefined;

/**
 * @member {module:model/EmbeddedResource} mailing
 */
Email.prototype['mailing'] = undefined;

/**
 * Percentage of this email that has been personalized
 * @member {String} personalization
 */
Email.prototype['personalization'] = undefined;

/**
 * @member {module:model/EmbeddedResource} recipient
 */
Email.prototype['recipient'] = undefined;

/**
 * Email address of the recipient
 * @member {String} recipient_email_address
 */
Email.prototype['recipient_email_address'] = undefined;

/**
 * When this email will be sent, or null if already sent
 * @member {Date} send_after
 */
Email.prototype['send_after'] = undefined;

/**
 * When this email was sent, or null if it was not sent
 * @member {Date} sent_at
 */
Email.prototype['sent_at'] = undefined;

/**
 * Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external
 * @member {String} status
 */
Email.prototype['status'] = undefined;

/**
 * @member {module:model/EmbeddedResource} step
 */
Email.prototype['step'] = undefined;

/**
 * Subject of the email. This field has been determined sensitive and requires a specific scope to access it.
 * @member {String} subject
 */
Email.prototype['subject'] = undefined;

/**
 * @member {module:model/EmbeddedResource} task
 */
Email.prototype['task'] = undefined;

/**
 * Datetime of when the email was last updated
 * @member {Date} updated_at
 */
Email.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
Email.prototype['user'] = undefined;

/**
 * Whether this email had view tracking enabled
 * @member {Boolean} view_tracking
 */
Email.prototype['view_tracking'] = undefined;






export default Email;

