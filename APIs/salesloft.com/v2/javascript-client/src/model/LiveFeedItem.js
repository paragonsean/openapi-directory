/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LiveFeedItem model module.
 * @module model/LiveFeedItem
 * @version v2
 */
class LiveFeedItem {
    /**
     * Constructs a new <code>LiveFeedItem</code>.
     * @alias module:model/LiveFeedItem
     */
    constructor() { 
        
        LiveFeedItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveFeedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveFeedItem} obj Optional instance to populate.
     * @return {module:model/LiveFeedItem} The populated <code>LiveFeedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveFeedItem();

            if (data.hasOwnProperty('alert_metadata')) {
                obj['alert_metadata'] = ApiClient.convertToType(data['alert_metadata'], Object);
            }
            if (data.hasOwnProperty('event_occurred_at')) {
                obj['event_occurred_at'] = ApiClient.convertToType(data['event_occurred_at'], 'Date');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = ApiClient.convertToType(data['event_type'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('rollup_key')) {
                obj['rollup_key'] = ApiClient.convertToType(data['rollup_key'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user_guid')) {
                obj['user_guid'] = ApiClient.convertToType(data['user_guid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveFeedItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveFeedItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['event_type'] && !(typeof data['event_type'] === 'string' || data['event_type'] instanceof String)) {
            throw new Error("Expected the field `event_type` to be a primitive type in the JSON string but got " + data['event_type']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['rollup_key'] && !(typeof data['rollup_key'] === 'string' || data['rollup_key'] instanceof String)) {
            throw new Error("Expected the field `rollup_key` to be a primitive type in the JSON string but got " + data['rollup_key']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['user_guid'] && !(typeof data['user_guid'] === 'string' || data['user_guid'] instanceof String)) {
            throw new Error("Expected the field `user_guid` to be a primitive type in the JSON string but got " + data['user_guid']);
        }

        return true;
    }


}



/**
 * Information about whether this event should trigger an alert
 * @member {Object} alert_metadata
 */
LiveFeedItem.prototype['alert_metadata'] = undefined;

/**
 * When this event occurred
 * @member {Date} event_occurred_at
 */
LiveFeedItem.prototype['event_occurred_at'] = undefined;

/**
 * The type of event
 * @member {String} event_type
 */
LiveFeedItem.prototype['event_type'] = undefined;

/**
 * ID of this item
 * @member {Number} id
 */
LiveFeedItem.prototype['id'] = undefined;

/**
 * A plaintext message for this event
 * @member {String} message
 */
LiveFeedItem.prototype['message'] = undefined;

/**
 * The metadata created for this event
 * @member {Object} metadata
 */
LiveFeedItem.prototype['metadata'] = undefined;

/**
 * The path to the application that should be followed
 * @member {String} path
 */
LiveFeedItem.prototype['path'] = undefined;

/**
 * The key that should be used to rollup events client side. null or empty values should not be rolled up
 * @member {String} rollup_key
 */
LiveFeedItem.prototype['rollup_key'] = undefined;

/**
 * A plaintext title for this event
 * @member {String} title
 */
LiveFeedItem.prototype['title'] = undefined;

/**
 * UUID of the user this item is for
 * @member {String} user_guid
 */
LiveFeedItem.prototype['user_guid'] = undefined;






export default LiveFeedItem;

