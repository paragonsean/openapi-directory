/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Action model module.
 * @module model/Action
 * @version v2
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * @alias module:model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('action_details')) {
                obj['action_details'] = EmbeddedResource.constructFromObject(data['action_details']);
            }
            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('due')) {
                obj['due'] = ApiClient.convertToType(data['due'], 'Boolean');
            }
            if (data.hasOwnProperty('due_on')) {
                obj['due_on'] = ApiClient.convertToType(data['due_on'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('multitouch_group_id')) {
                obj['multitouch_group_id'] = ApiClient.convertToType(data['multitouch_group_id'], 'Number');
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = EmbeddedResource.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = EmbeddedResource.constructFromObject(data['step']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action_details`
        if (data['action_details']) { // data not null
          EmbeddedResource.validateJSON(data['action_details']);
        }
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          EmbeddedResource.validateJSON(data['person']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `step`
        if (data['step']) { // data not null
          EmbeddedResource.validateJSON(data['step']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} action_details
 */
Action.prototype['action_details'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence
 */
Action.prototype['cadence'] = undefined;

/**
 * Datetime of when the Action was created
 * @member {Date} created_at
 */
Action.prototype['created_at'] = undefined;

/**
 * Whether this step is due
 * @member {Boolean} due
 */
Action.prototype['due'] = undefined;

/**
 * When action is due
 * @member {Date} due_on
 */
Action.prototype['due_on'] = undefined;

/**
 * ID of Action
 * @member {Number} id
 */
Action.prototype['id'] = undefined;

/**
 * ID of the multitouch group
 * @member {Number} multitouch_group_id
 */
Action.prototype['multitouch_group_id'] = undefined;

/**
 * @member {module:model/EmbeddedResource} person
 */
Action.prototype['person'] = undefined;

/**
 * The current state of the person on the cadence. Possible values are:  in_progress: this action has not been completed  pending_activity: this action has been acted upon, but the action has not been completed. (i.e. the email is scheduled to send, but has not been delivered yet) 
 * @member {String} status
 */
Action.prototype['status'] = undefined;

/**
 * @member {module:model/EmbeddedResource} step
 */
Action.prototype['step'] = undefined;

/**
 * The type of this action. Valid types are: email, phone, other. New types may be added in the future. 
 * @member {String} type
 */
Action.prototype['type'] = undefined;

/**
 * Datetime of when the Action was last updated
 * @member {Date} updated_at
 */
Action.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
Action.prototype['user'] = undefined;






export default Action;

