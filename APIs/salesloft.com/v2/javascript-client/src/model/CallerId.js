/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The CallerId model module.
 * @module model/CallerId
 * @version v2
 */
class CallerId {
    /**
     * Constructs a new <code>CallerId</code>.
     * @alias module:model/CallerId
     */
    constructor() { 
        
        CallerId.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallerId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallerId} obj Optional instance to populate.
     * @return {module:model/CallerId} The populated <code>CallerId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallerId();

            if (data.hasOwnProperty('account_name')) {
                obj['account_name'] = ApiClient.convertToType(data['account_name'], 'String');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = EmbeddedResource.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallerId</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallerId</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_name'] && !(typeof data['account_name'] === 'string' || data['account_name'] instanceof String)) {
            throw new Error("Expected the field `account_name` to be a primitive type in the JSON string but got " + data['account_name']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          EmbeddedResource.validateJSON(data['person']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * The account of the person calling
 * @member {String} account_name
 */
CallerId.prototype['account_name'] = undefined;

/**
 * The name of the person calling
 * @member {String} display_name
 */
CallerId.prototype['display_name'] = undefined;

/**
 * @member {module:model/EmbeddedResource} person
 */
CallerId.prototype['person'] = undefined;

/**
 * The title of the person calling
 * @member {String} title
 */
CallerId.prototype['title'] = undefined;






export default CallerId;

