/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CadenceCounts from './CadenceCounts';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Cadence model module.
 * @module model/Cadence
 * @version v2
 */
class Cadence {
    /**
     * Constructs a new <code>Cadence</code>.
     * @alias module:model/Cadence
     */
    constructor() { 
        
        Cadence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cadence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cadence} obj Optional instance to populate.
     * @return {module:model/Cadence} The populated <code>Cadence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cadence();

            if (data.hasOwnProperty('added_stage')) {
                obj['added_stage'] = EmbeddedResource.constructFromObject(data['added_stage']);
            }
            if (data.hasOwnProperty('archived_at')) {
                obj['archived_at'] = ApiClient.convertToType(data['archived_at'], 'Date');
            }
            if (data.hasOwnProperty('bounced_stage')) {
                obj['bounced_stage'] = EmbeddedResource.constructFromObject(data['bounced_stage']);
            }
            if (data.hasOwnProperty('cadence_framework_id')) {
                obj['cadence_framework_id'] = ApiClient.convertToType(data['cadence_framework_id'], 'Number');
            }
            if (data.hasOwnProperty('cadence_function')) {
                obj['cadence_function'] = ApiClient.convertToType(data['cadence_function'], 'String');
            }
            if (data.hasOwnProperty('cadence_priority')) {
                obj['cadence_priority'] = EmbeddedResource.constructFromObject(data['cadence_priority']);
            }
            if (data.hasOwnProperty('counts')) {
                obj['counts'] = CadenceCounts.constructFromObject(data['counts']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = EmbeddedResource.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('external_identifier')) {
                obj['external_identifier'] = ApiClient.convertToType(data['external_identifier'], 'String');
            }
            if (data.hasOwnProperty('finished_stage')) {
                obj['finished_stage'] = EmbeddedResource.constructFromObject(data['finished_stage']);
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [EmbeddedResource]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('opt_out_link_included')) {
                obj['opt_out_link_included'] = ApiClient.convertToType(data['opt_out_link_included'], 'Boolean');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = EmbeddedResource.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('remove_bounces_enabled')) {
                obj['remove_bounces_enabled'] = ApiClient.convertToType(data['remove_bounces_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('remove_replies_enabled')) {
                obj['remove_replies_enabled'] = ApiClient.convertToType(data['remove_replies_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('replied_stage')) {
                obj['replied_stage'] = EmbeddedResource.constructFromObject(data['replied_stage']);
            }
            if (data.hasOwnProperty('shared')) {
                obj['shared'] = ApiClient.convertToType(data['shared'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('team_cadence')) {
                obj['team_cadence'] = ApiClient.convertToType(data['team_cadence'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cadence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cadence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `added_stage`
        if (data['added_stage']) { // data not null
          EmbeddedResource.validateJSON(data['added_stage']);
        }
        // validate the optional field `bounced_stage`
        if (data['bounced_stage']) { // data not null
          EmbeddedResource.validateJSON(data['bounced_stage']);
        }
        // ensure the json data is a string
        if (data['cadence_function'] && !(typeof data['cadence_function'] === 'string' || data['cadence_function'] instanceof String)) {
            throw new Error("Expected the field `cadence_function` to be a primitive type in the JSON string but got " + data['cadence_function']);
        }
        // validate the optional field `cadence_priority`
        if (data['cadence_priority']) { // data not null
          EmbeddedResource.validateJSON(data['cadence_priority']);
        }
        // validate the optional field `counts`
        if (data['counts']) { // data not null
          CadenceCounts.validateJSON(data['counts']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          EmbeddedResource.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['external_identifier'] && !(typeof data['external_identifier'] === 'string' || data['external_identifier'] instanceof String)) {
            throw new Error("Expected the field `external_identifier` to be a primitive type in the JSON string but got " + data['external_identifier']);
        }
        // validate the optional field `finished_stage`
        if (data['finished_stage']) { // data not null
          EmbeddedResource.validateJSON(data['finished_stage']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                EmbeddedResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          EmbeddedResource.validateJSON(data['owner']);
        }
        // validate the optional field `replied_stage`
        if (data['replied_stage']) { // data not null
          EmbeddedResource.validateJSON(data['replied_stage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmbeddedResource} added_stage
 */
Cadence.prototype['added_stage'] = undefined;

/**
 * Datetime of when the cadence was archived, if archived
 * @member {Date} archived_at
 */
Cadence.prototype['archived_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} bounced_stage
 */
Cadence.prototype['bounced_stage'] = undefined;

/**
 * ID of the cadence framework used to create steps for the cadence
 * @member {Number} cadence_framework_id
 */
Cadence.prototype['cadence_framework_id'] = undefined;

/**
 * The use case of the cadence. Possible values are:  outbound: Denotes an outbound cadence, typically for sales purposes  inbound: Denotes an inbound sales cadence  event: Denotes a cadence used for an upcoming event  other: Denotes a cadence outside of the standard process 
 * @member {String} cadence_function
 */
Cadence.prototype['cadence_function'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence_priority
 */
Cadence.prototype['cadence_priority'] = undefined;

/**
 * @member {module:model/CadenceCounts} counts
 */
Cadence.prototype['counts'] = undefined;

/**
 * Datetime of when the cadence was created
 * @member {Date} created_at
 */
Cadence.prototype['created_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} creator
 */
Cadence.prototype['creator'] = undefined;

/**
 * Whether this cadence is in draft mode
 * @member {Boolean} draft
 */
Cadence.prototype['draft'] = undefined;

/**
 * Cadence External ID
 * @member {String} external_identifier
 */
Cadence.prototype['external_identifier'] = undefined;

/**
 * @member {module:model/EmbeddedResource} finished_stage
 */
Cadence.prototype['finished_stage'] = undefined;

/**
 * Groups to which this cadence is assigned, if any
 * @member {Array.<module:model/EmbeddedResource>} groups
 */
Cadence.prototype['groups'] = undefined;

/**
 * ID of cadence
 * @member {Number} id
 */
Cadence.prototype['id'] = undefined;

/**
 * Cadence name
 * @member {String} name
 */
Cadence.prototype['name'] = undefined;

/**
 * Whether this cadence is configured to include an opt-out link by default
 * @member {Boolean} opt_out_link_included
 */
Cadence.prototype['opt_out_link_included'] = undefined;

/**
 * @member {module:model/EmbeddedResource} owner
 */
Cadence.prototype['owner'] = undefined;

/**
 * Whether this cadence is configured to automatically remove people who have bounced
 * @member {Boolean} remove_bounces_enabled
 */
Cadence.prototype['remove_bounces_enabled'] = undefined;

/**
 * Whether this cadence is configured to automatically remove people who have replied
 * @member {Boolean} remove_replies_enabled
 */
Cadence.prototype['remove_replies_enabled'] = undefined;

/**
 * @member {module:model/EmbeddedResource} replied_stage
 */
Cadence.prototype['replied_stage'] = undefined;

/**
 * Whether this cadence is visible to team members (shared)
 * @member {Boolean} shared
 */
Cadence.prototype['shared'] = undefined;

/**
 * All tags applied to this cadence
 * @member {Array.<String>} tags
 */
Cadence.prototype['tags'] = undefined;

/**
 * Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users
 * @member {Boolean} team_cadence
 */
Cadence.prototype['team_cadence'] = undefined;

/**
 * Datetime of when the cadence was last updated
 * @member {Date} updated_at
 */
Cadence.prototype['updated_at'] = undefined;






export default Cadence;

