/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CalendarEvent model module.
 * @module model/CalendarEvent
 * @version v2
 */
class CalendarEvent {
    /**
     * Constructs a new <code>CalendarEvent</code>.
     * @alias module:model/CalendarEvent
     */
    constructor() { 
        
        CalendarEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CalendarEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalendarEvent} obj Optional instance to populate.
     * @return {module:model/CalendarEvent} The populated <code>CalendarEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalendarEvent();

            if (data.hasOwnProperty('all_day')) {
                obj['all_day'] = ApiClient.convertToType(data['all_day'], 'Boolean');
            }
            if (data.hasOwnProperty('attendees')) {
                obj['attendees'] = ApiClient.convertToType(data['attendees'], [Object]);
            }
            if (data.hasOwnProperty('body_html')) {
                obj['body_html'] = ApiClient.convertToType(data['body_html'], 'String');
            }
            if (data.hasOwnProperty('busy')) {
                obj['busy'] = ApiClient.convertToType(data['busy'], 'Boolean');
            }
            if (data.hasOwnProperty('calendar_id')) {
                obj['calendar_id'] = ApiClient.convertToType(data['calendar_id'], 'String');
            }
            if (data.hasOwnProperty('canceled_at')) {
                obj['canceled_at'] = ApiClient.convertToType(data['canceled_at'], 'Date');
            }
            if (data.hasOwnProperty('conference_data')) {
                obj['conference_data'] = ApiClient.convertToType(data['conference_data'], Object);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = ApiClient.convertToType(data['creator'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'Date');
            }
            if (data.hasOwnProperty('extended_properties')) {
                obj['extended_properties'] = ApiClient.convertToType(data['extended_properties'], Object);
            }
            if (data.hasOwnProperty('html_link')) {
                obj['html_link'] = ApiClient.convertToType(data['html_link'], 'String');
            }
            if (data.hasOwnProperty('i_cal_uid')) {
                obj['i_cal_uid'] = ApiClient.convertToType(data['i_cal_uid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('organizer')) {
                obj['organizer'] = ApiClient.convertToType(data['organizer'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = ApiClient.convertToType(data['recurring'], 'Boolean');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tenant_id')) {
                obj['tenant_id'] = ApiClient.convertToType(data['tenant_id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user_guid')) {
                obj['user_guid'] = ApiClient.convertToType(data['user_guid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalendarEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalendarEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['attendees'])) {
            throw new Error("Expected the field `attendees` to be an array in the JSON data but got " + data['attendees']);
        }
        // ensure the json data is a string
        if (data['body_html'] && !(typeof data['body_html'] === 'string' || data['body_html'] instanceof String)) {
            throw new Error("Expected the field `body_html` to be a primitive type in the JSON string but got " + data['body_html']);
        }
        // ensure the json data is a string
        if (data['calendar_id'] && !(typeof data['calendar_id'] === 'string' || data['calendar_id'] instanceof String)) {
            throw new Error("Expected the field `calendar_id` to be a primitive type in the JSON string but got " + data['calendar_id']);
        }
        // ensure the json data is a string
        if (data['creator'] && !(typeof data['creator'] === 'string' || data['creator'] instanceof String)) {
            throw new Error("Expected the field `creator` to be a primitive type in the JSON string but got " + data['creator']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['html_link'] && !(typeof data['html_link'] === 'string' || data['html_link'] instanceof String)) {
            throw new Error("Expected the field `html_link` to be a primitive type in the JSON string but got " + data['html_link']);
        }
        // ensure the json data is a string
        if (data['i_cal_uid'] && !(typeof data['i_cal_uid'] === 'string' || data['i_cal_uid'] instanceof String)) {
            throw new Error("Expected the field `i_cal_uid` to be a primitive type in the JSON string but got " + data['i_cal_uid']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['organizer'] && !(typeof data['organizer'] === 'string' || data['organizer'] instanceof String)) {
            throw new Error("Expected the field `organizer` to be a primitive type in the JSON string but got " + data['organizer']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['user_guid'] && !(typeof data['user_guid'] === 'string' || data['user_guid'] instanceof String)) {
            throw new Error("Expected the field `user_guid` to be a primitive type in the JSON string but got " + data['user_guid']);
        }

        return true;
    }


}



/**
 * Whether the calendar event is an all-day event.
 * @member {Boolean} all_day
 */
CalendarEvent.prototype['all_day'] = undefined;

/**
 * The attendees of the calendar event.
 * @member {Array.<Object>} attendees
 */
CalendarEvent.prototype['attendees'] = undefined;

/**
 * Raw body content from Microsoft calendar events
 * @member {String} body_html
 */
CalendarEvent.prototype['body_html'] = undefined;

/**
 * Busy/free status of the calendar event
 * @member {Boolean} busy
 */
CalendarEvent.prototype['busy'] = undefined;

/**
 * Calendar ID of the user calendar.
 * @member {String} calendar_id
 */
CalendarEvent.prototype['calendar_id'] = undefined;

/**
 * The canceled date of the calendar event.
 * @member {Date} canceled_at
 */
CalendarEvent.prototype['canceled_at'] = undefined;

/**
 * The conference-related information, such as details of a Google Meet conference.
 * @member {Object} conference_data
 */
CalendarEvent.prototype['conference_data'] = undefined;

/**
 * Creation time of the calendar event.
 * @member {Date} created_at
 */
CalendarEvent.prototype['created_at'] = undefined;

/**
 * The creator email of the calendar event.
 * @member {String} creator
 */
CalendarEvent.prototype['creator'] = undefined;

/**
 * Description of the calendar event
 * @member {String} description
 */
CalendarEvent.prototype['description'] = undefined;

/**
 * The (exclusive) end time of the calendar event.
 * @member {Date} end_time
 */
CalendarEvent.prototype['end_time'] = undefined;

/**
 * Extended properties of the calendar event.
 * @member {Object} extended_properties
 */
CalendarEvent.prototype['extended_properties'] = undefined;

/**
 * An absolute link to this calendar event in the Google Calendar Web UI.
 * @member {String} html_link
 */
CalendarEvent.prototype['html_link'] = undefined;

/**
 * Calendar event unique identifier (iCalUID)
 * @member {String} i_cal_uid
 */
CalendarEvent.prototype['i_cal_uid'] = undefined;

/**
 * The calendar event original ID from calendar provider
 * @member {String} id
 */
CalendarEvent.prototype['id'] = undefined;

/**
 * Location of the calendar event
 * @member {String} location
 */
CalendarEvent.prototype['location'] = undefined;

/**
 * The organizer email of the calendar event.
 * @member {String} organizer
 */
CalendarEvent.prototype['organizer'] = undefined;

/**
 * The provider of the calendar event.
 * @member {String} provider
 */
CalendarEvent.prototype['provider'] = undefined;

/**
 * Whether the calendar event is a recurring event.
 * @member {Boolean} recurring
 */
CalendarEvent.prototype['recurring'] = undefined;

/**
 * The (inclusive) start time of the calendar event.
 * @member {Date} start_time
 */
CalendarEvent.prototype['start_time'] = undefined;

/**
 * The status of the calendar event. It can be empty for non-google events.
 * @member {String} status
 */
CalendarEvent.prototype['status'] = undefined;

/**
 * Tenant ID of the user calendar
 * @member {Number} tenant_id
 */
CalendarEvent.prototype['tenant_id'] = undefined;

/**
 * Title of the calendar event
 * @member {String} title
 */
CalendarEvent.prototype['title'] = undefined;

/**
 * Last modification time of the calendar event.
 * @member {Date} updated_at
 */
CalendarEvent.prototype['updated_at'] = undefined;

/**
 * User GUID of the user calendar.
 * @member {String} user_guid
 */
CalendarEvent.prototype['user_guid'] = undefined;






export default CalendarEvent;

