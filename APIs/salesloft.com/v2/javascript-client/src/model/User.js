/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The User model module.
 * @module model/User
 * @version v2
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('_private_fields')) {
                obj['_private_fields'] = ApiClient.convertToType(data['_private_fields'], Object);
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('bcc_email_address')) {
                obj['bcc_email_address'] = ApiClient.convertToType(data['bcc_email_address'], 'String');
            }
            if (data.hasOwnProperty('click_to_call_enabled')) {
                obj['click_to_call_enabled'] = ApiClient.convertToType(data['click_to_call_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crm_connected')) {
                obj['crm_connected'] = ApiClient.convertToType(data['crm_connected'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('email_client_configured')) {
                obj['email_client_configured'] = ApiClient.convertToType(data['email_client_configured'], 'Boolean');
            }
            if (data.hasOwnProperty('email_client_email_address')) {
                obj['email_client_email_address'] = ApiClient.convertToType(data['email_client_email_address'], 'String');
            }
            if (data.hasOwnProperty('email_signature')) {
                obj['email_signature'] = ApiClient.convertToType(data['email_signature'], 'String');
            }
            if (data.hasOwnProperty('email_signature_click_tracking_disabled')) {
                obj['email_signature_click_tracking_disabled'] = ApiClient.convertToType(data['email_signature_click_tracking_disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('email_signature_type')) {
                obj['email_signature_type'] = ApiClient.convertToType(data['email_signature_type'], 'String');
            }
            if (data.hasOwnProperty('external_feature_flags')) {
                obj['external_feature_flags'] = ApiClient.convertToType(data['external_feature_flags'], Object);
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('from_address')) {
                obj['from_address'] = ApiClient.convertToType(data['from_address'], 'String');
            }
            if (data.hasOwnProperty('full_email_address')) {
                obj['full_email_address'] = ApiClient.convertToType(data['full_email_address'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = EmbeddedResource.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('job_role')) {
                obj['job_role'] = ApiClient.convertToType(data['job_role'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('local_dial_enabled')) {
                obj['local_dial_enabled'] = ApiClient.convertToType(data['local_dial_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phone_client')) {
                obj['phone_client'] = EmbeddedResource.constructFromObject(data['phone_client']);
            }
            if (data.hasOwnProperty('phone_number_assignment')) {
                obj['phone_number_assignment'] = EmbeddedResource.constructFromObject(data['phone_number_assignment']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = EmbeddedResource.constructFromObject(data['role']);
            }
            if (data.hasOwnProperty('sending_email_address')) {
                obj['sending_email_address'] = ApiClient.convertToType(data['sending_email_address'], 'String');
            }
            if (data.hasOwnProperty('slack_username')) {
                obj['slack_username'] = ApiClient.convertToType(data['slack_username'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = EmbeddedResource.constructFromObject(data['team']);
            }
            if (data.hasOwnProperty('team_admin')) {
                obj['team_admin'] = ApiClient.convertToType(data['team_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('twitter_handle')) {
                obj['twitter_handle'] = ApiClient.convertToType(data['twitter_handle'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('work_country')) {
                obj['work_country'] = ApiClient.convertToType(data['work_country'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bcc_email_address'] && !(typeof data['bcc_email_address'] === 'string' || data['bcc_email_address'] instanceof String)) {
            throw new Error("Expected the field `bcc_email_address` to be a primitive type in the JSON string but got " + data['bcc_email_address']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['email_client_email_address'] && !(typeof data['email_client_email_address'] === 'string' || data['email_client_email_address'] instanceof String)) {
            throw new Error("Expected the field `email_client_email_address` to be a primitive type in the JSON string but got " + data['email_client_email_address']);
        }
        // ensure the json data is a string
        if (data['email_signature'] && !(typeof data['email_signature'] === 'string' || data['email_signature'] instanceof String)) {
            throw new Error("Expected the field `email_signature` to be a primitive type in the JSON string but got " + data['email_signature']);
        }
        // ensure the json data is a string
        if (data['email_signature_type'] && !(typeof data['email_signature_type'] === 'string' || data['email_signature_type'] instanceof String)) {
            throw new Error("Expected the field `email_signature_type` to be a primitive type in the JSON string but got " + data['email_signature_type']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['from_address'] && !(typeof data['from_address'] === 'string' || data['from_address'] instanceof String)) {
            throw new Error("Expected the field `from_address` to be a primitive type in the JSON string but got " + data['from_address']);
        }
        // ensure the json data is a string
        if (data['full_email_address'] && !(typeof data['full_email_address'] === 'string' || data['full_email_address'] instanceof String)) {
            throw new Error("Expected the field `full_email_address` to be a primitive type in the JSON string but got " + data['full_email_address']);
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          EmbeddedResource.validateJSON(data['group']);
        }
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['job_role'] && !(typeof data['job_role'] === 'string' || data['job_role'] instanceof String)) {
            throw new Error("Expected the field `job_role` to be a primitive type in the JSON string but got " + data['job_role']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `phone_client`
        if (data['phone_client']) { // data not null
          EmbeddedResource.validateJSON(data['phone_client']);
        }
        // validate the optional field `phone_number_assignment`
        if (data['phone_number_assignment']) { // data not null
          EmbeddedResource.validateJSON(data['phone_number_assignment']);
        }
        // validate the optional field `role`
        if (data['role']) { // data not null
          EmbeddedResource.validateJSON(data['role']);
        }
        // ensure the json data is a string
        if (data['sending_email_address'] && !(typeof data['sending_email_address'] === 'string' || data['sending_email_address'] instanceof String)) {
            throw new Error("Expected the field `sending_email_address` to be a primitive type in the JSON string but got " + data['sending_email_address']);
        }
        // ensure the json data is a string
        if (data['slack_username'] && !(typeof data['slack_username'] === 'string' || data['slack_username'] instanceof String)) {
            throw new Error("Expected the field `slack_username` to be a primitive type in the JSON string but got " + data['slack_username']);
        }
        // validate the optional field `team`
        if (data['team']) { // data not null
          EmbeddedResource.validateJSON(data['team']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['twitter_handle'] && !(typeof data['twitter_handle'] === 'string' || data['twitter_handle'] instanceof String)) {
            throw new Error("Expected the field `twitter_handle` to be a primitive type in the JSON string but got " + data['twitter_handle']);
        }
        // ensure the json data is a string
        if (data['work_country'] && !(typeof data['work_country'] === 'string' || data['work_country'] instanceof String)) {
            throw new Error("Expected the field `work_country` to be a primitive type in the JSON string but got " + data['work_country']);
        }

        return true;
    }


}



/**
 * For internal use only. This field does not comply with our backwards compatability policies.
 * @member {Object} _private_fields
 */
User.prototype['_private_fields'] = undefined;

/**
 * Whether an user is currently active in SalesLoft
 * @member {Boolean} active
 */
User.prototype['active'] = undefined;

/**
 * Address that will be BBC'd on all emails from this user
 * @member {String} bcc_email_address
 */
User.prototype['bcc_email_address'] = undefined;

/**
 * Whether this user has click to call enabled
 * @member {Boolean} click_to_call_enabled
 */
User.prototype['click_to_call_enabled'] = undefined;

/**
 * Datetime of when the user was created
 * @member {Date} created_at
 */
User.prototype['created_at'] = undefined;

/**
 * Whether the user has a crm connected
 * @member {Boolean} crm_connected
 */
User.prototype['crm_connected'] = undefined;

/**
 * Email address provided to accounts.salesloft.com
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Whether this user has a email client configured
 * @member {Boolean} email_client_configured
 */
User.prototype['email_client_configured'] = undefined;

/**
 * Email address associated with the email client of the user
 * @member {String} email_client_email_address
 */
User.prototype['email_client_email_address'] = undefined;

/**
 * Email signature
 * @member {String} email_signature
 */
User.prototype['email_signature'] = undefined;

/**
 * Whether this user has click tracking disabled in email signature
 * @member {Boolean} email_signature_click_tracking_disabled
 */
User.prototype['email_signature_click_tracking_disabled'] = undefined;

/**
 * Email signature type
 * @member {String} email_signature_type
 */
User.prototype['email_signature_type'] = undefined;

/**
 * Feature flags that are for this user. New flags may appear or disappear at any time
 * @member {Object} external_feature_flags
 */
User.prototype['external_feature_flags'] = undefined;

/**
 * First name of user
 * @member {String} first_name
 */
User.prototype['first_name'] = undefined;

/**
 * The from address of this user
 * @member {String} from_address
 */
User.prototype['from_address'] = undefined;

/**
 * RFC 5322 compliant email address
 * @member {String} full_email_address
 */
User.prototype['full_email_address'] = undefined;

/**
 * @member {module:model/EmbeddedResource} group
 */
User.prototype['group'] = undefined;

/**
 * Globally unique user ID. New endpoints will explicitly accept this over id
 * @member {String} guid
 */
User.prototype['guid'] = undefined;

/**
 * User ID
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * Job role of user
 * @member {String} job_role
 */
User.prototype['job_role'] = undefined;

/**
 * Last name of user
 * @member {String} last_name
 */
User.prototype['last_name'] = undefined;

/**
 * Whether this user has Local Dial enabled
 * @member {Boolean} local_dial_enabled
 */
User.prototype['local_dial_enabled'] = undefined;

/**
 * Display name of user
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * @member {module:model/EmbeddedResource} phone_client
 */
User.prototype['phone_client'] = undefined;

/**
 * @member {module:model/EmbeddedResource} phone_number_assignment
 */
User.prototype['phone_number_assignment'] = undefined;

/**
 * @member {module:model/EmbeddedResource} role
 */
User.prototype['role'] = undefined;

/**
 * The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email
 * @member {String} sending_email_address
 */
User.prototype['sending_email_address'] = undefined;

/**
 * Slack username
 * @member {String} slack_username
 */
User.prototype['slack_username'] = undefined;

/**
 * @member {module:model/EmbeddedResource} team
 */
User.prototype['team'] = undefined;

/**
 * Team Admin
 * @member {Boolean} team_admin
 */
User.prototype['team_admin'] = undefined;

/**
 * User Time Zone
 * @member {String} time_zone
 */
User.prototype['time_zone'] = undefined;

/**
 * Twitter handle
 * @member {String} twitter_handle
 */
User.prototype['twitter_handle'] = undefined;

/**
 * Datetime of when the user was last updated
 * @member {Date} updated_at
 */
User.prototype['updated_at'] = undefined;

/**
 * Work Country
 * @member {String} work_country
 */
User.prototype['work_country'] = undefined;






export default User;

