/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedResource from './EmbeddedResource';

/**
 * The Task model module.
 * @module model/Task
 * @version v2
 */
class Task {
    /**
     * Constructs a new <code>Task</code>.
     * @alias module:model/Task
     */
    constructor() { 
        
        Task.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Task} obj Optional instance to populate.
     * @return {module:model/Task} The populated <code>Task</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Task();

            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('completed_by')) {
                obj['completed_by'] = EmbeddedResource.constructFromObject(data['completed_by']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by_user')) {
                obj['created_by_user'] = EmbeddedResource.constructFromObject(data['created_by_user']);
            }
            if (data.hasOwnProperty('current_state')) {
                obj['current_state'] = ApiClient.convertToType(data['current_state'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('due_at')) {
                obj['due_at'] = ApiClient.convertToType(data['due_at'], 'Date');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = EmbeddedResource.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('remind_at')) {
                obj['remind_at'] = ApiClient.convertToType(data['remind_at'], 'Date');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('task_type')) {
                obj['task_type'] = ApiClient.convertToType(data['task_type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EmbeddedResource.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Task</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Task</code>.
     */
    static validateJSON(data) {
        // validate the optional field `completed_by`
        if (data['completed_by']) { // data not null
          EmbeddedResource.validateJSON(data['completed_by']);
        }
        // validate the optional field `created_by_user`
        if (data['created_by_user']) { // data not null
          EmbeddedResource.validateJSON(data['created_by_user']);
        }
        // ensure the json data is a string
        if (data['current_state'] && !(typeof data['current_state'] === 'string' || data['current_state'] instanceof String)) {
            throw new Error("Expected the field `current_state` to be a primitive type in the JSON string but got " + data['current_state']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          EmbeddedResource.validateJSON(data['person']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['task_type'] && !(typeof data['task_type'] === 'string' || data['task_type'] instanceof String)) {
            throw new Error("Expected the field `task_type` to be a primitive type in the JSON string but got " + data['task_type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EmbeddedResource.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Datetime of when the task was completed, ISO-8601 datetime format required
 * @member {Date} completed_at
 */
Task.prototype['completed_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} completed_by
 */
Task.prototype['completed_by'] = undefined;

/**
 * Datetime of when the Task was created
 * @member {Date} created_at
 */
Task.prototype['created_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} created_by_user
 */
Task.prototype['created_by_user'] = undefined;

/**
 * The state of the task. Valid states are: scheduled, completed
 * @member {String} current_state
 */
Task.prototype['current_state'] = undefined;

/**
 * A description of the task recorded for person at completion time
 * @member {String} description
 */
Task.prototype['description'] = undefined;

/**
 * Datetime of when the Task is due, can be null.  ISO-8601 datetime format required
 * @member {Date} due_at
 */
Task.prototype['due_at'] = undefined;

/**
 * Date of when the Task is due, ISO-8601 date format required
 * @member {Date} due_date
 */
Task.prototype['due_date'] = undefined;

/**
 * ID of Task
 * @member {Number} id
 */
Task.prototype['id'] = undefined;

/**
 * @member {module:model/EmbeddedResource} person
 */
Task.prototype['person'] = undefined;

/**
 * Datetime of when the user will be reminded of the task, ISO-8601 datetime format required
 * @member {Date} remind_at
 */
Task.prototype['remind_at'] = undefined;

/**
 * Subject line of the task
 * @member {String} subject
 */
Task.prototype['subject'] = undefined;

/**
 * The type of the task.  Valid types are: call, email, general
 * @member {String} task_type
 */
Task.prototype['task_type'] = undefined;

/**
 * Datetime of when the Task was last updated
 * @member {Date} updated_at
 */
Task.prototype['updated_at'] = undefined;

/**
 * @member {module:model/EmbeddedResource} user
 */
Task.prototype['user'] = undefined;






export default Task;

