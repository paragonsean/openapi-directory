/**
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmbeddedAttendeeResource from './EmbeddedAttendeeResource';
import EmbeddedResource from './EmbeddedResource';
import EventMeetingSetting from './EventMeetingSetting';

/**
 * The Meeting model module.
 * @module model/Meeting
 * @version v2
 */
class Meeting {
    /**
     * Constructs a new <code>Meeting</code>.
     * @alias module:model/Meeting
     */
    constructor() { 
        
        Meeting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Meeting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Meeting} obj Optional instance to populate.
     * @return {module:model/Meeting} The populated <code>Meeting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Meeting();

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('all_day')) {
                obj['all_day'] = ApiClient.convertToType(data['all_day'], 'Boolean');
            }
            if (data.hasOwnProperty('attendees')) {
                obj['attendees'] = ApiClient.convertToType(data['attendees'], [EmbeddedAttendeeResource]);
            }
            if (data.hasOwnProperty('booked_by_meetings_settings')) {
                obj['booked_by_meetings_settings'] = EventMeetingSetting.constructFromObject(data['booked_by_meetings_settings']);
            }
            if (data.hasOwnProperty('booked_by_user')) {
                obj['booked_by_user'] = EmbeddedResource.constructFromObject(data['booked_by_user']);
            }
            if (data.hasOwnProperty('cadence')) {
                obj['cadence'] = EmbeddedResource.constructFromObject(data['cadence']);
            }
            if (data.hasOwnProperty('calendar_id')) {
                obj['calendar_id'] = ApiClient.convertToType(data['calendar_id'], 'String');
            }
            if (data.hasOwnProperty('calendar_type')) {
                obj['calendar_type'] = ApiClient.convertToType(data['calendar_type'], 'String');
            }
            if (data.hasOwnProperty('canceled_at')) {
                obj['canceled_at'] = ApiClient.convertToType(data['canceled_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('crm_custom_fields')) {
                obj['crm_custom_fields'] = ApiClient.convertToType(data['crm_custom_fields'], Object);
            }
            if (data.hasOwnProperty('crm_references')) {
                obj['crm_references'] = ApiClient.convertToType(data['crm_references'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'Date');
            }
            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
            }
            if (data.hasOwnProperty('event_source')) {
                obj['event_source'] = ApiClient.convertToType(data['event_source'], 'String');
            }
            if (data.hasOwnProperty('guests')) {
                obj['guests'] = ApiClient.convertToType(data['guests'], ['String']);
            }
            if (data.hasOwnProperty('i_cal_uid')) {
                obj['i_cal_uid'] = ApiClient.convertToType(data['i_cal_uid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('meeting_type')) {
                obj['meeting_type'] = ApiClient.convertToType(data['meeting_type'], 'String');
            }
            if (data.hasOwnProperty('no_show')) {
                obj['no_show'] = ApiClient.convertToType(data['no_show'], 'Boolean');
            }
            if (data.hasOwnProperty('owned_by_meetings_settings')) {
                obj['owned_by_meetings_settings'] = EventMeetingSetting.constructFromObject(data['owned_by_meetings_settings']);
            }
            if (data.hasOwnProperty('person')) {
                obj['person'] = EmbeddedResource.constructFromObject(data['person']);
            }
            if (data.hasOwnProperty('recipient_email')) {
                obj['recipient_email'] = ApiClient.convertToType(data['recipient_email'], 'String');
            }
            if (data.hasOwnProperty('recipient_name')) {
                obj['recipient_name'] = ApiClient.convertToType(data['recipient_name'], 'String');
            }
            if (data.hasOwnProperty('reschedule_status')) {
                obj['reschedule_status'] = ApiClient.convertToType(data['reschedule_status'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('step')) {
                obj['step'] = EmbeddedResource.constructFromObject(data['step']);
            }
            if (data.hasOwnProperty('strict_attribution')) {
                obj['strict_attribution'] = ApiClient.convertToType(data['strict_attribution'], 'Boolean');
            }
            if (data.hasOwnProperty('task_id')) {
                obj['task_id'] = ApiClient.convertToType(data['task_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Meeting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Meeting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        if (data['attendees']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attendees'])) {
                throw new Error("Expected the field `attendees` to be an array in the JSON data but got " + data['attendees']);
            }
            // validate the optional field `attendees` (array)
            for (const item of data['attendees']) {
                EmbeddedAttendeeResource.validateJSON(item);
            };
        }
        // validate the optional field `booked_by_meetings_settings`
        if (data['booked_by_meetings_settings']) { // data not null
          EventMeetingSetting.validateJSON(data['booked_by_meetings_settings']);
        }
        // validate the optional field `booked_by_user`
        if (data['booked_by_user']) { // data not null
          EmbeddedResource.validateJSON(data['booked_by_user']);
        }
        // validate the optional field `cadence`
        if (data['cadence']) { // data not null
          EmbeddedResource.validateJSON(data['cadence']);
        }
        // ensure the json data is a string
        if (data['calendar_id'] && !(typeof data['calendar_id'] === 'string' || data['calendar_id'] instanceof String)) {
            throw new Error("Expected the field `calendar_id` to be a primitive type in the JSON string but got " + data['calendar_id']);
        }
        // ensure the json data is a string
        if (data['calendar_type'] && !(typeof data['calendar_type'] === 'string' || data['calendar_type'] instanceof String)) {
            throw new Error("Expected the field `calendar_type` to be a primitive type in the JSON string but got " + data['calendar_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
            throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
        }
        // ensure the json data is a string
        if (data['event_source'] && !(typeof data['event_source'] === 'string' || data['event_source'] instanceof String)) {
            throw new Error("Expected the field `event_source` to be a primitive type in the JSON string but got " + data['event_source']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['guests'])) {
            throw new Error("Expected the field `guests` to be an array in the JSON data but got " + data['guests']);
        }
        // ensure the json data is a string
        if (data['i_cal_uid'] && !(typeof data['i_cal_uid'] === 'string' || data['i_cal_uid'] instanceof String)) {
            throw new Error("Expected the field `i_cal_uid` to be a primitive type in the JSON string but got " + data['i_cal_uid']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['meeting_type'] && !(typeof data['meeting_type'] === 'string' || data['meeting_type'] instanceof String)) {
            throw new Error("Expected the field `meeting_type` to be a primitive type in the JSON string but got " + data['meeting_type']);
        }
        // validate the optional field `owned_by_meetings_settings`
        if (data['owned_by_meetings_settings']) { // data not null
          EventMeetingSetting.validateJSON(data['owned_by_meetings_settings']);
        }
        // validate the optional field `person`
        if (data['person']) { // data not null
          EmbeddedResource.validateJSON(data['person']);
        }
        // ensure the json data is a string
        if (data['recipient_email'] && !(typeof data['recipient_email'] === 'string' || data['recipient_email'] instanceof String)) {
            throw new Error("Expected the field `recipient_email` to be a primitive type in the JSON string but got " + data['recipient_email']);
        }
        // ensure the json data is a string
        if (data['recipient_name'] && !(typeof data['recipient_name'] === 'string' || data['recipient_name'] instanceof String)) {
            throw new Error("Expected the field `recipient_name` to be a primitive type in the JSON string but got " + data['recipient_name']);
        }
        // ensure the json data is a string
        if (data['reschedule_status'] && !(typeof data['reschedule_status'] === 'string' || data['reschedule_status'] instanceof String)) {
            throw new Error("Expected the field `reschedule_status` to be a primitive type in the JSON string but got " + data['reschedule_status']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `step`
        if (data['step']) { // data not null
          EmbeddedResource.validateJSON(data['step']);
        }
        // ensure the json data is a string
        if (data['task_id'] && !(typeof data['task_id'] === 'string' || data['task_id'] instanceof String)) {
            throw new Error("Expected the field `task_id` to be a primitive type in the JSON string but got " + data['task_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * ID of the account the recipient associated to
 * @member {String} account_id
 */
Meeting.prototype['account_id'] = undefined;

/**
 * Whether the meeting is an all-day meeting
 * @member {Boolean} all_day
 */
Meeting.prototype['all_day'] = undefined;

/**
 * The attendees of the meeting. Each attendee includes the following fields: status, email, name, organizer
 * @member {Array.<module:model/EmbeddedAttendeeResource>} attendees
 */
Meeting.prototype['attendees'] = undefined;

/**
 * @member {module:model/EventMeetingSetting} booked_by_meetings_settings
 */
Meeting.prototype['booked_by_meetings_settings'] = undefined;

/**
 * @member {module:model/EmbeddedResource} booked_by_user
 */
Meeting.prototype['booked_by_user'] = undefined;

/**
 * @member {module:model/EmbeddedResource} cadence
 */
Meeting.prototype['cadence'] = undefined;

/**
 * Calendar ID of the meeting owner
 * @member {String} calendar_id
 */
Meeting.prototype['calendar_id'] = undefined;

/**
 * Calendar type of the meeting owner. Possible values are: gmail, azure, nylas, linkedin_azure, cerebro, external
 * @member {String} calendar_type
 */
Meeting.prototype['calendar_type'] = undefined;

/**
 * Datetime of when the meeting was canceled
 * @member {Date} canceled_at
 */
Meeting.prototype['canceled_at'] = undefined;

/**
 * Datetime of when the meeting was created
 * @member {Date} created_at
 */
Meeting.prototype['created_at'] = undefined;

/**
 * List of crm custom fields which will be logged to SFDC
 * @member {Object} crm_custom_fields
 */
Meeting.prototype['crm_custom_fields'] = undefined;

/**
 * List of crm references associated with the meeting
 * @member {Object} crm_references
 */
Meeting.prototype['crm_references'] = undefined;

/**
 * Description of the meeting
 * @member {String} description
 */
Meeting.prototype['description'] = undefined;

/**
 * End time of the meeting
 * @member {Date} end_time
 */
Meeting.prototype['end_time'] = undefined;

/**
 * ID of the meeting created by target calendar
 * @member {String} event_id
 */
Meeting.prototype['event_id'] = undefined;

/**
 * Source of the meeting. Possible values are: 'external' - The event was synced to Salesloft platform via Calendar Sync, 'internal' - The event was created via Salesloft platform
 * @member {String} event_source
 */
Meeting.prototype['event_source'] = undefined;

/**
 * The list of attendees emails of the meeting
 * @member {Array.<String>} guests
 */
Meeting.prototype['guests'] = undefined;

/**
 * UID of the meeting provided by target calendar provider
 * @member {String} i_cal_uid
 */
Meeting.prototype['i_cal_uid'] = undefined;

/**
 * ID of the meeting
 * @member {Number} id
 */
Meeting.prototype['id'] = undefined;

/**
 * Location of the meeting
 * @member {String} location
 */
Meeting.prototype['location'] = undefined;

/**
 * Meeting type
 * @member {String} meeting_type
 */
Meeting.prototype['meeting_type'] = undefined;

/**
 * Whether the meeting is a No Show meeting
 * @member {Boolean} no_show
 */
Meeting.prototype['no_show'] = undefined;

/**
 * @member {module:model/EventMeetingSetting} owned_by_meetings_settings
 */
Meeting.prototype['owned_by_meetings_settings'] = undefined;

/**
 * @member {module:model/EmbeddedResource} person
 */
Meeting.prototype['person'] = undefined;

/**
 * Email of the meeting invite recipient
 * @member {String} recipient_email
 */
Meeting.prototype['recipient_email'] = undefined;

/**
 * Name of the meeting invite recipient
 * @member {String} recipient_name
 */
Meeting.prototype['recipient_name'] = undefined;

/**
 * Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry
 * @member {String} reschedule_status
 */
Meeting.prototype['reschedule_status'] = undefined;

/**
 * Start time of the meeting
 * @member {Date} start_time
 */
Meeting.prototype['start_time'] = undefined;

/**
 * Status of the meeting. Possible values are: pending, booked, failed, retry
 * @member {String} status
 */
Meeting.prototype['status'] = undefined;

/**
 * @member {module:model/EmbeddedResource} step
 */
Meeting.prototype['step'] = undefined;

/**
 * Strict attribution means that we 100% sure which cadence generate the meeting
 * @member {Boolean} strict_attribution
 */
Meeting.prototype['strict_attribution'] = undefined;

/**
 * ID of the created task
 * @member {String} task_id
 */
Meeting.prototype['task_id'] = undefined;

/**
 * Title of the meeting
 * @member {String} title
 */
Meeting.prototype['title'] = undefined;

/**
 * Datetime of when the meeting was last updated
 * @member {Date} updated_at
 */
Meeting.prototype['updated_at'] = undefined;






export default Meeting;

