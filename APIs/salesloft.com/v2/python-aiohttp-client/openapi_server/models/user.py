# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_fields: object=None, active: bool=None, bcc_email_address: str=None, click_to_call_enabled: bool=None, created_at: datetime=None, crm_connected: bool=None, email: str=None, email_client_configured: bool=None, email_client_email_address: str=None, email_signature: str=None, email_signature_click_tracking_disabled: bool=None, email_signature_type: str=None, external_feature_flags: object=None, first_name: str=None, from_address: str=None, full_email_address: str=None, group: EmbeddedResource=None, guid: str=None, id: int=None, job_role: str=None, last_name: str=None, local_dial_enabled: bool=None, name: str=None, phone_client: EmbeddedResource=None, phone_number_assignment: EmbeddedResource=None, role: EmbeddedResource=None, sending_email_address: str=None, slack_username: str=None, team: EmbeddedResource=None, team_admin: bool=None, time_zone: str=None, twitter_handle: str=None, updated_at: datetime=None, work_country: str=None):
        """User - a model defined in OpenAPI

        :param private_fields: The private_fields of this User.
        :param active: The active of this User.
        :param bcc_email_address: The bcc_email_address of this User.
        :param click_to_call_enabled: The click_to_call_enabled of this User.
        :param created_at: The created_at of this User.
        :param crm_connected: The crm_connected of this User.
        :param email: The email of this User.
        :param email_client_configured: The email_client_configured of this User.
        :param email_client_email_address: The email_client_email_address of this User.
        :param email_signature: The email_signature of this User.
        :param email_signature_click_tracking_disabled: The email_signature_click_tracking_disabled of this User.
        :param email_signature_type: The email_signature_type of this User.
        :param external_feature_flags: The external_feature_flags of this User.
        :param first_name: The first_name of this User.
        :param from_address: The from_address of this User.
        :param full_email_address: The full_email_address of this User.
        :param group: The group of this User.
        :param guid: The guid of this User.
        :param id: The id of this User.
        :param job_role: The job_role of this User.
        :param last_name: The last_name of this User.
        :param local_dial_enabled: The local_dial_enabled of this User.
        :param name: The name of this User.
        :param phone_client: The phone_client of this User.
        :param phone_number_assignment: The phone_number_assignment of this User.
        :param role: The role of this User.
        :param sending_email_address: The sending_email_address of this User.
        :param slack_username: The slack_username of this User.
        :param team: The team of this User.
        :param team_admin: The team_admin of this User.
        :param time_zone: The time_zone of this User.
        :param twitter_handle: The twitter_handle of this User.
        :param updated_at: The updated_at of this User.
        :param work_country: The work_country of this User.
        """
        self.openapi_types = {
            'private_fields': object,
            'active': bool,
            'bcc_email_address': str,
            'click_to_call_enabled': bool,
            'created_at': datetime,
            'crm_connected': bool,
            'email': str,
            'email_client_configured': bool,
            'email_client_email_address': str,
            'email_signature': str,
            'email_signature_click_tracking_disabled': bool,
            'email_signature_type': str,
            'external_feature_flags': object,
            'first_name': str,
            'from_address': str,
            'full_email_address': str,
            'group': EmbeddedResource,
            'guid': str,
            'id': int,
            'job_role': str,
            'last_name': str,
            'local_dial_enabled': bool,
            'name': str,
            'phone_client': EmbeddedResource,
            'phone_number_assignment': EmbeddedResource,
            'role': EmbeddedResource,
            'sending_email_address': str,
            'slack_username': str,
            'team': EmbeddedResource,
            'team_admin': bool,
            'time_zone': str,
            'twitter_handle': str,
            'updated_at': datetime,
            'work_country': str
        }

        self.attribute_map = {
            'private_fields': '_private_fields',
            'active': 'active',
            'bcc_email_address': 'bcc_email_address',
            'click_to_call_enabled': 'click_to_call_enabled',
            'created_at': 'created_at',
            'crm_connected': 'crm_connected',
            'email': 'email',
            'email_client_configured': 'email_client_configured',
            'email_client_email_address': 'email_client_email_address',
            'email_signature': 'email_signature',
            'email_signature_click_tracking_disabled': 'email_signature_click_tracking_disabled',
            'email_signature_type': 'email_signature_type',
            'external_feature_flags': 'external_feature_flags',
            'first_name': 'first_name',
            'from_address': 'from_address',
            'full_email_address': 'full_email_address',
            'group': 'group',
            'guid': 'guid',
            'id': 'id',
            'job_role': 'job_role',
            'last_name': 'last_name',
            'local_dial_enabled': 'local_dial_enabled',
            'name': 'name',
            'phone_client': 'phone_client',
            'phone_number_assignment': 'phone_number_assignment',
            'role': 'role',
            'sending_email_address': 'sending_email_address',
            'slack_username': 'slack_username',
            'team': 'team',
            'team_admin': 'team_admin',
            'time_zone': 'time_zone',
            'twitter_handle': 'twitter_handle',
            'updated_at': 'updated_at',
            'work_country': 'work_country'
        }

        self._private_fields = private_fields
        self._active = active
        self._bcc_email_address = bcc_email_address
        self._click_to_call_enabled = click_to_call_enabled
        self._created_at = created_at
        self._crm_connected = crm_connected
        self._email = email
        self._email_client_configured = email_client_configured
        self._email_client_email_address = email_client_email_address
        self._email_signature = email_signature
        self._email_signature_click_tracking_disabled = email_signature_click_tracking_disabled
        self._email_signature_type = email_signature_type
        self._external_feature_flags = external_feature_flags
        self._first_name = first_name
        self._from_address = from_address
        self._full_email_address = full_email_address
        self._group = group
        self._guid = guid
        self._id = id
        self._job_role = job_role
        self._last_name = last_name
        self._local_dial_enabled = local_dial_enabled
        self._name = name
        self._phone_client = phone_client
        self._phone_number_assignment = phone_number_assignment
        self._role = role
        self._sending_email_address = sending_email_address
        self._slack_username = slack_username
        self._team = team
        self._team_admin = team_admin
        self._time_zone = time_zone
        self._twitter_handle = twitter_handle
        self._updated_at = updated_at
        self._work_country = work_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_fields(self):
        """Gets the private_fields of this User.

        For internal use only. This field does not comply with our backwards compatability policies.

        :return: The private_fields of this User.
        :rtype: object
        """
        return self._private_fields

    @private_fields.setter
    def private_fields(self, private_fields):
        """Sets the private_fields of this User.

        For internal use only. This field does not comply with our backwards compatability policies.

        :param private_fields: The private_fields of this User.
        :type private_fields: object
        """

        self._private_fields = private_fields

    @property
    def active(self):
        """Gets the active of this User.

        Whether an user is currently active in SalesLoft

        :return: The active of this User.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this User.

        Whether an user is currently active in SalesLoft

        :param active: The active of this User.
        :type active: bool
        """

        self._active = active

    @property
    def bcc_email_address(self):
        """Gets the bcc_email_address of this User.

        Address that will be BBC'd on all emails from this user

        :return: The bcc_email_address of this User.
        :rtype: str
        """
        return self._bcc_email_address

    @bcc_email_address.setter
    def bcc_email_address(self, bcc_email_address):
        """Sets the bcc_email_address of this User.

        Address that will be BBC'd on all emails from this user

        :param bcc_email_address: The bcc_email_address of this User.
        :type bcc_email_address: str
        """

        self._bcc_email_address = bcc_email_address

    @property
    def click_to_call_enabled(self):
        """Gets the click_to_call_enabled of this User.

        Whether this user has click to call enabled

        :return: The click_to_call_enabled of this User.
        :rtype: bool
        """
        return self._click_to_call_enabled

    @click_to_call_enabled.setter
    def click_to_call_enabled(self, click_to_call_enabled):
        """Sets the click_to_call_enabled of this User.

        Whether this user has click to call enabled

        :param click_to_call_enabled: The click_to_call_enabled of this User.
        :type click_to_call_enabled: bool
        """

        self._click_to_call_enabled = click_to_call_enabled

    @property
    def created_at(self):
        """Gets the created_at of this User.

        Datetime of when the user was created

        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        Datetime of when the user was created

        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def crm_connected(self):
        """Gets the crm_connected of this User.

        Whether the user has a crm connected

        :return: The crm_connected of this User.
        :rtype: bool
        """
        return self._crm_connected

    @crm_connected.setter
    def crm_connected(self, crm_connected):
        """Sets the crm_connected of this User.

        Whether the user has a crm connected

        :param crm_connected: The crm_connected of this User.
        :type crm_connected: bool
        """

        self._crm_connected = crm_connected

    @property
    def email(self):
        """Gets the email of this User.

        Email address provided to accounts.salesloft.com

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email address provided to accounts.salesloft.com

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def email_client_configured(self):
        """Gets the email_client_configured of this User.

        Whether this user has a email client configured

        :return: The email_client_configured of this User.
        :rtype: bool
        """
        return self._email_client_configured

    @email_client_configured.setter
    def email_client_configured(self, email_client_configured):
        """Sets the email_client_configured of this User.

        Whether this user has a email client configured

        :param email_client_configured: The email_client_configured of this User.
        :type email_client_configured: bool
        """

        self._email_client_configured = email_client_configured

    @property
    def email_client_email_address(self):
        """Gets the email_client_email_address of this User.

        Email address associated with the email client of the user

        :return: The email_client_email_address of this User.
        :rtype: str
        """
        return self._email_client_email_address

    @email_client_email_address.setter
    def email_client_email_address(self, email_client_email_address):
        """Sets the email_client_email_address of this User.

        Email address associated with the email client of the user

        :param email_client_email_address: The email_client_email_address of this User.
        :type email_client_email_address: str
        """

        self._email_client_email_address = email_client_email_address

    @property
    def email_signature(self):
        """Gets the email_signature of this User.

        Email signature

        :return: The email_signature of this User.
        :rtype: str
        """
        return self._email_signature

    @email_signature.setter
    def email_signature(self, email_signature):
        """Sets the email_signature of this User.

        Email signature

        :param email_signature: The email_signature of this User.
        :type email_signature: str
        """

        self._email_signature = email_signature

    @property
    def email_signature_click_tracking_disabled(self):
        """Gets the email_signature_click_tracking_disabled of this User.

        Whether this user has click tracking disabled in email signature

        :return: The email_signature_click_tracking_disabled of this User.
        :rtype: bool
        """
        return self._email_signature_click_tracking_disabled

    @email_signature_click_tracking_disabled.setter
    def email_signature_click_tracking_disabled(self, email_signature_click_tracking_disabled):
        """Sets the email_signature_click_tracking_disabled of this User.

        Whether this user has click tracking disabled in email signature

        :param email_signature_click_tracking_disabled: The email_signature_click_tracking_disabled of this User.
        :type email_signature_click_tracking_disabled: bool
        """

        self._email_signature_click_tracking_disabled = email_signature_click_tracking_disabled

    @property
    def email_signature_type(self):
        """Gets the email_signature_type of this User.

        Email signature type

        :return: The email_signature_type of this User.
        :rtype: str
        """
        return self._email_signature_type

    @email_signature_type.setter
    def email_signature_type(self, email_signature_type):
        """Sets the email_signature_type of this User.

        Email signature type

        :param email_signature_type: The email_signature_type of this User.
        :type email_signature_type: str
        """

        self._email_signature_type = email_signature_type

    @property
    def external_feature_flags(self):
        """Gets the external_feature_flags of this User.

        Feature flags that are for this user. New flags may appear or disappear at any time

        :return: The external_feature_flags of this User.
        :rtype: object
        """
        return self._external_feature_flags

    @external_feature_flags.setter
    def external_feature_flags(self, external_feature_flags):
        """Sets the external_feature_flags of this User.

        Feature flags that are for this user. New flags may appear or disappear at any time

        :param external_feature_flags: The external_feature_flags of this User.
        :type external_feature_flags: object
        """

        self._external_feature_flags = external_feature_flags

    @property
    def first_name(self):
        """Gets the first_name of this User.

        First name of user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def from_address(self):
        """Gets the from_address of this User.

        The from address of this user

        :return: The from_address of this User.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this User.

        The from address of this user

        :param from_address: The from_address of this User.
        :type from_address: str
        """

        self._from_address = from_address

    @property
    def full_email_address(self):
        """Gets the full_email_address of this User.

        RFC 5322 compliant email address

        :return: The full_email_address of this User.
        :rtype: str
        """
        return self._full_email_address

    @full_email_address.setter
    def full_email_address(self, full_email_address):
        """Sets the full_email_address of this User.

        RFC 5322 compliant email address

        :param full_email_address: The full_email_address of this User.
        :type full_email_address: str
        """

        self._full_email_address = full_email_address

    @property
    def group(self):
        """Gets the group of this User.


        :return: The group of this User.
        :rtype: EmbeddedResource
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this User.


        :param group: The group of this User.
        :type group: EmbeddedResource
        """

        self._group = group

    @property
    def guid(self):
        """Gets the guid of this User.

        Globally unique user ID. New endpoints will explicitly accept this over id

        :return: The guid of this User.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this User.

        Globally unique user ID. New endpoints will explicitly accept this over id

        :param guid: The guid of this User.
        :type guid: str
        """

        self._guid = guid

    @property
    def id(self):
        """Gets the id of this User.

        User ID

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        User ID

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def job_role(self):
        """Gets the job_role of this User.

        Job role of user

        :return: The job_role of this User.
        :rtype: str
        """
        return self._job_role

    @job_role.setter
    def job_role(self, job_role):
        """Sets the job_role of this User.

        Job role of user

        :param job_role: The job_role of this User.
        :type job_role: str
        """

        self._job_role = job_role

    @property
    def last_name(self):
        """Gets the last_name of this User.

        Last name of user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def local_dial_enabled(self):
        """Gets the local_dial_enabled of this User.

        Whether this user has Local Dial enabled

        :return: The local_dial_enabled of this User.
        :rtype: bool
        """
        return self._local_dial_enabled

    @local_dial_enabled.setter
    def local_dial_enabled(self, local_dial_enabled):
        """Sets the local_dial_enabled of this User.

        Whether this user has Local Dial enabled

        :param local_dial_enabled: The local_dial_enabled of this User.
        :type local_dial_enabled: bool
        """

        self._local_dial_enabled = local_dial_enabled

    @property
    def name(self):
        """Gets the name of this User.

        Display name of user

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Display name of user

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def phone_client(self):
        """Gets the phone_client of this User.


        :return: The phone_client of this User.
        :rtype: EmbeddedResource
        """
        return self._phone_client

    @phone_client.setter
    def phone_client(self, phone_client):
        """Sets the phone_client of this User.


        :param phone_client: The phone_client of this User.
        :type phone_client: EmbeddedResource
        """

        self._phone_client = phone_client

    @property
    def phone_number_assignment(self):
        """Gets the phone_number_assignment of this User.


        :return: The phone_number_assignment of this User.
        :rtype: EmbeddedResource
        """
        return self._phone_number_assignment

    @phone_number_assignment.setter
    def phone_number_assignment(self, phone_number_assignment):
        """Sets the phone_number_assignment of this User.


        :param phone_number_assignment: The phone_number_assignment of this User.
        :type phone_number_assignment: EmbeddedResource
        """

        self._phone_number_assignment = phone_number_assignment

    @property
    def role(self):
        """Gets the role of this User.


        :return: The role of this User.
        :rtype: EmbeddedResource
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.
        :type role: EmbeddedResource
        """

        self._role = role

    @property
    def sending_email_address(self):
        """Gets the sending_email_address of this User.

        The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email

        :return: The sending_email_address of this User.
        :rtype: str
        """
        return self._sending_email_address

    @sending_email_address.setter
    def sending_email_address(self, sending_email_address):
        """Sets the sending_email_address of this User.

        The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email

        :param sending_email_address: The sending_email_address of this User.
        :type sending_email_address: str
        """

        self._sending_email_address = sending_email_address

    @property
    def slack_username(self):
        """Gets the slack_username of this User.

        Slack username

        :return: The slack_username of this User.
        :rtype: str
        """
        return self._slack_username

    @slack_username.setter
    def slack_username(self, slack_username):
        """Sets the slack_username of this User.

        Slack username

        :param slack_username: The slack_username of this User.
        :type slack_username: str
        """

        self._slack_username = slack_username

    @property
    def team(self):
        """Gets the team of this User.


        :return: The team of this User.
        :rtype: EmbeddedResource
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this User.


        :param team: The team of this User.
        :type team: EmbeddedResource
        """

        self._team = team

    @property
    def team_admin(self):
        """Gets the team_admin of this User.

        Team Admin

        :return: The team_admin of this User.
        :rtype: bool
        """
        return self._team_admin

    @team_admin.setter
    def team_admin(self, team_admin):
        """Sets the team_admin of this User.

        Team Admin

        :param team_admin: The team_admin of this User.
        :type team_admin: bool
        """

        self._team_admin = team_admin

    @property
    def time_zone(self):
        """Gets the time_zone of this User.

        User Time Zone

        :return: The time_zone of this User.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this User.

        User Time Zone

        :param time_zone: The time_zone of this User.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def twitter_handle(self):
        """Gets the twitter_handle of this User.

        Twitter handle

        :return: The twitter_handle of this User.
        :rtype: str
        """
        return self._twitter_handle

    @twitter_handle.setter
    def twitter_handle(self, twitter_handle):
        """Sets the twitter_handle of this User.

        Twitter handle

        :param twitter_handle: The twitter_handle of this User.
        :type twitter_handle: str
        """

        self._twitter_handle = twitter_handle

    @property
    def updated_at(self):
        """Gets the updated_at of this User.

        Datetime of when the user was last updated

        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        Datetime of when the user was last updated

        :param updated_at: The updated_at of this User.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def work_country(self):
        """Gets the work_country of this User.

        Work Country

        :return: The work_country of this User.
        :rtype: str
        """
        return self._work_country

    @work_country.setter
    def work_country(self, work_country):
        """Sets the work_country of this User.

        Work Country

        :param work_country: The work_country of this User.
        :type work_country: str
        """

        self._work_country = work_country
