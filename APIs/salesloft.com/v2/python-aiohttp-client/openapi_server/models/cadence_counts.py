# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CadenceCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cadence_people: int=None, meetings_booked: int=None, opportunities_created: int=None, people_acted_on_count: int=None, target_daily_people: int=None):
        """CadenceCounts - a model defined in OpenAPI

        :param cadence_people: The cadence_people of this CadenceCounts.
        :param meetings_booked: The meetings_booked of this CadenceCounts.
        :param opportunities_created: The opportunities_created of this CadenceCounts.
        :param people_acted_on_count: The people_acted_on_count of this CadenceCounts.
        :param target_daily_people: The target_daily_people of this CadenceCounts.
        """
        self.openapi_types = {
            'cadence_people': int,
            'meetings_booked': int,
            'opportunities_created': int,
            'people_acted_on_count': int,
            'target_daily_people': int
        }

        self.attribute_map = {
            'cadence_people': 'cadence_people',
            'meetings_booked': 'meetings_booked',
            'opportunities_created': 'opportunities_created',
            'people_acted_on_count': 'people_acted_on_count',
            'target_daily_people': 'target_daily_people'
        }

        self._cadence_people = cadence_people
        self._meetings_booked = meetings_booked
        self._opportunities_created = opportunities_created
        self._people_acted_on_count = people_acted_on_count
        self._target_daily_people = target_daily_people

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CadenceCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CadenceCounts of this CadenceCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cadence_people(self):
        """Gets the cadence_people of this CadenceCounts.

        The number of people that have ever been added to the cadence

        :return: The cadence_people of this CadenceCounts.
        :rtype: int
        """
        return self._cadence_people

    @cadence_people.setter
    def cadence_people(self, cadence_people):
        """Sets the cadence_people of this CadenceCounts.

        The number of people that have ever been added to the cadence

        :param cadence_people: The cadence_people of this CadenceCounts.
        :type cadence_people: int
        """

        self._cadence_people = cadence_people

    @property
    def meetings_booked(self):
        """Gets the meetings_booked of this CadenceCounts.

        The number of meetings booked and attributed to the cadence

        :return: The meetings_booked of this CadenceCounts.
        :rtype: int
        """
        return self._meetings_booked

    @meetings_booked.setter
    def meetings_booked(self, meetings_booked):
        """Sets the meetings_booked of this CadenceCounts.

        The number of meetings booked and attributed to the cadence

        :param meetings_booked: The meetings_booked of this CadenceCounts.
        :type meetings_booked: int
        """

        self._meetings_booked = meetings_booked

    @property
    def opportunities_created(self):
        """Gets the opportunities_created of this CadenceCounts.

        The number of opportunities created and attributed to the cadence

        :return: The opportunities_created of this CadenceCounts.
        :rtype: int
        """
        return self._opportunities_created

    @opportunities_created.setter
    def opportunities_created(self, opportunities_created):
        """Sets the opportunities_created of this CadenceCounts.

        The number of opportunities created and attributed to the cadence

        :param opportunities_created: The opportunities_created of this CadenceCounts.
        :type opportunities_created: int
        """

        self._opportunities_created = opportunities_created

    @property
    def people_acted_on_count(self):
        """Gets the people_acted_on_count of this CadenceCounts.

        The number of people that have been skipped, scheduled, or advanced in a cadence

        :return: The people_acted_on_count of this CadenceCounts.
        :rtype: int
        """
        return self._people_acted_on_count

    @people_acted_on_count.setter
    def people_acted_on_count(self, people_acted_on_count):
        """Sets the people_acted_on_count of this CadenceCounts.

        The number of people that have been skipped, scheduled, or advanced in a cadence

        :param people_acted_on_count: The people_acted_on_count of this CadenceCounts.
        :type people_acted_on_count: int
        """

        self._people_acted_on_count = people_acted_on_count

    @property
    def target_daily_people(self):
        """Gets the target_daily_people of this CadenceCounts.

        The user defined target for number of people to add to the cadence each day

        :return: The target_daily_people of this CadenceCounts.
        :rtype: int
        """
        return self._target_daily_people

    @target_daily_people.setter
    def target_daily_people(self, target_daily_people):
        """Sets the target_daily_people of this CadenceCounts.

        The user defined target for number of people to add to the cadence each day

        :param target_daily_people: The target_daily_people of this CadenceCounts.
        :type target_daily_people: int
        """

        self._target_daily_people = target_daily_people
