# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bulk_job: object=None, created_at: datetime=None, error: str=None, finished_at: datetime=None, id: int=None, record: object=None, resource: object=None, started_at: datetime=None, status: str=None):
        """JobData - a model defined in OpenAPI

        :param bulk_job: The bulk_job of this JobData.
        :param created_at: The created_at of this JobData.
        :param error: The error of this JobData.
        :param finished_at: The finished_at of this JobData.
        :param id: The id of this JobData.
        :param record: The record of this JobData.
        :param resource: The resource of this JobData.
        :param started_at: The started_at of this JobData.
        :param status: The status of this JobData.
        """
        self.openapi_types = {
            'bulk_job': object,
            'created_at': datetime,
            'error': str,
            'finished_at': datetime,
            'id': int,
            'record': object,
            'resource': object,
            'started_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'bulk_job': 'bulk_job',
            'created_at': 'created_at',
            'error': 'error',
            'finished_at': 'finished_at',
            'id': 'id',
            'record': 'record',
            'resource': 'resource',
            'started_at': 'started_at',
            'status': 'status'
        }

        self._bulk_job = bulk_job
        self._created_at = created_at
        self._error = error
        self._finished_at = finished_at
        self._id = id
        self._record = record
        self._resource = resource
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobData of this JobData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bulk_job(self):
        """Gets the bulk_job of this JobData.

        Associated bulk job

        :return: The bulk_job of this JobData.
        :rtype: object
        """
        return self._bulk_job

    @bulk_job.setter
    def bulk_job(self, bulk_job):
        """Sets the bulk_job of this JobData.

        Associated bulk job

        :param bulk_job: The bulk_job of this JobData.
        :type bulk_job: object
        """

        self._bulk_job = bulk_job

    @property
    def created_at(self):
        """Gets the created_at of this JobData.

        When this job data record was created

        :return: The created_at of this JobData.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this JobData.

        When this job data record was created

        :param created_at: The created_at of this JobData.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this JobData.

        Error associated with this record

        :return: The error of this JobData.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobData.

        Error associated with this record

        :param error: The error of this JobData.
        :type error: str
        """

        self._error = error

    @property
    def finished_at(self):
        """Gets the finished_at of this JobData.

        When this job data record finished processing

        :return: The finished_at of this JobData.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this JobData.

        When this job data record finished processing

        :param finished_at: The finished_at of this JobData.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this JobData.

        ID of this Job Data

        :return: The id of this JobData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobData.

        ID of this Job Data

        :param id: The id of this JobData.
        :type id: int
        """

        self._id = id

    @property
    def record(self):
        """Gets the record of this JobData.

        The data that was used to process the operation

        :return: The record of this JobData.
        :rtype: object
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this JobData.

        The data that was used to process the operation

        :param record: The record of this JobData.
        :type record: object
        """

        self._record = record

    @property
    def resource(self):
        """Gets the resource of this JobData.

        The object containing the resulting resource from performing the bulk action on this record

        :return: The resource of this JobData.
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this JobData.

        The object containing the resulting resource from performing the bulk action on this record

        :param resource: The resource of this JobData.
        :type resource: object
        """

        self._resource = resource

    @property
    def started_at(self):
        """Gets the started_at of this JobData.

        When this job data record started processing

        :return: The started_at of this JobData.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this JobData.

        When this job data record started processing

        :param started_at: The started_at of this JobData.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this JobData.

        Status of this job data. Must be one of: pending, success, error, retrying

        :return: The status of this JobData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobData.

        Status of this job data. Must be one of: pending, success, error, retrying

        :param status: The status of this JobData.
        :type status: str
        """

        self._status = status
