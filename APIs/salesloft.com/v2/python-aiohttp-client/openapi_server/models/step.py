# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Step(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cadence: EmbeddedResource=None, created_at: datetime=None, day: int=None, details: EmbeddedResource=None, disabled: bool=None, display_name: str=None, id: int=None, multitouch_enabled: bool=None, name: str=None, step_number: int=None, type: str=None, updated_at: datetime=None):
        """Step - a model defined in OpenAPI

        :param cadence: The cadence of this Step.
        :param created_at: The created_at of this Step.
        :param day: The day of this Step.
        :param details: The details of this Step.
        :param disabled: The disabled of this Step.
        :param display_name: The display_name of this Step.
        :param id: The id of this Step.
        :param multitouch_enabled: The multitouch_enabled of this Step.
        :param name: The name of this Step.
        :param step_number: The step_number of this Step.
        :param type: The type of this Step.
        :param updated_at: The updated_at of this Step.
        """
        self.openapi_types = {
            'cadence': EmbeddedResource,
            'created_at': datetime,
            'day': int,
            'details': EmbeddedResource,
            'disabled': bool,
            'display_name': str,
            'id': int,
            'multitouch_enabled': bool,
            'name': str,
            'step_number': int,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'cadence': 'cadence',
            'created_at': 'created_at',
            'day': 'day',
            'details': 'details',
            'disabled': 'disabled',
            'display_name': 'display_name',
            'id': 'id',
            'multitouch_enabled': 'multitouch_enabled',
            'name': 'name',
            'step_number': 'step_number',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._cadence = cadence
        self._created_at = created_at
        self._day = day
        self._details = details
        self._disabled = disabled
        self._display_name = display_name
        self._id = id
        self._multitouch_enabled = multitouch_enabled
        self._name = name
        self._step_number = step_number
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Step':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Step of this Step.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cadence(self):
        """Gets the cadence of this Step.


        :return: The cadence of this Step.
        :rtype: EmbeddedResource
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this Step.


        :param cadence: The cadence of this Step.
        :type cadence: EmbeddedResource
        """

        self._cadence = cadence

    @property
    def created_at(self):
        """Gets the created_at of this Step.

        Datetime of when the Step was created

        :return: The created_at of this Step.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Step.

        Datetime of when the Step was created

        :param created_at: The created_at of this Step.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def day(self):
        """Gets the day of this Step.

        Day this step is associated with up

        :return: The day of this Step.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Step.

        Day this step is associated with up

        :param day: The day of this Step.
        :type day: int
        """

        self._day = day

    @property
    def details(self):
        """Gets the details of this Step.


        :return: The details of this Step.
        :rtype: EmbeddedResource
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Step.


        :param details: The details of this Step.
        :type details: EmbeddedResource
        """

        self._details = details

    @property
    def disabled(self):
        """Gets the disabled of this Step.

        Whether this step is currently active

        :return: The disabled of this Step.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Step.

        Whether this step is currently active

        :param disabled: The disabled of this Step.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this Step.

        Display name of the step

        :return: The display_name of this Step.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Step.

        Display name of the step

        :param display_name: The display_name of this Step.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Step.

        ID of Step

        :return: The id of this Step.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Step.

        ID of Step

        :param id: The id of this Step.
        :type id: int
        """

        self._id = id

    @property
    def multitouch_enabled(self):
        """Gets the multitouch_enabled of this Step.

        Whether this step is a multitouch cadence step

        :return: The multitouch_enabled of this Step.
        :rtype: bool
        """
        return self._multitouch_enabled

    @multitouch_enabled.setter
    def multitouch_enabled(self, multitouch_enabled):
        """Sets the multitouch_enabled of this Step.

        Whether this step is a multitouch cadence step

        :param multitouch_enabled: The multitouch_enabled of this Step.
        :type multitouch_enabled: bool
        """

        self._multitouch_enabled = multitouch_enabled

    @property
    def name(self):
        """Gets the name of this Step.

        Name of the step

        :return: The name of this Step.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Step.

        Name of the step

        :param name: The name of this Step.
        :type name: str
        """

        self._name = name

    @property
    def step_number(self):
        """Gets the step_number of this Step.

        The number of the step for this day

        :return: The step_number of this Step.
        :rtype: int
        """
        return self._step_number

    @step_number.setter
    def step_number(self, step_number):
        """Sets the step_number of this Step.

        The number of the step for this day

        :param step_number: The step_number of this Step.
        :type step_number: int
        """

        self._step_number = step_number

    @property
    def type(self):
        """Gets the type of this Step.

        The type of the action scheduled by this step. Valid types are: email, phone, integration, other. New types may be added in the future. 

        :return: The type of this Step.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Step.

        The type of the action scheduled by this step. Valid types are: email, phone, integration, other. New types may be added in the future. 

        :param type: The type of this Step.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Step.

        Datetime of when the Step was last updated

        :return: The updated_at of this Step.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Step.

        Datetime of when the Step was last updated

        :param updated_at: The updated_at of this Step.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
