# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LiveFeedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_metadata: object=None, event_occurred_at: datetime=None, event_type: str=None, id: int=None, message: str=None, metadata: object=None, path: str=None, rollup_key: str=None, title: str=None, user_guid: str=None):
        """LiveFeedItem - a model defined in OpenAPI

        :param alert_metadata: The alert_metadata of this LiveFeedItem.
        :param event_occurred_at: The event_occurred_at of this LiveFeedItem.
        :param event_type: The event_type of this LiveFeedItem.
        :param id: The id of this LiveFeedItem.
        :param message: The message of this LiveFeedItem.
        :param metadata: The metadata of this LiveFeedItem.
        :param path: The path of this LiveFeedItem.
        :param rollup_key: The rollup_key of this LiveFeedItem.
        :param title: The title of this LiveFeedItem.
        :param user_guid: The user_guid of this LiveFeedItem.
        """
        self.openapi_types = {
            'alert_metadata': object,
            'event_occurred_at': datetime,
            'event_type': str,
            'id': int,
            'message': str,
            'metadata': object,
            'path': str,
            'rollup_key': str,
            'title': str,
            'user_guid': str
        }

        self.attribute_map = {
            'alert_metadata': 'alert_metadata',
            'event_occurred_at': 'event_occurred_at',
            'event_type': 'event_type',
            'id': 'id',
            'message': 'message',
            'metadata': 'metadata',
            'path': 'path',
            'rollup_key': 'rollup_key',
            'title': 'title',
            'user_guid': 'user_guid'
        }

        self._alert_metadata = alert_metadata
        self._event_occurred_at = event_occurred_at
        self._event_type = event_type
        self._id = id
        self._message = message
        self._metadata = metadata
        self._path = path
        self._rollup_key = rollup_key
        self._title = title
        self._user_guid = user_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveFeedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveFeedItem of this LiveFeedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_metadata(self):
        """Gets the alert_metadata of this LiveFeedItem.

        Information about whether this event should trigger an alert

        :return: The alert_metadata of this LiveFeedItem.
        :rtype: object
        """
        return self._alert_metadata

    @alert_metadata.setter
    def alert_metadata(self, alert_metadata):
        """Sets the alert_metadata of this LiveFeedItem.

        Information about whether this event should trigger an alert

        :param alert_metadata: The alert_metadata of this LiveFeedItem.
        :type alert_metadata: object
        """

        self._alert_metadata = alert_metadata

    @property
    def event_occurred_at(self):
        """Gets the event_occurred_at of this LiveFeedItem.

        When this event occurred

        :return: The event_occurred_at of this LiveFeedItem.
        :rtype: datetime
        """
        return self._event_occurred_at

    @event_occurred_at.setter
    def event_occurred_at(self, event_occurred_at):
        """Sets the event_occurred_at of this LiveFeedItem.

        When this event occurred

        :param event_occurred_at: The event_occurred_at of this LiveFeedItem.
        :type event_occurred_at: datetime
        """

        self._event_occurred_at = event_occurred_at

    @property
    def event_type(self):
        """Gets the event_type of this LiveFeedItem.

        The type of event

        :return: The event_type of this LiveFeedItem.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this LiveFeedItem.

        The type of event

        :param event_type: The event_type of this LiveFeedItem.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this LiveFeedItem.

        ID of this item

        :return: The id of this LiveFeedItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LiveFeedItem.

        ID of this item

        :param id: The id of this LiveFeedItem.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this LiveFeedItem.

        A plaintext message for this event

        :return: The message of this LiveFeedItem.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LiveFeedItem.

        A plaintext message for this event

        :param message: The message of this LiveFeedItem.
        :type message: str
        """

        self._message = message

    @property
    def metadata(self):
        """Gets the metadata of this LiveFeedItem.

        The metadata created for this event

        :return: The metadata of this LiveFeedItem.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LiveFeedItem.

        The metadata created for this event

        :param metadata: The metadata of this LiveFeedItem.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def path(self):
        """Gets the path of this LiveFeedItem.

        The path to the application that should be followed

        :return: The path of this LiveFeedItem.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LiveFeedItem.

        The path to the application that should be followed

        :param path: The path of this LiveFeedItem.
        :type path: str
        """

        self._path = path

    @property
    def rollup_key(self):
        """Gets the rollup_key of this LiveFeedItem.

        The key that should be used to rollup events client side. null or empty values should not be rolled up

        :return: The rollup_key of this LiveFeedItem.
        :rtype: str
        """
        return self._rollup_key

    @rollup_key.setter
    def rollup_key(self, rollup_key):
        """Sets the rollup_key of this LiveFeedItem.

        The key that should be used to rollup events client side. null or empty values should not be rolled up

        :param rollup_key: The rollup_key of this LiveFeedItem.
        :type rollup_key: str
        """

        self._rollup_key = rollup_key

    @property
    def title(self):
        """Gets the title of this LiveFeedItem.

        A plaintext title for this event

        :return: The title of this LiveFeedItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LiveFeedItem.

        A plaintext title for this event

        :param title: The title of this LiveFeedItem.
        :type title: str
        """

        self._title = title

    @property
    def user_guid(self):
        """Gets the user_guid of this LiveFeedItem.

        UUID of the user this item is for

        :return: The user_guid of this LiveFeedItem.
        :rtype: str
        """
        return self._user_guid

    @user_guid.setter
    def user_guid(self, user_guid):
        """Sets the user_guid of this LiveFeedItem.

        UUID of the user this item is for

        :param user_guid: The user_guid of this LiveFeedItem.
        :type user_guid: str
        """

        self._user_guid = user_guid
