# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: datetime=None, completed_by: EmbeddedResource=None, created_at: datetime=None, created_by_user: EmbeddedResource=None, current_state: str=None, description: str=None, due_at: datetime=None, due_date: date=None, id: int=None, person: EmbeddedResource=None, remind_at: datetime=None, subject: str=None, task_type: str=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """Task - a model defined in OpenAPI

        :param completed_at: The completed_at of this Task.
        :param completed_by: The completed_by of this Task.
        :param created_at: The created_at of this Task.
        :param created_by_user: The created_by_user of this Task.
        :param current_state: The current_state of this Task.
        :param description: The description of this Task.
        :param due_at: The due_at of this Task.
        :param due_date: The due_date of this Task.
        :param id: The id of this Task.
        :param person: The person of this Task.
        :param remind_at: The remind_at of this Task.
        :param subject: The subject of this Task.
        :param task_type: The task_type of this Task.
        :param updated_at: The updated_at of this Task.
        :param user: The user of this Task.
        """
        self.openapi_types = {
            'completed_at': datetime,
            'completed_by': EmbeddedResource,
            'created_at': datetime,
            'created_by_user': EmbeddedResource,
            'current_state': str,
            'description': str,
            'due_at': datetime,
            'due_date': date,
            'id': int,
            'person': EmbeddedResource,
            'remind_at': datetime,
            'subject': str,
            'task_type': str,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'completed_at': 'completed_at',
            'completed_by': 'completed_by',
            'created_at': 'created_at',
            'created_by_user': 'created_by_user',
            'current_state': 'current_state',
            'description': 'description',
            'due_at': 'due_at',
            'due_date': 'due_date',
            'id': 'id',
            'person': 'person',
            'remind_at': 'remind_at',
            'subject': 'subject',
            'task_type': 'task_type',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._completed_at = completed_at
        self._completed_by = completed_by
        self._created_at = created_at
        self._created_by_user = created_by_user
        self._current_state = current_state
        self._description = description
        self._due_at = due_at
        self._due_date = due_date
        self._id = id
        self._person = person
        self._remind_at = remind_at
        self._subject = subject
        self._task_type = task_type
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this Task.

        Datetime of when the task was completed, ISO-8601 datetime format required

        :return: The completed_at of this Task.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Task.

        Datetime of when the task was completed, ISO-8601 datetime format required

        :param completed_at: The completed_at of this Task.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def completed_by(self):
        """Gets the completed_by of this Task.


        :return: The completed_by of this Task.
        :rtype: EmbeddedResource
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this Task.


        :param completed_by: The completed_by of this Task.
        :type completed_by: EmbeddedResource
        """

        self._completed_by = completed_by

    @property
    def created_at(self):
        """Gets the created_at of this Task.

        Datetime of when the Task was created

        :return: The created_at of this Task.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        Datetime of when the Task was created

        :param created_at: The created_at of this Task.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by_user(self):
        """Gets the created_by_user of this Task.


        :return: The created_by_user of this Task.
        :rtype: EmbeddedResource
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this Task.


        :param created_by_user: The created_by_user of this Task.
        :type created_by_user: EmbeddedResource
        """

        self._created_by_user = created_by_user

    @property
    def current_state(self):
        """Gets the current_state of this Task.

        The state of the task. Valid states are: scheduled, completed

        :return: The current_state of this Task.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this Task.

        The state of the task. Valid states are: scheduled, completed

        :param current_state: The current_state of this Task.
        :type current_state: str
        """

        self._current_state = current_state

    @property
    def description(self):
        """Gets the description of this Task.

        A description of the task recorded for person at completion time

        :return: The description of this Task.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Task.

        A description of the task recorded for person at completion time

        :param description: The description of this Task.
        :type description: str
        """

        self._description = description

    @property
    def due_at(self):
        """Gets the due_at of this Task.

        Datetime of when the Task is due, can be null.  ISO-8601 datetime format required

        :return: The due_at of this Task.
        :rtype: datetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Task.

        Datetime of when the Task is due, can be null.  ISO-8601 datetime format required

        :param due_at: The due_at of this Task.
        :type due_at: datetime
        """

        self._due_at = due_at

    @property
    def due_date(self):
        """Gets the due_date of this Task.

        Date of when the Task is due, ISO-8601 date format required

        :return: The due_date of this Task.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Task.

        Date of when the Task is due, ISO-8601 date format required

        :param due_date: The due_date of this Task.
        :type due_date: date
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this Task.

        ID of Task

        :return: The id of this Task.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        ID of Task

        :param id: The id of this Task.
        :type id: int
        """

        self._id = id

    @property
    def person(self):
        """Gets the person of this Task.


        :return: The person of this Task.
        :rtype: EmbeddedResource
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this Task.


        :param person: The person of this Task.
        :type person: EmbeddedResource
        """

        self._person = person

    @property
    def remind_at(self):
        """Gets the remind_at of this Task.

        Datetime of when the user will be reminded of the task, ISO-8601 datetime format required

        :return: The remind_at of this Task.
        :rtype: datetime
        """
        return self._remind_at

    @remind_at.setter
    def remind_at(self, remind_at):
        """Sets the remind_at of this Task.

        Datetime of when the user will be reminded of the task, ISO-8601 datetime format required

        :param remind_at: The remind_at of this Task.
        :type remind_at: datetime
        """

        self._remind_at = remind_at

    @property
    def subject(self):
        """Gets the subject of this Task.

        Subject line of the task

        :return: The subject of this Task.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Task.

        Subject line of the task

        :param subject: The subject of this Task.
        :type subject: str
        """

        self._subject = subject

    @property
    def task_type(self):
        """Gets the task_type of this Task.

        The type of the task.  Valid types are: call, email, general

        :return: The task_type of this Task.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Task.

        The type of the task.  Valid types are: call, email, general

        :param task_type: The task_type of this Task.
        :type task_type: str
        """

        self._task_type = task_type

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.

        Datetime of when the Task was last updated

        :return: The updated_at of this Task.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.

        Datetime of when the Task was last updated

        :param updated_at: The updated_at of this Task.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Task.


        :return: The user of this Task.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Task.


        :param user: The user of this Task.
        :type user: EmbeddedResource
        """

        self._user = user
