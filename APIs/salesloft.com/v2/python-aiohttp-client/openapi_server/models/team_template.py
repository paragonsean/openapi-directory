# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server.models.team_template_counts import TeamTemplateCounts
from openapi_server import util


class TeamTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, archived_at: datetime=None, body: str=None, body_preview: str=None, click_tracking_enabled: bool=None, counts: TeamTemplateCounts=None, created_at: datetime=None, id: str=None, last_modified_at: datetime=None, last_modified_user: EmbeddedResource=None, last_used_at: datetime=None, open_tracking_enabled: bool=None, subject: str=None, tags: List[str]=None, title: str=None, updated_at: datetime=None):
        """TeamTemplate - a model defined in OpenAPI

        :param links: The links of this TeamTemplate.
        :param archived_at: The archived_at of this TeamTemplate.
        :param body: The body of this TeamTemplate.
        :param body_preview: The body_preview of this TeamTemplate.
        :param click_tracking_enabled: The click_tracking_enabled of this TeamTemplate.
        :param counts: The counts of this TeamTemplate.
        :param created_at: The created_at of this TeamTemplate.
        :param id: The id of this TeamTemplate.
        :param last_modified_at: The last_modified_at of this TeamTemplate.
        :param last_modified_user: The last_modified_user of this TeamTemplate.
        :param last_used_at: The last_used_at of this TeamTemplate.
        :param open_tracking_enabled: The open_tracking_enabled of this TeamTemplate.
        :param subject: The subject of this TeamTemplate.
        :param tags: The tags of this TeamTemplate.
        :param title: The title of this TeamTemplate.
        :param updated_at: The updated_at of this TeamTemplate.
        """
        self.openapi_types = {
            'links': object,
            'archived_at': datetime,
            'body': str,
            'body_preview': str,
            'click_tracking_enabled': bool,
            'counts': TeamTemplateCounts,
            'created_at': datetime,
            'id': str,
            'last_modified_at': datetime,
            'last_modified_user': EmbeddedResource,
            'last_used_at': datetime,
            'open_tracking_enabled': bool,
            'subject': str,
            'tags': List[str],
            'title': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'archived_at': 'archived_at',
            'body': 'body',
            'body_preview': 'body_preview',
            'click_tracking_enabled': 'click_tracking_enabled',
            'counts': 'counts',
            'created_at': 'created_at',
            'id': 'id',
            'last_modified_at': 'last_modified_at',
            'last_modified_user': 'last_modified_user',
            'last_used_at': 'last_used_at',
            'open_tracking_enabled': 'open_tracking_enabled',
            'subject': 'subject',
            'tags': 'tags',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._links = links
        self._archived_at = archived_at
        self._body = body
        self._body_preview = body_preview
        self._click_tracking_enabled = click_tracking_enabled
        self._counts = counts
        self._created_at = created_at
        self._id = id
        self._last_modified_at = last_modified_at
        self._last_modified_user = last_modified_user
        self._last_used_at = last_used_at
        self._open_tracking_enabled = open_tracking_enabled
        self._subject = subject
        self._tags = tags
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamTemplate of this TeamTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this TeamTemplate.

        Links to attachments resource for this template 

        :return: The links of this TeamTemplate.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TeamTemplate.

        Links to attachments resource for this template 

        :param links: The links of this TeamTemplate.
        :type links: object
        """

        self._links = links

    @property
    def archived_at(self):
        """Gets the archived_at of this TeamTemplate.

        Datetime of when the team template was archived, if archived

        :return: The archived_at of this TeamTemplate.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this TeamTemplate.

        Datetime of when the team template was archived, if archived

        :param archived_at: The archived_at of this TeamTemplate.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def body(self):
        """Gets the body of this TeamTemplate.

        Body of the team template

        :return: The body of this TeamTemplate.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this TeamTemplate.

        Body of the team template

        :param body: The body of this TeamTemplate.
        :type body: str
        """

        self._body = body

    @property
    def body_preview(self):
        """Gets the body_preview of this TeamTemplate.

        A plain text version of the first 100 characters of the body of the team template

        :return: The body_preview of this TeamTemplate.
        :rtype: str
        """
        return self._body_preview

    @body_preview.setter
    def body_preview(self, body_preview):
        """Sets the body_preview of this TeamTemplate.

        A plain text version of the first 100 characters of the body of the team template

        :param body_preview: The body_preview of this TeamTemplate.
        :type body_preview: str
        """

        self._body_preview = body_preview

    @property
    def click_tracking_enabled(self):
        """Gets the click_tracking_enabled of this TeamTemplate.

        Whether click tracking is enabled for this team template

        :return: The click_tracking_enabled of this TeamTemplate.
        :rtype: bool
        """
        return self._click_tracking_enabled

    @click_tracking_enabled.setter
    def click_tracking_enabled(self, click_tracking_enabled):
        """Sets the click_tracking_enabled of this TeamTemplate.

        Whether click tracking is enabled for this team template

        :param click_tracking_enabled: The click_tracking_enabled of this TeamTemplate.
        :type click_tracking_enabled: bool
        """

        self._click_tracking_enabled = click_tracking_enabled

    @property
    def counts(self):
        """Gets the counts of this TeamTemplate.


        :return: The counts of this TeamTemplate.
        :rtype: TeamTemplateCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this TeamTemplate.


        :param counts: The counts of this TeamTemplate.
        :type counts: TeamTemplateCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this TeamTemplate.

        Datetime of when the team template was created

        :return: The created_at of this TeamTemplate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TeamTemplate.

        Datetime of when the team template was created

        :param created_at: The created_at of this TeamTemplate.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TeamTemplate.

        ID of team template

        :return: The id of this TeamTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamTemplate.

        ID of team template

        :param id: The id of this TeamTemplate.
        :type id: str
        """

        self._id = id

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this TeamTemplate.

        Datetime of when the team template was last modified

        :return: The last_modified_at of this TeamTemplate.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this TeamTemplate.

        Datetime of when the team template was last modified

        :param last_modified_at: The last_modified_at of this TeamTemplate.
        :type last_modified_at: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this TeamTemplate.


        :return: The last_modified_user of this TeamTemplate.
        :rtype: EmbeddedResource
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this TeamTemplate.


        :param last_modified_user: The last_modified_user of this TeamTemplate.
        :type last_modified_user: EmbeddedResource
        """

        self._last_modified_user = last_modified_user

    @property
    def last_used_at(self):
        """Gets the last_used_at of this TeamTemplate.

        Datetime of when the team template was last used

        :return: The last_used_at of this TeamTemplate.
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this TeamTemplate.

        Datetime of when the team template was last used

        :param last_used_at: The last_used_at of this TeamTemplate.
        :type last_used_at: datetime
        """

        self._last_used_at = last_used_at

    @property
    def open_tracking_enabled(self):
        """Gets the open_tracking_enabled of this TeamTemplate.

        Whether open tracking is enabled for this team template

        :return: The open_tracking_enabled of this TeamTemplate.
        :rtype: bool
        """
        return self._open_tracking_enabled

    @open_tracking_enabled.setter
    def open_tracking_enabled(self, open_tracking_enabled):
        """Sets the open_tracking_enabled of this TeamTemplate.

        Whether open tracking is enabled for this team template

        :param open_tracking_enabled: The open_tracking_enabled of this TeamTemplate.
        :type open_tracking_enabled: bool
        """

        self._open_tracking_enabled = open_tracking_enabled

    @property
    def subject(self):
        """Gets the subject of this TeamTemplate.

        Subject of the team template

        :return: The subject of this TeamTemplate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this TeamTemplate.

        Subject of the team template

        :param subject: The subject of this TeamTemplate.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this TeamTemplate.

        All tags applied to this team template

        :return: The tags of this TeamTemplate.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TeamTemplate.

        All tags applied to this team template

        :param tags: The tags of this TeamTemplate.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this TeamTemplate.

        Title of the team template

        :return: The title of this TeamTemplate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TeamTemplate.

        Title of the team template

        :param title: The title of this TeamTemplate.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this TeamTemplate.

        Datetime of when the team template was last updated

        :return: The updated_at of this TeamTemplate.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TeamTemplate.

        Datetime of when the team template was last updated

        :param updated_at: The updated_at of this TeamTemplate.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
