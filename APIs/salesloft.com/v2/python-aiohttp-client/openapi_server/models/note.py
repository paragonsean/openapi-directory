# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Note(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associated_type: str=None, associated_with: EmbeddedResource=None, call: EmbeddedResource=None, content: str=None, created_at: datetime=None, id: int=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """Note - a model defined in OpenAPI

        :param associated_type: The associated_type of this Note.
        :param associated_with: The associated_with of this Note.
        :param call: The call of this Note.
        :param content: The content of this Note.
        :param created_at: The created_at of this Note.
        :param id: The id of this Note.
        :param updated_at: The updated_at of this Note.
        :param user: The user of this Note.
        """
        self.openapi_types = {
            'associated_type': str,
            'associated_with': EmbeddedResource,
            'call': EmbeddedResource,
            'content': str,
            'created_at': datetime,
            'id': int,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'associated_type': 'associated_type',
            'associated_with': 'associated_with',
            'call': 'call',
            'content': 'content',
            'created_at': 'created_at',
            'id': 'id',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._associated_type = associated_type
        self._associated_with = associated_with
        self._call = call
        self._content = content
        self._created_at = created_at
        self._id = id
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Note':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Note of this Note.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associated_type(self):
        """Gets the associated_type of this Note.

        Type of associated resource ('person' or 'account')

        :return: The associated_type of this Note.
        :rtype: str
        """
        return self._associated_type

    @associated_type.setter
    def associated_type(self, associated_type):
        """Sets the associated_type of this Note.

        Type of associated resource ('person' or 'account')

        :param associated_type: The associated_type of this Note.
        :type associated_type: str
        """

        self._associated_type = associated_type

    @property
    def associated_with(self):
        """Gets the associated_with of this Note.


        :return: The associated_with of this Note.
        :rtype: EmbeddedResource
        """
        return self._associated_with

    @associated_with.setter
    def associated_with(self, associated_with):
        """Sets the associated_with of this Note.


        :param associated_with: The associated_with of this Note.
        :type associated_with: EmbeddedResource
        """

        self._associated_with = associated_with

    @property
    def call(self):
        """Gets the call of this Note.


        :return: The call of this Note.
        :rtype: EmbeddedResource
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this Note.


        :param call: The call of this Note.
        :type call: EmbeddedResource
        """

        self._call = call

    @property
    def content(self):
        """Gets the content of this Note.

        The content of the note

        :return: The content of this Note.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Note.

        The content of the note

        :param content: The content of this Note.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self):
        """Gets the created_at of this Note.

        Datetime of when the note was created

        :return: The created_at of this Note.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Note.

        Datetime of when the note was created

        :param created_at: The created_at of this Note.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Note.

        Note ID

        :return: The id of this Note.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Note.

        Note ID

        :param id: The id of this Note.
        :type id: int
        """

        self._id = id

    @property
    def updated_at(self):
        """Gets the updated_at of this Note.

        Datetime of when the note was last updated

        :return: The updated_at of this Note.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Note.

        Datetime of when the note was last updated

        :param updated_at: The updated_at of this Note.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Note.


        :return: The user of this Note.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Note.


        :param user: The user of this Note.
        :type user: EmbeddedResource
        """

        self._user = user
