# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_fields: object=None, allow_automated_email_steps: bool=None, call_recording_disabled: bool=None, click_tracking_default: bool=None, created_at: datetime=None, custom_tracking_domain: str=None, deactivated: bool=None, dispositions_required: bool=None, email_daily_limit: int=None, group_privacy_setting: str=None, id: int=None, license_limit: int=None, local_dial_enabled: bool=None, name: str=None, plan: str=None, plan_features: object=None, record_by_default: bool=None, sentiments_required: bool=None, team_visibility_default: str=None, updated_at: datetime=None):
        """Team - a model defined in OpenAPI

        :param private_fields: The private_fields of this Team.
        :param allow_automated_email_steps: The allow_automated_email_steps of this Team.
        :param call_recording_disabled: The call_recording_disabled of this Team.
        :param click_tracking_default: The click_tracking_default of this Team.
        :param created_at: The created_at of this Team.
        :param custom_tracking_domain: The custom_tracking_domain of this Team.
        :param deactivated: The deactivated of this Team.
        :param dispositions_required: The dispositions_required of this Team.
        :param email_daily_limit: The email_daily_limit of this Team.
        :param group_privacy_setting: The group_privacy_setting of this Team.
        :param id: The id of this Team.
        :param license_limit: The license_limit of this Team.
        :param local_dial_enabled: The local_dial_enabled of this Team.
        :param name: The name of this Team.
        :param plan: The plan of this Team.
        :param plan_features: The plan_features of this Team.
        :param record_by_default: The record_by_default of this Team.
        :param sentiments_required: The sentiments_required of this Team.
        :param team_visibility_default: The team_visibility_default of this Team.
        :param updated_at: The updated_at of this Team.
        """
        self.openapi_types = {
            'private_fields': object,
            'allow_automated_email_steps': bool,
            'call_recording_disabled': bool,
            'click_tracking_default': bool,
            'created_at': datetime,
            'custom_tracking_domain': str,
            'deactivated': bool,
            'dispositions_required': bool,
            'email_daily_limit': int,
            'group_privacy_setting': str,
            'id': int,
            'license_limit': int,
            'local_dial_enabled': bool,
            'name': str,
            'plan': str,
            'plan_features': object,
            'record_by_default': bool,
            'sentiments_required': bool,
            'team_visibility_default': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'private_fields': '_private_fields',
            'allow_automated_email_steps': 'allow_automated_email_steps',
            'call_recording_disabled': 'call_recording_disabled',
            'click_tracking_default': 'click_tracking_default',
            'created_at': 'created_at',
            'custom_tracking_domain': 'custom_tracking_domain',
            'deactivated': 'deactivated',
            'dispositions_required': 'dispositions_required',
            'email_daily_limit': 'email_daily_limit',
            'group_privacy_setting': 'group_privacy_setting',
            'id': 'id',
            'license_limit': 'license_limit',
            'local_dial_enabled': 'local_dial_enabled',
            'name': 'name',
            'plan': 'plan',
            'plan_features': 'plan_features',
            'record_by_default': 'record_by_default',
            'sentiments_required': 'sentiments_required',
            'team_visibility_default': 'team_visibility_default',
            'updated_at': 'updated_at'
        }

        self._private_fields = private_fields
        self._allow_automated_email_steps = allow_automated_email_steps
        self._call_recording_disabled = call_recording_disabled
        self._click_tracking_default = click_tracking_default
        self._created_at = created_at
        self._custom_tracking_domain = custom_tracking_domain
        self._deactivated = deactivated
        self._dispositions_required = dispositions_required
        self._email_daily_limit = email_daily_limit
        self._group_privacy_setting = group_privacy_setting
        self._id = id
        self._license_limit = license_limit
        self._local_dial_enabled = local_dial_enabled
        self._name = name
        self._plan = plan
        self._plan_features = plan_features
        self._record_by_default = record_by_default
        self._sentiments_required = sentiments_required
        self._team_visibility_default = team_visibility_default
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Team of this Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_fields(self):
        """Gets the private_fields of this Team.

        For internal use only. This field does not comply with our backwards compatability policies.

        :return: The private_fields of this Team.
        :rtype: object
        """
        return self._private_fields

    @private_fields.setter
    def private_fields(self, private_fields):
        """Sets the private_fields of this Team.

        For internal use only. This field does not comply with our backwards compatability policies.

        :param private_fields: The private_fields of this Team.
        :type private_fields: object
        """

        self._private_fields = private_fields

    @property
    def allow_automated_email_steps(self):
        """Gets the allow_automated_email_steps of this Team.

        Whether team members are allowed to have automated email steps

        :return: The allow_automated_email_steps of this Team.
        :rtype: bool
        """
        return self._allow_automated_email_steps

    @allow_automated_email_steps.setter
    def allow_automated_email_steps(self, allow_automated_email_steps):
        """Sets the allow_automated_email_steps of this Team.

        Whether team members are allowed to have automated email steps

        :param allow_automated_email_steps: The allow_automated_email_steps of this Team.
        :type allow_automated_email_steps: bool
        """

        self._allow_automated_email_steps = allow_automated_email_steps

    @property
    def call_recording_disabled(self):
        """Gets the call_recording_disabled of this Team.

        Whether all call recording is disabled

        :return: The call_recording_disabled of this Team.
        :rtype: bool
        """
        return self._call_recording_disabled

    @call_recording_disabled.setter
    def call_recording_disabled(self, call_recording_disabled):
        """Sets the call_recording_disabled of this Team.

        Whether all call recording is disabled

        :param call_recording_disabled: The call_recording_disabled of this Team.
        :type call_recording_disabled: bool
        """

        self._call_recording_disabled = call_recording_disabled

    @property
    def click_tracking_default(self):
        """Gets the click_tracking_default of this Team.

        The team default for click tracking when composing emails

        :return: The click_tracking_default of this Team.
        :rtype: bool
        """
        return self._click_tracking_default

    @click_tracking_default.setter
    def click_tracking_default(self, click_tracking_default):
        """Sets the click_tracking_default of this Team.

        The team default for click tracking when composing emails

        :param click_tracking_default: The click_tracking_default of this Team.
        :type click_tracking_default: bool
        """

        self._click_tracking_default = click_tracking_default

    @property
    def created_at(self):
        """Gets the created_at of this Team.

        Datetime of when the team was created

        :return: The created_at of this Team.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Team.

        Datetime of when the team was created

        :param created_at: The created_at of this Team.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def custom_tracking_domain(self):
        """Gets the custom_tracking_domain of this Team.

        The domain click and open tracking will be proxied through

        :return: The custom_tracking_domain of this Team.
        :rtype: str
        """
        return self._custom_tracking_domain

    @custom_tracking_domain.setter
    def custom_tracking_domain(self, custom_tracking_domain):
        """Sets the custom_tracking_domain of this Team.

        The domain click and open tracking will be proxied through

        :param custom_tracking_domain: The custom_tracking_domain of this Team.
        :type custom_tracking_domain: str
        """

        self._custom_tracking_domain = custom_tracking_domain

    @property
    def deactivated(self):
        """Gets the deactivated of this Team.

        Indicates if the team has been deactivated

        :return: The deactivated of this Team.
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this Team.

        Indicates if the team has been deactivated

        :param deactivated: The deactivated of this Team.
        :type deactivated: bool
        """

        self._deactivated = deactivated

    @property
    def dispositions_required(self):
        """Gets the dispositions_required of this Team.

        Whether team members are required to mark disposition at the end of calls

        :return: The dispositions_required of this Team.
        :rtype: bool
        """
        return self._dispositions_required

    @dispositions_required.setter
    def dispositions_required(self, dispositions_required):
        """Sets the dispositions_required of this Team.

        Whether team members are required to mark disposition at the end of calls

        :param dispositions_required: The dispositions_required of this Team.
        :type dispositions_required: bool
        """

        self._dispositions_required = dispositions_required

    @property
    def email_daily_limit(self):
        """Gets the email_daily_limit of this Team.

        Daily email limit for each member on the team

        :return: The email_daily_limit of this Team.
        :rtype: int
        """
        return self._email_daily_limit

    @email_daily_limit.setter
    def email_daily_limit(self, email_daily_limit):
        """Sets the email_daily_limit of this Team.

        Daily email limit for each member on the team

        :param email_daily_limit: The email_daily_limit of this Team.
        :type email_daily_limit: int
        """

        self._email_daily_limit = email_daily_limit

    @property
    def group_privacy_setting(self):
        """Gets the group_privacy_setting of this Team.

        Visibility setting for resources across the team. Possible values are: group_public, all_public. When the value is group_public, certain resources will only be visible to members of the same group. When the value is all_public, all resources are visible to all users on this team. 

        :return: The group_privacy_setting of this Team.
        :rtype: str
        """
        return self._group_privacy_setting

    @group_privacy_setting.setter
    def group_privacy_setting(self, group_privacy_setting):
        """Sets the group_privacy_setting of this Team.

        Visibility setting for resources across the team. Possible values are: group_public, all_public. When the value is group_public, certain resources will only be visible to members of the same group. When the value is all_public, all resources are visible to all users on this team. 

        :param group_privacy_setting: The group_privacy_setting of this Team.
        :type group_privacy_setting: str
        """

        self._group_privacy_setting = group_privacy_setting

    @property
    def id(self):
        """Gets the id of this Team.

        Team ID

        :return: The id of this Team.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.

        Team ID

        :param id: The id of this Team.
        :type id: int
        """

        self._id = id

    @property
    def license_limit(self):
        """Gets the license_limit of this Team.

        Count of seats that this team has licensed

        :return: The license_limit of this Team.
        :rtype: int
        """
        return self._license_limit

    @license_limit.setter
    def license_limit(self, license_limit):
        """Sets the license_limit of this Team.

        Count of seats that this team has licensed

        :param license_limit: The license_limit of this Team.
        :type license_limit: int
        """

        self._license_limit = license_limit

    @property
    def local_dial_enabled(self):
        """Gets the local_dial_enabled of this Team.

        Whether this team has local dial enabled

        :return: The local_dial_enabled of this Team.
        :rtype: bool
        """
        return self._local_dial_enabled

    @local_dial_enabled.setter
    def local_dial_enabled(self, local_dial_enabled):
        """Sets the local_dial_enabled of this Team.

        Whether this team has local dial enabled

        :param local_dial_enabled: The local_dial_enabled of this Team.
        :type local_dial_enabled: bool
        """

        self._local_dial_enabled = local_dial_enabled

    @property
    def name(self):
        """Gets the name of this Team.

        Team name

        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        Team name

        :param name: The name of this Team.
        :type name: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this Team.

        Plan type of the team, Possible values are: group, professional, enterprise

        :return: The plan of this Team.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Team.

        Plan type of the team, Possible values are: group, professional, enterprise

        :param plan: The plan of this Team.
        :type plan: str
        """

        self._plan = plan

    @property
    def plan_features(self):
        """Gets the plan_features of this Team.

        Add on features for this team

        :return: The plan_features of this Team.
        :rtype: object
        """
        return self._plan_features

    @plan_features.setter
    def plan_features(self, plan_features):
        """Sets the plan_features of this Team.

        Add on features for this team

        :param plan_features: The plan_features of this Team.
        :type plan_features: object
        """

        self._plan_features = plan_features

    @property
    def record_by_default(self):
        """Gets the record_by_default of this Team.

        Whether calls will record by default

        :return: The record_by_default of this Team.
        :rtype: bool
        """
        return self._record_by_default

    @record_by_default.setter
    def record_by_default(self, record_by_default):
        """Sets the record_by_default of this Team.

        Whether calls will record by default

        :param record_by_default: The record_by_default of this Team.
        :type record_by_default: bool
        """

        self._record_by_default = record_by_default

    @property
    def sentiments_required(self):
        """Gets the sentiments_required of this Team.

        Whether team members are required to log sentiments

        :return: The sentiments_required of this Team.
        :rtype: bool
        """
        return self._sentiments_required

    @sentiments_required.setter
    def sentiments_required(self, sentiments_required):
        """Sets the sentiments_required of this Team.

        Whether team members are required to log sentiments

        :param sentiments_required: The sentiments_required of this Team.
        :type sentiments_required: bool
        """

        self._sentiments_required = sentiments_required

    @property
    def team_visibility_default(self):
        """Gets the team_visibility_default of this Team.

        The default visibility of resources on the team, in the UI only. The API does not utilize this default. Possible values are: public, private. 

        :return: The team_visibility_default of this Team.
        :rtype: str
        """
        return self._team_visibility_default

    @team_visibility_default.setter
    def team_visibility_default(self, team_visibility_default):
        """Sets the team_visibility_default of this Team.

        The default visibility of resources on the team, in the UI only. The API does not utilize this default. Possible values are: public, private. 

        :param team_visibility_default: The team_visibility_default of this Team.
        :type team_visibility_default: str
        """

        self._team_visibility_default = team_visibility_default

    @property
    def updated_at(self):
        """Gets the updated_at of this Team.

        Datetime of when the team was last updated

        :return: The updated_at of this Team.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Team.

        Datetime of when the team was last updated

        :param updated_at: The updated_at of this Team.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
