# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_recording_resource import EmbeddedRecordingResource
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class CallDataRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call: EmbeddedResource=None, call_type: str=None, call_uuid: str=None, called_person: EmbeddedResource=None, created_at: datetime=None, direction: str=None, duration: int=None, _from: str=None, id: int=None, recording: EmbeddedRecordingResource=None, status: str=None, to: str=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """CallDataRecord - a model defined in OpenAPI

        :param call: The call of this CallDataRecord.
        :param call_type: The call_type of this CallDataRecord.
        :param call_uuid: The call_uuid of this CallDataRecord.
        :param called_person: The called_person of this CallDataRecord.
        :param created_at: The created_at of this CallDataRecord.
        :param direction: The direction of this CallDataRecord.
        :param duration: The duration of this CallDataRecord.
        :param _from: The _from of this CallDataRecord.
        :param id: The id of this CallDataRecord.
        :param recording: The recording of this CallDataRecord.
        :param status: The status of this CallDataRecord.
        :param to: The to of this CallDataRecord.
        :param updated_at: The updated_at of this CallDataRecord.
        :param user: The user of this CallDataRecord.
        """
        self.openapi_types = {
            'call': EmbeddedResource,
            'call_type': str,
            'call_uuid': str,
            'called_person': EmbeddedResource,
            'created_at': datetime,
            'direction': str,
            'duration': int,
            '_from': str,
            'id': int,
            'recording': EmbeddedRecordingResource,
            'status': str,
            'to': str,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'call': 'call',
            'call_type': 'call_type',
            'call_uuid': 'call_uuid',
            'called_person': 'called_person',
            'created_at': 'created_at',
            'direction': 'direction',
            'duration': 'duration',
            '_from': 'from',
            'id': 'id',
            'recording': 'recording',
            'status': 'status',
            'to': 'to',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._call = call
        self._call_type = call_type
        self._call_uuid = call_uuid
        self._called_person = called_person
        self._created_at = created_at
        self._direction = direction
        self._duration = duration
        self.__from = _from
        self._id = id
        self._recording = recording
        self._status = status
        self._to = to
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallDataRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallDataRecord of this CallDataRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call(self):
        """Gets the call of this CallDataRecord.


        :return: The call of this CallDataRecord.
        :rtype: EmbeddedResource
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this CallDataRecord.


        :param call: The call of this CallDataRecord.
        :type call: EmbeddedResource
        """

        self._call = call

    @property
    def call_type(self):
        """Gets the call_type of this CallDataRecord.

        Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time

        :return: The call_type of this CallDataRecord.
        :rtype: str
        """
        return self._call_type

    @call_type.setter
    def call_type(self, call_type):
        """Sets the call_type of this CallDataRecord.

        Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time

        :param call_type: The call_type of this CallDataRecord.
        :type call_type: str
        """

        self._call_type = call_type

    @property
    def call_uuid(self):
        """Gets the call_uuid of this CallDataRecord.

        UUID of the call. Legs of the same call will have the same call_uuid.

        :return: The call_uuid of this CallDataRecord.
        :rtype: str
        """
        return self._call_uuid

    @call_uuid.setter
    def call_uuid(self, call_uuid):
        """Sets the call_uuid of this CallDataRecord.

        UUID of the call. Legs of the same call will have the same call_uuid.

        :param call_uuid: The call_uuid of this CallDataRecord.
        :type call_uuid: str
        """

        self._call_uuid = call_uuid

    @property
    def called_person(self):
        """Gets the called_person of this CallDataRecord.


        :return: The called_person of this CallDataRecord.
        :rtype: EmbeddedResource
        """
        return self._called_person

    @called_person.setter
    def called_person(self, called_person):
        """Sets the called_person of this CallDataRecord.


        :param called_person: The called_person of this CallDataRecord.
        :type called_person: EmbeddedResource
        """

        self._called_person = called_person

    @property
    def created_at(self):
        """Gets the created_at of this CallDataRecord.

        Datetime of when the call was created

        :return: The created_at of this CallDataRecord.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CallDataRecord.

        Datetime of when the call was created

        :param created_at: The created_at of this CallDataRecord.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def direction(self):
        """Gets the direction of this CallDataRecord.

        Direction of the call. Can be one of: inbound, outbound

        :return: The direction of this CallDataRecord.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this CallDataRecord.

        Direction of the call. Can be one of: inbound, outbound

        :param direction: The direction of this CallDataRecord.
        :type direction: str
        """

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this CallDataRecord.

        Length of the call in seconds

        :return: The duration of this CallDataRecord.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CallDataRecord.

        Length of the call in seconds

        :param duration: The duration of this CallDataRecord.
        :type duration: int
        """

        self._duration = duration

    @property
    def _from(self):
        """Gets the _from of this CallDataRecord.

        Phone number that placed the call

        :return: The _from of this CallDataRecord.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CallDataRecord.

        Phone number that placed the call

        :param _from: The _from of this CallDataRecord.
        :type _from: str
        """

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this CallDataRecord.

        ID of CallDataRecord

        :return: The id of this CallDataRecord.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CallDataRecord.

        ID of CallDataRecord

        :param id: The id of this CallDataRecord.
        :type id: int
        """

        self._id = id

    @property
    def recording(self):
        """Gets the recording of this CallDataRecord.


        :return: The recording of this CallDataRecord.
        :rtype: EmbeddedRecordingResource
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this CallDataRecord.


        :param recording: The recording of this CallDataRecord.
        :type recording: EmbeddedRecordingResource
        """

        self._recording = recording

    @property
    def status(self):
        """Gets the status of this CallDataRecord.

        The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed

        :return: The status of this CallDataRecord.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CallDataRecord.

        The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed

        :param status: The status of this CallDataRecord.
        :type status: str
        """

        self._status = status

    @property
    def to(self):
        """Gets the to of this CallDataRecord.

        Phone number that received the call

        :return: The to of this CallDataRecord.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CallDataRecord.

        Phone number that received the call

        :param to: The to of this CallDataRecord.
        :type to: str
        """

        self._to = to

    @property
    def updated_at(self):
        """Gets the updated_at of this CallDataRecord.

        Datetime of when the call was last updated

        :return: The updated_at of this CallDataRecord.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CallDataRecord.

        Datetime of when the call was last updated

        :param updated_at: The updated_at of this CallDataRecord.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this CallDataRecord.


        :return: The user of this CallDataRecord.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CallDataRecord.


        :param user: The user of this CallDataRecord.
        :type user: EmbeddedResource
        """

        self._user = user
