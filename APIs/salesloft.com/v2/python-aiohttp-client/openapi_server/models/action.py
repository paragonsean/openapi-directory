# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_details: EmbeddedResource=None, cadence: EmbeddedResource=None, created_at: datetime=None, due: bool=None, due_on: datetime=None, id: int=None, multitouch_group_id: int=None, person: EmbeddedResource=None, status: str=None, step: EmbeddedResource=None, type: str=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """Action - a model defined in OpenAPI

        :param action_details: The action_details of this Action.
        :param cadence: The cadence of this Action.
        :param created_at: The created_at of this Action.
        :param due: The due of this Action.
        :param due_on: The due_on of this Action.
        :param id: The id of this Action.
        :param multitouch_group_id: The multitouch_group_id of this Action.
        :param person: The person of this Action.
        :param status: The status of this Action.
        :param step: The step of this Action.
        :param type: The type of this Action.
        :param updated_at: The updated_at of this Action.
        :param user: The user of this Action.
        """
        self.openapi_types = {
            'action_details': EmbeddedResource,
            'cadence': EmbeddedResource,
            'created_at': datetime,
            'due': bool,
            'due_on': datetime,
            'id': int,
            'multitouch_group_id': int,
            'person': EmbeddedResource,
            'status': str,
            'step': EmbeddedResource,
            'type': str,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'action_details': 'action_details',
            'cadence': 'cadence',
            'created_at': 'created_at',
            'due': 'due',
            'due_on': 'due_on',
            'id': 'id',
            'multitouch_group_id': 'multitouch_group_id',
            'person': 'person',
            'status': 'status',
            'step': 'step',
            'type': 'type',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._action_details = action_details
        self._cadence = cadence
        self._created_at = created_at
        self._due = due
        self._due_on = due_on
        self._id = id
        self._multitouch_group_id = multitouch_group_id
        self._person = person
        self._status = status
        self._step = step
        self._type = type
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_details(self):
        """Gets the action_details of this Action.


        :return: The action_details of this Action.
        :rtype: EmbeddedResource
        """
        return self._action_details

    @action_details.setter
    def action_details(self, action_details):
        """Sets the action_details of this Action.


        :param action_details: The action_details of this Action.
        :type action_details: EmbeddedResource
        """

        self._action_details = action_details

    @property
    def cadence(self):
        """Gets the cadence of this Action.


        :return: The cadence of this Action.
        :rtype: EmbeddedResource
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this Action.


        :param cadence: The cadence of this Action.
        :type cadence: EmbeddedResource
        """

        self._cadence = cadence

    @property
    def created_at(self):
        """Gets the created_at of this Action.

        Datetime of when the Action was created

        :return: The created_at of this Action.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Action.

        Datetime of when the Action was created

        :param created_at: The created_at of this Action.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def due(self):
        """Gets the due of this Action.

        Whether this step is due

        :return: The due of this Action.
        :rtype: bool
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Action.

        Whether this step is due

        :param due: The due of this Action.
        :type due: bool
        """

        self._due = due

    @property
    def due_on(self):
        """Gets the due_on of this Action.

        When action is due

        :return: The due_on of this Action.
        :rtype: datetime
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on):
        """Sets the due_on of this Action.

        When action is due

        :param due_on: The due_on of this Action.
        :type due_on: datetime
        """

        self._due_on = due_on

    @property
    def id(self):
        """Gets the id of this Action.

        ID of Action

        :return: The id of this Action.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Action.

        ID of Action

        :param id: The id of this Action.
        :type id: int
        """

        self._id = id

    @property
    def multitouch_group_id(self):
        """Gets the multitouch_group_id of this Action.

        ID of the multitouch group

        :return: The multitouch_group_id of this Action.
        :rtype: int
        """
        return self._multitouch_group_id

    @multitouch_group_id.setter
    def multitouch_group_id(self, multitouch_group_id):
        """Sets the multitouch_group_id of this Action.

        ID of the multitouch group

        :param multitouch_group_id: The multitouch_group_id of this Action.
        :type multitouch_group_id: int
        """

        self._multitouch_group_id = multitouch_group_id

    @property
    def person(self):
        """Gets the person of this Action.


        :return: The person of this Action.
        :rtype: EmbeddedResource
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this Action.


        :param person: The person of this Action.
        :type person: EmbeddedResource
        """

        self._person = person

    @property
    def status(self):
        """Gets the status of this Action.

        The current state of the person on the cadence. Possible values are:  in_progress: this action has not been completed  pending_activity: this action has been acted upon, but the action has not been completed. (i.e. the email is scheduled to send, but has not been delivered yet) 

        :return: The status of this Action.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Action.

        The current state of the person on the cadence. Possible values are:  in_progress: this action has not been completed  pending_activity: this action has been acted upon, but the action has not been completed. (i.e. the email is scheduled to send, but has not been delivered yet) 

        :param status: The status of this Action.
        :type status: str
        """

        self._status = status

    @property
    def step(self):
        """Gets the step of this Action.


        :return: The step of this Action.
        :rtype: EmbeddedResource
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this Action.


        :param step: The step of this Action.
        :type step: EmbeddedResource
        """

        self._step = step

    @property
    def type(self):
        """Gets the type of this Action.

        The type of this action. Valid types are: email, phone, other. New types may be added in the future. 

        :return: The type of this Action.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Action.

        The type of this action. Valid types are: email, phone, other. New types may be added in the future. 

        :param type: The type of this Action.
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Action.

        Datetime of when the Action was last updated

        :return: The updated_at of this Action.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Action.

        Datetime of when the Action was last updated

        :param updated_at: The updated_at of this Action.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Action.


        :return: The user of this Action.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Action.


        :param user: The user of this Action.
        :type user: EmbeddedResource
        """

        self._user = user
