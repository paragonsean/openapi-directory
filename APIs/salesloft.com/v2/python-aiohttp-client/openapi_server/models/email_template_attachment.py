# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class EmailTemplateAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_content_type: str=None, attachment_file_size: int=None, attachment_fingerprint: int=None, attachment_id: int=None, download_url: str=None, email_template: EmbeddedResource=None, id: int=None, name: str=None, scanned: bool=None):
        """EmailTemplateAttachment - a model defined in OpenAPI

        :param attachment_content_type: The attachment_content_type of this EmailTemplateAttachment.
        :param attachment_file_size: The attachment_file_size of this EmailTemplateAttachment.
        :param attachment_fingerprint: The attachment_fingerprint of this EmailTemplateAttachment.
        :param attachment_id: The attachment_id of this EmailTemplateAttachment.
        :param download_url: The download_url of this EmailTemplateAttachment.
        :param email_template: The email_template of this EmailTemplateAttachment.
        :param id: The id of this EmailTemplateAttachment.
        :param name: The name of this EmailTemplateAttachment.
        :param scanned: The scanned of this EmailTemplateAttachment.
        """
        self.openapi_types = {
            'attachment_content_type': str,
            'attachment_file_size': int,
            'attachment_fingerprint': int,
            'attachment_id': int,
            'download_url': str,
            'email_template': EmbeddedResource,
            'id': int,
            'name': str,
            'scanned': bool
        }

        self.attribute_map = {
            'attachment_content_type': 'attachment_content_type',
            'attachment_file_size': 'attachment_file_size',
            'attachment_fingerprint': 'attachment_fingerprint',
            'attachment_id': 'attachment_id',
            'download_url': 'download_url',
            'email_template': 'email_template',
            'id': 'id',
            'name': 'name',
            'scanned': 'scanned'
        }

        self._attachment_content_type = attachment_content_type
        self._attachment_file_size = attachment_file_size
        self._attachment_fingerprint = attachment_fingerprint
        self._attachment_id = attachment_id
        self._download_url = download_url
        self._email_template = email_template
        self._id = id
        self._name = name
        self._scanned = scanned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailTemplateAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailTemplateAttachment of this EmailTemplateAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_content_type(self):
        """Gets the attachment_content_type of this EmailTemplateAttachment.

        Content type of the attachment

        :return: The attachment_content_type of this EmailTemplateAttachment.
        :rtype: str
        """
        return self._attachment_content_type

    @attachment_content_type.setter
    def attachment_content_type(self, attachment_content_type):
        """Sets the attachment_content_type of this EmailTemplateAttachment.

        Content type of the attachment

        :param attachment_content_type: The attachment_content_type of this EmailTemplateAttachment.
        :type attachment_content_type: str
        """

        self._attachment_content_type = attachment_content_type

    @property
    def attachment_file_size(self):
        """Gets the attachment_file_size of this EmailTemplateAttachment.

        The size of the attachment

        :return: The attachment_file_size of this EmailTemplateAttachment.
        :rtype: int
        """
        return self._attachment_file_size

    @attachment_file_size.setter
    def attachment_file_size(self, attachment_file_size):
        """Sets the attachment_file_size of this EmailTemplateAttachment.

        The size of the attachment

        :param attachment_file_size: The attachment_file_size of this EmailTemplateAttachment.
        :type attachment_file_size: int
        """

        self._attachment_file_size = attachment_file_size

    @property
    def attachment_fingerprint(self):
        """Gets the attachment_fingerprint of this EmailTemplateAttachment.

        Unique attachment Identifier

        :return: The attachment_fingerprint of this EmailTemplateAttachment.
        :rtype: int
        """
        return self._attachment_fingerprint

    @attachment_fingerprint.setter
    def attachment_fingerprint(self, attachment_fingerprint):
        """Sets the attachment_fingerprint of this EmailTemplateAttachment.

        Unique attachment Identifier

        :param attachment_fingerprint: The attachment_fingerprint of this EmailTemplateAttachment.
        :type attachment_fingerprint: int
        """

        self._attachment_fingerprint = attachment_fingerprint

    @property
    def attachment_id(self):
        """Gets the attachment_id of this EmailTemplateAttachment.

        ID of the email template attachment

        :return: The attachment_id of this EmailTemplateAttachment.
        :rtype: int
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this EmailTemplateAttachment.

        ID of the email template attachment

        :param attachment_id: The attachment_id of this EmailTemplateAttachment.
        :type attachment_id: int
        """

        self._attachment_id = attachment_id

    @property
    def download_url(self):
        """Gets the download_url of this EmailTemplateAttachment.

        Download url of the attachment

        :return: The download_url of this EmailTemplateAttachment.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this EmailTemplateAttachment.

        Download url of the attachment

        :param download_url: The download_url of this EmailTemplateAttachment.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def email_template(self):
        """Gets the email_template of this EmailTemplateAttachment.


        :return: The email_template of this EmailTemplateAttachment.
        :rtype: EmbeddedResource
        """
        return self._email_template

    @email_template.setter
    def email_template(self, email_template):
        """Sets the email_template of this EmailTemplateAttachment.


        :param email_template: The email_template of this EmailTemplateAttachment.
        :type email_template: EmbeddedResource
        """

        self._email_template = email_template

    @property
    def id(self):
        """Gets the id of this EmailTemplateAttachment.

        ID of email template attachment association

        :return: The id of this EmailTemplateAttachment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailTemplateAttachment.

        ID of email template attachment association

        :param id: The id of this EmailTemplateAttachment.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EmailTemplateAttachment.

        Name of the attachment

        :return: The name of this EmailTemplateAttachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmailTemplateAttachment.

        Name of the attachment

        :param name: The name of this EmailTemplateAttachment.
        :type name: str
        """

        self._name = name

    @property
    def scanned(self):
        """Gets the scanned of this EmailTemplateAttachment.

        Checks if attachment has been scanned

        :return: The scanned of this EmailTemplateAttachment.
        :rtype: bool
        """
        return self._scanned

    @scanned.setter
    def scanned(self, scanned):
        """Sets the scanned of this EmailTemplateAttachment.

        Checks if attachment has been scanned

        :param scanned: The scanned of this EmailTemplateAttachment.
        :type scanned: bool
        """

        self._scanned = scanned
