# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CadenceMembershipCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounces: int=None, calls: int=None, clicks: int=None, replies: int=None, sent_emails: int=None, views: int=None):
        """CadenceMembershipCounts - a model defined in OpenAPI

        :param bounces: The bounces of this CadenceMembershipCounts.
        :param calls: The calls of this CadenceMembershipCounts.
        :param clicks: The clicks of this CadenceMembershipCounts.
        :param replies: The replies of this CadenceMembershipCounts.
        :param sent_emails: The sent_emails of this CadenceMembershipCounts.
        :param views: The views of this CadenceMembershipCounts.
        """
        self.openapi_types = {
            'bounces': int,
            'calls': int,
            'clicks': int,
            'replies': int,
            'sent_emails': int,
            'views': int
        }

        self.attribute_map = {
            'bounces': 'bounces',
            'calls': 'calls',
            'clicks': 'clicks',
            'replies': 'replies',
            'sent_emails': 'sent_emails',
            'views': 'views'
        }

        self._bounces = bounces
        self._calls = calls
        self._clicks = clicks
        self._replies = replies
        self._sent_emails = sent_emails
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CadenceMembershipCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CadenceMembershipCounts of this CadenceMembershipCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounces(self):
        """Gets the bounces of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person bounced

        :return: The bounces of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person bounced

        :param bounces: The bounces of this CadenceMembershipCounts.
        :type bounces: int
        """

        self._bounces = bounces

    @property
    def calls(self):
        """Gets the calls of this CadenceMembershipCounts.

        The number of times a call was logged from the cadence to the person

        :return: The calls of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this CadenceMembershipCounts.

        The number of times a call was logged from the cadence to the person

        :param calls: The calls of this CadenceMembershipCounts.
        :type calls: int
        """

        self._calls = calls

    @property
    def clicks(self):
        """Gets the clicks of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were clicked

        :return: The clicks of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were clicked

        :param clicks: The clicks of this CadenceMembershipCounts.
        :type clicks: int
        """

        self._clicks = clicks

    @property
    def replies(self):
        """Gets the replies of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were replied to

        :return: The replies of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were replied to

        :param replies: The replies of this CadenceMembershipCounts.
        :type replies: int
        """

        self._replies = replies

    @property
    def sent_emails(self):
        """Gets the sent_emails of this CadenceMembershipCounts.

        The number of times emails were sent from the cadence to the person

        :return: The sent_emails of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._sent_emails

    @sent_emails.setter
    def sent_emails(self, sent_emails):
        """Sets the sent_emails of this CadenceMembershipCounts.

        The number of times emails were sent from the cadence to the person

        :param sent_emails: The sent_emails of this CadenceMembershipCounts.
        :type sent_emails: int
        """

        self._sent_emails = sent_emails

    @property
    def views(self):
        """Gets the views of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were opened

        :return: The views of this CadenceMembershipCounts.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this CadenceMembershipCounts.

        The number of times emails sent from the cadence to the person were opened

        :param views: The views of this CadenceMembershipCounts.
        :type views: int
        """

        self._views = views
