# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server.models.meeting_url import MeetingUrl
from openapi_server import util


class MeetingSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_meeting_url: MeetingUrl=None, allow_booking_on_behalf: bool=None, allow_booking_overtime: bool=None, allow_event_overlap: bool=None, availability_limit: int=None, availability_limit_enabled: bool=None, buffer_time_duration: int=None, calendar_type: str=None, created_at: date=None, default_meeting_length: int=None, description: str=None, email_address: str=None, enable_calendar_sync: bool=None, enable_dynamic_location: bool=None, id: int=None, location: str=None, primary_calendar_connection_failed: bool=None, primary_calendar_id: str=None, primary_calendar_name: str=None, reschedule_meetings_enabled: bool=None, schedule_buffer_enabled: bool=None, schedule_delay: int=None, share_event_detail: bool=None, time_zone: str=None, times_available: object=None, title: str=None, updated_at: date=None, user: EmbeddedResource=None, user_details: object=None, user_slug: str=None):
        """MeetingSetting - a model defined in OpenAPI

        :param active_meeting_url: The active_meeting_url of this MeetingSetting.
        :param allow_booking_on_behalf: The allow_booking_on_behalf of this MeetingSetting.
        :param allow_booking_overtime: The allow_booking_overtime of this MeetingSetting.
        :param allow_event_overlap: The allow_event_overlap of this MeetingSetting.
        :param availability_limit: The availability_limit of this MeetingSetting.
        :param availability_limit_enabled: The availability_limit_enabled of this MeetingSetting.
        :param buffer_time_duration: The buffer_time_duration of this MeetingSetting.
        :param calendar_type: The calendar_type of this MeetingSetting.
        :param created_at: The created_at of this MeetingSetting.
        :param default_meeting_length: The default_meeting_length of this MeetingSetting.
        :param description: The description of this MeetingSetting.
        :param email_address: The email_address of this MeetingSetting.
        :param enable_calendar_sync: The enable_calendar_sync of this MeetingSetting.
        :param enable_dynamic_location: The enable_dynamic_location of this MeetingSetting.
        :param id: The id of this MeetingSetting.
        :param location: The location of this MeetingSetting.
        :param primary_calendar_connection_failed: The primary_calendar_connection_failed of this MeetingSetting.
        :param primary_calendar_id: The primary_calendar_id of this MeetingSetting.
        :param primary_calendar_name: The primary_calendar_name of this MeetingSetting.
        :param reschedule_meetings_enabled: The reschedule_meetings_enabled of this MeetingSetting.
        :param schedule_buffer_enabled: The schedule_buffer_enabled of this MeetingSetting.
        :param schedule_delay: The schedule_delay of this MeetingSetting.
        :param share_event_detail: The share_event_detail of this MeetingSetting.
        :param time_zone: The time_zone of this MeetingSetting.
        :param times_available: The times_available of this MeetingSetting.
        :param title: The title of this MeetingSetting.
        :param updated_at: The updated_at of this MeetingSetting.
        :param user: The user of this MeetingSetting.
        :param user_details: The user_details of this MeetingSetting.
        :param user_slug: The user_slug of this MeetingSetting.
        """
        self.openapi_types = {
            'active_meeting_url': MeetingUrl,
            'allow_booking_on_behalf': bool,
            'allow_booking_overtime': bool,
            'allow_event_overlap': bool,
            'availability_limit': int,
            'availability_limit_enabled': bool,
            'buffer_time_duration': int,
            'calendar_type': str,
            'created_at': date,
            'default_meeting_length': int,
            'description': str,
            'email_address': str,
            'enable_calendar_sync': bool,
            'enable_dynamic_location': bool,
            'id': int,
            'location': str,
            'primary_calendar_connection_failed': bool,
            'primary_calendar_id': str,
            'primary_calendar_name': str,
            'reschedule_meetings_enabled': bool,
            'schedule_buffer_enabled': bool,
            'schedule_delay': int,
            'share_event_detail': bool,
            'time_zone': str,
            'times_available': object,
            'title': str,
            'updated_at': date,
            'user': EmbeddedResource,
            'user_details': object,
            'user_slug': str
        }

        self.attribute_map = {
            'active_meeting_url': 'active_meeting_url',
            'allow_booking_on_behalf': 'allow_booking_on_behalf',
            'allow_booking_overtime': 'allow_booking_overtime',
            'allow_event_overlap': 'allow_event_overlap',
            'availability_limit': 'availability_limit',
            'availability_limit_enabled': 'availability_limit_enabled',
            'buffer_time_duration': 'buffer_time_duration',
            'calendar_type': 'calendar_type',
            'created_at': 'created_at',
            'default_meeting_length': 'default_meeting_length',
            'description': 'description',
            'email_address': 'email_address',
            'enable_calendar_sync': 'enable_calendar_sync',
            'enable_dynamic_location': 'enable_dynamic_location',
            'id': 'id',
            'location': 'location',
            'primary_calendar_connection_failed': 'primary_calendar_connection_failed',
            'primary_calendar_id': 'primary_calendar_id',
            'primary_calendar_name': 'primary_calendar_name',
            'reschedule_meetings_enabled': 'reschedule_meetings_enabled',
            'schedule_buffer_enabled': 'schedule_buffer_enabled',
            'schedule_delay': 'schedule_delay',
            'share_event_detail': 'share_event_detail',
            'time_zone': 'time_zone',
            'times_available': 'times_available',
            'title': 'title',
            'updated_at': 'updated_at',
            'user': 'user',
            'user_details': 'user_details',
            'user_slug': 'user_slug'
        }

        self._active_meeting_url = active_meeting_url
        self._allow_booking_on_behalf = allow_booking_on_behalf
        self._allow_booking_overtime = allow_booking_overtime
        self._allow_event_overlap = allow_event_overlap
        self._availability_limit = availability_limit
        self._availability_limit_enabled = availability_limit_enabled
        self._buffer_time_duration = buffer_time_duration
        self._calendar_type = calendar_type
        self._created_at = created_at
        self._default_meeting_length = default_meeting_length
        self._description = description
        self._email_address = email_address
        self._enable_calendar_sync = enable_calendar_sync
        self._enable_dynamic_location = enable_dynamic_location
        self._id = id
        self._location = location
        self._primary_calendar_connection_failed = primary_calendar_connection_failed
        self._primary_calendar_id = primary_calendar_id
        self._primary_calendar_name = primary_calendar_name
        self._reschedule_meetings_enabled = reschedule_meetings_enabled
        self._schedule_buffer_enabled = schedule_buffer_enabled
        self._schedule_delay = schedule_delay
        self._share_event_detail = share_event_detail
        self._time_zone = time_zone
        self._times_available = times_available
        self._title = title
        self._updated_at = updated_at
        self._user = user
        self._user_details = user_details
        self._user_slug = user_slug

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeetingSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeetingSetting of this MeetingSetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_meeting_url(self):
        """Gets the active_meeting_url of this MeetingSetting.


        :return: The active_meeting_url of this MeetingSetting.
        :rtype: MeetingUrl
        """
        return self._active_meeting_url

    @active_meeting_url.setter
    def active_meeting_url(self, active_meeting_url):
        """Sets the active_meeting_url of this MeetingSetting.


        :param active_meeting_url: The active_meeting_url of this MeetingSetting.
        :type active_meeting_url: MeetingUrl
        """

        self._active_meeting_url = active_meeting_url

    @property
    def allow_booking_on_behalf(self):
        """Gets the allow_booking_on_behalf of this MeetingSetting.

        Allow other team members to schedule on you behalf.

        :return: The allow_booking_on_behalf of this MeetingSetting.
        :rtype: bool
        """
        return self._allow_booking_on_behalf

    @allow_booking_on_behalf.setter
    def allow_booking_on_behalf(self, allow_booking_on_behalf):
        """Sets the allow_booking_on_behalf of this MeetingSetting.

        Allow other team members to schedule on you behalf.

        :param allow_booking_on_behalf: The allow_booking_on_behalf of this MeetingSetting.
        :type allow_booking_on_behalf: bool
        """

        self._allow_booking_on_behalf = allow_booking_on_behalf

    @property
    def allow_booking_overtime(self):
        """Gets the allow_booking_overtime of this MeetingSetting.

        Allow team members to insert available time outside your working hours.

        :return: The allow_booking_overtime of this MeetingSetting.
        :rtype: bool
        """
        return self._allow_booking_overtime

    @allow_booking_overtime.setter
    def allow_booking_overtime(self, allow_booking_overtime):
        """Sets the allow_booking_overtime of this MeetingSetting.

        Allow team members to insert available time outside your working hours.

        :param allow_booking_overtime: The allow_booking_overtime of this MeetingSetting.
        :type allow_booking_overtime: bool
        """

        self._allow_booking_overtime = allow_booking_overtime

    @property
    def allow_event_overlap(self):
        """Gets the allow_event_overlap of this MeetingSetting.

        Allow team members to double book events on your calendar.

        :return: The allow_event_overlap of this MeetingSetting.
        :rtype: bool
        """
        return self._allow_event_overlap

    @allow_event_overlap.setter
    def allow_event_overlap(self, allow_event_overlap):
        """Sets the allow_event_overlap of this MeetingSetting.

        Allow team members to double book events on your calendar.

        :param allow_event_overlap: The allow_event_overlap of this MeetingSetting.
        :type allow_event_overlap: bool
        """

        self._allow_event_overlap = allow_event_overlap

    @property
    def availability_limit(self):
        """Gets the availability_limit of this MeetingSetting.

        The number of days out the user allows a prospect to schedule a meeting

        :return: The availability_limit of this MeetingSetting.
        :rtype: int
        """
        return self._availability_limit

    @availability_limit.setter
    def availability_limit(self, availability_limit):
        """Sets the availability_limit of this MeetingSetting.

        The number of days out the user allows a prospect to schedule a meeting

        :param availability_limit: The availability_limit of this MeetingSetting.
        :type availability_limit: int
        """

        self._availability_limit = availability_limit

    @property
    def availability_limit_enabled(self):
        """Gets the availability_limit_enabled of this MeetingSetting.

        If Availability Limits have been turned on

        :return: The availability_limit_enabled of this MeetingSetting.
        :rtype: bool
        """
        return self._availability_limit_enabled

    @availability_limit_enabled.setter
    def availability_limit_enabled(self, availability_limit_enabled):
        """Sets the availability_limit_enabled of this MeetingSetting.

        If Availability Limits have been turned on

        :param availability_limit_enabled: The availability_limit_enabled of this MeetingSetting.
        :type availability_limit_enabled: bool
        """

        self._availability_limit_enabled = availability_limit_enabled

    @property
    def buffer_time_duration(self):
        """Gets the buffer_time_duration of this MeetingSetting.

        Default buffer duration in minutes set by a user

        :return: The buffer_time_duration of this MeetingSetting.
        :rtype: int
        """
        return self._buffer_time_duration

    @buffer_time_duration.setter
    def buffer_time_duration(self, buffer_time_duration):
        """Sets the buffer_time_duration of this MeetingSetting.

        Default buffer duration in minutes set by a user

        :param buffer_time_duration: The buffer_time_duration of this MeetingSetting.
        :type buffer_time_duration: int
        """

        self._buffer_time_duration = buffer_time_duration

    @property
    def calendar_type(self):
        """Gets the calendar_type of this MeetingSetting.

        Calendar type

        :return: The calendar_type of this MeetingSetting.
        :rtype: str
        """
        return self._calendar_type

    @calendar_type.setter
    def calendar_type(self, calendar_type):
        """Sets the calendar_type of this MeetingSetting.

        Calendar type

        :param calendar_type: The calendar_type of this MeetingSetting.
        :type calendar_type: str
        """

        self._calendar_type = calendar_type

    @property
    def created_at(self):
        """Gets the created_at of this MeetingSetting.

        Datetime of when the MeetingSetting was created

        :return: The created_at of this MeetingSetting.
        :rtype: date
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MeetingSetting.

        Datetime of when the MeetingSetting was created

        :param created_at: The created_at of this MeetingSetting.
        :type created_at: date
        """

        self._created_at = created_at

    @property
    def default_meeting_length(self):
        """Gets the default_meeting_length of this MeetingSetting.

        Default meeting length in minutes set by the user

        :return: The default_meeting_length of this MeetingSetting.
        :rtype: int
        """
        return self._default_meeting_length

    @default_meeting_length.setter
    def default_meeting_length(self, default_meeting_length):
        """Sets the default_meeting_length of this MeetingSetting.

        Default meeting length in minutes set by the user

        :param default_meeting_length: The default_meeting_length of this MeetingSetting.
        :type default_meeting_length: int
        """

        self._default_meeting_length = default_meeting_length

    @property
    def description(self):
        """Gets the description of this MeetingSetting.

        Default description of the meeting

        :return: The description of this MeetingSetting.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MeetingSetting.

        Default description of the meeting

        :param description: The description of this MeetingSetting.
        :type description: str
        """

        self._description = description

    @property
    def email_address(self):
        """Gets the email_address of this MeetingSetting.

        Calendar owner's email address

        :return: The email_address of this MeetingSetting.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this MeetingSetting.

        Calendar owner's email address

        :param email_address: The email_address of this MeetingSetting.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def enable_calendar_sync(self):
        """Gets the enable_calendar_sync of this MeetingSetting.

        Determines if a user enabled Calendar Sync feature

        :return: The enable_calendar_sync of this MeetingSetting.
        :rtype: bool
        """
        return self._enable_calendar_sync

    @enable_calendar_sync.setter
    def enable_calendar_sync(self, enable_calendar_sync):
        """Sets the enable_calendar_sync of this MeetingSetting.

        Determines if a user enabled Calendar Sync feature

        :param enable_calendar_sync: The enable_calendar_sync of this MeetingSetting.
        :type enable_calendar_sync: bool
        """

        self._enable_calendar_sync = enable_calendar_sync

    @property
    def enable_dynamic_location(self):
        """Gets the enable_dynamic_location of this MeetingSetting.

        Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)

        :return: The enable_dynamic_location of this MeetingSetting.
        :rtype: bool
        """
        return self._enable_dynamic_location

    @enable_dynamic_location.setter
    def enable_dynamic_location(self, enable_dynamic_location):
        """Sets the enable_dynamic_location of this MeetingSetting.

        Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)

        :param enable_dynamic_location: The enable_dynamic_location of this MeetingSetting.
        :type enable_dynamic_location: bool
        """

        self._enable_dynamic_location = enable_dynamic_location

    @property
    def id(self):
        """Gets the id of this MeetingSetting.

        ID of the MeetingSetting

        :return: The id of this MeetingSetting.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MeetingSetting.

        ID of the MeetingSetting

        :param id: The id of this MeetingSetting.
        :type id: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this MeetingSetting.

        Default location of the meeting

        :return: The location of this MeetingSetting.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MeetingSetting.

        Default location of the meeting

        :param location: The location of this MeetingSetting.
        :type location: str
        """

        self._location = location

    @property
    def primary_calendar_connection_failed(self):
        """Gets the primary_calendar_connection_failed of this MeetingSetting.

        Gets true when any issue with fetching calendar occurs

        :return: The primary_calendar_connection_failed of this MeetingSetting.
        :rtype: bool
        """
        return self._primary_calendar_connection_failed

    @primary_calendar_connection_failed.setter
    def primary_calendar_connection_failed(self, primary_calendar_connection_failed):
        """Sets the primary_calendar_connection_failed of this MeetingSetting.

        Gets true when any issue with fetching calendar occurs

        :param primary_calendar_connection_failed: The primary_calendar_connection_failed of this MeetingSetting.
        :type primary_calendar_connection_failed: bool
        """

        self._primary_calendar_connection_failed = primary_calendar_connection_failed

    @property
    def primary_calendar_id(self):
        """Gets the primary_calendar_id of this MeetingSetting.

        ID of the primary calendar

        :return: The primary_calendar_id of this MeetingSetting.
        :rtype: str
        """
        return self._primary_calendar_id

    @primary_calendar_id.setter
    def primary_calendar_id(self, primary_calendar_id):
        """Sets the primary_calendar_id of this MeetingSetting.

        ID of the primary calendar

        :param primary_calendar_id: The primary_calendar_id of this MeetingSetting.
        :type primary_calendar_id: str
        """

        self._primary_calendar_id = primary_calendar_id

    @property
    def primary_calendar_name(self):
        """Gets the primary_calendar_name of this MeetingSetting.

        Display name of the primary calendar

        :return: The primary_calendar_name of this MeetingSetting.
        :rtype: str
        """
        return self._primary_calendar_name

    @primary_calendar_name.setter
    def primary_calendar_name(self, primary_calendar_name):
        """Sets the primary_calendar_name of this MeetingSetting.

        Display name of the primary calendar

        :param primary_calendar_name: The primary_calendar_name of this MeetingSetting.
        :type primary_calendar_name: str
        """

        self._primary_calendar_name = primary_calendar_name

    @property
    def reschedule_meetings_enabled(self):
        """Gets the reschedule_meetings_enabled of this MeetingSetting.

        Determines if a user enabled reschedule meetings feature

        :return: The reschedule_meetings_enabled of this MeetingSetting.
        :rtype: bool
        """
        return self._reschedule_meetings_enabled

    @reschedule_meetings_enabled.setter
    def reschedule_meetings_enabled(self, reschedule_meetings_enabled):
        """Sets the reschedule_meetings_enabled of this MeetingSetting.

        Determines if a user enabled reschedule meetings feature

        :param reschedule_meetings_enabled: The reschedule_meetings_enabled of this MeetingSetting.
        :type reschedule_meetings_enabled: bool
        """

        self._reschedule_meetings_enabled = reschedule_meetings_enabled

    @property
    def schedule_buffer_enabled(self):
        """Gets the schedule_buffer_enabled of this MeetingSetting.

        Determines if meetings are scheduled with a 15 minute buffer between them

        :return: The schedule_buffer_enabled of this MeetingSetting.
        :rtype: bool
        """
        return self._schedule_buffer_enabled

    @schedule_buffer_enabled.setter
    def schedule_buffer_enabled(self, schedule_buffer_enabled):
        """Sets the schedule_buffer_enabled of this MeetingSetting.

        Determines if meetings are scheduled with a 15 minute buffer between them

        :param schedule_buffer_enabled: The schedule_buffer_enabled of this MeetingSetting.
        :type schedule_buffer_enabled: bool
        """

        self._schedule_buffer_enabled = schedule_buffer_enabled

    @property
    def schedule_delay(self):
        """Gets the schedule_delay of this MeetingSetting.

        The number of hours in advance a user requires someone to a book a meeting with them

        :return: The schedule_delay of this MeetingSetting.
        :rtype: int
        """
        return self._schedule_delay

    @schedule_delay.setter
    def schedule_delay(self, schedule_delay):
        """Sets the schedule_delay of this MeetingSetting.

        The number of hours in advance a user requires someone to a book a meeting with them

        :param schedule_delay: The schedule_delay of this MeetingSetting.
        :type schedule_delay: int
        """

        self._schedule_delay = schedule_delay

    @property
    def share_event_detail(self):
        """Gets the share_event_detail of this MeetingSetting.

        Allow team members to see the details of events on your calendar.

        :return: The share_event_detail of this MeetingSetting.
        :rtype: bool
        """
        return self._share_event_detail

    @share_event_detail.setter
    def share_event_detail(self, share_event_detail):
        """Sets the share_event_detail of this MeetingSetting.

        Allow team members to see the details of events on your calendar.

        :param share_event_detail: The share_event_detail of this MeetingSetting.
        :type share_event_detail: bool
        """

        self._share_event_detail = share_event_detail

    @property
    def time_zone(self):
        """Gets the time_zone of this MeetingSetting.

        Time zone for current calendar

        :return: The time_zone of this MeetingSetting.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this MeetingSetting.

        Time zone for current calendar

        :param time_zone: The time_zone of this MeetingSetting.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def times_available(self):
        """Gets the times_available of this MeetingSetting.

        Times available set by a user that can be used to book meetings

        :return: The times_available of this MeetingSetting.
        :rtype: object
        """
        return self._times_available

    @times_available.setter
    def times_available(self, times_available):
        """Sets the times_available of this MeetingSetting.

        Times available set by a user that can be used to book meetings

        :param times_available: The times_available of this MeetingSetting.
        :type times_available: object
        """

        self._times_available = times_available

    @property
    def title(self):
        """Gets the title of this MeetingSetting.

        Default title of the meeting

        :return: The title of this MeetingSetting.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MeetingSetting.

        Default title of the meeting

        :param title: The title of this MeetingSetting.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this MeetingSetting.

        Datetime of when the MeetingSetting was last updated

        :return: The updated_at of this MeetingSetting.
        :rtype: date
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MeetingSetting.

        Datetime of when the MeetingSetting was last updated

        :param updated_at: The updated_at of this MeetingSetting.
        :type updated_at: date
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this MeetingSetting.


        :return: The user of this MeetingSetting.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MeetingSetting.


        :param user: The user of this MeetingSetting.
        :type user: EmbeddedResource
        """

        self._user = user

    @property
    def user_details(self):
        """Gets the user_details of this MeetingSetting.

        User details

        :return: The user_details of this MeetingSetting.
        :rtype: object
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this MeetingSetting.

        User details

        :param user_details: The user_details of this MeetingSetting.
        :type user_details: object
        """

        self._user_details = user_details

    @property
    def user_slug(self):
        """Gets the user_slug of this MeetingSetting.

        User slug generated with a full name of the user

        :return: The user_slug of this MeetingSetting.
        :rtype: str
        """
        return self._user_slug

    @user_slug.setter
    def user_slug(self, user_slug):
        """Sets the user_slug of this MeetingSetting.

        User slug generated with a full name of the user

        :param user_slug: The user_slug of this MeetingSetting.
        :type user_slug: str
        """

        self._user_slug = user_slug
