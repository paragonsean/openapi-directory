# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_template_counts import EmailTemplateCounts
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class EmailTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: object=None, archived_at: datetime=None, body: str=None, body_preview: str=None, cadence_template: bool=None, click_tracking_enabled: bool=None, counts: EmailTemplateCounts=None, created_at: datetime=None, groups: List[EmbeddedResource]=None, id: int=None, last_used_at: datetime=None, open_tracking_enabled: bool=None, shared: bool=None, subject: str=None, tags: List[str]=None, team_template: EmbeddedResource=None, template_owner: EmbeddedResource=None, title: str=None, updated_at: datetime=None):
        """EmailTemplate - a model defined in OpenAPI

        :param links: The links of this EmailTemplate.
        :param archived_at: The archived_at of this EmailTemplate.
        :param body: The body of this EmailTemplate.
        :param body_preview: The body_preview of this EmailTemplate.
        :param cadence_template: The cadence_template of this EmailTemplate.
        :param click_tracking_enabled: The click_tracking_enabled of this EmailTemplate.
        :param counts: The counts of this EmailTemplate.
        :param created_at: The created_at of this EmailTemplate.
        :param groups: The groups of this EmailTemplate.
        :param id: The id of this EmailTemplate.
        :param last_used_at: The last_used_at of this EmailTemplate.
        :param open_tracking_enabled: The open_tracking_enabled of this EmailTemplate.
        :param shared: The shared of this EmailTemplate.
        :param subject: The subject of this EmailTemplate.
        :param tags: The tags of this EmailTemplate.
        :param team_template: The team_template of this EmailTemplate.
        :param template_owner: The template_owner of this EmailTemplate.
        :param title: The title of this EmailTemplate.
        :param updated_at: The updated_at of this EmailTemplate.
        """
        self.openapi_types = {
            'links': object,
            'archived_at': datetime,
            'body': str,
            'body_preview': str,
            'cadence_template': bool,
            'click_tracking_enabled': bool,
            'counts': EmailTemplateCounts,
            'created_at': datetime,
            'groups': List[EmbeddedResource],
            'id': int,
            'last_used_at': datetime,
            'open_tracking_enabled': bool,
            'shared': bool,
            'subject': str,
            'tags': List[str],
            'team_template': EmbeddedResource,
            'template_owner': EmbeddedResource,
            'title': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'archived_at': 'archived_at',
            'body': 'body',
            'body_preview': 'body_preview',
            'cadence_template': 'cadence_template',
            'click_tracking_enabled': 'click_tracking_enabled',
            'counts': 'counts',
            'created_at': 'created_at',
            'groups': 'groups',
            'id': 'id',
            'last_used_at': 'last_used_at',
            'open_tracking_enabled': 'open_tracking_enabled',
            'shared': 'shared',
            'subject': 'subject',
            'tags': 'tags',
            'team_template': 'team_template',
            'template_owner': 'template_owner',
            'title': 'title',
            'updated_at': 'updated_at'
        }

        self._links = links
        self._archived_at = archived_at
        self._body = body
        self._body_preview = body_preview
        self._cadence_template = cadence_template
        self._click_tracking_enabled = click_tracking_enabled
        self._counts = counts
        self._created_at = created_at
        self._groups = groups
        self._id = id
        self._last_used_at = last_used_at
        self._open_tracking_enabled = open_tracking_enabled
        self._shared = shared
        self._subject = subject
        self._tags = tags
        self._team_template = team_template
        self._template_owner = template_owner
        self._title = title
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailTemplate of this EmailTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this EmailTemplate.

        Links to attachments and tags resources for this email template.

        :return: The links of this EmailTemplate.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EmailTemplate.

        Links to attachments and tags resources for this email template.

        :param links: The links of this EmailTemplate.
        :type links: object
        """

        self._links = links

    @property
    def archived_at(self):
        """Gets the archived_at of this EmailTemplate.

        Datetime of when the email template was archived, if archived

        :return: The archived_at of this EmailTemplate.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this EmailTemplate.

        Datetime of when the email template was archived, if archived

        :param archived_at: The archived_at of this EmailTemplate.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def body(self):
        """Gets the body of this EmailTemplate.

        Sanitized body of the email template without email signature

        :return: The body of this EmailTemplate.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailTemplate.

        Sanitized body of the email template without email signature

        :param body: The body of this EmailTemplate.
        :type body: str
        """

        self._body = body

    @property
    def body_preview(self):
        """Gets the body_preview of this EmailTemplate.

        A plain text version of the first 100 characters of the body of the email template

        :return: The body_preview of this EmailTemplate.
        :rtype: str
        """
        return self._body_preview

    @body_preview.setter
    def body_preview(self, body_preview):
        """Sets the body_preview of this EmailTemplate.

        A plain text version of the first 100 characters of the body of the email template

        :param body_preview: The body_preview of this EmailTemplate.
        :type body_preview: str
        """

        self._body_preview = body_preview

    @property
    def cadence_template(self):
        """Gets the cadence_template of this EmailTemplate.

        Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.

        :return: The cadence_template of this EmailTemplate.
        :rtype: bool
        """
        return self._cadence_template

    @cadence_template.setter
    def cadence_template(self, cadence_template):
        """Sets the cadence_template of this EmailTemplate.

        Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.

        :param cadence_template: The cadence_template of this EmailTemplate.
        :type cadence_template: bool
        """

        self._cadence_template = cadence_template

    @property
    def click_tracking_enabled(self):
        """Gets the click_tracking_enabled of this EmailTemplate.

        Whether click tracking is enabled for this email template

        :return: The click_tracking_enabled of this EmailTemplate.
        :rtype: bool
        """
        return self._click_tracking_enabled

    @click_tracking_enabled.setter
    def click_tracking_enabled(self, click_tracking_enabled):
        """Sets the click_tracking_enabled of this EmailTemplate.

        Whether click tracking is enabled for this email template

        :param click_tracking_enabled: The click_tracking_enabled of this EmailTemplate.
        :type click_tracking_enabled: bool
        """

        self._click_tracking_enabled = click_tracking_enabled

    @property
    def counts(self):
        """Gets the counts of this EmailTemplate.


        :return: The counts of this EmailTemplate.
        :rtype: EmailTemplateCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this EmailTemplate.


        :param counts: The counts of this EmailTemplate.
        :type counts: EmailTemplateCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this EmailTemplate.

        Datetime of when the email template was created

        :return: The created_at of this EmailTemplate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EmailTemplate.

        Datetime of when the email template was created

        :param created_at: The created_at of this EmailTemplate.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def groups(self):
        """Gets the groups of this EmailTemplate.

        Groups to which this template is assigned, if any

        :return: The groups of this EmailTemplate.
        :rtype: List[EmbeddedResource]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this EmailTemplate.

        Groups to which this template is assigned, if any

        :param groups: The groups of this EmailTemplate.
        :type groups: List[EmbeddedResource]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this EmailTemplate.

        ID of email template

        :return: The id of this EmailTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailTemplate.

        ID of email template

        :param id: The id of this EmailTemplate.
        :type id: int
        """

        self._id = id

    @property
    def last_used_at(self):
        """Gets the last_used_at of this EmailTemplate.

        Datetime of when the email template was last used

        :return: The last_used_at of this EmailTemplate.
        :rtype: datetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this EmailTemplate.

        Datetime of when the email template was last used

        :param last_used_at: The last_used_at of this EmailTemplate.
        :type last_used_at: datetime
        """

        self._last_used_at = last_used_at

    @property
    def open_tracking_enabled(self):
        """Gets the open_tracking_enabled of this EmailTemplate.

        Whether open tracking is enabled for this email template

        :return: The open_tracking_enabled of this EmailTemplate.
        :rtype: bool
        """
        return self._open_tracking_enabled

    @open_tracking_enabled.setter
    def open_tracking_enabled(self, open_tracking_enabled):
        """Sets the open_tracking_enabled of this EmailTemplate.

        Whether open tracking is enabled for this email template

        :param open_tracking_enabled: The open_tracking_enabled of this EmailTemplate.
        :type open_tracking_enabled: bool
        """

        self._open_tracking_enabled = open_tracking_enabled

    @property
    def shared(self):
        """Gets the shared of this EmailTemplate.

        Whether this email template is visible to team members (shared)

        :return: The shared of this EmailTemplate.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this EmailTemplate.

        Whether this email template is visible to team members (shared)

        :param shared: The shared of this EmailTemplate.
        :type shared: bool
        """

        self._shared = shared

    @property
    def subject(self):
        """Gets the subject of this EmailTemplate.

        Subject of the email template

        :return: The subject of this EmailTemplate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailTemplate.

        Subject of the email template

        :param subject: The subject of this EmailTemplate.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this EmailTemplate.

        All tags applied to this email template

        :return: The tags of this EmailTemplate.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EmailTemplate.

        All tags applied to this email template

        :param tags: The tags of this EmailTemplate.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def team_template(self):
        """Gets the team_template of this EmailTemplate.


        :return: The team_template of this EmailTemplate.
        :rtype: EmbeddedResource
        """
        return self._team_template

    @team_template.setter
    def team_template(self, team_template):
        """Sets the team_template of this EmailTemplate.


        :param team_template: The team_template of this EmailTemplate.
        :type team_template: EmbeddedResource
        """

        self._team_template = team_template

    @property
    def template_owner(self):
        """Gets the template_owner of this EmailTemplate.


        :return: The template_owner of this EmailTemplate.
        :rtype: EmbeddedResource
        """
        return self._template_owner

    @template_owner.setter
    def template_owner(self, template_owner):
        """Sets the template_owner of this EmailTemplate.


        :param template_owner: The template_owner of this EmailTemplate.
        :type template_owner: EmbeddedResource
        """

        self._template_owner = template_owner

    @property
    def title(self):
        """Gets the title of this EmailTemplate.

        Title of the email template

        :return: The title of this EmailTemplate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EmailTemplate.

        Title of the email template

        :param title: The title of this EmailTemplate.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this EmailTemplate.

        Datetime of when the email template was last updated

        :return: The updated_at of this EmailTemplate.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EmailTemplate.

        Datetime of when the email template was last updated

        :param updated_at: The updated_at of this EmailTemplate.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
