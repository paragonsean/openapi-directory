# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmbeddedRecordingResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recording_status: str=None, status: str=None, url: str=None):
        """EmbeddedRecordingResource - a model defined in OpenAPI

        :param recording_status: The recording_status of this EmbeddedRecordingResource.
        :param status: The status of this EmbeddedRecordingResource.
        :param url: The url of this EmbeddedRecordingResource.
        """
        self.openapi_types = {
            'recording_status': str,
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'recording_status': 'recording_status',
            'status': 'status',
            'url': 'url'
        }

        self._recording_status = recording_status
        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedRecordingResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedRecordingResource of this EmbeddedRecordingResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recording_status(self):
        """Gets the recording_status of this EmbeddedRecordingResource.

        The processing status of the recording. Possible values are (but not limited to):  not_recorded: there is no recording available, and there will not be one becoming available  pending: the recording is currently being processed by the system  processing: the recording is currently being processed by the system  completed: the recording processing has been completed 

        :return: The recording_status of this EmbeddedRecordingResource.
        :rtype: str
        """
        return self._recording_status

    @recording_status.setter
    def recording_status(self, recording_status):
        """Sets the recording_status of this EmbeddedRecordingResource.

        The processing status of the recording. Possible values are (but not limited to):  not_recorded: there is no recording available, and there will not be one becoming available  pending: the recording is currently being processed by the system  processing: the recording is currently being processed by the system  completed: the recording processing has been completed 

        :param recording_status: The recording_status of this EmbeddedRecordingResource.
        :type recording_status: str
        """

        self._recording_status = recording_status

    @property
    def status(self):
        """Gets the status of this EmbeddedRecordingResource.

        The status of the call that produced this recording. Possible values are (but not limited to):  no-answer: The call was not answered  failed: The call was not able to be placed  busy: The call was busy  ringing: The call is ringing  in-progress: The call is ongoing  completed: The call is finished 

        :return: The status of this EmbeddedRecordingResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmbeddedRecordingResource.

        The status of the call that produced this recording. Possible values are (but not limited to):  no-answer: The call was not answered  failed: The call was not able to be placed  busy: The call was busy  ringing: The call is ringing  in-progress: The call is ongoing  completed: The call is finished 

        :param status: The status of this EmbeddedRecordingResource.
        :type status: str
        """

        self._status = status

    @property
    def url(self):
        """Gets the url of this EmbeddedRecordingResource.

        The url of the recording

        :return: The url of this EmbeddedRecordingResource.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EmbeddedRecordingResource.

        The url of the recording

        :param url: The url of this EmbeddedRecordingResource.
        :type url: str
        """

        self._url = url
