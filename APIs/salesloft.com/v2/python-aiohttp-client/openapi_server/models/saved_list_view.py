# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavedListView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_default: bool=None, name: str=None, view: str=None, view_params: object=None):
        """SavedListView - a model defined in OpenAPI

        :param id: The id of this SavedListView.
        :param is_default: The is_default of this SavedListView.
        :param name: The name of this SavedListView.
        :param view: The view of this SavedListView.
        :param view_params: The view_params of this SavedListView.
        """
        self.openapi_types = {
            'id': int,
            'is_default': bool,
            'name': str,
            'view': str,
            'view_params': object
        }

        self.attribute_map = {
            'id': 'id',
            'is_default': 'is_default',
            'name': 'name',
            'view': 'view',
            'view_params': 'view_params'
        }

        self._id = id
        self._is_default = is_default
        self._name = name
        self._view = view
        self._view_params = view_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavedListView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavedListView of this SavedListView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SavedListView.

        ID of Ssaved list view

        :return: The id of this SavedListView.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SavedListView.

        ID of Ssaved list view

        :param id: The id of this SavedListView.
        :type id: int
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this SavedListView.

        Whether the saved list view is the default view

        :return: The is_default of this SavedListView.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SavedListView.

        Whether the saved list view is the default view

        :param is_default: The is_default of this SavedListView.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this SavedListView.

        Name of saved list view

        :return: The name of this SavedListView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedListView.

        Name of saved list view

        :param name: The name of this SavedListView.
        :type name: str
        """

        self._name = name

    @property
    def view(self):
        """Gets the view of this SavedListView.

        Type of saved list view

        :return: The view of this SavedListView.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this SavedListView.

        Type of saved list view

        :param view: The view of this SavedListView.
        :type view: str
        """

        self._view = view

    @property
    def view_params(self):
        """Gets the view_params of this SavedListView.

        List of set filters in saved list view

        :return: The view_params of this SavedListView.
        :rtype: object
        """
        return self._view_params

    @view_params.setter
    def view_params(self, view_params):
        """Sets the view_params of this SavedListView.

        List of set filters in saved list view

        :param view_params: The view_params of this SavedListView.
        :type view_params: object
        """

        self._view_params = view_params
