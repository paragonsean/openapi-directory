# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cadence_membership_counts import CadenceMembershipCounts
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class CadenceMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_at: datetime=None, cadence: EmbeddedResource=None, counts: CadenceMembershipCounts=None, created_at: datetime=None, current_state: str=None, currently_on_cadence: bool=None, id: int=None, latest_action: EmbeddedResource=None, person: EmbeddedResource=None, person_deleted: bool=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """CadenceMembership - a model defined in OpenAPI

        :param added_at: The added_at of this CadenceMembership.
        :param cadence: The cadence of this CadenceMembership.
        :param counts: The counts of this CadenceMembership.
        :param created_at: The created_at of this CadenceMembership.
        :param current_state: The current_state of this CadenceMembership.
        :param currently_on_cadence: The currently_on_cadence of this CadenceMembership.
        :param id: The id of this CadenceMembership.
        :param latest_action: The latest_action of this CadenceMembership.
        :param person: The person of this CadenceMembership.
        :param person_deleted: The person_deleted of this CadenceMembership.
        :param updated_at: The updated_at of this CadenceMembership.
        :param user: The user of this CadenceMembership.
        """
        self.openapi_types = {
            'added_at': datetime,
            'cadence': EmbeddedResource,
            'counts': CadenceMembershipCounts,
            'created_at': datetime,
            'current_state': str,
            'currently_on_cadence': bool,
            'id': int,
            'latest_action': EmbeddedResource,
            'person': EmbeddedResource,
            'person_deleted': bool,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'added_at': 'added_at',
            'cadence': 'cadence',
            'counts': 'counts',
            'created_at': 'created_at',
            'current_state': 'current_state',
            'currently_on_cadence': 'currently_on_cadence',
            'id': 'id',
            'latest_action': 'latest_action',
            'person': 'person',
            'person_deleted': 'person_deleted',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._added_at = added_at
        self._cadence = cadence
        self._counts = counts
        self._created_at = created_at
        self._current_state = current_state
        self._currently_on_cadence = currently_on_cadence
        self._id = id
        self._latest_action = latest_action
        self._person = person
        self._person_deleted = person_deleted
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CadenceMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CadenceMembership of this CadenceMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_at(self):
        """Gets the added_at of this CadenceMembership.

        Datetime of when the person was last added to this cadence

        :return: The added_at of this CadenceMembership.
        :rtype: datetime
        """
        return self._added_at

    @added_at.setter
    def added_at(self, added_at):
        """Sets the added_at of this CadenceMembership.

        Datetime of when the person was last added to this cadence

        :param added_at: The added_at of this CadenceMembership.
        :type added_at: datetime
        """

        self._added_at = added_at

    @property
    def cadence(self):
        """Gets the cadence of this CadenceMembership.


        :return: The cadence of this CadenceMembership.
        :rtype: EmbeddedResource
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this CadenceMembership.


        :param cadence: The cadence of this CadenceMembership.
        :type cadence: EmbeddedResource
        """

        self._cadence = cadence

    @property
    def counts(self):
        """Gets the counts of this CadenceMembership.


        :return: The counts of this CadenceMembership.
        :rtype: CadenceMembershipCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this CadenceMembership.


        :param counts: The counts of this CadenceMembership.
        :type counts: CadenceMembershipCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this CadenceMembership.

        Datetime of when the person was first added to this cadence

        :return: The created_at of this CadenceMembership.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CadenceMembership.

        Datetime of when the person was first added to this cadence

        :param created_at: The created_at of this CadenceMembership.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def current_state(self):
        """Gets the current_state of this CadenceMembership.

        The current state of the person on the cadence. Possible values are:  processing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time  staged: The person is waiting for the first step in the cadence to occur  active: The cadence has begun processing this person and is still in the process, but idle  scheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur  completed: The cadence has been completed for this person  removed: The person was manually or automatically removed from the cadence  removed_no_action: The person was removed from the cadence before any action occurred  reassigned: The person's cadence execution was transferred to a different user, ending this user's interaction 

        :return: The current_state of this CadenceMembership.
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this CadenceMembership.

        The current state of the person on the cadence. Possible values are:  processing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time  staged: The person is waiting for the first step in the cadence to occur  active: The cadence has begun processing this person and is still in the process, but idle  scheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur  completed: The cadence has been completed for this person  removed: The person was manually or automatically removed from the cadence  removed_no_action: The person was removed from the cadence before any action occurred  reassigned: The person's cadence execution was transferred to a different user, ending this user's interaction 

        :param current_state: The current_state of this CadenceMembership.
        :type current_state: str
        """

        self._current_state = current_state

    @property
    def currently_on_cadence(self):
        """Gets the currently_on_cadence of this CadenceMembership.

        Whether the person is currently on the cadence

        :return: The currently_on_cadence of this CadenceMembership.
        :rtype: bool
        """
        return self._currently_on_cadence

    @currently_on_cadence.setter
    def currently_on_cadence(self, currently_on_cadence):
        """Sets the currently_on_cadence of this CadenceMembership.

        Whether the person is currently on the cadence

        :param currently_on_cadence: The currently_on_cadence of this CadenceMembership.
        :type currently_on_cadence: bool
        """

        self._currently_on_cadence = currently_on_cadence

    @property
    def id(self):
        """Gets the id of this CadenceMembership.

        Cadence membership ID

        :return: The id of this CadenceMembership.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CadenceMembership.

        Cadence membership ID

        :param id: The id of this CadenceMembership.
        :type id: int
        """

        self._id = id

    @property
    def latest_action(self):
        """Gets the latest_action of this CadenceMembership.


        :return: The latest_action of this CadenceMembership.
        :rtype: EmbeddedResource
        """
        return self._latest_action

    @latest_action.setter
    def latest_action(self, latest_action):
        """Sets the latest_action of this CadenceMembership.


        :param latest_action: The latest_action of this CadenceMembership.
        :type latest_action: EmbeddedResource
        """

        self._latest_action = latest_action

    @property
    def person(self):
        """Gets the person of this CadenceMembership.


        :return: The person of this CadenceMembership.
        :rtype: EmbeddedResource
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this CadenceMembership.


        :param person: The person of this CadenceMembership.
        :type person: EmbeddedResource
        """

        self._person = person

    @property
    def person_deleted(self):
        """Gets the person_deleted of this CadenceMembership.

        Whether the associated person has since been deleted

        :return: The person_deleted of this CadenceMembership.
        :rtype: bool
        """
        return self._person_deleted

    @person_deleted.setter
    def person_deleted(self, person_deleted):
        """Sets the person_deleted of this CadenceMembership.

        Whether the associated person has since been deleted

        :param person_deleted: The person_deleted of this CadenceMembership.
        :type person_deleted: bool
        """

        self._person_deleted = person_deleted

    @property
    def updated_at(self):
        """Gets the updated_at of this CadenceMembership.

        Datetime of when the record was last updated

        :return: The updated_at of this CadenceMembership.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CadenceMembership.

        Datetime of when the record was last updated

        :param updated_at: The updated_at of this CadenceMembership.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this CadenceMembership.


        :return: The user of this CadenceMembership.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CadenceMembership.


        :param user: The user of this CadenceMembership.
        :type user: EmbeddedResource
        """

        self._user = user
