# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calls: int=None, emails_bounced: int=None, emails_clicked: int=None, emails_replied_to: int=None, emails_sent: int=None, emails_viewed: int=None):
        """PersonCounts - a model defined in OpenAPI

        :param calls: The calls of this PersonCounts.
        :param emails_bounced: The emails_bounced of this PersonCounts.
        :param emails_clicked: The emails_clicked of this PersonCounts.
        :param emails_replied_to: The emails_replied_to of this PersonCounts.
        :param emails_sent: The emails_sent of this PersonCounts.
        :param emails_viewed: The emails_viewed of this PersonCounts.
        """
        self.openapi_types = {
            'calls': int,
            'emails_bounced': int,
            'emails_clicked': int,
            'emails_replied_to': int,
            'emails_sent': int,
            'emails_viewed': int
        }

        self.attribute_map = {
            'calls': 'calls',
            'emails_bounced': 'emails_bounced',
            'emails_clicked': 'emails_clicked',
            'emails_replied_to': 'emails_replied_to',
            'emails_sent': 'emails_sent',
            'emails_viewed': 'emails_viewed'
        }

        self._calls = calls
        self._emails_bounced = emails_bounced
        self._emails_clicked = emails_clicked
        self._emails_replied_to = emails_replied_to
        self._emails_sent = emails_sent
        self._emails_viewed = emails_viewed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonCounts of this PersonCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calls(self):
        """Gets the calls of this PersonCounts.

        The number of calls logged to this person

        :return: The calls of this PersonCounts.
        :rtype: int
        """
        return self._calls

    @calls.setter
    def calls(self, calls):
        """Sets the calls of this PersonCounts.

        The number of calls logged to this person

        :param calls: The calls of this PersonCounts.
        :type calls: int
        """

        self._calls = calls

    @property
    def emails_bounced(self):
        """Gets the emails_bounced of this PersonCounts.

        The number of unique emails sent to this person that bounced

        :return: The emails_bounced of this PersonCounts.
        :rtype: int
        """
        return self._emails_bounced

    @emails_bounced.setter
    def emails_bounced(self, emails_bounced):
        """Sets the emails_bounced of this PersonCounts.

        The number of unique emails sent to this person that bounced

        :param emails_bounced: The emails_bounced of this PersonCounts.
        :type emails_bounced: int
        """

        self._emails_bounced = emails_bounced

    @property
    def emails_clicked(self):
        """Gets the emails_clicked of this PersonCounts.

        The number of unique emails clicked by this person

        :return: The emails_clicked of this PersonCounts.
        :rtype: int
        """
        return self._emails_clicked

    @emails_clicked.setter
    def emails_clicked(self, emails_clicked):
        """Sets the emails_clicked of this PersonCounts.

        The number of unique emails clicked by this person

        :param emails_clicked: The emails_clicked of this PersonCounts.
        :type emails_clicked: int
        """

        self._emails_clicked = emails_clicked

    @property
    def emails_replied_to(self):
        """Gets the emails_replied_to of this PersonCounts.

        The number of unique emails replied to by this person

        :return: The emails_replied_to of this PersonCounts.
        :rtype: int
        """
        return self._emails_replied_to

    @emails_replied_to.setter
    def emails_replied_to(self, emails_replied_to):
        """Sets the emails_replied_to of this PersonCounts.

        The number of unique emails replied to by this person

        :param emails_replied_to: The emails_replied_to of this PersonCounts.
        :type emails_replied_to: int
        """

        self._emails_replied_to = emails_replied_to

    @property
    def emails_sent(self):
        """Gets the emails_sent of this PersonCounts.

        The number of emails sent to this person

        :return: The emails_sent of this PersonCounts.
        :rtype: int
        """
        return self._emails_sent

    @emails_sent.setter
    def emails_sent(self, emails_sent):
        """Sets the emails_sent of this PersonCounts.

        The number of emails sent to this person

        :param emails_sent: The emails_sent of this PersonCounts.
        :type emails_sent: int
        """

        self._emails_sent = emails_sent

    @property
    def emails_viewed(self):
        """Gets the emails_viewed of this PersonCounts.

        The number of unique emails viewed by this person

        :return: The emails_viewed of this PersonCounts.
        :rtype: int
        """
        return self._emails_viewed

    @emails_viewed.setter
    def emails_viewed(self, emails_viewed):
        """Sets the emails_viewed of this PersonCounts.

        The number of unique emails viewed by this person

        :param emails_viewed: The emails_viewed of this PersonCounts.
        :type emails_viewed: int
        """

        self._emails_viewed = emails_viewed
