# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CalendarEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_day: bool=None, attendees: List[object]=None, body_html: str=None, busy: bool=None, calendar_id: str=None, canceled_at: datetime=None, conference_data: object=None, created_at: datetime=None, creator: str=None, description: str=None, end_time: datetime=None, extended_properties: object=None, html_link: str=None, i_cal_uid: str=None, id: str=None, location: str=None, organizer: str=None, provider: str=None, recurring: bool=None, start_time: datetime=None, status: str=None, tenant_id: int=None, title: str=None, updated_at: datetime=None, user_guid: str=None):
        """CalendarEvent - a model defined in OpenAPI

        :param all_day: The all_day of this CalendarEvent.
        :param attendees: The attendees of this CalendarEvent.
        :param body_html: The body_html of this CalendarEvent.
        :param busy: The busy of this CalendarEvent.
        :param calendar_id: The calendar_id of this CalendarEvent.
        :param canceled_at: The canceled_at of this CalendarEvent.
        :param conference_data: The conference_data of this CalendarEvent.
        :param created_at: The created_at of this CalendarEvent.
        :param creator: The creator of this CalendarEvent.
        :param description: The description of this CalendarEvent.
        :param end_time: The end_time of this CalendarEvent.
        :param extended_properties: The extended_properties of this CalendarEvent.
        :param html_link: The html_link of this CalendarEvent.
        :param i_cal_uid: The i_cal_uid of this CalendarEvent.
        :param id: The id of this CalendarEvent.
        :param location: The location of this CalendarEvent.
        :param organizer: The organizer of this CalendarEvent.
        :param provider: The provider of this CalendarEvent.
        :param recurring: The recurring of this CalendarEvent.
        :param start_time: The start_time of this CalendarEvent.
        :param status: The status of this CalendarEvent.
        :param tenant_id: The tenant_id of this CalendarEvent.
        :param title: The title of this CalendarEvent.
        :param updated_at: The updated_at of this CalendarEvent.
        :param user_guid: The user_guid of this CalendarEvent.
        """
        self.openapi_types = {
            'all_day': bool,
            'attendees': List[object],
            'body_html': str,
            'busy': bool,
            'calendar_id': str,
            'canceled_at': datetime,
            'conference_data': object,
            'created_at': datetime,
            'creator': str,
            'description': str,
            'end_time': datetime,
            'extended_properties': object,
            'html_link': str,
            'i_cal_uid': str,
            'id': str,
            'location': str,
            'organizer': str,
            'provider': str,
            'recurring': bool,
            'start_time': datetime,
            'status': str,
            'tenant_id': int,
            'title': str,
            'updated_at': datetime,
            'user_guid': str
        }

        self.attribute_map = {
            'all_day': 'all_day',
            'attendees': 'attendees',
            'body_html': 'body_html',
            'busy': 'busy',
            'calendar_id': 'calendar_id',
            'canceled_at': 'canceled_at',
            'conference_data': 'conference_data',
            'created_at': 'created_at',
            'creator': 'creator',
            'description': 'description',
            'end_time': 'end_time',
            'extended_properties': 'extended_properties',
            'html_link': 'html_link',
            'i_cal_uid': 'i_cal_uid',
            'id': 'id',
            'location': 'location',
            'organizer': 'organizer',
            'provider': 'provider',
            'recurring': 'recurring',
            'start_time': 'start_time',
            'status': 'status',
            'tenant_id': 'tenant_id',
            'title': 'title',
            'updated_at': 'updated_at',
            'user_guid': 'user_guid'
        }

        self._all_day = all_day
        self._attendees = attendees
        self._body_html = body_html
        self._busy = busy
        self._calendar_id = calendar_id
        self._canceled_at = canceled_at
        self._conference_data = conference_data
        self._created_at = created_at
        self._creator = creator
        self._description = description
        self._end_time = end_time
        self._extended_properties = extended_properties
        self._html_link = html_link
        self._i_cal_uid = i_cal_uid
        self._id = id
        self._location = location
        self._organizer = organizer
        self._provider = provider
        self._recurring = recurring
        self._start_time = start_time
        self._status = status
        self._tenant_id = tenant_id
        self._title = title
        self._updated_at = updated_at
        self._user_guid = user_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEvent of this CalendarEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_day(self):
        """Gets the all_day of this CalendarEvent.

        Whether the calendar event is an all-day event.

        :return: The all_day of this CalendarEvent.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarEvent.

        Whether the calendar event is an all-day event.

        :param all_day: The all_day of this CalendarEvent.
        :type all_day: bool
        """

        self._all_day = all_day

    @property
    def attendees(self):
        """Gets the attendees of this CalendarEvent.

        The attendees of the calendar event.

        :return: The attendees of this CalendarEvent.
        :rtype: List[object]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this CalendarEvent.

        The attendees of the calendar event.

        :param attendees: The attendees of this CalendarEvent.
        :type attendees: List[object]
        """

        self._attendees = attendees

    @property
    def body_html(self):
        """Gets the body_html of this CalendarEvent.

        Raw body content from Microsoft calendar events

        :return: The body_html of this CalendarEvent.
        :rtype: str
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this CalendarEvent.

        Raw body content from Microsoft calendar events

        :param body_html: The body_html of this CalendarEvent.
        :type body_html: str
        """

        self._body_html = body_html

    @property
    def busy(self):
        """Gets the busy of this CalendarEvent.

        Busy/free status of the calendar event

        :return: The busy of this CalendarEvent.
        :rtype: bool
        """
        return self._busy

    @busy.setter
    def busy(self, busy):
        """Sets the busy of this CalendarEvent.

        Busy/free status of the calendar event

        :param busy: The busy of this CalendarEvent.
        :type busy: bool
        """

        self._busy = busy

    @property
    def calendar_id(self):
        """Gets the calendar_id of this CalendarEvent.

        Calendar ID of the user calendar.

        :return: The calendar_id of this CalendarEvent.
        :rtype: str
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this CalendarEvent.

        Calendar ID of the user calendar.

        :param calendar_id: The calendar_id of this CalendarEvent.
        :type calendar_id: str
        """

        self._calendar_id = calendar_id

    @property
    def canceled_at(self):
        """Gets the canceled_at of this CalendarEvent.

        The canceled date of the calendar event.

        :return: The canceled_at of this CalendarEvent.
        :rtype: datetime
        """
        return self._canceled_at

    @canceled_at.setter
    def canceled_at(self, canceled_at):
        """Sets the canceled_at of this CalendarEvent.

        The canceled date of the calendar event.

        :param canceled_at: The canceled_at of this CalendarEvent.
        :type canceled_at: datetime
        """

        self._canceled_at = canceled_at

    @property
    def conference_data(self):
        """Gets the conference_data of this CalendarEvent.

        The conference-related information, such as details of a Google Meet conference.

        :return: The conference_data of this CalendarEvent.
        :rtype: object
        """
        return self._conference_data

    @conference_data.setter
    def conference_data(self, conference_data):
        """Sets the conference_data of this CalendarEvent.

        The conference-related information, such as details of a Google Meet conference.

        :param conference_data: The conference_data of this CalendarEvent.
        :type conference_data: object
        """

        self._conference_data = conference_data

    @property
    def created_at(self):
        """Gets the created_at of this CalendarEvent.

        Creation time of the calendar event.

        :return: The created_at of this CalendarEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarEvent.

        Creation time of the calendar event.

        :param created_at: The created_at of this CalendarEvent.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this CalendarEvent.

        The creator email of the calendar event.

        :return: The creator of this CalendarEvent.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this CalendarEvent.

        The creator email of the calendar event.

        :param creator: The creator of this CalendarEvent.
        :type creator: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this CalendarEvent.

        Description of the calendar event

        :return: The description of this CalendarEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEvent.

        Description of the calendar event

        :param description: The description of this CalendarEvent.
        :type description: str
        """

        self._description = description

    @property
    def end_time(self):
        """Gets the end_time of this CalendarEvent.

        The (exclusive) end time of the calendar event.

        :return: The end_time of this CalendarEvent.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CalendarEvent.

        The (exclusive) end time of the calendar event.

        :param end_time: The end_time of this CalendarEvent.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def extended_properties(self):
        """Gets the extended_properties of this CalendarEvent.

        Extended properties of the calendar event.

        :return: The extended_properties of this CalendarEvent.
        :rtype: object
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this CalendarEvent.

        Extended properties of the calendar event.

        :param extended_properties: The extended_properties of this CalendarEvent.
        :type extended_properties: object
        """

        self._extended_properties = extended_properties

    @property
    def html_link(self):
        """Gets the html_link of this CalendarEvent.

        An absolute link to this calendar event in the Google Calendar Web UI.

        :return: The html_link of this CalendarEvent.
        :rtype: str
        """
        return self._html_link

    @html_link.setter
    def html_link(self, html_link):
        """Sets the html_link of this CalendarEvent.

        An absolute link to this calendar event in the Google Calendar Web UI.

        :param html_link: The html_link of this CalendarEvent.
        :type html_link: str
        """

        self._html_link = html_link

    @property
    def i_cal_uid(self):
        """Gets the i_cal_uid of this CalendarEvent.

        Calendar event unique identifier (iCalUID)

        :return: The i_cal_uid of this CalendarEvent.
        :rtype: str
        """
        return self._i_cal_uid

    @i_cal_uid.setter
    def i_cal_uid(self, i_cal_uid):
        """Sets the i_cal_uid of this CalendarEvent.

        Calendar event unique identifier (iCalUID)

        :param i_cal_uid: The i_cal_uid of this CalendarEvent.
        :type i_cal_uid: str
        """

        self._i_cal_uid = i_cal_uid

    @property
    def id(self):
        """Gets the id of this CalendarEvent.

        The calendar event original ID from calendar provider

        :return: The id of this CalendarEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarEvent.

        The calendar event original ID from calendar provider

        :param id: The id of this CalendarEvent.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this CalendarEvent.

        Location of the calendar event

        :return: The location of this CalendarEvent.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarEvent.

        Location of the calendar event

        :param location: The location of this CalendarEvent.
        :type location: str
        """

        self._location = location

    @property
    def organizer(self):
        """Gets the organizer of this CalendarEvent.

        The organizer email of the calendar event.

        :return: The organizer of this CalendarEvent.
        :rtype: str
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this CalendarEvent.

        The organizer email of the calendar event.

        :param organizer: The organizer of this CalendarEvent.
        :type organizer: str
        """

        self._organizer = organizer

    @property
    def provider(self):
        """Gets the provider of this CalendarEvent.

        The provider of the calendar event.

        :return: The provider of this CalendarEvent.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CalendarEvent.

        The provider of the calendar event.

        :param provider: The provider of this CalendarEvent.
        :type provider: str
        """

        self._provider = provider

    @property
    def recurring(self):
        """Gets the recurring of this CalendarEvent.

        Whether the calendar event is a recurring event.

        :return: The recurring of this CalendarEvent.
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this CalendarEvent.

        Whether the calendar event is a recurring event.

        :param recurring: The recurring of this CalendarEvent.
        :type recurring: bool
        """

        self._recurring = recurring

    @property
    def start_time(self):
        """Gets the start_time of this CalendarEvent.

        The (inclusive) start time of the calendar event.

        :return: The start_time of this CalendarEvent.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CalendarEvent.

        The (inclusive) start time of the calendar event.

        :param start_time: The start_time of this CalendarEvent.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this CalendarEvent.

        The status of the calendar event. It can be empty for non-google events.

        :return: The status of this CalendarEvent.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CalendarEvent.

        The status of the calendar event. It can be empty for non-google events.

        :param status: The status of this CalendarEvent.
        :type status: str
        """

        self._status = status

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CalendarEvent.

        Tenant ID of the user calendar

        :return: The tenant_id of this CalendarEvent.
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CalendarEvent.

        Tenant ID of the user calendar

        :param tenant_id: The tenant_id of this CalendarEvent.
        :type tenant_id: int
        """

        self._tenant_id = tenant_id

    @property
    def title(self):
        """Gets the title of this CalendarEvent.

        Title of the calendar event

        :return: The title of this CalendarEvent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CalendarEvent.

        Title of the calendar event

        :param title: The title of this CalendarEvent.
        :type title: str
        """

        self._title = title

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarEvent.

        Last modification time of the calendar event.

        :return: The updated_at of this CalendarEvent.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarEvent.

        Last modification time of the calendar event.

        :param updated_at: The updated_at of this CalendarEvent.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_guid(self):
        """Gets the user_guid of this CalendarEvent.

        User GUID of the user calendar.

        :return: The user_guid of this CalendarEvent.
        :rtype: str
        """
        return self._user_guid

    @user_guid.setter
    def user_guid(self, user_guid):
        """Sets the user_guid of this CalendarEvent.

        User GUID of the user calendar.

        :param user_guid: The user_guid of this CalendarEvent.
        :type user_guid: str
        """

        self._user_guid = user_guid
