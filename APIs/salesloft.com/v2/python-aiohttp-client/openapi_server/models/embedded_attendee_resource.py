# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmbeddedAttendeeResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_at: date=None, email: str=None, name: str=None, organizer: bool=None, status: str=None, status_changed: bool=None):
        """EmbeddedAttendeeResource - a model defined in OpenAPI

        :param deleted_at: The deleted_at of this EmbeddedAttendeeResource.
        :param email: The email of this EmbeddedAttendeeResource.
        :param name: The name of this EmbeddedAttendeeResource.
        :param organizer: The organizer of this EmbeddedAttendeeResource.
        :param status: The status of this EmbeddedAttendeeResource.
        :param status_changed: The status_changed of this EmbeddedAttendeeResource.
        """
        self.openapi_types = {
            'deleted_at': date,
            'email': str,
            'name': str,
            'organizer': bool,
            'status': str,
            'status_changed': bool
        }

        self.attribute_map = {
            'deleted_at': 'deleted_at',
            'email': 'email',
            'name': 'name',
            'organizer': 'organizer',
            'status': 'status',
            'status_changed': 'status_changed'
        }

        self._deleted_at = deleted_at
        self._email = email
        self._name = name
        self._organizer = organizer
        self._status = status
        self._status_changed = status_changed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmbeddedAttendeeResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmbeddedAttendeeResource of this EmbeddedAttendeeResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_at(self):
        """Gets the deleted_at of this EmbeddedAttendeeResource.

        Datetime of when the attendee was deleted

        :return: The deleted_at of this EmbeddedAttendeeResource.
        :rtype: date
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this EmbeddedAttendeeResource.

        Datetime of when the attendee was deleted

        :param deleted_at: The deleted_at of this EmbeddedAttendeeResource.
        :type deleted_at: date
        """

        self._deleted_at = deleted_at

    @property
    def email(self):
        """Gets the email of this EmbeddedAttendeeResource.

        Email of the attendee

        :return: The email of this EmbeddedAttendeeResource.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmbeddedAttendeeResource.

        Email of the attendee

        :param email: The email of this EmbeddedAttendeeResource.
        :type email: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this EmbeddedAttendeeResource.

        Name of the attendee

        :return: The name of this EmbeddedAttendeeResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmbeddedAttendeeResource.

        Name of the attendee

        :param name: The name of this EmbeddedAttendeeResource.
        :type name: str
        """

        self._name = name

    @property
    def organizer(self):
        """Gets the organizer of this EmbeddedAttendeeResource.

        Whether the attendee is the organizer of the event.

        :return: The organizer of this EmbeddedAttendeeResource.
        :rtype: bool
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this EmbeddedAttendeeResource.

        Whether the attendee is the organizer of the event.

        :param organizer: The organizer of this EmbeddedAttendeeResource.
        :type organizer: bool
        """

        self._organizer = organizer

    @property
    def status(self):
        """Gets the status of this EmbeddedAttendeeResource.

        The attendee's response status. Possible values are: needsAction, accepted, tentative, declined

        :return: The status of this EmbeddedAttendeeResource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmbeddedAttendeeResource.

        The attendee's response status. Possible values are: needsAction, accepted, tentative, declined

        :param status: The status of this EmbeddedAttendeeResource.
        :type status: str
        """

        self._status = status

    @property
    def status_changed(self):
        """Gets the status_changed of this EmbeddedAttendeeResource.

        Whether the attendee changed response status

        :return: The status_changed of this EmbeddedAttendeeResource.
        :rtype: bool
        """
        return self._status_changed

    @status_changed.setter
    def status_changed(self, status_changed):
        """Sets the status_changed of this EmbeddedAttendeeResource.

        Whether the attendee changed response status

        :param status_changed: The status_changed of this EmbeddedAttendeeResource.
        :type status_changed: bool
        """

        self._status_changed = status_changed
