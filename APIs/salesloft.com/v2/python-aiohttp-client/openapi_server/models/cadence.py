# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cadence_counts import CadenceCounts
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Cadence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_stage: EmbeddedResource=None, archived_at: datetime=None, bounced_stage: EmbeddedResource=None, cadence_framework_id: int=None, cadence_function: str=None, cadence_priority: EmbeddedResource=None, counts: CadenceCounts=None, created_at: datetime=None, creator: EmbeddedResource=None, draft: bool=None, external_identifier: str=None, finished_stage: EmbeddedResource=None, groups: List[EmbeddedResource]=None, id: int=None, name: str=None, opt_out_link_included: bool=None, owner: EmbeddedResource=None, remove_bounces_enabled: bool=None, remove_replies_enabled: bool=None, replied_stage: EmbeddedResource=None, shared: bool=None, tags: List[str]=None, team_cadence: bool=None, updated_at: datetime=None):
        """Cadence - a model defined in OpenAPI

        :param added_stage: The added_stage of this Cadence.
        :param archived_at: The archived_at of this Cadence.
        :param bounced_stage: The bounced_stage of this Cadence.
        :param cadence_framework_id: The cadence_framework_id of this Cadence.
        :param cadence_function: The cadence_function of this Cadence.
        :param cadence_priority: The cadence_priority of this Cadence.
        :param counts: The counts of this Cadence.
        :param created_at: The created_at of this Cadence.
        :param creator: The creator of this Cadence.
        :param draft: The draft of this Cadence.
        :param external_identifier: The external_identifier of this Cadence.
        :param finished_stage: The finished_stage of this Cadence.
        :param groups: The groups of this Cadence.
        :param id: The id of this Cadence.
        :param name: The name of this Cadence.
        :param opt_out_link_included: The opt_out_link_included of this Cadence.
        :param owner: The owner of this Cadence.
        :param remove_bounces_enabled: The remove_bounces_enabled of this Cadence.
        :param remove_replies_enabled: The remove_replies_enabled of this Cadence.
        :param replied_stage: The replied_stage of this Cadence.
        :param shared: The shared of this Cadence.
        :param tags: The tags of this Cadence.
        :param team_cadence: The team_cadence of this Cadence.
        :param updated_at: The updated_at of this Cadence.
        """
        self.openapi_types = {
            'added_stage': EmbeddedResource,
            'archived_at': datetime,
            'bounced_stage': EmbeddedResource,
            'cadence_framework_id': int,
            'cadence_function': str,
            'cadence_priority': EmbeddedResource,
            'counts': CadenceCounts,
            'created_at': datetime,
            'creator': EmbeddedResource,
            'draft': bool,
            'external_identifier': str,
            'finished_stage': EmbeddedResource,
            'groups': List[EmbeddedResource],
            'id': int,
            'name': str,
            'opt_out_link_included': bool,
            'owner': EmbeddedResource,
            'remove_bounces_enabled': bool,
            'remove_replies_enabled': bool,
            'replied_stage': EmbeddedResource,
            'shared': bool,
            'tags': List[str],
            'team_cadence': bool,
            'updated_at': datetime
        }

        self.attribute_map = {
            'added_stage': 'added_stage',
            'archived_at': 'archived_at',
            'bounced_stage': 'bounced_stage',
            'cadence_framework_id': 'cadence_framework_id',
            'cadence_function': 'cadence_function',
            'cadence_priority': 'cadence_priority',
            'counts': 'counts',
            'created_at': 'created_at',
            'creator': 'creator',
            'draft': 'draft',
            'external_identifier': 'external_identifier',
            'finished_stage': 'finished_stage',
            'groups': 'groups',
            'id': 'id',
            'name': 'name',
            'opt_out_link_included': 'opt_out_link_included',
            'owner': 'owner',
            'remove_bounces_enabled': 'remove_bounces_enabled',
            'remove_replies_enabled': 'remove_replies_enabled',
            'replied_stage': 'replied_stage',
            'shared': 'shared',
            'tags': 'tags',
            'team_cadence': 'team_cadence',
            'updated_at': 'updated_at'
        }

        self._added_stage = added_stage
        self._archived_at = archived_at
        self._bounced_stage = bounced_stage
        self._cadence_framework_id = cadence_framework_id
        self._cadence_function = cadence_function
        self._cadence_priority = cadence_priority
        self._counts = counts
        self._created_at = created_at
        self._creator = creator
        self._draft = draft
        self._external_identifier = external_identifier
        self._finished_stage = finished_stage
        self._groups = groups
        self._id = id
        self._name = name
        self._opt_out_link_included = opt_out_link_included
        self._owner = owner
        self._remove_bounces_enabled = remove_bounces_enabled
        self._remove_replies_enabled = remove_replies_enabled
        self._replied_stage = replied_stage
        self._shared = shared
        self._tags = tags
        self._team_cadence = team_cadence
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cadence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cadence of this Cadence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_stage(self):
        """Gets the added_stage of this Cadence.


        :return: The added_stage of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._added_stage

    @added_stage.setter
    def added_stage(self, added_stage):
        """Sets the added_stage of this Cadence.


        :param added_stage: The added_stage of this Cadence.
        :type added_stage: EmbeddedResource
        """

        self._added_stage = added_stage

    @property
    def archived_at(self):
        """Gets the archived_at of this Cadence.

        Datetime of when the cadence was archived, if archived

        :return: The archived_at of this Cadence.
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this Cadence.

        Datetime of when the cadence was archived, if archived

        :param archived_at: The archived_at of this Cadence.
        :type archived_at: datetime
        """

        self._archived_at = archived_at

    @property
    def bounced_stage(self):
        """Gets the bounced_stage of this Cadence.


        :return: The bounced_stage of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._bounced_stage

    @bounced_stage.setter
    def bounced_stage(self, bounced_stage):
        """Sets the bounced_stage of this Cadence.


        :param bounced_stage: The bounced_stage of this Cadence.
        :type bounced_stage: EmbeddedResource
        """

        self._bounced_stage = bounced_stage

    @property
    def cadence_framework_id(self):
        """Gets the cadence_framework_id of this Cadence.

        ID of the cadence framework used to create steps for the cadence

        :return: The cadence_framework_id of this Cadence.
        :rtype: int
        """
        return self._cadence_framework_id

    @cadence_framework_id.setter
    def cadence_framework_id(self, cadence_framework_id):
        """Sets the cadence_framework_id of this Cadence.

        ID of the cadence framework used to create steps for the cadence

        :param cadence_framework_id: The cadence_framework_id of this Cadence.
        :type cadence_framework_id: int
        """

        self._cadence_framework_id = cadence_framework_id

    @property
    def cadence_function(self):
        """Gets the cadence_function of this Cadence.

        The use case of the cadence. Possible values are:  outbound: Denotes an outbound cadence, typically for sales purposes  inbound: Denotes an inbound sales cadence  event: Denotes a cadence used for an upcoming event  other: Denotes a cadence outside of the standard process 

        :return: The cadence_function of this Cadence.
        :rtype: str
        """
        return self._cadence_function

    @cadence_function.setter
    def cadence_function(self, cadence_function):
        """Sets the cadence_function of this Cadence.

        The use case of the cadence. Possible values are:  outbound: Denotes an outbound cadence, typically for sales purposes  inbound: Denotes an inbound sales cadence  event: Denotes a cadence used for an upcoming event  other: Denotes a cadence outside of the standard process 

        :param cadence_function: The cadence_function of this Cadence.
        :type cadence_function: str
        """

        self._cadence_function = cadence_function

    @property
    def cadence_priority(self):
        """Gets the cadence_priority of this Cadence.


        :return: The cadence_priority of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._cadence_priority

    @cadence_priority.setter
    def cadence_priority(self, cadence_priority):
        """Sets the cadence_priority of this Cadence.


        :param cadence_priority: The cadence_priority of this Cadence.
        :type cadence_priority: EmbeddedResource
        """

        self._cadence_priority = cadence_priority

    @property
    def counts(self):
        """Gets the counts of this Cadence.


        :return: The counts of this Cadence.
        :rtype: CadenceCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Cadence.


        :param counts: The counts of this Cadence.
        :type counts: CadenceCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this Cadence.

        Datetime of when the cadence was created

        :return: The created_at of this Cadence.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Cadence.

        Datetime of when the cadence was created

        :param created_at: The created_at of this Cadence.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def creator(self):
        """Gets the creator of this Cadence.


        :return: The creator of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Cadence.


        :param creator: The creator of this Cadence.
        :type creator: EmbeddedResource
        """

        self._creator = creator

    @property
    def draft(self):
        """Gets the draft of this Cadence.

        Whether this cadence is in draft mode

        :return: The draft of this Cadence.
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Cadence.

        Whether this cadence is in draft mode

        :param draft: The draft of this Cadence.
        :type draft: bool
        """

        self._draft = draft

    @property
    def external_identifier(self):
        """Gets the external_identifier of this Cadence.

        Cadence External ID

        :return: The external_identifier of this Cadence.
        :rtype: str
        """
        return self._external_identifier

    @external_identifier.setter
    def external_identifier(self, external_identifier):
        """Sets the external_identifier of this Cadence.

        Cadence External ID

        :param external_identifier: The external_identifier of this Cadence.
        :type external_identifier: str
        """

        self._external_identifier = external_identifier

    @property
    def finished_stage(self):
        """Gets the finished_stage of this Cadence.


        :return: The finished_stage of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._finished_stage

    @finished_stage.setter
    def finished_stage(self, finished_stage):
        """Sets the finished_stage of this Cadence.


        :param finished_stage: The finished_stage of this Cadence.
        :type finished_stage: EmbeddedResource
        """

        self._finished_stage = finished_stage

    @property
    def groups(self):
        """Gets the groups of this Cadence.

        Groups to which this cadence is assigned, if any

        :return: The groups of this Cadence.
        :rtype: List[EmbeddedResource]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Cadence.

        Groups to which this cadence is assigned, if any

        :param groups: The groups of this Cadence.
        :type groups: List[EmbeddedResource]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this Cadence.

        ID of cadence

        :return: The id of this Cadence.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cadence.

        ID of cadence

        :param id: The id of this Cadence.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Cadence.

        Cadence name

        :return: The name of this Cadence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cadence.

        Cadence name

        :param name: The name of this Cadence.
        :type name: str
        """

        self._name = name

    @property
    def opt_out_link_included(self):
        """Gets the opt_out_link_included of this Cadence.

        Whether this cadence is configured to include an opt-out link by default

        :return: The opt_out_link_included of this Cadence.
        :rtype: bool
        """
        return self._opt_out_link_included

    @opt_out_link_included.setter
    def opt_out_link_included(self, opt_out_link_included):
        """Sets the opt_out_link_included of this Cadence.

        Whether this cadence is configured to include an opt-out link by default

        :param opt_out_link_included: The opt_out_link_included of this Cadence.
        :type opt_out_link_included: bool
        """

        self._opt_out_link_included = opt_out_link_included

    @property
    def owner(self):
        """Gets the owner of this Cadence.


        :return: The owner of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Cadence.


        :param owner: The owner of this Cadence.
        :type owner: EmbeddedResource
        """

        self._owner = owner

    @property
    def remove_bounces_enabled(self):
        """Gets the remove_bounces_enabled of this Cadence.

        Whether this cadence is configured to automatically remove people who have bounced

        :return: The remove_bounces_enabled of this Cadence.
        :rtype: bool
        """
        return self._remove_bounces_enabled

    @remove_bounces_enabled.setter
    def remove_bounces_enabled(self, remove_bounces_enabled):
        """Sets the remove_bounces_enabled of this Cadence.

        Whether this cadence is configured to automatically remove people who have bounced

        :param remove_bounces_enabled: The remove_bounces_enabled of this Cadence.
        :type remove_bounces_enabled: bool
        """

        self._remove_bounces_enabled = remove_bounces_enabled

    @property
    def remove_replies_enabled(self):
        """Gets the remove_replies_enabled of this Cadence.

        Whether this cadence is configured to automatically remove people who have replied

        :return: The remove_replies_enabled of this Cadence.
        :rtype: bool
        """
        return self._remove_replies_enabled

    @remove_replies_enabled.setter
    def remove_replies_enabled(self, remove_replies_enabled):
        """Sets the remove_replies_enabled of this Cadence.

        Whether this cadence is configured to automatically remove people who have replied

        :param remove_replies_enabled: The remove_replies_enabled of this Cadence.
        :type remove_replies_enabled: bool
        """

        self._remove_replies_enabled = remove_replies_enabled

    @property
    def replied_stage(self):
        """Gets the replied_stage of this Cadence.


        :return: The replied_stage of this Cadence.
        :rtype: EmbeddedResource
        """
        return self._replied_stage

    @replied_stage.setter
    def replied_stage(self, replied_stage):
        """Sets the replied_stage of this Cadence.


        :param replied_stage: The replied_stage of this Cadence.
        :type replied_stage: EmbeddedResource
        """

        self._replied_stage = replied_stage

    @property
    def shared(self):
        """Gets the shared of this Cadence.

        Whether this cadence is visible to team members (shared)

        :return: The shared of this Cadence.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Cadence.

        Whether this cadence is visible to team members (shared)

        :param shared: The shared of this Cadence.
        :type shared: bool
        """

        self._shared = shared

    @property
    def tags(self):
        """Gets the tags of this Cadence.

        All tags applied to this cadence

        :return: The tags of this Cadence.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Cadence.

        All tags applied to this cadence

        :param tags: The tags of this Cadence.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def team_cadence(self):
        """Gets the team_cadence of this Cadence.

        Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users

        :return: The team_cadence of this Cadence.
        :rtype: bool
        """
        return self._team_cadence

    @team_cadence.setter
    def team_cadence(self, team_cadence):
        """Sets the team_cadence of this Cadence.

        Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users

        :param team_cadence: The team_cadence of this Cadence.
        :type team_cadence: bool
        """

        self._team_cadence = team_cadence

    @property
    def updated_at(self):
        """Gets the updated_at of this Cadence.

        Datetime of when the cadence was last updated

        :return: The updated_at of this Cadence.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Cadence.

        Datetime of when the cadence was last updated

        :param updated_at: The updated_at of this Cadence.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
