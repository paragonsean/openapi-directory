# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_counts import EmailCounts
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Email(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: EmbeddedResource=None, bounced: bool=None, cadence: EmbeddedResource=None, click_tracking: bool=None, counts: EmailCounts=None, created_at: datetime=None, crm_activity: EmbeddedResource=None, email_template: EmbeddedResource=None, error_message: str=None, headers: object=None, id: int=None, mailing: EmbeddedResource=None, personalization: str=None, recipient: EmbeddedResource=None, recipient_email_address: str=None, send_after: datetime=None, sent_at: datetime=None, status: str=None, step: EmbeddedResource=None, subject: str=None, task: EmbeddedResource=None, updated_at: datetime=None, user: EmbeddedResource=None, view_tracking: bool=None):
        """Email - a model defined in OpenAPI

        :param action: The action of this Email.
        :param bounced: The bounced of this Email.
        :param cadence: The cadence of this Email.
        :param click_tracking: The click_tracking of this Email.
        :param counts: The counts of this Email.
        :param created_at: The created_at of this Email.
        :param crm_activity: The crm_activity of this Email.
        :param email_template: The email_template of this Email.
        :param error_message: The error_message of this Email.
        :param headers: The headers of this Email.
        :param id: The id of this Email.
        :param mailing: The mailing of this Email.
        :param personalization: The personalization of this Email.
        :param recipient: The recipient of this Email.
        :param recipient_email_address: The recipient_email_address of this Email.
        :param send_after: The send_after of this Email.
        :param sent_at: The sent_at of this Email.
        :param status: The status of this Email.
        :param step: The step of this Email.
        :param subject: The subject of this Email.
        :param task: The task of this Email.
        :param updated_at: The updated_at of this Email.
        :param user: The user of this Email.
        :param view_tracking: The view_tracking of this Email.
        """
        self.openapi_types = {
            'action': EmbeddedResource,
            'bounced': bool,
            'cadence': EmbeddedResource,
            'click_tracking': bool,
            'counts': EmailCounts,
            'created_at': datetime,
            'crm_activity': EmbeddedResource,
            'email_template': EmbeddedResource,
            'error_message': str,
            'headers': object,
            'id': int,
            'mailing': EmbeddedResource,
            'personalization': str,
            'recipient': EmbeddedResource,
            'recipient_email_address': str,
            'send_after': datetime,
            'sent_at': datetime,
            'status': str,
            'step': EmbeddedResource,
            'subject': str,
            'task': EmbeddedResource,
            'updated_at': datetime,
            'user': EmbeddedResource,
            'view_tracking': bool
        }

        self.attribute_map = {
            'action': 'action',
            'bounced': 'bounced',
            'cadence': 'cadence',
            'click_tracking': 'click_tracking',
            'counts': 'counts',
            'created_at': 'created_at',
            'crm_activity': 'crm_activity',
            'email_template': 'email_template',
            'error_message': 'error_message',
            'headers': 'headers',
            'id': 'id',
            'mailing': 'mailing',
            'personalization': 'personalization',
            'recipient': 'recipient',
            'recipient_email_address': 'recipient_email_address',
            'send_after': 'send_after',
            'sent_at': 'sent_at',
            'status': 'status',
            'step': 'step',
            'subject': 'subject',
            'task': 'task',
            'updated_at': 'updated_at',
            'user': 'user',
            'view_tracking': 'view_tracking'
        }

        self._action = action
        self._bounced = bounced
        self._cadence = cadence
        self._click_tracking = click_tracking
        self._counts = counts
        self._created_at = created_at
        self._crm_activity = crm_activity
        self._email_template = email_template
        self._error_message = error_message
        self._headers = headers
        self._id = id
        self._mailing = mailing
        self._personalization = personalization
        self._recipient = recipient
        self._recipient_email_address = recipient_email_address
        self._send_after = send_after
        self._sent_at = sent_at
        self._status = status
        self._step = step
        self._subject = subject
        self._task = task
        self._updated_at = updated_at
        self._user = user
        self._view_tracking = view_tracking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Email':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Email of this Email.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Email.


        :return: The action of this Email.
        :rtype: EmbeddedResource
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Email.


        :param action: The action of this Email.
        :type action: EmbeddedResource
        """

        self._action = action

    @property
    def bounced(self):
        """Gets the bounced of this Email.

        Whether this email bounced

        :return: The bounced of this Email.
        :rtype: bool
        """
        return self._bounced

    @bounced.setter
    def bounced(self, bounced):
        """Sets the bounced of this Email.

        Whether this email bounced

        :param bounced: The bounced of this Email.
        :type bounced: bool
        """

        self._bounced = bounced

    @property
    def cadence(self):
        """Gets the cadence of this Email.


        :return: The cadence of this Email.
        :rtype: EmbeddedResource
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this Email.


        :param cadence: The cadence of this Email.
        :type cadence: EmbeddedResource
        """

        self._cadence = cadence

    @property
    def click_tracking(self):
        """Gets the click_tracking of this Email.

        Whether this email had click tracking enabled

        :return: The click_tracking of this Email.
        :rtype: bool
        """
        return self._click_tracking

    @click_tracking.setter
    def click_tracking(self, click_tracking):
        """Sets the click_tracking of this Email.

        Whether this email had click tracking enabled

        :param click_tracking: The click_tracking of this Email.
        :type click_tracking: bool
        """

        self._click_tracking = click_tracking

    @property
    def counts(self):
        """Gets the counts of this Email.


        :return: The counts of this Email.
        :rtype: EmailCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Email.


        :param counts: The counts of this Email.
        :type counts: EmailCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this Email.

        Datetime of when the email was created

        :return: The created_at of this Email.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Email.

        Datetime of when the email was created

        :param created_at: The created_at of this Email.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def crm_activity(self):
        """Gets the crm_activity of this Email.


        :return: The crm_activity of this Email.
        :rtype: EmbeddedResource
        """
        return self._crm_activity

    @crm_activity.setter
    def crm_activity(self, crm_activity):
        """Sets the crm_activity of this Email.


        :param crm_activity: The crm_activity of this Email.
        :type crm_activity: EmbeddedResource
        """

        self._crm_activity = crm_activity

    @property
    def email_template(self):
        """Gets the email_template of this Email.


        :return: The email_template of this Email.
        :rtype: EmbeddedResource
        """
        return self._email_template

    @email_template.setter
    def email_template(self, email_template):
        """Sets the email_template of this Email.


        :param email_template: The email_template of this Email.
        :type email_template: EmbeddedResource
        """

        self._email_template = email_template

    @property
    def error_message(self):
        """Gets the error_message of this Email.

        Error message of the email. This field has been determined sensitive and requires a specific scope to access it.

        :return: The error_message of this Email.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Email.

        Error message of the email. This field has been determined sensitive and requires a specific scope to access it.

        :param error_message: The error_message of this Email.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def headers(self):
        """Gets the headers of this Email.

        Selected headers that are included if this email used them. Available keys are: cc, bcc

        :return: The headers of this Email.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Email.

        Selected headers that are included if this email used them. Available keys are: cc, bcc

        :param headers: The headers of this Email.
        :type headers: object
        """

        self._headers = headers

    @property
    def id(self):
        """Gets the id of this Email.

        ID of Email

        :return: The id of this Email.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Email.

        ID of Email

        :param id: The id of this Email.
        :type id: int
        """

        self._id = id

    @property
    def mailing(self):
        """Gets the mailing of this Email.


        :return: The mailing of this Email.
        :rtype: EmbeddedResource
        """
        return self._mailing

    @mailing.setter
    def mailing(self, mailing):
        """Sets the mailing of this Email.


        :param mailing: The mailing of this Email.
        :type mailing: EmbeddedResource
        """

        self._mailing = mailing

    @property
    def personalization(self):
        """Gets the personalization of this Email.

        Percentage of this email that has been personalized

        :return: The personalization of this Email.
        :rtype: str
        """
        return self._personalization

    @personalization.setter
    def personalization(self, personalization):
        """Sets the personalization of this Email.

        Percentage of this email that has been personalized

        :param personalization: The personalization of this Email.
        :type personalization: str
        """

        self._personalization = personalization

    @property
    def recipient(self):
        """Gets the recipient of this Email.


        :return: The recipient of this Email.
        :rtype: EmbeddedResource
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this Email.


        :param recipient: The recipient of this Email.
        :type recipient: EmbeddedResource
        """

        self._recipient = recipient

    @property
    def recipient_email_address(self):
        """Gets the recipient_email_address of this Email.

        Email address of the recipient

        :return: The recipient_email_address of this Email.
        :rtype: str
        """
        return self._recipient_email_address

    @recipient_email_address.setter
    def recipient_email_address(self, recipient_email_address):
        """Sets the recipient_email_address of this Email.

        Email address of the recipient

        :param recipient_email_address: The recipient_email_address of this Email.
        :type recipient_email_address: str
        """

        self._recipient_email_address = recipient_email_address

    @property
    def send_after(self):
        """Gets the send_after of this Email.

        When this email will be sent, or null if already sent

        :return: The send_after of this Email.
        :rtype: datetime
        """
        return self._send_after

    @send_after.setter
    def send_after(self, send_after):
        """Sets the send_after of this Email.

        When this email will be sent, or null if already sent

        :param send_after: The send_after of this Email.
        :type send_after: datetime
        """

        self._send_after = send_after

    @property
    def sent_at(self):
        """Gets the sent_at of this Email.

        When this email was sent, or null if it was not sent

        :return: The sent_at of this Email.
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Email.

        When this email was sent, or null if it was not sent

        :param sent_at: The sent_at of this Email.
        :type sent_at: datetime
        """

        self._sent_at = sent_at

    @property
    def status(self):
        """Gets the status of this Email.

        Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external

        :return: The status of this Email.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Email.

        Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external

        :param status: The status of this Email.
        :type status: str
        """

        self._status = status

    @property
    def step(self):
        """Gets the step of this Email.


        :return: The step of this Email.
        :rtype: EmbeddedResource
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this Email.


        :param step: The step of this Email.
        :type step: EmbeddedResource
        """

        self._step = step

    @property
    def subject(self):
        """Gets the subject of this Email.

        Subject of the email. This field has been determined sensitive and requires a specific scope to access it.

        :return: The subject of this Email.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Email.

        Subject of the email. This field has been determined sensitive and requires a specific scope to access it.

        :param subject: The subject of this Email.
        :type subject: str
        """

        self._subject = subject

    @property
    def task(self):
        """Gets the task of this Email.


        :return: The task of this Email.
        :rtype: EmbeddedResource
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this Email.


        :param task: The task of this Email.
        :type task: EmbeddedResource
        """

        self._task = task

    @property
    def updated_at(self):
        """Gets the updated_at of this Email.

        Datetime of when the email was last updated

        :return: The updated_at of this Email.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Email.

        Datetime of when the email was last updated

        :param updated_at: The updated_at of this Email.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Email.


        :return: The user of this Email.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Email.


        :param user: The user of this Email.
        :type user: EmbeddedResource
        """

        self._user = user

    @property
    def view_tracking(self):
        """Gets the view_tracking of this Email.

        Whether this email had view tracking enabled

        :return: The view_tracking of this Email.
        :rtype: bool
        """
        return self._view_tracking

    @view_tracking.setter
    def view_tracking(self, view_tracking):
        """Sets the view_tracking of this Email.

        Whether this email had view tracking enabled

        :param view_tracking: The view_tracking of this Email.
        :type view_tracking: bool
        """

        self._view_tracking = view_tracking
