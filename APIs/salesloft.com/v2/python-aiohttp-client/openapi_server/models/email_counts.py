# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: int=None, clicks: int=None, replies: int=None, unique_devices: int=None, unique_locations: int=None, views: int=None):
        """EmailCounts - a model defined in OpenAPI

        :param attachments: The attachments of this EmailCounts.
        :param clicks: The clicks of this EmailCounts.
        :param replies: The replies of this EmailCounts.
        :param unique_devices: The unique_devices of this EmailCounts.
        :param unique_locations: The unique_locations of this EmailCounts.
        :param views: The views of this EmailCounts.
        """
        self.openapi_types = {
            'attachments': int,
            'clicks': int,
            'replies': int,
            'unique_devices': int,
            'unique_locations': int,
            'views': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'clicks': 'clicks',
            'replies': 'replies',
            'unique_devices': 'unique_devices',
            'unique_locations': 'unique_locations',
            'views': 'views'
        }

        self._attachments = attachments
        self._clicks = clicks
        self._replies = replies
        self._unique_devices = unique_devices
        self._unique_locations = unique_locations
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailCounts of this EmailCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this EmailCounts.

        The number of attachments on the email

        :return: The attachments of this EmailCounts.
        :rtype: int
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this EmailCounts.

        The number of attachments on the email

        :param attachments: The attachments of this EmailCounts.
        :type attachments: int
        """

        self._attachments = attachments

    @property
    def clicks(self):
        """Gets the clicks of this EmailCounts.

        The number of times links in the email were clicked

        :return: The clicks of this EmailCounts.
        :rtype: int
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this EmailCounts.

        The number of times links in the email were clicked

        :param clicks: The clicks of this EmailCounts.
        :type clicks: int
        """

        self._clicks = clicks

    @property
    def replies(self):
        """Gets the replies of this EmailCounts.

        The number of replies the email received

        :return: The replies of this EmailCounts.
        :rtype: int
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this EmailCounts.

        The number of replies the email received

        :param replies: The replies of this EmailCounts.
        :type replies: int
        """

        self._replies = replies

    @property
    def unique_devices(self):
        """Gets the unique_devices of this EmailCounts.

        The number of unique devices that opened the email

        :return: The unique_devices of this EmailCounts.
        :rtype: int
        """
        return self._unique_devices

    @unique_devices.setter
    def unique_devices(self, unique_devices):
        """Sets the unique_devices of this EmailCounts.

        The number of unique devices that opened the email

        :param unique_devices: The unique_devices of this EmailCounts.
        :type unique_devices: int
        """

        self._unique_devices = unique_devices

    @property
    def unique_locations(self):
        """Gets the unique_locations of this EmailCounts.

        The number of unique locations that opened the email

        :return: The unique_locations of this EmailCounts.
        :rtype: int
        """
        return self._unique_locations

    @unique_locations.setter
    def unique_locations(self, unique_locations):
        """Sets the unique_locations of this EmailCounts.

        The number of unique locations that opened the email

        :param unique_locations: The unique_locations of this EmailCounts.
        :type unique_locations: int
        """

        self._unique_locations = unique_locations

    @property
    def views(self):
        """Gets the views of this EmailCounts.

        The number of times the email was opened

        :return: The views of this EmailCounts.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this EmailCounts.

        The number of times the email was opened

        :param views: The views of this EmailCounts.
        :type views: int
        """

        self._views = views
