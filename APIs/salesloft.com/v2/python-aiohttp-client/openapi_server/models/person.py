# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server.models.person_counts import PersonCounts
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: EmbeddedResource=None, bouncing: bool=None, cadences: List[EmbeddedResource]=None, city: str=None, contact_restrictions: List[str]=None, country: str=None, counts: PersonCounts=None, created_at: datetime=None, crm_id: str=None, crm_object_type: str=None, crm_url: str=None, custom_fields: object=None, display_name: str=None, do_not_contact: bool=None, email_address: str=None, eu_resident: bool=None, first_name: str=None, full_email_address: str=None, home_phone: str=None, id: int=None, _import: EmbeddedResource=None, job_seniority: str=None, last_completed_step: EmbeddedResource=None, last_completed_step_cadence: EmbeddedResource=None, last_contacted_at: datetime=None, last_contacted_by: EmbeddedResource=None, last_contacted_type: str=None, last_name: str=None, last_replied_at: datetime=None, linkedin_url: str=None, locale: str=None, locale_utc_offset: int=None, mobile_phone: str=None, most_recent_cadence: EmbeddedResource=None, owner: EmbeddedResource=None, owner_crm_id: str=None, person_company_industry: str=None, person_company_name: str=None, person_company_website: str=None, person_stage: EmbeddedResource=None, personal_email_address: str=None, personal_website: str=None, phone: str=None, phone_extension: str=None, secondary_email_address: str=None, starred: bool=None, state: str=None, success_count: int=None, tags: List[str]=None, title: str=None, twitter_handle: str=None, untouched: bool=None, updated_at: datetime=None, work_city: str=None, work_country: str=None, work_state: str=None):
        """Person - a model defined in OpenAPI

        :param account: The account of this Person.
        :param bouncing: The bouncing of this Person.
        :param cadences: The cadences of this Person.
        :param city: The city of this Person.
        :param contact_restrictions: The contact_restrictions of this Person.
        :param country: The country of this Person.
        :param counts: The counts of this Person.
        :param created_at: The created_at of this Person.
        :param crm_id: The crm_id of this Person.
        :param crm_object_type: The crm_object_type of this Person.
        :param crm_url: The crm_url of this Person.
        :param custom_fields: The custom_fields of this Person.
        :param display_name: The display_name of this Person.
        :param do_not_contact: The do_not_contact of this Person.
        :param email_address: The email_address of this Person.
        :param eu_resident: The eu_resident of this Person.
        :param first_name: The first_name of this Person.
        :param full_email_address: The full_email_address of this Person.
        :param home_phone: The home_phone of this Person.
        :param id: The id of this Person.
        :param _import: The _import of this Person.
        :param job_seniority: The job_seniority of this Person.
        :param last_completed_step: The last_completed_step of this Person.
        :param last_completed_step_cadence: The last_completed_step_cadence of this Person.
        :param last_contacted_at: The last_contacted_at of this Person.
        :param last_contacted_by: The last_contacted_by of this Person.
        :param last_contacted_type: The last_contacted_type of this Person.
        :param last_name: The last_name of this Person.
        :param last_replied_at: The last_replied_at of this Person.
        :param linkedin_url: The linkedin_url of this Person.
        :param locale: The locale of this Person.
        :param locale_utc_offset: The locale_utc_offset of this Person.
        :param mobile_phone: The mobile_phone of this Person.
        :param most_recent_cadence: The most_recent_cadence of this Person.
        :param owner: The owner of this Person.
        :param owner_crm_id: The owner_crm_id of this Person.
        :param person_company_industry: The person_company_industry of this Person.
        :param person_company_name: The person_company_name of this Person.
        :param person_company_website: The person_company_website of this Person.
        :param person_stage: The person_stage of this Person.
        :param personal_email_address: The personal_email_address of this Person.
        :param personal_website: The personal_website of this Person.
        :param phone: The phone of this Person.
        :param phone_extension: The phone_extension of this Person.
        :param secondary_email_address: The secondary_email_address of this Person.
        :param starred: The starred of this Person.
        :param state: The state of this Person.
        :param success_count: The success_count of this Person.
        :param tags: The tags of this Person.
        :param title: The title of this Person.
        :param twitter_handle: The twitter_handle of this Person.
        :param untouched: The untouched of this Person.
        :param updated_at: The updated_at of this Person.
        :param work_city: The work_city of this Person.
        :param work_country: The work_country of this Person.
        :param work_state: The work_state of this Person.
        """
        self.openapi_types = {
            'account': EmbeddedResource,
            'bouncing': bool,
            'cadences': List[EmbeddedResource],
            'city': str,
            'contact_restrictions': List[str],
            'country': str,
            'counts': PersonCounts,
            'created_at': datetime,
            'crm_id': str,
            'crm_object_type': str,
            'crm_url': str,
            'custom_fields': object,
            'display_name': str,
            'do_not_contact': bool,
            'email_address': str,
            'eu_resident': bool,
            'first_name': str,
            'full_email_address': str,
            'home_phone': str,
            'id': int,
            '_import': EmbeddedResource,
            'job_seniority': str,
            'last_completed_step': EmbeddedResource,
            'last_completed_step_cadence': EmbeddedResource,
            'last_contacted_at': datetime,
            'last_contacted_by': EmbeddedResource,
            'last_contacted_type': str,
            'last_name': str,
            'last_replied_at': datetime,
            'linkedin_url': str,
            'locale': str,
            'locale_utc_offset': int,
            'mobile_phone': str,
            'most_recent_cadence': EmbeddedResource,
            'owner': EmbeddedResource,
            'owner_crm_id': str,
            'person_company_industry': str,
            'person_company_name': str,
            'person_company_website': str,
            'person_stage': EmbeddedResource,
            'personal_email_address': str,
            'personal_website': str,
            'phone': str,
            'phone_extension': str,
            'secondary_email_address': str,
            'starred': bool,
            'state': str,
            'success_count': int,
            'tags': List[str],
            'title': str,
            'twitter_handle': str,
            'untouched': bool,
            'updated_at': datetime,
            'work_city': str,
            'work_country': str,
            'work_state': str
        }

        self.attribute_map = {
            'account': 'account',
            'bouncing': 'bouncing',
            'cadences': 'cadences',
            'city': 'city',
            'contact_restrictions': 'contact_restrictions',
            'country': 'country',
            'counts': 'counts',
            'created_at': 'created_at',
            'crm_id': 'crm_id',
            'crm_object_type': 'crm_object_type',
            'crm_url': 'crm_url',
            'custom_fields': 'custom_fields',
            'display_name': 'display_name',
            'do_not_contact': 'do_not_contact',
            'email_address': 'email_address',
            'eu_resident': 'eu_resident',
            'first_name': 'first_name',
            'full_email_address': 'full_email_address',
            'home_phone': 'home_phone',
            'id': 'id',
            '_import': 'import',
            'job_seniority': 'job_seniority',
            'last_completed_step': 'last_completed_step',
            'last_completed_step_cadence': 'last_completed_step_cadence',
            'last_contacted_at': 'last_contacted_at',
            'last_contacted_by': 'last_contacted_by',
            'last_contacted_type': 'last_contacted_type',
            'last_name': 'last_name',
            'last_replied_at': 'last_replied_at',
            'linkedin_url': 'linkedin_url',
            'locale': 'locale',
            'locale_utc_offset': 'locale_utc_offset',
            'mobile_phone': 'mobile_phone',
            'most_recent_cadence': 'most_recent_cadence',
            'owner': 'owner',
            'owner_crm_id': 'owner_crm_id',
            'person_company_industry': 'person_company_industry',
            'person_company_name': 'person_company_name',
            'person_company_website': 'person_company_website',
            'person_stage': 'person_stage',
            'personal_email_address': 'personal_email_address',
            'personal_website': 'personal_website',
            'phone': 'phone',
            'phone_extension': 'phone_extension',
            'secondary_email_address': 'secondary_email_address',
            'starred': 'starred',
            'state': 'state',
            'success_count': 'success_count',
            'tags': 'tags',
            'title': 'title',
            'twitter_handle': 'twitter_handle',
            'untouched': 'untouched',
            'updated_at': 'updated_at',
            'work_city': 'work_city',
            'work_country': 'work_country',
            'work_state': 'work_state'
        }

        self._account = account
        self._bouncing = bouncing
        self._cadences = cadences
        self._city = city
        self._contact_restrictions = contact_restrictions
        self._country = country
        self._counts = counts
        self._created_at = created_at
        self._crm_id = crm_id
        self._crm_object_type = crm_object_type
        self._crm_url = crm_url
        self._custom_fields = custom_fields
        self._display_name = display_name
        self._do_not_contact = do_not_contact
        self._email_address = email_address
        self._eu_resident = eu_resident
        self._first_name = first_name
        self._full_email_address = full_email_address
        self._home_phone = home_phone
        self._id = id
        self.__import = _import
        self._job_seniority = job_seniority
        self._last_completed_step = last_completed_step
        self._last_completed_step_cadence = last_completed_step_cadence
        self._last_contacted_at = last_contacted_at
        self._last_contacted_by = last_contacted_by
        self._last_contacted_type = last_contacted_type
        self._last_name = last_name
        self._last_replied_at = last_replied_at
        self._linkedin_url = linkedin_url
        self._locale = locale
        self._locale_utc_offset = locale_utc_offset
        self._mobile_phone = mobile_phone
        self._most_recent_cadence = most_recent_cadence
        self._owner = owner
        self._owner_crm_id = owner_crm_id
        self._person_company_industry = person_company_industry
        self._person_company_name = person_company_name
        self._person_company_website = person_company_website
        self._person_stage = person_stage
        self._personal_email_address = personal_email_address
        self._personal_website = personal_website
        self._phone = phone
        self._phone_extension = phone_extension
        self._secondary_email_address = secondary_email_address
        self._starred = starred
        self._state = state
        self._success_count = success_count
        self._tags = tags
        self._title = title
        self._twitter_handle = twitter_handle
        self._untouched = untouched
        self._updated_at = updated_at
        self._work_city = work_city
        self._work_country = work_country
        self._work_state = work_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Person.


        :return: The account of this Person.
        :rtype: EmbeddedResource
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Person.


        :param account: The account of this Person.
        :type account: EmbeddedResource
        """

        self._account = account

    @property
    def bouncing(self):
        """Gets the bouncing of this Person.

        Whether this person's current email address has bounced

        :return: The bouncing of this Person.
        :rtype: bool
        """
        return self._bouncing

    @bouncing.setter
    def bouncing(self, bouncing):
        """Sets the bouncing of this Person.

        Whether this person's current email address has bounced

        :param bouncing: The bouncing of this Person.
        :type bouncing: bool
        """

        self._bouncing = bouncing

    @property
    def cadences(self):
        """Gets the cadences of this Person.

        The list of active cadences person is added to

        :return: The cadences of this Person.
        :rtype: List[EmbeddedResource]
        """
        return self._cadences

    @cadences.setter
    def cadences(self, cadences):
        """Sets the cadences of this Person.

        The list of active cadences person is added to

        :param cadences: The cadences of this Person.
        :type cadences: List[EmbeddedResource]
        """

        self._cadences = cadences

    @property
    def city(self):
        """Gets the city of this Person.

        City

        :return: The city of this Person.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Person.

        City

        :param city: The city of this Person.
        :type city: str
        """

        self._city = city

    @property
    def contact_restrictions(self):
        """Gets the contact_restrictions of this Person.

        Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message

        :return: The contact_restrictions of this Person.
        :rtype: List[str]
        """
        return self._contact_restrictions

    @contact_restrictions.setter
    def contact_restrictions(self, contact_restrictions):
        """Sets the contact_restrictions of this Person.

        Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message

        :param contact_restrictions: The contact_restrictions of this Person.
        :type contact_restrictions: List[str]
        """

        self._contact_restrictions = contact_restrictions

    @property
    def country(self):
        """Gets the country of this Person.

        Country

        :return: The country of this Person.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Person.

        Country

        :param country: The country of this Person.
        :type country: str
        """

        self._country = country

    @property
    def counts(self):
        """Gets the counts of this Person.


        :return: The counts of this Person.
        :rtype: PersonCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Person.


        :param counts: The counts of this Person.
        :type counts: PersonCounts
        """

        self._counts = counts

    @property
    def created_at(self):
        """Gets the created_at of this Person.

        Datetime of when the person was created

        :return: The created_at of this Person.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Person.

        Datetime of when the person was created

        :param created_at: The created_at of this Person.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def crm_id(self):
        """Gets the crm_id of this Person.

        CRM ID

        :return: The crm_id of this Person.
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Person.

        CRM ID

        :param crm_id: The crm_id of this Person.
        :type crm_id: str
        """

        self._crm_id = crm_id

    @property
    def crm_object_type(self):
        """Gets the crm_object_type of this Person.

        CRM object type

        :return: The crm_object_type of this Person.
        :rtype: str
        """
        return self._crm_object_type

    @crm_object_type.setter
    def crm_object_type(self, crm_object_type):
        """Sets the crm_object_type of this Person.

        CRM object type

        :param crm_object_type: The crm_object_type of this Person.
        :type crm_object_type: str
        """

        self._crm_object_type = crm_object_type

    @property
    def crm_url(self):
        """Gets the crm_url of this Person.

        CRM url

        :return: The crm_url of this Person.
        :rtype: str
        """
        return self._crm_url

    @crm_url.setter
    def crm_url(self, crm_url):
        """Sets the crm_url of this Person.

        CRM url

        :param crm_url: The crm_url of this Person.
        :type crm_url: str
        """

        self._crm_url = crm_url

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Person.

        Custom fields are defined by the user's team. Only fields with values are presented in the API.

        :return: The custom_fields of this Person.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Person.

        Custom fields are defined by the user's team. Only fields with values are presented in the API.

        :param custom_fields: The custom_fields of this Person.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def display_name(self):
        """Gets the display_name of this Person.

        Either the full name or the email address. Use this when showing a person's name

        :return: The display_name of this Person.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Person.

        Either the full name or the email address. Use this when showing a person's name

        :param display_name: The display_name of this Person.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def do_not_contact(self):
        """Gets the do_not_contact of this Person.

        Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.

        :return: The do_not_contact of this Person.
        :rtype: bool
        """
        return self._do_not_contact

    @do_not_contact.setter
    def do_not_contact(self, do_not_contact):
        """Sets the do_not_contact of this Person.

        Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.

        :param do_not_contact: The do_not_contact of this Person.
        :type do_not_contact: bool
        """

        self._do_not_contact = do_not_contact

    @property
    def email_address(self):
        """Gets the email_address of this Person.

        Email address

        :return: The email_address of this Person.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Person.

        Email address

        :param email_address: The email_address of this Person.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def eu_resident(self):
        """Gets the eu_resident of this Person.

        Whether this person is marked as a European Union Resident or not

        :return: The eu_resident of this Person.
        :rtype: bool
        """
        return self._eu_resident

    @eu_resident.setter
    def eu_resident(self, eu_resident):
        """Sets the eu_resident of this Person.

        Whether this person is marked as a European Union Resident or not

        :param eu_resident: The eu_resident of this Person.
        :type eu_resident: bool
        """

        self._eu_resident = eu_resident

    @property
    def first_name(self):
        """Gets the first_name of this Person.

        First name

        :return: The first_name of this Person.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.

        First name

        :param first_name: The first_name of this Person.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_email_address(self):
        """Gets the full_email_address of this Person.

        Full email address with name

        :return: The full_email_address of this Person.
        :rtype: str
        """
        return self._full_email_address

    @full_email_address.setter
    def full_email_address(self, full_email_address):
        """Sets the full_email_address of this Person.

        Full email address with name

        :param full_email_address: The full_email_address of this Person.
        :type full_email_address: str
        """

        self._full_email_address = full_email_address

    @property
    def home_phone(self):
        """Gets the home_phone of this Person.

        Home phone without formatting

        :return: The home_phone of this Person.
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Person.

        Home phone without formatting

        :param home_phone: The home_phone of this Person.
        :type home_phone: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this Person.

        Person ID

        :return: The id of this Person.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        Person ID

        :param id: The id of this Person.
        :type id: int
        """

        self._id = id

    @property
    def _import(self):
        """Gets the _import of this Person.


        :return: The _import of this Person.
        :rtype: EmbeddedResource
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this Person.


        :param _import: The _import of this Person.
        :type _import: EmbeddedResource
        """

        self.__import = _import

    @property
    def job_seniority(self):
        """Gets the job_seniority of this Person.

        The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown

        :return: The job_seniority of this Person.
        :rtype: str
        """
        return self._job_seniority

    @job_seniority.setter
    def job_seniority(self, job_seniority):
        """Sets the job_seniority of this Person.

        The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown

        :param job_seniority: The job_seniority of this Person.
        :type job_seniority: str
        """

        self._job_seniority = job_seniority

    @property
    def last_completed_step(self):
        """Gets the last_completed_step of this Person.


        :return: The last_completed_step of this Person.
        :rtype: EmbeddedResource
        """
        return self._last_completed_step

    @last_completed_step.setter
    def last_completed_step(self, last_completed_step):
        """Sets the last_completed_step of this Person.


        :param last_completed_step: The last_completed_step of this Person.
        :type last_completed_step: EmbeddedResource
        """

        self._last_completed_step = last_completed_step

    @property
    def last_completed_step_cadence(self):
        """Gets the last_completed_step_cadence of this Person.


        :return: The last_completed_step_cadence of this Person.
        :rtype: EmbeddedResource
        """
        return self._last_completed_step_cadence

    @last_completed_step_cadence.setter
    def last_completed_step_cadence(self, last_completed_step_cadence):
        """Sets the last_completed_step_cadence of this Person.


        :param last_completed_step_cadence: The last_completed_step_cadence of this Person.
        :type last_completed_step_cadence: EmbeddedResource
        """

        self._last_completed_step_cadence = last_completed_step_cadence

    @property
    def last_contacted_at(self):
        """Gets the last_contacted_at of this Person.

        Last datetime this person was contacted

        :return: The last_contacted_at of this Person.
        :rtype: datetime
        """
        return self._last_contacted_at

    @last_contacted_at.setter
    def last_contacted_at(self, last_contacted_at):
        """Sets the last_contacted_at of this Person.

        Last datetime this person was contacted

        :param last_contacted_at: The last_contacted_at of this Person.
        :type last_contacted_at: datetime
        """

        self._last_contacted_at = last_contacted_at

    @property
    def last_contacted_by(self):
        """Gets the last_contacted_by of this Person.


        :return: The last_contacted_by of this Person.
        :rtype: EmbeddedResource
        """
        return self._last_contacted_by

    @last_contacted_by.setter
    def last_contacted_by(self, last_contacted_by):
        """Sets the last_contacted_by of this Person.


        :param last_contacted_by: The last_contacted_by of this Person.
        :type last_contacted_by: EmbeddedResource
        """

        self._last_contacted_by = last_contacted_by

    @property
    def last_contacted_type(self):
        """Gets the last_contacted_type of this Person.

        The type of the last touch to this person. Can be call, email, other

        :return: The last_contacted_type of this Person.
        :rtype: str
        """
        return self._last_contacted_type

    @last_contacted_type.setter
    def last_contacted_type(self, last_contacted_type):
        """Sets the last_contacted_type of this Person.

        The type of the last touch to this person. Can be call, email, other

        :param last_contacted_type: The last_contacted_type of this Person.
        :type last_contacted_type: str
        """

        self._last_contacted_type = last_contacted_type

    @property
    def last_name(self):
        """Gets the last_name of this Person.

        Last name

        :return: The last_name of this Person.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.

        Last name

        :param last_name: The last_name of this Person.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def last_replied_at(self):
        """Gets the last_replied_at of this Person.

        Last datetime this person replied to an email

        :return: The last_replied_at of this Person.
        :rtype: datetime
        """
        return self._last_replied_at

    @last_replied_at.setter
    def last_replied_at(self, last_replied_at):
        """Sets the last_replied_at of this Person.

        Last datetime this person replied to an email

        :param last_replied_at: The last_replied_at of this Person.
        :type last_replied_at: datetime
        """

        self._last_replied_at = last_replied_at

    @property
    def linkedin_url(self):
        """Gets the linkedin_url of this Person.

        Linkedin URL

        :return: The linkedin_url of this Person.
        :rtype: str
        """
        return self._linkedin_url

    @linkedin_url.setter
    def linkedin_url(self, linkedin_url):
        """Sets the linkedin_url of this Person.

        Linkedin URL

        :param linkedin_url: The linkedin_url of this Person.
        :type linkedin_url: str
        """

        self._linkedin_url = linkedin_url

    @property
    def locale(self):
        """Gets the locale of this Person.

        Time locale of the person

        :return: The locale of this Person.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Person.

        Time locale of the person

        :param locale: The locale of this Person.
        :type locale: str
        """

        self._locale = locale

    @property
    def locale_utc_offset(self):
        """Gets the locale_utc_offset of this Person.

        The locale's timezone offset from UTC in minutes

        :return: The locale_utc_offset of this Person.
        :rtype: int
        """
        return self._locale_utc_offset

    @locale_utc_offset.setter
    def locale_utc_offset(self, locale_utc_offset):
        """Sets the locale_utc_offset of this Person.

        The locale's timezone offset from UTC in minutes

        :param locale_utc_offset: The locale_utc_offset of this Person.
        :type locale_utc_offset: int
        """

        self._locale_utc_offset = locale_utc_offset

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this Person.

        Mobile phone without formatting

        :return: The mobile_phone of this Person.
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this Person.

        Mobile phone without formatting

        :param mobile_phone: The mobile_phone of this Person.
        :type mobile_phone: str
        """

        self._mobile_phone = mobile_phone

    @property
    def most_recent_cadence(self):
        """Gets the most_recent_cadence of this Person.


        :return: The most_recent_cadence of this Person.
        :rtype: EmbeddedResource
        """
        return self._most_recent_cadence

    @most_recent_cadence.setter
    def most_recent_cadence(self, most_recent_cadence):
        """Sets the most_recent_cadence of this Person.


        :param most_recent_cadence: The most_recent_cadence of this Person.
        :type most_recent_cadence: EmbeddedResource
        """

        self._most_recent_cadence = most_recent_cadence

    @property
    def owner(self):
        """Gets the owner of this Person.


        :return: The owner of this Person.
        :rtype: EmbeddedResource
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Person.


        :param owner: The owner of this Person.
        :type owner: EmbeddedResource
        """

        self._owner = owner

    @property
    def owner_crm_id(self):
        """Gets the owner_crm_id of this Person.

        Mapped owner field from your CRM

        :return: The owner_crm_id of this Person.
        :rtype: str
        """
        return self._owner_crm_id

    @owner_crm_id.setter
    def owner_crm_id(self, owner_crm_id):
        """Sets the owner_crm_id of this Person.

        Mapped owner field from your CRM

        :param owner_crm_id: The owner_crm_id of this Person.
        :type owner_crm_id: str
        """

        self._owner_crm_id = owner_crm_id

    @property
    def person_company_industry(self):
        """Gets the person_company_industry of this Person.

        Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :return: The person_company_industry of this Person.
        :rtype: str
        """
        return self._person_company_industry

    @person_company_industry.setter
    def person_company_industry(self, person_company_industry):
        """Sets the person_company_industry of this Person.

        Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :param person_company_industry: The person_company_industry of this Person.
        :type person_company_industry: str
        """

        self._person_company_industry = person_company_industry

    @property
    def person_company_name(self):
        """Gets the person_company_name of this Person.

        Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :return: The person_company_name of this Person.
        :rtype: str
        """
        return self._person_company_name

    @person_company_name.setter
    def person_company_name(self, person_company_name):
        """Sets the person_company_name of this Person.

        Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :param person_company_name: The person_company_name of this Person.
        :type person_company_name: str
        """

        self._person_company_name = person_company_name

    @property
    def person_company_website(self):
        """Gets the person_company_website of this Person.

        Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :return: The person_company_website of this Person.
        :rtype: str
        """
        return self._person_company_website

    @person_company_website.setter
    def person_company_website(self, person_company_website):
        """Sets the person_company_website of this Person.

        Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended

        :param person_company_website: The person_company_website of this Person.
        :type person_company_website: str
        """

        self._person_company_website = person_company_website

    @property
    def person_stage(self):
        """Gets the person_stage of this Person.


        :return: The person_stage of this Person.
        :rtype: EmbeddedResource
        """
        return self._person_stage

    @person_stage.setter
    def person_stage(self, person_stage):
        """Sets the person_stage of this Person.


        :param person_stage: The person_stage of this Person.
        :type person_stage: EmbeddedResource
        """

        self._person_stage = person_stage

    @property
    def personal_email_address(self):
        """Gets the personal_email_address of this Person.

        Personal email address

        :return: The personal_email_address of this Person.
        :rtype: str
        """
        return self._personal_email_address

    @personal_email_address.setter
    def personal_email_address(self, personal_email_address):
        """Sets the personal_email_address of this Person.

        Personal email address

        :param personal_email_address: The personal_email_address of this Person.
        :type personal_email_address: str
        """

        self._personal_email_address = personal_email_address

    @property
    def personal_website(self):
        """Gets the personal_website of this Person.

        The website of this person

        :return: The personal_website of this Person.
        :rtype: str
        """
        return self._personal_website

    @personal_website.setter
    def personal_website(self, personal_website):
        """Sets the personal_website of this Person.

        The website of this person

        :param personal_website: The personal_website of this Person.
        :type personal_website: str
        """

        self._personal_website = personal_website

    @property
    def phone(self):
        """Gets the phone of this Person.

        Phone without formatting

        :return: The phone of this Person.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Person.

        Phone without formatting

        :param phone: The phone of this Person.
        :type phone: str
        """

        self._phone = phone

    @property
    def phone_extension(self):
        """Gets the phone_extension of this Person.

        Phone extension without formatting

        :return: The phone_extension of this Person.
        :rtype: str
        """
        return self._phone_extension

    @phone_extension.setter
    def phone_extension(self, phone_extension):
        """Sets the phone_extension of this Person.

        Phone extension without formatting

        :param phone_extension: The phone_extension of this Person.
        :type phone_extension: str
        """

        self._phone_extension = phone_extension

    @property
    def secondary_email_address(self):
        """Gets the secondary_email_address of this Person.

        Alternate email address

        :return: The secondary_email_address of this Person.
        :rtype: str
        """
        return self._secondary_email_address

    @secondary_email_address.setter
    def secondary_email_address(self, secondary_email_address):
        """Sets the secondary_email_address of this Person.

        Alternate email address

        :param secondary_email_address: The secondary_email_address of this Person.
        :type secondary_email_address: str
        """

        self._secondary_email_address = secondary_email_address

    @property
    def starred(self):
        """Gets the starred of this Person.

        Whether this person is starred by the current user

        :return: The starred of this Person.
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this Person.

        Whether this person is starred by the current user

        :param starred: The starred of this Person.
        :type starred: bool
        """

        self._starred = starred

    @property
    def state(self):
        """Gets the state of this Person.

        State

        :return: The state of this Person.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Person.

        State

        :param state: The state of this Person.
        :type state: str
        """

        self._state = state

    @property
    def success_count(self):
        """Gets the success_count of this Person.

        The person's success count. 1 if person has any active successes, 0 otherwise.

        :return: The success_count of this Person.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this Person.

        The person's success count. 1 if person has any active successes, 0 otherwise.

        :param success_count: The success_count of this Person.
        :type success_count: int
        """

        self._success_count = success_count

    @property
    def tags(self):
        """Gets the tags of this Person.

        All tags applied to this person

        :return: The tags of this Person.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Person.

        All tags applied to this person

        :param tags: The tags of this Person.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this Person.

        Job title

        :return: The title of this Person.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Person.

        Job title

        :param title: The title of this Person.
        :type title: str
        """

        self._title = title

    @property
    def twitter_handle(self):
        """Gets the twitter_handle of this Person.

        The twitter handle of this person

        :return: The twitter_handle of this Person.
        :rtype: str
        """
        return self._twitter_handle

    @twitter_handle.setter
    def twitter_handle(self, twitter_handle):
        """Sets the twitter_handle of this Person.

        The twitter handle of this person

        :param twitter_handle: The twitter_handle of this Person.
        :type twitter_handle: str
        """

        self._twitter_handle = twitter_handle

    @property
    def untouched(self):
        """Gets the untouched of this Person.

        The person's untouched status

        :return: The untouched of this Person.
        :rtype: bool
        """
        return self._untouched

    @untouched.setter
    def untouched(self, untouched):
        """Sets the untouched of this Person.

        The person's untouched status

        :param untouched: The untouched of this Person.
        :type untouched: bool
        """

        self._untouched = untouched

    @property
    def updated_at(self):
        """Gets the updated_at of this Person.

        Datetime of when the person was last updated

        :return: The updated_at of this Person.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Person.

        Datetime of when the person was last updated

        :param updated_at: The updated_at of this Person.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def work_city(self):
        """Gets the work_city of this Person.

        Work location - city

        :return: The work_city of this Person.
        :rtype: str
        """
        return self._work_city

    @work_city.setter
    def work_city(self, work_city):
        """Sets the work_city of this Person.

        Work location - city

        :param work_city: The work_city of this Person.
        :type work_city: str
        """

        self._work_city = work_city

    @property
    def work_country(self):
        """Gets the work_country of this Person.

        Work location - country

        :return: The work_country of this Person.
        :rtype: str
        """
        return self._work_country

    @work_country.setter
    def work_country(self, work_country):
        """Sets the work_country of this Person.

        Work location - country

        :param work_country: The work_country of this Person.
        :type work_country: str
        """

        self._work_country = work_country

    @property
    def work_state(self):
        """Gets the work_state of this Person.

        Work location - state

        :return: The work_state of this Person.
        :rtype: str
        """
        return self._work_state

    @work_state.setter
    def work_state(self, work_state):
        """Sets the work_state of this Person.

        Work location - state

        :param work_state: The work_state of this Person.
        :type work_state: str
        """

        self._work_state = work_state
