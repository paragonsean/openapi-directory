# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuccessCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_calls: int=None, total_emails: int=None, total_other_touches: int=None):
        """SuccessCounts - a model defined in OpenAPI

        :param total_calls: The total_calls of this SuccessCounts.
        :param total_emails: The total_emails of this SuccessCounts.
        :param total_other_touches: The total_other_touches of this SuccessCounts.
        """
        self.openapi_types = {
            'total_calls': int,
            'total_emails': int,
            'total_other_touches': int
        }

        self.attribute_map = {
            'total_calls': 'total_calls',
            'total_emails': 'total_emails',
            'total_other_touches': 'total_other_touches'
        }

        self._total_calls = total_calls
        self._total_emails = total_emails
        self._total_other_touches = total_other_touches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuccessCounts of this SuccessCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_calls(self):
        """Gets the total_calls of this SuccessCounts.

        The total number of calls made in this success window

        :return: The total_calls of this SuccessCounts.
        :rtype: int
        """
        return self._total_calls

    @total_calls.setter
    def total_calls(self, total_calls):
        """Sets the total_calls of this SuccessCounts.

        The total number of calls made in this success window

        :param total_calls: The total_calls of this SuccessCounts.
        :type total_calls: int
        """

        self._total_calls = total_calls

    @property
    def total_emails(self):
        """Gets the total_emails of this SuccessCounts.

        The total number of emails made in this success window

        :return: The total_emails of this SuccessCounts.
        :rtype: int
        """
        return self._total_emails

    @total_emails.setter
    def total_emails(self, total_emails):
        """Sets the total_emails of this SuccessCounts.

        The total number of emails made in this success window

        :param total_emails: The total_emails of this SuccessCounts.
        :type total_emails: int
        """

        self._total_emails = total_emails

    @property
    def total_other_touches(self):
        """Gets the total_other_touches of this SuccessCounts.

        The total number of other touches made in this success window

        :return: The total_other_touches of this SuccessCounts.
        :rtype: int
        """
        return self._total_other_touches

    @total_other_touches.setter
    def total_other_touches(self, total_other_touches):
        """Sets the total_other_touches of this SuccessCounts.

        The total number of other touches made in this success window

        :param total_other_touches: The total_other_touches of this SuccessCounts.
        :type total_other_touches: int
        """

        self._total_other_touches = total_other_touches
