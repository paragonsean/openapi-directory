# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_token: str=None, callback_url: str=None, enabled: bool=None, event_type: str=None, id: int=None, tenant_id: int=None, user_guid: str=None):
        """Subscription - a model defined in OpenAPI

        :param callback_token: The callback_token of this Subscription.
        :param callback_url: The callback_url of this Subscription.
        :param enabled: The enabled of this Subscription.
        :param event_type: The event_type of this Subscription.
        :param id: The id of this Subscription.
        :param tenant_id: The tenant_id of this Subscription.
        :param user_guid: The user_guid of this Subscription.
        """
        self.openapi_types = {
            'callback_token': str,
            'callback_url': str,
            'enabled': bool,
            'event_type': str,
            'id': int,
            'tenant_id': int,
            'user_guid': str
        }

        self.attribute_map = {
            'callback_token': 'callback_token',
            'callback_url': 'callback_url',
            'enabled': 'enabled',
            'event_type': 'event_type',
            'id': 'id',
            'tenant_id': 'tenant_id',
            'user_guid': 'user_guid'
        }

        self._callback_token = callback_token
        self._callback_url = callback_url
        self._enabled = enabled
        self._event_type = event_type
        self._id = id
        self._tenant_id = tenant_id
        self._user_guid = user_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_token(self):
        """Gets the callback_token of this Subscription.

        SalesLoft will include this token in the webhook event payload when calling your callback_url. It is strongly encouraged for your handler to verify this value in order to ensure the request came from SalesLoft.

        :return: The callback_token of this Subscription.
        :rtype: str
        """
        return self._callback_token

    @callback_token.setter
    def callback_token(self, callback_token):
        """Sets the callback_token of this Subscription.

        SalesLoft will include this token in the webhook event payload when calling your callback_url. It is strongly encouraged for your handler to verify this value in order to ensure the request came from SalesLoft.

        :param callback_token: The callback_token of this Subscription.
        :type callback_token: str
        """

        self._callback_token = callback_token

    @property
    def callback_url(self):
        """Gets the callback_url of this Subscription.

        URL for your callback handler

        :return: The callback_url of this Subscription.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Subscription.

        URL for your callback handler

        :param callback_url: The callback_url of this Subscription.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def enabled(self):
        """Gets the enabled of this Subscription.

        Is the Webhook Subscription enabled or not

        :return: The enabled of this Subscription.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Subscription.

        Is the Webhook Subscription enabled or not

        :param enabled: The enabled of this Subscription.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def event_type(self):
        """Gets the event_type of this Subscription.

        Type of event the subscription is for

        :return: The event_type of this Subscription.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Subscription.

        Type of event the subscription is for

        :param event_type: The event_type of this Subscription.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this Subscription.

        ID for the Webhook Subscription

        :return: The id of this Subscription.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        ID for the Webhook Subscription

        :param id: The id of this Subscription.
        :type id: int
        """

        self._id = id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Subscription.

        ID for the tenant to which user is assigned

        :return: The tenant_id of this Subscription.
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Subscription.

        ID for the tenant to which user is assigned

        :param tenant_id: The tenant_id of this Subscription.
        :type tenant_id: int
        """

        self._tenant_id = tenant_id

    @property
    def user_guid(self):
        """Gets the user_guid of this Subscription.

        UUID of the user the token is associated with

        :return: The user_guid of this Subscription.
        :rtype: str
        """
        return self._user_guid

    @user_guid.setter
    def user_guid(self, user_guid):
        """Sets the user_guid of this Subscription.

        UUID of the user the token is associated with

        :param user_guid: The user_guid of this Subscription.
        :type user_guid: str
        """

        self._user_guid = user_guid
