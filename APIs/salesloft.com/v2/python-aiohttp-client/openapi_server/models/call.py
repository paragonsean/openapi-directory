# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.embedded_recording_resource import EmbeddedRecordingResource
from openapi_server.models.embedded_resource import EmbeddedResource
from openapi_server import util


class Call(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: EmbeddedResource=None, cadence: EmbeddedResource=None, called_person: EmbeddedResource=None, created_at: datetime=None, crm_activity: EmbeddedResource=None, disposition: str=None, duration: int=None, id: int=None, note: EmbeddedResource=None, recordings: List[EmbeddedRecordingResource]=None, sentiment: str=None, step: EmbeddedResource=None, to: str=None, updated_at: datetime=None, user: EmbeddedResource=None):
        """Call - a model defined in OpenAPI

        :param action: The action of this Call.
        :param cadence: The cadence of this Call.
        :param called_person: The called_person of this Call.
        :param created_at: The created_at of this Call.
        :param crm_activity: The crm_activity of this Call.
        :param disposition: The disposition of this Call.
        :param duration: The duration of this Call.
        :param id: The id of this Call.
        :param note: The note of this Call.
        :param recordings: The recordings of this Call.
        :param sentiment: The sentiment of this Call.
        :param step: The step of this Call.
        :param to: The to of this Call.
        :param updated_at: The updated_at of this Call.
        :param user: The user of this Call.
        """
        self.openapi_types = {
            'action': EmbeddedResource,
            'cadence': EmbeddedResource,
            'called_person': EmbeddedResource,
            'created_at': datetime,
            'crm_activity': EmbeddedResource,
            'disposition': str,
            'duration': int,
            'id': int,
            'note': EmbeddedResource,
            'recordings': List[EmbeddedRecordingResource],
            'sentiment': str,
            'step': EmbeddedResource,
            'to': str,
            'updated_at': datetime,
            'user': EmbeddedResource
        }

        self.attribute_map = {
            'action': 'action',
            'cadence': 'cadence',
            'called_person': 'called_person',
            'created_at': 'created_at',
            'crm_activity': 'crm_activity',
            'disposition': 'disposition',
            'duration': 'duration',
            'id': 'id',
            'note': 'note',
            'recordings': 'recordings',
            'sentiment': 'sentiment',
            'step': 'step',
            'to': 'to',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._action = action
        self._cadence = cadence
        self._called_person = called_person
        self._created_at = created_at
        self._crm_activity = crm_activity
        self._disposition = disposition
        self._duration = duration
        self._id = id
        self._note = note
        self._recordings = recordings
        self._sentiment = sentiment
        self._step = step
        self._to = to
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Call':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Call of this Call.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Call.


        :return: The action of this Call.
        :rtype: EmbeddedResource
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Call.


        :param action: The action of this Call.
        :type action: EmbeddedResource
        """

        self._action = action

    @property
    def cadence(self):
        """Gets the cadence of this Call.


        :return: The cadence of this Call.
        :rtype: EmbeddedResource
        """
        return self._cadence

    @cadence.setter
    def cadence(self, cadence):
        """Sets the cadence of this Call.


        :param cadence: The cadence of this Call.
        :type cadence: EmbeddedResource
        """

        self._cadence = cadence

    @property
    def called_person(self):
        """Gets the called_person of this Call.


        :return: The called_person of this Call.
        :rtype: EmbeddedResource
        """
        return self._called_person

    @called_person.setter
    def called_person(self, called_person):
        """Sets the called_person of this Call.


        :param called_person: The called_person of this Call.
        :type called_person: EmbeddedResource
        """

        self._called_person = called_person

    @property
    def created_at(self):
        """Gets the created_at of this Call.

        Datetime of when the call was created

        :return: The created_at of this Call.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Call.

        Datetime of when the call was created

        :param created_at: The created_at of this Call.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def crm_activity(self):
        """Gets the crm_activity of this Call.


        :return: The crm_activity of this Call.
        :rtype: EmbeddedResource
        """
        return self._crm_activity

    @crm_activity.setter
    def crm_activity(self, crm_activity):
        """Sets the crm_activity of this Call.


        :param crm_activity: The crm_activity of this Call.
        :type crm_activity: EmbeddedResource
        """

        self._crm_activity = crm_activity

    @property
    def disposition(self):
        """Gets the disposition of this Call.

        Result of the call

        :return: The disposition of this Call.
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this Call.

        Result of the call

        :param disposition: The disposition of this Call.
        :type disposition: str
        """

        self._disposition = disposition

    @property
    def duration(self):
        """Gets the duration of this Call.

        Length of the call in seconds

        :return: The duration of this Call.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Call.

        Length of the call in seconds

        :param duration: The duration of this Call.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this Call.

        ID of Call

        :return: The id of this Call.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Call.

        ID of Call

        :param id: The id of this Call.
        :type id: int
        """

        self._id = id

    @property
    def note(self):
        """Gets the note of this Call.


        :return: The note of this Call.
        :rtype: EmbeddedResource
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Call.


        :param note: The note of this Call.
        :type note: EmbeddedResource
        """

        self._note = note

    @property
    def recordings(self):
        """Gets the recordings of this Call.

        The recordings for this this call and their status

        :return: The recordings of this Call.
        :rtype: List[EmbeddedRecordingResource]
        """
        return self._recordings

    @recordings.setter
    def recordings(self, recordings):
        """Sets the recordings of this Call.

        The recordings for this this call and their status

        :param recordings: The recordings of this Call.
        :type recordings: List[EmbeddedRecordingResource]
        """

        self._recordings = recordings

    @property
    def sentiment(self):
        """Gets the sentiment of this Call.

        Outcome of the conversation

        :return: The sentiment of this Call.
        :rtype: str
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this Call.

        Outcome of the conversation

        :param sentiment: The sentiment of this Call.
        :type sentiment: str
        """

        self._sentiment = sentiment

    @property
    def step(self):
        """Gets the step of this Call.


        :return: The step of this Call.
        :rtype: EmbeddedResource
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this Call.


        :param step: The step of this Call.
        :type step: EmbeddedResource
        """

        self._step = step

    @property
    def to(self):
        """Gets the to of this Call.

        Phone number that received the call

        :return: The to of this Call.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Call.

        Phone number that received the call

        :param to: The to of this Call.
        :type to: str
        """

        self._to = to

    @property
    def updated_at(self):
        """Gets the updated_at of this Call.

        Datetime of when the call was last updated

        :return: The updated_at of this Call.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Call.

        Datetime of when the call was last updated

        :param updated_at: The updated_at of this Call.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Call.


        :return: The user of this Call.
        :rtype: EmbeddedResource
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Call.


        :param user: The user of this Call.
        :type user: EmbeddedResource
        """

        self._user = user
