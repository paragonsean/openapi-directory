/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Delete an account
     *
     * Deletes an account. This operation is not reversible without contacting support. This operation can be called multiple times successfully.  Deleting an account will remove all connected people from that account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2AccountsIdJsonDeleteTest() throws ApiException {
        String id = null;
        api.v2AccountsIdJsonDelete(id);
        // TODO: test validations
    }

    /**
     * Fetch an account
     *
     * Fetches an account, by ID only. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2AccountsIdJsonGetTest() throws ApiException {
        String id = null;
        Account response = api.v2AccountsIdJsonGet(id);
        // TODO: test validations
    }

    /**
     * Update an existing Account
     *
     * Updates an account.  \&quot;domain\&quot; must be unique on the current team. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2AccountsIdJsonPutTest() throws ApiException {
        String id = null;
        String domain = null;
        String name = null;
        Integer accountTierId = null;
        Boolean archived = null;
        String city = null;
        Integer companyStageId = null;
        String companyType = null;
        String conversationalName = null;
        String country = null;
        String crmId = null;
        String crmIdType = null;
        List<Object> customFields = null;
        String description = null;
        Boolean doNotContact = null;
        String founded = null;
        String industry = null;
        String linkedinUrl = null;
        String locale = null;
        Integer ownerId = null;
        String phone = null;
        String postalCode = null;
        String revenueRange = null;
        String size = null;
        String state = null;
        String street = null;
        List<String> tags = null;
        String twitterHandle = null;
        String website = null;
        Account response = api.v2AccountsIdJsonPut(id, domain, name, accountTierId, archived, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website);
        // TODO: test validations
    }

    /**
     * List accounts
     *
     * Fetches multiple account records. The records can be filtered, paged, and sorted according to the respective parameters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2AccountsJsonGetTest() throws ApiException {
        List<Integer> ids = null;
        List<String> crmId = null;
        List<String> tag = null;
        List<Integer> tagId = null;
        List<String> createdAt = null;
        List<String> updatedAt = null;
        String domain = null;
        List<String> website = null;
        Boolean archived = null;
        List<String> name = null;
        List<Integer> accountStageId = null;
        List<Integer> accountTierId = null;
        List<String> ownerId = null;
        Boolean ownerIsActive = null;
        Object lastContacted = null;
        Object customFields = null;
        List<String> industry = null;
        List<String> country = null;
        List<String> state = null;
        List<String> city = null;
        List<String> ownerCrmId = null;
        List<String> locales = null;
        Object userRelationships = null;
        String sortBy = null;
        String sortDirection = null;
        Integer perPage = null;
        Integer page = null;
        Boolean includePagingCounts = null;
        Boolean limitPagingCounts = null;
        List<Account> response = api.v2AccountsJsonGet(ids, crmId, tag, tagId, createdAt, updatedAt, domain, website, archived, name, accountStageId, accountTierId, ownerId, ownerIsActive, lastContacted, customFields, industry, country, state, city, ownerCrmId, locales, userRelationships, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        // TODO: test validations
    }

    /**
     * Create an account
     *
     * Creates an account.  \&quot;domain\&quot; must be unique on the current team. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2AccountsJsonPostTest() throws ApiException {
        String domain = null;
        String name = null;
        Integer accountTierId = null;
        String city = null;
        Integer companyStageId = null;
        String companyType = null;
        String conversationalName = null;
        String country = null;
        String crmId = null;
        String crmIdType = null;
        List<Object> customFields = null;
        String description = null;
        Boolean doNotContact = null;
        String founded = null;
        String industry = null;
        String linkedinUrl = null;
        String locale = null;
        Integer ownerId = null;
        String phone = null;
        String postalCode = null;
        String revenueRange = null;
        String size = null;
        String state = null;
        String street = null;
        List<String> tags = null;
        String twitterHandle = null;
        String website = null;
        Account response = api.v2AccountsJsonPost(domain, name, accountTierId, city, companyStageId, companyType, conversationalName, country, crmId, crmIdType, customFields, description, doNotContact, founded, industry, linkedinUrl, locale, ownerId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, website);
        // TODO: test validations
    }

}
