/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CadenceMembership;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CadenceMembershipsApi
 */
@Disabled
public class CadenceMembershipsApiTest {

    private final CadenceMembershipsApi api = new CadenceMembershipsApi();

    /**
     * Delete a cadence membership
     *
     * Cadence Membership 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2CadenceMembershipsIdJsonDeleteTest() throws ApiException {
        String id = null;
        api.v2CadenceMembershipsIdJsonDelete(id);
        // TODO: test validations
    }

    /**
     * Fetch a cadence membership
     *
     * Fetches a cadence membership, by ID only. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2CadenceMembershipsIdJsonGetTest() throws ApiException {
        String id = null;
        CadenceMembership response = api.v2CadenceMembershipsIdJsonGet(id);
        // TODO: test validations
    }

    /**
     * List cadence memberships
     *
     * Fetches multiple cadence membership records. The records can be filtered, paged, and sorted according to the respective parameters. A cadence membership is the association between a person and their current and historical time on a cadence. Cadence membership records are mutable and change over time. If a person is added to a cadence and re-added to the same cadence in the future, there is a single membership record. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2CadenceMembershipsJsonGetTest() throws ApiException {
        List<Integer> ids = null;
        Integer personId = null;
        Integer cadenceId = null;
        List<String> updatedAt = null;
        Boolean currentlyOnCadence = null;
        String sortBy = null;
        String sortDirection = null;
        Integer perPage = null;
        Integer page = null;
        Boolean includePagingCounts = null;
        Boolean limitPagingCounts = null;
        List<CadenceMembership> response = api.v2CadenceMembershipsJsonGet(ids, personId, cadenceId, updatedAt, currentlyOnCadence, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        // TODO: test validations
    }

    /**
     * Create a cadence membership
     *
     * Adds a person to a cadence. person_id and cadence_id are required, and must be visible to the authenticated user. user_id will default to the authenticated user, but can be set to any visible user on the authenticated team.  A person cannot be added to a cadence on behalf of a teammate unless the cadence is a team cadence, the cadence is owned by the teammate, or the teammate has the Personal Cadence Admin permission. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2CadenceMembershipsJsonPostTest() throws ApiException {
        Integer personId = null;
        Integer cadenceId = null;
        Integer userId = null;
        Integer stepId = null;
        CadenceMembership response = api.v2CadenceMembershipsJsonPost(personId, cadenceId, userId, stepId);
        // TODO: test validations
    }

}
