/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Person;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeopleApi
 */
@Disabled
public class PeopleApiTest {

    private final PeopleApi api = new PeopleApi();

    /**
     * Delete a person
     *
     * Deletes a person. This operation is not reversible without contacting support. This operation can be called multiple times successfully. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PeopleIdJsonDeleteTest() throws ApiException {
        String id = null;
        api.v2PeopleIdJsonDelete(id);
        // TODO: test validations
    }

    /**
     * Fetch a person
     *
     * Fetches a person, by ID only. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PeopleIdJsonGetTest() throws ApiException {
        String id = null;
        Person response = api.v2PeopleIdJsonGet(id);
        // TODO: test validations
    }

    /**
     * Update a person
     *
     * Updates a person. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PeopleIdJsonPutTest() throws ApiException {
        String id = null;
        Integer accountId = null;
        String city = null;
        List<String> contactRestrictions = null;
        String country = null;
        String crmId = null;
        String crmIdType = null;
        Object customFields = null;
        Boolean doNotContact = null;
        String emailAddress = null;
        String firstName = null;
        String homePhone = null;
        Integer importId = null;
        String jobSeniority = null;
        String lastName = null;
        String linkedinUrl = null;
        String locale = null;
        String mobilePhone = null;
        Integer ownerId = null;
        String personCompanyIndustry = null;
        String personCompanyName = null;
        String personCompanyWebsite = null;
        Integer personStageId = null;
        String personalEmailAddress = null;
        String personalWebsite = null;
        String phone = null;
        String phoneExtension = null;
        String secondaryEmailAddress = null;
        String state = null;
        List<String> tags = null;
        String title = null;
        String twitterHandle = null;
        String workCity = null;
        String workCountry = null;
        String workState = null;
        Person response = api.v2PeopleIdJsonPut(id, accountId, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState);
        // TODO: test validations
    }

    /**
     * List people
     *
     * Fetches multiple person records. The records can be filtered, paged, and sorted according to the respective parameters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PeopleJsonGetTest() throws ApiException {
        List<Integer> ids = null;
        List<String> updatedAt = null;
        List<String> emailAddresses = null;
        List<String> ownedByGuid = null;
        List<Integer> personStageId = null;
        List<String> crmId = null;
        List<String> ownerCrmId = null;
        Boolean doNotContact = null;
        Boolean canEmail = null;
        Boolean canCall = null;
        Boolean canText = null;
        List<Integer> accountId = null;
        Object customFields = null;
        List<Integer> importId = null;
        List<String> jobSeniority = null;
        List<Integer> tagId = null;
        Boolean ownerIsActive = null;
        List<Integer> cadenceId = null;
        List<String> starredByGuid = null;
        Boolean replied = null;
        Boolean bounced = null;
        Boolean success = null;
        Boolean euResident = null;
        List<String> title = null;
        List<String> country = null;
        List<String> state = null;
        List<String> city = null;
        Object lastContacted = null;
        Object createdAt = null;
        Boolean _new = null;
        Boolean phoneNumber = null;
        List<String> locales = null;
        List<Integer> ownerId = null;
        String query = null;
        String sortBy = null;
        String sortDirection = null;
        Integer perPage = null;
        Integer page = null;
        Boolean includePagingCounts = null;
        Boolean limitPagingCounts = null;
        List<Person> response = api.v2PeopleJsonGet(ids, updatedAt, emailAddresses, ownedByGuid, personStageId, crmId, ownerCrmId, doNotContact, canEmail, canCall, canText, accountId, customFields, importId, jobSeniority, tagId, ownerIsActive, cadenceId, starredByGuid, replied, bounced, success, euResident, title, country, state, city, lastContacted, createdAt, _new, phoneNumber, locales, ownerId, query, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        // TODO: test validations
    }

    /**
     * Create a person
     *
     * Creates a person. Either email_address or phone/last_name must be provided as a unique lookup on the team. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2PeopleJsonPostTest() throws ApiException {
        Integer accountId = null;
        Boolean autotagDate = null;
        String city = null;
        List<String> contactRestrictions = null;
        String country = null;
        String crmId = null;
        String crmIdType = null;
        Object customFields = null;
        Boolean doNotContact = null;
        String emailAddress = null;
        String firstName = null;
        String homePhone = null;
        Integer importId = null;
        String jobSeniority = null;
        String lastName = null;
        String linkedinUrl = null;
        String locale = null;
        String mobilePhone = null;
        Integer ownerId = null;
        String personCompanyIndustry = null;
        String personCompanyName = null;
        String personCompanyWebsite = null;
        Integer personStageId = null;
        String personalEmailAddress = null;
        String personalWebsite = null;
        String phone = null;
        String phoneExtension = null;
        String secondaryEmailAddress = null;
        String state = null;
        List<String> tags = null;
        String title = null;
        String twitterHandle = null;
        String workCity = null;
        String workCountry = null;
        String workState = null;
        Person response = api.v2PeopleJsonPost(accountId, autotagDate, city, contactRestrictions, country, crmId, crmIdType, customFields, doNotContact, emailAddress, firstName, homePhone, importId, jobSeniority, lastName, linkedinUrl, locale, mobilePhone, ownerId, personCompanyIndustry, personCompanyName, personCompanyWebsite, personStageId, personalEmailAddress, personalWebsite, phone, phoneExtension, secondaryEmailAddress, state, tags, title, twitterHandle, workCity, workCountry, workState);
        // TODO: test validations
    }

}
