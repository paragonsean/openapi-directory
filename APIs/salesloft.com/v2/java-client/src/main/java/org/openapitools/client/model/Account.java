/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmbeddedAccountCounts;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_TIER = "account_tier";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TIER)
  private EmbeddedResource accountTier;

  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_STAGE = "company_stage";
  @SerializedName(SERIALIZED_NAME_COMPANY_STAGE)
  private EmbeddedResource companyStage;

  public static final String SERIALIZED_NAME_COMPANY_TYPE = "company_type";
  @SerializedName(SERIALIZED_NAME_COMPANY_TYPE)
  private String companyType;

  public static final String SERIALIZED_NAME_CONVERSATIONAL_NAME = "conversational_name";
  @SerializedName(SERIALIZED_NAME_CONVERSATIONAL_NAME)
  private String conversationalName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private EmbeddedAccountCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private EmbeddedResource creator;

  public static final String SERIALIZED_NAME_CRM_ID = "crm_id";
  @SerializedName(SERIALIZED_NAME_CRM_ID)
  private String crmId;

  public static final String SERIALIZED_NAME_CRM_OBJECT_TYPE = "crm_object_type";
  @SerializedName(SERIALIZED_NAME_CRM_OBJECT_TYPE)
  private String crmObjectType;

  public static final String SERIALIZED_NAME_CRM_URL = "crm_url";
  @SerializedName(SERIALIZED_NAME_CRM_URL)
  private String crmUrl;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DO_NOT_CONTACT = "do_not_contact";
  @SerializedName(SERIALIZED_NAME_DO_NOT_CONTACT)
  private Boolean doNotContact;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_FOUNDED = "founded";
  @SerializedName(SERIALIZED_NAME_FOUNDED)
  private String founded;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_LAST_CONTACTED_AT = "last_contacted_at";
  @SerializedName(SERIALIZED_NAME_LAST_CONTACTED_AT)
  private OffsetDateTime lastContactedAt;

  public static final String SERIALIZED_NAME_LAST_CONTACTED_BY = "last_contacted_by";
  @SerializedName(SERIALIZED_NAME_LAST_CONTACTED_BY)
  private EmbeddedResource lastContactedBy;

  public static final String SERIALIZED_NAME_LAST_CONTACTED_PERSON = "last_contacted_person";
  @SerializedName(SERIALIZED_NAME_LAST_CONTACTED_PERSON)
  private EmbeddedResource lastContactedPerson;

  public static final String SERIALIZED_NAME_LAST_CONTACTED_TYPE = "last_contacted_type";
  @SerializedName(SERIALIZED_NAME_LAST_CONTACTED_TYPE)
  private String lastContactedType;

  public static final String SERIALIZED_NAME_LINKEDIN_URL = "linkedin_url";
  @SerializedName(SERIALIZED_NAME_LINKEDIN_URL)
  private String linkedinUrl;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private EmbeddedResource owner;

  public static final String SERIALIZED_NAME_OWNER_CRM_ID = "owner_crm_id";
  @SerializedName(SERIALIZED_NAME_OWNER_CRM_ID)
  private String ownerCrmId;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REVENUE_RANGE = "revenue_range";
  @SerializedName(SERIALIZED_NAME_REVENUE_RANGE)
  private String revenueRange;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TWITTER_HANDLE = "twitter_handle";
  @SerializedName(SERIALIZED_NAME_TWITTER_HANDLE)
  private String twitterHandle;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_RELATIONSHIPS = "user_relationships";
  @SerializedName(SERIALIZED_NAME_USER_RELATIONSHIPS)
  private Object userRelationships;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public Account() {
  }

  public Account accountTier(EmbeddedResource accountTier) {
    this.accountTier = accountTier;
    return this;
  }

  /**
   * Get accountTier
   * @return accountTier
   */
  @javax.annotation.Nullable
  public EmbeddedResource getAccountTier() {
    return accountTier;
  }

  public void setAccountTier(EmbeddedResource accountTier) {
    this.accountTier = accountTier;
  }


  public Account archivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
    return this;
  }

  /**
   * Datetime of when the Account was archived, if archived
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }

  public void setArchivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
  }


  public Account city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Account companyStage(EmbeddedResource companyStage) {
    this.companyStage = companyStage;
    return this;
  }

  /**
   * Get companyStage
   * @return companyStage
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCompanyStage() {
    return companyStage;
  }

  public void setCompanyStage(EmbeddedResource companyStage) {
    this.companyStage = companyStage;
  }


  public Account companyType(String companyType) {
    this.companyType = companyType;
    return this;
  }

  /**
   * Type of the Account&#39;s company
   * @return companyType
   */
  @javax.annotation.Nullable
  public String getCompanyType() {
    return companyType;
  }

  public void setCompanyType(String companyType) {
    this.companyType = companyType;
  }


  public Account conversationalName(String conversationalName) {
    this.conversationalName = conversationalName;
    return this;
  }

  /**
   * Conversational name of the Account
   * @return conversationalName
   */
  @javax.annotation.Nullable
  public String getConversationalName() {
    return conversationalName;
  }

  public void setConversationalName(String conversationalName) {
    this.conversationalName = conversationalName;
  }


  public Account country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Account counts(EmbeddedAccountCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public EmbeddedAccountCounts getCounts() {
    return counts;
  }

  public void setCounts(EmbeddedAccountCounts counts) {
    this.counts = counts;
  }


  public Account createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the Account was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Account creator(EmbeddedResource creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Get creator
   * @return creator
   */
  @javax.annotation.Nullable
  public EmbeddedResource getCreator() {
    return creator;
  }

  public void setCreator(EmbeddedResource creator) {
    this.creator = creator;
  }


  public Account crmId(String crmId) {
    this.crmId = crmId;
    return this;
  }

  /**
   * CRM ID
   * @return crmId
   */
  @javax.annotation.Nullable
  public String getCrmId() {
    return crmId;
  }

  public void setCrmId(String crmId) {
    this.crmId = crmId;
  }


  public Account crmObjectType(String crmObjectType) {
    this.crmObjectType = crmObjectType;
    return this;
  }

  /**
   * CRM object type
   * @return crmObjectType
   */
  @javax.annotation.Nullable
  public String getCrmObjectType() {
    return crmObjectType;
  }

  public void setCrmObjectType(String crmObjectType) {
    this.crmObjectType = crmObjectType;
  }


  public Account crmUrl(String crmUrl) {
    this.crmUrl = crmUrl;
    return this;
  }

  /**
   * CRM url
   * @return crmUrl
   */
  @javax.annotation.Nullable
  public String getCrmUrl() {
    return crmUrl;
  }

  public void setCrmUrl(String crmUrl) {
    this.crmUrl = crmUrl;
  }


  public Account customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Custom fields are defined by the user&#39;s team. Only fields with values are presented in the API.
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Account description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Account doNotContact(Boolean doNotContact) {
    this.doNotContact = doNotContact;
    return this;
  }

  /**
   * Whether this company has opted out of communications. Do not contact someone at this company when this is set to true
   * @return doNotContact
   */
  @javax.annotation.Nullable
  public Boolean getDoNotContact() {
    return doNotContact;
  }

  public void setDoNotContact(Boolean doNotContact) {
    this.doNotContact = doNotContact;
  }


  public Account domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Website domain, not a fully qualified URI
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Account founded(String founded) {
    this.founded = founded;
    return this;
  }

  /**
   * Date or year of founding
   * @return founded
   */
  @javax.annotation.Nullable
  public String getFounded() {
    return founded;
  }

  public void setFounded(String founded) {
    this.founded = founded;
  }


  public Account id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of Account
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Account industry(String industry) {
    this.industry = industry;
    return this;
  }

  /**
   * Industry
   * @return industry
   */
  @javax.annotation.Nullable
  public String getIndustry() {
    return industry;
  }

  public void setIndustry(String industry) {
    this.industry = industry;
  }


  public Account lastContactedAt(OffsetDateTime lastContactedAt) {
    this.lastContactedAt = lastContactedAt;
    return this;
  }

  /**
   * Datetime this Account was last contacted
   * @return lastContactedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastContactedAt() {
    return lastContactedAt;
  }

  public void setLastContactedAt(OffsetDateTime lastContactedAt) {
    this.lastContactedAt = lastContactedAt;
  }


  public Account lastContactedBy(EmbeddedResource lastContactedBy) {
    this.lastContactedBy = lastContactedBy;
    return this;
  }

  /**
   * Get lastContactedBy
   * @return lastContactedBy
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLastContactedBy() {
    return lastContactedBy;
  }

  public void setLastContactedBy(EmbeddedResource lastContactedBy) {
    this.lastContactedBy = lastContactedBy;
  }


  public Account lastContactedPerson(EmbeddedResource lastContactedPerson) {
    this.lastContactedPerson = lastContactedPerson;
    return this;
  }

  /**
   * Get lastContactedPerson
   * @return lastContactedPerson
   */
  @javax.annotation.Nullable
  public EmbeddedResource getLastContactedPerson() {
    return lastContactedPerson;
  }

  public void setLastContactedPerson(EmbeddedResource lastContactedPerson) {
    this.lastContactedPerson = lastContactedPerson;
  }


  public Account lastContactedType(String lastContactedType) {
    this.lastContactedType = lastContactedType;
    return this;
  }

  /**
   * The type of the last touch to this Account. Can be call, email, other
   * @return lastContactedType
   */
  @javax.annotation.Nullable
  public String getLastContactedType() {
    return lastContactedType;
  }

  public void setLastContactedType(String lastContactedType) {
    this.lastContactedType = lastContactedType;
  }


  public Account linkedinUrl(String linkedinUrl) {
    this.linkedinUrl = linkedinUrl;
    return this;
  }

  /**
   * Full LinkedIn url
   * @return linkedinUrl
   */
  @javax.annotation.Nullable
  public String getLinkedinUrl() {
    return linkedinUrl;
  }

  public void setLinkedinUrl(String linkedinUrl) {
    this.linkedinUrl = linkedinUrl;
  }


  public Account locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Time locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Account Full Name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account owner(EmbeddedResource owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public EmbeddedResource getOwner() {
    return owner;
  }

  public void setOwner(EmbeddedResource owner) {
    this.owner = owner;
  }


  public Account ownerCrmId(String ownerCrmId) {
    this.ownerCrmId = ownerCrmId;
    return this;
  }

  /**
   * Mapped owner field from the CRM
   * @return ownerCrmId
   */
  @javax.annotation.Nullable
  public String getOwnerCrmId() {
    return ownerCrmId;
  }

  public void setOwnerCrmId(String ownerCrmId) {
    this.ownerCrmId = ownerCrmId;
  }


  public Account phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number without formatting
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Account postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Account revenueRange(String revenueRange) {
    this.revenueRange = revenueRange;
    return this;
  }

  /**
   * Estimated revenue range
   * @return revenueRange
   */
  @javax.annotation.Nullable
  public String getRevenueRange() {
    return revenueRange;
  }

  public void setRevenueRange(String revenueRange) {
    this.revenueRange = revenueRange;
  }


  public Account size(String size) {
    this.size = size;
    return this;
  }

  /**
   * Estimated number of people in employment
   * @return size
   */
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public Account state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Account street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Street name and number
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public Account tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Account addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * All tags applied to this Account
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Account twitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
    return this;
  }

  /**
   * Twitter handle, with @
   * @return twitterHandle
   */
  @javax.annotation.Nullable
  public String getTwitterHandle() {
    return twitterHandle;
  }

  public void setTwitterHandle(String twitterHandle) {
    this.twitterHandle = twitterHandle;
  }


  public Account updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the Account was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Account userRelationships(Object userRelationships) {
    this.userRelationships = userRelationships;
    return this;
  }

  /**
   * Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values
   * @return userRelationships
   */
  @javax.annotation.Nullable
  public Object getUserRelationships() {
    return userRelationships;
  }

  public void setUserRelationships(Object userRelationships) {
    this.userRelationships = userRelationships;
  }


  public Account website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountTier, account.accountTier) &&
        Objects.equals(this.archivedAt, account.archivedAt) &&
        Objects.equals(this.city, account.city) &&
        Objects.equals(this.companyStage, account.companyStage) &&
        Objects.equals(this.companyType, account.companyType) &&
        Objects.equals(this.conversationalName, account.conversationalName) &&
        Objects.equals(this.country, account.country) &&
        Objects.equals(this.counts, account.counts) &&
        Objects.equals(this.createdAt, account.createdAt) &&
        Objects.equals(this.creator, account.creator) &&
        Objects.equals(this.crmId, account.crmId) &&
        Objects.equals(this.crmObjectType, account.crmObjectType) &&
        Objects.equals(this.crmUrl, account.crmUrl) &&
        Objects.equals(this.customFields, account.customFields) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.doNotContact, account.doNotContact) &&
        Objects.equals(this.domain, account.domain) &&
        Objects.equals(this.founded, account.founded) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.industry, account.industry) &&
        Objects.equals(this.lastContactedAt, account.lastContactedAt) &&
        Objects.equals(this.lastContactedBy, account.lastContactedBy) &&
        Objects.equals(this.lastContactedPerson, account.lastContactedPerson) &&
        Objects.equals(this.lastContactedType, account.lastContactedType) &&
        Objects.equals(this.linkedinUrl, account.linkedinUrl) &&
        Objects.equals(this.locale, account.locale) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.owner, account.owner) &&
        Objects.equals(this.ownerCrmId, account.ownerCrmId) &&
        Objects.equals(this.phone, account.phone) &&
        Objects.equals(this.postalCode, account.postalCode) &&
        Objects.equals(this.revenueRange, account.revenueRange) &&
        Objects.equals(this.size, account.size) &&
        Objects.equals(this.state, account.state) &&
        Objects.equals(this.street, account.street) &&
        Objects.equals(this.tags, account.tags) &&
        Objects.equals(this.twitterHandle, account.twitterHandle) &&
        Objects.equals(this.updatedAt, account.updatedAt) &&
        Objects.equals(this.userRelationships, account.userRelationships) &&
        Objects.equals(this.website, account.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountTier, archivedAt, city, companyStage, companyType, conversationalName, country, counts, createdAt, creator, crmId, crmObjectType, crmUrl, customFields, description, doNotContact, domain, founded, id, industry, lastContactedAt, lastContactedBy, lastContactedPerson, lastContactedType, linkedinUrl, locale, name, owner, ownerCrmId, phone, postalCode, revenueRange, size, state, street, tags, twitterHandle, updatedAt, userRelationships, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountTier: ").append(toIndentedString(accountTier)).append("\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyStage: ").append(toIndentedString(companyStage)).append("\n");
    sb.append("    companyType: ").append(toIndentedString(companyType)).append("\n");
    sb.append("    conversationalName: ").append(toIndentedString(conversationalName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    crmId: ").append(toIndentedString(crmId)).append("\n");
    sb.append("    crmObjectType: ").append(toIndentedString(crmObjectType)).append("\n");
    sb.append("    crmUrl: ").append(toIndentedString(crmUrl)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doNotContact: ").append(toIndentedString(doNotContact)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    founded: ").append(toIndentedString(founded)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    lastContactedAt: ").append(toIndentedString(lastContactedAt)).append("\n");
    sb.append("    lastContactedBy: ").append(toIndentedString(lastContactedBy)).append("\n");
    sb.append("    lastContactedPerson: ").append(toIndentedString(lastContactedPerson)).append("\n");
    sb.append("    lastContactedType: ").append(toIndentedString(lastContactedType)).append("\n");
    sb.append("    linkedinUrl: ").append(toIndentedString(linkedinUrl)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    ownerCrmId: ").append(toIndentedString(ownerCrmId)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    revenueRange: ").append(toIndentedString(revenueRange)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    twitterHandle: ").append(toIndentedString(twitterHandle)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userRelationships: ").append(toIndentedString(userRelationships)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_tier");
    openapiFields.add("archived_at");
    openapiFields.add("city");
    openapiFields.add("company_stage");
    openapiFields.add("company_type");
    openapiFields.add("conversational_name");
    openapiFields.add("country");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("creator");
    openapiFields.add("crm_id");
    openapiFields.add("crm_object_type");
    openapiFields.add("crm_url");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("do_not_contact");
    openapiFields.add("domain");
    openapiFields.add("founded");
    openapiFields.add("id");
    openapiFields.add("industry");
    openapiFields.add("last_contacted_at");
    openapiFields.add("last_contacted_by");
    openapiFields.add("last_contacted_person");
    openapiFields.add("last_contacted_type");
    openapiFields.add("linkedin_url");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("owner_crm_id");
    openapiFields.add("phone");
    openapiFields.add("postal_code");
    openapiFields.add("revenue_range");
    openapiFields.add("size");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("tags");
    openapiFields.add("twitter_handle");
    openapiFields.add("updated_at");
    openapiFields.add("user_relationships");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `account_tier`
      if (jsonObj.get("account_tier") != null && !jsonObj.get("account_tier").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("account_tier"));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // validate the optional field `company_stage`
      if (jsonObj.get("company_stage") != null && !jsonObj.get("company_stage").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("company_stage"));
      }
      if ((jsonObj.get("company_type") != null && !jsonObj.get("company_type").isJsonNull()) && !jsonObj.get("company_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_type").toString()));
      }
      if ((jsonObj.get("conversational_name") != null && !jsonObj.get("conversational_name").isJsonNull()) && !jsonObj.get("conversational_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversational_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversational_name").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        EmbeddedAccountCounts.validateJsonElement(jsonObj.get("counts"));
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("creator"));
      }
      if ((jsonObj.get("crm_id") != null && !jsonObj.get("crm_id").isJsonNull()) && !jsonObj.get("crm_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crm_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crm_id").toString()));
      }
      if ((jsonObj.get("crm_object_type") != null && !jsonObj.get("crm_object_type").isJsonNull()) && !jsonObj.get("crm_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crm_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crm_object_type").toString()));
      }
      if ((jsonObj.get("crm_url") != null && !jsonObj.get("crm_url").isJsonNull()) && !jsonObj.get("crm_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crm_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crm_url").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("founded") != null && !jsonObj.get("founded").isJsonNull()) && !jsonObj.get("founded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `founded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("founded").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // validate the optional field `last_contacted_by`
      if (jsonObj.get("last_contacted_by") != null && !jsonObj.get("last_contacted_by").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("last_contacted_by"));
      }
      // validate the optional field `last_contacted_person`
      if (jsonObj.get("last_contacted_person") != null && !jsonObj.get("last_contacted_person").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("last_contacted_person"));
      }
      if ((jsonObj.get("last_contacted_type") != null && !jsonObj.get("last_contacted_type").isJsonNull()) && !jsonObj.get("last_contacted_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_contacted_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_contacted_type").toString()));
      }
      if ((jsonObj.get("linkedin_url") != null && !jsonObj.get("linkedin_url").isJsonNull()) && !jsonObj.get("linkedin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin_url").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("owner_crm_id") != null && !jsonObj.get("owner_crm_id").isJsonNull()) && !jsonObj.get("owner_crm_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_crm_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_crm_id").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("revenue_range") != null && !jsonObj.get("revenue_range").isJsonNull()) && !jsonObj.get("revenue_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenue_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenue_range").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("twitter_handle") != null && !jsonObj.get("twitter_handle").isJsonNull()) && !jsonObj.get("twitter_handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_handle").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

