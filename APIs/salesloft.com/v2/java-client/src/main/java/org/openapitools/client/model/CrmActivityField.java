/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrmActivityField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrmActivityField {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CRM_OBJECT_TYPE = "crm_object_type";
  @SerializedName(SERIALIZED_NAME_CRM_OBJECT_TYPE)
  private String crmObjectType;

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "field_type";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private String fieldType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PICKLIST_VALUES = "picklist_values";
  @SerializedName(SERIALIZED_NAME_PICKLIST_VALUES)
  private Object picklistValues;

  public static final String SERIALIZED_NAME_SALESFORCE_OBJECT_TYPE = "salesforce_object_type";
  @SerializedName(SERIALIZED_NAME_SALESFORCE_OBJECT_TYPE)
  private String salesforceObjectType;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public CrmActivityField() {
  }

  public CrmActivityField createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the CrmActivityField was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public CrmActivityField crmObjectType(String crmObjectType) {
    this.crmObjectType = crmObjectType;
    return this;
  }

  /**
   * The CRM object type that this field maps to. Valid object types are CRM dependent: Task, Phonecall, Email. 
   * @return crmObjectType
   */
  @javax.annotation.Nullable
  public String getCrmObjectType() {
    return crmObjectType;
  }

  public void setCrmObjectType(String crmObjectType) {
    this.crmObjectType = crmObjectType;
  }


  public CrmActivityField field(String field) {
    this.field = field;
    return this;
  }

  /**
   * The CRM field name
   * @return field
   */
  @javax.annotation.Nullable
  public String getField() {
    return field;
  }

  public void setField(String field) {
    this.field = field;
  }


  public CrmActivityField fieldType(String fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * The type of this field in your CRM. Certain field types can only accept structured input.
   * @return fieldType
   */
  @javax.annotation.Nullable
  public String getFieldType() {
    return fieldType;
  }

  public void setFieldType(String fieldType) {
    this.fieldType = fieldType;
  }


  public CrmActivityField id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of CrmActivityField
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CrmActivityField picklistValues(Object picklistValues) {
    this.picklistValues = picklistValues;
    return this;
  }

  /**
   * Valid picklist values, if present for this field. The format is {label &#x3D;&gt; value}. If present, only values in the picklist structure can be used as a crm param. 
   * @return picklistValues
   */
  @javax.annotation.Nullable
  public Object getPicklistValues() {
    return picklistValues;
  }

  public void setPicklistValues(Object picklistValues) {
    this.picklistValues = picklistValues;
  }


  public CrmActivityField salesforceObjectType(String salesforceObjectType) {
    this.salesforceObjectType = salesforceObjectType;
    return this;
  }

  /**
   * The Salesforce object type that this field maps to. Valid object types are: Task. More object types may be added in the future. 
   * @return salesforceObjectType
   */
  @javax.annotation.Nullable
  public String getSalesforceObjectType() {
    return salesforceObjectType;
  }

  public void setSalesforceObjectType(String salesforceObjectType) {
    this.salesforceObjectType = salesforceObjectType;
  }


  public CrmActivityField source(String source) {
    this.source = source;
    return this;
  }

  /**
   * SalesLoft object that this field is mapped for. Valid sources are: email, phone
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public CrmActivityField title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A human friendly title for this field
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CrmActivityField updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the CrmActivityField was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public CrmActivityField value(String value) {
    this.value = value;
    return this;
  }

  /**
   * A value to always be written. This value does not need to be sent to other endpoints&#39; crm params, but must be the exact value if sent. Email source fields will always have a value present. 
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrmActivityField crmActivityField = (CrmActivityField) o;
    return Objects.equals(this.createdAt, crmActivityField.createdAt) &&
        Objects.equals(this.crmObjectType, crmActivityField.crmObjectType) &&
        Objects.equals(this.field, crmActivityField.field) &&
        Objects.equals(this.fieldType, crmActivityField.fieldType) &&
        Objects.equals(this.id, crmActivityField.id) &&
        Objects.equals(this.picklistValues, crmActivityField.picklistValues) &&
        Objects.equals(this.salesforceObjectType, crmActivityField.salesforceObjectType) &&
        Objects.equals(this.source, crmActivityField.source) &&
        Objects.equals(this.title, crmActivityField.title) &&
        Objects.equals(this.updatedAt, crmActivityField.updatedAt) &&
        Objects.equals(this.value, crmActivityField.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, crmObjectType, field, fieldType, id, picklistValues, salesforceObjectType, source, title, updatedAt, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrmActivityField {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    crmObjectType: ").append(toIndentedString(crmObjectType)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    picklistValues: ").append(toIndentedString(picklistValues)).append("\n");
    sb.append("    salesforceObjectType: ").append(toIndentedString(salesforceObjectType)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("crm_object_type");
    openapiFields.add("field");
    openapiFields.add("field_type");
    openapiFields.add("id");
    openapiFields.add("picklist_values");
    openapiFields.add("salesforce_object_type");
    openapiFields.add("source");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrmActivityField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrmActivityField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrmActivityField is not found in the empty JSON string", CrmActivityField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrmActivityField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrmActivityField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crm_object_type") != null && !jsonObj.get("crm_object_type").isJsonNull()) && !jsonObj.get("crm_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crm_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crm_object_type").toString()));
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("field_type") != null && !jsonObj.get("field_type").isJsonNull()) && !jsonObj.get("field_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_type").toString()));
      }
      if ((jsonObj.get("salesforce_object_type") != null && !jsonObj.get("salesforce_object_type").isJsonNull()) && !jsonObj.get("salesforce_object_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesforce_object_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesforce_object_type").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrmActivityField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrmActivityField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrmActivityField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrmActivityField.class));

       return (TypeAdapter<T>) new TypeAdapter<CrmActivityField>() {
           @Override
           public void write(JsonWriter out, CrmActivityField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrmActivityField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrmActivityField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrmActivityField
   * @throws IOException if the JSON string is invalid with respect to CrmActivityField
   */
  public static CrmActivityField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrmActivityField.class);
  }

  /**
   * Convert an instance of CrmActivityField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

