/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveFeedItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveFeedItem {
  public static final String SERIALIZED_NAME_ALERT_METADATA = "alert_metadata";
  @SerializedName(SERIALIZED_NAME_ALERT_METADATA)
  private Object alertMetadata;

  public static final String SERIALIZED_NAME_EVENT_OCCURRED_AT = "event_occurred_at";
  @SerializedName(SERIALIZED_NAME_EVENT_OCCURRED_AT)
  private OffsetDateTime eventOccurredAt;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_ROLLUP_KEY = "rollup_key";
  @SerializedName(SERIALIZED_NAME_ROLLUP_KEY)
  private String rollupKey;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_GUID = "user_guid";
  @SerializedName(SERIALIZED_NAME_USER_GUID)
  private String userGuid;

  public LiveFeedItem() {
  }

  public LiveFeedItem alertMetadata(Object alertMetadata) {
    this.alertMetadata = alertMetadata;
    return this;
  }

  /**
   * Information about whether this event should trigger an alert
   * @return alertMetadata
   */
  @javax.annotation.Nullable
  public Object getAlertMetadata() {
    return alertMetadata;
  }

  public void setAlertMetadata(Object alertMetadata) {
    this.alertMetadata = alertMetadata;
  }


  public LiveFeedItem eventOccurredAt(OffsetDateTime eventOccurredAt) {
    this.eventOccurredAt = eventOccurredAt;
    return this;
  }

  /**
   * When this event occurred
   * @return eventOccurredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEventOccurredAt() {
    return eventOccurredAt;
  }

  public void setEventOccurredAt(OffsetDateTime eventOccurredAt) {
    this.eventOccurredAt = eventOccurredAt;
  }


  public LiveFeedItem eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of event
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public LiveFeedItem id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of this item
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LiveFeedItem message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A plaintext message for this event
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public LiveFeedItem metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The metadata created for this event
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public LiveFeedItem path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path to the application that should be followed
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public LiveFeedItem rollupKey(String rollupKey) {
    this.rollupKey = rollupKey;
    return this;
  }

  /**
   * The key that should be used to rollup events client side. null or empty values should not be rolled up
   * @return rollupKey
   */
  @javax.annotation.Nullable
  public String getRollupKey() {
    return rollupKey;
  }

  public void setRollupKey(String rollupKey) {
    this.rollupKey = rollupKey;
  }


  public LiveFeedItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * A plaintext title for this event
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public LiveFeedItem userGuid(String userGuid) {
    this.userGuid = userGuid;
    return this;
  }

  /**
   * UUID of the user this item is for
   * @return userGuid
   */
  @javax.annotation.Nullable
  public String getUserGuid() {
    return userGuid;
  }

  public void setUserGuid(String userGuid) {
    this.userGuid = userGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveFeedItem liveFeedItem = (LiveFeedItem) o;
    return Objects.equals(this.alertMetadata, liveFeedItem.alertMetadata) &&
        Objects.equals(this.eventOccurredAt, liveFeedItem.eventOccurredAt) &&
        Objects.equals(this.eventType, liveFeedItem.eventType) &&
        Objects.equals(this.id, liveFeedItem.id) &&
        Objects.equals(this.message, liveFeedItem.message) &&
        Objects.equals(this.metadata, liveFeedItem.metadata) &&
        Objects.equals(this.path, liveFeedItem.path) &&
        Objects.equals(this.rollupKey, liveFeedItem.rollupKey) &&
        Objects.equals(this.title, liveFeedItem.title) &&
        Objects.equals(this.userGuid, liveFeedItem.userGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertMetadata, eventOccurredAt, eventType, id, message, metadata, path, rollupKey, title, userGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveFeedItem {\n");
    sb.append("    alertMetadata: ").append(toIndentedString(alertMetadata)).append("\n");
    sb.append("    eventOccurredAt: ").append(toIndentedString(eventOccurredAt)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    rollupKey: ").append(toIndentedString(rollupKey)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userGuid: ").append(toIndentedString(userGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alert_metadata");
    openapiFields.add("event_occurred_at");
    openapiFields.add("event_type");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("metadata");
    openapiFields.add("path");
    openapiFields.add("rollup_key");
    openapiFields.add("title");
    openapiFields.add("user_guid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveFeedItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveFeedItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveFeedItem is not found in the empty JSON string", LiveFeedItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveFeedItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveFeedItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("rollup_key") != null && !jsonObj.get("rollup_key").isJsonNull()) && !jsonObj.get("rollup_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollup_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollup_key").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("user_guid") != null && !jsonObj.get("user_guid").isJsonNull()) && !jsonObj.get("user_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_guid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveFeedItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveFeedItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveFeedItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveFeedItem.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveFeedItem>() {
           @Override
           public void write(JsonWriter out, LiveFeedItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveFeedItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveFeedItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveFeedItem
   * @throws IOException if the JSON string is invalid with respect to LiveFeedItem
   */
  public static LiveFeedItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveFeedItem.class);
  }

  /**
   * Convert an instance of LiveFeedItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

