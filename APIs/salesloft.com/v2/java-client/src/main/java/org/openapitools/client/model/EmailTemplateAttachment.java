/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmailTemplateAttachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmailTemplateAttachment {
  public static final String SERIALIZED_NAME_ATTACHMENT_CONTENT_TYPE = "attachment_content_type";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_CONTENT_TYPE)
  private String attachmentContentType;

  public static final String SERIALIZED_NAME_ATTACHMENT_FILE_SIZE = "attachment_file_size";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_FILE_SIZE)
  private Integer attachmentFileSize;

  public static final String SERIALIZED_NAME_ATTACHMENT_FINGERPRINT = "attachment_fingerprint";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_FINGERPRINT)
  private Integer attachmentFingerprint;

  public static final String SERIALIZED_NAME_ATTACHMENT_ID = "attachment_id";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_ID)
  private Integer attachmentId;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_EMAIL_TEMPLATE = "email_template";
  @SerializedName(SERIALIZED_NAME_EMAIL_TEMPLATE)
  private EmbeddedResource emailTemplate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCANNED = "scanned";
  @SerializedName(SERIALIZED_NAME_SCANNED)
  private Boolean scanned;

  public EmailTemplateAttachment() {
  }

  public EmailTemplateAttachment attachmentContentType(String attachmentContentType) {
    this.attachmentContentType = attachmentContentType;
    return this;
  }

  /**
   * Content type of the attachment
   * @return attachmentContentType
   */
  @javax.annotation.Nullable
  public String getAttachmentContentType() {
    return attachmentContentType;
  }

  public void setAttachmentContentType(String attachmentContentType) {
    this.attachmentContentType = attachmentContentType;
  }


  public EmailTemplateAttachment attachmentFileSize(Integer attachmentFileSize) {
    this.attachmentFileSize = attachmentFileSize;
    return this;
  }

  /**
   * The size of the attachment
   * @return attachmentFileSize
   */
  @javax.annotation.Nullable
  public Integer getAttachmentFileSize() {
    return attachmentFileSize;
  }

  public void setAttachmentFileSize(Integer attachmentFileSize) {
    this.attachmentFileSize = attachmentFileSize;
  }


  public EmailTemplateAttachment attachmentFingerprint(Integer attachmentFingerprint) {
    this.attachmentFingerprint = attachmentFingerprint;
    return this;
  }

  /**
   * Unique attachment Identifier
   * @return attachmentFingerprint
   */
  @javax.annotation.Nullable
  public Integer getAttachmentFingerprint() {
    return attachmentFingerprint;
  }

  public void setAttachmentFingerprint(Integer attachmentFingerprint) {
    this.attachmentFingerprint = attachmentFingerprint;
  }


  public EmailTemplateAttachment attachmentId(Integer attachmentId) {
    this.attachmentId = attachmentId;
    return this;
  }

  /**
   * ID of the email template attachment
   * @return attachmentId
   */
  @javax.annotation.Nullable
  public Integer getAttachmentId() {
    return attachmentId;
  }

  public void setAttachmentId(Integer attachmentId) {
    this.attachmentId = attachmentId;
  }


  public EmailTemplateAttachment downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Download url of the attachment
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public EmailTemplateAttachment emailTemplate(EmbeddedResource emailTemplate) {
    this.emailTemplate = emailTemplate;
    return this;
  }

  /**
   * Get emailTemplate
   * @return emailTemplate
   */
  @javax.annotation.Nullable
  public EmbeddedResource getEmailTemplate() {
    return emailTemplate;
  }

  public void setEmailTemplate(EmbeddedResource emailTemplate) {
    this.emailTemplate = emailTemplate;
  }


  public EmailTemplateAttachment id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of email template attachment association
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EmailTemplateAttachment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the attachment
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EmailTemplateAttachment scanned(Boolean scanned) {
    this.scanned = scanned;
    return this;
  }

  /**
   * Checks if attachment has been scanned
   * @return scanned
   */
  @javax.annotation.Nullable
  public Boolean getScanned() {
    return scanned;
  }

  public void setScanned(Boolean scanned) {
    this.scanned = scanned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailTemplateAttachment emailTemplateAttachment = (EmailTemplateAttachment) o;
    return Objects.equals(this.attachmentContentType, emailTemplateAttachment.attachmentContentType) &&
        Objects.equals(this.attachmentFileSize, emailTemplateAttachment.attachmentFileSize) &&
        Objects.equals(this.attachmentFingerprint, emailTemplateAttachment.attachmentFingerprint) &&
        Objects.equals(this.attachmentId, emailTemplateAttachment.attachmentId) &&
        Objects.equals(this.downloadUrl, emailTemplateAttachment.downloadUrl) &&
        Objects.equals(this.emailTemplate, emailTemplateAttachment.emailTemplate) &&
        Objects.equals(this.id, emailTemplateAttachment.id) &&
        Objects.equals(this.name, emailTemplateAttachment.name) &&
        Objects.equals(this.scanned, emailTemplateAttachment.scanned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentContentType, attachmentFileSize, attachmentFingerprint, attachmentId, downloadUrl, emailTemplate, id, name, scanned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailTemplateAttachment {\n");
    sb.append("    attachmentContentType: ").append(toIndentedString(attachmentContentType)).append("\n");
    sb.append("    attachmentFileSize: ").append(toIndentedString(attachmentFileSize)).append("\n");
    sb.append("    attachmentFingerprint: ").append(toIndentedString(attachmentFingerprint)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    emailTemplate: ").append(toIndentedString(emailTemplate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scanned: ").append(toIndentedString(scanned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachment_content_type");
    openapiFields.add("attachment_file_size");
    openapiFields.add("attachment_fingerprint");
    openapiFields.add("attachment_id");
    openapiFields.add("download_url");
    openapiFields.add("email_template");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("scanned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailTemplateAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailTemplateAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailTemplateAttachment is not found in the empty JSON string", EmailTemplateAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailTemplateAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailTemplateAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attachment_content_type") != null && !jsonObj.get("attachment_content_type").isJsonNull()) && !jsonObj.get("attachment_content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachment_content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachment_content_type").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      // validate the optional field `email_template`
      if (jsonObj.get("email_template") != null && !jsonObj.get("email_template").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("email_template"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailTemplateAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailTemplateAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailTemplateAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailTemplateAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailTemplateAttachment>() {
           @Override
           public void write(JsonWriter out, EmailTemplateAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailTemplateAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailTemplateAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailTemplateAttachment
   * @throws IOException if the JSON string is invalid with respect to EmailTemplateAttachment
   */
  public static EmailTemplateAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailTemplateAttachment.class);
  }

  /**
   * Convert an instance of EmailTemplateAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

