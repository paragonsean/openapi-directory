/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmailTemplateCounts;
import org.openapitools.client.model.EmbeddedResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmailTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:54.467506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmailTemplate {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private Object links;

  public static final String SERIALIZED_NAME_ARCHIVED_AT = "archived_at";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_AT)
  private OffsetDateTime archivedAt;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_PREVIEW = "body_preview";
  @SerializedName(SERIALIZED_NAME_BODY_PREVIEW)
  private String bodyPreview;

  public static final String SERIALIZED_NAME_CADENCE_TEMPLATE = "cadence_template";
  @SerializedName(SERIALIZED_NAME_CADENCE_TEMPLATE)
  private Boolean cadenceTemplate;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_ENABLED = "click_tracking_enabled";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_ENABLED)
  private Boolean clickTrackingEnabled;

  public static final String SERIALIZED_NAME_COUNTS = "counts";
  @SerializedName(SERIALIZED_NAME_COUNTS)
  private EmailTemplateCounts counts;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<EmbeddedResource> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LAST_USED_AT = "last_used_at";
  @SerializedName(SERIALIZED_NAME_LAST_USED_AT)
  private OffsetDateTime lastUsedAt;

  public static final String SERIALIZED_NAME_OPEN_TRACKING_ENABLED = "open_tracking_enabled";
  @SerializedName(SERIALIZED_NAME_OPEN_TRACKING_ENABLED)
  private Boolean openTrackingEnabled;

  public static final String SERIALIZED_NAME_SHARED = "shared";
  @SerializedName(SERIALIZED_NAME_SHARED)
  private Boolean shared;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM_TEMPLATE = "team_template";
  @SerializedName(SERIALIZED_NAME_TEAM_TEMPLATE)
  private EmbeddedResource teamTemplate;

  public static final String SERIALIZED_NAME_TEMPLATE_OWNER = "template_owner";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_OWNER)
  private EmbeddedResource templateOwner;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public EmailTemplate() {
  }

  public EmailTemplate links(Object links) {
    this.links = links;
    return this;
  }

  /**
   * Links to attachments and tags resources for this email template.
   * @return links
   */
  @javax.annotation.Nullable
  public Object getLinks() {
    return links;
  }

  public void setLinks(Object links) {
    this.links = links;
  }


  public EmailTemplate archivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
    return this;
  }

  /**
   * Datetime of when the email template was archived, if archived
   * @return archivedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }

  public void setArchivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
  }


  public EmailTemplate body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Sanitized body of the email template without email signature
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public EmailTemplate bodyPreview(String bodyPreview) {
    this.bodyPreview = bodyPreview;
    return this;
  }

  /**
   * A plain text version of the first 100 characters of the body of the email template
   * @return bodyPreview
   */
  @javax.annotation.Nullable
  public String getBodyPreview() {
    return bodyPreview;
  }

  public void setBodyPreview(String bodyPreview) {
    this.bodyPreview = bodyPreview;
  }


  public EmailTemplate cadenceTemplate(Boolean cadenceTemplate) {
    this.cadenceTemplate = cadenceTemplate;
    return this;
  }

  /**
   * Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.
   * @return cadenceTemplate
   */
  @javax.annotation.Nullable
  public Boolean getCadenceTemplate() {
    return cadenceTemplate;
  }

  public void setCadenceTemplate(Boolean cadenceTemplate) {
    this.cadenceTemplate = cadenceTemplate;
  }


  public EmailTemplate clickTrackingEnabled(Boolean clickTrackingEnabled) {
    this.clickTrackingEnabled = clickTrackingEnabled;
    return this;
  }

  /**
   * Whether click tracking is enabled for this email template
   * @return clickTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getClickTrackingEnabled() {
    return clickTrackingEnabled;
  }

  public void setClickTrackingEnabled(Boolean clickTrackingEnabled) {
    this.clickTrackingEnabled = clickTrackingEnabled;
  }


  public EmailTemplate counts(EmailTemplateCounts counts) {
    this.counts = counts;
    return this;
  }

  /**
   * Get counts
   * @return counts
   */
  @javax.annotation.Nullable
  public EmailTemplateCounts getCounts() {
    return counts;
  }

  public void setCounts(EmailTemplateCounts counts) {
    this.counts = counts;
  }


  public EmailTemplate createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Datetime of when the email template was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public EmailTemplate groups(List<EmbeddedResource> groups) {
    this.groups = groups;
    return this;
  }

  public EmailTemplate addGroupsItem(EmbeddedResource groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Groups to which this template is assigned, if any
   * @return groups
   */
  @javax.annotation.Nullable
  public List<EmbeddedResource> getGroups() {
    return groups;
  }

  public void setGroups(List<EmbeddedResource> groups) {
    this.groups = groups;
  }


  public EmailTemplate id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of email template
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public EmailTemplate lastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
    return this;
  }

  /**
   * Datetime of when the email template was last used
   * @return lastUsedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUsedAt() {
    return lastUsedAt;
  }

  public void setLastUsedAt(OffsetDateTime lastUsedAt) {
    this.lastUsedAt = lastUsedAt;
  }


  public EmailTemplate openTrackingEnabled(Boolean openTrackingEnabled) {
    this.openTrackingEnabled = openTrackingEnabled;
    return this;
  }

  /**
   * Whether open tracking is enabled for this email template
   * @return openTrackingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOpenTrackingEnabled() {
    return openTrackingEnabled;
  }

  public void setOpenTrackingEnabled(Boolean openTrackingEnabled) {
    this.openTrackingEnabled = openTrackingEnabled;
  }


  public EmailTemplate shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  /**
   * Whether this email template is visible to team members (shared)
   * @return shared
   */
  @javax.annotation.Nullable
  public Boolean getShared() {
    return shared;
  }

  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public EmailTemplate subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the email template
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public EmailTemplate tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public EmailTemplate addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * All tags applied to this email template
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public EmailTemplate teamTemplate(EmbeddedResource teamTemplate) {
    this.teamTemplate = teamTemplate;
    return this;
  }

  /**
   * Get teamTemplate
   * @return teamTemplate
   */
  @javax.annotation.Nullable
  public EmbeddedResource getTeamTemplate() {
    return teamTemplate;
  }

  public void setTeamTemplate(EmbeddedResource teamTemplate) {
    this.teamTemplate = teamTemplate;
  }


  public EmailTemplate templateOwner(EmbeddedResource templateOwner) {
    this.templateOwner = templateOwner;
    return this;
  }

  /**
   * Get templateOwner
   * @return templateOwner
   */
  @javax.annotation.Nullable
  public EmbeddedResource getTemplateOwner() {
    return templateOwner;
  }

  public void setTemplateOwner(EmbeddedResource templateOwner) {
    this.templateOwner = templateOwner;
  }


  public EmailTemplate title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of the email template
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EmailTemplate updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Datetime of when the email template was last updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailTemplate emailTemplate = (EmailTemplate) o;
    return Objects.equals(this.links, emailTemplate.links) &&
        Objects.equals(this.archivedAt, emailTemplate.archivedAt) &&
        Objects.equals(this.body, emailTemplate.body) &&
        Objects.equals(this.bodyPreview, emailTemplate.bodyPreview) &&
        Objects.equals(this.cadenceTemplate, emailTemplate.cadenceTemplate) &&
        Objects.equals(this.clickTrackingEnabled, emailTemplate.clickTrackingEnabled) &&
        Objects.equals(this.counts, emailTemplate.counts) &&
        Objects.equals(this.createdAt, emailTemplate.createdAt) &&
        Objects.equals(this.groups, emailTemplate.groups) &&
        Objects.equals(this.id, emailTemplate.id) &&
        Objects.equals(this.lastUsedAt, emailTemplate.lastUsedAt) &&
        Objects.equals(this.openTrackingEnabled, emailTemplate.openTrackingEnabled) &&
        Objects.equals(this.shared, emailTemplate.shared) &&
        Objects.equals(this.subject, emailTemplate.subject) &&
        Objects.equals(this.tags, emailTemplate.tags) &&
        Objects.equals(this.teamTemplate, emailTemplate.teamTemplate) &&
        Objects.equals(this.templateOwner, emailTemplate.templateOwner) &&
        Objects.equals(this.title, emailTemplate.title) &&
        Objects.equals(this.updatedAt, emailTemplate.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, archivedAt, body, bodyPreview, cadenceTemplate, clickTrackingEnabled, counts, createdAt, groups, id, lastUsedAt, openTrackingEnabled, shared, subject, tags, teamTemplate, templateOwner, title, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailTemplate {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyPreview: ").append(toIndentedString(bodyPreview)).append("\n");
    sb.append("    cadenceTemplate: ").append(toIndentedString(cadenceTemplate)).append("\n");
    sb.append("    clickTrackingEnabled: ").append(toIndentedString(clickTrackingEnabled)).append("\n");
    sb.append("    counts: ").append(toIndentedString(counts)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUsedAt: ").append(toIndentedString(lastUsedAt)).append("\n");
    sb.append("    openTrackingEnabled: ").append(toIndentedString(openTrackingEnabled)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    teamTemplate: ").append(toIndentedString(teamTemplate)).append("\n");
    sb.append("    templateOwner: ").append(toIndentedString(templateOwner)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("archived_at");
    openapiFields.add("body");
    openapiFields.add("body_preview");
    openapiFields.add("cadence_template");
    openapiFields.add("click_tracking_enabled");
    openapiFields.add("counts");
    openapiFields.add("created_at");
    openapiFields.add("groups");
    openapiFields.add("id");
    openapiFields.add("last_used_at");
    openapiFields.add("open_tracking_enabled");
    openapiFields.add("shared");
    openapiFields.add("subject");
    openapiFields.add("tags");
    openapiFields.add("team_template");
    openapiFields.add("template_owner");
    openapiFields.add("title");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailTemplate is not found in the empty JSON string", EmailTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_preview") != null && !jsonObj.get("body_preview").isJsonNull()) && !jsonObj.get("body_preview").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_preview` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_preview").toString()));
      }
      // validate the optional field `counts`
      if (jsonObj.get("counts") != null && !jsonObj.get("counts").isJsonNull()) {
        EmailTemplateCounts.validateJsonElement(jsonObj.get("counts"));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            EmbeddedResource.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `team_template`
      if (jsonObj.get("team_template") != null && !jsonObj.get("team_template").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("team_template"));
      }
      // validate the optional field `template_owner`
      if (jsonObj.get("template_owner") != null && !jsonObj.get("template_owner").isJsonNull()) {
        EmbeddedResource.validateJsonElement(jsonObj.get("template_owner"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailTemplate>() {
           @Override
           public void write(JsonWriter out, EmailTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailTemplate
   * @throws IOException if the JSON string is invalid with respect to EmailTemplate
   */
  public static EmailTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailTemplate.class);
  }

  /**
   * Convert an instance of EmailTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

