/*
 * SalesLoft Platform
 * SalesLoft helps transform sales teams into modern sales organizations  - converting more target accounts into customer accounts 
 *
 * The version of the OpenAPI document: v2
 * Contact: integrations@salesloft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Meeting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MeetingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeetingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MeetingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2MeetingsIdJsonPut
     * @param id Meeting ID (required)
     * @param eventId Meeting ID from the calendar provider (optional)
     * @param iCalUid Meeting unique identifier (iCalUID) (optional)
     * @param noShow Whether the meeting is a No Show meeting (optional)
     * @param rescheduleStatus Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry (optional)
     * @param status Status of the meeting creation progress. Possible values are: pending, booked, failed, retry (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsIdJsonPutCall(String id, String eventId, String iCalUid, Boolean noShow, String rescheduleStatus, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/meetings/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventId != null) {
            localVarFormParams.put("event_id", eventId);
        }

        if (iCalUid != null) {
            localVarFormParams.put("i_cal_uid", iCalUid);
        }

        if (noShow != null) {
            localVarFormParams.put("no_show", noShow);
        }

        if (rescheduleStatus != null) {
            localVarFormParams.put("reschedule_status", rescheduleStatus);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2MeetingsIdJsonPutValidateBeforeCall(String id, String eventId, String iCalUid, Boolean noShow, String rescheduleStatus, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2MeetingsIdJsonPut(Async)");
        }

        return v2MeetingsIdJsonPutCall(id, eventId, iCalUid, noShow, rescheduleStatus, status, _callback);

    }

    /**
     * Update a meeting
     * Updates a meeting, by ID only. 
     * @param id Meeting ID (required)
     * @param eventId Meeting ID from the calendar provider (optional)
     * @param iCalUid Meeting unique identifier (iCalUID) (optional)
     * @param noShow Whether the meeting is a No Show meeting (optional)
     * @param rescheduleStatus Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry (optional)
     * @param status Status of the meeting creation progress. Possible values are: pending, booked, failed, retry (optional)
     * @return Meeting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Meeting v2MeetingsIdJsonPut(String id, String eventId, String iCalUid, Boolean noShow, String rescheduleStatus, String status) throws ApiException {
        ApiResponse<Meeting> localVarResp = v2MeetingsIdJsonPutWithHttpInfo(id, eventId, iCalUid, noShow, rescheduleStatus, status);
        return localVarResp.getData();
    }

    /**
     * Update a meeting
     * Updates a meeting, by ID only. 
     * @param id Meeting ID (required)
     * @param eventId Meeting ID from the calendar provider (optional)
     * @param iCalUid Meeting unique identifier (iCalUID) (optional)
     * @param noShow Whether the meeting is a No Show meeting (optional)
     * @param rescheduleStatus Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry (optional)
     * @param status Status of the meeting creation progress. Possible values are: pending, booked, failed, retry (optional)
     * @return ApiResponse&lt;Meeting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Meeting> v2MeetingsIdJsonPutWithHttpInfo(String id, String eventId, String iCalUid, Boolean noShow, String rescheduleStatus, String status) throws ApiException {
        okhttp3.Call localVarCall = v2MeetingsIdJsonPutValidateBeforeCall(id, eventId, iCalUid, noShow, rescheduleStatus, status, null);
        Type localVarReturnType = new TypeToken<Meeting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a meeting (asynchronously)
     * Updates a meeting, by ID only. 
     * @param id Meeting ID (required)
     * @param eventId Meeting ID from the calendar provider (optional)
     * @param iCalUid Meeting unique identifier (iCalUID) (optional)
     * @param noShow Whether the meeting is a No Show meeting (optional)
     * @param rescheduleStatus Status of the meeting rescheduling progress. Possible values are: pending, booked, failed, retry (optional)
     * @param status Status of the meeting creation progress. Possible values are: pending, booked, failed, retry (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsIdJsonPutAsync(String id, String eventId, String iCalUid, Boolean noShow, String rescheduleStatus, String status, final ApiCallback<Meeting> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2MeetingsIdJsonPutValidateBeforeCall(id, eventId, iCalUid, noShow, rescheduleStatus, status, _callback);
        Type localVarReturnType = new TypeToken<Meeting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2MeetingsJsonGet
     * @param ids IDs of meetings to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param status Filters meetings by status. Possible values are: pending, booked, failed, retry (optional)
     * @param personId Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param accountId Filters meetings by account_id. Multiple account ids can be applied (optional)
     * @param personIds Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param eventIds List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param iCalUids List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param taskIds Filters meetings by task_id. Multiple task ids can be applied (optional)
     * @param includeMeetingsSettings Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects (optional)
     * @param startTime Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuids Filters meetings by user_guid. Multiple user guids can be applied (optional)
     * @param showDeleted Whether to include deleted events in the result (optional)
     * @param sortBy Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsJsonGetCall(List<Integer> ids, String status, String personId, String accountId, List<Integer> personIds, List<String> eventIds, List<String> iCalUids, List<Integer> taskIds, Boolean includeMeetingsSettings, List<String> startTime, List<String> createdAt, List<String> userGuids, Boolean showDeleted, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/meetings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person_id", personId));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (personIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "person_ids", personIds));
        }

        if (eventIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_ids", eventIds));
        }

        if (iCalUids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "i_cal_uids", iCalUids));
        }

        if (taskIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "task_ids", taskIds));
        }

        if (includeMeetingsSettings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_meetings_settings", includeMeetingsSettings));
        }

        if (startTime != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "start_time", startTime));
        }

        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "created_at", createdAt));
        }

        if (userGuids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "user_guids", userGuids));
        }

        if (showDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_deleted", showDeleted));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (includePagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_paging_counts", includePagingCounts));
        }

        if (limitPagingCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit_paging_counts", limitPagingCounts));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2MeetingsJsonGetValidateBeforeCall(List<Integer> ids, String status, String personId, String accountId, List<Integer> personIds, List<String> eventIds, List<String> iCalUids, List<Integer> taskIds, Boolean includeMeetingsSettings, List<String> startTime, List<String> createdAt, List<String> userGuids, Boolean showDeleted, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback _callback) throws ApiException {
        return v2MeetingsJsonGetCall(ids, status, personId, accountId, personIds, eventIds, iCalUids, taskIds, includeMeetingsSettings, startTime, createdAt, userGuids, showDeleted, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);

    }

    /**
     * List meetings
     * Fetches multiple meeting records. The records can be filtered, paged, and sorted according to the respective parameters. Meetings resource is responsible for events created via the Salesloft platform using calendaring features. These events can relate to cadences, people, and accounts. 
     * @param ids IDs of meetings to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param status Filters meetings by status. Possible values are: pending, booked, failed, retry (optional)
     * @param personId Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param accountId Filters meetings by account_id. Multiple account ids can be applied (optional)
     * @param personIds Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param eventIds List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param iCalUids List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param taskIds Filters meetings by task_id. Multiple task ids can be applied (optional)
     * @param includeMeetingsSettings Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects (optional)
     * @param startTime Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuids Filters meetings by user_guid. Multiple user guids can be applied (optional)
     * @param showDeleted Whether to include deleted events in the result (optional)
     * @param sortBy Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return List&lt;Meeting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<Meeting> v2MeetingsJsonGet(List<Integer> ids, String status, String personId, String accountId, List<Integer> personIds, List<String> eventIds, List<String> iCalUids, List<Integer> taskIds, Boolean includeMeetingsSettings, List<String> startTime, List<String> createdAt, List<String> userGuids, Boolean showDeleted, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        ApiResponse<List<Meeting>> localVarResp = v2MeetingsJsonGetWithHttpInfo(ids, status, personId, accountId, personIds, eventIds, iCalUids, taskIds, includeMeetingsSettings, startTime, createdAt, userGuids, showDeleted, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts);
        return localVarResp.getData();
    }

    /**
     * List meetings
     * Fetches multiple meeting records. The records can be filtered, paged, and sorted according to the respective parameters. Meetings resource is responsible for events created via the Salesloft platform using calendaring features. These events can relate to cadences, people, and accounts. 
     * @param ids IDs of meetings to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param status Filters meetings by status. Possible values are: pending, booked, failed, retry (optional)
     * @param personId Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param accountId Filters meetings by account_id. Multiple account ids can be applied (optional)
     * @param personIds Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param eventIds List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param iCalUids List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param taskIds Filters meetings by task_id. Multiple task ids can be applied (optional)
     * @param includeMeetingsSettings Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects (optional)
     * @param startTime Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuids Filters meetings by user_guid. Multiple user guids can be applied (optional)
     * @param showDeleted Whether to include deleted events in the result (optional)
     * @param sortBy Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @return ApiResponse&lt;List&lt;Meeting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Meeting>> v2MeetingsJsonGetWithHttpInfo(List<Integer> ids, String status, String personId, String accountId, List<Integer> personIds, List<String> eventIds, List<String> iCalUids, List<Integer> taskIds, Boolean includeMeetingsSettings, List<String> startTime, List<String> createdAt, List<String> userGuids, Boolean showDeleted, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts) throws ApiException {
        okhttp3.Call localVarCall = v2MeetingsJsonGetValidateBeforeCall(ids, status, personId, accountId, personIds, eventIds, iCalUids, taskIds, includeMeetingsSettings, startTime, createdAt, userGuids, showDeleted, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, null);
        Type localVarReturnType = new TypeToken<List<Meeting>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List meetings (asynchronously)
     * Fetches multiple meeting records. The records can be filtered, paged, and sorted according to the respective parameters. Meetings resource is responsible for events created via the Salesloft platform using calendaring features. These events can relate to cadences, people, and accounts. 
     * @param ids IDs of meetings to fetch. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param status Filters meetings by status. Possible values are: pending, booked, failed, retry (optional)
     * @param personId Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param accountId Filters meetings by account_id. Multiple account ids can be applied (optional)
     * @param personIds Filters meetings by person_id. Multiple person ids can be applied (optional)
     * @param eventIds List of event IDs. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param iCalUids List of UIDs provided by calendar provider. If both event_ids and i_cal_uids params are passed, this filters will be ORed. If a record can&#39;t be found, that record won&#39;t be returned and your request will be successful (optional)
     * @param taskIds Filters meetings by task_id. Multiple task ids can be applied (optional)
     * @param includeMeetingsSettings Flag to indicate whether to include owned_by_meetings_settings and booked_by_meetings_settings objects (optional)
     * @param startTime Equality filters that are applied to the start_time field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param createdAt Equality filters that are applied to the created_at field. A single filter can be used by itself or combined with other filters to create a range.  ---CUSTOM--- {\&quot;type\&quot;:\&quot;object\&quot;,\&quot;keys\&quot;:[{\&quot;name\&quot;:\&quot;gt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;gte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lt\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;},{\&quot;name\&quot;:\&quot;lte\&quot;,\&quot;type\&quot;:\&quot;iso8601 string\&quot;,\&quot;description\&quot;:\&quot;Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\&quot;}]}  (optional)
     * @param userGuids Filters meetings by user_guid. Multiple user guids can be applied (optional)
     * @param showDeleted Whether to include deleted events in the result (optional)
     * @param sortBy Key to sort on, must be one of: start_time, created_at, updated_at. Defaults to start_time (optional)
     * @param sortDirection Direction to sort in, must be one of: ASC, DESC. Defaults to DESC (optional)
     * @param perPage How many records to show per page in the range [1, 100]. Defaults to 25 (optional)
     * @param page The current page to fetch results from. Defaults to 1 (optional)
     * @param includePagingCounts Whether to include total_pages and total_count in the metadata. Defaults to false (optional)
     * @param limitPagingCounts Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2MeetingsJsonGetAsync(List<Integer> ids, String status, String personId, String accountId, List<Integer> personIds, List<String> eventIds, List<String> iCalUids, List<Integer> taskIds, Boolean includeMeetingsSettings, List<String> startTime, List<String> createdAt, List<String> userGuids, Boolean showDeleted, String sortBy, String sortDirection, Integer perPage, Integer page, Boolean includePagingCounts, Boolean limitPagingCounts, final ApiCallback<List<Meeting>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2MeetingsJsonGetValidateBeforeCall(ids, status, personId, accountId, personIds, eventIds, iCalUids, taskIds, includeMeetingsSettings, startTime, createdAt, userGuids, showDeleted, sortBy, sortDirection, perPage, page, includePagingCounts, limitPagingCounts, _callback);
        Type localVarReturnType = new TypeToken<List<Meeting>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
